{"version":3,"sources":["adf.js","dashboard.js","grid.js","order-by-object-key.js","provider.js","opengate-angular-dashboard-framework-tpls.min.js","widget-content.js","widget-grid.js","widget-service.js","opengate-angular-dashboard-framework.tpl.js","opengate-angular-dashboard-framework-tpls.js"],"names":["window","undefined","angular","module","value","directive","$rootScope","$log","$timeout","$uibModal","dashboard","adfTemplatePath","$translate","Upload","stringToBoolean","string","isDefined","toLowerCase","Boolean","createConfiguration","type","cfg","config","widgets","copy","createWidget","wdgt","widget","addNewWidgetToModel","model","name","forceToSave","grid","newWidget","width","height","x","y","definition","push","$broadcast","error","isEditModeImmediate","edit","immediate","openEditMode","$scope","createCategories","categories","forEach","key","category","title","instant","description","isUndefined","createCategoriesList","categoryTags","categoriesTmp","split","idx","translatedCat","indexOf","replace","restrict","transclude","scope","collapsible","editable","editMode","continuousEditMode","maximizable","adfModel","adfWidgetFilter","hideButtons","extraData","controller","getNewModalScope","$new","widgetFilter","_getReloadWidgets","reloadWidgets","configChange","reload","ftype","Ftype","id","wid","filter","w","f","ft","updateWidgetFilters","widgetFilters","length","element","options","$watch","oldVal","newVal","titleTemplateUrl","toggleEditMode","openConfigWindow","modelCopy","editDashboardDialog","adfToggleEditMode","$on","event","isNewDashboard","adfCancelEditMode","cancelEditMode","adfWidgetRemoved","index","widgetTmp","splice","adfEditDashboardDialog","adfLaunchSearchingFromWidget","adfWindowTimeChangedFromWidget","editDashboardScope","backgroundColor","time","Date","backgroundImage","file","backgroundSize","backgroundImageSize","100% 100%","contain","cover","iconConfiguration","iconType","url","icon","image","imageSelected","base64DataUrl","then","removeDataFile","backgroundImageSelected","removeBackgroundFile","adfEditTemplatePath","editTemplateUrl","instance","open","templateUrl","backdrop","keyboard","size","closeDialog","close","$destroy","adfOpenWidgetFromOther","internal_config","_config","merge","adfOpenModalWidgetFromOther","widgetType","sendSelection","fullScreenScope","opts","modalSize","windowClass","temporal","persistDashboard","this","$parent","adfAddWidgetDialog","addWidgetDialog","addScopeCfg","widgetSortingDirection","widgetSorting","addScope","isFunction","availableCategories","adfAddTemplatePath","addTemplateUrl","widgetFilterCfg","addWidget","changeThumbnail","images","_currThumb","_currImg","link","$element","$attr","enableConfirmDelete","editing","preLink","gridOptions","cellHeight","verticalMargin","animate","float","alwaysShowResizeHandle","minWidth","auto","resizable","handles","disableDrag","disableResize","gsHandler","compile","pre","dashEvents","enable","disable","GridStackUI","Utils","sort","onChange","items","onDragStart","ui","console","log","onDragStop","onResizeStart","onResizeStop","onItemAdded","item","onItemRemoved","dashEvt","$filter","array","objectKey","provider","widgetsPath","messageTemplate","loadingTemplate","customWidgetTemplatePath","defaultApplyFunction","extend","frameless","apply","path","template","templatePath","$get","cid","getTime","idEquals","other","toString","$q","widgetService","$compile","$controller","$injector","renderError","msg","warn","html","compileWidget","currentScope","configChanged","_getWindowTime","from","newScope","windowFilter","to","moment","subtract","_d","translateMessage","content","extra","is_menu","menu","isPaginationEnable","reloadData","navOptionsHandler","firstLoad","renderWidget","is_itemsPerPage","itemsPerPage","page","getWindowTime","winTime","eval","rawdate","format","templateScope","_from","selectionManager","base","resolvers","$tpl","getTemplate","resolve","promise","isString","get","invoke","all","locals","resolveAs","templateCtrl","controllerAs","children","data","contents","reason","require","filterHandler","widgetActionsHandler","attrs","adfWidgetGridCtrl","search","widgetConfigChangedEvt","changeWidgets","widgetReloadEvt","reloadWidget","$interval","Filter","toastr","styleClass","fromJson","show_modal_footer","show_reload_config","widgetState","isCollapsed","collapsed","debug","postLink","deleteWidget","remove","deleteScope","deleteTemplateUrl","deleteDialog","print","isExecuteOperationEnabled","entityKey","headersFilter","oql","executeOperation","typeFilter","showFilter","showFinalFilter","launchSearching","launchSearchingAdv","filterApplied","executeSearch","quick","json","Object","keys","trim","launchSearchingQuick","launchSearchingShared","shared","filterSharedSelect","$item","$model","filterSharedRemove","timeObj","enter","keycode","keyCode","which","customSelectors","getCustomSelectors","widgetSelectors","findFields","fields","$apply","err","changeDirection","direction","debugQuery","parseQuery","toJson","unknownWords","filter_error","autocomplete_options","suggest","suggest_field_delimited","selectedItems","currentSelection","isSelected","obj","totalSelected","sendEntities","manageSelectedItems","selectionScope","selectionConfig","operationTypes","filterTypes","selected","manageItemsSelectedTemplate","animation","restoreSelection","clearSelection","applyFilter","customOql","filterAction","operationType","saveChangesDialog","finalSelection","visible","selectedItemsLength","lastItem","createApplyPromise","result","deferred","defer","reject","when","editScope","saveDialog","validationError","applyFn","editScopeDefinition","setReloadTimeout","_setFilterType","selectFilter","filterId","_widgetFilters","sharedFilters","loadingData","startLoading","stopLoading","lastMessageTime","setStatusMessage","message","statusMessage","changeFilter","actions","setActions","adfDashboardCollapseExpand","args","collapseExpandStatus","adfWidgetEnterEditMode","adfIsEditMode","adfDashboardChanged","widgetConfigChanged","adfDashboardEditsCancelled","openFullScreen","$emit","openAboutScreen","modalInstance","$uibModalInstance","information","about","info","ok","selectedItem","saveWidgetScreen","wId","objectSelector","fileName","createQuickFilter","fieldsQuickSearch","criteria","_filter","or","field","operator","downloadCsv","extra_filter","columns","scope_filter","final_filter","order","window_filter","onWindowTimeChanged","and","JSON","parse","generateQR","stopReloadTimeout","addItemToSelection","removeItemFromSelection","reloadPeriod","isNaN","cancel","post","factory","$http","$sce","$templateCache","parseUrl","parsedUrl","substring","exposed","tpl","getTrustedResourceUrl","success","response","put","run"],"mappings":"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","file":"opengate-angular-dashboard-framework-tpls.min.js","sourcesContent":["/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('adf', ['adf.provider', 'ui.bootstrap', 'opengate-angular-js'])\r\n    .value('adfTemplatePath', '../src/templates/')\r\n    .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\r\n    .value('adfVersion', '<<adfVersion>>');","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name adf.directive:adfDashboard\r\n * @element div\r\n * @restrict EA\r\n * @scope\r\n * @description\r\n *\r\n * `adfDashboard` is a directive which renders the dashboard with all its\r\n * components. The directive requires a name attribute. The name of the\r\n * dashboard can be used to store the model.\r\n *\r\n * @param {string} name name of the dashboard. This attribute is required.\r\n * @param {boolean=} editable false to disable the editmode of the dashboard.\r\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\r\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\r\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\r\n * @param {object=} adfModel model object of the dashboard.\r\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\r\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\r\n *                   events during edit mode not reset it if edit mode is exited.\r\n * @param {boolean=} categories enable categories for the add widget dialog.\r\n */\r\n\r\nangular.module('adf')\r\n    .directive('adfDashboard', function ($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath, $translate, Upload) {\r\n        'use strict';\r\n\r\n        function stringToBoolean(string) {\r\n            switch (angular.isDefined(string) ? string.toLowerCase() : null) {\r\n                case 'true':\r\n                case 'yes':\r\n                case '1':\r\n                    return true;\r\n                case 'false':\r\n                case 'no':\r\n                case '0':\r\n                case null:\r\n                    return false;\r\n                default:\r\n                    return Boolean(string);\r\n            }\r\n        }\r\n\r\n        function createConfiguration(type) {\r\n            var cfg = {};\r\n            var config = dashboard.widgets[type].config || {};\r\n            cfg = angular.copy(config);\r\n            return cfg;\r\n        }\r\n\r\n        function createWidget(type) {\r\n            var wdgt = {};\r\n            var widget = dashboard.widgets[type];\r\n            if (widget) {\r\n                wdgt = angular.copy(widget);\r\n            }\r\n            return wdgt;\r\n        }\r\n\r\n        /**\r\n         * Adds the widget to first column of the model.\r\n         *\r\n         * @param dashboard model\r\n         * @param widget to add to model\r\n         * @param name name of the dashboard\r\n         */\r\n        function addNewWidgetToModel(model, widget, name, forceToSave) {\r\n            if (model) {\r\n                if (!model.grid) {\r\n                    model.grid = [];\r\n                }\r\n\r\n                var newWidget = {\r\n                    width: 3,\r\n                    height: 2,\r\n                    x: 0,\r\n                    y: 0,\r\n                    definition: widget\r\n                };\r\n                model.grid.push(newWidget);\r\n\r\n                $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\r\n\r\n                if (forceToSave) {\r\n                    $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n                }\r\n            } else {\r\n                $log.error('model is undefined');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Checks if the edit mode of the widget should be opened immediately.\r\n         *\r\n         * @param widget type\r\n         */\r\n        function isEditModeImmediate(type) {\r\n            var widget = dashboard.widgets[type];\r\n            return widget && widget.edit && widget.edit.immediate;\r\n        }\r\n\r\n        /**\r\n         * Opens the edit mode of the specified widget.\r\n         *\r\n         * @param dashboard scope\r\n         * @param widget\r\n         */\r\n        function openEditMode($scope, widget) {\r\n            // wait some time before fire enter edit mode event\r\n            $timeout(function () {\r\n                $scope.$broadcast('adfWidgetEnterEditMode', widget);\r\n            }, 200);\r\n        }\r\n\r\n        /**\r\n         * Creates object with the category name as key and an array of widgets as value.\r\n         *\r\n         * @param widgets array of widgets\r\n         *\r\n         * @return array of categories\r\n         */\r\n        function createCategories(widgets) {\r\n            var categories = {};\r\n            angular.forEach(widgets, function (widget, key) {\r\n                var category = widget.category;\r\n                // if the widget has no category use a default one\r\n                if (!category) {\r\n                    category = 'ADF.CATEGORY.MISCELANOUS';\r\n                }\r\n\r\n                widget.title = $translate.instant(widget.title);\r\n                widget.description = $translate.instant(widget.description);\r\n                widget.category = $translate.instant(widget.category);\r\n\r\n                // push widget to category array\r\n                if (angular.isUndefined(categories[widget.category])) {\r\n                    categories[widget.category] = {\r\n                        widgets: {}\r\n                    };\r\n                }\r\n\r\n                categories[widget.category].widgets[key] = widget;\r\n            });\r\n            return categories;\r\n        }\r\n\r\n        function createCategoriesList(widgets) {\r\n            var categories = [];\r\n            angular.forEach(widgets, function (widget, key) {\r\n                if (!widget.category) {\r\n                    widget.category = 'ADF.CATEGORY.MISCELLANEOUS';\r\n                }\r\n\r\n                widget.title = $translate.instant(widget.title);\r\n                widget.description = $translate.instant(widget.description);\r\n                widget.category = $translate.instant(widget.category);\r\n\r\n                if (!widget.categoryTags) {\r\n                    widget.categoryTags = 'ADF.CATEGORY.TAG.MISCELLANEOUS';\r\n                }\r\n\r\n                var categoriesTmp = widget.categoryTags.split(',');\r\n\r\n                angular.forEach(categoriesTmp, function (category, idx) {\r\n                    // push widget to category array\r\n                    var translatedCat = $translate.instant(category);\r\n                    if (categories.indexOf(translatedCat) === -1)\r\n                        categories.push(translatedCat);\r\n                });\r\n\r\n            });\r\n            return categories;\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            scope: {\r\n                name: '@',\r\n                collapsible: '@',\r\n                editable: '@',\r\n                editMode: '@',\r\n                continuousEditMode: '=',\r\n                maximizable: '@',\r\n                adfModel: '=',\r\n                adfWidgetFilter: '=',\r\n                categories: '@',\r\n                hideButtons: '=',\r\n                extraData: '='\r\n            },\r\n            controller: function ($scope) {\r\n                var model = {};\r\n                var widgetFilter = null;\r\n                var name = $scope.name;\r\n\r\n                var _getReloadWidgets = function (widget) {\r\n                    var reloadWidgets = {\r\n                        configChange: [],\r\n                        reload: []\r\n                    };\r\n                    if (widget) {\r\n                        var definition = angular.copy(widget.definition);\r\n                        var ftype = definition.Ftype;\r\n                        var id = definition.wid;\r\n                        var config = definition.config || {};\r\n                        var filter = config.filter;\r\n                        model.grid.forEach(function (w) {\r\n                            var f = w.definition.config.filter;\r\n                            var ft = w.definition.Ftype;\r\n                            //solo recargamos y actualizamos los widgets:\r\n                            // - que tengan filtro\r\n                            // y que el id tenga filtro\r\n                            // y que el id del filtro coincida con el wid del widget que ha modificado el fitro\r\n                            if (f && f.id && f.id === id) {\r\n                                w.definition.config.filter = filter;\r\n                                w.definition.config.filter.id = id;\r\n                                reloadWidgets.reload.push(w.definition.wid);\r\n                            } else if (ftype === ft) {\r\n                                reloadWidgets.configChange.push(w.definition.wid);\r\n                            }\r\n                        });\r\n                    }\r\n                    return reloadWidgets;\r\n                };\r\n\r\n                var updateWidgetFilters = function (model) {\r\n                    var widgetFilters = [];\r\n                    var grid = model.grid;\r\n                    if (grid && grid.length > 0) {\r\n                        grid.forEach(function (element) {\r\n                            var definition = element.definition;\r\n                            var config = definition.config || {};\r\n                            var filter = config.filter;\r\n                            widgetFilters.push({\r\n                                wid: definition.wid,\r\n                                title: definition.title,\r\n                                filter: filter,\r\n                                Ftype: definition.Ftype\r\n                            });\r\n                        });\r\n                    }\r\n                    if (!$scope.options) {\r\n                        $scope.options = {\r\n                            extraData: {}\r\n                        };\r\n                    }\r\n                    $scope.options.extraData.widgetFilters = widgetFilters;\r\n                };\r\n                // Watching for changes on adfModel\r\n                $scope.$watch('adfModel', function (oldVal, newVal) {\r\n                    // has model changed or is the model attribute not set\r\n                    if (newVal !== null || (oldVal === null && newVal === null)) {\r\n                        model = $scope.adfModel;\r\n                        widgetFilter = $scope.adfWidgetFilter;\r\n\r\n                        if (model) {\r\n                            updateWidgetFilters(model);\r\n                            if (!model.title) {\r\n                                model.title = $translate.instant('ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD');\r\n                            }\r\n                            if (!model.titleTemplateUrl) {\r\n                                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\r\n                            }\r\n                            $scope.model = model;\r\n                        } else {\r\n                            $log.error('could not find or create model');\r\n                        }\r\n                    }\r\n                }, true);\r\n\r\n                // edit mode\r\n                $scope.editMode = false;\r\n\r\n                function getNewModalScope() {\r\n                    var scope = $scope.$new();\r\n                    return scope;\r\n                }\r\n\r\n                $scope.toggleEditMode = function (openConfigWindow) {\r\n                    $scope.editMode = !$scope.editMode;\r\n                    if ($scope.editMode) {\r\n                        if (!$scope.continuousEditMode) {\r\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n                            $rootScope.$broadcast('adfIsEditMode');\r\n                        }\r\n\r\n                        if (openConfigWindow) {\r\n                            $scope.editDashboardDialog();\r\n                        }\r\n                    }\r\n\r\n                    if (!$scope.editMode) {\r\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n                    }\r\n                };\r\n\r\n                var adfToggleEditMode = $scope.$on('adfToggleEditMode', function (event, isNewDashboard) {\r\n                    if (isNewDashboard) {\r\n                        $scope.toggleEditMode(true);\r\n                    } else {\r\n                        $scope.toggleEditMode();\r\n                    }\r\n                });\r\n\r\n                var adfCancelEditMode = $scope.$on('adfCancelEditMode', function (event) {\r\n                    if ($scope.editMode) {\r\n                        $scope.cancelEditMode();\r\n                    }\r\n                });\r\n\r\n                var adfWidgetRemoved = $scope.$on('adfWidgetRemovedFromGrid', function (event, widget) {\r\n                    var index = null;\r\n                    angular.forEach($scope.adfModel.grid, function (widgetTmp, idx) {\r\n                        if (widgetTmp.definition.wid === widget.wid) {\r\n                            index = idx;\r\n                        }\r\n                    });\r\n\r\n                    if (index >= 0) {\r\n                        $scope.adfModel.grid.splice(index, 1);\r\n                    }\r\n                });\r\n\r\n                $scope.cancelEditMode = function () {\r\n                    $scope.editMode = false;\r\n                    if (!$scope.continuousEditMode && ($scope.modelCopy !== $scope.adfModel)) {\r\n                        $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\r\n                    }\r\n                    $rootScope.$broadcast('adfDashboardEditsCancelled');\r\n                };\r\n\r\n                var adfEditDashboardDialog = $scope.$on('adfEditDashboardDialog', function (event) {\r\n                    if ($scope.editMode) {\r\n                        $scope.editDashboardDialog();\r\n                    }\r\n                });\r\n\r\n\r\n                var adfLaunchSearchingFromWidget = $scope.$on('adfLaunchSearchingFromWidget', function (event, widget) {\r\n                    var reloadWidgets = _getReloadWidgets(widget);\r\n                    $rootScope.$broadcast('adfFilterChanged', name, model, reloadWidgets);\r\n                });\r\n                var adfWindowTimeChangedFromWidget = $scope.$on('adfWindowTimeChangedFromWidget', function (event) {\r\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\r\n                });\r\n\r\n                // edit dashboard settings\r\n                $scope.editDashboardDialog = function () {\r\n                    var editDashboardScope = getNewModalScope();\r\n                    // create a copy of the title, to avoid changing the title to\r\n                    // \"dashboard\" if the field is empty\r\n                    editDashboardScope.copy = {\r\n                        title: (model.title !== 'ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD' ? model.title : ''),\r\n                        description: model.description,\r\n                        backgroundColor: model.backgroundColor ? model.backgroundColor : undefined,\r\n                        time: new Date(),\r\n                        backgroundImage: model.backgroundImage ? model.backgroundImage : undefined,\r\n                        file: model.backgroundImage ? model.backgroundImage : undefined,\r\n                    };\r\n\r\n                    editDashboardScope.backgroundSize = {\r\n                        name: 'backgroundSize',\r\n                        model: model.backgroundImageSize ? model.backgroundImageSize : '100% 100%',\r\n                        options: {\r\n                            '100% 100%': {\r\n                                title: $translate.instant('SIZE_CONF.AUTO')\r\n                            },\r\n                            'contain': {\r\n                                title: $translate.instant('SIZE_CONF.CONTAIN')\r\n                            },\r\n                            'cover': {\r\n                                title: $translate.instant('SIZE_CONF.COVER')\r\n                            }\r\n                        }\r\n                    };\r\n\r\n                    editDashboardScope.iconConfiguration = {\r\n                        name: 'iconConfiguration',\r\n                        model: model.iconType ? model.iconType : 'icon',\r\n                        url: undefined,\r\n                        file: undefined,\r\n                        iconType: model.iconType ? model.iconType : 'icon',\r\n                        icon: model.iconType === 'icon' ? model.icon : 'fa-tachometer',\r\n                        options: {\r\n                            'icon': {\r\n                                title: $translate.instant('ICON.LIBRARY'),\r\n                            },\r\n                            'image': {\r\n                                title: $translate.instant('ICON.IMAGE')\r\n                            }\r\n                        }\r\n                    };\r\n                    if (editDashboardScope.iconConfiguration.iconType === 'image') {\r\n                        editDashboardScope.iconConfiguration.file = model.icon;\r\n                        editDashboardScope.iconConfiguration.url = model.icon;\r\n                    }\r\n                    editDashboardScope.imageSelected = function (file) {\r\n                        if (file) {\r\n                            editDashboardScope.iconConfiguration.file = file;\r\n                            Upload.base64DataUrl(file).then(\r\n                                function (url) {\r\n                                    editDashboardScope.iconConfiguration.url = url;\r\n                                    editDashboardScope.iconConfiguration.file = url;\r\n                                    editDashboardScope.iconConfiguration.iconType = 'image';\r\n\r\n                                });\r\n                        } else {\r\n                            editDashboardScope.removeDataFile();\r\n                        }\r\n                    };\r\n                    editDashboardScope.backgroundImageSelected = function (file) {\r\n                        if (file) {\r\n                            editDashboardScope.iconConfiguration.file = file;\r\n                            Upload.base64DataUrl(file).then(\r\n                                function (url) {\r\n                                    editDashboardScope.copy.backgroundImage = url;\r\n                                    editDashboardScope.copy.file = url;\r\n\r\n                                });\r\n                        } else {\r\n                            editDashboardScope.removeBackgroundFile();\r\n                        }\r\n                    };\r\n                    editDashboardScope.removeDataFile = function () {\r\n                        editDashboardScope.iconConfiguration.file = null;\r\n                        editDashboardScope.iconConfiguration.url = null;\r\n                    };\r\n                    editDashboardScope.removeBackgroundFile = function () {\r\n                        editDashboardScope.copy.backgroundImage = null;\r\n                        editDashboardScope.copy.file = null;\r\n\r\n                    };\r\n\r\n                    var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\r\n                    if (model.editTemplateUrl) {\r\n                        adfEditTemplatePath = model.editTemplateUrl;\r\n                    }\r\n                    var instance = $uibModal.open({\r\n                        scope: editDashboardScope,\r\n                        templateUrl: adfEditTemplatePath,\r\n                        backdrop: 'static',\r\n                        keyboard: false,\r\n                        size: 'lg'\r\n                    });\r\n\r\n\r\n                    editDashboardScope.closeDialog = function () {\r\n                        // copy the new title back to the model\r\n                        model.title = editDashboardScope.copy.title;\r\n                        model.description = editDashboardScope.copy.description;\r\n                        if (editDashboardScope.iconConfiguration.model === 'image') {\r\n                            model.icon = editDashboardScope.iconConfiguration.url;\r\n\r\n                        } else if (editDashboardScope.iconConfiguration.model === 'icon') {\r\n                            model.icon = (editDashboardScope.iconConfiguration.icon && editDashboardScope.iconConfiguration.icon.key) || editDashboardScope.iconConfiguration.icon;\r\n\r\n                        }\r\n                        model.iconType = editDashboardScope.iconConfiguration.model;\r\n                        model.backgroundColor = editDashboardScope.copy.backgroundColor ? editDashboardScope.copy.backgroundColor : undefined;\r\n                        model.backgroundImage = editDashboardScope.copy.backgroundImage ? editDashboardScope.copy.backgroundImage : undefined;\r\n                        model.backgroundImageSize = editDashboardScope.backgroundSize.model;\r\n                        // close modal and destroy the scope\r\n                        instance.close();\r\n                        editDashboardScope.$destroy();\r\n                    };\r\n                };\r\n\r\n                var adfOpenWidgetFromOther = $scope.$on('adfOpenWidgetFromOther', function (event, widget, config) {\r\n\r\n                    var internal_config = createConfiguration(widget);\r\n                    var _config = angular.merge({}, internal_config, config || {});\r\n                    var w = {\r\n                        type: widget,\r\n                        config: _config,\r\n                        title: _config.title\r\n                    };\r\n                    addNewWidgetToModel(model, w, name, !$scope.editMode);\r\n                });\r\n\r\n                var adfOpenModalWidgetFromOther = $scope.$on('adfOpenModalWidgetFromOther', function (event, widgetType, config) {\r\n                    var templateUrl = adfTemplatePath + 'widget-fullscreen.html';\r\n                    var _config = config || {};\r\n                    if (_config.sendSelection) {\r\n                        templateUrl = adfTemplatePath + 'widget-fullscreen-selection.html';\r\n                    }\r\n                    var widget = createWidget(widgetType);\r\n                    widget.config = angular.merge({}, widget.config, _config);\r\n                    widget.type = widgetType;\r\n                    if (widget.config.title) {\r\n                        widget.title = widget.config.title;\r\n                    }\r\n                    var fullScreenScope = $scope.$new();\r\n                    fullScreenScope.definition = fullScreenScope.widget = widget;\r\n                    var opts = {\r\n                        scope: fullScreenScope,\r\n                        templateUrl: templateUrl,\r\n                        size: fullScreenScope.definition.modalSize || 'el',\r\n                        backdrop: 'static',\r\n                        windowClass: (fullScreenScope.definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\r\n                    };\r\n\r\n                    if ($scope.model && !$scope.model.temporal) {\r\n                        fullScreenScope.persistDashboard = function () {\r\n                            $rootScope.$broadcast('adfOpenWidgetFromOther', this.$parent.widget.type, this.$parent.widget.config || {});\r\n                            this.closeDialog();\r\n                        };\r\n                    }\r\n\r\n                    var instance = $uibModal.open(opts);\r\n                    fullScreenScope.closeDialog = function () {\r\n                        instance.close();\r\n                        fullScreenScope.$destroy();\r\n                    };\r\n\r\n\r\n                });\r\n\r\n                var adfAddWidgetDialog = $scope.$on('adfAddWidgetDialog', function (event) {\r\n                    if (!model.temporal && model.editable) {\r\n                        if (!$scope.editMode) {\r\n                            $scope.editMode = true;\r\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n                            $rootScope.$broadcast('adfIsEditMode');\r\n                        }\r\n\r\n                        $scope.addWidgetDialog();\r\n                    }\r\n                });\r\n\r\n                // add widget dialog\r\n                $scope.addScopeCfg = {\r\n                    widgetFilter: {},\r\n                    widgetSortingDirection: '',\r\n                    widgetSorting: 'priority'\r\n                };\r\n\r\n                $scope.addWidgetDialog = function () {\r\n                    var addScope = getNewModalScope();\r\n                    var widgets;\r\n                    if (angular.isFunction(widgetFilter)) {\r\n                        widgets = {};\r\n                        angular.forEach(dashboard.widgets, function (widget, type) {\r\n                            if (widgetFilter(widget, type, model)) {\r\n                                widgets[type] = widget;\r\n                            }\r\n                        });\r\n                    } else {\r\n                        widgets = dashboard.widgets;\r\n                    }\r\n                    addScope.widgets = widgets;\r\n\r\n                    angular.forEach(addScope.widgets, function (widget, type) {\r\n                        widget.key = type;\r\n                        if (!widget.category) {\r\n                            widget.category = 'Miscellaneous';\r\n                        }\r\n                    });\r\n\r\n                    // pass createCategories function to scope, if categories option is enabled\r\n                    if ($scope.options.categories) {\r\n                        addScope.createCategories = createCategories;\r\n                    } else {\r\n                        addScope.availableCategories = createCategoriesList(widgets);\r\n                    }\r\n\r\n                    var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\r\n                    if (model.addTemplateUrl) {\r\n                        adfAddTemplatePath = model.addTemplateUrl;\r\n                    }\r\n\r\n                    var opts = {\r\n                        scope: addScope,\r\n                        templateUrl: adfAddTemplatePath,\r\n                        backdrop: 'static',\r\n                        size: 'lg'\r\n                    };\r\n\r\n                    var instance = $uibModal.open(opts);\r\n\r\n                    addScope.widgetFilterCfg = $scope.addScopeCfg;\r\n\r\n                    addScope.addWidget = function (widget) {\r\n                        var w = {\r\n                            type: widget,\r\n                            Ftype: dashboard.widgets[widget].Ftype || null,\r\n                            config: createConfiguration(widget)\r\n                        };\r\n                        addNewWidgetToModel(model, w, name);\r\n                        // close and destroy\r\n                        instance.close();\r\n                        addScope.$destroy();\r\n\r\n                        // check for open edit mode immediately\r\n                        if (isEditModeImmediate(widget)) {\r\n                            openEditMode($scope, w);\r\n                        }\r\n                    };\r\n\r\n                    addScope.changeThumbnail = function (widget) {\r\n                        if (widget.images) {\r\n                            if (angular.isUndefined(widget._currThumb)) {\r\n                                widget._currThumb = 1;\r\n                            } else {\r\n                                widget._currThumb += 1;\r\n                            }\r\n\r\n\r\n                            if (widget._currThumb >= widget.images.length) {\r\n                                widget._currThumb = 0;\r\n                            }\r\n\r\n                            widget._currImg = widget.images[widget._currThumb];\r\n                        }\r\n                    };\r\n\r\n                    addScope.closeDialog = function () {\r\n                        // close and destroy\r\n                        instance.close();\r\n                        addScope.$destroy();\r\n                    };\r\n                };\r\n\r\n                $scope.addNewWidgetToModel = addNewWidgetToModel;\r\n\r\n                $scope.$on('destroy', function () {\r\n                    adfLaunchSearchingFromWidget();\r\n                    adfWindowTimeChangedFromWidget();\r\n                    adfToggleEditMode();\r\n                    adfOpenWidgetFromOther();\r\n                    adfOpenModalWidgetFromOther();\r\n                    adfCancelEditMode();\r\n                    adfAddWidgetDialog();\r\n                    adfEditDashboardDialog();\r\n                    adfWidgetRemoved();\r\n                });\r\n            },\r\n            link: function ($scope, $element, $attr) {\r\n                // pass options to scope\r\n                var options = {\r\n                    name: $attr.name,\r\n                    editable: true,\r\n                    enableConfirmDelete: stringToBoolean($attr.enableConfirmDelete),\r\n                    maximizable: stringToBoolean($attr.maximizable),\r\n                    collapsible: stringToBoolean($attr.collapsible),\r\n                    categories: stringToBoolean($attr.categories),\r\n                    extraData: {}\r\n                };\r\n\r\n                if (angular.isDefined($attr.editable)) {\r\n                    options.editable = stringToBoolean($attr.editable);\r\n                }\r\n\r\n                if (angular.isDefined($scope.extraData)) {\r\n                    options.extraData = $scope.extraData;\r\n                }\r\n\r\n                options.extraData.editing = $scope.editMode;\r\n\r\n                $scope.options = options;\r\n            },\r\n            templateUrl: adfTemplatePath + 'dashboard.html'\r\n        };\r\n    });","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the 'Software'), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n    .directive('adfDashboardGrid', function(adfTemplatePath) {\r\n        'use strict';\r\n\r\n        function preLink($scope) {\r\n            $scope.gridOptions = {\r\n                cellHeight: 146,\r\n                verticalMargin: 10,\r\n                animate: true,\r\n                float: false,\r\n                alwaysShowResizeHandle: true,\r\n                minWidth: 768,\r\n                auto: true,\r\n                resizable: {\r\n                    handles: 'e, se, s, sw, w'\r\n                },\r\n                disableDrag: !$scope.editMode,\r\n                disableResize: !$scope.editMode\r\n            };\r\n\r\n            $scope.gsHandler = null;\r\n        }\r\n\r\n        return {\r\n            restrict: 'E',\r\n            scope: {\r\n                adfModel: '=',\r\n                editMode: '=',\r\n                continuousEditMode: '=',\r\n                options: '='\r\n            },\r\n            templateUrl: adfTemplatePath + 'dashboard-grid.html',\r\n            compile: function() {\r\n                return {\r\n                    pre: preLink,\r\n                };\r\n            },\r\n            controller: function($scope, $timeout) {\r\n                var dashEvents = [];\r\n                dashEvents.push($scope.$on('adfIsEditMode', function() {\r\n                    $timeout(function() {\r\n                        $scope.gsHandler.enable();\r\n                    }, 100);\r\n                }));\r\n\r\n                dashEvents.push($scope.$on('adfDashboardChanged', function() {\r\n                    $timeout(function() {\r\n                        $scope.gsHandler.disable();\r\n                    }, 100);\r\n                }));\r\n\r\n                dashEvents.push($scope.$on('adfDashboardEditsCancelled', function() {\r\n                    $timeout(function() {\r\n                        $scope.gsHandler.disable();\r\n                    }, 100);\r\n                }));\r\n\r\n                dashEvents.push($scope.$on('adfCancelEditMode', function() {\r\n                    $timeout(function() {\r\n                        $scope.gsHandler.disable();\r\n                    }, 100);\r\n                }));\r\n\r\n                dashEvents.push($scope.$on('adfWidgetAdded', function(event) {\r\n                    $timeout(function() {\r\n                        $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\r\n                        $scope.gsHandler.enable();\r\n                    }, 100);\r\n                }));\r\n\r\n                $scope.onChange = function(event, items) {\r\n                    //console.log('onChange event: ' + event + ' items:' + items);\r\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\r\n                };\r\n\r\n                $scope.onDragStart = function(event, ui) {\r\n                    console.log('onDragStart event: ' + event + ' ui:' + ui);\r\n                };\r\n\r\n                $scope.onDragStop = function(event, ui) {\r\n                    console.log('onDragStop event: ' + event + ' ui:' + ui);\r\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\r\n                };\r\n\r\n                $scope.onResizeStart = function(event, ui) {\r\n                    console.log('onResizeStart event: ' + event + ' ui:' + ui);\r\n                };\r\n\r\n                $scope.onResizeStop = function(event, ui) {\r\n                    console.log('onResizeStop event: ' + event + ' ui:' + ui);\r\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\r\n                    $scope.$broadcast('OnResizeWidget');\r\n                };\r\n\r\n                $scope.onItemAdded = function(item) {\r\n                    console.log('onItemAdded item: ' + item);\r\n                };\r\n\r\n                $scope.onItemRemoved = function(item) {\r\n                    console.log('onItemRemoved item: ' + item);\r\n                };\r\n\r\n                $scope.$on('destroy', function() {\r\n                    dashEvents.forEach(function(dashEvt) {\r\n                        dashEvt();\r\n                    });\r\n                });\r\n            }\r\n        };\r\n    });","/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .filter('adfOrderByObjectKey', function($filter) {\r\n    'use strict';\r\n\r\n    return function(item, key){\r\n      var array = [];\r\n      angular.forEach(item, function(value, objectKey){\r\n        value[key] = objectKey;\r\n        array.push(value);\r\n      });\r\n      return $filter('orderBy')(array, key);\r\n    };\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * @ngdoc object\r\n * @name adf.dashboardProvider\r\n * @description\r\n *\r\n * The dashboardProvider can be used to register widgets.\r\n */\r\nangular.module('adf.provider', [])\r\n    .provider('dashboard', function () {\r\n\r\n        var widgets = {};\r\n        var widgetsPath = '';\r\n        var messageTemplate = '<div class=\"alert alert-primary\">{}</div>';\r\n        var loadingTemplate = '\\\r\n      <div class=\"progress progress-striped active\">\\n\\\r\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\r\n          <span class=\"sr-only\" translate>FORM.MSG.LOADING ...</span>\\n\\\r\n        </div>\\n\\\r\n      </div>';\r\n        var customWidgetTemplatePath = null;\r\n\r\n        // default apply function of widget.edit.apply\r\n        var defaultApplyFunction = function () {\r\n            return true;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#widget\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Registers a new widget.\r\n         *\r\n         * @param {string} name of the widget\r\n         * @param {object} widget to be registered.\r\n         *\r\n         *   Object properties:\r\n         *\r\n         *   - `title` - `{string=}` - The title of the widget.\r\n         *   - `description` - `{string=}` - Description of the widget.\r\n         *   - `category` - `{string=}` - Category of the widget.\r\n         *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\r\n         *   - `config` - `{object}` - Predefined widget configuration.\r\n         *   - `controller` - `{string=|function()=}` - Controller fn that should be\r\n         *      associated with newly created scope of the widget or the name of a\r\n         *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\r\n         *      if passed as a string.\r\n         *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\r\n         *      published to scope under the `controllerAs` name.\r\n         *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\r\n         *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\r\n         *   - `template` - `{string=|function()=}` - html template as a string.\r\n         *   - `templateUrl` - `{string=}` - path to an html template.\r\n         *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\r\n         *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n         *      be injected into the controller. If any of these dependencies are promises, the widget\r\n         *      will wait for them all to be resolved or one to be rejected before the controller is\r\n         *      instantiated.\r\n         *      If all the promises are resolved successfully, the values of the resolved promises are\r\n         *      injected.\r\n         *\r\n         *      The map object is:\r\n         *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\r\n         *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n         *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\r\n         *        and the return value is treated as the dependency. If the result is a promise, it is\r\n         *        resolved before its value is injected into the controller.\r\n         *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n         *      on the scope of the widget.\r\n         *   - `edit` - `{object}` - Edit modus of the widget.\r\n         *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n         *        on the scope of the widget.\r\n         *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\r\n         *        Default is true.\r\n         *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\r\n         *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\r\n         *        The function have to return a boolean or an promise which can be resolved to a boolean.\r\n         *        The function can use injection.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.widget = function (name, widget) {\r\n            var w = angular.extend({\r\n                reload: false,\r\n                frameless: false\r\n            }, widget);\r\n            if (w.edit) {\r\n                var edit = {\r\n                    reload: true,\r\n                    immediate: false,\r\n                    apply: defaultApplyFunction\r\n                };\r\n                angular.extend(edit, w.edit);\r\n                w.edit = edit;\r\n            }\r\n            //OUW-1610\r\n            if (!w.config) {\r\n                w.config = {};\r\n            }\r\n            widgets[name] = w;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#widgetsPath\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Sets the path to the directory which contains the widgets. The widgets\r\n         * path is used for widgets with a templateUrl which contains the\r\n         * placeholder {widgetsPath}. The placeholder is replaced with the\r\n         * configured value, before the template is loaded, but the template is\r\n         * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\r\n         * The default value of widgetPaths is ''.\r\n         *\r\n         *\r\n         * @param {string} path to the directory which contains the widgets\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.widgetsPath = function (path) {\r\n            widgetsPath = path;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#messageTemplate\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the template for messages.\r\n         *\r\n         * @param {string} template for messages.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.messageTemplate = function (template) {\r\n            messageTemplate = template;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#loadingTemplate\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the template which is displayed as\r\n         * long as the widget resources are not resolved.\r\n         *\r\n         * @param {string} template loading template\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.loadingTemplate = function (template) {\r\n            loadingTemplate = template;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#customWidgetTemplatePath\r\n         * @propertyOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the container template for the widgets\r\n         *\r\n         * @param {string} path to the custom widget template\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.customWidgetTemplatePath = function (templatePath) {\r\n            customWidgetTemplatePath = templatePath;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc service\r\n         * @name adf.dashboard\r\n         * @description\r\n         *\r\n         * The dashboard holds all options and  widgets.\r\n         *\r\n         * @property {Array.<Object>} widgets Array of registered widgets.\r\n         * @property {string} widgetsPath Default path for widgets.\r\n         * @property {string} messageTemplate Template for messages.\r\n         * @property {string} loadingTemplate Template for widget loading.\r\n         * * @property {string} customWidgetTemplatePath Changes the container template for the widgets\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.$get = function () {\r\n            var cid = 0;\r\n\r\n            return {\r\n                widgets: widgets,\r\n                widgetsPath: widgetsPath,\r\n                messageTemplate: messageTemplate,\r\n                loadingTemplate: loadingTemplate,\r\n                customWidgetTemplatePath: customWidgetTemplatePath,\r\n\r\n                /**\r\n                 * @ngdoc method\r\n                 * @name adf.dashboard#id\r\n                 * @methodOf adf.dashboard\r\n                 * @description\r\n                 *\r\n                 * Creates an ongoing numeric id. The method is used to create ids for\r\n                 * columns and widgets in the dashboard.\r\n                 */\r\n                id: function () {\r\n                    return new Date().getTime() + '-' + (++cid);\r\n                },\r\n\r\n                /**\r\n                 * @ngdoc method\r\n                 * @name adf.dashboard#idEqual\r\n                 * @methodOf adf.dashboard\r\n                 * @description\r\n                 *\r\n                 * Checks if the given ids are equal.\r\n                 *\r\n                 * @param {string} id widget or column id\r\n                 * @param {string} other widget or column id\r\n                 */\r\n                idEquals: function (id, other) {\r\n                    // use toString, because old ids are numbers\r\n                    return ((id) && (other)) && (id.toString() === other.toString());\r\n                }\r\n            };\r\n        };\r\n\r\n    });","(function(window, undefined) {'use strict';\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf', ['adf.provider', 'ui.bootstrap', 'opengate-angular-js'])\r\n    .value('adfTemplatePath', '../src/templates/')\r\n    .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\r\n    .value('adfVersion', '7.1.2');\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name adf.directive:adfDashboard\r\n * @element div\r\n * @restrict EA\r\n * @scope\r\n * @description\r\n *\r\n * `adfDashboard` is a directive which renders the dashboard with all its\r\n * components. The directive requires a name attribute. The name of the\r\n * dashboard can be used to store the model.\r\n *\r\n * @param {string} name name of the dashboard. This attribute is required.\r\n * @param {boolean=} editable false to disable the editmode of the dashboard.\r\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\r\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\r\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\r\n * @param {object=} adfModel model object of the dashboard.\r\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\r\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\r\n *                   events during edit mode not reset it if edit mode is exited.\r\n * @param {boolean=} categories enable categories for the add widget dialog.\r\n */\r\n\r\nangular.module('adf')\r\n    .directive('adfDashboard', [\"$rootScope\", \"$log\", \"$timeout\", \"$uibModal\", \"dashboard\", \"adfTemplatePath\", \"$translate\", \"Upload\", function ($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath, $translate, Upload) {\r\n        \r\n\r\n        function stringToBoolean(string) {\r\n            switch (angular.isDefined(string) ? string.toLowerCase() : null) {\r\n                case 'true':\r\n                case 'yes':\r\n                case '1':\r\n                    return true;\r\n                case 'false':\r\n                case 'no':\r\n                case '0':\r\n                case null:\r\n                    return false;\r\n                default:\r\n                    return Boolean(string);\r\n            }\r\n        }\r\n\r\n        function createConfiguration(type) {\r\n            var cfg = {};\r\n            var config = dashboard.widgets[type].config || {};\r\n            cfg = angular.copy(config);\r\n            return cfg;\r\n        }\r\n\r\n        function createWidget(type) {\r\n            var wdgt = {};\r\n            var widget = dashboard.widgets[type];\r\n            if (widget) {\r\n                wdgt = angular.copy(widget);\r\n            }\r\n            return wdgt;\r\n        }\r\n\r\n        /**\r\n         * Adds the widget to first column of the model.\r\n         *\r\n         * @param dashboard model\r\n         * @param widget to add to model\r\n         * @param name name of the dashboard\r\n         */\r\n        function addNewWidgetToModel(model, widget, name, forceToSave) {\r\n            if (model) {\r\n                if (!model.grid) {\r\n                    model.grid = [];\r\n                }\r\n\r\n                var newWidget = {\r\n                    width: 3,\r\n                    height: 2,\r\n                    x: 0,\r\n                    y: 0,\r\n                    definition: widget\r\n                };\r\n                model.grid.push(newWidget);\r\n\r\n                $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\r\n\r\n                if (forceToSave) {\r\n                    $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n                }\r\n            } else {\r\n                $log.error('model is undefined');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Checks if the edit mode of the widget should be opened immediately.\r\n         *\r\n         * @param widget type\r\n         */\r\n        function isEditModeImmediate(type) {\r\n            var widget = dashboard.widgets[type];\r\n            return widget && widget.edit && widget.edit.immediate;\r\n        }\r\n\r\n        /**\r\n         * Opens the edit mode of the specified widget.\r\n         *\r\n         * @param dashboard scope\r\n         * @param widget\r\n         */\r\n        function openEditMode($scope, widget) {\r\n            // wait some time before fire enter edit mode event\r\n            $timeout(function () {\r\n                $scope.$broadcast('adfWidgetEnterEditMode', widget);\r\n            }, 200);\r\n        }\r\n\r\n        /**\r\n         * Creates object with the category name as key and an array of widgets as value.\r\n         *\r\n         * @param widgets array of widgets\r\n         *\r\n         * @return array of categories\r\n         */\r\n        function createCategories(widgets) {\r\n            var categories = {};\r\n            angular.forEach(widgets, function (widget, key) {\r\n                var category = widget.category;\r\n                // if the widget has no category use a default one\r\n                if (!category) {\r\n                    category = 'ADF.CATEGORY.MISCELANOUS';\r\n                }\r\n\r\n                widget.title = $translate.instant(widget.title);\r\n                widget.description = $translate.instant(widget.description);\r\n                widget.category = $translate.instant(widget.category);\r\n\r\n                // push widget to category array\r\n                if (angular.isUndefined(categories[widget.category])) {\r\n                    categories[widget.category] = {\r\n                        widgets: {}\r\n                    };\r\n                }\r\n\r\n                categories[widget.category].widgets[key] = widget;\r\n            });\r\n            return categories;\r\n        }\r\n\r\n        function createCategoriesList(widgets) {\r\n            var categories = [];\r\n            angular.forEach(widgets, function (widget, key) {\r\n                if (!widget.category) {\r\n                    widget.category = 'ADF.CATEGORY.MISCELLANEOUS';\r\n                }\r\n\r\n                widget.title = $translate.instant(widget.title);\r\n                widget.description = $translate.instant(widget.description);\r\n                widget.category = $translate.instant(widget.category);\r\n\r\n                if (!widget.categoryTags) {\r\n                    widget.categoryTags = 'ADF.CATEGORY.TAG.MISCELLANEOUS';\r\n                }\r\n\r\n                var categoriesTmp = widget.categoryTags.split(',');\r\n\r\n                angular.forEach(categoriesTmp, function (category, idx) {\r\n                    // push widget to category array\r\n                    var translatedCat = $translate.instant(category);\r\n                    if (categories.indexOf(translatedCat) === -1)\r\n                        categories.push(translatedCat);\r\n                });\r\n\r\n            });\r\n            return categories;\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            scope: {\r\n                name: '@',\r\n                collapsible: '@',\r\n                editable: '@',\r\n                editMode: '@',\r\n                continuousEditMode: '=',\r\n                maximizable: '@',\r\n                adfModel: '=',\r\n                adfWidgetFilter: '=',\r\n                categories: '@',\r\n                hideButtons: '=',\r\n                extraData: '='\r\n            },\r\n            controller: [\"$scope\", function ($scope) {\r\n                var model = {};\r\n                var widgetFilter = null;\r\n                var name = $scope.name;\r\n\r\n                var _getReloadWidgets = function (widget) {\r\n                    var reloadWidgets = {\r\n                        configChange: [],\r\n                        reload: []\r\n                    };\r\n                    if (widget) {\r\n                        var definition = angular.copy(widget.definition);\r\n                        var ftype = definition.Ftype;\r\n                        var id = definition.wid;\r\n                        var config = definition.config || {};\r\n                        var filter = config.filter;\r\n                        model.grid.forEach(function (w) {\r\n                            var f = w.definition.config.filter;\r\n                            var ft = w.definition.Ftype;\r\n                            //solo recargamos y actualizamos los widgets:\r\n                            // - que tengan filtro\r\n                            // y que el id tenga filtro\r\n                            // y que el id del filtro coincida con el wid del widget que ha modificado el fitro\r\n                            if (f && f.id && f.id === id) {\r\n                                w.definition.config.filter = filter;\r\n                                w.definition.config.filter.id = id;\r\n                                reloadWidgets.reload.push(w.definition.wid);\r\n                            } else if (ftype === ft) {\r\n                                reloadWidgets.configChange.push(w.definition.wid);\r\n                            }\r\n                        });\r\n                    }\r\n                    return reloadWidgets;\r\n                };\r\n\r\n                var updateWidgetFilters = function (model) {\r\n                    var widgetFilters = [];\r\n                    var grid = model.grid;\r\n                    if (grid && grid.length > 0) {\r\n                        grid.forEach(function (element) {\r\n                            var definition = element.definition;\r\n                            var config = definition.config || {};\r\n                            var filter = config.filter;\r\n                            widgetFilters.push({\r\n                                wid: definition.wid,\r\n                                title: definition.title,\r\n                                filter: filter,\r\n                                Ftype: definition.Ftype\r\n                            });\r\n                        });\r\n                    }\r\n                    if (!$scope.options) {\r\n                        $scope.options = {\r\n                            extraData: {}\r\n                        };\r\n                    }\r\n                    $scope.options.extraData.widgetFilters = widgetFilters;\r\n                };\r\n                // Watching for changes on adfModel\r\n                $scope.$watch('adfModel', function (oldVal, newVal) {\r\n                    // has model changed or is the model attribute not set\r\n                    if (newVal !== null || (oldVal === null && newVal === null)) {\r\n                        model = $scope.adfModel;\r\n                        widgetFilter = $scope.adfWidgetFilter;\r\n\r\n                        if (model) {\r\n                            updateWidgetFilters(model);\r\n                            if (!model.title) {\r\n                                model.title = $translate.instant('ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD');\r\n                            }\r\n                            if (!model.titleTemplateUrl) {\r\n                                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\r\n                            }\r\n                            $scope.model = model;\r\n                        } else {\r\n                            $log.error('could not find or create model');\r\n                        }\r\n                    }\r\n                }, true);\r\n\r\n                // edit mode\r\n                $scope.editMode = false;\r\n\r\n                function getNewModalScope() {\r\n                    var scope = $scope.$new();\r\n                    return scope;\r\n                }\r\n\r\n                $scope.toggleEditMode = function (openConfigWindow) {\r\n                    $scope.editMode = !$scope.editMode;\r\n                    if ($scope.editMode) {\r\n                        if (!$scope.continuousEditMode) {\r\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n                            $rootScope.$broadcast('adfIsEditMode');\r\n                        }\r\n\r\n                        if (openConfigWindow) {\r\n                            $scope.editDashboardDialog();\r\n                        }\r\n                    }\r\n\r\n                    if (!$scope.editMode) {\r\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n                    }\r\n                };\r\n\r\n                var adfToggleEditMode = $scope.$on('adfToggleEditMode', function (event, isNewDashboard) {\r\n                    if (isNewDashboard) {\r\n                        $scope.toggleEditMode(true);\r\n                    } else {\r\n                        $scope.toggleEditMode();\r\n                    }\r\n                });\r\n\r\n                var adfCancelEditMode = $scope.$on('adfCancelEditMode', function (event) {\r\n                    if ($scope.editMode) {\r\n                        $scope.cancelEditMode();\r\n                    }\r\n                });\r\n\r\n                var adfWidgetRemoved = $scope.$on('adfWidgetRemovedFromGrid', function (event, widget) {\r\n                    var index = null;\r\n                    angular.forEach($scope.adfModel.grid, function (widgetTmp, idx) {\r\n                        if (widgetTmp.definition.wid === widget.wid) {\r\n                            index = idx;\r\n                        }\r\n                    });\r\n\r\n                    if (index >= 0) {\r\n                        $scope.adfModel.grid.splice(index, 1);\r\n                    }\r\n                });\r\n\r\n                $scope.cancelEditMode = function () {\r\n                    $scope.editMode = false;\r\n                    if (!$scope.continuousEditMode && ($scope.modelCopy !== $scope.adfModel)) {\r\n                        $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\r\n                    }\r\n                    $rootScope.$broadcast('adfDashboardEditsCancelled');\r\n                };\r\n\r\n                var adfEditDashboardDialog = $scope.$on('adfEditDashboardDialog', function (event) {\r\n                    if ($scope.editMode) {\r\n                        $scope.editDashboardDialog();\r\n                    }\r\n                });\r\n\r\n\r\n                var adfLaunchSearchingFromWidget = $scope.$on('adfLaunchSearchingFromWidget', function (event, widget) {\r\n                    var reloadWidgets = _getReloadWidgets(widget);\r\n                    $rootScope.$broadcast('adfFilterChanged', name, model, reloadWidgets);\r\n                });\r\n                var adfWindowTimeChangedFromWidget = $scope.$on('adfWindowTimeChangedFromWidget', function (event) {\r\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\r\n                });\r\n\r\n                // edit dashboard settings\r\n                $scope.editDashboardDialog = function () {\r\n                    var editDashboardScope = getNewModalScope();\r\n                    // create a copy of the title, to avoid changing the title to\r\n                    // \"dashboard\" if the field is empty\r\n                    editDashboardScope.copy = {\r\n                        title: (model.title !== 'ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD' ? model.title : ''),\r\n                        description: model.description,\r\n                        backgroundColor: model.backgroundColor ? model.backgroundColor : undefined,\r\n                        time: new Date(),\r\n                        backgroundImage: model.backgroundImage ? model.backgroundImage : undefined,\r\n                        file: model.backgroundImage ? model.backgroundImage : undefined,\r\n                    };\r\n\r\n                    editDashboardScope.backgroundSize = {\r\n                        name: 'backgroundSize',\r\n                        model: model.backgroundImageSize ? model.backgroundImageSize : '100% 100%',\r\n                        options: {\r\n                            '100% 100%': {\r\n                                title: $translate.instant('SIZE_CONF.AUTO')\r\n                            },\r\n                            'contain': {\r\n                                title: $translate.instant('SIZE_CONF.CONTAIN')\r\n                            },\r\n                            'cover': {\r\n                                title: $translate.instant('SIZE_CONF.COVER')\r\n                            }\r\n                        }\r\n                    };\r\n\r\n                    editDashboardScope.iconConfiguration = {\r\n                        name: 'iconConfiguration',\r\n                        model: model.iconType ? model.iconType : 'icon',\r\n                        url: undefined,\r\n                        file: undefined,\r\n                        iconType: model.iconType ? model.iconType : 'icon',\r\n                        icon: model.iconType === 'icon' ? model.icon : 'fa-tachometer',\r\n                        options: {\r\n                            'icon': {\r\n                                title: $translate.instant('ICON.LIBRARY'),\r\n                            },\r\n                            'image': {\r\n                                title: $translate.instant('ICON.IMAGE')\r\n                            }\r\n                        }\r\n                    };\r\n                    if (editDashboardScope.iconConfiguration.iconType === 'image') {\r\n                        editDashboardScope.iconConfiguration.file = model.icon;\r\n                        editDashboardScope.iconConfiguration.url = model.icon;\r\n                    }\r\n                    editDashboardScope.imageSelected = function (file) {\r\n                        if (file) {\r\n                            editDashboardScope.iconConfiguration.file = file;\r\n                            Upload.base64DataUrl(file).then(\r\n                                function (url) {\r\n                                    editDashboardScope.iconConfiguration.url = url;\r\n                                    editDashboardScope.iconConfiguration.file = url;\r\n                                    editDashboardScope.iconConfiguration.iconType = 'image';\r\n\r\n                                });\r\n                        } else {\r\n                            editDashboardScope.removeDataFile();\r\n                        }\r\n                    };\r\n                    editDashboardScope.backgroundImageSelected = function (file) {\r\n                        if (file) {\r\n                            editDashboardScope.iconConfiguration.file = file;\r\n                            Upload.base64DataUrl(file).then(\r\n                                function (url) {\r\n                                    editDashboardScope.copy.backgroundImage = url;\r\n                                    editDashboardScope.copy.file = url;\r\n\r\n                                });\r\n                        } else {\r\n                            editDashboardScope.removeBackgroundFile();\r\n                        }\r\n                    };\r\n                    editDashboardScope.removeDataFile = function () {\r\n                        editDashboardScope.iconConfiguration.file = null;\r\n                        editDashboardScope.iconConfiguration.url = null;\r\n                    };\r\n                    editDashboardScope.removeBackgroundFile = function () {\r\n                        editDashboardScope.copy.backgroundImage = null;\r\n                        editDashboardScope.copy.file = null;\r\n\r\n                    };\r\n\r\n                    var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\r\n                    if (model.editTemplateUrl) {\r\n                        adfEditTemplatePath = model.editTemplateUrl;\r\n                    }\r\n                    var instance = $uibModal.open({\r\n                        scope: editDashboardScope,\r\n                        templateUrl: adfEditTemplatePath,\r\n                        backdrop: 'static',\r\n                        keyboard: false,\r\n                        size: 'lg'\r\n                    });\r\n\r\n\r\n                    editDashboardScope.closeDialog = function () {\r\n                        // copy the new title back to the model\r\n                        model.title = editDashboardScope.copy.title;\r\n                        model.description = editDashboardScope.copy.description;\r\n                        if (editDashboardScope.iconConfiguration.model === 'image') {\r\n                            model.icon = editDashboardScope.iconConfiguration.url;\r\n\r\n                        } else if (editDashboardScope.iconConfiguration.model === 'icon') {\r\n                            model.icon = (editDashboardScope.iconConfiguration.icon && editDashboardScope.iconConfiguration.icon.key) || editDashboardScope.iconConfiguration.icon;\r\n\r\n                        }\r\n                        model.iconType = editDashboardScope.iconConfiguration.model;\r\n                        model.backgroundColor = editDashboardScope.copy.backgroundColor ? editDashboardScope.copy.backgroundColor : undefined;\r\n                        model.backgroundImage = editDashboardScope.copy.backgroundImage ? editDashboardScope.copy.backgroundImage : undefined;\r\n                        model.backgroundImageSize = editDashboardScope.backgroundSize.model;\r\n                        // close modal and destroy the scope\r\n                        instance.close();\r\n                        editDashboardScope.$destroy();\r\n                    };\r\n                };\r\n\r\n                var adfOpenWidgetFromOther = $scope.$on('adfOpenWidgetFromOther', function (event, widget, config) {\r\n\r\n                    var internal_config = createConfiguration(widget);\r\n                    var _config = angular.merge({}, internal_config, config || {});\r\n                    var w = {\r\n                        type: widget,\r\n                        config: _config,\r\n                        title: _config.title\r\n                    };\r\n                    addNewWidgetToModel(model, w, name, !$scope.editMode);\r\n                });\r\n\r\n                var adfOpenModalWidgetFromOther = $scope.$on('adfOpenModalWidgetFromOther', function (event, widgetType, config) {\r\n                    var templateUrl = adfTemplatePath + 'widget-fullscreen.html';\r\n                    var _config = config || {};\r\n                    if (_config.sendSelection) {\r\n                        templateUrl = adfTemplatePath + 'widget-fullscreen-selection.html';\r\n                    }\r\n                    var widget = createWidget(widgetType);\r\n                    widget.config = angular.merge({}, widget.config, _config);\r\n                    widget.type = widgetType;\r\n                    if (widget.config.title) {\r\n                        widget.title = widget.config.title;\r\n                    }\r\n                    var fullScreenScope = $scope.$new();\r\n                    fullScreenScope.definition = fullScreenScope.widget = widget;\r\n                    var opts = {\r\n                        scope: fullScreenScope,\r\n                        templateUrl: templateUrl,\r\n                        size: fullScreenScope.definition.modalSize || 'el',\r\n                        backdrop: 'static',\r\n                        windowClass: (fullScreenScope.definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\r\n                    };\r\n\r\n                    if ($scope.model && !$scope.model.temporal) {\r\n                        fullScreenScope.persistDashboard = function () {\r\n                            $rootScope.$broadcast('adfOpenWidgetFromOther', this.$parent.widget.type, this.$parent.widget.config || {});\r\n                            this.closeDialog();\r\n                        };\r\n                    }\r\n\r\n                    var instance = $uibModal.open(opts);\r\n                    fullScreenScope.closeDialog = function () {\r\n                        instance.close();\r\n                        fullScreenScope.$destroy();\r\n                    };\r\n\r\n\r\n                });\r\n\r\n                var adfAddWidgetDialog = $scope.$on('adfAddWidgetDialog', function (event) {\r\n                    if (!model.temporal && model.editable) {\r\n                        if (!$scope.editMode) {\r\n                            $scope.editMode = true;\r\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n                            $rootScope.$broadcast('adfIsEditMode');\r\n                        }\r\n\r\n                        $scope.addWidgetDialog();\r\n                    }\r\n                });\r\n\r\n                // add widget dialog\r\n                $scope.addScopeCfg = {\r\n                    widgetFilter: {},\r\n                    widgetSortingDirection: '',\r\n                    widgetSorting: 'priority'\r\n                };\r\n\r\n                $scope.addWidgetDialog = function () {\r\n                    var addScope = getNewModalScope();\r\n                    var widgets;\r\n                    if (angular.isFunction(widgetFilter)) {\r\n                        widgets = {};\r\n                        angular.forEach(dashboard.widgets, function (widget, type) {\r\n                            if (widgetFilter(widget, type, model)) {\r\n                                widgets[type] = widget;\r\n                            }\r\n                        });\r\n                    } else {\r\n                        widgets = dashboard.widgets;\r\n                    }\r\n                    addScope.widgets = widgets;\r\n\r\n                    angular.forEach(addScope.widgets, function (widget, type) {\r\n                        widget.key = type;\r\n                        if (!widget.category) {\r\n                            widget.category = 'Miscellaneous';\r\n                        }\r\n                    });\r\n\r\n                    // pass createCategories function to scope, if categories option is enabled\r\n                    if ($scope.options.categories) {\r\n                        addScope.createCategories = createCategories;\r\n                    } else {\r\n                        addScope.availableCategories = createCategoriesList(widgets);\r\n                    }\r\n\r\n                    var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\r\n                    if (model.addTemplateUrl) {\r\n                        adfAddTemplatePath = model.addTemplateUrl;\r\n                    }\r\n\r\n                    var opts = {\r\n                        scope: addScope,\r\n                        templateUrl: adfAddTemplatePath,\r\n                        backdrop: 'static',\r\n                        size: 'lg'\r\n                    };\r\n\r\n                    var instance = $uibModal.open(opts);\r\n\r\n                    addScope.widgetFilterCfg = $scope.addScopeCfg;\r\n\r\n                    addScope.addWidget = function (widget) {\r\n                        var w = {\r\n                            type: widget,\r\n                            Ftype: dashboard.widgets[widget].Ftype || null,\r\n                            config: createConfiguration(widget)\r\n                        };\r\n                        addNewWidgetToModel(model, w, name);\r\n                        // close and destroy\r\n                        instance.close();\r\n                        addScope.$destroy();\r\n\r\n                        // check for open edit mode immediately\r\n                        if (isEditModeImmediate(widget)) {\r\n                            openEditMode($scope, w);\r\n                        }\r\n                    };\r\n\r\n                    addScope.changeThumbnail = function (widget) {\r\n                        if (widget.images) {\r\n                            if (angular.isUndefined(widget._currThumb)) {\r\n                                widget._currThumb = 1;\r\n                            } else {\r\n                                widget._currThumb += 1;\r\n                            }\r\n\r\n\r\n                            if (widget._currThumb >= widget.images.length) {\r\n                                widget._currThumb = 0;\r\n                            }\r\n\r\n                            widget._currImg = widget.images[widget._currThumb];\r\n                        }\r\n                    };\r\n\r\n                    addScope.closeDialog = function () {\r\n                        // close and destroy\r\n                        instance.close();\r\n                        addScope.$destroy();\r\n                    };\r\n                };\r\n\r\n                $scope.addNewWidgetToModel = addNewWidgetToModel;\r\n\r\n                $scope.$on('destroy', function () {\r\n                    adfLaunchSearchingFromWidget();\r\n                    adfWindowTimeChangedFromWidget();\r\n                    adfToggleEditMode();\r\n                    adfOpenWidgetFromOther();\r\n                    adfOpenModalWidgetFromOther();\r\n                    adfCancelEditMode();\r\n                    adfAddWidgetDialog();\r\n                    adfEditDashboardDialog();\r\n                    adfWidgetRemoved();\r\n                });\r\n            }],\r\n            link: function ($scope, $element, $attr) {\r\n                // pass options to scope\r\n                var options = {\r\n                    name: $attr.name,\r\n                    editable: true,\r\n                    enableConfirmDelete: stringToBoolean($attr.enableConfirmDelete),\r\n                    maximizable: stringToBoolean($attr.maximizable),\r\n                    collapsible: stringToBoolean($attr.collapsible),\r\n                    categories: stringToBoolean($attr.categories),\r\n                    extraData: {}\r\n                };\r\n\r\n                if (angular.isDefined($attr.editable)) {\r\n                    options.editable = stringToBoolean($attr.editable);\r\n                }\r\n\r\n                if (angular.isDefined($scope.extraData)) {\r\n                    options.extraData = $scope.extraData;\r\n                }\r\n\r\n                options.extraData.editing = $scope.editMode;\r\n\r\n                $scope.options = options;\r\n            },\r\n            templateUrl: adfTemplatePath + 'dashboard.html'\r\n        };\r\n    }]);\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the 'Software'), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n    .directive('adfDashboardGrid', [\"adfTemplatePath\", function(adfTemplatePath) {\r\n        \r\n\r\n        function preLink($scope) {\r\n            $scope.gridOptions = {\r\n                cellHeight: 146,\r\n                verticalMargin: 10,\r\n                animate: true,\r\n                float: false,\r\n                alwaysShowResizeHandle: true,\r\n                minWidth: 768,\r\n                auto: true,\r\n                resizable: {\r\n                    handles: 'e, se, s, sw, w'\r\n                },\r\n                disableDrag: !$scope.editMode,\r\n                disableResize: !$scope.editMode\r\n            };\r\n\r\n            $scope.gsHandler = null;\r\n        }\r\n\r\n        return {\r\n            restrict: 'E',\r\n            scope: {\r\n                adfModel: '=',\r\n                editMode: '=',\r\n                continuousEditMode: '=',\r\n                options: '='\r\n            },\r\n            templateUrl: adfTemplatePath + 'dashboard-grid.html',\r\n            compile: function() {\r\n                return {\r\n                    pre: preLink,\r\n                };\r\n            },\r\n            controller: [\"$scope\", \"$timeout\", function($scope, $timeout) {\r\n                var dashEvents = [];\r\n                dashEvents.push($scope.$on('adfIsEditMode', function() {\r\n                    $timeout(function() {\r\n                        $scope.gsHandler.enable();\r\n                    }, 100);\r\n                }));\r\n\r\n                dashEvents.push($scope.$on('adfDashboardChanged', function() {\r\n                    $timeout(function() {\r\n                        $scope.gsHandler.disable();\r\n                    }, 100);\r\n                }));\r\n\r\n                dashEvents.push($scope.$on('adfDashboardEditsCancelled', function() {\r\n                    $timeout(function() {\r\n                        $scope.gsHandler.disable();\r\n                    }, 100);\r\n                }));\r\n\r\n                dashEvents.push($scope.$on('adfCancelEditMode', function() {\r\n                    $timeout(function() {\r\n                        $scope.gsHandler.disable();\r\n                    }, 100);\r\n                }));\r\n\r\n                dashEvents.push($scope.$on('adfWidgetAdded', function(event) {\r\n                    $timeout(function() {\r\n                        $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\r\n                        $scope.gsHandler.enable();\r\n                    }, 100);\r\n                }));\r\n\r\n                $scope.onChange = function(event, items) {\r\n                    //console.log('onChange event: ' + event + ' items:' + items);\r\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\r\n                };\r\n\r\n                $scope.onDragStart = function(event, ui) {\r\n                    console.log('onDragStart event: ' + event + ' ui:' + ui);\r\n                };\r\n\r\n                $scope.onDragStop = function(event, ui) {\r\n                    console.log('onDragStop event: ' + event + ' ui:' + ui);\r\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\r\n                };\r\n\r\n                $scope.onResizeStart = function(event, ui) {\r\n                    console.log('onResizeStart event: ' + event + ' ui:' + ui);\r\n                };\r\n\r\n                $scope.onResizeStop = function(event, ui) {\r\n                    console.log('onResizeStop event: ' + event + ' ui:' + ui);\r\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\r\n                    $scope.$broadcast('OnResizeWidget');\r\n                };\r\n\r\n                $scope.onItemAdded = function(item) {\r\n                    console.log('onItemAdded item: ' + item);\r\n                };\r\n\r\n                $scope.onItemRemoved = function(item) {\r\n                    console.log('onItemRemoved item: ' + item);\r\n                };\r\n\r\n                $scope.$on('destroy', function() {\r\n                    dashEvents.forEach(function(dashEvt) {\r\n                        dashEvt();\r\n                    });\r\n                });\r\n            }]\r\n        };\r\n    }]);\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .filter('adfOrderByObjectKey', [\"$filter\", function($filter) {\r\n    \r\n\r\n    return function(item, key){\r\n      var array = [];\r\n      angular.forEach(item, function(value, objectKey){\r\n        value[key] = objectKey;\r\n        array.push(value);\r\n      });\r\n      return $filter('orderBy')(array, key);\r\n    };\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\n/**\r\n * @ngdoc object\r\n * @name adf.dashboardProvider\r\n * @description\r\n *\r\n * The dashboardProvider can be used to register widgets.\r\n */\r\nangular.module('adf.provider', [])\r\n    .provider('dashboard', function () {\r\n\r\n        var widgets = {};\r\n        var widgetsPath = '';\r\n        var messageTemplate = '<div class=\"alert alert-primary\">{}</div>';\r\n        var loadingTemplate = '\\\r\n      <div class=\"progress progress-striped active\">\\n\\\r\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\r\n          <span class=\"sr-only\" translate>FORM.MSG.LOADING ...</span>\\n\\\r\n        </div>\\n\\\r\n      </div>';\r\n        var customWidgetTemplatePath = null;\r\n\r\n        // default apply function of widget.edit.apply\r\n        var defaultApplyFunction = function () {\r\n            return true;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#widget\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Registers a new widget.\r\n         *\r\n         * @param {string} name of the widget\r\n         * @param {object} widget to be registered.\r\n         *\r\n         *   Object properties:\r\n         *\r\n         *   - `title` - `{string=}` - The title of the widget.\r\n         *   - `description` - `{string=}` - Description of the widget.\r\n         *   - `category` - `{string=}` - Category of the widget.\r\n         *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\r\n         *   - `config` - `{object}` - Predefined widget configuration.\r\n         *   - `controller` - `{string=|function()=}` - Controller fn that should be\r\n         *      associated with newly created scope of the widget or the name of a\r\n         *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\r\n         *      if passed as a string.\r\n         *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\r\n         *      published to scope under the `controllerAs` name.\r\n         *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\r\n         *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\r\n         *   - `template` - `{string=|function()=}` - html template as a string.\r\n         *   - `templateUrl` - `{string=}` - path to an html template.\r\n         *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\r\n         *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n         *      be injected into the controller. If any of these dependencies are promises, the widget\r\n         *      will wait for them all to be resolved or one to be rejected before the controller is\r\n         *      instantiated.\r\n         *      If all the promises are resolved successfully, the values of the resolved promises are\r\n         *      injected.\r\n         *\r\n         *      The map object is:\r\n         *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\r\n         *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n         *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\r\n         *        and the return value is treated as the dependency. If the result is a promise, it is\r\n         *        resolved before its value is injected into the controller.\r\n         *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n         *      on the scope of the widget.\r\n         *   - `edit` - `{object}` - Edit modus of the widget.\r\n         *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n         *        on the scope of the widget.\r\n         *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\r\n         *        Default is true.\r\n         *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\r\n         *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\r\n         *        The function have to return a boolean or an promise which can be resolved to a boolean.\r\n         *        The function can use injection.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.widget = function (name, widget) {\r\n            var w = angular.extend({\r\n                reload: false,\r\n                frameless: false\r\n            }, widget);\r\n            if (w.edit) {\r\n                var edit = {\r\n                    reload: true,\r\n                    immediate: false,\r\n                    apply: defaultApplyFunction\r\n                };\r\n                angular.extend(edit, w.edit);\r\n                w.edit = edit;\r\n            }\r\n            //OUW-1610\r\n            if (!w.config) {\r\n                w.config = {};\r\n            }\r\n            widgets[name] = w;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#widgetsPath\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Sets the path to the directory which contains the widgets. The widgets\r\n         * path is used for widgets with a templateUrl which contains the\r\n         * placeholder {widgetsPath}. The placeholder is replaced with the\r\n         * configured value, before the template is loaded, but the template is\r\n         * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\r\n         * The default value of widgetPaths is ''.\r\n         *\r\n         *\r\n         * @param {string} path to the directory which contains the widgets\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.widgetsPath = function (path) {\r\n            widgetsPath = path;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#messageTemplate\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the template for messages.\r\n         *\r\n         * @param {string} template for messages.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.messageTemplate = function (template) {\r\n            messageTemplate = template;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#loadingTemplate\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the template which is displayed as\r\n         * long as the widget resources are not resolved.\r\n         *\r\n         * @param {string} template loading template\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.loadingTemplate = function (template) {\r\n            loadingTemplate = template;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#customWidgetTemplatePath\r\n         * @propertyOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the container template for the widgets\r\n         *\r\n         * @param {string} path to the custom widget template\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.customWidgetTemplatePath = function (templatePath) {\r\n            customWidgetTemplatePath = templatePath;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc service\r\n         * @name adf.dashboard\r\n         * @description\r\n         *\r\n         * The dashboard holds all options and  widgets.\r\n         *\r\n         * @property {Array.<Object>} widgets Array of registered widgets.\r\n         * @property {string} widgetsPath Default path for widgets.\r\n         * @property {string} messageTemplate Template for messages.\r\n         * @property {string} loadingTemplate Template for widget loading.\r\n         * * @property {string} customWidgetTemplatePath Changes the container template for the widgets\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.$get = function () {\r\n            var cid = 0;\r\n\r\n            return {\r\n                widgets: widgets,\r\n                widgetsPath: widgetsPath,\r\n                messageTemplate: messageTemplate,\r\n                loadingTemplate: loadingTemplate,\r\n                customWidgetTemplatePath: customWidgetTemplatePath,\r\n\r\n                /**\r\n                 * @ngdoc method\r\n                 * @name adf.dashboard#id\r\n                 * @methodOf adf.dashboard\r\n                 * @description\r\n                 *\r\n                 * Creates an ongoing numeric id. The method is used to create ids for\r\n                 * columns and widgets in the dashboard.\r\n                 */\r\n                id: function () {\r\n                    return new Date().getTime() + '-' + (++cid);\r\n                },\r\n\r\n                /**\r\n                 * @ngdoc method\r\n                 * @name adf.dashboard#idEqual\r\n                 * @methodOf adf.dashboard\r\n                 * @description\r\n                 *\r\n                 * Checks if the given ids are equal.\r\n                 *\r\n                 * @param {string} id widget or column id\r\n                 * @param {string} other widget or column id\r\n                 */\r\n                idEquals: function (id, other) {\r\n                    // use toString, because old ids are numbers\r\n                    return ((id) && (other)) && (id.toString() === other.toString());\r\n                }\r\n            };\r\n        };\r\n\r\n    });\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf')\r\n    .directive('adfWidgetContent', [\"$log\", \"$q\", \"widgetService\", \"$compile\", \"$controller\", \"$injector\", \"dashboard\", \"$translate\", function ($log, $q, widgetService,\r\n        $compile, $controller, $injector, dashboard, $translate) {\r\n\r\n        function renderError($element, msg) {\r\n            $log.warn(msg);\r\n            $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\r\n        }\r\n\r\n        function compileWidget($scope, $element, currentScope, configChanged) {\r\n            var model = $scope.model;\r\n            if (!model) {\r\n                $translate('ADF.ERROR.MODEL_IS_UNDEFINED').then(function (translateMessage) {\r\n                    renderError($element, translateMessage);\r\n                });\r\n                return currentScope;\r\n            }\r\n\r\n            var content = $scope.content;\r\n\r\n            if (!content) {\r\n                $translate('ADF.ERROR.WIDGET_FOR_DEPRECTATED', {\r\n                    title: model.title\r\n                }).then(function (translateMessage) {\r\n                    renderError($element, translateMessage);\r\n                });\r\n                return currentScope;\r\n            }\r\n\r\n            var extra = $scope.extra;\r\n            var newScope = currentScope;\r\n\r\n            if (newScope) {\r\n                var is_menu = newScope.menu !== undefined && newScope.menu !== null && (!newScope.isPaginationEnable || !newScope.isPaginationEnable());\r\n                if (is_menu || configChanged || !angular.isFunction(newScope.reloadData)) {\r\n                    if ($scope.navOptionsHandler) {\r\n                        $scope.navOptionsHandler.firstLoad = true;\r\n                    }\r\n                    newScope = renderWidget($scope, $element, currentScope, model, content, extra);\r\n                } else {\r\n                    var is_itemsPerPage = newScope.itemsPerPage !== undefined && newScope.itemsPerPage !== null;\r\n                    if (is_itemsPerPage || newScope.page) {\r\n                        newScope.page = 1;\r\n                    }\r\n                    newScope.reloadData();\r\n                }\r\n            } else {\r\n                if ($scope.navOptionsHandler) {\r\n                    $scope.navOptionsHandler.firstLoad = true;\r\n                }\r\n\r\n                newScope = renderWidget($scope, $element, currentScope, model, content, extra);\r\n            }\r\n\r\n            function _getWindowTime(type) {\r\n                if (type === 'custom') {\r\n                    return {\r\n                        from: newScope.config.windowFilter.from,\r\n                        to: newScope.config.windowFilter.to\r\n                    };\r\n                }\r\n                var from = window.moment().subtract(1, type);\r\n                return {\r\n                    from: from._d\r\n                };\r\n            }\r\n\r\n\r\n\r\n            newScope.config.getWindowTime = function () {\r\n                var windowFilter = newScope.config.windowFilter;\r\n                if (windowFilter && windowFilter.type) {\r\n                    var winTime = _getWindowTime(windowFilter.type);\r\n                    /* jshint ignore:start */\r\n                    if (!window.eval(newScope.config.windowFilter.rawdate)) {\r\n                        for (var key in winTime) {\r\n                            winTime[key] = window.moment(winTime[key]).format();\r\n                        }\r\n                        winTime['rawdate'] = true;\r\n                    }\r\n                    /* jshint ignore:end */\r\n                    return winTime;\r\n                }\r\n            };\r\n\r\n            if (extra) {\r\n                newScope.editing = extra.editing ? true : false;\r\n                newScope.extraData = extra;\r\n            }\r\n\r\n            return newScope;\r\n        }\r\n\r\n        function renderWidget($scope, $element, currentScope, model, content, extra) {\r\n            // display loading template\r\n            $element.html(dashboard.loadingTemplate);\r\n\r\n            // create new scope\r\n            var templateScope = $scope.$new();\r\n\r\n            // pass config object to scope\r\n            if (!model.config) {\r\n                model.config = {};\r\n            }\r\n\r\n            templateScope.config = model.config;\r\n            templateScope.editing = extra && extra.editing;\r\n\r\n            if (extra) {\r\n                templateScope.extra = extra;\r\n            }\r\n\r\n            var _from = currentScope || templateScope.config;\r\n            templateScope.selectionManager = (_from) ? _from.selectionManager : undefined;\r\n\r\n            // local injections\r\n            var base = {\r\n                $scope: templateScope,\r\n                widget: model,\r\n                config: model.config\r\n            };\r\n\r\n            // get resolve promises from content object\r\n            var resolvers = {};\r\n            resolvers.$tpl = widgetService.getTemplate(content);\r\n            if (content.resolve) {\r\n                angular.forEach(content.resolve, function (promise, key) {\r\n                    if (angular.isString(promise)) {\r\n                        resolvers[key] = $injector.get(promise);\r\n                    } else {\r\n                        resolvers[key] = $injector.invoke(promise, promise, base);\r\n                    }\r\n                });\r\n            }\r\n\r\n            // resolve all resolvers\r\n            $q.all(resolvers).then(function (locals) {\r\n                angular.extend(locals, base);\r\n\r\n                // pass resolve map to template scope as defined in resolveAs\r\n                if (content.resolveAs) {\r\n                    templateScope[content.resolveAs] = locals;\r\n                }\r\n\r\n                // compile & render template\r\n                var template = locals.$tpl;\r\n                $element.html(template);\r\n                if (content.controller) {\r\n                    var templateCtrl = $controller(content.controller, locals);\r\n                    if (content.controllerAs) {\r\n                        templateScope[content.controllerAs] = templateCtrl;\r\n                    }\r\n                    $element.children().data('$ngControllerController', templateCtrl);\r\n                }\r\n                $compile($element.contents())(templateScope);\r\n            }, function (reason) {\r\n                // handle promise rejection\r\n                var msg = 'ADF.ERROR.COULD_NOT_RESOLVE_ALL_PROMISSES';\r\n                $translate(msg, {\r\n                    reason: (reason ? ': ' + reason : reason)\r\n                }).then(function (translateMessage) {\r\n                    renderError($element, translateMessage);\r\n                });\r\n            });\r\n\r\n            // destroy old scope\r\n            if (currentScope) {\r\n                currentScope.$destroy();\r\n            }\r\n\r\n            return templateScope;\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            require: '?^^adfWidgetGrid',\r\n            scope: {\r\n                model: '=',\r\n                content: '=',\r\n                extra: '=',\r\n                navOptionsHandler: '=?',\r\n                filterHandler: '=?',\r\n                widgetActionsHandler: '=?'\r\n            },\r\n            link: function ($scope, $element, attrs, adfWidgetGridCtrl) {\r\n                var currentScope = compileWidget($scope, $element, null);\r\n                if (adfWidgetGridCtrl) {\r\n                    $scope.search = $scope.search || {};\r\n                    adfWidgetGridCtrl.updateWidgetFilters($scope.model.config.filter && $scope.model.config.filter.id);\r\n                }\r\n\r\n                var widgetConfigChangedEvt = $scope.$on('widgetConfigChanged', function (event, changeWidgets) {\r\n                    if (changeWidgets) {\r\n                        if (changeWidgets.indexOf($scope.model.wid) !== -1 && adfWidgetGridCtrl) {\r\n                            adfWidgetGridCtrl.updateWidgetFilters($scope.model.config.filter && $scope.model.config.filter.id, true);\r\n                        }\r\n                    } else {\r\n                        currentScope = compileWidget($scope, $element, currentScope, true);\r\n                    }\r\n                });\r\n\r\n                var widgetReloadEvt = $scope.$on('widgetReload', function (event, reloadWidgets) {\r\n                    var reloadWidget = true;\r\n                    if (reloadWidgets && reloadWidgets.length > 0) {\r\n                        reloadWidget = reloadWidgets.indexOf($scope.model.wid) !== -1;\r\n                    }\r\n                    if (reloadWidget) {\r\n                        currentScope = compileWidget($scope, $element, currentScope, false);\r\n                        if (adfWidgetGridCtrl && adfWidgetGridCtrl.updateWidgetFilters) {\r\n                            adfWidgetGridCtrl.updateWidgetFilters($scope.model.config.filter && $scope.model.config.filter.id);\r\n                        }\r\n                    }\r\n                });\r\n\r\n                $scope.$on('destroy', function () {\r\n                    widgetConfigChangedEvt();\r\n                    widgetReloadEvt();\r\n                });\r\n            }\r\n        };\r\n    }]);\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf')\r\n    .directive('adfWidgetGrid', [\"$injector\", \"$q\", \"$log\", \"$uibModal\", \"$rootScope\", \"$interval\", \"dashboard\", \"adfTemplatePath\", \"Filter\", \"toastr\", \"$translate\", function ($injector, $q, $log, $uibModal, $rootScope, $interval, dashboard, adfTemplatePath, Filter, toastr, $translate) {\r\n        function preLink($scope) {\r\n            var definition = $scope.definition;\r\n\r\n            if (definition) {\r\n                var w = dashboard.widgets[definition.type];\r\n                if (w) {\r\n                    // pass title\r\n                    if (!definition.title) {\r\n                        definition.title = w.title;\r\n                    }\r\n\r\n                    definition.titleTemplateUrl = adfTemplatePath + 'widget-grid-title.html';\r\n\r\n                    if (!definition.editTemplateUrl) {\r\n                        definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\r\n                        if (w.editTemplateUrl) {\r\n                            definition.editTemplateUrl = w.editTemplateUrl;\r\n                        }\r\n                    }\r\n\r\n                    if (!definition.titleTemplateUrl) {\r\n                        definition.frameless = w.frameless;\r\n                    }\r\n\r\n                    if (!definition.styleClass) {\r\n                        definition.styleClass = w.styleClass;\r\n                    }\r\n\r\n                    // set id for sortable\r\n                    if (!definition.wid) {\r\n                        definition.wid = dashboard.id();\r\n                    }\r\n\r\n                    // pass copy of widget to scope\r\n                    $scope.widget = angular.copy(w);\r\n\r\n                    // create config object\r\n                    var config = definition.config;\r\n                    if (config) {\r\n                        if (angular.isString(config)) {\r\n                            config = angular.fromJson(config);\r\n                        }\r\n                    } else {\r\n                        config = {};\r\n                    }\r\n                    // pass config to scope\r\n                    $scope.config = config;\r\n\r\n                    if (typeof $scope.widget.show_modal_footer === 'undefined') {\r\n                        $scope.widget.show_modal_footer = true;\r\n                    }\r\n\r\n                    if (typeof $scope.widget.show_reload_config === 'undefined') {\r\n                        $scope.widget.show_reload_config = true;\r\n                    }\r\n\r\n                    // collapse exposed $scope.widgetState property\r\n                    if (!$scope.widgetState) {\r\n                        $scope.widgetState = {};\r\n                        $scope.widgetState.isCollapsed = (w.collapsed === true) ? w.collapsed : false;\r\n                    }\r\n\r\n                } else {\r\n                    $log.warn('could not find widget ' + definition.type);\r\n                }\r\n            } else {\r\n                $log.debug('definition not specified, widget was probably removed');\r\n            }\r\n        }\r\n\r\n        function postLink($scope, $element) {\r\n            var definition = $scope.definition;\r\n            if (!definition) {\r\n                $log.debug('widget not found');\r\n                return;\r\n            }\r\n            var config = $scope.config || {};\r\n\r\n            // bind close function\r\n            var deleteWidget = function () {\r\n                $element.remove();\r\n                $rootScope.$broadcast('adfWidgetRemovedFromGrid', definition);\r\n            };\r\n\r\n            $scope.remove = function () {\r\n                if ($scope.options.enableConfirmDelete) {\r\n                    var deleteScope = $scope.$new();\r\n\r\n                    var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\r\n                    if (definition.deleteTemplateUrl) {\r\n                        deleteTemplateUrl = definition.deleteTemplateUrl;\r\n                    }\r\n                    var opts = {\r\n                        scope: deleteScope,\r\n                        templateUrl: deleteTemplateUrl,\r\n                        backdrop: 'static'\r\n                    };\r\n                    var instance = $uibModal.open(opts);\r\n\r\n                    deleteScope.closeDialog = function () {\r\n                        instance.close();\r\n                        deleteScope.$destroy();\r\n                    };\r\n                    deleteScope.deleteDialog = function () {\r\n                        deleteWidget();\r\n                        deleteScope.closeDialog();\r\n                    };\r\n                } else {\r\n                    deleteWidget();\r\n                }\r\n            };\r\n\r\n\r\n            $scope.print = function () {\r\n                if (!$scope.editMode) {\r\n                    $scope.$broadcast('widgetPrint');\r\n                }\r\n            };\r\n\r\n            $scope.isExecuteOperationEnabled = function () {\r\n\r\n                if (config.entityKey)\r\n                    return true;\r\n                var filter = config.filter;\r\n\r\n                if (filter) {\r\n                    if (filter.headersFilter && filter.headersFilter.length > 0) {\r\n                        return true;\r\n                    } else {\r\n                        if (filter.type === \"basic\") {\r\n                            return filter.value.length > 0;\r\n                        }\r\n                        if (filter.type === \"advanced\") {\r\n                            return filter.value.length > 2 && filter.oql;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return false;\r\n            };\r\n\r\n            $scope.executeOperation = function () {\r\n                if (!$scope.editMode) {\r\n\r\n                    $scope.$parent.$broadcast('widgetExecuteOperation');\r\n                }\r\n            };\r\n\r\n            $scope.filter = {\r\n                typeFilter: 1,\r\n                showFilter: false,\r\n                showFinalFilter: false\r\n            };\r\n\r\n            $scope.launchSearching = function () {\r\n                var widget = {\r\n                    definition: definition,\r\n                    element: $element\r\n                };\r\n\r\n                $rootScope.$broadcast('adfLaunchSearchingFromWidget', widget, $scope.config.filter);\r\n                $scope.reload();\r\n            };\r\n\r\n\r\n            $scope.launchSearchingAdv = function () {\r\n                if (!$scope.filterApplied) {\r\n                    var executeSearch = true;\r\n                    $scope.search.quick = '';\r\n                    if ($scope.search.json === '' || $scope.search.json === '{}' || (!angular.isString($scope.search.json) && Object.keys($scope.search.json).length === 0)) {\r\n                        if ($scope.search.oql && $scope.search.oql.trim().length > 0) {\r\n                            toastr.error($translate.instant(\"TOASTR.FILTER_IS_MALFORMED\"));\r\n                            executeSearch = false;\r\n                        } else {\r\n                            $scope.config.filter = {\r\n                                type: 'advanced',\r\n                                oql: '',\r\n                                value: ''\r\n                            };\r\n                        }\r\n                    } else {\r\n                        $scope.config.filter = {\r\n                            type: 'advanced',\r\n                            oql: $scope.search.oql,\r\n                            value: $scope.search.json,\r\n                            headersFilter: $scope.config.filter.headersFilter\r\n                        };\r\n                    }\r\n\r\n                    if (executeSearch) {\r\n                        $scope.launchSearching();\r\n                        $scope.filterApplied = true;\r\n                    }\r\n                }\r\n            };\r\n\r\n            $scope.launchSearchingQuick = function () {\r\n                if (!$scope.filterApplied) {\r\n                    $scope.search.oql = $scope.search.json = '';\r\n                    $scope.config.filter = {\r\n                        type: 'basic',\r\n                        value: $scope.search.quick,\r\n                        headersFilter: $scope.config.filter.headersFilter\r\n                    };\r\n                    $scope.launchSearching();\r\n                    $scope.filterApplied = true;\r\n                }\r\n            };\r\n\r\n            $scope.launchSearchingShared = function () {\r\n                // if (!$scope.filterApplied) {\r\n                var shared = $scope.search.id;\r\n                if (shared) {\r\n                    shared.filter.id = shared.wid;\r\n                    $scope.config.filter = shared.filter;\r\n                } else {\r\n                    $scope.config.filter = {};\r\n                }\r\n                $scope.launchSearching();\r\n                $scope.filterApplied = true;\r\n                // }\r\n            };\r\n\r\n            $scope.filterSharedSelect = function ($item, $model) {\r\n                $scope.filterApplied = false;\r\n                $scope.launchSearchingShared();\r\n            };\r\n            $scope.filterSharedRemove = function ($item, $model) {\r\n                $scope.filterApplied = false;\r\n            };\r\n\r\n            var windowTimeChanged = $scope.$on('onWindowTimeChanged', function (event, timeObj) {\r\n                $scope.config.windowFilter = timeObj ? timeObj : (config.windowFilter ? {} : timeObj);\r\n                var widget = {\r\n                    definition: definition,\r\n                    element: $element\r\n                };\r\n                $rootScope.$broadcast('adfWindowTimeChangedFromWidget', widget, $scope.config.windowFilter);\r\n                $scope.reload();\r\n            });\r\n\r\n            $scope.enter = function (event) {\r\n                var keycode = (event.keyCode ? event.keyCode : event.which);\r\n                if (keycode === 13) {\r\n                    if ($scope.filter.typeFilter === 0)\r\n                        $scope.launchSearchingAdv();\r\n                    if ($scope.filter.typeFilter === 1)\r\n                        $scope.launchSearchingQuick();\r\n                    if ($scope.filter.typeFilter === 2)\r\n                        $scope.launchSearchingShared();\r\n                } else if (keycode === 19) {\r\n                    $scope.filter.showFinalFilter = !$scope.filter.showFinalFilter;\r\n                } else {\r\n                    $scope.filterApplied = false;\r\n                }\r\n            };\r\n\r\n\r\n            $scope.customSelectors = [];\r\n            $scope.getCustomSelectors = function () {\r\n                if ($scope.config.customSelectors) {\r\n                    $scope.customSelectors = $scope.config.customSelectors;\r\n                } else {\r\n                    config.widgetSelectors().findFields('').then(function (fields) {\r\n                        $scope.customSelectors = fields;\r\n                        $scope.$apply();\r\n                    }).catch(function (err) {\r\n                        $log.error(err);\r\n                    });\r\n                }\r\n            };\r\n\r\n            $scope.changeDirection = function () {\r\n                var direction = config.sort.direction;\r\n                if (direction === 'DESCENDING') {\r\n                    $scope.config.sort.direction = 'ASCENDING';\r\n                } else if (direction === 'ASCENDING') {\r\n                    $scope.config.sort.direction = 'DESCENDING';\r\n                }\r\n                $scope.reload();\r\n            };\r\n\r\n            $scope.debugQuery = function () {\r\n                Filter.parseQuery($scope.search.oql || '')\r\n                    .then(function (data) {\r\n                        $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\r\n                        $scope.unknownWords = '';\r\n                        $scope.filter_error = null;\r\n                    })\r\n                    .catch(function (err) {\r\n                        $scope.filter_error = err;\r\n                        // Tratar el error\r\n                    });\r\n\r\n            };\r\n\r\n            $scope.autocomplete_options = function () {\r\n                var autocomplete_options = {\r\n                    suggest: Filter.suggest_field_delimited,\r\n                    customSelectors: config.widgetSelectors()\r\n                };\r\n\r\n                return autocomplete_options;\r\n\r\n            };\r\n\r\n            // Multiple selection\r\n            $scope.selectedItems = definition.selectedItems || {};\r\n\r\n            // Gestor de seleccion\r\n            $scope.selectionManager = {\r\n                currentSelection: $scope.selectedItems,\r\n                isSelected: function (key, obj) {\r\n                    if ($scope.selectedItems[key] && !angular.isUndefined(obj)) {\r\n                        $scope.selectedItems[key].data = obj;\r\n                    }\r\n\r\n                    return $scope.selectedItems[key] ? true : false;\r\n                },\r\n                totalSelected: function () {\r\n                    return Object.keys($scope.selectedItems).length;\r\n                }\r\n            };\r\n\r\n            if (definition.config.sendSelection) {\r\n\r\n                $scope.sendEntities = function () {\r\n                    definition.config.sendSelection($scope.selectedItems);\r\n                    $scope.$parent.closeDialog();\r\n                };\r\n\r\n                if (definition.config.selectedItems) {\r\n                    $scope.selectedItems = angular.copy(definition.config.selectedItems);\r\n                }\r\n\r\n                $scope.config.selectionManager = $scope.selectionManager;\r\n            }\r\n\r\n            $scope.manageSelectedItems = function () {\r\n                var selectionScope = $scope.$new();\r\n\r\n                if (definition.config.sendSelection) {\r\n                    delete config.selectionConfig.operationTypes;\r\n                    delete config.selectionConfig.filterTypes;\r\n                }\r\n\r\n                selectionScope.selectionConfig = config.selectionConfig;\r\n\r\n                selectionScope.selectedItems = [];\r\n                angular.forEach($scope.selectedItems, function (value, key) {\r\n                    selectionScope.selectedItems.push({\r\n                        key: key,\r\n                        value: value\r\n                    });\r\n                });\r\n\r\n                selectionScope.currentSelection = {\r\n                    selected: selectionScope.selectedItems\r\n                };\r\n\r\n                var manageItemsSelectedTemplate = adfTemplatePath + 'widget-selection.html';\r\n                var opts = {\r\n                    scope: selectionScope,\r\n                    templateUrl: manageItemsSelectedTemplate,\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    animation: true\r\n                };\r\n\r\n                var instance = $uibModal.open(opts);\r\n\r\n                selectionScope.restoreSelection = function () {\r\n                    selectionScope.currentSelection = {\r\n                        selected: selectionScope.selectedItems\r\n                    };\r\n                };\r\n\r\n                selectionScope.clearSelection = function () {\r\n                    selectionScope.currentSelection.selected = [];\r\n                };\r\n\r\n                // Cierra sy guarda los datos de nueva selección\r\n                selectionScope.applyFilter = function (type) {\r\n                    var customOql = selectionScope.selectionConfig.filterAction(selectionScope.currentSelection.selected, type);\r\n\r\n                    if (!angular.isUndefined(customOql) && customOql !== null) {\r\n                        $scope.filter.typeFilter = 0;\r\n                        Filter.parseQuery(customOql).then(function (data) {\r\n                            $scope.search.oql = customOql;\r\n                            $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\r\n                            $scope.unknownWords = '';\r\n                            $scope.filter_error = null;\r\n\r\n                            $scope.launchSearchingAdv();\r\n                        }).catch(function (err) {\r\n                            $scope.filter_error = err;\r\n                        });\r\n                    }\r\n                };\r\n\r\n                selectionScope.executeOperation = function (operationType) {\r\n                    if (!$scope.editMode) {\r\n                        $scope.$parent.$broadcast('widgetExecuteOperation', {\r\n                            'selectedItems': selectionScope.currentSelection.selected,\r\n                            'type': operationType\r\n                        });\r\n                    }\r\n                };\r\n\r\n                // Cierra sy guarda los datos de nueva selección\r\n                selectionScope.saveChangesDialog = function () {\r\n                    var finalSelection = {};\r\n                    angular.forEach(selectionScope.currentSelection.selected, function (data, idx) {\r\n                        finalSelection[data.key] = {\r\n                            data: data.value.data,\r\n                            visible: data.value.visible\r\n                        };\r\n                    });\r\n\r\n                    $scope.selectedItems = angular.copy(finalSelection);\r\n                    $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n\r\n                    $scope.selectionManager.lastItem = {};\r\n                    $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n\r\n                    instance.close();\r\n                    selectionScope.$destroy();\r\n                };\r\n\r\n                // Cierra sin realizar ninguna acción\r\n                selectionScope.closeDialog = function () {\r\n                    instance.close();\r\n                    selectionScope.$destroy();\r\n                };\r\n            };\r\n\r\n\r\n            // bind edit function\r\n            $scope.edit = function () {\r\n                var editScope = $scope.$new();\r\n                editScope.definition = angular.copy(definition);\r\n\r\n                var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\r\n                if (definition.editTemplateUrl) {\r\n                    adfEditTemplatePath = definition.editTemplateUrl;\r\n                }\r\n\r\n                var opts = {\r\n                    scope: editScope,\r\n                    templateUrl: adfEditTemplatePath,\r\n                    backdrop: 'static',\r\n                    size: 'lg'\r\n                };\r\n\r\n                var instance = $uibModal.open(opts);\r\n\r\n                editScope.closeDialog = function () {\r\n                    instance.close();\r\n                    editScope.$destroy();\r\n                };\r\n\r\n                // TODO create util method\r\n                function createApplyPromise(result) {\r\n                    var promise;\r\n                    if (typeof result === 'boolean') {\r\n                        var deferred = $q.defer();\r\n                        if (result) {\r\n                            deferred.resolve();\r\n                        } else {\r\n                            deferred.reject();\r\n                        }\r\n                        promise = deferred.promise;\r\n                    } else {\r\n                        promise = $q.when(result);\r\n                    }\r\n                    return promise;\r\n                }\r\n\r\n                editScope.saveDialog = function () {\r\n                    // clear validation error\r\n                    editScope.validationError = null;\r\n\r\n                    // build injection locals\r\n                    var widget = $scope.widget;\r\n\r\n                    // create a default apply method for widgets\r\n                    // without edit mode\r\n                    // see issue https://goo.gl/KHPQLZ\r\n                    var applyFn;\r\n                    if (widget.edit) {\r\n                        applyFn = widget.edit.apply;\r\n                    } else {\r\n                        applyFn = function () {\r\n                            return true;\r\n                        };\r\n                    }\r\n\r\n                    var editScopeDefinition = editScope.definition.config || {};\r\n                    // injection locals\r\n                    var locals = {\r\n                        widget: widget,\r\n                        definition: editScope.definition,\r\n                        config: editScopeDefinition\r\n                    };\r\n\r\n                    // invoke apply function and apply if success\r\n                    var result = $injector.invoke(applyFn, applyFn, locals);\r\n                    createApplyPromise(result).then(function () {\r\n                        definition.title = editScope.definition.title;\r\n                        if (editScope.definition.type === 'summaryChart') {\r\n                            editScope.definition.Ftype = editScope.definition.config.type.toLowerCase();\r\n                            definition.Ftype = editScope.definition.config.type.toLowerCase();\r\n                        }\r\n                        angular.extend(definition.config, editScopeDefinition);\r\n\r\n                        editScope.closeDialog();\r\n\r\n                        if (widget.edit && widget.edit.reload) {\r\n                            $scope.setReloadTimeout();\r\n                            // reload content after edit dialog is closed\r\n                            $scope.$broadcast('widgetConfigChanged');\r\n                        }\r\n                    }, function (err) {\r\n                        if (err) {\r\n                            editScope.validationError = err;\r\n                        } else {\r\n                            editScope.validationError = 'VALIDATION_DURING_APPLY_FAILED';\r\n                        }\r\n                    });\r\n                };\r\n\r\n            };\r\n\r\n\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            templateUrl: adfTemplatePath + 'widget-grid.html',\r\n            scope: {\r\n                definition: '=',\r\n                editMode: '=',\r\n                options: '=',\r\n                widgetState: '='\r\n            },\r\n            controller: [\"$scope\", function ($scope) {\r\n                var _setFilterType = function (selectFilter) {\r\n                    var config = $scope.config || {};\r\n                    var filter = config.filter = config.filter ? config.filter : {};\r\n                    var id = filter.id = selectFilter && filter.id;\r\n                    filter.headersFilter = selectFilter && filter.headersFilter;\r\n                    switch (filter.type) {\r\n                        case 'advanced':\r\n                            $scope.filter.typeFilter = id ? 2 : 0;\r\n                            $scope.search = {\r\n                                oql: filter.oql,\r\n                                json: filter.value\r\n                            };\r\n                            break;\r\n                        case 'basic':\r\n                            $scope.filter.typeFilter = id ? 2 : 1;\r\n                            $scope.search = {\r\n                                quick: filter.value\r\n                            };\r\n\r\n                            break;\r\n                        default:\r\n                            $scope.filter.typeFilter = id ? 2 : 1;\r\n                            $scope.search = {\r\n                                quick: filter.value = ''\r\n                            };\r\n                            break;\r\n                    }\r\n                    $scope.search.id = selectFilter;\r\n                };\r\n\r\n                this.updateWidgetFilters = function (filterId, configChange) {\r\n                    if ($scope.options && $scope.options.extraData && $scope.options.extraData.widgetFilters) {\r\n                        var _widgetFilters = $scope.options.extraData.widgetFilters;\r\n                        var model = $scope.definition;\r\n                        var selectFilter;\r\n                        var sharedFilters = _widgetFilters.filter(function (widgetFilter) {\r\n                            // Recuperamos solos los filtros de widgets que cumplan las condiciones:\r\n                            // - No tenga un filtro heredado como filtro\r\n                            // - El tipo de filtro sea igual que el widget que pueda heredarlo (Ftype)\r\n                            // - No recuperamos el filtro propio del widget  \r\n                            var shared = (!widgetFilter.filter || !widgetFilter.filter.id) && (widgetFilter.Ftype === model.Ftype) && (widgetFilter.wid !== model.wid);\r\n                            if (shared && (filterId === widgetFilter.wid))\r\n                                selectFilter = widgetFilter;\r\n                            return shared;\r\n                        });\r\n\r\n                        $scope.sharedFilters = angular.copy(sharedFilters);\r\n                        if (!configChange || !selectFilter && !!filterId)\r\n                            _setFilterType(selectFilter);\r\n                    }\r\n\r\n                };\r\n\r\n                var definition = $scope.definition;\r\n\r\n\r\n                if (definition.config.selectedItems) {\r\n                    $scope.selectedItemsLength = Object.keys(definition.config.selectedItems).length;\r\n                }\r\n\r\n\r\n                // Controlador de la barra inferior de los widgets\r\n                $scope.navOptionsHandler = {\r\n                    firstLoad: true,\r\n                    loadingData: false,\r\n                    startLoading: function () {\r\n                        $scope.navOptionsHandler.loadingData = true;\r\n                    },\r\n                    stopLoading: function () {\r\n                        $scope.navOptionsHandler.firstLoad = false;\r\n                        $scope.navOptionsHandler.loadingData = false;\r\n                        $scope.navOptionsHandler.lastMessageTime = new Date();\r\n                    },\r\n                    setStatusMessage: function (message) {\r\n                        $scope.navOptionsHandler.statusMessage = message;\r\n                        $scope.navOptionsHandler.lastMessageTime = new Date();\r\n                    }\r\n                };\r\n\r\n                // Controlador de los parámetros del filtro\r\n                $scope.filterHandler = {\r\n                    changeFilter: function (filter, search, typeFilter) {\r\n                        $scope.search = search;\r\n                        $scope.filter.typeFilter = typeFilter;\r\n                    }\r\n                };\r\n\r\n                // Controlador de las custom actions del widget\r\n                $scope.widgetActionsHandler = {\r\n                    actions: [],\r\n                    setActions: function (actions) {\r\n                        $scope.widgetActionsHandler.actions = actions;\r\n                    }\r\n                };\r\n\r\n                var adfDashboardCollapseExpand = $scope.$on('adfDashboardCollapseExpand', function (event, args) {\r\n                    $scope.widgetState.isCollapsed = args.collapseExpandStatus;\r\n                });\r\n\r\n                var adfWidgetEnterEditMode = $scope.$on('adfWidgetEnterEditMode', function (event, widget) {\r\n                    if (dashboard.idEquals(definition.wid, widget.wid)) {\r\n                        $scope.edit();\r\n                    }\r\n                });\r\n\r\n                var adfIsEditMode = $scope.$on('adfIsEditMode', function (event, widget) {\r\n                    $scope.editing = true;\r\n                });\r\n\r\n                var adfDashboardChanged = $scope.$on('adfDashboardChanged', function (event, name, model) {\r\n                    //config.widgetSelectors = tiene filtro\r\n                    var widgetConfigChanged = [];\r\n                    var grid = model.grid;\r\n                    if (grid && grid.length > 0) {\r\n                        grid.forEach(function (element) {\r\n                            var definition = element.definition;\r\n                            widgetConfigChanged.push(definition.wid);\r\n                        });\r\n                        var widgetFilters = $scope.options.extraData && $scope.options.extraData.widgetFilters;\r\n                        var sharedFilters = widgetFilters.filter(function (widgetFilter) {\r\n                            var filter = widgetFilter.filter;\r\n                            return filter && !filter.id || widgetConfigChanged.indexOf(filter.id) !== -1;\r\n                        });\r\n                        $scope.sharedFilters = angular.copy(sharedFilters);\r\n                        $scope.editing = false;\r\n                        $scope.$broadcast('widgetConfigChanged', widgetConfigChanged);\r\n                    }\r\n                });\r\n\r\n                var adfDashboardEditsCancelled = $scope.$on('adfDashboardEditsCancelled', function (event, widget) {\r\n                    $scope.editing = false;\r\n                });\r\n\r\n                $scope.openFullScreen = function () {\r\n\r\n                    $scope.$emit('adfOpenModalWidgetFromOther', definition.type, $scope.config || {});\r\n                };\r\n\r\n                $scope.openAboutScreen = function (size) {\r\n                    size = 'md';\r\n                    var modalInstance = $uibModal.open({\r\n                        animation: true,\r\n                        templateUrl: 'widgetAboutModal.html',\r\n                        controller: [\"$scope\", \"$uibModalInstance\", \"information\", function ($scope, $uibModalInstance, information) {\r\n                            $scope.about = {};\r\n                            $scope.about.info = information;\r\n                            $scope.ok = function () {\r\n                                $uibModalInstance.close();\r\n                            };\r\n                        }],\r\n                        'size': size,\r\n                        resolve: {\r\n                            information: function () {\r\n                                return $scope.config.about;\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    modalInstance.result.then(function (selectedItem) {\r\n                        $scope.selected = selectedItem;\r\n                    }, function () {\r\n                        $log.info('Modal dismissed at: ' + new Date());\r\n                    });\r\n                };\r\n\r\n                $scope.saveWidgetScreen = function (wId) {\r\n                    $scope.$emit('generateSnapshot', {\r\n                        'objectSelector': '.widget_' + wId,\r\n                        'fileName': 'capture_' + new Date().getTime()\r\n                    });\r\n                };\r\n\r\n                var createQuickFilter = function (fieldsQuickSearch) {\r\n                    var _filter = {\r\n                        or: []\r\n                    };\r\n                    var criteria;\r\n                    fieldsQuickSearch.forEach(function (field) {\r\n                        criteria = {};\r\n                        criteria[field.operator] = {};\r\n                        criteria[field.operator][field.name] = $scope.config.filter.value;\r\n                        _filter.or.push(criteria);\r\n                    });\r\n                    return _filter;\r\n                };\r\n\r\n                $scope.downloadCsv = function () {\r\n                    var columns = $scope.config.columns;\r\n                    var scope_filter = $scope.config.filter;\r\n                    var extra_filter;\r\n                    var final_filter = {};\r\n                    var order = $scope.config.sort ? $scope.config.sort : undefined;\r\n                    if ($scope.config.windowFilter) {\r\n                        var window_filter = $scope.config.onWindowTimeChanged($scope.config.windowFilter);\r\n                        if (window_filter && window_filter.and) {\r\n                            extra_filter = {\r\n                                and: window_filter.and\r\n                            };\r\n                        }\r\n                    }\r\n                    var filter;\r\n                    if (scope_filter.type && scope_filter.type === 'advanced' && scope_filter.value.length > 4) {\r\n                        filter = JSON.parse(scope_filter.value);\r\n                    } else if (scope_filter.type && scope_filter.type === 'basic' && scope_filter.value.trim() !== '') {\r\n                        filter = createQuickFilter($scope.config.fieldsQuickSearch, scope_filter.value);\r\n                    }\r\n                    if (extra_filter) {\r\n                        if (filter) {\r\n                            final_filter = {\r\n                                and: [extra_filter, filter]\r\n                            };\r\n                        } else {\r\n                            final_filter = extra_filter;\r\n                        }\r\n                    } else {\r\n                        final_filter = filter;\r\n                    }\r\n                    $scope.$broadcast('downloadCsv', {\r\n                        'columns': columns,\r\n                        'filter': final_filter,\r\n                        'order': order\r\n                    });\r\n                };\r\n\r\n                $scope.generateQR = function () {\r\n                    $scope.$broadcast('generateQR');\r\n                };\r\n\r\n                var addItemToSelection = $scope.$on('addItemToSelection', function (event, item) {\r\n                    if (!$scope.selectedItems[item.key]) {\r\n                        $scope.selectedItems[item.key] = {\r\n                            data: item.data,\r\n                            visible: item.visible\r\n                        };\r\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n                        item.isSelected = true;\r\n                        $scope.selectionManager.lastItem = item;\r\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n                    }\r\n\r\n                });\r\n\r\n                var removeItemFromSelection = $scope.$on('removeItemFromSelection', function (event, item) {\r\n                    if ($scope.selectedItems[item.key]) {\r\n                        delete $scope.selectedItems[item.key];\r\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n                        item.isSelected = false;\r\n                        $scope.selectionManager.lastItem = item;\r\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n                    }\r\n                });\r\n\r\n                // bind reload function\r\n                var stopReloadTimeout;\r\n\r\n                $scope.setReloadTimeout = function () {\r\n                    var config = $scope.config || $scope.definition.config || {};\r\n\r\n\r\n                    var reloadPeriod = config.reloadPeriod;\r\n                    if (!isNaN(reloadPeriod) && (reloadPeriod * 1) !== 0) {\r\n                        if (angular.isDefined(stopReloadTimeout)) {\r\n                            $interval.cancel(stopReloadTimeout);\r\n                            stopReloadTimeout = undefined;\r\n                        }\r\n                        stopReloadTimeout = $interval($scope.reload, (reloadPeriod * 1000));\r\n                    } else if (stopReloadTimeout) {\r\n                        $interval.cancel(stopReloadTimeout);\r\n                    }\r\n                };\r\n\r\n                $scope.reload = function () {\r\n                    $scope.$broadcast('widgetReload');\r\n\r\n                    $scope.setReloadTimeout();\r\n                };\r\n\r\n                // verificacion de periodo de refresco\r\n                $scope.setReloadTimeout();\r\n\r\n                $scope.$on('$destroy', function () {\r\n                    adfDashboardCollapseExpand();\r\n                    adfWidgetEnterEditMode();\r\n                    adfIsEditMode();\r\n                    adfDashboardChanged();\r\n                    adfDashboardEditsCancelled();\r\n                    addItemToSelection();\r\n                    removeItemFromSelection();\r\n                    $interval.cancel(stopReloadTimeout);\r\n                });\r\n            }],\r\n            compile: function () {\r\n\r\n                /**\r\n                 * use pre link, because link of widget-content\r\n                 * is executed before post link widget\r\n                 */\r\n                return {\r\n                    pre: preLink,\r\n                    post: postLink\r\n                };\r\n            }\r\n        };\r\n\r\n    }]);\n\r\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n/**\r\n * The widget service provide helper functions to render widgets and their content.\r\n */\r\nangular.module('adf')\r\n  .factory('widgetService', [\"$http\", \"$q\", \"$sce\", \"$templateCache\", \"dashboard\", function($http, $q, $sce, $templateCache, dashboard) {\r\n    \r\n\r\n    function parseUrl(url) {\r\n      var parsedUrl = url;\r\n      if (url.indexOf('{widgetsPath}') >= 0) {\r\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\r\n                .replace('//', '/');\r\n        if (parsedUrl.indexOf('/') === 0) {\r\n          parsedUrl = parsedUrl.substring(1);\r\n        }\r\n      }\r\n      return parsedUrl;\r\n    }\r\n\r\n    var exposed = {};\r\n\r\n    exposed.getTemplate = function(widget){\r\n      var deferred = $q.defer();\r\n\r\n      if (widget.template) {\r\n        deferred.resolve(widget.template);\r\n      } else if (widget.templateUrl) {\r\n        // try to fetch template from cache\r\n        var tpl = $templateCache.get(widget.templateUrl);\r\n        if (tpl) {\r\n          deferred.resolve(tpl);\r\n        } else {\r\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\r\n          $http.get(url)\r\n               .success(function(response) {\r\n                 // put response to cache, with unmodified url as key\r\n                 $templateCache.put(widget.templateUrl, response);\r\n                 deferred.resolve(response);\r\n               })\r\n               .error(function() {\r\n                 deferred.reject('could not load template');\r\n               });\r\n        }\r\n      }\r\n\r\n      return deferred.promise;\r\n    };\r\n\r\n    return exposed;\r\n  }]);\r\n\nangular.module(\"adf\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"../src/templates/dashboard-edit.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h3 class=modal-title translate>ADF.DASHBOARD.TITLE.EDIT.DASHBOARD</h3> </div> <div class=modal-body> <form role=form name=form novalidate> <div class=\\\"form-group col-xs-12 col-md-4\\\"> <label for=dashboardTitle translate>ADF.COMMON.TITLE</label> <input type=text class=\\\"form-control text-primary\\\" id=dashboardTitle ng-model=copy.title required ng-init=\\\"copy.title=(copy.title | translate)\\\"> </div> <div class=\\\"form-group col-xs-12 col-md-8\\\"> <label for=dashboardDescription translate>ADF.DASHBOARD.LABEL.DESCRIPTION</label> <input type=text class=\\\"form-control text-primary\\\" id=dashboardDescription ng-init=\\\"copy.description=(copy.description | translate)\\\" ng-model=copy.description> </div> <div class=\\\"form-group col-xs-12 col-md-12\\\"> <label for=iconConfiguration.model class=text-primary>{{\\'ADF.DASHBOARD.LABEL.ICON\\' | translate }} </label> <div class=\\\"radio radio-primary radio-inline no-margin\\\"> <label id=icon_library> <input type=radio name=iconLibrary ng-model=iconConfiguration.model value=icon> <span class=circle></span> <span class=check></span> {{\\'ICON.LIBRARY\\' | translate }} </label> </div> <div class=\\\"radio radio-primary radio-inline\\\"> <label id=icon_image> <input type=radio name=iconImage ng-model=iconConfiguration.model value=image> <span class=circle></span> <span class=check></span> {{\\'ICON.IMAGE\\' | translate }} </label> </div> <div class=padding-5 ng-if=\\\"iconConfiguration.model === \\'icon\\'\\\"> <ui-select-fa-styles id=icon icon=iconConfiguration.icon required=false allow-clear=false disabled=\\\"iconConfiguration.model !== \\'icon\\'\\\" title=\\\"{{\\'ADF.WIDGET.TITLE.CHOOSE_ICON\\' | translate}}\\\"> </ui-select-fa-styles>  <input type=hidden ng-model=iconConfiguration.icon required=\\\"iconConfiguration.model === \\'icon\\'\\\"> </div> <div class=padding-5 ng-if=\\\"iconConfiguration.model === \\'image\\'\\\"> <div class=col-xs-12 ng-disabled=\\\"iconConfiguration.model !== \\'image\\'\\\"> <div ng-disabled=\\\"iconConfiguration.model !== \\'image\\'\\\" ng-if=!iconConfiguration.url ngf-drop ng-model=iconConfiguration.file ngf-max-size=1MB ngf-select=imageSelected($file) class=\\\"drop-box pointer\\\" ngf-drag-over-class=\\\"\\'dragover\\'\\\" ngf-multiple=false ngf-accept=\\\"\\'image/*\\'\\\" ngf-pattern=\\\"\\'image/*\\'\\\">{{ \\'FORM.DRAG_DROP\\' | translate }}<br>{{ \\'FORM.MAX_SIZE\\' | translate }}</div> <img ng-if=iconConfiguration.url class=navbar-domain src=\\\"{{ iconConfiguration.url }}\\\" data-intro=\\\"{{ \\'HELP.HEADER.DOMAIN_LOGO\\' | translate }}\\\" data-position=fixed> <input ng-if=\\\"iconConfiguration.model === \\'image\\'\\\" type=hidden ng-model=iconConfiguration.url required> </div> <div class=col-xs-12 ng-if=iconConfiguration.url> <button id=idRemoveFileLink ng-click=removeDataFile() class=\\\"btn btn-warning ux-txt-warning btn-group-justified pointer\\\"><i class=\\\"fa fa-trash\\\" aria-hidden=true></i> {{ \\'BUTTON.TITLE.REMOVE\\' | translate }}</button> </div> </div> <input type=hidden ng-model=iconConfiguration.model required> </div> <div class=\\\"form-group col-xs-12 col-md-12\\\"> <label for=dashboardBackground translate>ADF.DASHBOARD.LABEL.BACKGROUND_COLOR</label> <input type=text placeholder=\\\"{{ \\'ADF.WIDGET.PLACEHOLDER.COLOR\\' | translate }}\\\" colorpicker=hex class=\\\"form-control {{stream.identifier}}_color\\\" ng-model=copy.backgroundColor> </div> <div class=\\\"form-group col-xs-12 col-md-6\\\"> <label for=dashboardBackground translate>ADF.DASHBOARD.LABEL.BACKGROUND_IMAGE</label> <div ng-if=!copy.backgroundImage ngf-drop ng-model=copy.file ngf-max-size=1MB ngf-select=backgroundImageSelected($file) class=\\\"drop-box pointer\\\" ngf-drag-over-class=\\\"\\'dragover\\'\\\" ngf-multiple=false ngf-accept=\\\"\\'image/*\\'\\\" ngf-pattern=\\\"\\'image/*\\'\\\">{{ \\'FORM.DRAG_DROP\\' | translate }}<br>{{ \\'FORM.MAX_SIZE\\' | translate }}</div>  <div class=col-xs-12 ng-if=copy.backgroundImage> <button id=idRemoveBackgroundImageFileLink ng-click=removeBackgroundFile() class=\\\"btn btn-warning ux-txt-warning btn-group-justified pointer\\\"><i class=\\\"fa fa-trash\\\" aria-hidden=true></i> {{ \\'BUTTON.TITLE.REMOVE\\' | translate }}</button> </div> </div> <div class=\\\"form-group col-xs-12 col-md-6\\\" ng-if=copy.backgroundImage> <label for=BACKGROUND_SIZE class=text-primary>{{\\'ADF.DASHBOARD.LABEL.BACKGROUND_SIZE\\' | translate }}</label> <wizard-radio info=backgroundSize></wizard-radio> </div> <div class=\\\"form-group col-xs-12 col-md-12\\\"> <b>{{\\'DIALOG.ICON.PREVIEW\\' | translate}}</b> </div> <div class=\\\"form-group col-xs-12 col-md-12 well padding-5 dashboardPanel\\\"> <div gridstack class=grid-stack> <div gridstack-item class=grid-stack-item gs-item-x=0 gs-item-y=0 gs-item-width=5 gs-item-height=2 gs-item-min-width=2 gs-item-min-height=1 gs-item-autopos=0 data-intro=\\\"{{ \\'HELP.WORKSPACES.DASHBOARD\\' | translate }}\\\" data-position=absolute> <div class=\\\"grid-stack-item-content panel well no-padding\\\" style=\\\"background-color: {{copy.backgroundColor}} !important; background-image: url( {{copy.backgroundImage }} ) !important; background-size : {{backgroundSize.model }} !important\\\" title=\\\"{{ copy.title | translate }}\\\"> <div class=\\\"col-xs-12 col-md-12 padding-5\\\"> <h4 class=\\\"text-primary no-margin\\\">{{ copy.title | translate }}</h4> <small ng-if=copy.description>{{ copy.description | translate }}</small> </div> <div class=dashboard-extra-info> <div class=\\\"padding-5 extra-info\\\"> <span><i class=\\\"fa fa-clock-o text-grey\\\"></i> <small am-time-ago=copy.time> {{copy.time}}</small></span> </div> <div class=\\\"padding-5 identity-icon-dashboard\\\"> <i ng-if=\\\"iconConfiguration.model === \\'icon\\'\\\" class=\\\"fa {{ iconConfiguration.icon}}\\\"></i> <img ng-if=\\\"iconConfiguration.model === \\'image\\'\\\" alt src=\\\"{{ iconConfiguration.url }}\\\" data-intro=\\\"{{ \\'HELP.HEADER.DOMAIN_LOGO\\' | translate }}\\\" data-position=fixed> </div> </div> </div> </div> </div> </div> </form> </div> <div class=modal-footer> <div class=col-xs-12> <button type=submit class=\\\"btn btn-primary\\\" ng-click=closeDialog() ng-disabled=form.$invalid translate>ADF.COMMON.CLOSE</button> </div> </div> \");\n$templateCache.put(\"../src/templates/dashboard-grid.html\",\"<div gridstack class=grid-stack options=gridOptions on-drag-start=onDragStart(event,ui) on-drag-stop=onDragStop(event,ui) on-resize-start=onResizeStart(event,ui) on-resize-stop=onResizeStop(event,ui) gridstack-handler=gsHandler on-change=onChange(event,items)> <div gridstack-item ng-repeat=\\\"w in adfModel.grid\\\" class=grid-stack-item gs-item-x=w.x gs-item-y=w.y gs-item-width=w.width gs-item-height=w.height gs-item-min-width=2 gs-item-min-height=2 gs-item-autopos=0> <adf-widget-grid ng-if=\\\"w && w.definition\\\" class=grid-stack-item-content options=options definition=w.definition edit-mode=editMode widget-state=widgetState></adf-widget-grid> </div> </div>\");\n$templateCache.put(\"../src/templates/dashboard-title.html\",\"<div class=row style=padding:0px;> <div class=\\\"col-xs-12 col-md-5\\\" ng-if=!hideButtons> <span ng-if=model.icon id=idDashboardIcon class=\\\"fa fa-2x\\\" ng-class=model.icon></span> <span id=idDashboardTitle class=\\\"fa-2x text-primary\\\">{{model.title | translate}}</span> <span ng-if=model.description id=idDashboardDescription>{{model.description | translate}}</span> </div> <div class=\\\"col-xs-12 col-md-7 text-right\\\" ng-if=!hideButtons> <a href ng-if=editMode title=\\\"{{ \\'ADF.DASHBOARD.TITLE.ADD\\' | translate }}\\\" ng-click=addWidgetDialog() class=\\\"btn btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-plus\\\" aria-hidden=true></i> {{\\'ADF.DASHBOARD.TITLE.ADD\\' | translate}} </a> <a href ng-if=editMode title=\\\"{{ \\'ADF.DASHBOARD.TITLE.CONFIGURATION\\' | translate }}\\\" ng-click=editDashboardDialog() class=\\\"btn btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-cog\\\"></i> {{\\'ADF.DASHBOARD.TITLE.CONFIGURATION\\' | translate}} </a> <a href ng-if=editMode title=\\\"{{ \\'ADF.DASHBOARD.TITLE.UNDO\\' | translate }}\\\" ng-click=cancelEditMode() class=\\\"btn btn-warning btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-close\\\"></i> {{\\'ADF.DASHBOARD.TITLE.UNDO\\' | translate}} </a> <a href ng-if=\\\"options.editable && !editMode && !model.temporal\\\" title=\\\"{{\\'ADF.DASHBOARD.TITLE.EDIT.MODE\\' | translate }}\\\" ng-click=toggleEditMode() class=\\\"btn btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-pencil-square-o\\\"></i> {{\\'ADF.DASHBOARD.TITLE.EDIT.MODE\\' | translate}} </a> <a href ng-if=\\\"options.editable && editMode\\\" title=\\\"{{\\'ADF.DASHBOARD.TITLE.SAVE\\' | translate)}}\\\" ng-click=toggleEditMode() class=\\\"btn btn-success btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-save\\\"></i> {{\\'ADF.DASHBOARD.TITLE.SAVE\\' | translate}} </a> </div> </div>\");\n$templateCache.put(\"../src/templates/dashboard.html\",\"<div class=dashboard-container x-ng-class=\\\"{\\'edit\\' : editMode}\\\"> <div ng-include src=model.titleTemplateUrl></div> <div class=dashboard x-ng-class=\\\"{\\'edit\\' : editMode}\\\" style=\\\"padding: 0px;margin: 0px;\\\"> <adf-dashboard-grid ng-if=model.grid adf-model=model options=options edit-mode=editMode> </adf-dashboard-grid></div> </div>\");\n$templateCache.put(\"../src/templates/widget-add.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title translate>ADF.WIDGET.TITLE.ADD_HEADER</h4> </div> <div class=modal-body>  <div ng-if=createCategories> <uib-accordion ng-init=\\\"categorized = createCategories(widgets)\\\"> <div uib-accordion-group heading=\\\"{{category.name | translate}}\\\" ng-repeat=\\\"category in categorized | adfOrderByObjectKey: \\'name\\'\\\"> <dl class=dl-horizontal> <dt ng-repeat-start=\\\"widget in category.widgets | adfOrderByObjectKey: \\'key\\'\\\"> <a href ng-click=addWidget(widget.key) ng-class={{widget.key}}> {{widget.title | translate}} </a> </dt> <dd ng-repeat-end ng-if=widget.description> {{widget.description | translate}} </dd> </dl> </div> </uib-accordion> </div>  <div ng-if=!createCategories> <div class=row> <div class=\\\"col-md-4 col-xs-12 form-group no-margin\\\"> <select ng-model=widgetFilterCfg.widgetFilter.categoryTags name=widgetsCategoryFilter class=form-control> <option value translate>ADF.WIDGET.LABEL.ALL_WIDGETS</option> <option ng-repeat=\\\"category in availableCategories | orderBy\\\" value={{category}}>{{ category | translate }}</option> </select> </div> <div class=\\\"col-md-4 col-xs-12 form-group no-margin\\\"> <select ng-model=widgetFilterCfg.widgetSorting name=widgetsSorting class=form-control> <option value=priority ng-selected=\\\"widgetFilterCfg.widgetSorting===\\'priority\\' || !widgetFilterCfg.widgetSorting\\\" translate=ADF.WIDGET.TITLE.SORTED_BY translate-values=\\\"{ item : (\\'ADF.WIDGET.LABEL.PRIORITY\\' | translate) }\\\"></option> <option value=name ng-selected=\\\"widgetFilterCfg.widgetSorting===\\'name\\'\\\" translate=ADF.WIDGET.TITLE.SORTED_BY translate-values=\\\"{ item : (\\'ADF.WIDGET.LABEL.NAME\\' | translate) }\\\"></option> <option value=category ng-selected=\\\"widgetFilterCfg.widgetSorting===\\'category\\'\\\" translate=ADF.WIDGET.TITLE.SORTED_BY translate-values=\\\"{ item : (\\'ADF.WIDGET.LABEL.CATEGORY\\' | translate) }\\\"></option> <option value=description ng-selected=\\\"widgetFilterCfg.widgetSorting===\\'description\\'\\\" translate=ADF.WIDGET.TITLE.SORTED_BY translate-values=\\\"{ item : (\\'ADF.WIDGET.LABEL.DESCRIPTION\\' | translate) }\\\"></option> </select> </div> <div class=\\\"col-md-4 col-xs-12 form-group no-margin\\\"> <select ng-model=widgetFilterCfg.widgetSortingDirection name=widgetSortingDirection class=form-control> <option value translate>BUTTON.TITLE.ASCENDING</option> <option value=1 translate>BUTTON.TITLE.DESCENDING</option> </select> </div> </div> <div class=row> <div class=\\\"col-xs-12 form-group no-margin\\\"> <input type=text class=form-control name=widgetsTitleFilter autofocus ng-model=widgetFilterCfg.widgetFilter.title placeholder=\\\"{{ \\'ADF.WIDGET.PLACEHOLDER.TYPE_WIDGET_FILTER\\'| translate }}\\\"> </div> </div> <div ng-repeat=\\\"widget in widgets | adfOrderByObjectKey: \\'key\\' | filter:widgetFilterCfg.widgetFilter:strict | orderBy:widgetFilterCfg.widgetSorting:widgetFilterCfg.widgetSortingDirection track by $index\\\" ng-class=\\\"{ \\'widgetPanelBig\\' : $index ===0 , \\'widgetPanelNormal\\' : $index > 0 }\\\"> <div class=\\\"pointer panel widgetInfoParent {{widget.key}}\\\" ng-click=addWidget(widget.key) title=\\\"{{widget.description | translate}}\\\"> <div class=\\\"widgetInfoImage pointer\\\"> <div ng-if=widget.svg class=widget-icon ng-include=widget.svg></div> <img ng-if=\\\"widget.images && !widget.svg\\\" ng-init=\\\"widget._currImg = widget.images[0]\\\" src=\\\"{{ widget._currImg }}\\\" ng-click=addWidget(widget.key) title=\\\"Click to change (if available)\\\"> <i ng-if=\\\"!widget.images && !widget.svg\\\" class=\\\"widgetInfoIcon fa\\\" ng-class=\\\"widget.icon ? widget.icon: \\'fa-plus-circle\\'\\\" ng-style=\\\"widget.color?{\\'color\\':widget.color}:\\'\\'\\\" aria-hidden=true></i> </div> <div class=widgetInfoContainer id=widgetKey_{{widget.key}} ng-class=\\\"{ \\'bg-contrast\\' : $index ===0, \\'bg-primary\\': $index !== 0}\\\">  <span class=widgetInfoTitle>{{widget.title }}</span><br> <span>({{widget.category}})</span> <span class=widgetInfoDescription>{{widget.description}}</span> </div> </div> </div> </div> </div> <div class=modal-footer style=clear:both;> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() translate>ADF.COMMON.CLOSE</button> </div>\");\n$templateCache.put(\"../src/templates/widget-delete.html\",\"<div class=modal-header> <h4 class=modal-title> <span translate>ADF.COMMON.DELETE</span> {{widget.title | translate}}</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=widgetTitle translate>ADF.WIDGET.LABEL.DELETE_CONFIRM_MESSAGE</label> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() translate>ADF.COMMON.CLOSE</button> <button type=button class=\\\"btn btn-primary\\\" ng-click=deleteDialog() translate>ADF.COMMON.DELETE</button> </div> \");\n$templateCache.put(\"../src/templates/widget-edit.html\",\"<form name=widgetEditForm novalidate role=form ng-submit=saveDialog()> <div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h3 class=modal-title>{{widget.title | translate}}</h3> </div> <div class=modal-body> <div class=row> <div class=col-xs-12> <div class=\\\"alert alert-danger\\\" role=alert ng-show=validationError> <strong translate>ADF.ERROR.APPLY_ERROR</strong> {{validationError | translate}} </div> </div> </div> <div class=row ng-if=widget.show_reload_config> <div class=\\\"col-xs-12 col-md-6\\\"> <div class=form-group> <label for=widgetTitle translate>ADF.COMMON.TITLE</label> <input type=text class=\\\"form-control text-primary\\\" id=widgetTitle ng-init=\\\"definition.title=(definition.title | translate)\\\" ng-model=definition.title placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.TITLE\\' | translate}}\\\"> </div> </div> <div class=\\\"col-xs-12 col-md-6\\\"> <div class=form-group> <label for=widgetReloadPeriod translate>ADF.WIDGET.TOOLTIP.REFRESH</label> <select class=form-control id=widgetReloadPeriod aria-label=\\\"ngSelected demo\\\" ng-model=definition.config.reloadPeriod required ng-init=\\\"definition.config.reloadPeriod ? definition.config.reloadPeriod : (definition.config.reloadPeriod = \\'0\\')\\\"> <option value=0 translate>ADF.WIDGET.OPTIONS.MANUAL</option> <option value=20 translate>ADF.WIDGET.OPTIONS.20_SECONDS</option> <option value=40 translate>ADF.WIDGET.OPTIONS.40_SECONDS</option> <option value=60 translate>ADF.WIDGET.OPTIONS.EVERY_MINUTE</option> </select> </div> </div> </div> <div class=row ng-if=!widget.show_reload_config> <div class=\\\"col-xs-12 col-md-12\\\"> <div class=form-group> <label for=widgetTitle translate>ADF.COMMON.TITLE</label> <input type=text class=\\\"form-control text-primary\\\" id=widgetTitle ng-init=\\\"definition.title=(definition.title | translate)\\\" ng-model=definition.title placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.TITLE\\' | translate}}\\\"> </div> </div> </div> <div ng-if=widget.edit class=row> <div class=col-xs-12> <adf-widget-content model=definition content=widget.edit> </adf-widget-content></div> </div> <div class=row> <div class=col-xs-12> <div class=form-group> <label for=widgetAbout translate>ADF.COMMON.ABOUT</label> <textarea class=\\\"form-control text-primary\\\" id=widgetAbout ng-model=definition.config.about placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.ENTER.DESCRIPTION\\'|translate}}\\\"></textarea> </div> </div> </div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() translate>ADF.WIDGET.BUTTON.CANCEL</button> <button type=submit class=\\\"btn btn-primary\\\" ng-disabled=widgetEditForm.$invalid value=\\\"{{\\'ADF.WIDGET.BUTTON.APPLY\\' | translate }}\\\" translate>ADF.WIDGET.BUTTON.APPLY</button> </div> </form>\");\n$templateCache.put(\"../src/templates/widget-fullscreen-selection.html\",\"<div class=modal-header> <div class=\\\"pull-right widget-icons\\\"> <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.CLOSE\\' |translate }}\\\" ng-click=closeDialog() class=\\\"btn btn-xs btn-danger oux-button-margin\\\"> <i class=\\\"glyphicon glyphicon-remove\\\"></i> {{ \\'ADF.WIDGET.TOOLTIP.CLOSE\\' |translate }} </a> </div> <h4 class=\\\"modal-title pull-left\\\" translate>&nbsp;{{ definition.title | translate}}</h4> </div> <div class=\\\"modal-body widget\\\" style=overflow:hidden;> <adf-widget-grid definition=definition edit-mode=false widget-state=widgetState></adf-widget-grid> </div> \");\n$templateCache.put(\"../src/templates/widget-fullscreen.html\",\"<div class=modal-header> <div class=\\\"pull-right widget-icons\\\"> <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.CLOSE\\' |translate }}\\\" ng-click=closeDialog() class=\\\"btn btn-xs btn-danger oux-button-margin\\\"> <i class=\\\"glyphicon glyphicon-remove\\\"></i> {{ \\'ADF.WIDGET.TOOLTIP.CLOSE\\' |translate }} </a> <a permission permission-only=\\\"\\'manageWorkspace\\'\\\" href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.INSERT\\' |translate }}\\\" ng-if=persistDashboard ng-click=persistDashboard() class=\\\"btn btn-xs btn-primary oux-button-margin\\\"> <i class=\\\"glyphicon glyphicon-save\\\"></i> {{ \\'ADF.WIDGET.TOOLTIP.INSERT\\' |translate }} </a> </div> <h4 class=\\\"modal-title pull-left\\\" translate>&nbsp;{{ definition.title | translate}}</h4> </div> <div class=\\\"modal-body widget\\\" style=overflow:hidden;>  <adf-widget-grid definition=definition edit-mode=false widget-state=widgetState></adf-widget-grid> </div> <div class=modal-footer ng-if=widget.show_modal_footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() translate>ADF.COMMON.CLOSE</button> </div>\");\n$templateCache.put(\"../src/templates/widget-grid-title.html\",\"<div class=panel-title style=margin:0px;> <div class=\\\"pull-right container-actions bg-primary\\\" data-intro=\\\"Widget actions\\\" data-position=bottom> <span ng-if=config.about> <a href uib-popover=\\\"{{ config.about }}\\\" popover-trigger=\\\"\\'mouseenter\\'\\\" popover-placement=top ng-click=openAboutScreen()> <i class=\\\"glyphicon glyphicon-info-sign\\\"></i> </a> <script type=text/ng-template id=widgetAboutModal.html> <div class=\\\"modal-header\\\"> <h4 class=\\\"modal-title\\\" translate>ADF.COMMON.ABOUT</h4> </div> <div class=\\\"modal-body\\\">{{ about.info }}</div> <div class=\\\"modal-footer\\\"> <button class=\\\"btn btn-primary\\\" type=\\\"button\\\" ng-click=\\\"ok()\\\" translate>ADF.WIDGET.BUTTON.OK</button> </div> </script> </span> <a ng-if=\\\"!editMode && widget.print\\\" href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.PRINT\\' | translate }}\\\" ng-click=print()> <i class=\\\"glyphicon glyphicon-print\\\"></i> </a> <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.REFRESH\\' | translate }}\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a>  <a permission permission-only=\\\"\\'viewFilter\\'\\\" href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.FILTER\\' | translate }}\\\" ng-if=\\\"config.widgetSelectors && !editMode\\\" ng-click=\\\"filter.showFilter = !filter.showFilter\\\"> <i class=\\\"glyphicon glyphicon-filter\\\" ng-class=\\\"{\\'active\\': search.json || search.oql|| search.quick}\\\"></i> </a>  <a permission permission-only=\\\"\\'viewFilter\\'\\\" href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.SORT\\' | translate }}\\\" ng-if=\\\"config.sort && !editMode\\\" ng-click=\\\"filter.showFilter = !filter.showFilter\\\"> <i class=\\\"glyphicon glyphicon-sort\\\" ng-class=\\\"{\\'active\\': (config.sort.value && config.sort.value !== \\'\\')}\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.EDIT\\' | translate }}\\\" ng-click=edit() ng-if=editMode> <i class=\\\"glyphicon glyphicon-cog\\\"></i> </a> <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.FULLSCREEN\\' | translate }}\\\" ng-click=openFullScreen() ng-show=\\\"options.maximizable && !widget.notMaximizable\\\"> <i class=\\\"glyphicon glyphicon-fullscreen\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.REMOVE\\' | translate}}\\\" ng-click=remove() ng-if=editMode> <i class=\\\"glyphicon glyphicon-trash\\\"></i> </a> <div ng-if=!editMode class=pointer style=\\\"display: inline;\\\" uib-dropdown uib-dropdown-toggle> <i class=\\\"fa fa-ellipsis-h\\\" style=font-size:1.2em;></i> <ul uib-dropdown-menu class=dropdown-menu-right> <li role=menuitem> <a class=pointer href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.PICTURE\\' | translate}}\\\" ng-click=saveWidgetScreen(definition.wid)> <span class=\\\"glyphicon glyphicon-picture\\\"></span> {{ \\'ADF.WIDGET.TOOLTIP.PICTURE\\' | translate}} </a> </li> <li role=menuitem ng-if=widget.qr> <a class=pointer href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.QR\\' | translate }}\\\" ng-click=generateQR()> <span class=\\\"fa fa-qrcode\\\" style=\\\"font-size: 1.1em;\\\"></span> {{ \\'ADF.WIDGET.TOOLTIP.QR\\' | translate }} </a> </li> <li ng-if=widget.csv permission permission-only=\\\"\\'download\\'\\\" role=menuitem> <a class=pointer href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.CSV\\' | translate }}\\\" ng-click=downloadCsv()> <span class=\\\"glyphicon glyphicon-file\\\"></span> {{ \\'ADF.WIDGET.TOOLTIP.CSV\\' | translate }} </a> </li> <li role=menuitem permission permission-only=\\\"\\'executeOperation\\'\\\" ng-if=\\\"widget.executeOperation && isExecuteOperationEnabled()\\\"> <a class=pointer href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.OPERATION\\' | translate }}\\\" ng-click=executeOperation()> <span class=\\\"glyphicon glyphicon-flash\\\"></span> {{ \\'ADF.WIDGET.TOOLTIP.OPERATION\\' | translate }} </a> </li> <li role=menuitem ng-if=\\\"widgetActionsHandler && widgetActionsHandler.actions && widgetActionsHandler.actions.length > 0\\\" ng-repeat=\\\"customAction in widgetActionsHandler.actions\\\" permission permission-only=customAction.permissions> <a class=pointer title={{customAction.title}} ng-click=customAction.action(choice.value)> <span class=\\\"pointer {{customAction.icon}}\\\"></span> {{customAction.title}} </a> </li> </ul> </div> </div> <span class=pull-left>  <h4 ng-if=\\\"!widget.frameless && definition.title\\\" style=\\\"margin:4px 0px 0px 2px;float:left;\\\" translate class=text-primary>{{definition.title | translate}}</h4> </span> <div class=pull-right ng-if=\\\"navOptionsHandler.prevPage && navOptionsHandler.nextPage && navOptionsHandler.hasPrevPage && navOptionsHandler.hasNextPage && ( !navOptionsHandler.isPaginationEnable || navOptionsHandler.isPaginationEnable() ) && ( !navOptionsHandler.isNoContent || !navOptionsHandler.isNoContent() )\\\" style=margin-top:1px> <button class=\\\"btn btn-primary btn-sm pointer\\\" ng-click=navOptionsHandler.prevPage() ng-disabled=!navOptionsHandler.hasPrevPage()> <i class=\\\"glyphicon glyphicon-chevron-left browser-link\\\"></i>{{ \\'BUTTON.TITLE.PREVIOUS\\' | translate }} </button> <button class=\\\"btn btn-primary btn-sm pointer\\\" ng-click=navOptionsHandler.nextPage() ng-disabled=!navOptionsHandler.hasNextPage()> {{ \\'BUTTON.TITLE.NEXT\\' | translate }} <i class=\\\"glyphicon glyphicon-chevron-right browser-link\\\"></i> </button> </div> <div permission permission-only=\\\"[\\'viewFilter\\',\\'executeOperation\\']\\\" class=pull-right ng-if=\\\"selectedItemsLength > 0\\\" style=margin-top:1px> <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.SELECTION\\' | translate }}\\\" ng-click=manageSelectedItems() class=\\\"btn btn-primary btn-sm pointer\\\"> <i class=\\\"glyphicon glyphicon-check\\\"></i> <small class=ogux-budget>{{ selectedItemsLength }}</small> </a> </div> </div> <script type=text/ng-template id=actionsMenuTpl.html> <ul class=\\\"dropdown-menu\\\" uib-dropdown-menu role=\\\"menu\\\"> <li> <a class=\\\"pointer\\\" href=\\\"\\\" title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.PICTURE\\' | translate}}\\\" ng-click=\\\"saveWidgetScreen(definition.wid)\\\"> <span class=\\\"glyphicon glyphicon-picture\\\"></span> {{ \\'ADF.WIDGET.TOOLTIP.PICTURE\\' | translate}} </a> </li> <li ng-if=\\\"widget.qr\\\"> <a class=\\\"pointer\\\" href=\\\"\\\" title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.QR\\' | translate }}\\\" ng-click=\\\"generateQR()\\\"> <span class=\\\"fa fa-qrcode\\\" style=\\\"font-size: 1.1em;\\\"></span> {{ \\'ADF.WIDGET.TOOLTIP.QR\\' | translate }} </a> </li> <li ng-if=\\\"widget.csv\\\" permission permission-only=\\\" \\'download\\' \\\"> <a class=\\\"pointer\\\" href=\\\"\\\" title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.CSV\\' | translate }}\\\" ng-click=\\\"downloadCsv()\\\"> <span class=\\\"glyphicon glyphicon-file\\\"></span> {{ \\'ADF.WIDGET.TOOLTIP.CSV\\' | translate }} </a> </li> <li permission permission-only=\\\" \\'executeOperation\\' \\\" ng-if=\\\"widget.executeOperation && isExecuteOperationEnabled()\\\"> <a class=\\\"pointer\\\" href=\\\"\\\" title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.OPERATION\\' | translate }}\\\" ng-click=\\\"executeOperation()\\\"> <span class=\\\"glyphicon glyphicon-flash\\\"></span> {{ \\'ADF.WIDGET.TOOLTIP.OPERATION\\' | translate }} </a> </li> <li ng-if=\\\"widgetActionsHandler && widgetActionsHandler.actions && widgetActionsHandler.actions.length > 0\\\" ng-repeat=\\\"customAction in widgetActionsHandler.actions\\\" permission permission-only=\\\"customAction.permissions\\\"> <a class=\\\"pointer\\\" title=\\\"{{customAction.title}}\\\" ng-click=\\\"customAction.action(choice.value)\\\"> <span class=\\\"pointer {{customAction.icon}}\\\"></span> {{customAction.title}} </a> </li> </ul> </script>\");\n$templateCache.put(\"../src/templates/widget-grid.html\",\"<div adf-id={{definition.wid}} adf-widget-type={{definition.type}} ng-class=\\\"{\\'widget-move-mode\\': editMode}\\\" class=\\\"panel panel-default widget widget_{{definition.wid}}\\\"> <a name={{definition.wid}} id={{definition.wid}}></a> <div class=\\\"panel-heading clearfix\\\" ng-if=\\\"!widget.frameless || editMode\\\"> <div ng-include src=definition.titleTemplateUrl></div> </div> <div ng-class=\\\"{ \\'panel-body\\':!widget.frameless || editMode, \\'widget-blur-loading\\': (navOptionsHandler && navOptionsHandler.firstLoad && navOptionsHandler.loadingData) }\\\" uib-collapse=widgetState.isCollapsed> <div ng-if=\\\"!widgetState.isCollapsed && config.widgetSelectors && !editMode && filter.showFilter\\\" class=\\\"row form-group\\\" style=\\\"margin-top: 5px !important;\\\"> <div ng-if=\\\"filter.typeFilter === 0\\\" class=\\\"col-xs-12 col-md-8\\\"> <div class=filter mass-autocomplete> <input class=form-control style=padding-right:15px; name=filterValue ng-keydown=enter($event) ng-model=search.oql placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.ENTER.FILTER.ADVANCED\\' | translate }}\\\" mass-autocomplete-item=autocomplete_options() ng-change=debugQuery()> <label ng-click=launchSearchingAdv() style=\\\"position: absolute;font-size: 1.5em;cursor:pointer;right: 15px;\\\" class=glyphicon ng-class=\\\"{ \\'glyphicon-search\\' : !filterApplied, \\'glyphicon-ok\\': filterApplied}\\\"></label> </div> <div ng-if=\\\"!editMode && filter_error\\\" class=col-xs-12> <alert type=danger class=\\\"text-center text-danger\\\"> <span>{{filter_error}}</span> </alert> </div> <div ng-if=\\\"filter.showFinalFilter && search.json\\\" class=col-xs-12> <pre>{{ search.json }}</pre> </div> </div> <div ng-if=\\\"filter.typeFilter === 1\\\" class=\\\"col-xs-12 col-md-8\\\"> <div class=filter> <input class=form-control style=padding-right:15px; name=filterValue ng-keydown=enter($event) ng-blur=launchSearchingQuick() ng-model=search.quick placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.ENTER.FILTER.BASIC\\' | translate}}\\\"> <label ng-click=launchSearchingQuick() style=\\\"position: absolute;font-size: 1.5em;cursor:pointer;right: 15px;\\\" class=glyphicon ng-class=\\\"{ \\'glyphicon-search\\' : !filterApplied, \\'glyphicon-ok\\': filterApplied}\\\"></label> </div> </div> <div ng-if=\\\"filter.typeFilter === 2\\\" class=\\\"col-xs-12 col-md-8\\\"> <div class=filter> <ui-select id=sharedFilter ng-model=search.id theme=bootstrap title=\\\"{{ \\'FORM.TITLE.SHARED_FILTER\\' | translate }}\\\" on-select=\\\"filterSharedSelect($item, $model)\\\" on-remove=\\\"filterSharedRemove($item, $model)\\\"> <ui-select-match placeholder=\\\"{{ \\'FORM.PLACEHOLDER.SHARED_FILTER\\' | translate }}\\\" allow-clear=true>{{$select.selected.title | translate }} </ui-select-match> <ui-select-choices repeat=\\\"sharedFilter in sharedFilters | filter: $select.search\\\"> <div> <span ng-bind-html=\\\"sharedFilter.title | highlight: $select.search | translate\\\"> </span></div> <small> <div ng-if=\\\"sharedFilter.filter.type === \\'advanced\\'\\\">{{ \\'FORM.LABEL.ADVANCED\\' | translate }} <span ng-bind-html=\\\"\\'\\'+sharedFilter.filter.oql | highlight: $select.search\\\"></span> </div> <div ng-if=\\\"sharedFilter.filter.type === \\'basic\\'\\\">{{ \\'FORM.LABEL.BASIC\\' | translate }} <span ng-bind-html=\\\"\\'\\'+sharedFilter.filter.value | highlight: $select.search\\\"></span> </div> </small> </ui-select-choices> </ui-select> </div> </div> <div class=\\\"col-xs-12 col-md-4\\\" uib-dropdown> <button class=\\\"btn btn-sm\\\" uib-dropdown-toggle title=\\\"{{\\'ADF.WIDGET.TITLE.TOGGLE_AVANCED_BASIC_FILTER\\' | translate }}\\\"> <i class=\\\"advanced-filter glyphicon\\\" ng-class=\\\"{\\'glyphicon-font\\' : filter.typeFilter === 0, \\'glyphicon-bold\\' : filter.typeFilter ===1, \\'glyphicon-share\\' : filter.typeFilter ===2,}\\\"></i> <span class=caret></span> </button> <ul class=\\\"dropdown-menu panel\\\" style=\\\"border: 1px groove;\\\" uib-dropdown-menu aria-labelledby=simple-dropdown> <li ng-click=\\\"filter.typeFilter = 0\\\"> <a href> <i class=\\\"advanced-filter glyphicon glyphicon-font txt-primary\\\"></i> {{\\'ADF.WIDGET.TITLE.FILTER.ADVANCED\\' | translate}}</a> </li> <li ng-click=\\\"filter.typeFilter = 1\\\"> <a href> <i class=\\\"basic-filter glyphicon glyphicon-bold txt-primary\\\"></i> {{\\'ADF.WIDGET.TITLE.FILTER.BASIC\\' | translate}}</a> </li> <li ng-click=\\\"filter.typeFilter = 2\\\"> <a href> <i class=\\\"basic-filter glyphicon glyphicon-share txt-primary\\\"></i> {{\\'ADF.WIDGET.TITLE.FILTER.SHARED\\' | translate}}</a> </li> </ul> </div> </div> <div ng-if=\\\"customSelectors && config.sort && filter.showFilter\\\" class=\\\"row form-group\\\" style=\\\"margin-top: 5px !important;\\\"> <div class=\\\"sort col-xs-12 col-md-8\\\"> <ui-select ng-model=config.sort.value theme=bootstrap title=\\\"{{\\'ADF.WIDGET.TITLE.CHOOSE_ORDER\\' | translate}}\\\" allow-clear=true append-to-body=true ng-change=launchSearching() ng-click=getCustomSelectors()> <ui-select-match placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.SHORTED_BY\\' | translate}}\\\" allow-clear=true>{{ \\'ADF.WIDGET.TITLE.SORTED_BY\\' | translate:{item: $select.selected} }}</ui-select-match> <ui-select-choices repeat=\\\"selector in customSelectors | filter: $select.search track by $index\\\"> <small> <span ng-bind-html=\\\"selector | highlight: $select.search\\\"></span> </small> </ui-select-choices> </ui-select> </div> <div class=\\\"sortDirection col-xs-4 col-md-4\\\"> <button class=\\\"btn btn-sm pointer\\\" ng-click=changeDirection() ng-disabled=\\\"config.sort.value === \\'\\'\\\" title=\\\"{{\\'ADF.WIDGET.TITLE.TOGGLE_SORTING_DIRECTION\\' | translate}}\\\"> <i class=glyphicon style=font-size:1.3em; ng-class=\\\"config.sort.direction===\\'ASCENDING\\' ? \\'glyphicon-sort-by-attributes\\': \\'glyphicon-sort-by-attributes-alt\\'\\\"></i> </button> </div> </div> <adf-widget-content ng-if=definition model=definition content=widget extra=options.extraData nav-options-handler=navOptionsHandler filter-handler=filterHandler widget-actions-handler=widgetActionsHandler> </adf-widget-content></div> <div class=loaderContainer ng-if=\\\"navOptionsHandler && navOptionsHandler.firstLoad && navOptionsHandler.loadingData\\\"> <img class=loaderImage src={{widget.images[0]}}> </div> <div class=row ng-if=\\\"config.showSaveButton && sendEntities\\\"> <div class=col-xs-12> <button type=button class=\\\"btn btn-xs btn-primary pull-right oux-button-margin\\\" ng-click=sendEntities() translate>ADF.COMMON.SAVE</button> </div> </div> <div class=\\\"panel-footer row no-padding no-margin\\\"> <div class=\\\"col-xs-7 text-left\\\"> <span ng-if=\\\"navOptionsHandler && navOptionsHandler.statusMessage && !navOptionsHandler.loadingData && !navOptionsHandler.firstLoad\\\">{{navOptionsHandler.statusMessage | translate}}</span> </div> <div class=\\\"col-xs-5 spinner-container\\\" ng-if=\\\"navOptionsHandler && navOptionsHandler.loadingData && !navOptionsHandler.firstLoad\\\"> <div class=\\\"spinner pull-right\\\"></div> </div> <div class=\\\"col-xs-5 text-right no-padding no-margin\\\" ng-if=\\\"navOptionsHandler && navOptionsHandler.lastMessageTime && !navOptionsHandler.loadingData && !navOptionsHandler.firstLoad\\\"> <small class=label am-time-ago=navOptionsHandler.lastMessageTime></small> </div> </div> </div>\");\n$templateCache.put(\"../src/templates/widget-selection.html\",\"<style>\\r\\n    .selected-entities-control .ui-select-container>div:first-child {\\r\\n        max-height: 300px;\\r\\n        overflow-y: scroll;\\r\\n        overflow-x: hidden;\\r\\n    }\\r\\n\\r\\n</style> <form name=widgetSelectionForm novalidate role=form ng-submit=saveChangesDialog()> <div class=modal-header> <div class=\\\"col-xs-12 col-md-12\\\"> <h3 class=\\\"modal-title text-left\\\"> <i class=\\\"fa fa-check-square-o\\\" aria-hidden=true></i> {{\\'ADF.WIDGET.TITLE.SELECTED_ITEMS\\' | translate}}</h3> </div> </div> <div class=modal-body> <div class=col-xs-12> <div class=\\\"form-group selected-entities-control\\\"> <label for=currentSelection translate>ADF.WIDGET.LABEL.CURRENT_SELECTION</label> <ui-select multiple tagging ng-model=currentSelection.selected theme=bootstrap sortable=false title=\\\"{{\\'ADF.WIDGET.TITLE.SELECTED_ITEMS\\' | translate}}\\\"> <ui-select-match placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.NO_SELECTED\\' | translate}}\\\"> <div class=text-left style=\\\"margin-right: 15px;font-size: 0.9em;max-width:350px;\\\" ng-if=$item.value.visible> <span style=\\\"white-space: initial;word-break: break-word;\\\" ng-repeat=\\\"(k,v) in $item.value.visible track by $index\\\" ng-if=\\\"v !== undefined\\\"> <strong>{{k | translate}}:</strong> {{v}} <br> </span> </div> <div class=text-left style=\\\"margin-right: 15px;font-size: 0.9em;max-width:350px;\\\" ng-if=!$item.value.visible> <span style=\\\"white-space: initial;word-break: break-word;\\\">{{$item.key}}</span> </div> </ui-select-match> <ui-select-choices repeat=\\\"itemSel in currentSelection.selected | filter:$select.search\\\"> {{itemSel.key}} </ui-select-choices> </ui-select> </div> </div> <div class=\\\"col-xs-12 text-left\\\"> <button type=button class=\\\"btn btn-success btn-sm\\\" ng-click=restoreSelection() ng-disabled=\\\"currentSelection.selected.length === selectedItemsLength\\\" translate>ADF.WIDGET.BUTTON.RESTORE</button> <button type=button class=\\\"btn btn-danger btn-sm\\\" ng-click=clearSelection() ng-disabled=\\\"currentSelection.selected.length < 1\\\" translate>ADF.WIDGET.BUTTON.CLEAR</button> </div> </div> <div class=modal-footer> <div permission permission-only=\\\"\\'viewFilter\\'\\\" class=\\\"col-xs-12 col-md-2 text-left\\\"> <div uib-dropdown ng-if=\\\"selectionConfig && selectionConfig.filterTypes && currentSelection.selected.length > 0\\\"> <button id=applyFilterBy type=button class=\\\"btn btn-primary\\\" uib-dropdown-toggle> <i class=\\\"glyphicon glyphicon-filter pointer\\\"></i> {{\\'ADF.WIDGET.BUTTON.FILTER_BY\\' | translate}} <span class=caret></span> </button> <ul class=dropdown-menu uib-dropdown-menu role=menu aria-labelledby=applyFilterBy> <li role=menuitem ng-repeat=\\\"filterType in selectionConfig.filterTypes\\\"> <a href ng-click=applyFilter(filterType) title=\\\"{{\\'ADF.WIDGET.BUTTON.SELECTED\\' | translate:{filterType: filterType} }}\\\">{{\\'ADF.WIDGET.BUTTON.SELECTED\\' | translate:{filterType: filterType} }}</a> </li> </ul> </div> </div> <div permission permission-only=\\\"\\'executeOperation\\'\\\" class=\\\"col-xs-12 col-md-3 text-left\\\"> <div uib-dropdown ng-if=\\\"selectionConfig && selectionConfig.operationTypes && currentSelection.selected.length > 0\\\"> <button id=executeOperation type=button class=\\\"btn btn-primary\\\" uib-dropdown-toggle> <i class=\\\"glyphicon glyphicon-flash pointer\\\"></i> {{\\'ADF.WIDGET.BUTTON.EXECUTE_OPERATION\\' | translate}} <span class=caret></span> </button> <ul class=dropdown-menu uib-dropdown-menu role=menu aria-labelledby=executeOperation> <li role=menuitem ng-repeat=\\\"operationType in selectionConfig.operationTypes\\\"> <a href ng-click=executeOperation(operationType) title={{operationType|translate}}>{{operationType|translate}}</a> </li> </ul> </div> </div> <div class=\\\"col-xs-12 col-md-7 text-right\\\"> <button type=submit class=\\\"btn btn-primary\\\" ng-disabled=\\\"currentSelection.selected.length === selectedItemsLength\\\" translate value=\\\"{{\\'ADF.WIDGET.BUTTON.APPLY\\' | translate }}\\\">ADF.WIDGET.BUTTON.APPLY</button> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() translate>ADF.COMMON.CLOSE</button> </div> </div> </form> \");}]);\n})(window);","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('adf')\r\n    .directive('adfWidgetContent', function ($log, $q, widgetService,\r\n        $compile, $controller, $injector, dashboard, $translate) {\r\n\r\n        function renderError($element, msg) {\r\n            $log.warn(msg);\r\n            $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\r\n        }\r\n\r\n        function compileWidget($scope, $element, currentScope, configChanged) {\r\n            var model = $scope.model;\r\n            if (!model) {\r\n                $translate('ADF.ERROR.MODEL_IS_UNDEFINED').then(function (translateMessage) {\r\n                    renderError($element, translateMessage);\r\n                });\r\n                return currentScope;\r\n            }\r\n\r\n            var content = $scope.content;\r\n\r\n            if (!content) {\r\n                $translate('ADF.ERROR.WIDGET_FOR_DEPRECTATED', {\r\n                    title: model.title\r\n                }).then(function (translateMessage) {\r\n                    renderError($element, translateMessage);\r\n                });\r\n                return currentScope;\r\n            }\r\n\r\n            var extra = $scope.extra;\r\n            var newScope = currentScope;\r\n\r\n            if (newScope) {\r\n                var is_menu = newScope.menu !== undefined && newScope.menu !== null && (!newScope.isPaginationEnable || !newScope.isPaginationEnable());\r\n                if (is_menu || configChanged || !angular.isFunction(newScope.reloadData)) {\r\n                    if ($scope.navOptionsHandler) {\r\n                        $scope.navOptionsHandler.firstLoad = true;\r\n                    }\r\n                    newScope = renderWidget($scope, $element, currentScope, model, content, extra);\r\n                } else {\r\n                    var is_itemsPerPage = newScope.itemsPerPage !== undefined && newScope.itemsPerPage !== null;\r\n                    if (is_itemsPerPage || newScope.page) {\r\n                        newScope.page = 1;\r\n                    }\r\n                    newScope.reloadData();\r\n                }\r\n            } else {\r\n                if ($scope.navOptionsHandler) {\r\n                    $scope.navOptionsHandler.firstLoad = true;\r\n                }\r\n\r\n                newScope = renderWidget($scope, $element, currentScope, model, content, extra);\r\n            }\r\n\r\n            function _getWindowTime(type) {\r\n                if (type === 'custom') {\r\n                    return {\r\n                        from: newScope.config.windowFilter.from,\r\n                        to: newScope.config.windowFilter.to\r\n                    };\r\n                }\r\n                var from = window.moment().subtract(1, type);\r\n                return {\r\n                    from: from._d\r\n                };\r\n            }\r\n\r\n\r\n\r\n            newScope.config.getWindowTime = function () {\r\n                var windowFilter = newScope.config.windowFilter;\r\n                if (windowFilter && windowFilter.type) {\r\n                    var winTime = _getWindowTime(windowFilter.type);\r\n                    /* jshint ignore:start */\r\n                    if (!window.eval(newScope.config.windowFilter.rawdate)) {\r\n                        for (var key in winTime) {\r\n                            winTime[key] = window.moment(winTime[key]).format();\r\n                        }\r\n                        winTime['rawdate'] = true;\r\n                    }\r\n                    /* jshint ignore:end */\r\n                    return winTime;\r\n                }\r\n            };\r\n\r\n            if (extra) {\r\n                newScope.editing = extra.editing ? true : false;\r\n                newScope.extraData = extra;\r\n            }\r\n\r\n            return newScope;\r\n        }\r\n\r\n        function renderWidget($scope, $element, currentScope, model, content, extra) {\r\n            // display loading template\r\n            $element.html(dashboard.loadingTemplate);\r\n\r\n            // create new scope\r\n            var templateScope = $scope.$new();\r\n\r\n            // pass config object to scope\r\n            if (!model.config) {\r\n                model.config = {};\r\n            }\r\n\r\n            templateScope.config = model.config;\r\n            templateScope.editing = extra && extra.editing;\r\n\r\n            if (extra) {\r\n                templateScope.extra = extra;\r\n            }\r\n\r\n            var _from = currentScope || templateScope.config;\r\n            templateScope.selectionManager = (_from) ? _from.selectionManager : undefined;\r\n\r\n            // local injections\r\n            var base = {\r\n                $scope: templateScope,\r\n                widget: model,\r\n                config: model.config\r\n            };\r\n\r\n            // get resolve promises from content object\r\n            var resolvers = {};\r\n            resolvers.$tpl = widgetService.getTemplate(content);\r\n            if (content.resolve) {\r\n                angular.forEach(content.resolve, function (promise, key) {\r\n                    if (angular.isString(promise)) {\r\n                        resolvers[key] = $injector.get(promise);\r\n                    } else {\r\n                        resolvers[key] = $injector.invoke(promise, promise, base);\r\n                    }\r\n                });\r\n            }\r\n\r\n            // resolve all resolvers\r\n            $q.all(resolvers).then(function (locals) {\r\n                angular.extend(locals, base);\r\n\r\n                // pass resolve map to template scope as defined in resolveAs\r\n                if (content.resolveAs) {\r\n                    templateScope[content.resolveAs] = locals;\r\n                }\r\n\r\n                // compile & render template\r\n                var template = locals.$tpl;\r\n                $element.html(template);\r\n                if (content.controller) {\r\n                    var templateCtrl = $controller(content.controller, locals);\r\n                    if (content.controllerAs) {\r\n                        templateScope[content.controllerAs] = templateCtrl;\r\n                    }\r\n                    $element.children().data('$ngControllerController', templateCtrl);\r\n                }\r\n                $compile($element.contents())(templateScope);\r\n            }, function (reason) {\r\n                // handle promise rejection\r\n                var msg = 'ADF.ERROR.COULD_NOT_RESOLVE_ALL_PROMISSES';\r\n                $translate(msg, {\r\n                    reason: (reason ? ': ' + reason : reason)\r\n                }).then(function (translateMessage) {\r\n                    renderError($element, translateMessage);\r\n                });\r\n            });\r\n\r\n            // destroy old scope\r\n            if (currentScope) {\r\n                currentScope.$destroy();\r\n            }\r\n\r\n            return templateScope;\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            require: '?^^adfWidgetGrid',\r\n            scope: {\r\n                model: '=',\r\n                content: '=',\r\n                extra: '=',\r\n                navOptionsHandler: '=?',\r\n                filterHandler: '=?',\r\n                widgetActionsHandler: '=?'\r\n            },\r\n            link: function ($scope, $element, attrs, adfWidgetGridCtrl) {\r\n                var currentScope = compileWidget($scope, $element, null);\r\n                if (adfWidgetGridCtrl) {\r\n                    $scope.search = $scope.search || {};\r\n                    adfWidgetGridCtrl.updateWidgetFilters($scope.model.config.filter && $scope.model.config.filter.id);\r\n                }\r\n\r\n                var widgetConfigChangedEvt = $scope.$on('widgetConfigChanged', function (event, changeWidgets) {\r\n                    if (changeWidgets) {\r\n                        if (changeWidgets.indexOf($scope.model.wid) !== -1 && adfWidgetGridCtrl) {\r\n                            adfWidgetGridCtrl.updateWidgetFilters($scope.model.config.filter && $scope.model.config.filter.id, true);\r\n                        }\r\n                    } else {\r\n                        currentScope = compileWidget($scope, $element, currentScope, true);\r\n                    }\r\n                });\r\n\r\n                var widgetReloadEvt = $scope.$on('widgetReload', function (event, reloadWidgets) {\r\n                    var reloadWidget = true;\r\n                    if (reloadWidgets && reloadWidgets.length > 0) {\r\n                        reloadWidget = reloadWidgets.indexOf($scope.model.wid) !== -1;\r\n                    }\r\n                    if (reloadWidget) {\r\n                        currentScope = compileWidget($scope, $element, currentScope, false);\r\n                        if (adfWidgetGridCtrl && adfWidgetGridCtrl.updateWidgetFilters) {\r\n                            adfWidgetGridCtrl.updateWidgetFilters($scope.model.config.filter && $scope.model.config.filter.id);\r\n                        }\r\n                    }\r\n                });\r\n\r\n                $scope.$on('destroy', function () {\r\n                    widgetConfigChangedEvt();\r\n                    widgetReloadEvt();\r\n                });\r\n            }\r\n        };\r\n    });","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('adf')\r\n    .directive('adfWidgetGrid', function ($injector, $q, $log, $uibModal, $rootScope, $interval, dashboard, adfTemplatePath, Filter, toastr, $translate) {\r\n        function preLink($scope) {\r\n            var definition = $scope.definition;\r\n\r\n            if (definition) {\r\n                var w = dashboard.widgets[definition.type];\r\n                if (w) {\r\n                    // pass title\r\n                    if (!definition.title) {\r\n                        definition.title = w.title;\r\n                    }\r\n\r\n                    definition.titleTemplateUrl = adfTemplatePath + 'widget-grid-title.html';\r\n\r\n                    if (!definition.editTemplateUrl) {\r\n                        definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\r\n                        if (w.editTemplateUrl) {\r\n                            definition.editTemplateUrl = w.editTemplateUrl;\r\n                        }\r\n                    }\r\n\r\n                    if (!definition.titleTemplateUrl) {\r\n                        definition.frameless = w.frameless;\r\n                    }\r\n\r\n                    if (!definition.styleClass) {\r\n                        definition.styleClass = w.styleClass;\r\n                    }\r\n\r\n                    // set id for sortable\r\n                    if (!definition.wid) {\r\n                        definition.wid = dashboard.id();\r\n                    }\r\n\r\n                    // pass copy of widget to scope\r\n                    $scope.widget = angular.copy(w);\r\n\r\n                    // create config object\r\n                    var config = definition.config;\r\n                    if (config) {\r\n                        if (angular.isString(config)) {\r\n                            config = angular.fromJson(config);\r\n                        }\r\n                    } else {\r\n                        config = {};\r\n                    }\r\n                    // pass config to scope\r\n                    $scope.config = config;\r\n\r\n                    if (typeof $scope.widget.show_modal_footer === 'undefined') {\r\n                        $scope.widget.show_modal_footer = true;\r\n                    }\r\n\r\n                    if (typeof $scope.widget.show_reload_config === 'undefined') {\r\n                        $scope.widget.show_reload_config = true;\r\n                    }\r\n\r\n                    // collapse exposed $scope.widgetState property\r\n                    if (!$scope.widgetState) {\r\n                        $scope.widgetState = {};\r\n                        $scope.widgetState.isCollapsed = (w.collapsed === true) ? w.collapsed : false;\r\n                    }\r\n\r\n                } else {\r\n                    $log.warn('could not find widget ' + definition.type);\r\n                }\r\n            } else {\r\n                $log.debug('definition not specified, widget was probably removed');\r\n            }\r\n        }\r\n\r\n        function postLink($scope, $element) {\r\n            var definition = $scope.definition;\r\n            if (!definition) {\r\n                $log.debug('widget not found');\r\n                return;\r\n            }\r\n            var config = $scope.config || {};\r\n\r\n            // bind close function\r\n            var deleteWidget = function () {\r\n                $element.remove();\r\n                $rootScope.$broadcast('adfWidgetRemovedFromGrid', definition);\r\n            };\r\n\r\n            $scope.remove = function () {\r\n                if ($scope.options.enableConfirmDelete) {\r\n                    var deleteScope = $scope.$new();\r\n\r\n                    var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\r\n                    if (definition.deleteTemplateUrl) {\r\n                        deleteTemplateUrl = definition.deleteTemplateUrl;\r\n                    }\r\n                    var opts = {\r\n                        scope: deleteScope,\r\n                        templateUrl: deleteTemplateUrl,\r\n                        backdrop: 'static'\r\n                    };\r\n                    var instance = $uibModal.open(opts);\r\n\r\n                    deleteScope.closeDialog = function () {\r\n                        instance.close();\r\n                        deleteScope.$destroy();\r\n                    };\r\n                    deleteScope.deleteDialog = function () {\r\n                        deleteWidget();\r\n                        deleteScope.closeDialog();\r\n                    };\r\n                } else {\r\n                    deleteWidget();\r\n                }\r\n            };\r\n\r\n\r\n            $scope.print = function () {\r\n                if (!$scope.editMode) {\r\n                    $scope.$broadcast('widgetPrint');\r\n                }\r\n            };\r\n\r\n            $scope.isExecuteOperationEnabled = function () {\r\n\r\n                if (config.entityKey)\r\n                    return true;\r\n                var filter = config.filter;\r\n\r\n                if (filter) {\r\n                    if (filter.headersFilter && filter.headersFilter.length > 0) {\r\n                        return true;\r\n                    } else {\r\n                        if (filter.type === \"basic\") {\r\n                            return filter.value.length > 0;\r\n                        }\r\n                        if (filter.type === \"advanced\") {\r\n                            return filter.value.length > 2 && filter.oql;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return false;\r\n            };\r\n\r\n            $scope.executeOperation = function () {\r\n                if (!$scope.editMode) {\r\n\r\n                    $scope.$parent.$broadcast('widgetExecuteOperation');\r\n                }\r\n            };\r\n\r\n            $scope.filter = {\r\n                typeFilter: 1,\r\n                showFilter: false,\r\n                showFinalFilter: false\r\n            };\r\n\r\n            $scope.launchSearching = function () {\r\n                var widget = {\r\n                    definition: definition,\r\n                    element: $element\r\n                };\r\n\r\n                $rootScope.$broadcast('adfLaunchSearchingFromWidget', widget, $scope.config.filter);\r\n                $scope.reload();\r\n            };\r\n\r\n\r\n            $scope.launchSearchingAdv = function () {\r\n                if (!$scope.filterApplied) {\r\n                    var executeSearch = true;\r\n                    $scope.search.quick = '';\r\n                    if ($scope.search.json === '' || $scope.search.json === '{}' || (!angular.isString($scope.search.json) && Object.keys($scope.search.json).length === 0)) {\r\n                        if ($scope.search.oql && $scope.search.oql.trim().length > 0) {\r\n                            toastr.error($translate.instant(\"TOASTR.FILTER_IS_MALFORMED\"));\r\n                            executeSearch = false;\r\n                        } else {\r\n                            $scope.config.filter = {\r\n                                type: 'advanced',\r\n                                oql: '',\r\n                                value: ''\r\n                            };\r\n                        }\r\n                    } else {\r\n                        $scope.config.filter = {\r\n                            type: 'advanced',\r\n                            oql: $scope.search.oql,\r\n                            value: $scope.search.json,\r\n                            headersFilter: $scope.config.filter.headersFilter\r\n                        };\r\n                    }\r\n\r\n                    if (executeSearch) {\r\n                        $scope.launchSearching();\r\n                        $scope.filterApplied = true;\r\n                    }\r\n                }\r\n            };\r\n\r\n            $scope.launchSearchingQuick = function () {\r\n                if (!$scope.filterApplied) {\r\n                    $scope.search.oql = $scope.search.json = '';\r\n                    $scope.config.filter = {\r\n                        type: 'basic',\r\n                        value: $scope.search.quick,\r\n                        headersFilter: $scope.config.filter.headersFilter\r\n                    };\r\n                    $scope.launchSearching();\r\n                    $scope.filterApplied = true;\r\n                }\r\n            };\r\n\r\n            $scope.launchSearchingShared = function () {\r\n                // if (!$scope.filterApplied) {\r\n                var shared = $scope.search.id;\r\n                if (shared) {\r\n                    shared.filter.id = shared.wid;\r\n                    $scope.config.filter = shared.filter;\r\n                } else {\r\n                    $scope.config.filter = {};\r\n                }\r\n                $scope.launchSearching();\r\n                $scope.filterApplied = true;\r\n                // }\r\n            };\r\n\r\n            $scope.filterSharedSelect = function ($item, $model) {\r\n                $scope.filterApplied = false;\r\n                $scope.launchSearchingShared();\r\n            };\r\n            $scope.filterSharedRemove = function ($item, $model) {\r\n                $scope.filterApplied = false;\r\n            };\r\n\r\n            var windowTimeChanged = $scope.$on('onWindowTimeChanged', function (event, timeObj) {\r\n                $scope.config.windowFilter = timeObj ? timeObj : (config.windowFilter ? {} : timeObj);\r\n                var widget = {\r\n                    definition: definition,\r\n                    element: $element\r\n                };\r\n                $rootScope.$broadcast('adfWindowTimeChangedFromWidget', widget, $scope.config.windowFilter);\r\n                $scope.reload();\r\n            });\r\n\r\n            $scope.enter = function (event) {\r\n                var keycode = (event.keyCode ? event.keyCode : event.which);\r\n                if (keycode === 13) {\r\n                    if ($scope.filter.typeFilter === 0)\r\n                        $scope.launchSearchingAdv();\r\n                    if ($scope.filter.typeFilter === 1)\r\n                        $scope.launchSearchingQuick();\r\n                    if ($scope.filter.typeFilter === 2)\r\n                        $scope.launchSearchingShared();\r\n                } else if (keycode === 19) {\r\n                    $scope.filter.showFinalFilter = !$scope.filter.showFinalFilter;\r\n                } else {\r\n                    $scope.filterApplied = false;\r\n                }\r\n            };\r\n\r\n\r\n            $scope.customSelectors = [];\r\n            $scope.getCustomSelectors = function () {\r\n                if ($scope.config.customSelectors) {\r\n                    $scope.customSelectors = $scope.config.customSelectors;\r\n                } else {\r\n                    config.widgetSelectors().findFields('').then(function (fields) {\r\n                        $scope.customSelectors = fields;\r\n                        $scope.$apply();\r\n                    }).catch(function (err) {\r\n                        $log.error(err);\r\n                    });\r\n                }\r\n            };\r\n\r\n            $scope.changeDirection = function () {\r\n                var direction = config.sort.direction;\r\n                if (direction === 'DESCENDING') {\r\n                    $scope.config.sort.direction = 'ASCENDING';\r\n                } else if (direction === 'ASCENDING') {\r\n                    $scope.config.sort.direction = 'DESCENDING';\r\n                }\r\n                $scope.reload();\r\n            };\r\n\r\n            $scope.debugQuery = function () {\r\n                Filter.parseQuery($scope.search.oql || '')\r\n                    .then(function (data) {\r\n                        $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\r\n                        $scope.unknownWords = '';\r\n                        $scope.filter_error = null;\r\n                    })\r\n                    .catch(function (err) {\r\n                        $scope.filter_error = err;\r\n                        // Tratar el error\r\n                    });\r\n\r\n            };\r\n\r\n            $scope.autocomplete_options = function () {\r\n                var autocomplete_options = {\r\n                    suggest: Filter.suggest_field_delimited,\r\n                    customSelectors: config.widgetSelectors()\r\n                };\r\n\r\n                return autocomplete_options;\r\n\r\n            };\r\n\r\n            // Multiple selection\r\n            $scope.selectedItems = definition.selectedItems || {};\r\n\r\n            // Gestor de seleccion\r\n            $scope.selectionManager = {\r\n                currentSelection: $scope.selectedItems,\r\n                isSelected: function (key, obj) {\r\n                    if ($scope.selectedItems[key] && !angular.isUndefined(obj)) {\r\n                        $scope.selectedItems[key].data = obj;\r\n                    }\r\n\r\n                    return $scope.selectedItems[key] ? true : false;\r\n                },\r\n                totalSelected: function () {\r\n                    return Object.keys($scope.selectedItems).length;\r\n                }\r\n            };\r\n\r\n            if (definition.config.sendSelection) {\r\n\r\n                $scope.sendEntities = function () {\r\n                    definition.config.sendSelection($scope.selectedItems);\r\n                    $scope.$parent.closeDialog();\r\n                };\r\n\r\n                if (definition.config.selectedItems) {\r\n                    $scope.selectedItems = angular.copy(definition.config.selectedItems);\r\n                }\r\n\r\n                $scope.config.selectionManager = $scope.selectionManager;\r\n            }\r\n\r\n            $scope.manageSelectedItems = function () {\r\n                var selectionScope = $scope.$new();\r\n\r\n                if (definition.config.sendSelection) {\r\n                    delete config.selectionConfig.operationTypes;\r\n                    delete config.selectionConfig.filterTypes;\r\n                }\r\n\r\n                selectionScope.selectionConfig = config.selectionConfig;\r\n\r\n                selectionScope.selectedItems = [];\r\n                angular.forEach($scope.selectedItems, function (value, key) {\r\n                    selectionScope.selectedItems.push({\r\n                        key: key,\r\n                        value: value\r\n                    });\r\n                });\r\n\r\n                selectionScope.currentSelection = {\r\n                    selected: selectionScope.selectedItems\r\n                };\r\n\r\n                var manageItemsSelectedTemplate = adfTemplatePath + 'widget-selection.html';\r\n                var opts = {\r\n                    scope: selectionScope,\r\n                    templateUrl: manageItemsSelectedTemplate,\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    animation: true\r\n                };\r\n\r\n                var instance = $uibModal.open(opts);\r\n\r\n                selectionScope.restoreSelection = function () {\r\n                    selectionScope.currentSelection = {\r\n                        selected: selectionScope.selectedItems\r\n                    };\r\n                };\r\n\r\n                selectionScope.clearSelection = function () {\r\n                    selectionScope.currentSelection.selected = [];\r\n                };\r\n\r\n                // Cierra sy guarda los datos de nueva selección\r\n                selectionScope.applyFilter = function (type) {\r\n                    var customOql = selectionScope.selectionConfig.filterAction(selectionScope.currentSelection.selected, type);\r\n\r\n                    if (!angular.isUndefined(customOql) && customOql !== null) {\r\n                        $scope.filter.typeFilter = 0;\r\n                        Filter.parseQuery(customOql).then(function (data) {\r\n                            $scope.search.oql = customOql;\r\n                            $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\r\n                            $scope.unknownWords = '';\r\n                            $scope.filter_error = null;\r\n\r\n                            $scope.launchSearchingAdv();\r\n                        }).catch(function (err) {\r\n                            $scope.filter_error = err;\r\n                        });\r\n                    }\r\n                };\r\n\r\n                selectionScope.executeOperation = function (operationType) {\r\n                    if (!$scope.editMode) {\r\n                        $scope.$parent.$broadcast('widgetExecuteOperation', {\r\n                            'selectedItems': selectionScope.currentSelection.selected,\r\n                            'type': operationType\r\n                        });\r\n                    }\r\n                };\r\n\r\n                // Cierra sy guarda los datos de nueva selección\r\n                selectionScope.saveChangesDialog = function () {\r\n                    var finalSelection = {};\r\n                    angular.forEach(selectionScope.currentSelection.selected, function (data, idx) {\r\n                        finalSelection[data.key] = {\r\n                            data: data.value.data,\r\n                            visible: data.value.visible\r\n                        };\r\n                    });\r\n\r\n                    $scope.selectedItems = angular.copy(finalSelection);\r\n                    $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n\r\n                    $scope.selectionManager.lastItem = {};\r\n                    $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n\r\n                    instance.close();\r\n                    selectionScope.$destroy();\r\n                };\r\n\r\n                // Cierra sin realizar ninguna acción\r\n                selectionScope.closeDialog = function () {\r\n                    instance.close();\r\n                    selectionScope.$destroy();\r\n                };\r\n            };\r\n\r\n\r\n            // bind edit function\r\n            $scope.edit = function () {\r\n                var editScope = $scope.$new();\r\n                editScope.definition = angular.copy(definition);\r\n\r\n                var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\r\n                if (definition.editTemplateUrl) {\r\n                    adfEditTemplatePath = definition.editTemplateUrl;\r\n                }\r\n\r\n                var opts = {\r\n                    scope: editScope,\r\n                    templateUrl: adfEditTemplatePath,\r\n                    backdrop: 'static',\r\n                    size: 'lg'\r\n                };\r\n\r\n                var instance = $uibModal.open(opts);\r\n\r\n                editScope.closeDialog = function () {\r\n                    instance.close();\r\n                    editScope.$destroy();\r\n                };\r\n\r\n                // TODO create util method\r\n                function createApplyPromise(result) {\r\n                    var promise;\r\n                    if (typeof result === 'boolean') {\r\n                        var deferred = $q.defer();\r\n                        if (result) {\r\n                            deferred.resolve();\r\n                        } else {\r\n                            deferred.reject();\r\n                        }\r\n                        promise = deferred.promise;\r\n                    } else {\r\n                        promise = $q.when(result);\r\n                    }\r\n                    return promise;\r\n                }\r\n\r\n                editScope.saveDialog = function () {\r\n                    // clear validation error\r\n                    editScope.validationError = null;\r\n\r\n                    // build injection locals\r\n                    var widget = $scope.widget;\r\n\r\n                    // create a default apply method for widgets\r\n                    // without edit mode\r\n                    // see issue https://goo.gl/KHPQLZ\r\n                    var applyFn;\r\n                    if (widget.edit) {\r\n                        applyFn = widget.edit.apply;\r\n                    } else {\r\n                        applyFn = function () {\r\n                            return true;\r\n                        };\r\n                    }\r\n\r\n                    var editScopeDefinition = editScope.definition.config || {};\r\n                    // injection locals\r\n                    var locals = {\r\n                        widget: widget,\r\n                        definition: editScope.definition,\r\n                        config: editScopeDefinition\r\n                    };\r\n\r\n                    // invoke apply function and apply if success\r\n                    var result = $injector.invoke(applyFn, applyFn, locals);\r\n                    createApplyPromise(result).then(function () {\r\n                        definition.title = editScope.definition.title;\r\n                        if (editScope.definition.type === 'summaryChart') {\r\n                            editScope.definition.Ftype = editScope.definition.config.type.toLowerCase();\r\n                            definition.Ftype = editScope.definition.config.type.toLowerCase();\r\n                        }\r\n                        angular.extend(definition.config, editScopeDefinition);\r\n\r\n                        editScope.closeDialog();\r\n\r\n                        if (widget.edit && widget.edit.reload) {\r\n                            $scope.setReloadTimeout();\r\n                            // reload content after edit dialog is closed\r\n                            $scope.$broadcast('widgetConfigChanged');\r\n                        }\r\n                    }, function (err) {\r\n                        if (err) {\r\n                            editScope.validationError = err;\r\n                        } else {\r\n                            editScope.validationError = 'VALIDATION_DURING_APPLY_FAILED';\r\n                        }\r\n                    });\r\n                };\r\n\r\n            };\r\n\r\n\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            templateUrl: adfTemplatePath + 'widget-grid.html',\r\n            scope: {\r\n                definition: '=',\r\n                editMode: '=',\r\n                options: '=',\r\n                widgetState: '='\r\n            },\r\n            controller: function ($scope) {\r\n                var _setFilterType = function (selectFilter) {\r\n                    var config = $scope.config || {};\r\n                    var filter = config.filter = config.filter ? config.filter : {};\r\n                    var id = filter.id = selectFilter && filter.id;\r\n                    filter.headersFilter = selectFilter && filter.headersFilter;\r\n                    switch (filter.type) {\r\n                        case 'advanced':\r\n                            $scope.filter.typeFilter = id ? 2 : 0;\r\n                            $scope.search = {\r\n                                oql: filter.oql,\r\n                                json: filter.value\r\n                            };\r\n                            break;\r\n                        case 'basic':\r\n                            $scope.filter.typeFilter = id ? 2 : 1;\r\n                            $scope.search = {\r\n                                quick: filter.value\r\n                            };\r\n\r\n                            break;\r\n                        default:\r\n                            $scope.filter.typeFilter = id ? 2 : 1;\r\n                            $scope.search = {\r\n                                quick: filter.value = ''\r\n                            };\r\n                            break;\r\n                    }\r\n                    $scope.search.id = selectFilter;\r\n                };\r\n\r\n                this.updateWidgetFilters = function (filterId, configChange) {\r\n                    if ($scope.options && $scope.options.extraData && $scope.options.extraData.widgetFilters) {\r\n                        var _widgetFilters = $scope.options.extraData.widgetFilters;\r\n                        var model = $scope.definition;\r\n                        var selectFilter;\r\n                        var sharedFilters = _widgetFilters.filter(function (widgetFilter) {\r\n                            // Recuperamos solos los filtros de widgets que cumplan las condiciones:\r\n                            // - No tenga un filtro heredado como filtro\r\n                            // - El tipo de filtro sea igual que el widget que pueda heredarlo (Ftype)\r\n                            // - No recuperamos el filtro propio del widget  \r\n                            var shared = (!widgetFilter.filter || !widgetFilter.filter.id) && (widgetFilter.Ftype === model.Ftype) && (widgetFilter.wid !== model.wid);\r\n                            if (shared && (filterId === widgetFilter.wid))\r\n                                selectFilter = widgetFilter;\r\n                            return shared;\r\n                        });\r\n\r\n                        $scope.sharedFilters = angular.copy(sharedFilters);\r\n                        if (!configChange || !selectFilter && !!filterId)\r\n                            _setFilterType(selectFilter);\r\n                    }\r\n\r\n                };\r\n\r\n                var definition = $scope.definition;\r\n\r\n\r\n                if (definition.config.selectedItems) {\r\n                    $scope.selectedItemsLength = Object.keys(definition.config.selectedItems).length;\r\n                }\r\n\r\n\r\n                // Controlador de la barra inferior de los widgets\r\n                $scope.navOptionsHandler = {\r\n                    firstLoad: true,\r\n                    loadingData: false,\r\n                    startLoading: function () {\r\n                        $scope.navOptionsHandler.loadingData = true;\r\n                    },\r\n                    stopLoading: function () {\r\n                        $scope.navOptionsHandler.firstLoad = false;\r\n                        $scope.navOptionsHandler.loadingData = false;\r\n                        $scope.navOptionsHandler.lastMessageTime = new Date();\r\n                    },\r\n                    setStatusMessage: function (message) {\r\n                        $scope.navOptionsHandler.statusMessage = message;\r\n                        $scope.navOptionsHandler.lastMessageTime = new Date();\r\n                    }\r\n                };\r\n\r\n                // Controlador de los parámetros del filtro\r\n                $scope.filterHandler = {\r\n                    changeFilter: function (filter, search, typeFilter) {\r\n                        $scope.search = search;\r\n                        $scope.filter.typeFilter = typeFilter;\r\n                    }\r\n                };\r\n\r\n                // Controlador de las custom actions del widget\r\n                $scope.widgetActionsHandler = {\r\n                    actions: [],\r\n                    setActions: function (actions) {\r\n                        $scope.widgetActionsHandler.actions = actions;\r\n                    }\r\n                };\r\n\r\n                var adfDashboardCollapseExpand = $scope.$on('adfDashboardCollapseExpand', function (event, args) {\r\n                    $scope.widgetState.isCollapsed = args.collapseExpandStatus;\r\n                });\r\n\r\n                var adfWidgetEnterEditMode = $scope.$on('adfWidgetEnterEditMode', function (event, widget) {\r\n                    if (dashboard.idEquals(definition.wid, widget.wid)) {\r\n                        $scope.edit();\r\n                    }\r\n                });\r\n\r\n                var adfIsEditMode = $scope.$on('adfIsEditMode', function (event, widget) {\r\n                    $scope.editing = true;\r\n                });\r\n\r\n                var adfDashboardChanged = $scope.$on('adfDashboardChanged', function (event, name, model) {\r\n                    //config.widgetSelectors = tiene filtro\r\n                    var widgetConfigChanged = [];\r\n                    var grid = model.grid;\r\n                    if (grid && grid.length > 0) {\r\n                        grid.forEach(function (element) {\r\n                            var definition = element.definition;\r\n                            widgetConfigChanged.push(definition.wid);\r\n                        });\r\n                        var widgetFilters = $scope.options.extraData && $scope.options.extraData.widgetFilters;\r\n                        var sharedFilters = widgetFilters.filter(function (widgetFilter) {\r\n                            var filter = widgetFilter.filter;\r\n                            return filter && !filter.id || widgetConfigChanged.indexOf(filter.id) !== -1;\r\n                        });\r\n                        $scope.sharedFilters = angular.copy(sharedFilters);\r\n                        $scope.editing = false;\r\n                        $scope.$broadcast('widgetConfigChanged', widgetConfigChanged);\r\n                    }\r\n                });\r\n\r\n                var adfDashboardEditsCancelled = $scope.$on('adfDashboardEditsCancelled', function (event, widget) {\r\n                    $scope.editing = false;\r\n                });\r\n\r\n                $scope.openFullScreen = function () {\r\n\r\n                    $scope.$emit('adfOpenModalWidgetFromOther', definition.type, $scope.config || {});\r\n                };\r\n\r\n                $scope.openAboutScreen = function (size) {\r\n                    size = 'md';\r\n                    var modalInstance = $uibModal.open({\r\n                        animation: true,\r\n                        templateUrl: 'widgetAboutModal.html',\r\n                        controller: function ($scope, $uibModalInstance, information) {\r\n                            $scope.about = {};\r\n                            $scope.about.info = information;\r\n                            $scope.ok = function () {\r\n                                $uibModalInstance.close();\r\n                            };\r\n                        },\r\n                        'size': size,\r\n                        resolve: {\r\n                            information: function () {\r\n                                return $scope.config.about;\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    modalInstance.result.then(function (selectedItem) {\r\n                        $scope.selected = selectedItem;\r\n                    }, function () {\r\n                        $log.info('Modal dismissed at: ' + new Date());\r\n                    });\r\n                };\r\n\r\n                $scope.saveWidgetScreen = function (wId) {\r\n                    $scope.$emit('generateSnapshot', {\r\n                        'objectSelector': '.widget_' + wId,\r\n                        'fileName': 'capture_' + new Date().getTime()\r\n                    });\r\n                };\r\n\r\n                var createQuickFilter = function (fieldsQuickSearch) {\r\n                    var _filter = {\r\n                        or: []\r\n                    };\r\n                    var criteria;\r\n                    fieldsQuickSearch.forEach(function (field) {\r\n                        criteria = {};\r\n                        criteria[field.operator] = {};\r\n                        criteria[field.operator][field.name] = $scope.config.filter.value;\r\n                        _filter.or.push(criteria);\r\n                    });\r\n                    return _filter;\r\n                };\r\n\r\n                $scope.downloadCsv = function () {\r\n                    var columns = $scope.config.columns;\r\n                    var scope_filter = $scope.config.filter;\r\n                    var extra_filter;\r\n                    var final_filter = {};\r\n                    var order = $scope.config.sort ? $scope.config.sort : undefined;\r\n                    if ($scope.config.windowFilter) {\r\n                        var window_filter = $scope.config.onWindowTimeChanged($scope.config.windowFilter);\r\n                        if (window_filter && window_filter.and) {\r\n                            extra_filter = {\r\n                                and: window_filter.and\r\n                            };\r\n                        }\r\n                    }\r\n                    var filter;\r\n                    if (scope_filter.type && scope_filter.type === 'advanced' && scope_filter.value.length > 4) {\r\n                        filter = JSON.parse(scope_filter.value);\r\n                    } else if (scope_filter.type && scope_filter.type === 'basic' && scope_filter.value.trim() !== '') {\r\n                        filter = createQuickFilter($scope.config.fieldsQuickSearch, scope_filter.value);\r\n                    }\r\n                    if (extra_filter) {\r\n                        if (filter) {\r\n                            final_filter = {\r\n                                and: [extra_filter, filter]\r\n                            };\r\n                        } else {\r\n                            final_filter = extra_filter;\r\n                        }\r\n                    } else {\r\n                        final_filter = filter;\r\n                    }\r\n                    $scope.$broadcast('downloadCsv', {\r\n                        'columns': columns,\r\n                        'filter': final_filter,\r\n                        'order': order\r\n                    });\r\n                };\r\n\r\n                $scope.generateQR = function () {\r\n                    $scope.$broadcast('generateQR');\r\n                };\r\n\r\n                var addItemToSelection = $scope.$on('addItemToSelection', function (event, item) {\r\n                    if (!$scope.selectedItems[item.key]) {\r\n                        $scope.selectedItems[item.key] = {\r\n                            data: item.data,\r\n                            visible: item.visible\r\n                        };\r\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n                        item.isSelected = true;\r\n                        $scope.selectionManager.lastItem = item;\r\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n                    }\r\n\r\n                });\r\n\r\n                var removeItemFromSelection = $scope.$on('removeItemFromSelection', function (event, item) {\r\n                    if ($scope.selectedItems[item.key]) {\r\n                        delete $scope.selectedItems[item.key];\r\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n                        item.isSelected = false;\r\n                        $scope.selectionManager.lastItem = item;\r\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n                    }\r\n                });\r\n\r\n                // bind reload function\r\n                var stopReloadTimeout;\r\n\r\n                $scope.setReloadTimeout = function () {\r\n                    var config = $scope.config || $scope.definition.config || {};\r\n\r\n\r\n                    var reloadPeriod = config.reloadPeriod;\r\n                    if (!isNaN(reloadPeriod) && (reloadPeriod * 1) !== 0) {\r\n                        if (angular.isDefined(stopReloadTimeout)) {\r\n                            $interval.cancel(stopReloadTimeout);\r\n                            stopReloadTimeout = undefined;\r\n                        }\r\n                        stopReloadTimeout = $interval($scope.reload, (reloadPeriod * 1000));\r\n                    } else if (stopReloadTimeout) {\r\n                        $interval.cancel(stopReloadTimeout);\r\n                    }\r\n                };\r\n\r\n                $scope.reload = function () {\r\n                    $scope.$broadcast('widgetReload');\r\n\r\n                    $scope.setReloadTimeout();\r\n                };\r\n\r\n                // verificacion de periodo de refresco\r\n                $scope.setReloadTimeout();\r\n\r\n                $scope.$on('$destroy', function () {\r\n                    adfDashboardCollapseExpand();\r\n                    adfWidgetEnterEditMode();\r\n                    adfIsEditMode();\r\n                    adfDashboardChanged();\r\n                    adfDashboardEditsCancelled();\r\n                    addItemToSelection();\r\n                    removeItemFromSelection();\r\n                    $interval.cancel(stopReloadTimeout);\r\n                });\r\n            },\r\n            compile: function () {\r\n\r\n                /**\r\n                 * use pre link, because link of widget-content\r\n                 * is executed before post link widget\r\n                 */\r\n                return {\r\n                    pre: preLink,\r\n                    post: postLink\r\n                };\r\n            }\r\n        };\r\n\r\n    });","\r\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n/**\r\n * The widget service provide helper functions to render widgets and their content.\r\n */\r\nangular.module('adf')\r\n  .factory('widgetService', function($http, $q, $sce, $templateCache, dashboard) {\r\n    'use strict';\r\n\r\n    function parseUrl(url) {\r\n      var parsedUrl = url;\r\n      if (url.indexOf('{widgetsPath}') >= 0) {\r\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\r\n                .replace('//', '/');\r\n        if (parsedUrl.indexOf('/') === 0) {\r\n          parsedUrl = parsedUrl.substring(1);\r\n        }\r\n      }\r\n      return parsedUrl;\r\n    }\r\n\r\n    var exposed = {};\r\n\r\n    exposed.getTemplate = function(widget){\r\n      var deferred = $q.defer();\r\n\r\n      if (widget.template) {\r\n        deferred.resolve(widget.template);\r\n      } else if (widget.templateUrl) {\r\n        // try to fetch template from cache\r\n        var tpl = $templateCache.get(widget.templateUrl);\r\n        if (tpl) {\r\n          deferred.resolve(tpl);\r\n        } else {\r\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\r\n          $http.get(url)\r\n               .success(function(response) {\r\n                 // put response to cache, with unmodified url as key\r\n                 $templateCache.put(widget.templateUrl, response);\r\n                 deferred.resolve(response);\r\n               })\r\n               .error(function() {\r\n                 deferred.reject('could not load template');\r\n               });\r\n        }\r\n      }\r\n\r\n      return deferred.promise;\r\n    };\r\n\r\n    return exposed;\r\n  });\r\n",null,"(function(window, undefined) {'use strict';\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf', ['adf.provider', 'ui.bootstrap', 'opengate-angular-js'])\r\n    .value('adfTemplatePath', '../src/templates/')\r\n    .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\r\n    .value('adfVersion', '7.1.2');\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name adf.directive:adfDashboard\r\n * @element div\r\n * @restrict EA\r\n * @scope\r\n * @description\r\n *\r\n * `adfDashboard` is a directive which renders the dashboard with all its\r\n * components. The directive requires a name attribute. The name of the\r\n * dashboard can be used to store the model.\r\n *\r\n * @param {string} name name of the dashboard. This attribute is required.\r\n * @param {boolean=} editable false to disable the editmode of the dashboard.\r\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\r\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\r\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\r\n * @param {object=} adfModel model object of the dashboard.\r\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\r\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\r\n *                   events during edit mode not reset it if edit mode is exited.\r\n * @param {boolean=} categories enable categories for the add widget dialog.\r\n */\r\n\r\nangular.module('adf')\r\n    .directive('adfDashboard', function ($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath, $translate, Upload) {\r\n        \r\n\r\n        function stringToBoolean(string) {\r\n            switch (angular.isDefined(string) ? string.toLowerCase() : null) {\r\n                case 'true':\r\n                case 'yes':\r\n                case '1':\r\n                    return true;\r\n                case 'false':\r\n                case 'no':\r\n                case '0':\r\n                case null:\r\n                    return false;\r\n                default:\r\n                    return Boolean(string);\r\n            }\r\n        }\r\n\r\n        function createConfiguration(type) {\r\n            var cfg = {};\r\n            var config = dashboard.widgets[type].config || {};\r\n            cfg = angular.copy(config);\r\n            return cfg;\r\n        }\r\n\r\n        function createWidget(type) {\r\n            var wdgt = {};\r\n            var widget = dashboard.widgets[type];\r\n            if (widget) {\r\n                wdgt = angular.copy(widget);\r\n            }\r\n            return wdgt;\r\n        }\r\n\r\n        /**\r\n         * Adds the widget to first column of the model.\r\n         *\r\n         * @param dashboard model\r\n         * @param widget to add to model\r\n         * @param name name of the dashboard\r\n         */\r\n        function addNewWidgetToModel(model, widget, name, forceToSave) {\r\n            if (model) {\r\n                if (!model.grid) {\r\n                    model.grid = [];\r\n                }\r\n\r\n                var newWidget = {\r\n                    width: 3,\r\n                    height: 2,\r\n                    x: 0,\r\n                    y: 0,\r\n                    definition: widget\r\n                };\r\n                model.grid.push(newWidget);\r\n\r\n                $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\r\n\r\n                if (forceToSave) {\r\n                    $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n                }\r\n            } else {\r\n                $log.error('model is undefined');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Checks if the edit mode of the widget should be opened immediately.\r\n         *\r\n         * @param widget type\r\n         */\r\n        function isEditModeImmediate(type) {\r\n            var widget = dashboard.widgets[type];\r\n            return widget && widget.edit && widget.edit.immediate;\r\n        }\r\n\r\n        /**\r\n         * Opens the edit mode of the specified widget.\r\n         *\r\n         * @param dashboard scope\r\n         * @param widget\r\n         */\r\n        function openEditMode($scope, widget) {\r\n            // wait some time before fire enter edit mode event\r\n            $timeout(function () {\r\n                $scope.$broadcast('adfWidgetEnterEditMode', widget);\r\n            }, 200);\r\n        }\r\n\r\n        /**\r\n         * Creates object with the category name as key and an array of widgets as value.\r\n         *\r\n         * @param widgets array of widgets\r\n         *\r\n         * @return array of categories\r\n         */\r\n        function createCategories(widgets) {\r\n            var categories = {};\r\n            angular.forEach(widgets, function (widget, key) {\r\n                var category = widget.category;\r\n                // if the widget has no category use a default one\r\n                if (!category) {\r\n                    category = 'ADF.CATEGORY.MISCELANOUS';\r\n                }\r\n\r\n                widget.title = $translate.instant(widget.title);\r\n                widget.description = $translate.instant(widget.description);\r\n                widget.category = $translate.instant(widget.category);\r\n\r\n                // push widget to category array\r\n                if (angular.isUndefined(categories[widget.category])) {\r\n                    categories[widget.category] = {\r\n                        widgets: {}\r\n                    };\r\n                }\r\n\r\n                categories[widget.category].widgets[key] = widget;\r\n            });\r\n            return categories;\r\n        }\r\n\r\n        function createCategoriesList(widgets) {\r\n            var categories = [];\r\n            angular.forEach(widgets, function (widget, key) {\r\n                if (!widget.category) {\r\n                    widget.category = 'ADF.CATEGORY.MISCELLANEOUS';\r\n                }\r\n\r\n                widget.title = $translate.instant(widget.title);\r\n                widget.description = $translate.instant(widget.description);\r\n                widget.category = $translate.instant(widget.category);\r\n\r\n                if (!widget.categoryTags) {\r\n                    widget.categoryTags = 'ADF.CATEGORY.TAG.MISCELLANEOUS';\r\n                }\r\n\r\n                var categoriesTmp = widget.categoryTags.split(',');\r\n\r\n                angular.forEach(categoriesTmp, function (category, idx) {\r\n                    // push widget to category array\r\n                    var translatedCat = $translate.instant(category);\r\n                    if (categories.indexOf(translatedCat) === -1)\r\n                        categories.push(translatedCat);\r\n                });\r\n\r\n            });\r\n            return categories;\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            scope: {\r\n                name: '@',\r\n                collapsible: '@',\r\n                editable: '@',\r\n                editMode: '@',\r\n                continuousEditMode: '=',\r\n                maximizable: '@',\r\n                adfModel: '=',\r\n                adfWidgetFilter: '=',\r\n                categories: '@',\r\n                hideButtons: '=',\r\n                extraData: '='\r\n            },\r\n            controller: function ($scope) {\r\n                var model = {};\r\n                var widgetFilter = null;\r\n                var name = $scope.name;\r\n\r\n                var _getReloadWidgets = function (widget) {\r\n                    var reloadWidgets = {\r\n                        configChange: [],\r\n                        reload: []\r\n                    };\r\n                    if (widget) {\r\n                        var definition = angular.copy(widget.definition);\r\n                        var ftype = definition.Ftype;\r\n                        var id = definition.wid;\r\n                        var config = definition.config || {};\r\n                        var filter = config.filter;\r\n                        model.grid.forEach(function (w) {\r\n                            var f = w.definition.config.filter;\r\n                            var ft = w.definition.Ftype;\r\n                            //solo recargamos y actualizamos los widgets:\r\n                            // - que tengan filtro\r\n                            // y que el id tenga filtro\r\n                            // y que el id del filtro coincida con el wid del widget que ha modificado el fitro\r\n                            if (f && f.id && f.id === id) {\r\n                                w.definition.config.filter = filter;\r\n                                w.definition.config.filter.id = id;\r\n                                reloadWidgets.reload.push(w.definition.wid);\r\n                            } else if (ftype === ft) {\r\n                                reloadWidgets.configChange.push(w.definition.wid);\r\n                            }\r\n                        });\r\n                    }\r\n                    return reloadWidgets;\r\n                };\r\n\r\n                var updateWidgetFilters = function (model) {\r\n                    var widgetFilters = [];\r\n                    var grid = model.grid;\r\n                    if (grid && grid.length > 0) {\r\n                        grid.forEach(function (element) {\r\n                            var definition = element.definition;\r\n                            var config = definition.config || {};\r\n                            var filter = config.filter;\r\n                            widgetFilters.push({\r\n                                wid: definition.wid,\r\n                                title: definition.title,\r\n                                filter: filter,\r\n                                Ftype: definition.Ftype\r\n                            });\r\n                        });\r\n                    }\r\n                    if (!$scope.options) {\r\n                        $scope.options = {\r\n                            extraData: {}\r\n                        };\r\n                    }\r\n                    $scope.options.extraData.widgetFilters = widgetFilters;\r\n                };\r\n                // Watching for changes on adfModel\r\n                $scope.$watch('adfModel', function (oldVal, newVal) {\r\n                    // has model changed or is the model attribute not set\r\n                    if (newVal !== null || (oldVal === null && newVal === null)) {\r\n                        model = $scope.adfModel;\r\n                        widgetFilter = $scope.adfWidgetFilter;\r\n\r\n                        if (model) {\r\n                            updateWidgetFilters(model);\r\n                            if (!model.title) {\r\n                                model.title = $translate.instant('ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD');\r\n                            }\r\n                            if (!model.titleTemplateUrl) {\r\n                                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\r\n                            }\r\n                            $scope.model = model;\r\n                        } else {\r\n                            $log.error('could not find or create model');\r\n                        }\r\n                    }\r\n                }, true);\r\n\r\n                // edit mode\r\n                $scope.editMode = false;\r\n\r\n                function getNewModalScope() {\r\n                    var scope = $scope.$new();\r\n                    return scope;\r\n                }\r\n\r\n                $scope.toggleEditMode = function (openConfigWindow) {\r\n                    $scope.editMode = !$scope.editMode;\r\n                    if ($scope.editMode) {\r\n                        if (!$scope.continuousEditMode) {\r\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n                            $rootScope.$broadcast('adfIsEditMode');\r\n                        }\r\n\r\n                        if (openConfigWindow) {\r\n                            $scope.editDashboardDialog();\r\n                        }\r\n                    }\r\n\r\n                    if (!$scope.editMode) {\r\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n                    }\r\n                };\r\n\r\n                var adfToggleEditMode = $scope.$on('adfToggleEditMode', function (event, isNewDashboard) {\r\n                    if (isNewDashboard) {\r\n                        $scope.toggleEditMode(true);\r\n                    } else {\r\n                        $scope.toggleEditMode();\r\n                    }\r\n                });\r\n\r\n                var adfCancelEditMode = $scope.$on('adfCancelEditMode', function (event) {\r\n                    if ($scope.editMode) {\r\n                        $scope.cancelEditMode();\r\n                    }\r\n                });\r\n\r\n                var adfWidgetRemoved = $scope.$on('adfWidgetRemovedFromGrid', function (event, widget) {\r\n                    var index = null;\r\n                    angular.forEach($scope.adfModel.grid, function (widgetTmp, idx) {\r\n                        if (widgetTmp.definition.wid === widget.wid) {\r\n                            index = idx;\r\n                        }\r\n                    });\r\n\r\n                    if (index >= 0) {\r\n                        $scope.adfModel.grid.splice(index, 1);\r\n                    }\r\n                });\r\n\r\n                $scope.cancelEditMode = function () {\r\n                    $scope.editMode = false;\r\n                    if (!$scope.continuousEditMode && ($scope.modelCopy !== $scope.adfModel)) {\r\n                        $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\r\n                    }\r\n                    $rootScope.$broadcast('adfDashboardEditsCancelled');\r\n                };\r\n\r\n                var adfEditDashboardDialog = $scope.$on('adfEditDashboardDialog', function (event) {\r\n                    if ($scope.editMode) {\r\n                        $scope.editDashboardDialog();\r\n                    }\r\n                });\r\n\r\n\r\n                var adfLaunchSearchingFromWidget = $scope.$on('adfLaunchSearchingFromWidget', function (event, widget) {\r\n                    var reloadWidgets = _getReloadWidgets(widget);\r\n                    $rootScope.$broadcast('adfFilterChanged', name, model, reloadWidgets);\r\n                });\r\n                var adfWindowTimeChangedFromWidget = $scope.$on('adfWindowTimeChangedFromWidget', function (event) {\r\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\r\n                });\r\n\r\n                // edit dashboard settings\r\n                $scope.editDashboardDialog = function () {\r\n                    var editDashboardScope = getNewModalScope();\r\n                    // create a copy of the title, to avoid changing the title to\r\n                    // \"dashboard\" if the field is empty\r\n                    editDashboardScope.copy = {\r\n                        title: (model.title !== 'ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD' ? model.title : ''),\r\n                        description: model.description,\r\n                        backgroundColor: model.backgroundColor ? model.backgroundColor : undefined,\r\n                        time: new Date(),\r\n                        backgroundImage: model.backgroundImage ? model.backgroundImage : undefined,\r\n                        file: model.backgroundImage ? model.backgroundImage : undefined,\r\n                    };\r\n\r\n                    editDashboardScope.backgroundSize = {\r\n                        name: 'backgroundSize',\r\n                        model: model.backgroundImageSize ? model.backgroundImageSize : '100% 100%',\r\n                        options: {\r\n                            '100% 100%': {\r\n                                title: $translate.instant('SIZE_CONF.AUTO')\r\n                            },\r\n                            'contain': {\r\n                                title: $translate.instant('SIZE_CONF.CONTAIN')\r\n                            },\r\n                            'cover': {\r\n                                title: $translate.instant('SIZE_CONF.COVER')\r\n                            }\r\n                        }\r\n                    };\r\n\r\n                    editDashboardScope.iconConfiguration = {\r\n                        name: 'iconConfiguration',\r\n                        model: model.iconType ? model.iconType : 'icon',\r\n                        url: undefined,\r\n                        file: undefined,\r\n                        iconType: model.iconType ? model.iconType : 'icon',\r\n                        icon: model.iconType === 'icon' ? model.icon : 'fa-tachometer',\r\n                        options: {\r\n                            'icon': {\r\n                                title: $translate.instant('ICON.LIBRARY'),\r\n                            },\r\n                            'image': {\r\n                                title: $translate.instant('ICON.IMAGE')\r\n                            }\r\n                        }\r\n                    };\r\n                    if (editDashboardScope.iconConfiguration.iconType === 'image') {\r\n                        editDashboardScope.iconConfiguration.file = model.icon;\r\n                        editDashboardScope.iconConfiguration.url = model.icon;\r\n                    }\r\n                    editDashboardScope.imageSelected = function (file) {\r\n                        if (file) {\r\n                            editDashboardScope.iconConfiguration.file = file;\r\n                            Upload.base64DataUrl(file).then(\r\n                                function (url) {\r\n                                    editDashboardScope.iconConfiguration.url = url;\r\n                                    editDashboardScope.iconConfiguration.file = url;\r\n                                    editDashboardScope.iconConfiguration.iconType = 'image';\r\n\r\n                                });\r\n                        } else {\r\n                            editDashboardScope.removeDataFile();\r\n                        }\r\n                    };\r\n                    editDashboardScope.backgroundImageSelected = function (file) {\r\n                        if (file) {\r\n                            editDashboardScope.iconConfiguration.file = file;\r\n                            Upload.base64DataUrl(file).then(\r\n                                function (url) {\r\n                                    editDashboardScope.copy.backgroundImage = url;\r\n                                    editDashboardScope.copy.file = url;\r\n\r\n                                });\r\n                        } else {\r\n                            editDashboardScope.removeBackgroundFile();\r\n                        }\r\n                    };\r\n                    editDashboardScope.removeDataFile = function () {\r\n                        editDashboardScope.iconConfiguration.file = null;\r\n                        editDashboardScope.iconConfiguration.url = null;\r\n                    };\r\n                    editDashboardScope.removeBackgroundFile = function () {\r\n                        editDashboardScope.copy.backgroundImage = null;\r\n                        editDashboardScope.copy.file = null;\r\n\r\n                    };\r\n\r\n                    var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\r\n                    if (model.editTemplateUrl) {\r\n                        adfEditTemplatePath = model.editTemplateUrl;\r\n                    }\r\n                    var instance = $uibModal.open({\r\n                        scope: editDashboardScope,\r\n                        templateUrl: adfEditTemplatePath,\r\n                        backdrop: 'static',\r\n                        keyboard: false,\r\n                        size: 'lg'\r\n                    });\r\n\r\n\r\n                    editDashboardScope.closeDialog = function () {\r\n                        // copy the new title back to the model\r\n                        model.title = editDashboardScope.copy.title;\r\n                        model.description = editDashboardScope.copy.description;\r\n                        if (editDashboardScope.iconConfiguration.model === 'image') {\r\n                            model.icon = editDashboardScope.iconConfiguration.url;\r\n\r\n                        } else if (editDashboardScope.iconConfiguration.model === 'icon') {\r\n                            model.icon = (editDashboardScope.iconConfiguration.icon && editDashboardScope.iconConfiguration.icon.key) || editDashboardScope.iconConfiguration.icon;\r\n\r\n                        }\r\n                        model.iconType = editDashboardScope.iconConfiguration.model;\r\n                        model.backgroundColor = editDashboardScope.copy.backgroundColor ? editDashboardScope.copy.backgroundColor : undefined;\r\n                        model.backgroundImage = editDashboardScope.copy.backgroundImage ? editDashboardScope.copy.backgroundImage : undefined;\r\n                        model.backgroundImageSize = editDashboardScope.backgroundSize.model;\r\n                        // close modal and destroy the scope\r\n                        instance.close();\r\n                        editDashboardScope.$destroy();\r\n                    };\r\n                };\r\n\r\n                var adfOpenWidgetFromOther = $scope.$on('adfOpenWidgetFromOther', function (event, widget, config) {\r\n\r\n                    var internal_config = createConfiguration(widget);\r\n                    var _config = angular.merge({}, internal_config, config || {});\r\n                    var w = {\r\n                        type: widget,\r\n                        config: _config,\r\n                        title: _config.title\r\n                    };\r\n                    addNewWidgetToModel(model, w, name, !$scope.editMode);\r\n                });\r\n\r\n                var adfOpenModalWidgetFromOther = $scope.$on('adfOpenModalWidgetFromOther', function (event, widgetType, config) {\r\n                    var templateUrl = adfTemplatePath + 'widget-fullscreen.html';\r\n                    var _config = config || {};\r\n                    if (_config.sendSelection) {\r\n                        templateUrl = adfTemplatePath + 'widget-fullscreen-selection.html';\r\n                    }\r\n                    var widget = createWidget(widgetType);\r\n                    widget.config = angular.merge({}, widget.config, _config);\r\n                    widget.type = widgetType;\r\n                    if (widget.config.title) {\r\n                        widget.title = widget.config.title;\r\n                    }\r\n                    var fullScreenScope = $scope.$new();\r\n                    fullScreenScope.definition = fullScreenScope.widget = widget;\r\n                    var opts = {\r\n                        scope: fullScreenScope,\r\n                        templateUrl: templateUrl,\r\n                        size: fullScreenScope.definition.modalSize || 'el',\r\n                        backdrop: 'static',\r\n                        windowClass: (fullScreenScope.definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\r\n                    };\r\n\r\n                    if ($scope.model && !$scope.model.temporal) {\r\n                        fullScreenScope.persistDashboard = function () {\r\n                            $rootScope.$broadcast('adfOpenWidgetFromOther', this.$parent.widget.type, this.$parent.widget.config || {});\r\n                            this.closeDialog();\r\n                        };\r\n                    }\r\n\r\n                    var instance = $uibModal.open(opts);\r\n                    fullScreenScope.closeDialog = function () {\r\n                        instance.close();\r\n                        fullScreenScope.$destroy();\r\n                    };\r\n\r\n\r\n                });\r\n\r\n                var adfAddWidgetDialog = $scope.$on('adfAddWidgetDialog', function (event) {\r\n                    if (!model.temporal && model.editable) {\r\n                        if (!$scope.editMode) {\r\n                            $scope.editMode = true;\r\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n                            $rootScope.$broadcast('adfIsEditMode');\r\n                        }\r\n\r\n                        $scope.addWidgetDialog();\r\n                    }\r\n                });\r\n\r\n                // add widget dialog\r\n                $scope.addScopeCfg = {\r\n                    widgetFilter: {},\r\n                    widgetSortingDirection: '',\r\n                    widgetSorting: 'priority'\r\n                };\r\n\r\n                $scope.addWidgetDialog = function () {\r\n                    var addScope = getNewModalScope();\r\n                    var widgets;\r\n                    if (angular.isFunction(widgetFilter)) {\r\n                        widgets = {};\r\n                        angular.forEach(dashboard.widgets, function (widget, type) {\r\n                            if (widgetFilter(widget, type, model)) {\r\n                                widgets[type] = widget;\r\n                            }\r\n                        });\r\n                    } else {\r\n                        widgets = dashboard.widgets;\r\n                    }\r\n                    addScope.widgets = widgets;\r\n\r\n                    angular.forEach(addScope.widgets, function (widget, type) {\r\n                        widget.key = type;\r\n                        if (!widget.category) {\r\n                            widget.category = 'Miscellaneous';\r\n                        }\r\n                    });\r\n\r\n                    // pass createCategories function to scope, if categories option is enabled\r\n                    if ($scope.options.categories) {\r\n                        addScope.createCategories = createCategories;\r\n                    } else {\r\n                        addScope.availableCategories = createCategoriesList(widgets);\r\n                    }\r\n\r\n                    var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\r\n                    if (model.addTemplateUrl) {\r\n                        adfAddTemplatePath = model.addTemplateUrl;\r\n                    }\r\n\r\n                    var opts = {\r\n                        scope: addScope,\r\n                        templateUrl: adfAddTemplatePath,\r\n                        backdrop: 'static',\r\n                        size: 'lg'\r\n                    };\r\n\r\n                    var instance = $uibModal.open(opts);\r\n\r\n                    addScope.widgetFilterCfg = $scope.addScopeCfg;\r\n\r\n                    addScope.addWidget = function (widget) {\r\n                        var w = {\r\n                            type: widget,\r\n                            Ftype: dashboard.widgets[widget].Ftype || null,\r\n                            config: createConfiguration(widget)\r\n                        };\r\n                        addNewWidgetToModel(model, w, name);\r\n                        // close and destroy\r\n                        instance.close();\r\n                        addScope.$destroy();\r\n\r\n                        // check for open edit mode immediately\r\n                        if (isEditModeImmediate(widget)) {\r\n                            openEditMode($scope, w);\r\n                        }\r\n                    };\r\n\r\n                    addScope.changeThumbnail = function (widget) {\r\n                        if (widget.images) {\r\n                            if (angular.isUndefined(widget._currThumb)) {\r\n                                widget._currThumb = 1;\r\n                            } else {\r\n                                widget._currThumb += 1;\r\n                            }\r\n\r\n\r\n                            if (widget._currThumb >= widget.images.length) {\r\n                                widget._currThumb = 0;\r\n                            }\r\n\r\n                            widget._currImg = widget.images[widget._currThumb];\r\n                        }\r\n                    };\r\n\r\n                    addScope.closeDialog = function () {\r\n                        // close and destroy\r\n                        instance.close();\r\n                        addScope.$destroy();\r\n                    };\r\n                };\r\n\r\n                $scope.addNewWidgetToModel = addNewWidgetToModel;\r\n\r\n                $scope.$on('destroy', function () {\r\n                    adfLaunchSearchingFromWidget();\r\n                    adfWindowTimeChangedFromWidget();\r\n                    adfToggleEditMode();\r\n                    adfOpenWidgetFromOther();\r\n                    adfOpenModalWidgetFromOther();\r\n                    adfCancelEditMode();\r\n                    adfAddWidgetDialog();\r\n                    adfEditDashboardDialog();\r\n                    adfWidgetRemoved();\r\n                });\r\n            },\r\n            link: function ($scope, $element, $attr) {\r\n                // pass options to scope\r\n                var options = {\r\n                    name: $attr.name,\r\n                    editable: true,\r\n                    enableConfirmDelete: stringToBoolean($attr.enableConfirmDelete),\r\n                    maximizable: stringToBoolean($attr.maximizable),\r\n                    collapsible: stringToBoolean($attr.collapsible),\r\n                    categories: stringToBoolean($attr.categories),\r\n                    extraData: {}\r\n                };\r\n\r\n                if (angular.isDefined($attr.editable)) {\r\n                    options.editable = stringToBoolean($attr.editable);\r\n                }\r\n\r\n                if (angular.isDefined($scope.extraData)) {\r\n                    options.extraData = $scope.extraData;\r\n                }\r\n\r\n                options.extraData.editing = $scope.editMode;\r\n\r\n                $scope.options = options;\r\n            },\r\n            templateUrl: adfTemplatePath + 'dashboard.html'\r\n        };\r\n    });\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the 'Software'), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n    .directive('adfDashboardGrid', function(adfTemplatePath) {\r\n        \r\n\r\n        function preLink($scope) {\r\n            $scope.gridOptions = {\r\n                cellHeight: 146,\r\n                verticalMargin: 10,\r\n                animate: true,\r\n                float: false,\r\n                alwaysShowResizeHandle: true,\r\n                minWidth: 768,\r\n                auto: true,\r\n                resizable: {\r\n                    handles: 'e, se, s, sw, w'\r\n                },\r\n                disableDrag: !$scope.editMode,\r\n                disableResize: !$scope.editMode\r\n            };\r\n\r\n            $scope.gsHandler = null;\r\n        }\r\n\r\n        return {\r\n            restrict: 'E',\r\n            scope: {\r\n                adfModel: '=',\r\n                editMode: '=',\r\n                continuousEditMode: '=',\r\n                options: '='\r\n            },\r\n            templateUrl: adfTemplatePath + 'dashboard-grid.html',\r\n            compile: function() {\r\n                return {\r\n                    pre: preLink,\r\n                };\r\n            },\r\n            controller: function($scope, $timeout) {\r\n                var dashEvents = [];\r\n                dashEvents.push($scope.$on('adfIsEditMode', function() {\r\n                    $timeout(function() {\r\n                        $scope.gsHandler.enable();\r\n                    }, 100);\r\n                }));\r\n\r\n                dashEvents.push($scope.$on('adfDashboardChanged', function() {\r\n                    $timeout(function() {\r\n                        $scope.gsHandler.disable();\r\n                    }, 100);\r\n                }));\r\n\r\n                dashEvents.push($scope.$on('adfDashboardEditsCancelled', function() {\r\n                    $timeout(function() {\r\n                        $scope.gsHandler.disable();\r\n                    }, 100);\r\n                }));\r\n\r\n                dashEvents.push($scope.$on('adfCancelEditMode', function() {\r\n                    $timeout(function() {\r\n                        $scope.gsHandler.disable();\r\n                    }, 100);\r\n                }));\r\n\r\n                dashEvents.push($scope.$on('adfWidgetAdded', function(event) {\r\n                    $timeout(function() {\r\n                        $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\r\n                        $scope.gsHandler.enable();\r\n                    }, 100);\r\n                }));\r\n\r\n                $scope.onChange = function(event, items) {\r\n                    //console.log('onChange event: ' + event + ' items:' + items);\r\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\r\n                };\r\n\r\n                $scope.onDragStart = function(event, ui) {\r\n                    console.log('onDragStart event: ' + event + ' ui:' + ui);\r\n                };\r\n\r\n                $scope.onDragStop = function(event, ui) {\r\n                    console.log('onDragStop event: ' + event + ' ui:' + ui);\r\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\r\n                };\r\n\r\n                $scope.onResizeStart = function(event, ui) {\r\n                    console.log('onResizeStart event: ' + event + ' ui:' + ui);\r\n                };\r\n\r\n                $scope.onResizeStop = function(event, ui) {\r\n                    console.log('onResizeStop event: ' + event + ' ui:' + ui);\r\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\r\n                    $scope.$broadcast('OnResizeWidget');\r\n                };\r\n\r\n                $scope.onItemAdded = function(item) {\r\n                    console.log('onItemAdded item: ' + item);\r\n                };\r\n\r\n                $scope.onItemRemoved = function(item) {\r\n                    console.log('onItemRemoved item: ' + item);\r\n                };\r\n\r\n                $scope.$on('destroy', function() {\r\n                    dashEvents.forEach(function(dashEvt) {\r\n                        dashEvt();\r\n                    });\r\n                });\r\n            }\r\n        };\r\n    });\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .filter('adfOrderByObjectKey', function($filter) {\r\n    \r\n\r\n    return function(item, key){\r\n      var array = [];\r\n      angular.forEach(item, function(value, objectKey){\r\n        value[key] = objectKey;\r\n        array.push(value);\r\n      });\r\n      return $filter('orderBy')(array, key);\r\n    };\r\n  });\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\n/**\r\n * @ngdoc object\r\n * @name adf.dashboardProvider\r\n * @description\r\n *\r\n * The dashboardProvider can be used to register widgets.\r\n */\r\nangular.module('adf.provider', [])\r\n    .provider('dashboard', function () {\r\n\r\n        var widgets = {};\r\n        var widgetsPath = '';\r\n        var messageTemplate = '<div class=\"alert alert-primary\">{}</div>';\r\n        var loadingTemplate = '\\\r\n      <div class=\"progress progress-striped active\">\\n\\\r\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\r\n          <span class=\"sr-only\" translate>FORM.MSG.LOADING ...</span>\\n\\\r\n        </div>\\n\\\r\n      </div>';\r\n        var customWidgetTemplatePath = null;\r\n\r\n        // default apply function of widget.edit.apply\r\n        var defaultApplyFunction = function () {\r\n            return true;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#widget\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Registers a new widget.\r\n         *\r\n         * @param {string} name of the widget\r\n         * @param {object} widget to be registered.\r\n         *\r\n         *   Object properties:\r\n         *\r\n         *   - `title` - `{string=}` - The title of the widget.\r\n         *   - `description` - `{string=}` - Description of the widget.\r\n         *   - `category` - `{string=}` - Category of the widget.\r\n         *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\r\n         *   - `config` - `{object}` - Predefined widget configuration.\r\n         *   - `controller` - `{string=|function()=}` - Controller fn that should be\r\n         *      associated with newly created scope of the widget or the name of a\r\n         *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\r\n         *      if passed as a string.\r\n         *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\r\n         *      published to scope under the `controllerAs` name.\r\n         *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\r\n         *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\r\n         *   - `template` - `{string=|function()=}` - html template as a string.\r\n         *   - `templateUrl` - `{string=}` - path to an html template.\r\n         *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\r\n         *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n         *      be injected into the controller. If any of these dependencies are promises, the widget\r\n         *      will wait for them all to be resolved or one to be rejected before the controller is\r\n         *      instantiated.\r\n         *      If all the promises are resolved successfully, the values of the resolved promises are\r\n         *      injected.\r\n         *\r\n         *      The map object is:\r\n         *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\r\n         *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n         *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\r\n         *        and the return value is treated as the dependency. If the result is a promise, it is\r\n         *        resolved before its value is injected into the controller.\r\n         *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n         *      on the scope of the widget.\r\n         *   - `edit` - `{object}` - Edit modus of the widget.\r\n         *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n         *        on the scope of the widget.\r\n         *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\r\n         *        Default is true.\r\n         *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\r\n         *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\r\n         *        The function have to return a boolean or an promise which can be resolved to a boolean.\r\n         *        The function can use injection.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.widget = function (name, widget) {\r\n            var w = angular.extend({\r\n                reload: false,\r\n                frameless: false\r\n            }, widget);\r\n            if (w.edit) {\r\n                var edit = {\r\n                    reload: true,\r\n                    immediate: false,\r\n                    apply: defaultApplyFunction\r\n                };\r\n                angular.extend(edit, w.edit);\r\n                w.edit = edit;\r\n            }\r\n            //OUW-1610\r\n            if (!w.config) {\r\n                w.config = {};\r\n            }\r\n            widgets[name] = w;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#widgetsPath\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Sets the path to the directory which contains the widgets. The widgets\r\n         * path is used for widgets with a templateUrl which contains the\r\n         * placeholder {widgetsPath}. The placeholder is replaced with the\r\n         * configured value, before the template is loaded, but the template is\r\n         * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\r\n         * The default value of widgetPaths is ''.\r\n         *\r\n         *\r\n         * @param {string} path to the directory which contains the widgets\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.widgetsPath = function (path) {\r\n            widgetsPath = path;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#messageTemplate\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the template for messages.\r\n         *\r\n         * @param {string} template for messages.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.messageTemplate = function (template) {\r\n            messageTemplate = template;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#loadingTemplate\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the template which is displayed as\r\n         * long as the widget resources are not resolved.\r\n         *\r\n         * @param {string} template loading template\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.loadingTemplate = function (template) {\r\n            loadingTemplate = template;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#customWidgetTemplatePath\r\n         * @propertyOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the container template for the widgets\r\n         *\r\n         * @param {string} path to the custom widget template\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.customWidgetTemplatePath = function (templatePath) {\r\n            customWidgetTemplatePath = templatePath;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc service\r\n         * @name adf.dashboard\r\n         * @description\r\n         *\r\n         * The dashboard holds all options and  widgets.\r\n         *\r\n         * @property {Array.<Object>} widgets Array of registered widgets.\r\n         * @property {string} widgetsPath Default path for widgets.\r\n         * @property {string} messageTemplate Template for messages.\r\n         * @property {string} loadingTemplate Template for widget loading.\r\n         * * @property {string} customWidgetTemplatePath Changes the container template for the widgets\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.$get = function () {\r\n            var cid = 0;\r\n\r\n            return {\r\n                widgets: widgets,\r\n                widgetsPath: widgetsPath,\r\n                messageTemplate: messageTemplate,\r\n                loadingTemplate: loadingTemplate,\r\n                customWidgetTemplatePath: customWidgetTemplatePath,\r\n\r\n                /**\r\n                 * @ngdoc method\r\n                 * @name adf.dashboard#id\r\n                 * @methodOf adf.dashboard\r\n                 * @description\r\n                 *\r\n                 * Creates an ongoing numeric id. The method is used to create ids for\r\n                 * columns and widgets in the dashboard.\r\n                 */\r\n                id: function () {\r\n                    return new Date().getTime() + '-' + (++cid);\r\n                },\r\n\r\n                /**\r\n                 * @ngdoc method\r\n                 * @name adf.dashboard#idEqual\r\n                 * @methodOf adf.dashboard\r\n                 * @description\r\n                 *\r\n                 * Checks if the given ids are equal.\r\n                 *\r\n                 * @param {string} id widget or column id\r\n                 * @param {string} other widget or column id\r\n                 */\r\n                idEquals: function (id, other) {\r\n                    // use toString, because old ids are numbers\r\n                    return ((id) && (other)) && (id.toString() === other.toString());\r\n                }\r\n            };\r\n        };\r\n\r\n    });\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf')\r\n    .directive('adfWidgetContent', function ($log, $q, widgetService,\r\n        $compile, $controller, $injector, dashboard, $translate) {\r\n\r\n        function renderError($element, msg) {\r\n            $log.warn(msg);\r\n            $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\r\n        }\r\n\r\n        function compileWidget($scope, $element, currentScope, configChanged) {\r\n            var model = $scope.model;\r\n            if (!model) {\r\n                $translate('ADF.ERROR.MODEL_IS_UNDEFINED').then(function (translateMessage) {\r\n                    renderError($element, translateMessage);\r\n                });\r\n                return currentScope;\r\n            }\r\n\r\n            var content = $scope.content;\r\n\r\n            if (!content) {\r\n                $translate('ADF.ERROR.WIDGET_FOR_DEPRECTATED', {\r\n                    title: model.title\r\n                }).then(function (translateMessage) {\r\n                    renderError($element, translateMessage);\r\n                });\r\n                return currentScope;\r\n            }\r\n\r\n            var extra = $scope.extra;\r\n            var newScope = currentScope;\r\n\r\n            if (newScope) {\r\n                var is_menu = newScope.menu !== undefined && newScope.menu !== null && (!newScope.isPaginationEnable || !newScope.isPaginationEnable());\r\n                if (is_menu || configChanged || !angular.isFunction(newScope.reloadData)) {\r\n                    if ($scope.navOptionsHandler) {\r\n                        $scope.navOptionsHandler.firstLoad = true;\r\n                    }\r\n                    newScope = renderWidget($scope, $element, currentScope, model, content, extra);\r\n                } else {\r\n                    var is_itemsPerPage = newScope.itemsPerPage !== undefined && newScope.itemsPerPage !== null;\r\n                    if (is_itemsPerPage || newScope.page) {\r\n                        newScope.page = 1;\r\n                    }\r\n                    newScope.reloadData();\r\n                }\r\n            } else {\r\n                if ($scope.navOptionsHandler) {\r\n                    $scope.navOptionsHandler.firstLoad = true;\r\n                }\r\n\r\n                newScope = renderWidget($scope, $element, currentScope, model, content, extra);\r\n            }\r\n\r\n            function _getWindowTime(type) {\r\n                if (type === 'custom') {\r\n                    return {\r\n                        from: newScope.config.windowFilter.from,\r\n                        to: newScope.config.windowFilter.to\r\n                    };\r\n                }\r\n                var from = window.moment().subtract(1, type);\r\n                return {\r\n                    from: from._d\r\n                };\r\n            }\r\n\r\n\r\n\r\n            newScope.config.getWindowTime = function () {\r\n                var windowFilter = newScope.config.windowFilter;\r\n                if (windowFilter && windowFilter.type) {\r\n                    var winTime = _getWindowTime(windowFilter.type);\r\n                    /* jshint ignore:start */\r\n                    if (!window.eval(newScope.config.windowFilter.rawdate)) {\r\n                        for (var key in winTime) {\r\n                            winTime[key] = window.moment(winTime[key]).format();\r\n                        }\r\n                        winTime['rawdate'] = true;\r\n                    }\r\n                    /* jshint ignore:end */\r\n                    return winTime;\r\n                }\r\n            };\r\n\r\n            if (extra) {\r\n                newScope.editing = extra.editing ? true : false;\r\n                newScope.extraData = extra;\r\n            }\r\n\r\n            return newScope;\r\n        }\r\n\r\n        function renderWidget($scope, $element, currentScope, model, content, extra) {\r\n            // display loading template\r\n            $element.html(dashboard.loadingTemplate);\r\n\r\n            // create new scope\r\n            var templateScope = $scope.$new();\r\n\r\n            // pass config object to scope\r\n            if (!model.config) {\r\n                model.config = {};\r\n            }\r\n\r\n            templateScope.config = model.config;\r\n            templateScope.editing = extra && extra.editing;\r\n\r\n            if (extra) {\r\n                templateScope.extra = extra;\r\n            }\r\n\r\n            var _from = currentScope || templateScope.config;\r\n            templateScope.selectionManager = (_from) ? _from.selectionManager : undefined;\r\n\r\n            // local injections\r\n            var base = {\r\n                $scope: templateScope,\r\n                widget: model,\r\n                config: model.config\r\n            };\r\n\r\n            // get resolve promises from content object\r\n            var resolvers = {};\r\n            resolvers.$tpl = widgetService.getTemplate(content);\r\n            if (content.resolve) {\r\n                angular.forEach(content.resolve, function (promise, key) {\r\n                    if (angular.isString(promise)) {\r\n                        resolvers[key] = $injector.get(promise);\r\n                    } else {\r\n                        resolvers[key] = $injector.invoke(promise, promise, base);\r\n                    }\r\n                });\r\n            }\r\n\r\n            // resolve all resolvers\r\n            $q.all(resolvers).then(function (locals) {\r\n                angular.extend(locals, base);\r\n\r\n                // pass resolve map to template scope as defined in resolveAs\r\n                if (content.resolveAs) {\r\n                    templateScope[content.resolveAs] = locals;\r\n                }\r\n\r\n                // compile & render template\r\n                var template = locals.$tpl;\r\n                $element.html(template);\r\n                if (content.controller) {\r\n                    var templateCtrl = $controller(content.controller, locals);\r\n                    if (content.controllerAs) {\r\n                        templateScope[content.controllerAs] = templateCtrl;\r\n                    }\r\n                    $element.children().data('$ngControllerController', templateCtrl);\r\n                }\r\n                $compile($element.contents())(templateScope);\r\n            }, function (reason) {\r\n                // handle promise rejection\r\n                var msg = 'ADF.ERROR.COULD_NOT_RESOLVE_ALL_PROMISSES';\r\n                $translate(msg, {\r\n                    reason: (reason ? ': ' + reason : reason)\r\n                }).then(function (translateMessage) {\r\n                    renderError($element, translateMessage);\r\n                });\r\n            });\r\n\r\n            // destroy old scope\r\n            if (currentScope) {\r\n                currentScope.$destroy();\r\n            }\r\n\r\n            return templateScope;\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            require: '?^^adfWidgetGrid',\r\n            scope: {\r\n                model: '=',\r\n                content: '=',\r\n                extra: '=',\r\n                navOptionsHandler: '=?',\r\n                filterHandler: '=?',\r\n                widgetActionsHandler: '=?'\r\n            },\r\n            link: function ($scope, $element, attrs, adfWidgetGridCtrl) {\r\n                var currentScope = compileWidget($scope, $element, null);\r\n                if (adfWidgetGridCtrl) {\r\n                    $scope.search = $scope.search || {};\r\n                    adfWidgetGridCtrl.updateWidgetFilters($scope.model.config.filter && $scope.model.config.filter.id);\r\n                }\r\n\r\n                var widgetConfigChangedEvt = $scope.$on('widgetConfigChanged', function (event, changeWidgets) {\r\n                    if (changeWidgets) {\r\n                        if (changeWidgets.indexOf($scope.model.wid) !== -1 && adfWidgetGridCtrl) {\r\n                            adfWidgetGridCtrl.updateWidgetFilters($scope.model.config.filter && $scope.model.config.filter.id, true);\r\n                        }\r\n                    } else {\r\n                        currentScope = compileWidget($scope, $element, currentScope, true);\r\n                    }\r\n                });\r\n\r\n                var widgetReloadEvt = $scope.$on('widgetReload', function (event, reloadWidgets) {\r\n                    var reloadWidget = true;\r\n                    if (reloadWidgets && reloadWidgets.length > 0) {\r\n                        reloadWidget = reloadWidgets.indexOf($scope.model.wid) !== -1;\r\n                    }\r\n                    if (reloadWidget) {\r\n                        currentScope = compileWidget($scope, $element, currentScope, false);\r\n                        if (adfWidgetGridCtrl && adfWidgetGridCtrl.updateWidgetFilters) {\r\n                            adfWidgetGridCtrl.updateWidgetFilters($scope.model.config.filter && $scope.model.config.filter.id);\r\n                        }\r\n                    }\r\n                });\r\n\r\n                $scope.$on('destroy', function () {\r\n                    widgetConfigChangedEvt();\r\n                    widgetReloadEvt();\r\n                });\r\n            }\r\n        };\r\n    });\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf')\r\n    .directive('adfWidgetGrid', function ($injector, $q, $log, $uibModal, $rootScope, $interval, dashboard, adfTemplatePath, Filter, toastr, $translate) {\r\n        function preLink($scope) {\r\n            var definition = $scope.definition;\r\n\r\n            if (definition) {\r\n                var w = dashboard.widgets[definition.type];\r\n                if (w) {\r\n                    // pass title\r\n                    if (!definition.title) {\r\n                        definition.title = w.title;\r\n                    }\r\n\r\n                    definition.titleTemplateUrl = adfTemplatePath + 'widget-grid-title.html';\r\n\r\n                    if (!definition.editTemplateUrl) {\r\n                        definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\r\n                        if (w.editTemplateUrl) {\r\n                            definition.editTemplateUrl = w.editTemplateUrl;\r\n                        }\r\n                    }\r\n\r\n                    if (!definition.titleTemplateUrl) {\r\n                        definition.frameless = w.frameless;\r\n                    }\r\n\r\n                    if (!definition.styleClass) {\r\n                        definition.styleClass = w.styleClass;\r\n                    }\r\n\r\n                    // set id for sortable\r\n                    if (!definition.wid) {\r\n                        definition.wid = dashboard.id();\r\n                    }\r\n\r\n                    // pass copy of widget to scope\r\n                    $scope.widget = angular.copy(w);\r\n\r\n                    // create config object\r\n                    var config = definition.config;\r\n                    if (config) {\r\n                        if (angular.isString(config)) {\r\n                            config = angular.fromJson(config);\r\n                        }\r\n                    } else {\r\n                        config = {};\r\n                    }\r\n                    // pass config to scope\r\n                    $scope.config = config;\r\n\r\n                    if (typeof $scope.widget.show_modal_footer === 'undefined') {\r\n                        $scope.widget.show_modal_footer = true;\r\n                    }\r\n\r\n                    if (typeof $scope.widget.show_reload_config === 'undefined') {\r\n                        $scope.widget.show_reload_config = true;\r\n                    }\r\n\r\n                    // collapse exposed $scope.widgetState property\r\n                    if (!$scope.widgetState) {\r\n                        $scope.widgetState = {};\r\n                        $scope.widgetState.isCollapsed = (w.collapsed === true) ? w.collapsed : false;\r\n                    }\r\n\r\n                } else {\r\n                    $log.warn('could not find widget ' + definition.type);\r\n                }\r\n            } else {\r\n                $log.debug('definition not specified, widget was probably removed');\r\n            }\r\n        }\r\n\r\n        function postLink($scope, $element) {\r\n            var definition = $scope.definition;\r\n            if (!definition) {\r\n                $log.debug('widget not found');\r\n                return;\r\n            }\r\n            var config = $scope.config || {};\r\n\r\n            // bind close function\r\n            var deleteWidget = function () {\r\n                $element.remove();\r\n                $rootScope.$broadcast('adfWidgetRemovedFromGrid', definition);\r\n            };\r\n\r\n            $scope.remove = function () {\r\n                if ($scope.options.enableConfirmDelete) {\r\n                    var deleteScope = $scope.$new();\r\n\r\n                    var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\r\n                    if (definition.deleteTemplateUrl) {\r\n                        deleteTemplateUrl = definition.deleteTemplateUrl;\r\n                    }\r\n                    var opts = {\r\n                        scope: deleteScope,\r\n                        templateUrl: deleteTemplateUrl,\r\n                        backdrop: 'static'\r\n                    };\r\n                    var instance = $uibModal.open(opts);\r\n\r\n                    deleteScope.closeDialog = function () {\r\n                        instance.close();\r\n                        deleteScope.$destroy();\r\n                    };\r\n                    deleteScope.deleteDialog = function () {\r\n                        deleteWidget();\r\n                        deleteScope.closeDialog();\r\n                    };\r\n                } else {\r\n                    deleteWidget();\r\n                }\r\n            };\r\n\r\n\r\n            $scope.print = function () {\r\n                if (!$scope.editMode) {\r\n                    $scope.$broadcast('widgetPrint');\r\n                }\r\n            };\r\n\r\n            $scope.isExecuteOperationEnabled = function () {\r\n\r\n                if (config.entityKey)\r\n                    return true;\r\n                var filter = config.filter;\r\n\r\n                if (filter) {\r\n                    if (filter.headersFilter && filter.headersFilter.length > 0) {\r\n                        return true;\r\n                    } else {\r\n                        if (filter.type === \"basic\") {\r\n                            return filter.value.length > 0;\r\n                        }\r\n                        if (filter.type === \"advanced\") {\r\n                            return filter.value.length > 2 && filter.oql;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return false;\r\n            };\r\n\r\n            $scope.executeOperation = function () {\r\n                if (!$scope.editMode) {\r\n\r\n                    $scope.$parent.$broadcast('widgetExecuteOperation');\r\n                }\r\n            };\r\n\r\n            $scope.filter = {\r\n                typeFilter: 1,\r\n                showFilter: false,\r\n                showFinalFilter: false\r\n            };\r\n\r\n            $scope.launchSearching = function () {\r\n                var widget = {\r\n                    definition: definition,\r\n                    element: $element\r\n                };\r\n\r\n                $rootScope.$broadcast('adfLaunchSearchingFromWidget', widget, $scope.config.filter);\r\n                $scope.reload();\r\n            };\r\n\r\n\r\n            $scope.launchSearchingAdv = function () {\r\n                if (!$scope.filterApplied) {\r\n                    var executeSearch = true;\r\n                    $scope.search.quick = '';\r\n                    if ($scope.search.json === '' || $scope.search.json === '{}' || (!angular.isString($scope.search.json) && Object.keys($scope.search.json).length === 0)) {\r\n                        if ($scope.search.oql && $scope.search.oql.trim().length > 0) {\r\n                            toastr.error($translate.instant(\"TOASTR.FILTER_IS_MALFORMED\"));\r\n                            executeSearch = false;\r\n                        } else {\r\n                            $scope.config.filter = {\r\n                                type: 'advanced',\r\n                                oql: '',\r\n                                value: ''\r\n                            };\r\n                        }\r\n                    } else {\r\n                        $scope.config.filter = {\r\n                            type: 'advanced',\r\n                            oql: $scope.search.oql,\r\n                            value: $scope.search.json,\r\n                            headersFilter: $scope.config.filter.headersFilter\r\n                        };\r\n                    }\r\n\r\n                    if (executeSearch) {\r\n                        $scope.launchSearching();\r\n                        $scope.filterApplied = true;\r\n                    }\r\n                }\r\n            };\r\n\r\n            $scope.launchSearchingQuick = function () {\r\n                if (!$scope.filterApplied) {\r\n                    $scope.search.oql = $scope.search.json = '';\r\n                    $scope.config.filter = {\r\n                        type: 'basic',\r\n                        value: $scope.search.quick,\r\n                        headersFilter: $scope.config.filter.headersFilter\r\n                    };\r\n                    $scope.launchSearching();\r\n                    $scope.filterApplied = true;\r\n                }\r\n            };\r\n\r\n            $scope.launchSearchingShared = function () {\r\n                // if (!$scope.filterApplied) {\r\n                var shared = $scope.search.id;\r\n                if (shared) {\r\n                    shared.filter.id = shared.wid;\r\n                    $scope.config.filter = shared.filter;\r\n                } else {\r\n                    $scope.config.filter = {};\r\n                }\r\n                $scope.launchSearching();\r\n                $scope.filterApplied = true;\r\n                // }\r\n            };\r\n\r\n            $scope.filterSharedSelect = function ($item, $model) {\r\n                $scope.filterApplied = false;\r\n                $scope.launchSearchingShared();\r\n            };\r\n            $scope.filterSharedRemove = function ($item, $model) {\r\n                $scope.filterApplied = false;\r\n            };\r\n\r\n            var windowTimeChanged = $scope.$on('onWindowTimeChanged', function (event, timeObj) {\r\n                $scope.config.windowFilter = timeObj ? timeObj : (config.windowFilter ? {} : timeObj);\r\n                var widget = {\r\n                    definition: definition,\r\n                    element: $element\r\n                };\r\n                $rootScope.$broadcast('adfWindowTimeChangedFromWidget', widget, $scope.config.windowFilter);\r\n                $scope.reload();\r\n            });\r\n\r\n            $scope.enter = function (event) {\r\n                var keycode = (event.keyCode ? event.keyCode : event.which);\r\n                if (keycode === 13) {\r\n                    if ($scope.filter.typeFilter === 0)\r\n                        $scope.launchSearchingAdv();\r\n                    if ($scope.filter.typeFilter === 1)\r\n                        $scope.launchSearchingQuick();\r\n                    if ($scope.filter.typeFilter === 2)\r\n                        $scope.launchSearchingShared();\r\n                } else if (keycode === 19) {\r\n                    $scope.filter.showFinalFilter = !$scope.filter.showFinalFilter;\r\n                } else {\r\n                    $scope.filterApplied = false;\r\n                }\r\n            };\r\n\r\n\r\n            $scope.customSelectors = [];\r\n            $scope.getCustomSelectors = function () {\r\n                if ($scope.config.customSelectors) {\r\n                    $scope.customSelectors = $scope.config.customSelectors;\r\n                } else {\r\n                    config.widgetSelectors().findFields('').then(function (fields) {\r\n                        $scope.customSelectors = fields;\r\n                        $scope.$apply();\r\n                    }).catch(function (err) {\r\n                        $log.error(err);\r\n                    });\r\n                }\r\n            };\r\n\r\n            $scope.changeDirection = function () {\r\n                var direction = config.sort.direction;\r\n                if (direction === 'DESCENDING') {\r\n                    $scope.config.sort.direction = 'ASCENDING';\r\n                } else if (direction === 'ASCENDING') {\r\n                    $scope.config.sort.direction = 'DESCENDING';\r\n                }\r\n                $scope.reload();\r\n            };\r\n\r\n            $scope.debugQuery = function () {\r\n                Filter.parseQuery($scope.search.oql || '')\r\n                    .then(function (data) {\r\n                        $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\r\n                        $scope.unknownWords = '';\r\n                        $scope.filter_error = null;\r\n                    })\r\n                    .catch(function (err) {\r\n                        $scope.filter_error = err;\r\n                        // Tratar el error\r\n                    });\r\n\r\n            };\r\n\r\n            $scope.autocomplete_options = function () {\r\n                var autocomplete_options = {\r\n                    suggest: Filter.suggest_field_delimited,\r\n                    customSelectors: config.widgetSelectors()\r\n                };\r\n\r\n                return autocomplete_options;\r\n\r\n            };\r\n\r\n            // Multiple selection\r\n            $scope.selectedItems = definition.selectedItems || {};\r\n\r\n            // Gestor de seleccion\r\n            $scope.selectionManager = {\r\n                currentSelection: $scope.selectedItems,\r\n                isSelected: function (key, obj) {\r\n                    if ($scope.selectedItems[key] && !angular.isUndefined(obj)) {\r\n                        $scope.selectedItems[key].data = obj;\r\n                    }\r\n\r\n                    return $scope.selectedItems[key] ? true : false;\r\n                },\r\n                totalSelected: function () {\r\n                    return Object.keys($scope.selectedItems).length;\r\n                }\r\n            };\r\n\r\n            if (definition.config.sendSelection) {\r\n\r\n                $scope.sendEntities = function () {\r\n                    definition.config.sendSelection($scope.selectedItems);\r\n                    $scope.$parent.closeDialog();\r\n                };\r\n\r\n                if (definition.config.selectedItems) {\r\n                    $scope.selectedItems = angular.copy(definition.config.selectedItems);\r\n                }\r\n\r\n                $scope.config.selectionManager = $scope.selectionManager;\r\n            }\r\n\r\n            $scope.manageSelectedItems = function () {\r\n                var selectionScope = $scope.$new();\r\n\r\n                if (definition.config.sendSelection) {\r\n                    delete config.selectionConfig.operationTypes;\r\n                    delete config.selectionConfig.filterTypes;\r\n                }\r\n\r\n                selectionScope.selectionConfig = config.selectionConfig;\r\n\r\n                selectionScope.selectedItems = [];\r\n                angular.forEach($scope.selectedItems, function (value, key) {\r\n                    selectionScope.selectedItems.push({\r\n                        key: key,\r\n                        value: value\r\n                    });\r\n                });\r\n\r\n                selectionScope.currentSelection = {\r\n                    selected: selectionScope.selectedItems\r\n                };\r\n\r\n                var manageItemsSelectedTemplate = adfTemplatePath + 'widget-selection.html';\r\n                var opts = {\r\n                    scope: selectionScope,\r\n                    templateUrl: manageItemsSelectedTemplate,\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    animation: true\r\n                };\r\n\r\n                var instance = $uibModal.open(opts);\r\n\r\n                selectionScope.restoreSelection = function () {\r\n                    selectionScope.currentSelection = {\r\n                        selected: selectionScope.selectedItems\r\n                    };\r\n                };\r\n\r\n                selectionScope.clearSelection = function () {\r\n                    selectionScope.currentSelection.selected = [];\r\n                };\r\n\r\n                // Cierra sy guarda los datos de nueva selección\r\n                selectionScope.applyFilter = function (type) {\r\n                    var customOql = selectionScope.selectionConfig.filterAction(selectionScope.currentSelection.selected, type);\r\n\r\n                    if (!angular.isUndefined(customOql) && customOql !== null) {\r\n                        $scope.filter.typeFilter = 0;\r\n                        Filter.parseQuery(customOql).then(function (data) {\r\n                            $scope.search.oql = customOql;\r\n                            $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\r\n                            $scope.unknownWords = '';\r\n                            $scope.filter_error = null;\r\n\r\n                            $scope.launchSearchingAdv();\r\n                        }).catch(function (err) {\r\n                            $scope.filter_error = err;\r\n                        });\r\n                    }\r\n                };\r\n\r\n                selectionScope.executeOperation = function (operationType) {\r\n                    if (!$scope.editMode) {\r\n                        $scope.$parent.$broadcast('widgetExecuteOperation', {\r\n                            'selectedItems': selectionScope.currentSelection.selected,\r\n                            'type': operationType\r\n                        });\r\n                    }\r\n                };\r\n\r\n                // Cierra sy guarda los datos de nueva selección\r\n                selectionScope.saveChangesDialog = function () {\r\n                    var finalSelection = {};\r\n                    angular.forEach(selectionScope.currentSelection.selected, function (data, idx) {\r\n                        finalSelection[data.key] = {\r\n                            data: data.value.data,\r\n                            visible: data.value.visible\r\n                        };\r\n                    });\r\n\r\n                    $scope.selectedItems = angular.copy(finalSelection);\r\n                    $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n\r\n                    $scope.selectionManager.lastItem = {};\r\n                    $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n\r\n                    instance.close();\r\n                    selectionScope.$destroy();\r\n                };\r\n\r\n                // Cierra sin realizar ninguna acción\r\n                selectionScope.closeDialog = function () {\r\n                    instance.close();\r\n                    selectionScope.$destroy();\r\n                };\r\n            };\r\n\r\n\r\n            // bind edit function\r\n            $scope.edit = function () {\r\n                var editScope = $scope.$new();\r\n                editScope.definition = angular.copy(definition);\r\n\r\n                var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\r\n                if (definition.editTemplateUrl) {\r\n                    adfEditTemplatePath = definition.editTemplateUrl;\r\n                }\r\n\r\n                var opts = {\r\n                    scope: editScope,\r\n                    templateUrl: adfEditTemplatePath,\r\n                    backdrop: 'static',\r\n                    size: 'lg'\r\n                };\r\n\r\n                var instance = $uibModal.open(opts);\r\n\r\n                editScope.closeDialog = function () {\r\n                    instance.close();\r\n                    editScope.$destroy();\r\n                };\r\n\r\n                // TODO create util method\r\n                function createApplyPromise(result) {\r\n                    var promise;\r\n                    if (typeof result === 'boolean') {\r\n                        var deferred = $q.defer();\r\n                        if (result) {\r\n                            deferred.resolve();\r\n                        } else {\r\n                            deferred.reject();\r\n                        }\r\n                        promise = deferred.promise;\r\n                    } else {\r\n                        promise = $q.when(result);\r\n                    }\r\n                    return promise;\r\n                }\r\n\r\n                editScope.saveDialog = function () {\r\n                    // clear validation error\r\n                    editScope.validationError = null;\r\n\r\n                    // build injection locals\r\n                    var widget = $scope.widget;\r\n\r\n                    // create a default apply method for widgets\r\n                    // without edit mode\r\n                    // see issue https://goo.gl/KHPQLZ\r\n                    var applyFn;\r\n                    if (widget.edit) {\r\n                        applyFn = widget.edit.apply;\r\n                    } else {\r\n                        applyFn = function () {\r\n                            return true;\r\n                        };\r\n                    }\r\n\r\n                    var editScopeDefinition = editScope.definition.config || {};\r\n                    // injection locals\r\n                    var locals = {\r\n                        widget: widget,\r\n                        definition: editScope.definition,\r\n                        config: editScopeDefinition\r\n                    };\r\n\r\n                    // invoke apply function and apply if success\r\n                    var result = $injector.invoke(applyFn, applyFn, locals);\r\n                    createApplyPromise(result).then(function () {\r\n                        definition.title = editScope.definition.title;\r\n                        if (editScope.definition.type === 'summaryChart') {\r\n                            editScope.definition.Ftype = editScope.definition.config.type.toLowerCase();\r\n                            definition.Ftype = editScope.definition.config.type.toLowerCase();\r\n                        }\r\n                        angular.extend(definition.config, editScopeDefinition);\r\n\r\n                        editScope.closeDialog();\r\n\r\n                        if (widget.edit && widget.edit.reload) {\r\n                            $scope.setReloadTimeout();\r\n                            // reload content after edit dialog is closed\r\n                            $scope.$broadcast('widgetConfigChanged');\r\n                        }\r\n                    }, function (err) {\r\n                        if (err) {\r\n                            editScope.validationError = err;\r\n                        } else {\r\n                            editScope.validationError = 'VALIDATION_DURING_APPLY_FAILED';\r\n                        }\r\n                    });\r\n                };\r\n\r\n            };\r\n\r\n\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            templateUrl: adfTemplatePath + 'widget-grid.html',\r\n            scope: {\r\n                definition: '=',\r\n                editMode: '=',\r\n                options: '=',\r\n                widgetState: '='\r\n            },\r\n            controller: function ($scope) {\r\n                var _setFilterType = function (selectFilter) {\r\n                    var config = $scope.config || {};\r\n                    var filter = config.filter = config.filter ? config.filter : {};\r\n                    var id = filter.id = selectFilter && filter.id;\r\n                    filter.headersFilter = selectFilter && filter.headersFilter;\r\n                    switch (filter.type) {\r\n                        case 'advanced':\r\n                            $scope.filter.typeFilter = id ? 2 : 0;\r\n                            $scope.search = {\r\n                                oql: filter.oql,\r\n                                json: filter.value\r\n                            };\r\n                            break;\r\n                        case 'basic':\r\n                            $scope.filter.typeFilter = id ? 2 : 1;\r\n                            $scope.search = {\r\n                                quick: filter.value\r\n                            };\r\n\r\n                            break;\r\n                        default:\r\n                            $scope.filter.typeFilter = id ? 2 : 1;\r\n                            $scope.search = {\r\n                                quick: filter.value = ''\r\n                            };\r\n                            break;\r\n                    }\r\n                    $scope.search.id = selectFilter;\r\n                };\r\n\r\n                this.updateWidgetFilters = function (filterId, configChange) {\r\n                    if ($scope.options && $scope.options.extraData && $scope.options.extraData.widgetFilters) {\r\n                        var _widgetFilters = $scope.options.extraData.widgetFilters;\r\n                        var model = $scope.definition;\r\n                        var selectFilter;\r\n                        var sharedFilters = _widgetFilters.filter(function (widgetFilter) {\r\n                            // Recuperamos solos los filtros de widgets que cumplan las condiciones:\r\n                            // - No tenga un filtro heredado como filtro\r\n                            // - El tipo de filtro sea igual que el widget que pueda heredarlo (Ftype)\r\n                            // - No recuperamos el filtro propio del widget  \r\n                            var shared = (!widgetFilter.filter || !widgetFilter.filter.id) && (widgetFilter.Ftype === model.Ftype) && (widgetFilter.wid !== model.wid);\r\n                            if (shared && (filterId === widgetFilter.wid))\r\n                                selectFilter = widgetFilter;\r\n                            return shared;\r\n                        });\r\n\r\n                        $scope.sharedFilters = angular.copy(sharedFilters);\r\n                        if (!configChange || !selectFilter && !!filterId)\r\n                            _setFilterType(selectFilter);\r\n                    }\r\n\r\n                };\r\n\r\n                var definition = $scope.definition;\r\n\r\n\r\n                if (definition.config.selectedItems) {\r\n                    $scope.selectedItemsLength = Object.keys(definition.config.selectedItems).length;\r\n                }\r\n\r\n\r\n                // Controlador de la barra inferior de los widgets\r\n                $scope.navOptionsHandler = {\r\n                    firstLoad: true,\r\n                    loadingData: false,\r\n                    startLoading: function () {\r\n                        $scope.navOptionsHandler.loadingData = true;\r\n                    },\r\n                    stopLoading: function () {\r\n                        $scope.navOptionsHandler.firstLoad = false;\r\n                        $scope.navOptionsHandler.loadingData = false;\r\n                        $scope.navOptionsHandler.lastMessageTime = new Date();\r\n                    },\r\n                    setStatusMessage: function (message) {\r\n                        $scope.navOptionsHandler.statusMessage = message;\r\n                        $scope.navOptionsHandler.lastMessageTime = new Date();\r\n                    }\r\n                };\r\n\r\n                // Controlador de los parámetros del filtro\r\n                $scope.filterHandler = {\r\n                    changeFilter: function (filter, search, typeFilter) {\r\n                        $scope.search = search;\r\n                        $scope.filter.typeFilter = typeFilter;\r\n                    }\r\n                };\r\n\r\n                // Controlador de las custom actions del widget\r\n                $scope.widgetActionsHandler = {\r\n                    actions: [],\r\n                    setActions: function (actions) {\r\n                        $scope.widgetActionsHandler.actions = actions;\r\n                    }\r\n                };\r\n\r\n                var adfDashboardCollapseExpand = $scope.$on('adfDashboardCollapseExpand', function (event, args) {\r\n                    $scope.widgetState.isCollapsed = args.collapseExpandStatus;\r\n                });\r\n\r\n                var adfWidgetEnterEditMode = $scope.$on('adfWidgetEnterEditMode', function (event, widget) {\r\n                    if (dashboard.idEquals(definition.wid, widget.wid)) {\r\n                        $scope.edit();\r\n                    }\r\n                });\r\n\r\n                var adfIsEditMode = $scope.$on('adfIsEditMode', function (event, widget) {\r\n                    $scope.editing = true;\r\n                });\r\n\r\n                var adfDashboardChanged = $scope.$on('adfDashboardChanged', function (event, name, model) {\r\n                    //config.widgetSelectors = tiene filtro\r\n                    var widgetConfigChanged = [];\r\n                    var grid = model.grid;\r\n                    if (grid && grid.length > 0) {\r\n                        grid.forEach(function (element) {\r\n                            var definition = element.definition;\r\n                            widgetConfigChanged.push(definition.wid);\r\n                        });\r\n                        var widgetFilters = $scope.options.extraData && $scope.options.extraData.widgetFilters;\r\n                        var sharedFilters = widgetFilters.filter(function (widgetFilter) {\r\n                            var filter = widgetFilter.filter;\r\n                            return filter && !filter.id || widgetConfigChanged.indexOf(filter.id) !== -1;\r\n                        });\r\n                        $scope.sharedFilters = angular.copy(sharedFilters);\r\n                        $scope.editing = false;\r\n                        $scope.$broadcast('widgetConfigChanged', widgetConfigChanged);\r\n                    }\r\n                });\r\n\r\n                var adfDashboardEditsCancelled = $scope.$on('adfDashboardEditsCancelled', function (event, widget) {\r\n                    $scope.editing = false;\r\n                });\r\n\r\n                $scope.openFullScreen = function () {\r\n\r\n                    $scope.$emit('adfOpenModalWidgetFromOther', definition.type, $scope.config || {});\r\n                };\r\n\r\n                $scope.openAboutScreen = function (size) {\r\n                    size = 'md';\r\n                    var modalInstance = $uibModal.open({\r\n                        animation: true,\r\n                        templateUrl: 'widgetAboutModal.html',\r\n                        controller: function ($scope, $uibModalInstance, information) {\r\n                            $scope.about = {};\r\n                            $scope.about.info = information;\r\n                            $scope.ok = function () {\r\n                                $uibModalInstance.close();\r\n                            };\r\n                        },\r\n                        'size': size,\r\n                        resolve: {\r\n                            information: function () {\r\n                                return $scope.config.about;\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    modalInstance.result.then(function (selectedItem) {\r\n                        $scope.selected = selectedItem;\r\n                    }, function () {\r\n                        $log.info('Modal dismissed at: ' + new Date());\r\n                    });\r\n                };\r\n\r\n                $scope.saveWidgetScreen = function (wId) {\r\n                    $scope.$emit('generateSnapshot', {\r\n                        'objectSelector': '.widget_' + wId,\r\n                        'fileName': 'capture_' + new Date().getTime()\r\n                    });\r\n                };\r\n\r\n                var createQuickFilter = function (fieldsQuickSearch) {\r\n                    var _filter = {\r\n                        or: []\r\n                    };\r\n                    var criteria;\r\n                    fieldsQuickSearch.forEach(function (field) {\r\n                        criteria = {};\r\n                        criteria[field.operator] = {};\r\n                        criteria[field.operator][field.name] = $scope.config.filter.value;\r\n                        _filter.or.push(criteria);\r\n                    });\r\n                    return _filter;\r\n                };\r\n\r\n                $scope.downloadCsv = function () {\r\n                    var columns = $scope.config.columns;\r\n                    var scope_filter = $scope.config.filter;\r\n                    var extra_filter;\r\n                    var final_filter = {};\r\n                    var order = $scope.config.sort ? $scope.config.sort : undefined;\r\n                    if ($scope.config.windowFilter) {\r\n                        var window_filter = $scope.config.onWindowTimeChanged($scope.config.windowFilter);\r\n                        if (window_filter && window_filter.and) {\r\n                            extra_filter = {\r\n                                and: window_filter.and\r\n                            };\r\n                        }\r\n                    }\r\n                    var filter;\r\n                    if (scope_filter.type && scope_filter.type === 'advanced' && scope_filter.value.length > 4) {\r\n                        filter = JSON.parse(scope_filter.value);\r\n                    } else if (scope_filter.type && scope_filter.type === 'basic' && scope_filter.value.trim() !== '') {\r\n                        filter = createQuickFilter($scope.config.fieldsQuickSearch, scope_filter.value);\r\n                    }\r\n                    if (extra_filter) {\r\n                        if (filter) {\r\n                            final_filter = {\r\n                                and: [extra_filter, filter]\r\n                            };\r\n                        } else {\r\n                            final_filter = extra_filter;\r\n                        }\r\n                    } else {\r\n                        final_filter = filter;\r\n                    }\r\n                    $scope.$broadcast('downloadCsv', {\r\n                        'columns': columns,\r\n                        'filter': final_filter,\r\n                        'order': order\r\n                    });\r\n                };\r\n\r\n                $scope.generateQR = function () {\r\n                    $scope.$broadcast('generateQR');\r\n                };\r\n\r\n                var addItemToSelection = $scope.$on('addItemToSelection', function (event, item) {\r\n                    if (!$scope.selectedItems[item.key]) {\r\n                        $scope.selectedItems[item.key] = {\r\n                            data: item.data,\r\n                            visible: item.visible\r\n                        };\r\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n                        item.isSelected = true;\r\n                        $scope.selectionManager.lastItem = item;\r\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n                    }\r\n\r\n                });\r\n\r\n                var removeItemFromSelection = $scope.$on('removeItemFromSelection', function (event, item) {\r\n                    if ($scope.selectedItems[item.key]) {\r\n                        delete $scope.selectedItems[item.key];\r\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n                        item.isSelected = false;\r\n                        $scope.selectionManager.lastItem = item;\r\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n                    }\r\n                });\r\n\r\n                // bind reload function\r\n                var stopReloadTimeout;\r\n\r\n                $scope.setReloadTimeout = function () {\r\n                    var config = $scope.config || $scope.definition.config || {};\r\n\r\n\r\n                    var reloadPeriod = config.reloadPeriod;\r\n                    if (!isNaN(reloadPeriod) && (reloadPeriod * 1) !== 0) {\r\n                        if (angular.isDefined(stopReloadTimeout)) {\r\n                            $interval.cancel(stopReloadTimeout);\r\n                            stopReloadTimeout = undefined;\r\n                        }\r\n                        stopReloadTimeout = $interval($scope.reload, (reloadPeriod * 1000));\r\n                    } else if (stopReloadTimeout) {\r\n                        $interval.cancel(stopReloadTimeout);\r\n                    }\r\n                };\r\n\r\n                $scope.reload = function () {\r\n                    $scope.$broadcast('widgetReload');\r\n\r\n                    $scope.setReloadTimeout();\r\n                };\r\n\r\n                // verificacion de periodo de refresco\r\n                $scope.setReloadTimeout();\r\n\r\n                $scope.$on('$destroy', function () {\r\n                    adfDashboardCollapseExpand();\r\n                    adfWidgetEnterEditMode();\r\n                    adfIsEditMode();\r\n                    adfDashboardChanged();\r\n                    adfDashboardEditsCancelled();\r\n                    addItemToSelection();\r\n                    removeItemFromSelection();\r\n                    $interval.cancel(stopReloadTimeout);\r\n                });\r\n            },\r\n            compile: function () {\r\n\r\n                /**\r\n                 * use pre link, because link of widget-content\r\n                 * is executed before post link widget\r\n                 */\r\n                return {\r\n                    pre: preLink,\r\n                    post: postLink\r\n                };\r\n            }\r\n        };\r\n\r\n    });\n\r\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n/**\r\n * The widget service provide helper functions to render widgets and their content.\r\n */\r\nangular.module('adf')\r\n  .factory('widgetService', function($http, $q, $sce, $templateCache, dashboard) {\r\n    \r\n\r\n    function parseUrl(url) {\r\n      var parsedUrl = url;\r\n      if (url.indexOf('{widgetsPath}') >= 0) {\r\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\r\n                .replace('//', '/');\r\n        if (parsedUrl.indexOf('/') === 0) {\r\n          parsedUrl = parsedUrl.substring(1);\r\n        }\r\n      }\r\n      return parsedUrl;\r\n    }\r\n\r\n    var exposed = {};\r\n\r\n    exposed.getTemplate = function(widget){\r\n      var deferred = $q.defer();\r\n\r\n      if (widget.template) {\r\n        deferred.resolve(widget.template);\r\n      } else if (widget.templateUrl) {\r\n        // try to fetch template from cache\r\n        var tpl = $templateCache.get(widget.templateUrl);\r\n        if (tpl) {\r\n          deferred.resolve(tpl);\r\n        } else {\r\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\r\n          $http.get(url)\r\n               .success(function(response) {\r\n                 // put response to cache, with unmodified url as key\r\n                 $templateCache.put(widget.templateUrl, response);\r\n                 deferred.resolve(response);\r\n               })\r\n               .error(function() {\r\n                 deferred.reject('could not load template');\r\n               });\r\n        }\r\n      }\r\n\r\n      return deferred.promise;\r\n    };\r\n\r\n    return exposed;\r\n  });\r\n\nangular.module(\"adf\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"../src/templates/dashboard-edit.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h3 class=modal-title translate>ADF.DASHBOARD.TITLE.EDIT.DASHBOARD</h3> </div> <div class=modal-body> <form role=form name=form novalidate> <div class=\\\"form-group col-xs-12 col-md-4\\\"> <label for=dashboardTitle translate>ADF.COMMON.TITLE</label> <input type=text class=\\\"form-control text-primary\\\" id=dashboardTitle ng-model=copy.title required ng-init=\\\"copy.title=(copy.title | translate)\\\"> </div> <div class=\\\"form-group col-xs-12 col-md-8\\\"> <label for=dashboardDescription translate>ADF.DASHBOARD.LABEL.DESCRIPTION</label> <input type=text class=\\\"form-control text-primary\\\" id=dashboardDescription ng-init=\\\"copy.description=(copy.description | translate)\\\" ng-model=copy.description> </div> <div class=\\\"form-group col-xs-12 col-md-12\\\"> <label for=iconConfiguration.model class=text-primary>{{\\'ADF.DASHBOARD.LABEL.ICON\\' | translate }} </label> <div class=\\\"radio radio-primary radio-inline no-margin\\\"> <label id=icon_library> <input type=radio name=iconLibrary ng-model=iconConfiguration.model value=icon> <span class=circle></span> <span class=check></span> {{\\'ICON.LIBRARY\\' | translate }} </label> </div> <div class=\\\"radio radio-primary radio-inline\\\"> <label id=icon_image> <input type=radio name=iconImage ng-model=iconConfiguration.model value=image> <span class=circle></span> <span class=check></span> {{\\'ICON.IMAGE\\' | translate }} </label> </div> <div class=padding-5 ng-if=\\\"iconConfiguration.model === \\'icon\\'\\\"> <ui-select-fa-styles id=icon icon=iconConfiguration.icon required=false allow-clear=false disabled=\\\"iconConfiguration.model !== \\'icon\\'\\\" title=\\\"{{\\'ADF.WIDGET.TITLE.CHOOSE_ICON\\' | translate}}\\\"> </ui-select-fa-styles>  <input type=hidden ng-model=iconConfiguration.icon required=\\\"iconConfiguration.model === \\'icon\\'\\\"> </div> <div class=padding-5 ng-if=\\\"iconConfiguration.model === \\'image\\'\\\"> <div class=col-xs-12 ng-disabled=\\\"iconConfiguration.model !== \\'image\\'\\\"> <div ng-disabled=\\\"iconConfiguration.model !== \\'image\\'\\\" ng-if=!iconConfiguration.url ngf-drop ng-model=iconConfiguration.file ngf-max-size=1MB ngf-select=imageSelected($file) class=\\\"drop-box pointer\\\" ngf-drag-over-class=\\\"\\'dragover\\'\\\" ngf-multiple=false ngf-accept=\\\"\\'image/*\\'\\\" ngf-pattern=\\\"\\'image/*\\'\\\">{{ \\'FORM.DRAG_DROP\\' | translate }}<br>{{ \\'FORM.MAX_SIZE\\' | translate }}</div> <img ng-if=iconConfiguration.url class=navbar-domain src=\\\"{{ iconConfiguration.url }}\\\" data-intro=\\\"{{ \\'HELP.HEADER.DOMAIN_LOGO\\' | translate }}\\\" data-position=fixed> <input ng-if=\\\"iconConfiguration.model === \\'image\\'\\\" type=hidden ng-model=iconConfiguration.url required> </div> <div class=col-xs-12 ng-if=iconConfiguration.url> <button id=idRemoveFileLink ng-click=removeDataFile() class=\\\"btn btn-warning ux-txt-warning btn-group-justified pointer\\\"><i class=\\\"fa fa-trash\\\" aria-hidden=true></i> {{ \\'BUTTON.TITLE.REMOVE\\' | translate }}</button> </div> </div> <input type=hidden ng-model=iconConfiguration.model required> </div> <div class=\\\"form-group col-xs-12 col-md-12\\\"> <label for=dashboardBackground translate>ADF.DASHBOARD.LABEL.BACKGROUND_COLOR</label> <input type=text placeholder=\\\"{{ \\'ADF.WIDGET.PLACEHOLDER.COLOR\\' | translate }}\\\" colorpicker=hex class=\\\"form-control {{stream.identifier}}_color\\\" ng-model=copy.backgroundColor> </div> <div class=\\\"form-group col-xs-12 col-md-6\\\"> <label for=dashboardBackground translate>ADF.DASHBOARD.LABEL.BACKGROUND_IMAGE</label> <div ng-if=!copy.backgroundImage ngf-drop ng-model=copy.file ngf-max-size=1MB ngf-select=backgroundImageSelected($file) class=\\\"drop-box pointer\\\" ngf-drag-over-class=\\\"\\'dragover\\'\\\" ngf-multiple=false ngf-accept=\\\"\\'image/*\\'\\\" ngf-pattern=\\\"\\'image/*\\'\\\">{{ \\'FORM.DRAG_DROP\\' | translate }}<br>{{ \\'FORM.MAX_SIZE\\' | translate }}</div>  <div class=col-xs-12 ng-if=copy.backgroundImage> <button id=idRemoveBackgroundImageFileLink ng-click=removeBackgroundFile() class=\\\"btn btn-warning ux-txt-warning btn-group-justified pointer\\\"><i class=\\\"fa fa-trash\\\" aria-hidden=true></i> {{ \\'BUTTON.TITLE.REMOVE\\' | translate }}</button> </div> </div> <div class=\\\"form-group col-xs-12 col-md-6\\\" ng-if=copy.backgroundImage> <label for=BACKGROUND_SIZE class=text-primary>{{\\'ADF.DASHBOARD.LABEL.BACKGROUND_SIZE\\' | translate }}</label> <wizard-radio info=backgroundSize></wizard-radio> </div> <div class=\\\"form-group col-xs-12 col-md-12\\\"> <b>{{\\'DIALOG.ICON.PREVIEW\\' | translate}}</b> </div> <div class=\\\"form-group col-xs-12 col-md-12 well padding-5 dashboardPanel\\\"> <div gridstack class=grid-stack> <div gridstack-item class=grid-stack-item gs-item-x=0 gs-item-y=0 gs-item-width=5 gs-item-height=2 gs-item-min-width=2 gs-item-min-height=1 gs-item-autopos=0 data-intro=\\\"{{ \\'HELP.WORKSPACES.DASHBOARD\\' | translate }}\\\" data-position=absolute> <div class=\\\"grid-stack-item-content panel well no-padding\\\" style=\\\"background-color: {{copy.backgroundColor}} !important; background-image: url( {{copy.backgroundImage }} ) !important; background-size : {{backgroundSize.model }} !important\\\" title=\\\"{{ copy.title | translate }}\\\"> <div class=\\\"col-xs-12 col-md-12 padding-5\\\"> <h4 class=\\\"text-primary no-margin\\\">{{ copy.title | translate }}</h4> <small ng-if=copy.description>{{ copy.description | translate }}</small> </div> <div class=dashboard-extra-info> <div class=\\\"padding-5 extra-info\\\"> <span><i class=\\\"fa fa-clock-o text-grey\\\"></i> <small am-time-ago=copy.time> {{copy.time}}</small></span> </div> <div class=\\\"padding-5 identity-icon-dashboard\\\"> <i ng-if=\\\"iconConfiguration.model === \\'icon\\'\\\" class=\\\"fa {{ iconConfiguration.icon}}\\\"></i> <img ng-if=\\\"iconConfiguration.model === \\'image\\'\\\" alt src=\\\"{{ iconConfiguration.url }}\\\" data-intro=\\\"{{ \\'HELP.HEADER.DOMAIN_LOGO\\' | translate }}\\\" data-position=fixed> </div> </div> </div> </div> </div> </div> </form> </div> <div class=modal-footer> <div class=col-xs-12> <button type=submit class=\\\"btn btn-primary\\\" ng-click=closeDialog() ng-disabled=form.$invalid translate>ADF.COMMON.CLOSE</button> </div> </div> \");\n$templateCache.put(\"../src/templates/dashboard-grid.html\",\"<div gridstack class=grid-stack options=gridOptions on-drag-start=onDragStart(event,ui) on-drag-stop=onDragStop(event,ui) on-resize-start=onResizeStart(event,ui) on-resize-stop=onResizeStop(event,ui) gridstack-handler=gsHandler on-change=onChange(event,items)> <div gridstack-item ng-repeat=\\\"w in adfModel.grid\\\" class=grid-stack-item gs-item-x=w.x gs-item-y=w.y gs-item-width=w.width gs-item-height=w.height gs-item-min-width=2 gs-item-min-height=2 gs-item-autopos=0> <adf-widget-grid ng-if=\\\"w && w.definition\\\" class=grid-stack-item-content options=options definition=w.definition edit-mode=editMode widget-state=widgetState></adf-widget-grid> </div> </div>\");\n$templateCache.put(\"../src/templates/dashboard-title.html\",\"<div class=row style=padding:0px;> <div class=\\\"col-xs-12 col-md-5\\\" ng-if=!hideButtons> <span ng-if=model.icon id=idDashboardIcon class=\\\"fa fa-2x\\\" ng-class=model.icon></span> <span id=idDashboardTitle class=\\\"fa-2x text-primary\\\">{{model.title | translate}}</span> <span ng-if=model.description id=idDashboardDescription>{{model.description | translate}}</span> </div> <div class=\\\"col-xs-12 col-md-7 text-right\\\" ng-if=!hideButtons> <a href ng-if=editMode title=\\\"{{ \\'ADF.DASHBOARD.TITLE.ADD\\' | translate }}\\\" ng-click=addWidgetDialog() class=\\\"btn btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-plus\\\" aria-hidden=true></i> {{\\'ADF.DASHBOARD.TITLE.ADD\\' | translate}} </a> <a href ng-if=editMode title=\\\"{{ \\'ADF.DASHBOARD.TITLE.CONFIGURATION\\' | translate }}\\\" ng-click=editDashboardDialog() class=\\\"btn btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-cog\\\"></i> {{\\'ADF.DASHBOARD.TITLE.CONFIGURATION\\' | translate}} </a> <a href ng-if=editMode title=\\\"{{ \\'ADF.DASHBOARD.TITLE.UNDO\\' | translate }}\\\" ng-click=cancelEditMode() class=\\\"btn btn-warning btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-close\\\"></i> {{\\'ADF.DASHBOARD.TITLE.UNDO\\' | translate}} </a> <a href ng-if=\\\"options.editable && !editMode && !model.temporal\\\" title=\\\"{{\\'ADF.DASHBOARD.TITLE.EDIT.MODE\\' | translate }}\\\" ng-click=toggleEditMode() class=\\\"btn btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-pencil-square-o\\\"></i> {{\\'ADF.DASHBOARD.TITLE.EDIT.MODE\\' | translate}} </a> <a href ng-if=\\\"options.editable && editMode\\\" title=\\\"{{\\'ADF.DASHBOARD.TITLE.SAVE\\' | translate)}}\\\" ng-click=toggleEditMode() class=\\\"btn btn-success btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-save\\\"></i> {{\\'ADF.DASHBOARD.TITLE.SAVE\\' | translate}} </a> </div> </div>\");\n$templateCache.put(\"../src/templates/dashboard.html\",\"<div class=dashboard-container x-ng-class=\\\"{\\'edit\\' : editMode}\\\"> <div ng-include src=model.titleTemplateUrl></div> <div class=dashboard x-ng-class=\\\"{\\'edit\\' : editMode}\\\" style=\\\"padding: 0px;margin: 0px;\\\"> <adf-dashboard-grid ng-if=model.grid adf-model=model options=options edit-mode=editMode> </adf-dashboard-grid></div> </div>\");\n$templateCache.put(\"../src/templates/widget-add.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title translate>ADF.WIDGET.TITLE.ADD_HEADER</h4> </div> <div class=modal-body>  <div ng-if=createCategories> <uib-accordion ng-init=\\\"categorized = createCategories(widgets)\\\"> <div uib-accordion-group heading=\\\"{{category.name | translate}}\\\" ng-repeat=\\\"category in categorized | adfOrderByObjectKey: \\'name\\'\\\"> <dl class=dl-horizontal> <dt ng-repeat-start=\\\"widget in category.widgets | adfOrderByObjectKey: \\'key\\'\\\"> <a href ng-click=addWidget(widget.key) ng-class={{widget.key}}> {{widget.title | translate}} </a> </dt> <dd ng-repeat-end ng-if=widget.description> {{widget.description | translate}} </dd> </dl> </div> </uib-accordion> </div>  <div ng-if=!createCategories> <div class=row> <div class=\\\"col-md-4 col-xs-12 form-group no-margin\\\"> <select ng-model=widgetFilterCfg.widgetFilter.categoryTags name=widgetsCategoryFilter class=form-control> <option value translate>ADF.WIDGET.LABEL.ALL_WIDGETS</option> <option ng-repeat=\\\"category in availableCategories | orderBy\\\" value={{category}}>{{ category | translate }}</option> </select> </div> <div class=\\\"col-md-4 col-xs-12 form-group no-margin\\\"> <select ng-model=widgetFilterCfg.widgetSorting name=widgetsSorting class=form-control> <option value=priority ng-selected=\\\"widgetFilterCfg.widgetSorting===\\'priority\\' || !widgetFilterCfg.widgetSorting\\\" translate=ADF.WIDGET.TITLE.SORTED_BY translate-values=\\\"{ item : (\\'ADF.WIDGET.LABEL.PRIORITY\\' | translate) }\\\"></option> <option value=name ng-selected=\\\"widgetFilterCfg.widgetSorting===\\'name\\'\\\" translate=ADF.WIDGET.TITLE.SORTED_BY translate-values=\\\"{ item : (\\'ADF.WIDGET.LABEL.NAME\\' | translate) }\\\"></option> <option value=category ng-selected=\\\"widgetFilterCfg.widgetSorting===\\'category\\'\\\" translate=ADF.WIDGET.TITLE.SORTED_BY translate-values=\\\"{ item : (\\'ADF.WIDGET.LABEL.CATEGORY\\' | translate) }\\\"></option> <option value=description ng-selected=\\\"widgetFilterCfg.widgetSorting===\\'description\\'\\\" translate=ADF.WIDGET.TITLE.SORTED_BY translate-values=\\\"{ item : (\\'ADF.WIDGET.LABEL.DESCRIPTION\\' | translate) }\\\"></option> </select> </div> <div class=\\\"col-md-4 col-xs-12 form-group no-margin\\\"> <select ng-model=widgetFilterCfg.widgetSortingDirection name=widgetSortingDirection class=form-control> <option value translate>BUTTON.TITLE.ASCENDING</option> <option value=1 translate>BUTTON.TITLE.DESCENDING</option> </select> </div> </div> <div class=row> <div class=\\\"col-xs-12 form-group no-margin\\\"> <input type=text class=form-control name=widgetsTitleFilter autofocus ng-model=widgetFilterCfg.widgetFilter.title placeholder=\\\"{{ \\'ADF.WIDGET.PLACEHOLDER.TYPE_WIDGET_FILTER\\'| translate }}\\\"> </div> </div> <div ng-repeat=\\\"widget in widgets | adfOrderByObjectKey: \\'key\\' | filter:widgetFilterCfg.widgetFilter:strict | orderBy:widgetFilterCfg.widgetSorting:widgetFilterCfg.widgetSortingDirection track by $index\\\" ng-class=\\\"{ \\'widgetPanelBig\\' : $index ===0 , \\'widgetPanelNormal\\' : $index > 0 }\\\"> <div class=\\\"pointer panel widgetInfoParent {{widget.key}}\\\" ng-click=addWidget(widget.key) title=\\\"{{widget.description | translate}}\\\"> <div class=\\\"widgetInfoImage pointer\\\"> <div ng-if=widget.svg class=widget-icon ng-include=widget.svg></div> <img ng-if=\\\"widget.images && !widget.svg\\\" ng-init=\\\"widget._currImg = widget.images[0]\\\" src=\\\"{{ widget._currImg }}\\\" ng-click=addWidget(widget.key) title=\\\"Click to change (if available)\\\"> <i ng-if=\\\"!widget.images && !widget.svg\\\" class=\\\"widgetInfoIcon fa\\\" ng-class=\\\"widget.icon ? widget.icon: \\'fa-plus-circle\\'\\\" ng-style=\\\"widget.color?{\\'color\\':widget.color}:\\'\\'\\\" aria-hidden=true></i> </div> <div class=widgetInfoContainer id=widgetKey_{{widget.key}} ng-class=\\\"{ \\'bg-contrast\\' : $index ===0, \\'bg-primary\\': $index !== 0}\\\">  <span class=widgetInfoTitle>{{widget.title }}</span><br> <span>({{widget.category}})</span> <span class=widgetInfoDescription>{{widget.description}}</span> </div> </div> </div> </div> </div> <div class=modal-footer style=clear:both;> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() translate>ADF.COMMON.CLOSE</button> </div>\");\n$templateCache.put(\"../src/templates/widget-delete.html\",\"<div class=modal-header> <h4 class=modal-title> <span translate>ADF.COMMON.DELETE</span> {{widget.title | translate}}</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=widgetTitle translate>ADF.WIDGET.LABEL.DELETE_CONFIRM_MESSAGE</label> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() translate>ADF.COMMON.CLOSE</button> <button type=button class=\\\"btn btn-primary\\\" ng-click=deleteDialog() translate>ADF.COMMON.DELETE</button> </div> \");\n$templateCache.put(\"../src/templates/widget-edit.html\",\"<form name=widgetEditForm novalidate role=form ng-submit=saveDialog()> <div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h3 class=modal-title>{{widget.title | translate}}</h3> </div> <div class=modal-body> <div class=row> <div class=col-xs-12> <div class=\\\"alert alert-danger\\\" role=alert ng-show=validationError> <strong translate>ADF.ERROR.APPLY_ERROR</strong> {{validationError | translate}} </div> </div> </div> <div class=row ng-if=widget.show_reload_config> <div class=\\\"col-xs-12 col-md-6\\\"> <div class=form-group> <label for=widgetTitle translate>ADF.COMMON.TITLE</label> <input type=text class=\\\"form-control text-primary\\\" id=widgetTitle ng-init=\\\"definition.title=(definition.title | translate)\\\" ng-model=definition.title placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.TITLE\\' | translate}}\\\"> </div> </div> <div class=\\\"col-xs-12 col-md-6\\\"> <div class=form-group> <label for=widgetReloadPeriod translate>ADF.WIDGET.TOOLTIP.REFRESH</label> <select class=form-control id=widgetReloadPeriod aria-label=\\\"ngSelected demo\\\" ng-model=definition.config.reloadPeriod required ng-init=\\\"definition.config.reloadPeriod ? definition.config.reloadPeriod : (definition.config.reloadPeriod = \\'0\\')\\\"> <option value=0 translate>ADF.WIDGET.OPTIONS.MANUAL</option> <option value=20 translate>ADF.WIDGET.OPTIONS.20_SECONDS</option> <option value=40 translate>ADF.WIDGET.OPTIONS.40_SECONDS</option> <option value=60 translate>ADF.WIDGET.OPTIONS.EVERY_MINUTE</option> </select> </div> </div> </div> <div class=row ng-if=!widget.show_reload_config> <div class=\\\"col-xs-12 col-md-12\\\"> <div class=form-group> <label for=widgetTitle translate>ADF.COMMON.TITLE</label> <input type=text class=\\\"form-control text-primary\\\" id=widgetTitle ng-init=\\\"definition.title=(definition.title | translate)\\\" ng-model=definition.title placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.TITLE\\' | translate}}\\\"> </div> </div> </div> <div ng-if=widget.edit class=row> <div class=col-xs-12> <adf-widget-content model=definition content=widget.edit> </adf-widget-content></div> </div> <div class=row> <div class=col-xs-12> <div class=form-group> <label for=widgetAbout translate>ADF.COMMON.ABOUT</label> <textarea class=\\\"form-control text-primary\\\" id=widgetAbout ng-model=definition.config.about placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.ENTER.DESCRIPTION\\'|translate}}\\\"></textarea> </div> </div> </div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() translate>ADF.WIDGET.BUTTON.CANCEL</button> <button type=submit class=\\\"btn btn-primary\\\" ng-disabled=widgetEditForm.$invalid value=\\\"{{\\'ADF.WIDGET.BUTTON.APPLY\\' | translate }}\\\" translate>ADF.WIDGET.BUTTON.APPLY</button> </div> </form>\");\n$templateCache.put(\"../src/templates/widget-fullscreen-selection.html\",\"<div class=modal-header> <div class=\\\"pull-right widget-icons\\\"> <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.CLOSE\\' |translate }}\\\" ng-click=closeDialog() class=\\\"btn btn-xs btn-danger oux-button-margin\\\"> <i class=\\\"glyphicon glyphicon-remove\\\"></i> {{ \\'ADF.WIDGET.TOOLTIP.CLOSE\\' |translate }} </a> </div> <h4 class=\\\"modal-title pull-left\\\" translate>&nbsp;{{ definition.title | translate}}</h4> </div> <div class=\\\"modal-body widget\\\" style=overflow:hidden;> <adf-widget-grid definition=definition edit-mode=false widget-state=widgetState></adf-widget-grid> </div> \");\n$templateCache.put(\"../src/templates/widget-fullscreen.html\",\"<div class=modal-header> <div class=\\\"pull-right widget-icons\\\"> <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.CLOSE\\' |translate }}\\\" ng-click=closeDialog() class=\\\"btn btn-xs btn-danger oux-button-margin\\\"> <i class=\\\"glyphicon glyphicon-remove\\\"></i> {{ \\'ADF.WIDGET.TOOLTIP.CLOSE\\' |translate }} </a> <a permission permission-only=\\\"\\'manageWorkspace\\'\\\" href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.INSERT\\' |translate }}\\\" ng-if=persistDashboard ng-click=persistDashboard() class=\\\"btn btn-xs btn-primary oux-button-margin\\\"> <i class=\\\"glyphicon glyphicon-save\\\"></i> {{ \\'ADF.WIDGET.TOOLTIP.INSERT\\' |translate }} </a> </div> <h4 class=\\\"modal-title pull-left\\\" translate>&nbsp;{{ definition.title | translate}}</h4> </div> <div class=\\\"modal-body widget\\\" style=overflow:hidden;>  <adf-widget-grid definition=definition edit-mode=false widget-state=widgetState></adf-widget-grid> </div> <div class=modal-footer ng-if=widget.show_modal_footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() translate>ADF.COMMON.CLOSE</button> </div>\");\n$templateCache.put(\"../src/templates/widget-grid-title.html\",\"<div class=panel-title style=margin:0px;> <div class=\\\"pull-right container-actions bg-primary\\\" data-intro=\\\"Widget actions\\\" data-position=bottom> <span ng-if=config.about> <a href uib-popover=\\\"{{ config.about }}\\\" popover-trigger=\\\"\\'mouseenter\\'\\\" popover-placement=top ng-click=openAboutScreen()> <i class=\\\"glyphicon glyphicon-info-sign\\\"></i> </a> <script type=text/ng-template id=widgetAboutModal.html> <div class=\\\"modal-header\\\"> <h4 class=\\\"modal-title\\\" translate>ADF.COMMON.ABOUT</h4> </div> <div class=\\\"modal-body\\\">{{ about.info }}</div> <div class=\\\"modal-footer\\\"> <button class=\\\"btn btn-primary\\\" type=\\\"button\\\" ng-click=\\\"ok()\\\" translate>ADF.WIDGET.BUTTON.OK</button> </div> </script> </span> <a ng-if=\\\"!editMode && widget.print\\\" href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.PRINT\\' | translate }}\\\" ng-click=print()> <i class=\\\"glyphicon glyphicon-print\\\"></i> </a> <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.REFRESH\\' | translate }}\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a>  <a permission permission-only=\\\"\\'viewFilter\\'\\\" href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.FILTER\\' | translate }}\\\" ng-if=\\\"config.widgetSelectors && !editMode\\\" ng-click=\\\"filter.showFilter = !filter.showFilter\\\"> <i class=\\\"glyphicon glyphicon-filter\\\" ng-class=\\\"{\\'active\\': search.json || search.oql|| search.quick}\\\"></i> </a>  <a permission permission-only=\\\"\\'viewFilter\\'\\\" href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.SORT\\' | translate }}\\\" ng-if=\\\"config.sort && !editMode\\\" ng-click=\\\"filter.showFilter = !filter.showFilter\\\"> <i class=\\\"glyphicon glyphicon-sort\\\" ng-class=\\\"{\\'active\\': (config.sort.value && config.sort.value !== \\'\\')}\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.EDIT\\' | translate }}\\\" ng-click=edit() ng-if=editMode> <i class=\\\"glyphicon glyphicon-cog\\\"></i> </a> <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.FULLSCREEN\\' | translate }}\\\" ng-click=openFullScreen() ng-show=\\\"options.maximizable && !widget.notMaximizable\\\"> <i class=\\\"glyphicon glyphicon-fullscreen\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.REMOVE\\' | translate}}\\\" ng-click=remove() ng-if=editMode> <i class=\\\"glyphicon glyphicon-trash\\\"></i> </a> <div ng-if=!editMode class=pointer style=\\\"display: inline;\\\" uib-dropdown uib-dropdown-toggle> <i class=\\\"fa fa-ellipsis-h\\\" style=font-size:1.2em;></i> <ul uib-dropdown-menu class=dropdown-menu-right> <li role=menuitem> <a class=pointer href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.PICTURE\\' | translate}}\\\" ng-click=saveWidgetScreen(definition.wid)> <span class=\\\"glyphicon glyphicon-picture\\\"></span> {{ \\'ADF.WIDGET.TOOLTIP.PICTURE\\' | translate}} </a> </li> <li role=menuitem ng-if=widget.qr> <a class=pointer href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.QR\\' | translate }}\\\" ng-click=generateQR()> <span class=\\\"fa fa-qrcode\\\" style=\\\"font-size: 1.1em;\\\"></span> {{ \\'ADF.WIDGET.TOOLTIP.QR\\' | translate }} </a> </li> <li ng-if=widget.csv permission permission-only=\\\"\\'download\\'\\\" role=menuitem> <a class=pointer href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.CSV\\' | translate }}\\\" ng-click=downloadCsv()> <span class=\\\"glyphicon glyphicon-file\\\"></span> {{ \\'ADF.WIDGET.TOOLTIP.CSV\\' | translate }} </a> </li> <li role=menuitem permission permission-only=\\\"\\'executeOperation\\'\\\" ng-if=\\\"widget.executeOperation && isExecuteOperationEnabled()\\\"> <a class=pointer href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.OPERATION\\' | translate }}\\\" ng-click=executeOperation()> <span class=\\\"glyphicon glyphicon-flash\\\"></span> {{ \\'ADF.WIDGET.TOOLTIP.OPERATION\\' | translate }} </a> </li> <li role=menuitem ng-if=\\\"widgetActionsHandler && widgetActionsHandler.actions && widgetActionsHandler.actions.length > 0\\\" ng-repeat=\\\"customAction in widgetActionsHandler.actions\\\" permission permission-only=customAction.permissions> <a class=pointer title={{customAction.title}} ng-click=customAction.action(choice.value)> <span class=\\\"pointer {{customAction.icon}}\\\"></span> {{customAction.title}} </a> </li> </ul> </div> </div> <span class=pull-left>  <h4 ng-if=\\\"!widget.frameless && definition.title\\\" style=\\\"margin:4px 0px 0px 2px;float:left;\\\" translate class=text-primary>{{definition.title | translate}}</h4> </span> <div class=pull-right ng-if=\\\"navOptionsHandler.prevPage && navOptionsHandler.nextPage && navOptionsHandler.hasPrevPage && navOptionsHandler.hasNextPage && ( !navOptionsHandler.isPaginationEnable || navOptionsHandler.isPaginationEnable() ) && ( !navOptionsHandler.isNoContent || !navOptionsHandler.isNoContent() )\\\" style=margin-top:1px> <button class=\\\"btn btn-primary btn-sm pointer\\\" ng-click=navOptionsHandler.prevPage() ng-disabled=!navOptionsHandler.hasPrevPage()> <i class=\\\"glyphicon glyphicon-chevron-left browser-link\\\"></i>{{ \\'BUTTON.TITLE.PREVIOUS\\' | translate }} </button> <button class=\\\"btn btn-primary btn-sm pointer\\\" ng-click=navOptionsHandler.nextPage() ng-disabled=!navOptionsHandler.hasNextPage()> {{ \\'BUTTON.TITLE.NEXT\\' | translate }} <i class=\\\"glyphicon glyphicon-chevron-right browser-link\\\"></i> </button> </div> <div permission permission-only=\\\"[\\'viewFilter\\',\\'executeOperation\\']\\\" class=pull-right ng-if=\\\"selectedItemsLength > 0\\\" style=margin-top:1px> <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.SELECTION\\' | translate }}\\\" ng-click=manageSelectedItems() class=\\\"btn btn-primary btn-sm pointer\\\"> <i class=\\\"glyphicon glyphicon-check\\\"></i> <small class=ogux-budget>{{ selectedItemsLength }}</small> </a> </div> </div> <script type=text/ng-template id=actionsMenuTpl.html> <ul class=\\\"dropdown-menu\\\" uib-dropdown-menu role=\\\"menu\\\"> <li> <a class=\\\"pointer\\\" href=\\\"\\\" title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.PICTURE\\' | translate}}\\\" ng-click=\\\"saveWidgetScreen(definition.wid)\\\"> <span class=\\\"glyphicon glyphicon-picture\\\"></span> {{ \\'ADF.WIDGET.TOOLTIP.PICTURE\\' | translate}} </a> </li> <li ng-if=\\\"widget.qr\\\"> <a class=\\\"pointer\\\" href=\\\"\\\" title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.QR\\' | translate }}\\\" ng-click=\\\"generateQR()\\\"> <span class=\\\"fa fa-qrcode\\\" style=\\\"font-size: 1.1em;\\\"></span> {{ \\'ADF.WIDGET.TOOLTIP.QR\\' | translate }} </a> </li> <li ng-if=\\\"widget.csv\\\" permission permission-only=\\\" \\'download\\' \\\"> <a class=\\\"pointer\\\" href=\\\"\\\" title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.CSV\\' | translate }}\\\" ng-click=\\\"downloadCsv()\\\"> <span class=\\\"glyphicon glyphicon-file\\\"></span> {{ \\'ADF.WIDGET.TOOLTIP.CSV\\' | translate }} </a> </li> <li permission permission-only=\\\" \\'executeOperation\\' \\\" ng-if=\\\"widget.executeOperation && isExecuteOperationEnabled()\\\"> <a class=\\\"pointer\\\" href=\\\"\\\" title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.OPERATION\\' | translate }}\\\" ng-click=\\\"executeOperation()\\\"> <span class=\\\"glyphicon glyphicon-flash\\\"></span> {{ \\'ADF.WIDGET.TOOLTIP.OPERATION\\' | translate }} </a> </li> <li ng-if=\\\"widgetActionsHandler && widgetActionsHandler.actions && widgetActionsHandler.actions.length > 0\\\" ng-repeat=\\\"customAction in widgetActionsHandler.actions\\\" permission permission-only=\\\"customAction.permissions\\\"> <a class=\\\"pointer\\\" title=\\\"{{customAction.title}}\\\" ng-click=\\\"customAction.action(choice.value)\\\"> <span class=\\\"pointer {{customAction.icon}}\\\"></span> {{customAction.title}} </a> </li> </ul> </script>\");\n$templateCache.put(\"../src/templates/widget-grid.html\",\"<div adf-id={{definition.wid}} adf-widget-type={{definition.type}} ng-class=\\\"{\\'widget-move-mode\\': editMode}\\\" class=\\\"panel panel-default widget widget_{{definition.wid}}\\\"> <a name={{definition.wid}} id={{definition.wid}}></a> <div class=\\\"panel-heading clearfix\\\" ng-if=\\\"!widget.frameless || editMode\\\"> <div ng-include src=definition.titleTemplateUrl></div> </div> <div ng-class=\\\"{ \\'panel-body\\':!widget.frameless || editMode, \\'widget-blur-loading\\': (navOptionsHandler && navOptionsHandler.firstLoad && navOptionsHandler.loadingData) }\\\" uib-collapse=widgetState.isCollapsed> <div ng-if=\\\"!widgetState.isCollapsed && config.widgetSelectors && !editMode && filter.showFilter\\\" class=\\\"row form-group\\\" style=\\\"margin-top: 5px !important;\\\"> <div ng-if=\\\"filter.typeFilter === 0\\\" class=\\\"col-xs-12 col-md-8\\\"> <div class=filter mass-autocomplete> <input class=form-control style=padding-right:15px; name=filterValue ng-keydown=enter($event) ng-model=search.oql placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.ENTER.FILTER.ADVANCED\\' | translate }}\\\" mass-autocomplete-item=autocomplete_options() ng-change=debugQuery()> <label ng-click=launchSearchingAdv() style=\\\"position: absolute;font-size: 1.5em;cursor:pointer;right: 15px;\\\" class=glyphicon ng-class=\\\"{ \\'glyphicon-search\\' : !filterApplied, \\'glyphicon-ok\\': filterApplied}\\\"></label> </div> <div ng-if=\\\"!editMode && filter_error\\\" class=col-xs-12> <alert type=danger class=\\\"text-center text-danger\\\"> <span>{{filter_error}}</span> </alert> </div> <div ng-if=\\\"filter.showFinalFilter && search.json\\\" class=col-xs-12> <pre>{{ search.json }}</pre> </div> </div> <div ng-if=\\\"filter.typeFilter === 1\\\" class=\\\"col-xs-12 col-md-8\\\"> <div class=filter> <input class=form-control style=padding-right:15px; name=filterValue ng-keydown=enter($event) ng-blur=launchSearchingQuick() ng-model=search.quick placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.ENTER.FILTER.BASIC\\' | translate}}\\\"> <label ng-click=launchSearchingQuick() style=\\\"position: absolute;font-size: 1.5em;cursor:pointer;right: 15px;\\\" class=glyphicon ng-class=\\\"{ \\'glyphicon-search\\' : !filterApplied, \\'glyphicon-ok\\': filterApplied}\\\"></label> </div> </div> <div ng-if=\\\"filter.typeFilter === 2\\\" class=\\\"col-xs-12 col-md-8\\\"> <div class=filter> <ui-select id=sharedFilter ng-model=search.id theme=bootstrap title=\\\"{{ \\'FORM.TITLE.SHARED_FILTER\\' | translate }}\\\" on-select=\\\"filterSharedSelect($item, $model)\\\" on-remove=\\\"filterSharedRemove($item, $model)\\\"> <ui-select-match placeholder=\\\"{{ \\'FORM.PLACEHOLDER.SHARED_FILTER\\' | translate }}\\\" allow-clear=true>{{$select.selected.title | translate }} </ui-select-match> <ui-select-choices repeat=\\\"sharedFilter in sharedFilters | filter: $select.search\\\"> <div> <span ng-bind-html=\\\"sharedFilter.title | highlight: $select.search | translate\\\"> </span></div> <small> <div ng-if=\\\"sharedFilter.filter.type === \\'advanced\\'\\\">{{ \\'FORM.LABEL.ADVANCED\\' | translate }} <span ng-bind-html=\\\"\\'\\'+sharedFilter.filter.oql | highlight: $select.search\\\"></span> </div> <div ng-if=\\\"sharedFilter.filter.type === \\'basic\\'\\\">{{ \\'FORM.LABEL.BASIC\\' | translate }} <span ng-bind-html=\\\"\\'\\'+sharedFilter.filter.value | highlight: $select.search\\\"></span> </div> </small> </ui-select-choices> </ui-select> </div> </div> <div class=\\\"col-xs-12 col-md-4\\\" uib-dropdown> <button class=\\\"btn btn-sm\\\" uib-dropdown-toggle title=\\\"{{\\'ADF.WIDGET.TITLE.TOGGLE_AVANCED_BASIC_FILTER\\' | translate }}\\\"> <i class=\\\"advanced-filter glyphicon\\\" ng-class=\\\"{\\'glyphicon-font\\' : filter.typeFilter === 0, \\'glyphicon-bold\\' : filter.typeFilter ===1, \\'glyphicon-share\\' : filter.typeFilter ===2,}\\\"></i> <span class=caret></span> </button> <ul class=\\\"dropdown-menu panel\\\" style=\\\"border: 1px groove;\\\" uib-dropdown-menu aria-labelledby=simple-dropdown> <li ng-click=\\\"filter.typeFilter = 0\\\"> <a href> <i class=\\\"advanced-filter glyphicon glyphicon-font txt-primary\\\"></i> {{\\'ADF.WIDGET.TITLE.FILTER.ADVANCED\\' | translate}}</a> </li> <li ng-click=\\\"filter.typeFilter = 1\\\"> <a href> <i class=\\\"basic-filter glyphicon glyphicon-bold txt-primary\\\"></i> {{\\'ADF.WIDGET.TITLE.FILTER.BASIC\\' | translate}}</a> </li> <li ng-click=\\\"filter.typeFilter = 2\\\"> <a href> <i class=\\\"basic-filter glyphicon glyphicon-share txt-primary\\\"></i> {{\\'ADF.WIDGET.TITLE.FILTER.SHARED\\' | translate}}</a> </li> </ul> </div> </div> <div ng-if=\\\"customSelectors && config.sort && filter.showFilter\\\" class=\\\"row form-group\\\" style=\\\"margin-top: 5px !important;\\\"> <div class=\\\"sort col-xs-12 col-md-8\\\"> <ui-select ng-model=config.sort.value theme=bootstrap title=\\\"{{\\'ADF.WIDGET.TITLE.CHOOSE_ORDER\\' | translate}}\\\" allow-clear=true append-to-body=true ng-change=launchSearching() ng-click=getCustomSelectors()> <ui-select-match placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.SHORTED_BY\\' | translate}}\\\" allow-clear=true>{{ \\'ADF.WIDGET.TITLE.SORTED_BY\\' | translate:{item: $select.selected} }}</ui-select-match> <ui-select-choices repeat=\\\"selector in customSelectors | filter: $select.search track by $index\\\"> <small> <span ng-bind-html=\\\"selector | highlight: $select.search\\\"></span> </small> </ui-select-choices> </ui-select> </div> <div class=\\\"sortDirection col-xs-4 col-md-4\\\"> <button class=\\\"btn btn-sm pointer\\\" ng-click=changeDirection() ng-disabled=\\\"config.sort.value === \\'\\'\\\" title=\\\"{{\\'ADF.WIDGET.TITLE.TOGGLE_SORTING_DIRECTION\\' | translate}}\\\"> <i class=glyphicon style=font-size:1.3em; ng-class=\\\"config.sort.direction===\\'ASCENDING\\' ? \\'glyphicon-sort-by-attributes\\': \\'glyphicon-sort-by-attributes-alt\\'\\\"></i> </button> </div> </div> <adf-widget-content ng-if=definition model=definition content=widget extra=options.extraData nav-options-handler=navOptionsHandler filter-handler=filterHandler widget-actions-handler=widgetActionsHandler> </adf-widget-content></div> <div class=loaderContainer ng-if=\\\"navOptionsHandler && navOptionsHandler.firstLoad && navOptionsHandler.loadingData\\\"> <img class=loaderImage src={{widget.images[0]}}> </div> <div class=row ng-if=\\\"config.showSaveButton && sendEntities\\\"> <div class=col-xs-12> <button type=button class=\\\"btn btn-xs btn-primary pull-right oux-button-margin\\\" ng-click=sendEntities() translate>ADF.COMMON.SAVE</button> </div> </div> <div class=\\\"panel-footer row no-padding no-margin\\\"> <div class=\\\"col-xs-7 text-left\\\"> <span ng-if=\\\"navOptionsHandler && navOptionsHandler.statusMessage && !navOptionsHandler.loadingData && !navOptionsHandler.firstLoad\\\">{{navOptionsHandler.statusMessage | translate}}</span> </div> <div class=\\\"col-xs-5 spinner-container\\\" ng-if=\\\"navOptionsHandler && navOptionsHandler.loadingData && !navOptionsHandler.firstLoad\\\"> <div class=\\\"spinner pull-right\\\"></div> </div> <div class=\\\"col-xs-5 text-right no-padding no-margin\\\" ng-if=\\\"navOptionsHandler && navOptionsHandler.lastMessageTime && !navOptionsHandler.loadingData && !navOptionsHandler.firstLoad\\\"> <small class=label am-time-ago=navOptionsHandler.lastMessageTime></small> </div> </div> </div>\");\n$templateCache.put(\"../src/templates/widget-selection.html\",\"<style>\\r\\n    .selected-entities-control .ui-select-container>div:first-child {\\r\\n        max-height: 300px;\\r\\n        overflow-y: scroll;\\r\\n        overflow-x: hidden;\\r\\n    }\\r\\n\\r\\n</style> <form name=widgetSelectionForm novalidate role=form ng-submit=saveChangesDialog()> <div class=modal-header> <div class=\\\"col-xs-12 col-md-12\\\"> <h3 class=\\\"modal-title text-left\\\"> <i class=\\\"fa fa-check-square-o\\\" aria-hidden=true></i> {{\\'ADF.WIDGET.TITLE.SELECTED_ITEMS\\' | translate}}</h3> </div> </div> <div class=modal-body> <div class=col-xs-12> <div class=\\\"form-group selected-entities-control\\\"> <label for=currentSelection translate>ADF.WIDGET.LABEL.CURRENT_SELECTION</label> <ui-select multiple tagging ng-model=currentSelection.selected theme=bootstrap sortable=false title=\\\"{{\\'ADF.WIDGET.TITLE.SELECTED_ITEMS\\' | translate}}\\\"> <ui-select-match placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.NO_SELECTED\\' | translate}}\\\"> <div class=text-left style=\\\"margin-right: 15px;font-size: 0.9em;max-width:350px;\\\" ng-if=$item.value.visible> <span style=\\\"white-space: initial;word-break: break-word;\\\" ng-repeat=\\\"(k,v) in $item.value.visible track by $index\\\" ng-if=\\\"v !== undefined\\\"> <strong>{{k | translate}}:</strong> {{v}} <br> </span> </div> <div class=text-left style=\\\"margin-right: 15px;font-size: 0.9em;max-width:350px;\\\" ng-if=!$item.value.visible> <span style=\\\"white-space: initial;word-break: break-word;\\\">{{$item.key}}</span> </div> </ui-select-match> <ui-select-choices repeat=\\\"itemSel in currentSelection.selected | filter:$select.search\\\"> {{itemSel.key}} </ui-select-choices> </ui-select> </div> </div> <div class=\\\"col-xs-12 text-left\\\"> <button type=button class=\\\"btn btn-success btn-sm\\\" ng-click=restoreSelection() ng-disabled=\\\"currentSelection.selected.length === selectedItemsLength\\\" translate>ADF.WIDGET.BUTTON.RESTORE</button> <button type=button class=\\\"btn btn-danger btn-sm\\\" ng-click=clearSelection() ng-disabled=\\\"currentSelection.selected.length < 1\\\" translate>ADF.WIDGET.BUTTON.CLEAR</button> </div> </div> <div class=modal-footer> <div permission permission-only=\\\"\\'viewFilter\\'\\\" class=\\\"col-xs-12 col-md-2 text-left\\\"> <div uib-dropdown ng-if=\\\"selectionConfig && selectionConfig.filterTypes && currentSelection.selected.length > 0\\\"> <button id=applyFilterBy type=button class=\\\"btn btn-primary\\\" uib-dropdown-toggle> <i class=\\\"glyphicon glyphicon-filter pointer\\\"></i> {{\\'ADF.WIDGET.BUTTON.FILTER_BY\\' | translate}} <span class=caret></span> </button> <ul class=dropdown-menu uib-dropdown-menu role=menu aria-labelledby=applyFilterBy> <li role=menuitem ng-repeat=\\\"filterType in selectionConfig.filterTypes\\\"> <a href ng-click=applyFilter(filterType) title=\\\"{{\\'ADF.WIDGET.BUTTON.SELECTED\\' | translate:{filterType: filterType} }}\\\">{{\\'ADF.WIDGET.BUTTON.SELECTED\\' | translate:{filterType: filterType} }}</a> </li> </ul> </div> </div> <div permission permission-only=\\\"\\'executeOperation\\'\\\" class=\\\"col-xs-12 col-md-3 text-left\\\"> <div uib-dropdown ng-if=\\\"selectionConfig && selectionConfig.operationTypes && currentSelection.selected.length > 0\\\"> <button id=executeOperation type=button class=\\\"btn btn-primary\\\" uib-dropdown-toggle> <i class=\\\"glyphicon glyphicon-flash pointer\\\"></i> {{\\'ADF.WIDGET.BUTTON.EXECUTE_OPERATION\\' | translate}} <span class=caret></span> </button> <ul class=dropdown-menu uib-dropdown-menu role=menu aria-labelledby=executeOperation> <li role=menuitem ng-repeat=\\\"operationType in selectionConfig.operationTypes\\\"> <a href ng-click=executeOperation(operationType) title={{operationType|translate}}>{{operationType|translate}}</a> </li> </ul> </div> </div> <div class=\\\"col-xs-12 col-md-7 text-right\\\"> <button type=submit class=\\\"btn btn-primary\\\" ng-disabled=\\\"currentSelection.selected.length === selectedItemsLength\\\" translate value=\\\"{{\\'ADF.WIDGET.BUTTON.APPLY\\' | translate }}\\\">ADF.WIDGET.BUTTON.APPLY</button> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() translate>ADF.COMMON.CLOSE</button> </div> </div> </form> \");}]);\n})(window);"]}