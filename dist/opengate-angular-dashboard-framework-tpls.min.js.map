{"version":3,"sources":["adf.js","column.js","dashboard.js","grid.js","order-by-object-key.js","provider.js","widget-content.js","widget-grid.js","widget-service.js","widget.js","opengate-angular-dashboard-framework.tpl.js","opengate-angular-dashboard-framework-tpls.js"],"names":["window","undefined","angular","module","value","directive","$log","$compile","$rootScope","adfTemplatePath","dashboard","restrict","replace","scope","column","editMode","continuousEditMode","adfModel","options","templateUrl","link","$scope","$element","col","cid","id","$timeout","$uibModal","$faIcons","$translate","stringToBoolean","string","isDefined","toLowerCase","Boolean","createConfiguration","type","cfg","config","widgets","copy","createWidget","wdgt","widget","addNewWidgetToModel","model","name","forceToSave","grid","newWidget","width","height","x","y","definition","push","$broadcast","error","isEditModeImmediate","edit","immediate","openEditMode","createCategories","categories","forEach","key","category","title","instant","description","isUndefined","createCategoriesList","categoryTags","categoriesTmp","split","idx","translatedCat","indexOf","transclude","collapsible","editable","maximizable","adfWidgetFilter","hideButtons","extraData","controller","getNewModalScope","$new","widgetFilter","$watch","oldVal","newVal","titleTemplateUrl","editClass","deleteDashboard","dashData","toggleEditMode","openConfigWindow","modelCopy","editDashboardDialog","saveTemporalDashboard","temporal","adfToggleEditMode","$on","event","isNewDashboard","adfCancelEditMode","cancelEditMode","adfWidgetRemoved","index","widgetTmp","wid","splice","collapseAll","collapseExpandStatus","adfEditDashboardDialog","adfLaunchSearchingFromWidget","configFilter","adfWindowTimeChangedFromWidget","windowFilter","editDashboardScope","icon","availableIcons","list","adfEditTemplatePath","editTemplateUrl","instance","open","backdrop","keyboard","size","closeDialog","close","$destroy","adfOpenWidgetFromOther","internal_config","_config","merge","w","adfOpenModalWidgetFromOther","widgetType","fullScreenScope","opts","modalSize","windowClass","persistDashboard","this","$parent","adfAddWidgetDialog","addWidgetDialog","addScopeCfg","widgetSortingDirection","widgetSorting","addScope","isFunction","availableCategories","adfAddTemplatePath","addTemplateUrl","widgetFilterCfg","addWidget","changeThumbnail","images","_currThumb","length","_currImg","$attr","enableConfirmDelete","editing","preLink","gridOptions","cellHeight","verticalMargin","animate","float","alwaysShowResizeHandle","minWidth","auto","resizable","handles","disableDrag","disableResize","gsHandler","compile","pre","dashEvents","enable","disable","GridStackUI","Utils","sort","onChange","items","console","log","onDragStart","ui","onDragStop","onResizeStart","onResizeStop","onItemAdded","item","onItemRemoved","dashEvt","filter","$filter","array","objectKey","provider","widgetsPath","messageTemplate","loadingTemplate","customWidgetTemplatePath","defaultApplyFunction","extend","reload","frameless","apply","path","template","templatePath","$get","Date","getTime","idEquals","other","toString","$q","widgetService","$controller","$injector","renderError","msg","warn","html","compileWidget","currentScope","configChanged","_getWindowTime","from","newScope","to","moment","subtract","_d","content","extra","is_menu","menu","isPaginationEnable","is_itemsPerPage","itemsPerPage","reloadData","navOptionsHandler","firstLoad","renderWidget","page","then","translateMessage","getWindowTime","winTime","eval","rawdate","format","templateScope","selectionManager","base","resolvers","$tpl","getTemplate","resolve","promise","isString","get","invoke","all","locals","resolveAs","templateCtrl","controllerAs","children","data","contents","reason","filterHandler","widgetActionsHandler","widgetConfigChangedEvt","widgetReloadEvt","$interval","Filter","styleClass","fromJson","show_modal_footer","show_reload_config","widgetState","isCollapsed","collapsed","debug","postLink","deleteWidget","remove","deleteScope","deleteTemplateUrl","deleteDialog","print","isExecuteOperationEnabled","entityKey","oql","executeOperation","direction","toggleAdvanced","search","json","quick","fields","customFilter","v","toggleFilter","advanced","filterAvailable","showFilter","showFinalFilter","launchSearching","element","addCustomFilter","launchCustomFilter","and","like","JSON","stringify","deleteFilter","launchSearchingAdv","filterApplied","Object","keys","applyFilter","launchSearchingQuick","timeObj","enter","keycode","keyCode","which","customSelectors","getCustomSelectors","widgetSelectors","findFields","$apply","err","getcustomFilter","ifCustomFilter","showCustomFields","changeDirection","changeDefaultTab","debugQuery","parseQuery","toJson","unknownWords","autocomplete_options","suggest","suggest_field_delimited","selectedItems","currentSelection","isSelected","obj","totalSelected","manageSelectedItems","selectionScope","selectionConfig","selected","manageItemsSelectedTemplate","animation","restoreSelection","clearSelection","customOql","filterAction","operationType","saveChangesDialog","finalSelection","visible","selectedItemsLength","lastItem","createApplyPromise","result","deferred","defer","reject","when","editScope","saveDialog","validationError","applyFn","setReloadTimeout","loadingData","startLoading","stopLoading","lastMessageTime","setStatusMessage","message","statusMessage","changeFilter","actions","setActions","showActionsMenu","toggleActionsMenu","adfDashboardCollapseExpand","args","adfWidgetEnterEditMode","adfIsEditMode","adfDashboardChanged","adfDashboardEditsCancelled","widgetClasses","classes","openFullScreen","$emit","openFilter","openAboutScreen","modalInstance","$uibModalInstance","information","about","info","ok","selectedItem","saveWidgetScreen","wId","objectSelector","fileName","createQuickFilter","fieldsQuickSearch","criteria","_filter","or","field","operator","downloadCsv","extra_filter","columns","scope_filter","final_filter","order","window_filter","onWindowTimeChanged","parse","trim","generateQR","stopReloadTimeout","addItemToSelection","removeItemFromSelection","reloadPeriod","isNaN","cancel","completeReload","post","factory","$http","$sce","$templateCache","parseUrl","url","parsedUrl","substring","exposed","tpl","getTrustedResourceUrl","success","response","put","run"],"mappings":"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","file":"opengate-angular-dashboard-framework-tpls.min.js","sourcesContent":["/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf', ['adf.provider', 'ui.bootstrap', 'opengate-angular-js'])\n    .value('adfTemplatePath', '../src/templates/')\n    .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\n    .value('adfVersion', '<<adfVersion>>');","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/* global angular */\nangular.module('adf')\n    .directive('adfDashboardColumn', function($log, $compile, $rootScope, adfTemplatePath, dashboard) {\n        'use strict';\n\n        return {\n            restrict: 'E',\n            replace: true,\n            scope: {\n                column: '=',\n                editMode: '=',\n                continuousEditMode: '=',\n                adfModel: '=',\n                options: '='\n            },\n            templateUrl: adfTemplatePath + 'dashboard-column.html',\n            link: function($scope, $element) {\n                // set id\n                var col = $scope.column;\n                if (!col.cid) {\n                    col.cid = dashboard.id();\n                }\n            }\n        };\n    });","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @ngdoc directive\n * @name adf.directive:adfDashboard\n * @element div\n * @restrict EA\n * @scope\n * @description\n *\n * `adfDashboard` is a directive which renders the dashboard with all its\n * components. The directive requires a name attribute. The name of the\n * dashboard can be used to store the model.\n *\n * @param {string} name name of the dashboard. This attribute is required.\n * @param {boolean=} editable false to disable the editmode of the dashboard.\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\n * @param {object=} adfModel model object of the dashboard.\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\n *                   events during edit mode not reset it if edit mode is exited.\n * @param {boolean=} categories enable categories for the add widget dialog.\n */\n\nangular.module('adf')\n    .directive('adfDashboard', function($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath, $faIcons, $translate) {\n        'use strict';\n\n        function stringToBoolean(string) {\n            switch (angular.isDefined(string) ? string.toLowerCase() : null) {\n                case 'true':\n                case 'yes':\n                case '1':\n                    return true;\n                case 'false':\n                case 'no':\n                case '0':\n                case null:\n                    return false;\n                default:\n                    return Boolean(string);\n            }\n        }\n\n        function copyWidgets(source, target) {\n            if (source.widgets && source.widgets.length > 0) {\n                var w = source.widgets.shift();\n                while (w) {\n                    target.widgets.push(w);\n                    w = source.widgets.shift();\n                }\n            }\n        }\n\n        function createConfiguration(type) {\n            var cfg = {};\n            var config = dashboard.widgets[type].config;\n            if (config) {\n                cfg = angular.copy(config);\n            }\n            return cfg;\n        }\n\n        function createWidget(type) {\n            var wdgt = {};\n            var widget = dashboard.widgets[type];\n            if (widget) {\n                wdgt = angular.copy(widget);\n            }\n            return wdgt;\n        }\n\n        /**\n         * Adds the widget to first column of the model.\n         *\n         * @param dashboard model\n         * @param widget to add to model\n         * @param name name of the dashboard\n         */\n        function addNewWidgetToModel(model, widget, name, forceToSave) {\n            if (model) {\n                if (!model.grid) {\n                    model.grid = [];\n                }\n\n                var newWidget = {\n                    width: 3,\n                    height: 2,\n                    x: 0,\n                    y: 0,\n                    definition: widget\n                };\n                model.grid.push(newWidget);\n\n                $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\n\n                if (forceToSave) {\n                    $rootScope.$broadcast('adfDashboardChanged', name, model);\n                }\n            } else {\n                $log.error('model is undefined');\n            }\n        }\n\n        /**\n         * Checks if the edit mode of the widget should be opened immediately.\n         *\n         * @param widget type\n         */\n        function isEditModeImmediate(type) {\n            var widget = dashboard.widgets[type];\n            return widget && widget.edit && widget.edit.immediate;\n        }\n\n        /**\n         * Opens the edit mode of the specified widget.\n         *\n         * @param dashboard scope\n         * @param widget\n         */\n        function openEditMode($scope, widget) {\n            // wait some time before fire enter edit mode event\n            $timeout(function() {\n                $scope.$broadcast('adfWidgetEnterEditMode', widget);\n            }, 200);\n        }\n\n        /**\n         * Splits an object into an array multiple objects inside.\n         *\n         * @param object source object\n         * @param size size of array\n         *\n         * @return array of splitted objects\n         */\n        function split(object, size) {\n            var arr = [];\n            var i = 0;\n            angular.forEach(object, function(value, key) {\n                var index = i++ % size;\n                if (!arr[index]) {\n                    arr[index] = {};\n                }\n                arr[index][key] = value;\n            });\n            return arr;\n        }\n\n        /**\n         * Creates object with the category name as key and an array of widgets as value.\n         *\n         * @param widgets array of widgets\n         *\n         * @return array of categories\n         */\n        function createCategories(widgets) {\n            var categories = {};\n            angular.forEach(widgets, function(widget, key) {\n                var category = widget.category;\n                // if the widget has no category use a default one\n                if (!category) {\n                    category = 'ADF.CATEGORY.MISCELANOUS';\n                }\n\n                widget.title = $translate.instant(widget.title);\n                widget.description = $translate.instant(widget.description);\n                widget.category = $translate.instant(widget.category);\n\n                // push widget to category array\n                if (angular.isUndefined(categories[widget.category])) {\n                    categories[widget.category] = {\n                        widgets: {}\n                    };\n                }\n\n                categories[widget.category].widgets[key] = widget;\n            });\n            return categories;\n        }\n\n        function createCategoriesList(widgets) {\n            var categories = [];\n            angular.forEach(widgets, function(widget, key) {\n                if (!widget.category) {\n                    widget.category = 'ADF.CATEGORY.MISCELLANEOUS';\n                }\n\n                widget.title = $translate.instant(widget.title);\n                widget.description = $translate.instant(widget.description);\n                widget.category = $translate.instant(widget.category);\n\n                if (!widget.categoryTags) {\n                    widget.categoryTags = 'ADF.CATEGORY.TAG.MISCELLANEOUS';\n                }\n\n                var categoriesTmp = widget.categoryTags.split(',');\n\n                angular.forEach(categoriesTmp, function(category, idx) {\n                    // push widget to category array\n                    var translatedCat = $translate.instant(category);\n                    if (categories.indexOf(translatedCat) === -1)\n                        categories.push(translatedCat);\n                });\n\n            });\n            return categories;\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            scope: {\n                name: '@',\n                collapsible: '@',\n                editable: '@',\n                editMode: '@',\n                continuousEditMode: '=',\n                maximizable: '@',\n                adfModel: '=',\n                adfWidgetFilter: '=',\n                categories: '@',\n                hideButtons: '=',\n                extraData: '='\n            },\n            controller: function($scope) {\n                var model = {};\n                var widgetFilter = null;\n                var name = $scope.name;\n\n                // Watching for changes on adfModel\n                $scope.$watch('adfModel', function(oldVal, newVal) {\n                    // has model changed or is the model attribute not set\n                    if (newVal !== null || (oldVal === null && newVal === null)) {\n                        model = $scope.adfModel;\n                        widgetFilter = $scope.adfWidgetFilter;\n\n                        if (model) {\n                            if (!model.title) {\n                                model.title = $translate.instant('ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD');\n                            }\n                            if (!model.titleTemplateUrl) {\n                                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\n                            }\n                            $scope.model = model;\n                        } else {\n                            $log.error('could not find or create model');\n                        }\n                    }\n                }, true);\n\n                // edit mode\n                $scope.editMode = false;\n                $scope.editClass = '';\n\n                function getNewModalScope() {\n                    var scope = $scope.$new();\n                    return scope;\n                }\n\n                $scope.deleteDashboard = function() {\n                    var dashData = {\n                        id: model.id,\n                        name: model.title\n                    };\n\n                    $rootScope.$broadcast('dashboardDelete', dashData);\n                };\n\n                $scope.toggleEditMode = function(openConfigWindow) {\n                    $scope.editMode = !$scope.editMode;\n                    if ($scope.editMode) {\n                        if (!$scope.continuousEditMode) {\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\n                            $rootScope.$broadcast('adfIsEditMode');\n                        }\n\n                        if (openConfigWindow) {\n                            $scope.editDashboardDialog();\n                        }\n                    }\n\n                    if (!$scope.editMode) {\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\n                    }\n                };\n\n                $scope.saveTemporalDashboard = function() {\n                    delete model.temporal;\n                    $rootScope.$broadcast('adfDashboardChanged', name, model);\n                };\n\n                var adfToggleEditMode = $scope.$on('adfToggleEditMode', function(event, isNewDashboard) {\n                    if (isNewDashboard) {\n                        $scope.toggleEditMode(true);\n                    } else {\n                        $scope.toggleEditMode();\n                    }\n                });\n\n                var adfCancelEditMode = $scope.$on('adfCancelEditMode', function(event, isNewDashboard) {\n                    if ($scope.editMode) {\n                        $scope.cancelEditMode();\n                    }\n                });\n\n                var adfWidgetRemoved = $scope.$on('adfWidgetRemovedFromGrid', function(event, widget) {\n                    var index = null;\n                    angular.forEach($scope.adfModel.grid, function(widgetTmp, idx) {\n                        if (widgetTmp.definition.wid === widget.wid) {\n                            index = idx;\n                        }\n                    });\n\n                    if (index >= 0) {\n                        $scope.adfModel.grid.splice(index, 1);\n                        //$scope.gsHandler.commit();\n                    }\n                })\n\n                $scope.collapseAll = function(collapseExpandStatus) {\n                    $rootScope.$broadcast('adfDashboardCollapseExpand', {\n                        collapseExpandStatus: collapseExpandStatus\n                    });\n                };\n\n                $scope.cancelEditMode = function() {\n                    $scope.editMode = false;\n                    if (!$scope.continuousEditMode && ($scope.modelCopy !== $scope.adfModel)) {\n                        $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\n                    }\n                    $rootScope.$broadcast('adfDashboardEditsCancelled');\n                };\n\n                var adfEditDashboardDialog = $scope.$on('adfEditDashboardDialog', function(event, isNewDashboard) {\n                    if ($scope.editMode) {\n                        $scope.editDashboardDialog();\n                    }\n                });\n\n                var adfLaunchSearchingFromWidget = $scope.$on('adfLaunchSearchingFromWidget', function(event, widget, configFilter) {\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\n                });\n                var adfWindowTimeChangedFromWidget = $scope.$on('adfWindowTimeChangedFromWidget', function(event, widget, windowFilter) {\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\n                });\n\n                // edit dashboard settings\n                $scope.editDashboardDialog = function() {\n                    var editDashboardScope = getNewModalScope();\n                    // create a copy of the title, to avoid changing the title to\n                    // \"dashboard\" if the field is empty\n                    editDashboardScope.copy = {\n                        title: (model.title !== 'ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD' ? model.title : ''),\n                        description: model.description,\n                        icon: model.icon ? model.icon : 'fa-tachometer'\n                    };\n\n                    // pass icon list\n                    editDashboardScope.availableIcons = $faIcons.list();\n\n                    var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\n                    if (model.editTemplateUrl) {\n                        adfEditTemplatePath = model.editTemplateUrl;\n                    }\n                    var instance = $uibModal.open({\n                        scope: editDashboardScope,\n                        templateUrl: adfEditTemplatePath,\n                        backdrop: 'static',\n                        keyboard: false,\n                        size: 'lg'\n                    });\n\n\n                    editDashboardScope.closeDialog = function() {\n                        // copy the new title back to the model\n                        model.title = editDashboardScope.copy.title;\n                        model.description = editDashboardScope.copy.description;\n                        model.icon = editDashboardScope.copy.icon;\n\n                        // close modal and destroy the scope\n                        instance.close();\n                        editDashboardScope.$destroy();\n                    };\n                };\n\n                var adfOpenWidgetFromOther = $scope.$on('adfOpenWidgetFromOther', function(event, widget, config) {\n                    var internal_config = createConfiguration(widget);\n                    var _config = angular.merge({}, internal_config, config);\n                    var w = {\n                        type: widget,\n                        config: _config,\n                        title: _config.title\n                    };\n                    addNewWidgetToModel(model, w, name, !$scope.editMode);\n                });\n\n                var adfOpenModalWidgetFromOther = $scope.$on('adfOpenModalWidgetFromOther', function(event, widgetType, config) {\n                    var widget = createWidget(widgetType);\n                    widget.config = angular.merge({}, widget.config, config);\n                    widget.type = widgetType;\n                    if (widget.config.title) {\n                        widget.title = widget.config.title;\n                    }\n                    var fullScreenScope = $scope.$new();\n                    fullScreenScope.definition = fullScreenScope.widget = widget;\n                    var opts = {\n                        scope: fullScreenScope,\n                        templateUrl: adfTemplatePath + 'widget-fullscreen.html',\n                        size: fullScreenScope.definition.modalSize || 'ticket', // 'sm', 'lg'\n                        backdrop: 'static',\n                        windowClass: (fullScreenScope.definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n                    };\n\n                    if ($scope.model && !$scope.model.temporal) {\n                        fullScreenScope.persistDashboard = function() {\n                            $rootScope.$broadcast('adfOpenWidgetFromOther', this.$parent.widget.type, this.$parent.widget.config);\n                            this.closeDialog();\n                        }\n                    }\n\n                    var instance = $uibModal.open(opts);\n                    fullScreenScope.closeDialog = function() {\n                        instance.close();\n                        fullScreenScope.$destroy();\n                    };\n\n                });\n\n                var adfAddWidgetDialog = $scope.$on('adfAddWidgetDialog', function(event, isNewDashboard) {\n                    if (!model.temporal && model.editable) {\n                        if (!$scope.editMode) {\n                            $scope.editMode = true;\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\n                            $rootScope.$broadcast('adfIsEditMode');\n                        }\n\n                        $scope.addWidgetDialog();\n                    }\n                });\n\n                // add widget dialog\n                $scope.addScopeCfg = {\n                    widgetFilter: {},\n                    widgetSortingDirection: '',\n                    widgetSorting: 'priority'\n                };\n\n                $scope.addWidgetDialog = function() {\n                    var addScope = getNewModalScope();\n                    var widgets;\n                    if (angular.isFunction(widgetFilter)) {\n                        widgets = {};\n                        angular.forEach(dashboard.widgets, function(widget, type) {\n                            if (widgetFilter(widget, type, model)) {\n                                widgets[type] = widget;\n                            }\n                        });\n                    } else {\n                        widgets = dashboard.widgets;\n                    }\n                    addScope.widgets = widgets;\n\n                    angular.forEach(addScope.widgets, function(widget, type) {\n                        widget.key = type;\n                        if (!widget.category) {\n                            widget.category = 'Miscellaneous';\n                        }\n                    });\n\n                    // pass createCategories function to scope, if categories option is enabled\n                    if ($scope.options.categories) {\n                        addScope.createCategories = createCategories;\n                    } else {\n                        addScope.availableCategories = createCategoriesList(widgets);\n                    }\n\n                    var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\n                    if (model.addTemplateUrl) {\n                        adfAddTemplatePath = model.addTemplateUrl;\n                    }\n\n                    var opts = {\n                        scope: addScope,\n                        templateUrl: adfAddTemplatePath,\n                        backdrop: 'static',\n                        size: 'lg'\n                    };\n\n                    var instance = $uibModal.open(opts);\n\n                    addScope.widgetFilterCfg = $scope.addScopeCfg;\n\n                    addScope.addWidget = function(widget) {\n                        var w = {\n                            type: widget,\n                            config: createConfiguration(widget)\n                        };\n                        addNewWidgetToModel(model, w, name);\n                        // close and destroy\n                        instance.close();\n                        addScope.$destroy();\n\n                        // check for open edit mode immediately\n                        if (isEditModeImmediate(widget)) {\n                            openEditMode($scope, w);\n                        }\n                    };\n\n                    addScope.changeThumbnail = function(widget) {\n                        if (widget.images) {\n                            if (angular.isUndefined(widget._currThumb)) {\n                                widget._currThumb = 1;\n                            } else {\n                                widget._currThumb += 1;\n                            }\n\n\n                            if (widget._currThumb >= widget.images.length) {\n                                widget._currThumb = 0;\n                            }\n\n                            widget._currImg = widget.images[widget._currThumb];\n                        }\n                    };\n\n                    addScope.closeDialog = function() {\n                        // close and destroy\n                        instance.close();\n                        addScope.$destroy();\n                    };\n                };\n\n                $scope.addNewWidgetToModel = addNewWidgetToModel;\n\n                $scope.$on('destroy', function() {\n                    adfLaunchSearchingFromWidget();\n                    adfWindowTimeChangedFromWidget();\n                    adfToggleEditMode();\n                    adfOpenWidgetFromOther();\n                    adfOpenModalWidgetFromOther();\n                    adfCancelEditMode();\n                    adfAddWidgetDialog();\n                    adfEditDashboardDialog();\n                    adfWidgetRemoved();\n                });\n            },\n            link: function($scope, $element, $attr) {\n                // pass options to scope\n                var options = {\n                    name: $attr.name,\n                    editable: true,\n                    enableConfirmDelete: stringToBoolean($attr.enableConfirmDelete),\n                    maximizable: stringToBoolean($attr.maximizable),\n                    collapsible: stringToBoolean($attr.collapsible),\n                    categories: stringToBoolean($attr.categories),\n                    extraData: {}\n                };\n\n                if (angular.isDefined($attr.editable)) {\n                    options.editable = stringToBoolean($attr.editable);\n                }\n\n                if (angular.isDefined($scope.extraData)) {\n                    options.extraData = $scope.extraData;\n                }\n\n                options.extraData.editing = $scope.editMode;\n\n                $scope.options = options;\n            },\n            templateUrl: adfTemplatePath + 'dashboard.html'\n        };\n    });","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/* global angular */\nangular.module('adf')\n    .directive('adfDashboardGrid', function(adfTemplatePath) {\n        'use strict';\n\n        function preLink($scope) {\n            $scope.gridOptions = {\n                cellHeight: 146,\n                verticalMargin: 10,\n                animate: true,\n                float: false,\n                //alwaysShowResizeHandle: /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),\n                alwaysShowResizeHandle: true,\n                minWidth: 768,\n                auto: true,\n                resizable: {\n                    handles: 'e, se, s, sw, w'\n                },\n                disableDrag: !$scope.editMode,\n                disableResize: !$scope.editMode\n            };\n\n            $scope.gsHandler = null;\n        }\n\n        return {\n            restrict: 'E',\n            scope: {\n                adfModel: '=',\n                editMode: '=',\n                continuousEditMode: '=',\n                options: '='\n            },\n            templateUrl: adfTemplatePath + 'dashboard-grid.html',\n            compile: function() {\n                return {\n                    pre: preLink,\n                };\n            },\n            controller: function($scope, $timeout) {\n                var dashEvents = [];\n                dashEvents.push($scope.$on('adfIsEditMode', function() {\n                    $timeout(function() {\n                        $scope.gsHandler.enable();\n                    }, 100);\n                }));\n\n                dashEvents.push($scope.$on('adfDashboardChanged', function() {\n                    $timeout(function() {\n                        $scope.gsHandler.disable();\n                    }, 100);\n                }));\n\n                dashEvents.push($scope.$on('adfDashboardEditsCancelled', function() {\n                    $timeout(function() {\n                        $scope.gsHandler.disable();\n                    }, 100);\n                }));\n\n                dashEvents.push($scope.$on('adfCancelEditMode', function() {\n                    $timeout(function() {\n                        $scope.gsHandler.disable();\n                    }, 100);\n                }));\n\n                dashEvents.push($scope.$on('adfWidgetAdded', function(event, name, model, widget) {\n                    $timeout(function() {\n                        $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\n                        $scope.gsHandler.enable();\n                    }, 100);\n                }));\n\n                $scope.onChange = function(event, items) {\n                    console.log(\"onChange event: \" + event + \" items:\" + items);\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\n                };\n\n                $scope.onDragStart = function(event, ui) {\n                    console.log(\"onDragStart event: \" + event + \" ui:\" + ui);\n                };\n\n                $scope.onDragStop = function(event, ui) {\n                    console.log(\"onDragStop event: \" + event + \" ui:\" + ui);\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\n                };\n\n                $scope.onResizeStart = function(event, ui) {\n                    console.log(\"onResizeStart event: \" + event + \" ui:\" + ui);\n                };\n\n                $scope.onResizeStop = function(event, ui) {\n                    console.log(\"onResizeStop event: \" + event + \" ui:\" + ui);\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\n                    $scope.$broadcast('OnResizeWidget')\n                };\n\n                $scope.onItemAdded = function(item) {\n                    console.log(\"onItemAdded item: \" + item);\n                };\n\n                $scope.onItemRemoved = function(item) {\n                    console.log(\"onItemRemoved item: \" + item);\n                };\n\n                $scope.$on('destroy', function() {\n                    dashEvents.forEach(function(dashEvt) {\n                        dashEvt();\n                    });\n                });\n            }\n        };\n    });","/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .filter('adfOrderByObjectKey', function($filter) {\n    'use strict';\n\n    return function(item, key){\n      var array = [];\n      angular.forEach(item, function(value, objectKey){\n        value[key] = objectKey;\n        array.push(value);\n      });\n      return $filter('orderBy')(array, key);\n    };\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\n/**\n * @ngdoc object\n * @name adf.dashboardProvider\n * @description\n *\n * The dashboardProvider can be used to register widgets.\n */\nangular.module('adf.provider', [])\n    .provider('dashboard', function() {\n\n        var widgets = {};\n        var widgetsPath = '';\n        var messageTemplate = '<div class=\"alert alert-primary\">{}</div>';\n        var loadingTemplate = '\\\n      <div class=\"progress progress-striped active\">\\n\\\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\n          <span class=\"sr-only\" translate>FORM.MSG.LOADING ...</span>\\n\\\n        </div>\\n\\\n      </div>';\n        var customWidgetTemplatePath = null;\n\n        // default apply function of widget.edit.apply\n        var defaultApplyFunction = function() {\n            return true;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#widget\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Registers a new widget.\n         *\n         * @param {string} name of the widget\n         * @param {object} widget to be registered.\n         *\n         *   Object properties:\n         *\n         *   - `title` - `{string=}` - The title of the widget.\n         *   - `description` - `{string=}` - Description of the widget.\n         *   - `category` - `{string=}` - Category of the widget.\n         *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\n         *   - `config` - `{object}` - Predefined widget configuration.\n         *   - `controller` - `{string=|function()=}` - Controller fn that should be\n         *      associated with newly created scope of the widget or the name of a\n         *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\n         *      if passed as a string.\n         *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\n         *      published to scope under the `controllerAs` name.\n         *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\n         *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\n         *   - `template` - `{string=|function()=}` - html template as a string.\n         *   - `templateUrl` - `{string=}` - path to an html template.\n         *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\n         *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n         *      be injected into the controller. If any of these dependencies are promises, the widget\n         *      will wait for them all to be resolved or one to be rejected before the controller is\n         *      instantiated.\n         *      If all the promises are resolved successfully, the values of the resolved promises are\n         *      injected.\n         *\n         *      The map object is:\n         *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n         *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n         *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\n         *        and the return value is treated as the dependency. If the result is a promise, it is\n         *        resolved before its value is injected into the controller.\n         *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n         *      on the scope of the widget.\n         *   - `edit` - `{object}` - Edit modus of the widget.\n         *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n         *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\n         *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n         *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\n         *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\n         *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n         *        on the scope of the widget.\n         *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\n         *        Default is true.\n         *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\n         *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\n         *        The function have to return a boolean or an promise which can be resolved to a boolean.\n         *        The function can use injection.\n         *\n         * @returns {Object} self\n         */\n        this.widget = function(name, widget) {\n            var w = angular.extend({\n                reload: false,\n                frameless: false\n            }, widget);\n            if (w.edit) {\n                var edit = {\n                    reload: true,\n                    immediate: false,\n                    apply: defaultApplyFunction\n                };\n                angular.extend(edit, w.edit);\n                w.edit = edit;\n            }\n            widgets[name] = w;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#widgetsPath\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Sets the path to the directory which contains the widgets. The widgets\n         * path is used for widgets with a templateUrl which contains the\n         * placeholder {widgetsPath}. The placeholder is replaced with the\n         * configured value, before the template is loaded, but the template is\n         * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\n         * The default value of widgetPaths is ''.\n         *\n         *\n         * @param {string} path to the directory which contains the widgets\n         *\n         * @returns {Object} self\n         */\n        this.widgetsPath = function(path) {\n            widgetsPath = path;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#messageTemplate\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the template for messages.\n         *\n         * @param {string} template for messages.\n         *\n         * @returns {Object} self\n         */\n        this.messageTemplate = function(template) {\n            messageTemplate = template;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#loadingTemplate\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the template which is displayed as\n         * long as the widget resources are not resolved.\n         *\n         * @param {string} template loading template\n         *\n         * @returns {Object} self\n         */\n        this.loadingTemplate = function(template) {\n            loadingTemplate = template;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#customWidgetTemplatePath\n         * @propertyOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the container template for the widgets\n         *\n         * @param {string} path to the custom widget template\n         *\n         * @returns {Object} self\n         */\n        this.customWidgetTemplatePath = function(templatePath) {\n            customWidgetTemplatePath = templatePath;\n            return this;\n        };\n\n        /**\n         * @ngdoc service\n         * @name adf.dashboard\n         * @description\n         *\n         * The dashboard holds all options and  widgets.\n         *\n         * @property {Array.<Object>} widgets Array of registered widgets.\n         * @property {string} widgetsPath Default path for widgets.\n         * @property {string} messageTemplate Template for messages.\n         * @property {string} loadingTemplate Template for widget loading.\n         * * @property {string} customWidgetTemplatePath Changes the container template for the widgets\n         *\n         * @returns {Object} self\n         */\n        this.$get = function() {\n            var cid = 0;\n\n            return {\n                widgets: widgets,\n                widgetsPath: widgetsPath,\n                messageTemplate: messageTemplate,\n                loadingTemplate: loadingTemplate,\n                customWidgetTemplatePath: customWidgetTemplatePath,\n\n                /**\n                 * @ngdoc method\n                 * @name adf.dashboard#id\n                 * @methodOf adf.dashboard\n                 * @description\n                 *\n                 * Creates an ongoing numeric id. The method is used to create ids for\n                 * columns and widgets in the dashboard.\n                 */\n                id: function() {\n                    return new Date().getTime() + '-' + (++cid);\n                },\n\n                /**\n                 * @ngdoc method\n                 * @name adf.dashboard#idEqual\n                 * @methodOf adf.dashboard\n                 * @description\n                 *\n                 * Checks if the given ids are equal.\n                 *\n                 * @param {string} id widget or column id\n                 * @param {string} other widget or column id\n                 */\n                idEquals: function(id, other) {\n                    // use toString, because old ids are numbers\n                    return ((id) && (other)) && (id.toString() === other.toString());\n                }\n            };\n        };\n\n    });","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf')\n    .directive('adfWidgetContent', function($log, $q, widgetService,\n        $compile, $controller, $injector, dashboard, $translate) {\n\n        function renderError($element, msg) {\n            $log.warn(msg);\n            $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\n        }\n\n        function compileWidget($scope, $element, currentScope, configChanged) {\n            var model = $scope.model;\n            var content = $scope.content;\n\n            var extra = $scope.extra;\n\n            var newScope = currentScope;\n            if (!model) {\n                $translate('ADF.ERROR.MODEL_IS_UNDEFINED').then(function(translateMessage) {\n                    renderError($element, translateMessage);\n                });\n            } else if (!content) {\n                if (model.title) {\n                    $translate('ADF.ERROR.WIDGET_FOR_DEPRECTATED', {\n                        title: model.title\n                    }).then(function(translateMessage) {\n                        renderError($element, translateMessage);\n                    });\n                } else {\n                    $translate('ADF.ERROR.WIDGET_DEPRECTATED').then(function(translateMessage) {\n                        renderError($element, translateMessage);\n                    });\n                }\n            } else {\n                if (newScope) {\n                    var is_menu = newScope.menu !== undefined && newScope.menu !== null && (!newScope.isPaginationEnable || !newScope.isPaginationEnable());\n                    var is_itemsPerPage = newScope.itemsPerPage !== undefined && newScope.itemsPerPage !== null;\n                    if (is_menu || configChanged || !angular.isFunction(newScope.reloadData)) {\n                        if ($scope.navOptionsHandler) {\n                            $scope.navOptionsHandler.firstLoad = true;\n                        }\n\n                        newScope = renderWidget($scope, $element, currentScope, model, content, extra);\n                    } else {\n                        if (is_itemsPerPage || newScope.page) {\n                            newScope.page = 1;\n                        }\n\n                        newScope.reloadData();\n                    }\n                } else {\n                    if ($scope.navOptionsHandler) {\n                        $scope.navOptionsHandler.firstLoad = true;\n                    }\n\n                    newScope = renderWidget($scope, $element, currentScope, model, content, extra);\n                }\n            }\n\n            function _getWindowTime(type) {\n                if (type === \"custom\") {\n                    return {\n                        from: newScope.config.windowFilter.from,\n                        to: newScope.config.windowFilter.to\n                    }\n                }\n                var from = window.moment().subtract(1, type);\n                return {\n                    from: from._d\n                };\n            }\n\n            if (newScope) {\n                if (newScope.config) {\n                    newScope.config.getWindowTime = function() {\n                        var windowFilter = newScope.config.windowFilter;\n                        if (windowFilter && windowFilter.type) {\n                            var winTime = _getWindowTime(windowFilter.type);\n                            /* jshint ignore:start */\n                            if (!window.eval(newScope.config.windowFilter.rawdate)) {\n                                for (var key in winTime) {\n                                    winTime[key] = window.moment(winTime[key]).format();\n                                }\n                                winTime['rawdate'] = true;\n                            }\n                            /* jshint ignore:end */\n                            return winTime;\n                        }\n                    }\n                }\n\n                if (extra) {\n                    newScope.editing = extra.editing ? true : false;\n                    newScope.extraData = extra;\n                }\n            }\n            return newScope;\n        }\n\n        function renderWidget($scope, $element, currentScope, model, content, extra) {\n            // display loading template\n            $element.html(dashboard.loadingTemplate);\n\n            // create new scope\n            var templateScope = $scope.$new();\n\n            // pass config object to scope\n            if (!model.config) {\n                model.config = {};\n            }\n\n            templateScope.config = model.config;\n            templateScope.editing = extra && extra.editing;\n\n            if (extra) {\n                templateScope.extra = extra;\n            }\n\n            templateScope.selectionManager = (currentScope && currentScope.selectionManager) ? currentScope.selectionManager : undefined;\n\n            // local injections\n            var base = {\n                $scope: templateScope,\n                widget: model,\n                config: model.config\n            };\n\n            // get resolve promises from content object\n            var resolvers = {};\n            resolvers.$tpl = widgetService.getTemplate(content);\n            if (content.resolve) {\n                angular.forEach(content.resolve, function(promise, key) {\n                    if (angular.isString(promise)) {\n                        resolvers[key] = $injector.get(promise);\n                    } else {\n                        resolvers[key] = $injector.invoke(promise, promise, base);\n                    }\n                });\n            }\n\n            // resolve all resolvers\n            $q.all(resolvers).then(function(locals) {\n                angular.extend(locals, base);\n\n                // pass resolve map to template scope as defined in resolveAs\n                if (content.resolveAs) {\n                    templateScope[content.resolveAs] = locals;\n                }\n\n                // compile & render template\n                var template = locals.$tpl;\n                $element.html(template);\n                if (content.controller) {\n                    var templateCtrl = $controller(content.controller, locals);\n                    if (content.controllerAs) {\n                        templateScope[content.controllerAs] = templateCtrl;\n                    }\n                    $element.children().data('$ngControllerController', templateCtrl);\n                }\n                $compile($element.contents())(templateScope);\n            }, function(reason) {\n                // handle promise rejection\n                var msg = 'ADF.ERROR.COULD_NOT_RESOLVE_ALL_PROMISSES';\n                $translate(msg, {\n                    reason: (reason ? \": \" + reason : reason)\n                }).then(function(translateMessage) {\n                    renderError($element, translateMessage);\n                });\n            });\n\n            // destroy old scope\n            if (currentScope) {\n                currentScope.$destroy();\n            }\n\n            return templateScope;\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            scope: {\n                model: '=',\n                content: '=',\n                extra: '=',\n                navOptionsHandler: '=?',\n                filterHandler: '=?',\n                widgetActionsHandler: '=?'\n            },\n            link: function($scope, $element) {\n                var currentScope = compileWidget($scope, $element, null);\n                var widgetConfigChangedEvt = $scope.$on('widgetConfigChanged', function() {\n                    currentScope = compileWidget($scope, $element, currentScope, true);\n                });\n\n                var widgetReloadEvt = $scope.$on('widgetReload', function() {\n                    currentScope = compileWidget($scope, $element, currentScope, false);\n                });\n\n                $scope.$on('destroy', function() {\n                    widgetConfigChangedEvt();\n                    widgetReloadEvt();\n                });\n            }\n        };\n    });","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf')\n    .directive('adfWidgetGrid', function($injector, $q, $log, $uibModal, $rootScope, $interval, dashboard, adfTemplatePath, Filter) {\n        function preLink($scope) {\n            var definition = $scope.definition;\n\n            if (definition) {\n                var w = dashboard.widgets[definition.type];\n                if (w) {\n                    // pass title\n                    if (!definition.title) {\n                        definition.title = w.title;\n                    }\n\n                    definition.titleTemplateUrl = adfTemplatePath + 'widget-grid-title.html';\n\n                    if (!definition.editTemplateUrl) {\n                        definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\n                        if (w.editTemplateUrl) {\n                            definition.editTemplateUrl = w.editTemplateUrl;\n                        }\n                    }\n\n                    if (!definition.titleTemplateUrl) {\n                        definition.frameless = w.frameless;\n                    }\n\n                    if (!definition.styleClass) {\n                        definition.styleClass = w.styleClass;\n                    }\n\n                    // set id for sortable\n                    if (!definition.wid) {\n                        definition.wid = dashboard.id();\n                    }\n\n                    // pass copy of widget to scope\n                    $scope.widget = angular.copy(w);\n\n                    // create config object\n                    var config = definition.config;\n                    if (config) {\n                        if (angular.isString(config)) {\n                            config = angular.fromJson(config);\n                        }\n                    } else {\n                        config = {};\n                    }\n\n                    if (typeof $scope.widget.show_modal_footer === \"undefined\") {\n                        $scope.widget.show_modal_footer = true;\n                    }\n\n                    if (typeof $scope.widget.show_reload_config === \"undefined\") {\n                        $scope.widget.show_reload_config = true;\n                    }\n\n                    // pass config to scope\n                    $scope.config = config;\n\n                    // collapse exposed $scope.widgetState property\n                    if (!$scope.widgetState) {\n                        $scope.widgetState = {};\n                        $scope.widgetState.isCollapsed = (w.collapsed === true) ? w.collapsed : false;\n                    }\n\n                } else {\n                    $log.warn('could not find widget ' + definition.type);\n                }\n            } else {\n                $log.debug('definition not specified, widget was probably removed');\n            }\n        }\n\n        function postLink($scope, $element) {\n            var definition = $scope.definition;\n            if (!definition) {\n                $log.debug('widget not found');\n                return;\n            }\n            if (!$scope.config) {\n                $scope.config = {};\n            }\n\n            var config = $scope.config;\n\n            // bind close function\n            var deleteWidget = function() {\n                $element.remove();\n                $rootScope.$broadcast('adfWidgetRemovedFromGrid', definition);\n            };\n\n            $scope.remove = function() {\n                if ($scope.options.enableConfirmDelete) {\n                    var deleteScope = $scope.$new();\n\n                    var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\n                    if (definition.deleteTemplateUrl) {\n                        deleteTemplateUrl = definition.deleteTemplateUrl;\n                    }\n                    var opts = {\n                        scope: deleteScope,\n                        templateUrl: deleteTemplateUrl,\n                        backdrop: 'static'\n                    };\n                    var instance = $uibModal.open(opts);\n\n                    deleteScope.closeDialog = function() {\n                        instance.close();\n                        deleteScope.$destroy();\n                    };\n                    deleteScope.deleteDialog = function() {\n                        deleteWidget();\n                        deleteScope.closeDialog();\n                    };\n                } else {\n                    deleteWidget();\n                }\n            };\n\n\n            $scope.print = function() {\n                if (!$scope.editMode) {\n                    $scope.$broadcast('widgetPrint');\n                }\n            }\n\n            $scope.isExecuteOperationEnabled = function() {\n\n                if (config.entityKey)\n                    return true;\n                var filter = config.filter;\n                if (typeof filter === \"string\") {\n                    return filter.length > 0;\n                }\n                if (typeof filter === \"object\") {\n                    return filter.value.length > 2 && filter.oql;\n                }\n                return false;\n            }\n\n            $scope.executeOperation = function() {\n                if (!$scope.editMode) {\n\n                    $scope.$parent.$broadcast('widgetExecuteOperation');\n                }\n            };\n\n            $scope.filter = {\n                value: \"\"\n            };\n            $scope.sort = {\n                value: \"\",\n                direction: \"\"\n            };\n\n            $scope.toggleAdvanced = 1;\n            var filter = config.filter;\n            if (typeof filter === \"object\" && filter.oql && filter.oql.length > 2) {\n                $scope.search = {\n                    oql: filter.oql,\n                    json: filter.value\n                };\n                $scope.toggleAdvanced = 0;\n            } else if (typeof filter === \"string\") {\n                $scope.search = {\n                    quick: filter\n                };\n                $scope.toggleAdvanced = 1;\n            } else if (typeof filter === \"object\" && filter.fields) {\n                $scope.search = {\n                    customFilter: filter.fields\n                };\n                $scope.search.fields = [];\n                angular.forEach(filter.fields, function(v, key) {\n                    $scope.search.fields.push(v.name);\n                });\n                $scope.toggleAdvanced = 2;\n            } else {\n                $scope.search = {\n                    quick: filter = \"\"\n                };\n            }\n\n            $scope.toggleFilter = function(advanced) {\n                $scope.toggleAdvanced = advanced;\n            };\n            $scope.filterAvailable = false;\n            $scope.showFilter = function() {\n                $scope.filterAvailable = $scope.filterAvailable === true ? false : true;\n            };\n\n            $scope.showFinalFilter = false;\n\n            $scope.launchSearching = function() {\n                var widget = {\n                    definition: definition,\n                    element: $element\n                };\n\n                $rootScope.$broadcast('adfLaunchSearchingFromWidget', widget, $scope.config.filter);\n                $scope.reload(true);\n            }\n            $scope.addCustomFilter = function(key) {\n                $scope.search.customFilter = $scope.search.customFilter ? $scope.search.customFilter : [];\n                $scope.search.customFilter.push({\n                    name: key,\n                    value: ''\n                });\n            }\n\n            $scope.launchCustomFilter = function() {\n                if ($scope.search.customFilter && $scope.search.customFilter.length > 0) {\n                    $scope.search.oql = $scope.search.json = '';\n\n                    $scope.config.filter = {\n                        value: {\n                            and: []\n                        },\n                        fields: $scope.search.customFilter\n                    }\n                    angular.forEach($scope.search.customFilter, function(v, key) {\n                        if (v.value) {\n                            var like = {};\n                            like[v.name] = v.value;\n                            $scope.config.filter.value.and.push({\n                                'like': like\n                            });\n                        }\n\n                    });\n                    $scope.config.filter.value = JSON.stringify($scope.config.filter.value);\n                }\n\n                $scope.launchSearching();\n            }\n\n\n\n            $scope.deleteFilter = function(value, model) {\n                angular.forEach($scope.search.customFilter, function(v, key) {\n                    if (v.name === value) {\n                        $scope.search.customFilter.splice(key, 1);\n                    }\n                });\n                if ($scope.search.customFilter.length === 0) {\n                    $scope.config.filter = {};\n                }\n            };\n\n            $scope.launchSearchingAdv = function() {\n                if (!$scope.filterApplied) {\n                    $scope.search.quick = '';\n                    if ($scope.search.json === '' || $scope.search.json === '{}' || (!angular.isString($scope.search.json) && Object.keys($scope.search.json).length === 0)) {\n                        $scope.config.filter = {\n                            oql: '',\n                            value: ''\n                        };\n                    } else {\n                        $scope.config.filter = {\n                            oql: $scope.search.oql,\n                            value: $scope.search.json\n                        };\n                    }\n                    $scope.launchSearching();\n                    $scope.filterApplied = true;\n                }\n            }\n\n            $scope.applyFilter = function(event) {\n                $scope.launchSearching();\n            }\n\n            $scope.launchSearchingQuick = function() {\n                if (!$scope.filterApplied) {\n                    $scope.search.oql = $scope.search.json = '';\n                    $scope.config.filter = $scope.search.quick;\n                    $scope.launchSearching();\n                    $scope.filterApplied = true;\n                }\n            }\n\n            var windowTimeChanged = $scope.$on('onWindowTimeChanged', function(event, timeObj) {\n                $scope.config.windowFilter = timeObj ? timeObj : (config.windowFilter ? {} : timeObj);\n                var widget = {\n                    definition: definition,\n                    element: $element\n                }\n                $rootScope.$broadcast('adfWindowTimeChangedFromWidget', widget, $scope.config.windowFilter);\n                $scope.reload();\n            });\n\n            $scope.enter = function(event) {\n                var keycode = (event.keyCode ? event.keyCode : event.which);\n                if (keycode === 13) {\n                    if ($scope.toggleAdvanced === 0)\n                        $scope.launchSearchingAdv();\n                    if ($scope.toggleAdvanced === 1)\n                        $scope.launchSearchingQuick();\n                    if ($scope.toggleAdvanced === 2)\n                        $scope.launchCustomFilter();\n\n                } else if (keycode === 19) {\n                    $scope.showFinalFilter = $scope.showFinalFilter === false ? true : false;\n                } else {\n                    $scope.filterApplied = false;\n                }\n            }\n\n\n            $scope.customSelectors = [];\n            $scope.getCustomSelectors = function() {\n                if ($scope.config.customSelectors) {\n                    $scope.customSelectors = $scope.config.customSelectors;\n                } else {\n                    config.widgetSelectors().findFields(\"\").then(function(fields) {\n                        $scope.customSelectors = fields;\n                        $scope.$apply();\n                    }).catch(function(err) {\n                        $log.error(err);\n                    });\n                }\n            }\n\n            $scope.customFilter = [];\n            $scope.getcustomFilter = function() {\n                config.widgetSelectors().findFields(\"\").then(function(fields) {\n                    $scope.customFilter = fields;\n                    $scope.$apply();\n                }).catch(function(err) {\n                    $log.error(err);\n                });\n\n            }\n\n            $scope.ifCustomFilter = function() {\n                return $scope.customSelectors && config.sort && $scope.definition.type === 'FullDevicesList' && $scope.toggleAdvanced === 2;\n            }\n\n            $scope.showCustomFields = function() {\n                return $scope.definition.type === 'FullDevicesList' && $scope.toggleAdvanced === 2 && $scope.search.customFilter && $scope.filterAvailable && !$scope.editMode;\n            }\n\n            $scope.changeDirection = function() {\n                var direction = config.sort.direction;\n                if (direction === 'DESCENDING') {\n                    $scope.config.sort.direction = 'ASCENDING'\n                } else if (direction === 'ASCENDING') {\n                    $scope.config.sort.direction = 'DESCENDING'\n                }\n                $scope.reload();\n            }\n\n            $scope.changeDefaultTab = function() {\n\n\n                $scope.reload();\n            }\n\n            $scope.debugQuery = function() {\n                Filter.parseQuery($scope.search.oql || '')\n                    .then(function(data) {\n                        //$scope.elementos = data;\n                        $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\n                        $scope.unknownWords = '';\n                        $scope.filter.error = null;\n                    })\n                    .catch(function(err) {\n                        $scope.filter.error = err;\n                        // Tratar el error\n                    });\n\n            }\n\n            $scope.autocomplete_options = function() {\n                var autocomplete_options = {\n                    suggest: Filter.suggest_field_delimited,\n                    customSelectors: config.widgetSelectors()\n                };\n\n                return autocomplete_options;\n\n            };\n\n            // Multiple selection\n            $scope.selectedItems = {};\n\n            // Gestor de seleccion\n            $scope.selectionManager = {\n                currentSelection: $scope.selectedItems,\n                isSelected: function(key, obj) {\n                    if ($scope.selectedItems[key] && !angular.isUndefined(obj)) {\n                        $scope.selectedItems[key].data = obj;\n                    }\n\n                    return $scope.selectedItems[key] ? true : false;\n                },\n                totalSelected: function() {\n                    return Object.keys($scope.selectedItems).length;\n                }\n            };\n\n            $scope.manageSelectedItems = function() {\n                var selectionScope = $scope.$new();\n\n                selectionScope.selectionConfig = config.selectionConfig;\n\n                selectionScope.selectedItems = [];\n                angular.forEach($scope.selectedItems, function(value, key) {\n                    selectionScope.selectedItems.push({\n                        key: key,\n                        value: value\n                    });\n                });\n\n                selectionScope.currentSelection = {\n                    selected: selectionScope.selectedItems\n                };\n\n                var manageItemsSelectedTemplate = adfTemplatePath + 'widget-selection.html';\n                var opts = {\n                    scope: selectionScope,\n                    templateUrl: manageItemsSelectedTemplate,\n                    backdrop: 'static',\n                    size: 'lg',\n                    animation: true\n                };\n\n                var instance = $uibModal.open(opts);\n\n                selectionScope.restoreSelection = function() {\n                    selectionScope.currentSelection = {\n                        selected: selectionScope.selectedItems\n                    };\n                };\n\n                selectionScope.clearSelection = function() {\n                    selectionScope.currentSelection.selected = [];\n                };\n\n                // Cierra sy guarda los datos de nueva selección\n                selectionScope.applyFilter = function(type) {\n                    var customOql = selectionScope.selectionConfig.filterAction(selectionScope.currentSelection.selected, type);\n\n                    if (!angular.isUndefined(customOql) && customOql !== null) {\n                        $scope.toggleAdvanced = 0;\n                        Filter.parseQuery(customOql).then(function(data) {\n                            $scope.search.oql = customOql;\n                            $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\n                            $scope.unknownWords = '';\n                            $scope.filter.error = null;\n\n                            $scope.launchSearchingAdv();\n                        }).catch(function(err) {\n                            $scope.filter.error = err;\n                        });\n                    }\n                };\n\n                selectionScope.executeOperation = function(operationType) {\n                    if (!$scope.editMode) {\n                        $scope.$parent.$broadcast('widgetExecuteOperation', {\n                            'selectedItems': selectionScope.currentSelection.selected,\n                            'type': operationType\n                        });\n                    }\n                };\n\n                // Cierra sy guarda los datos de nueva selección\n                selectionScope.saveChangesDialog = function() {\n                    var finalSelection = {};\n                    angular.forEach(selectionScope.currentSelection.selected, function(data, idx) {\n                        finalSelection[data.key] = {\n                            data: data.value.data,\n                            visible: data.value.visible\n                        };\n                    });\n\n                    $scope.selectedItems = angular.copy(finalSelection);\n                    $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n\n                    $scope.selectionManager.lastItem = {};\n                    $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n\n                    instance.close();\n                    selectionScope.$destroy();\n                };\n\n                // Cierra sin realizar ninguna acción\n                selectionScope.closeDialog = function() {\n                    instance.close();\n                    selectionScope.$destroy();\n                };\n            };\n\n\n            // bind edit function\n            $scope.edit = function() {\n                var editScope = $scope.$new();\n                editScope.definition = angular.copy(definition);\n\n                var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\n                if (definition.editTemplateUrl) {\n                    adfEditTemplatePath = definition.editTemplateUrl;\n                }\n\n                var opts = {\n                    scope: editScope,\n                    templateUrl: adfEditTemplatePath,\n                    backdrop: 'static',\n                    size: 'lg'\n                };\n\n                var instance = $uibModal.open(opts);\n\n                editScope.closeDialog = function() {\n                    instance.close();\n                    editScope.$destroy();\n                };\n\n                // TODO create util method\n                function createApplyPromise(result) {\n                    var promise;\n                    if (typeof result === 'boolean') {\n                        var deferred = $q.defer();\n                        if (result) {\n                            deferred.resolve();\n                        } else {\n                            deferred.reject();\n                        }\n                        promise = deferred.promise;\n                    } else {\n                        promise = $q.when(result);\n                    }\n                    return promise;\n                }\n\n                editScope.saveDialog = function() {\n                    // clear validation error\n                    editScope.validationError = null;\n\n                    // build injection locals\n                    var widget = $scope.widget;\n\n                    // create a default apply method for widgets\n                    // without edit mode\n                    // see issue https://goo.gl/KHPQLZ\n                    var applyFn;\n                    if (widget.edit) {\n                        applyFn = widget.edit.apply;\n                    } else {\n                        applyFn = function() {\n                            return true;\n                        };\n                    }\n\n                    // injection locals\n                    var locals = {\n                        widget: widget,\n                        definition: editScope.definition,\n                        config: editScope.definition.config\n                    };\n\n                    // invoke apply function and apply if success\n                    var result = $injector.invoke(applyFn, applyFn, locals);\n                    createApplyPromise(result).then(function() {\n                        definition.title = editScope.definition.title;\n                        angular.extend(definition.config, editScope.definition.config);\n\n                        editScope.closeDialog();\n\n                        if (widget.edit && widget.edit.reload) {\n                            $scope.setReloadTimeout();\n                            // reload content after edit dialog is closed\n                            $scope.$broadcast('widgetConfigChanged');\n                        }\n                    }, function(err) {\n                        if (err) {\n                            editScope.validationError = err;\n                        } else {\n                            editScope.validationError = 'VALIDATION_DURING_APPLY_FAILED';\n                        }\n                    });\n                };\n\n            };\n\n\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            templateUrl: adfTemplatePath + 'widget-grid.html',\n            scope: {\n                definition: '=',\n                editMode: '=',\n                options: '=',\n                widgetState: '='\n            },\n            controller: function($scope) {\n                // Controlador de la barra inferior de los widgets\n                $scope.navOptionsHandler = {\n                    firstLoad: true,\n                    loadingData: false,\n                    startLoading: function() {\n                        $scope.navOptionsHandler.loadingData = true;\n                    },\n                    stopLoading: function() {\n                        $scope.navOptionsHandler.firstLoad = false;\n                        $scope.navOptionsHandler.loadingData = false;\n                        $scope.navOptionsHandler.lastMessageTime = new Date();\n                    },\n                    setStatusMessage: function(message) {\n                        $scope.navOptionsHandler.statusMessage = message;\n                        $scope.navOptionsHandler.lastMessageTime = new Date();\n                    }\n                };\n\n                // Controlador de los parámetros del filtro\n                $scope.filterHandler = {\n                    changeFilter: function(filter, search, toggleAdvanced) {\n                        $scope.filter = filter;\n                        $scope.search = search;\n                        $scope.toggleAdvanced = toggleAdvanced;\n                    }\n                };\n\n                // Controlador de las custom actions del widget\n                $scope.widgetActionsHandler = {\n                    actions: [],\n                    setActions: function(actions) {\n                        $scope.widgetActionsHandler.actions = actions;\n                    }\n                };\n                $scope.showActionsMenu = false;\n                $scope.toggleActionsMenu = function() {\n                    $scope.showActionsMenu = !$scope.showActionsMenu;\n                };\n\n                var adfDashboardCollapseExpand = $scope.$on('adfDashboardCollapseExpand', function(event, args) {\n                    $scope.widgetState.isCollapsed = args.collapseExpandStatus;\n                });\n\n                var adfWidgetEnterEditMode = $scope.$on('adfWidgetEnterEditMode', function(event, widget) {\n                    if (dashboard.idEquals($scope.definition.wid, widget.wid)) {\n                        $scope.edit();\n                    }\n                });\n\n                var adfIsEditMode = $scope.$on('adfIsEditMode', function(event, widget) {\n                    $scope.editing = true;\n                });\n\n                var adfDashboardChanged = $scope.$on('adfDashboardChanged', function(event, widget) {\n                    $scope.editing = false;\n                });\n\n                var adfDashboardEditsCancelled = $scope.$on('adfDashboardEditsCancelled', function(event, widget) {\n                    $scope.editing = false;\n                });\n\n                $scope.widgetClasses = function(w, definition) {\n                    var classes = definition.styleClass || '';\n                    // w is undefined, if the type of the widget is unknown\n                    // see issue #216\n                    // if (!w || !w.frameless || $scope.editMode) {\n                    //     classes += ' panel panel-default';\n                    // }\n                    return classes;\n                };\n\n                $scope.openFullScreen = function() {\n\n                    $scope.$emit('adfOpenModalWidgetFromOther', $scope.definition.type, $scope.config);\n\n                    // var definition = $scope.definition;\n                    // var fullScreenScope = $scope.$new();\n                    // var opts = {\n                    //     scope: fullScreenScope,\n                    //     templateUrl: adfTemplatePath + 'widget-fullscreen.html',\n                    //     size: definition.modalSize || 'lg', // 'sm', 'lg'\n                    //     backdrop: 'static',\n                    //     windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n                    // };\n\n                    // var instance = $uibModal.open(opts);\n\n                    // fullScreenScope.reload = function() {\n                    //     fullScreenScope.$broadcast('widgetReload');\n                    // };\n\n                    // fullScreenScope.closeDialog = function() {\n                    //     instance.close();\n                    //     fullScreenScope.$destroy();\n                    // };\n                };\n\n                $scope.openFilter = function() {\n\n                }\n\n                $scope.openAboutScreen = function(size) {\n                    size = 'md';\n                    var modalInstance = $uibModal.open({\n                        animation: true,\n                        templateUrl: 'widgetAboutModal.html',\n                        controller: function($scope, $uibModalInstance, information) {\n                            $scope.about = {};\n                            $scope.about.info = information;\n                            $scope.ok = function() {\n                                $uibModalInstance.close();\n                            };\n                        },\n                        'size': size,\n                        resolve: {\n                            information: function() {\n                                return $scope.config.about;\n                            }\n                        }\n                    });\n\n                    modalInstance.result.then(function(selectedItem) {\n                        $scope.selected = selectedItem;\n                    }, function() {\n                        $log.info('Modal dismissed at: ' + new Date());\n                    });\n                };\n\n                $scope.saveWidgetScreen = function(wId) {\n                    $scope.$emit('generateSnapshot', {\n                        'objectSelector': '.widget_' + wId,\n                        'fileName': 'capture_' + new Date().getTime()\n                    });\n                };\n\n                var onWindowTimeChanged = function(timeObj) {\n                    var filter = {\n                        and: []\n                    };\n                    if (timeObj && timeObj.from) {\n                        filter.and.push({\n                            gt: {\n                                operationDate: timeObj.from\n                            }\n                        });\n\n                        if (timeObj.to) {\n                            filter.and.push({\n                                lt: {\n                                    operationDate: timeObj.to\n                                }\n                            });\n                        }\n                    } else {\n                        filter = null;\n                    }\n                    return filter;\n                }\n\n                var createQuickFilter = function(fieldsQuickSearch, filter) {\n                    var _filter = {\n                        or: []\n                    };\n                    var criteria;\n                    fieldsQuickSearch.forEach(function(field) {\n                        criteria = {};\n                        criteria[field.operator] = {};\n                        criteria[field.operator][field.name] = $scope.config.filter;\n                        _filter.or.push(criteria);\n                    });\n                    return _filter;\n                }\n\n                $scope.downloadCsv = function() {\n                    var columns = $scope.config.columns;\n                    var scope_filter = $scope.config.filter;\n                    var extra_filter;\n                    var final_filter = {};\n                    var order = $scope.config.sort ? $scope.config.sort : undefined;\n                    if ($scope.config.windowFilter) {\n                        var window_filter = $scope.config.onWindowTimeChanged($scope.config.windowFilter);\n                        if (window_filter && window_filter.and) {\n                            extra_filter = {\n                                and: window_filter.and\n                            };\n                        }\n                    }\n                    var filter;\n                    if (scope_filter.value && scope_filter.value.length > 4) {\n                        filter = JSON.parse(scope_filter.value);\n                    } else if (typeof scope_filter === 'string' && scope_filter.trim() !== '') {\n                        filter = createQuickFilter($scope.config.fieldsQuickSearch, scope_filter);\n                    }\n                    if (extra_filter) {\n                        if (filter) {\n                            final_filter = {\n                                and: [extra_filter, filter]\n                            };\n                        } else {\n                            final_filter = extra_filter;\n                        }\n                    } else {\n                        final_filter = filter;\n                    }\n                    $scope.$broadcast('downloadCsv', {\n                        'columns': columns,\n                        'filter': final_filter,\n                        'order': order\n                    });\n                };\n\n                $scope.generateQR = function() {\n                    $scope.$broadcast('generateQR');\n                };\n\n                var addItemToSelection = $scope.$on('addItemToSelection', function(event, item) {\n                    if (!$scope.selectedItems[item.key]) {\n                        $scope.selectedItems[item.key] = {\n                            data: item.data,\n                            visible: item.visible\n                        };\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n                        item.isSelected = true;\n                        $scope.selectionManager.lastItem = item;\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n                    }\n\n                });\n\n                var removeItemFromSelection = $scope.$on('removeItemFromSelection', function(event, item) {\n                    if ($scope.selectedItems[item.key]) {\n                        delete $scope.selectedItems[item.key];\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n                        item.isSelected = false;\n                        $scope.selectionManager.lastItem = item;\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n                    }\n                });\n\n                // bind reload function\n                var stopReloadTimeout;\n\n                $scope.setReloadTimeout = function() {\n                    var config = $scope.config || $scope.definition.config;\n\n                    if (config) {\n                        var reloadPeriod = config.reloadPeriod;\n                        if (!isNaN(reloadPeriod) && (reloadPeriod * 1) !== 0) {\n                            if (angular.isDefined(stopReloadTimeout)) {\n                                $interval.cancel(stopReloadTimeout)\n                                stopReloadTimeout = undefined;\n                            };\n                            stopReloadTimeout = $interval($scope.reload, (reloadPeriod * 1000));\n                        } else if (stopReloadTimeout) {\n                            $interval.cancel(stopReloadTimeout);\n                        }\n                    }\n                }\n\n                $scope.reload = function(completeReload) {\n                    if (completeReload) {\n                        $scope.$broadcast('widgetReload', completeReload);\n                    } else {\n                        $scope.$broadcast('widgetReload');\n                    }\n\n                    $scope.setReloadTimeout();\n                };\n\n                // verificacion de periodo de refresco\n                $scope.setReloadTimeout();\n\n                $scope.$on('$destroy', function() {\n                    adfDashboardCollapseExpand();\n                    adfWidgetEnterEditMode();\n                    adfIsEditMode();\n                    adfDashboardChanged();\n                    adfDashboardEditsCancelled();\n                    addItemToSelection();\n                    removeItemFromSelection();\n                    $interval.cancel(stopReloadTimeout);\n                });\n            },\n            compile: function() {\n\n                /**\n                 * use pre link, because link of widget-content\n                 * is executed before post link widget\n                 */\n                return {\n                    pre: preLink,\n                    post: postLink\n                };\n            }\n        };\n\n    });","\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/**\n * The widget service provide helper functions to render widgets and their content.\n */\nangular.module('adf')\n  .factory('widgetService', function($http, $q, $sce, $templateCache, dashboard) {\n    'use strict';\n\n    function parseUrl(url) {\n      var parsedUrl = url;\n      if (url.indexOf('{widgetsPath}') >= 0) {\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\n                .replace('//', '/');\n        if (parsedUrl.indexOf('/') === 0) {\n          parsedUrl = parsedUrl.substring(1);\n        }\n      }\n      return parsedUrl;\n    }\n\n    var exposed = {};\n\n    exposed.getTemplate = function(widget){\n      var deferred = $q.defer();\n\n      if (widget.template) {\n        deferred.resolve(widget.template);\n      } else if (widget.templateUrl) {\n        // try to fetch template from cache\n        var tpl = $templateCache.get(widget.templateUrl);\n        if (tpl) {\n          deferred.resolve(tpl);\n        } else {\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\n          $http.get(url)\n               .success(function(response) {\n                 // put response to cache, with unmodified url as key\n                 $templateCache.put(widget.templateUrl, response);\n                 deferred.resolve(response);\n               })\n               .error(function() {\n                 deferred.reject('could not load template');\n               });\n        }\n      }\n\n      return deferred.promise;\n    };\n\n    return exposed;\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf')\n    .directive('adfWidget', function($injector, $q, $log, $uibModal, $rootScope, $interval, dashboard, adfTemplatePath, Filter) {\n        function preLink($scope) {\n            var definition = $scope.definition;\n\n            if (definition) {\n                var w = dashboard.widgets[definition.type];\n                if (w) {\n                    // pass title\n                    if (!definition.title) {\n                        definition.title = w.title;\n                    }\n\n                    if (!definition.titleTemplateUrl) {\n                        definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\n                        if (w.titleTemplateUrl) {\n                            definition.titleTemplateUrl = w.titleTemplateUrl;\n                        }\n                    }\n\n                    if (!definition.editTemplateUrl) {\n                        definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\n                        if (w.editTemplateUrl) {\n                            definition.editTemplateUrl = w.editTemplateUrl;\n                        }\n                    }\n\n                    if (!definition.titleTemplateUrl) {\n                        definition.frameless = w.frameless;\n                    }\n\n                    if (!definition.styleClass) {\n                        definition.styleClass = w.styleClass;\n                    }\n\n                    // set id for sortable\n                    if (!definition.wid) {\n                        definition.wid = dashboard.id();\n                    }\n\n                    // pass copy of widget to scope\n                    $scope.widget = angular.copy(w);\n\n                    // create config object\n                    var config = definition.config;\n                    if (config) {\n                        if (angular.isString(config)) {\n                            config = angular.fromJson(config);\n                        }\n                    } else {\n                        config = {};\n                    }\n\n                    if (typeof $scope.widget.show_modal_footer === \"undefined\") {\n                        $scope.widget.show_modal_footer = true;\n                    }\n\n                    if (typeof $scope.widget.show_reload_config === \"undefined\") {\n                        $scope.widget.show_reload_config = true;\n                    }\n\n                    // pass config to scope\n                    $scope.config = config;\n\n                    // collapse exposed $scope.widgetState property\n                    if (!$scope.widgetState) {\n                        $scope.widgetState = {};\n                        $scope.widgetState.isCollapsed = (w.collapsed === true) ? w.collapsed : false;\n                    }\n\n                } else {\n                    $log.warn('could not find widget ' + definition.type);\n                }\n            } else {\n                $log.debug('definition not specified, widget was probably removed');\n            }\n        }\n\n        function postLink($scope, $element) {\n            var definition = $scope.definition;\n            if (!definition) {\n                $log.debug('widget not found');\n                return;\n            }\n            if (!$scope.config) {\n                $scope.config = {};\n            }\n\n            var config = $scope.config;\n\n            // bind close function\n            var deleteWidget = function() {\n                var column = $scope.col;\n                if (column) {\n                    var index = column.widgets.indexOf(definition);\n                    if (index >= 0) {\n                        column.widgets.splice(index, 1);\n                    }\n                }\n                $element.remove();\n                $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n            };\n\n            $scope.remove = function() {\n                if ($scope.options.enableConfirmDelete) {\n                    var deleteScope = $scope.$new();\n\n                    var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\n                    if (definition.deleteTemplateUrl) {\n                        deleteTemplateUrl = definition.deleteTemplateUrl;\n                    }\n                    var opts = {\n                        scope: deleteScope,\n                        templateUrl: deleteTemplateUrl,\n                        backdrop: 'static'\n                    };\n                    var instance = $uibModal.open(opts);\n\n                    deleteScope.closeDialog = function() {\n                        instance.close();\n                        deleteScope.$destroy();\n                    };\n                    deleteScope.deleteDialog = function() {\n                        deleteWidget();\n                        deleteScope.closeDialog();\n                    };\n                } else {\n                    deleteWidget();\n                }\n            };\n\n\n            $scope.print = function() {\n                if (!$scope.editMode) {\n                    $scope.$broadcast('widgetPrint');\n                }\n            }\n\n            $scope.isExecuteOperationEnabled = function() {\n\n                if (config.entityKey)\n                    return true;\n                var filter = config.filter;\n                if (typeof filter === \"string\") {\n                    return filter.length > 0;\n                }\n                if (typeof filter === \"object\") {\n                    return filter.value.length > 2 && filter.oql;\n                }\n                return false;\n            }\n\n            $scope.executeOperation = function() {\n                if (!$scope.editMode) {\n\n                    $scope.$parent.$broadcast('widgetExecuteOperation');\n                }\n            };\n\n            $scope.filter = {\n                value: \"\"\n            };\n            $scope.sort = {\n                value: \"\",\n                direction: \"\"\n            };\n\n            $scope.toggleAdvanced = 1;\n            var filter = config.filter;\n            if (typeof filter === \"object\" && filter.oql && filter.oql.length > 2) {\n                $scope.search = {\n                    oql: filter.oql,\n                    json: filter.value\n                };\n                $scope.toggleAdvanced = 0;\n            } else if (typeof filter === \"string\") {\n                $scope.search = {\n                    quick: filter\n                };\n                $scope.toggleAdvanced = 1;\n            } else if (typeof filter === \"object\" && filter.fields) {\n                $scope.search = {\n                    customFilter: filter.fields\n                };\n                $scope.search.fields = [];\n                angular.forEach(filter.fields, function(v, key) {\n                    $scope.search.fields.push(v.name);\n                });\n                $scope.toggleAdvanced = 2;\n            } else {\n                $scope.search = {\n                    quick: filter = \"\"\n                };\n            }\n\n            $scope.toggleFilter = function(advanced) {\n                $scope.toggleAdvanced = advanced;\n            };\n            $scope.filterAvailable = false;\n            $scope.showFilter = function() {\n                $scope.filterAvailable = $scope.filterAvailable === true ? false : true;\n            };\n\n            $scope.showFinalFilter = false;\n\n            $scope.launchSearching = function() {\n                var widget = {\n                    definition: definition,\n                    element: $element\n                };\n\n                $rootScope.$broadcast('adfLaunchSearchingFromWidget', widget, $scope.config.filter);\n                $scope.reload(true);\n            }\n            $scope.addCustomFilter = function(key) {\n                $scope.search.customFilter = $scope.search.customFilter ? $scope.search.customFilter : [];\n                $scope.search.customFilter.push({\n                    name: key,\n                    value: ''\n                });\n            }\n\n            $scope.launchCustomFilter = function() {\n                if ($scope.search.customFilter && $scope.search.customFilter.length > 0) {\n                    $scope.search.oql = $scope.search.json = '';\n\n                    $scope.config.filter = {\n                        value: {\n                            and: []\n                        },\n                        fields: $scope.search.customFilter\n                    }\n                    angular.forEach($scope.search.customFilter, function(v, key) {\n                        if (v.value) {\n                            var like = {};\n                            like[v.name] = v.value;\n                            $scope.config.filter.value.and.push({\n                                'like': like\n                            });\n                        }\n\n                    });\n                    $scope.config.filter.value = JSON.stringify($scope.config.filter.value);\n                }\n\n                $scope.launchSearching();\n            }\n\n\n\n            $scope.deleteFilter = function(value, model) {\n                angular.forEach($scope.search.customFilter, function(v, key) {\n                    if (v.name === value) {\n                        $scope.search.customFilter.splice(key, 1);\n                    }\n                });\n                if ($scope.search.customFilter.length === 0) {\n                    $scope.config.filter = {};\n                }\n            };\n\n            $scope.launchSearchingAdv = function() {\n                if (!$scope.filterApplied) {\n                    $scope.search.quick = '';\n                    if ($scope.search.json === '' || $scope.search.json === '{}' || (!angular.isString($scope.search.json) && Object.keys($scope.search.json).length === 0)) {\n                        $scope.config.filter = {\n                            oql: '',\n                            value: ''\n                        };\n                    } else {\n                        $scope.config.filter = {\n                            oql: $scope.search.oql,\n                            value: $scope.search.json\n                        };\n                    }\n                    $scope.launchSearching();\n                    $scope.filterApplied = true;\n                }\n            }\n\n            $scope.applyFilter = function(event) {\n                $scope.launchSearching();\n            }\n\n            $scope.launchSearchingQuick = function() {\n                if (!$scope.filterApplied) {\n                    $scope.search.oql = $scope.search.json = '';\n                    $scope.config.filter = $scope.search.quick;\n                    $scope.launchSearching();\n                    $scope.filterApplied = true;\n                }\n            }\n\n            var windowTimeChanged = $scope.$on('onWindowTimeChanged', function(event, timeObj) {\n                $scope.config.windowFilter = timeObj ? timeObj : (config.windowFilter ? {} : timeObj);\n                var widget = {\n                    definition: definition,\n                    element: $element\n                }\n                $rootScope.$broadcast('adfWindowTimeChangedFromWidget', widget, $scope.config.windowFilter);\n                $scope.reload();\n            });\n\n            $scope.enter = function(event) {\n                var keycode = (event.keyCode ? event.keyCode : event.which);\n                if (keycode === 13) {\n                    if ($scope.toggleAdvanced === 0)\n                        $scope.launchSearchingAdv();\n                    if ($scope.toggleAdvanced === 1)\n                        $scope.launchSearchingQuick();\n                    if ($scope.toggleAdvanced === 2)\n                        $scope.launchCustomFilter();\n\n                } else if (keycode === 19) {\n                    $scope.showFinalFilter = $scope.showFinalFilter === false ? true : false;\n                } else {\n                    $scope.filterApplied = false;\n                }\n            }\n\n\n            $scope.customSelectors = [];\n            $scope.getCustomSelectors = function() {\n                if ($scope.config.customSelectors) {\n                    $scope.customSelectors = $scope.config.customSelectors;\n                } else {\n                    config.widgetSelectors().findFields(\"\").then(function(fields) {\n                        $scope.customSelectors = fields;\n                        $scope.$apply();\n                    }).catch(function(err) {\n                        $log.error(err);\n                    });\n                }\n            }\n\n            $scope.customFilter = [];\n            $scope.getcustomFilter = function() {\n                config.widgetSelectors().findFields(\"\").then(function(fields) {\n                    $scope.customFilter = fields;\n                    $scope.$apply();\n                }).catch(function(err) {\n                    $log.error(err);\n                });\n\n            }\n\n            $scope.ifCustomFilter = function() {\n                return $scope.customSelectors && config.sort && $scope.definition.type === 'FullDevicesList' && $scope.toggleAdvanced === 2;\n            }\n\n            $scope.showCustomFields = function() {\n                return $scope.definition.type === 'FullDevicesList' && $scope.toggleAdvanced === 2 && $scope.search.customFilter && $scope.filterAvailable && !$scope.editMode;\n            }\n\n            $scope.changeDirection = function() {\n                var direction = config.sort.direction;\n                if (direction === 'DESCENDING') {\n                    $scope.config.sort.direction = 'ASCENDING'\n                } else if (direction === 'ASCENDING') {\n                    $scope.config.sort.direction = 'DESCENDING'\n                }\n                $scope.reload();\n            }\n\n            $scope.changeDefaultTab = function() {\n\n\n                $scope.reload();\n            }\n\n            $scope.debugQuery = function() {\n                Filter.parseQuery($scope.search.oql || '')\n                    .then(function(data) {\n                        //$scope.elementos = data;\n                        $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\n                        $scope.unknownWords = '';\n                        $scope.filter.error = null;\n                    })\n                    .catch(function(err) {\n                        $scope.filter.error = err;\n                        // Tratar el error\n                    });\n\n            }\n\n            $scope.autocomplete_options = function() {\n                var autocomplete_options = {\n                    suggest: Filter.suggest_field_delimited,\n                    customSelectors: config.widgetSelectors()\n                };\n\n                return autocomplete_options;\n\n            };\n\n            // Multiple selection\n            $scope.selectedItems = {};\n\n            // Gestor de seleccion\n            $scope.selectionManager = {\n                currentSelection: $scope.selectedItems,\n                isSelected: function(key, obj) {\n                    if ($scope.selectedItems[key] && !angular.isUndefined(obj)) {\n                        $scope.selectedItems[key].data = obj;\n                    }\n\n                    return $scope.selectedItems[key] ? true : false;\n                },\n                totalSelected: function() {\n                    return Object.keys($scope.selectedItems).length;\n                }\n            };\n\n            $scope.manageSelectedItems = function() {\n                var selectionScope = $scope.$new();\n\n                selectionScope.selectionConfig = config.selectionConfig;\n\n                selectionScope.selectedItems = [];\n                angular.forEach($scope.selectedItems, function(value, key) {\n                    selectionScope.selectedItems.push({\n                        key: key,\n                        value: value\n                    });\n                });\n\n                selectionScope.currentSelection = {\n                    selected: selectionScope.selectedItems\n                };\n\n                var manageItemsSelectedTemplate = adfTemplatePath + 'widget-selection.html';\n                var opts = {\n                    scope: selectionScope,\n                    templateUrl: manageItemsSelectedTemplate,\n                    backdrop: 'static',\n                    size: 'lg',\n                    animation: true\n                };\n\n                var instance = $uibModal.open(opts);\n\n                selectionScope.restoreSelection = function() {\n                    selectionScope.currentSelection = {\n                        selected: selectionScope.selectedItems\n                    };\n                };\n\n                selectionScope.clearSelection = function() {\n                    selectionScope.currentSelection.selected = [];\n                };\n\n                // Cierra sy guarda los datos de nueva selección\n                selectionScope.applyFilter = function(type) {\n                    var customOql = selectionScope.selectionConfig.filterAction(selectionScope.currentSelection.selected, type);\n\n                    if (!angular.isUndefined(customOql) && customOql !== null) {\n                        $scope.toggleAdvanced = 0;\n                        Filter.parseQuery(customOql).then(function(data) {\n                            $scope.search.oql = customOql;\n                            $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\n                            $scope.unknownWords = '';\n                            $scope.filter.error = null;\n\n                            $scope.launchSearchingAdv();\n                        }).catch(function(err) {\n                            $scope.filter.error = err;\n                        });\n                    }\n                };\n\n                selectionScope.executeOperation = function(operationType) {\n                    if (!$scope.editMode) {\n                        $scope.$parent.$broadcast('widgetExecuteOperation', {\n                            'selectedItems': selectionScope.currentSelection.selected,\n                            'type': operationType\n                        });\n                    }\n                };\n\n                // Cierra sy guarda los datos de nueva selección\n                selectionScope.saveChangesDialog = function() {\n                    var finalSelection = {};\n                    angular.forEach(selectionScope.currentSelection.selected, function(data, idx) {\n                        finalSelection[data.key] = {\n                            data: data.value.data,\n                            visible: data.value.visible\n                        };\n                    });\n\n                    $scope.selectedItems = angular.copy(finalSelection);\n                    $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n\n                    $scope.selectionManager.lastItem = {};\n                    $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n\n                    instance.close();\n                    selectionScope.$destroy();\n                };\n\n                // Cierra sin realizar ninguna acción\n                selectionScope.closeDialog = function() {\n                    instance.close();\n                    selectionScope.$destroy();\n                };\n            };\n\n\n            // bind edit function\n            $scope.edit = function() {\n                var editScope = $scope.$new();\n                editScope.definition = angular.copy(definition);\n\n                var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\n                if (definition.editTemplateUrl) {\n                    adfEditTemplatePath = definition.editTemplateUrl;\n                }\n\n                var opts = {\n                    scope: editScope,\n                    templateUrl: adfEditTemplatePath,\n                    backdrop: 'static',\n                    size: 'lg'\n                };\n\n                var instance = $uibModal.open(opts);\n\n                editScope.closeDialog = function() {\n                    instance.close();\n                    editScope.$destroy();\n                };\n\n                // TODO create util method\n                function createApplyPromise(result) {\n                    var promise;\n                    if (typeof result === 'boolean') {\n                        var deferred = $q.defer();\n                        if (result) {\n                            deferred.resolve();\n                        } else {\n                            deferred.reject();\n                        }\n                        promise = deferred.promise;\n                    } else {\n                        promise = $q.when(result);\n                    }\n                    return promise;\n                }\n\n                editScope.saveDialog = function() {\n                    // clear validation error\n                    editScope.validationError = null;\n\n                    // build injection locals\n                    var widget = $scope.widget;\n\n                    // create a default apply method for widgets\n                    // without edit mode\n                    // see issue https://goo.gl/KHPQLZ\n                    var applyFn;\n                    if (widget.edit) {\n                        applyFn = widget.edit.apply;\n                    } else {\n                        applyFn = function() {\n                            return true;\n                        };\n                    }\n\n                    // injection locals\n                    var locals = {\n                        widget: widget,\n                        definition: editScope.definition,\n                        config: editScope.definition.config\n                    };\n\n                    // invoke apply function and apply if success\n                    var result = $injector.invoke(applyFn, applyFn, locals);\n                    createApplyPromise(result).then(function() {\n                        definition.title = editScope.definition.title;\n                        angular.extend(definition.config, editScope.definition.config);\n\n                        editScope.closeDialog();\n\n                        if (widget.edit && widget.edit.reload) {\n                            $scope.setReloadTimeout();\n                            // reload content after edit dialog is closed\n                            $scope.$broadcast('widgetConfigChanged');\n                        }\n                    }, function(err) {\n                        if (err) {\n                            editScope.validationError = err;\n                        } else {\n                            editScope.validationError = 'VALIDATION_DURING_APPLY_FAILED';\n                        }\n                    });\n                };\n\n            };\n\n\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            templateUrl: dashboard.customWidgetTemplatePath ? dashboard.customWidgetTemplatePath : adfTemplatePath + 'widget.html',\n            scope: {\n                definition: '=',\n                col: '=column',\n                editMode: '=',\n                options: '=',\n                widgetState: '='\n            },\n            controller: function($scope) {\n                var adfDashboardCollapseExpand = $scope.$on('adfDashboardCollapseExpand', function(event, args) {\n                    $scope.widgetState.isCollapsed = args.collapseExpandStatus;\n                });\n\n                var adfWidgetEnterEditMode = $scope.$on('adfWidgetEnterEditMode', function(event, widget) {\n                    if (dashboard.idEquals($scope.definition.wid, widget.wid)) {\n                        $scope.edit();\n                    }\n                });\n\n                var adfIsEditMode = $scope.$on('adfIsEditMode', function(event, widget) {\n                    $scope.editing = true;\n                });\n\n                var adfDashboardChanged = $scope.$on('adfDashboardChanged', function(event, widget) {\n                    $scope.editing = false;\n                });\n\n                var adfDashboardEditsCancelled = $scope.$on('adfDashboardEditsCancelled', function(event, widget) {\n                    $scope.editing = false;\n                });\n\n                $scope.widgetClasses = function(w, definition) {\n                    var classes = definition.styleClass || '';\n                    // w is undefined, if the type of the widget is unknown\n                    // see issue #216\n                    if (!w || !w.frameless || $scope.editMode) {\n                        classes += ' panel panel-default';\n                    }\n                    return classes;\n                };\n\n                $scope.openFullScreen = function() {\n\n                    $scope.$emit('adfOpenModalWidgetFromOther', $scope.definition.type, $scope.config);\n\n                    // var definition = $scope.definition;\n                    // var fullScreenScope = $scope.$new();\n                    // var opts = {\n                    //     scope: fullScreenScope,\n                    //     templateUrl: adfTemplatePath + 'widget-fullscreen.html',\n                    //     size: definition.modalSize || 'lg', // 'sm', 'lg'\n                    //     backdrop: 'static',\n                    //     windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n                    // };\n\n                    // var instance = $uibModal.open(opts);\n\n                    // fullScreenScope.reload = function() {\n                    //     fullScreenScope.$broadcast('widgetReload');\n                    // };\n\n                    // fullScreenScope.closeDialog = function() {\n                    //     instance.close();\n                    //     fullScreenScope.$destroy();\n                    // };\n                };\n\n                $scope.openFilter = function() {\n\n                }\n\n                $scope.openAboutScreen = function(size) {\n                    size = 'md';\n                    var modalInstance = $uibModal.open({\n                        animation: true,\n                        templateUrl: 'widgetAboutModal.html',\n                        controller: function($scope, $uibModalInstance, information) {\n                            $scope.about = {};\n                            $scope.about.info = information;\n                            $scope.ok = function() {\n                                $uibModalInstance.close();\n                            };\n                        },\n                        'size': size,\n                        resolve: {\n                            information: function() {\n                                return $scope.config.about;\n                            }\n                        }\n                    });\n\n                    modalInstance.result.then(function(selectedItem) {\n                        $scope.selected = selectedItem;\n                    }, function() {\n                        $log.info('Modal dismissed at: ' + new Date());\n                    });\n                };\n\n                $scope.saveWidgetScreen = function(wId) {\n                    $scope.$emit('generateSnapshot', {\n                        'objectSelector': '.widget_' + wId,\n                        'fileName': 'capture_' + new Date().getTime()\n                    });\n                };\n\n                var onWindowTimeChanged = function(timeObj) {\n                    var filter = {\n                        and: []\n                    };\n                    if (timeObj && timeObj.from) {\n                        filter.and.push({\n                            gt: {\n                                operationDate: timeObj.from\n                            }\n                        });\n\n                        if (timeObj.to) {\n                            filter.and.push({\n                                lt: {\n                                    operationDate: timeObj.to\n                                }\n                            });\n                        }\n                    } else {\n                        filter = null;\n                    }\n                    return filter;\n                }\n\n                var createQuickFilter = function(fieldsQuickSearch, filter) {\n                    var _filter = {\n                        or: []\n                    };\n                    var criteria;\n                    fieldsQuickSearch.forEach(function(field) {\n                        criteria = {};\n                        criteria[field.operator] = {};\n                        criteria[field.operator][field.name] = $scope.config.filter;\n                        _filter.or.push(criteria);\n                    });\n                    return _filter;\n                }\n\n                $scope.downloadCsv = function() {\n                    var columns = $scope.config.columns;\n                    var scope_filter = $scope.config.filter;\n                    var extra_filter;\n                    var final_filter = {};\n                    var order = $scope.config.sort ? $scope.config.sort : undefined;\n                    if ($scope.config.windowFilter) {\n                        var window_filter = $scope.config.onWindowTimeChanged($scope.config.windowFilter);\n                        if (window_filter && window_filter.and) {\n                            extra_filter = {\n                                and: window_filter.and\n                            };\n                        }\n                    }\n                    var filter;\n                    if (scope_filter.value && scope_filter.value.length > 4) {\n                        filter = JSON.parse(scope_filter.value);\n                    } else if (typeof scope_filter === 'string' && scope_filter.trim() !== '') {\n                        filter = createQuickFilter($scope.config.fieldsQuickSearch, scope_filter);\n                    }\n                    if (extra_filter) {\n                        if (filter) {\n                            final_filter = {\n                                and: [extra_filter, filter]\n                            };\n                        } else {\n                            final_filter = extra_filter;\n                        }\n                    } else {\n                        final_filter = filter;\n                    }\n                    $scope.$broadcast('downloadCsv', {\n                        'columns': columns,\n                        'filter': final_filter,\n                        'order': order\n                    });\n                };\n\n                $scope.generateQR = function() {\n                    $scope.$broadcast('generateQR');\n                };\n\n                var addItemToSelection = $scope.$on('addItemToSelection', function(event, item) {\n                    if (!$scope.selectedItems[item.key]) {\n                        $scope.selectedItems[item.key] = {\n                            data: item.data,\n                            visible: item.visible\n                        };\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n                        item.isSelected = true;\n                        $scope.selectionManager.lastItem = item;\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n                    }\n\n                });\n\n                var removeItemFromSelection = $scope.$on('removeItemFromSelection', function(event, item) {\n                    if ($scope.selectedItems[item.key]) {\n                        delete $scope.selectedItems[item.key];\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n                        item.isSelected = false;\n                        $scope.selectionManager.lastItem = item;\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n                    }\n                });\n\n                // bind reload function\n                var stopReloadTimeout;\n\n                $scope.setReloadTimeout = function() {\n                    var config = $scope.config || $scope.definition.config;\n\n                    if (config) {\n                        var reloadPeriod = config.reloadPeriod;\n                        if (!isNaN(reloadPeriod) && (reloadPeriod * 1) !== 0) {\n                            if (angular.isDefined(stopReloadTimeout)) {\n                                $interval.cancel(stopReloadTimeout)\n                                stopReloadTimeout = undefined;\n                            };\n                            stopReloadTimeout = $interval($scope.reload, (reloadPeriod * 1000));\n                        } else if (stopReloadTimeout) {\n                            $interval.cancel(stopReloadTimeout);\n                        }\n                    }\n                }\n\n                $scope.reload = function(completeReload) {\n                    if (completeReload) {\n                        $scope.$broadcast('widgetReload', completeReload);\n                    } else {\n                        $scope.$broadcast('widgetReload');\n                    }\n\n                    $scope.setReloadTimeout();\n                };\n\n                // verificacion de periodo de refresco\n                $scope.setReloadTimeout();\n\n                $scope.$on('$destroy', function() {\n                    adfDashboardCollapseExpand();\n                    adfWidgetEnterEditMode();\n                    adfIsEditMode();\n                    adfDashboardChanged();\n                    adfDashboardEditsCancelled();\n                    addItemToSelection();\n                    removeItemFromSelection();\n                    $interval.cancel(stopReloadTimeout);\n                });\n            },\n            compile: function() {\n\n                /**\n                 * use pre link, because link of widget-content\n                 * is executed before post link widget\n                 */\n                return {\n                    pre: preLink,\n                    post: postLink\n                };\n            }\n        };\n\n    });",null,"(function(window, undefined) {'use strict';\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf', ['adf.provider', 'ui.bootstrap', 'opengate-angular-js'])\n    .value('adfTemplatePath', '../src/templates/')\n    .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\n    .value('adfVersion', '4.9.0');\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/* global angular */\nangular.module('adf')\n    .directive('adfDashboardColumn', function($log, $compile, $rootScope, adfTemplatePath, dashboard) {\n        \n\n        return {\n            restrict: 'E',\n            replace: true,\n            scope: {\n                column: '=',\n                editMode: '=',\n                continuousEditMode: '=',\n                adfModel: '=',\n                options: '='\n            },\n            templateUrl: adfTemplatePath + 'dashboard-column.html',\n            link: function($scope, $element) {\n                // set id\n                var col = $scope.column;\n                if (!col.cid) {\n                    col.cid = dashboard.id();\n                }\n            }\n        };\n    });\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @ngdoc directive\n * @name adf.directive:adfDashboard\n * @element div\n * @restrict EA\n * @scope\n * @description\n *\n * `adfDashboard` is a directive which renders the dashboard with all its\n * components. The directive requires a name attribute. The name of the\n * dashboard can be used to store the model.\n *\n * @param {string} name name of the dashboard. This attribute is required.\n * @param {boolean=} editable false to disable the editmode of the dashboard.\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\n * @param {object=} adfModel model object of the dashboard.\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\n *                   events during edit mode not reset it if edit mode is exited.\n * @param {boolean=} categories enable categories for the add widget dialog.\n */\n\nangular.module('adf')\n    .directive('adfDashboard', function($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath, $faIcons, $translate) {\n        \n\n        function stringToBoolean(string) {\n            switch (angular.isDefined(string) ? string.toLowerCase() : null) {\n                case 'true':\n                case 'yes':\n                case '1':\n                    return true;\n                case 'false':\n                case 'no':\n                case '0':\n                case null:\n                    return false;\n                default:\n                    return Boolean(string);\n            }\n        }\n\n        function copyWidgets(source, target) {\n            if (source.widgets && source.widgets.length > 0) {\n                var w = source.widgets.shift();\n                while (w) {\n                    target.widgets.push(w);\n                    w = source.widgets.shift();\n                }\n            }\n        }\n\n        function createConfiguration(type) {\n            var cfg = {};\n            var config = dashboard.widgets[type].config;\n            if (config) {\n                cfg = angular.copy(config);\n            }\n            return cfg;\n        }\n\n        function createWidget(type) {\n            var wdgt = {};\n            var widget = dashboard.widgets[type];\n            if (widget) {\n                wdgt = angular.copy(widget);\n            }\n            return wdgt;\n        }\n\n        /**\n         * Adds the widget to first column of the model.\n         *\n         * @param dashboard model\n         * @param widget to add to model\n         * @param name name of the dashboard\n         */\n        function addNewWidgetToModel(model, widget, name, forceToSave) {\n            if (model) {\n                if (!model.grid) {\n                    model.grid = [];\n                }\n\n                var newWidget = {\n                    width: 3,\n                    height: 2,\n                    x: 0,\n                    y: 0,\n                    definition: widget\n                };\n                model.grid.push(newWidget);\n\n                $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\n\n                if (forceToSave) {\n                    $rootScope.$broadcast('adfDashboardChanged', name, model);\n                }\n            } else {\n                $log.error('model is undefined');\n            }\n        }\n\n        /**\n         * Checks if the edit mode of the widget should be opened immediately.\n         *\n         * @param widget type\n         */\n        function isEditModeImmediate(type) {\n            var widget = dashboard.widgets[type];\n            return widget && widget.edit && widget.edit.immediate;\n        }\n\n        /**\n         * Opens the edit mode of the specified widget.\n         *\n         * @param dashboard scope\n         * @param widget\n         */\n        function openEditMode($scope, widget) {\n            // wait some time before fire enter edit mode event\n            $timeout(function() {\n                $scope.$broadcast('adfWidgetEnterEditMode', widget);\n            }, 200);\n        }\n\n        /**\n         * Splits an object into an array multiple objects inside.\n         *\n         * @param object source object\n         * @param size size of array\n         *\n         * @return array of splitted objects\n         */\n        function split(object, size) {\n            var arr = [];\n            var i = 0;\n            angular.forEach(object, function(value, key) {\n                var index = i++ % size;\n                if (!arr[index]) {\n                    arr[index] = {};\n                }\n                arr[index][key] = value;\n            });\n            return arr;\n        }\n\n        /**\n         * Creates object with the category name as key and an array of widgets as value.\n         *\n         * @param widgets array of widgets\n         *\n         * @return array of categories\n         */\n        function createCategories(widgets) {\n            var categories = {};\n            angular.forEach(widgets, function(widget, key) {\n                var category = widget.category;\n                // if the widget has no category use a default one\n                if (!category) {\n                    category = 'ADF.CATEGORY.MISCELANOUS';\n                }\n\n                widget.title = $translate.instant(widget.title);\n                widget.description = $translate.instant(widget.description);\n                widget.category = $translate.instant(widget.category);\n\n                // push widget to category array\n                if (angular.isUndefined(categories[widget.category])) {\n                    categories[widget.category] = {\n                        widgets: {}\n                    };\n                }\n\n                categories[widget.category].widgets[key] = widget;\n            });\n            return categories;\n        }\n\n        function createCategoriesList(widgets) {\n            var categories = [];\n            angular.forEach(widgets, function(widget, key) {\n                if (!widget.category) {\n                    widget.category = 'ADF.CATEGORY.MISCELLANEOUS';\n                }\n\n                widget.title = $translate.instant(widget.title);\n                widget.description = $translate.instant(widget.description);\n                widget.category = $translate.instant(widget.category);\n\n                if (!widget.categoryTags) {\n                    widget.categoryTags = 'ADF.CATEGORY.TAG.MISCELLANEOUS';\n                }\n\n                var categoriesTmp = widget.categoryTags.split(',');\n\n                angular.forEach(categoriesTmp, function(category, idx) {\n                    // push widget to category array\n                    var translatedCat = $translate.instant(category);\n                    if (categories.indexOf(translatedCat) === -1)\n                        categories.push(translatedCat);\n                });\n\n            });\n            return categories;\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            scope: {\n                name: '@',\n                collapsible: '@',\n                editable: '@',\n                editMode: '@',\n                continuousEditMode: '=',\n                maximizable: '@',\n                adfModel: '=',\n                adfWidgetFilter: '=',\n                categories: '@',\n                hideButtons: '=',\n                extraData: '='\n            },\n            controller: function($scope) {\n                var model = {};\n                var widgetFilter = null;\n                var name = $scope.name;\n\n                // Watching for changes on adfModel\n                $scope.$watch('adfModel', function(oldVal, newVal) {\n                    // has model changed or is the model attribute not set\n                    if (newVal !== null || (oldVal === null && newVal === null)) {\n                        model = $scope.adfModel;\n                        widgetFilter = $scope.adfWidgetFilter;\n\n                        if (model) {\n                            if (!model.title) {\n                                model.title = $translate.instant('ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD');\n                            }\n                            if (!model.titleTemplateUrl) {\n                                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\n                            }\n                            $scope.model = model;\n                        } else {\n                            $log.error('could not find or create model');\n                        }\n                    }\n                }, true);\n\n                // edit mode\n                $scope.editMode = false;\n                $scope.editClass = '';\n\n                function getNewModalScope() {\n                    var scope = $scope.$new();\n                    return scope;\n                }\n\n                $scope.deleteDashboard = function() {\n                    var dashData = {\n                        id: model.id,\n                        name: model.title\n                    };\n\n                    $rootScope.$broadcast('dashboardDelete', dashData);\n                };\n\n                $scope.toggleEditMode = function(openConfigWindow) {\n                    $scope.editMode = !$scope.editMode;\n                    if ($scope.editMode) {\n                        if (!$scope.continuousEditMode) {\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\n                            $rootScope.$broadcast('adfIsEditMode');\n                        }\n\n                        if (openConfigWindow) {\n                            $scope.editDashboardDialog();\n                        }\n                    }\n\n                    if (!$scope.editMode) {\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\n                    }\n                };\n\n                $scope.saveTemporalDashboard = function() {\n                    delete model.temporal;\n                    $rootScope.$broadcast('adfDashboardChanged', name, model);\n                };\n\n                var adfToggleEditMode = $scope.$on('adfToggleEditMode', function(event, isNewDashboard) {\n                    if (isNewDashboard) {\n                        $scope.toggleEditMode(true);\n                    } else {\n                        $scope.toggleEditMode();\n                    }\n                });\n\n                var adfCancelEditMode = $scope.$on('adfCancelEditMode', function(event, isNewDashboard) {\n                    if ($scope.editMode) {\n                        $scope.cancelEditMode();\n                    }\n                });\n\n                var adfWidgetRemoved = $scope.$on('adfWidgetRemovedFromGrid', function(event, widget) {\n                    var index = null;\n                    angular.forEach($scope.adfModel.grid, function(widgetTmp, idx) {\n                        if (widgetTmp.definition.wid === widget.wid) {\n                            index = idx;\n                        }\n                    });\n\n                    if (index >= 0) {\n                        $scope.adfModel.grid.splice(index, 1);\n                        //$scope.gsHandler.commit();\n                    }\n                })\n\n                $scope.collapseAll = function(collapseExpandStatus) {\n                    $rootScope.$broadcast('adfDashboardCollapseExpand', {\n                        collapseExpandStatus: collapseExpandStatus\n                    });\n                };\n\n                $scope.cancelEditMode = function() {\n                    $scope.editMode = false;\n                    if (!$scope.continuousEditMode && ($scope.modelCopy !== $scope.adfModel)) {\n                        $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\n                    }\n                    $rootScope.$broadcast('adfDashboardEditsCancelled');\n                };\n\n                var adfEditDashboardDialog = $scope.$on('adfEditDashboardDialog', function(event, isNewDashboard) {\n                    if ($scope.editMode) {\n                        $scope.editDashboardDialog();\n                    }\n                });\n\n                var adfLaunchSearchingFromWidget = $scope.$on('adfLaunchSearchingFromWidget', function(event, widget, configFilter) {\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\n                });\n                var adfWindowTimeChangedFromWidget = $scope.$on('adfWindowTimeChangedFromWidget', function(event, widget, windowFilter) {\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\n                });\n\n                // edit dashboard settings\n                $scope.editDashboardDialog = function() {\n                    var editDashboardScope = getNewModalScope();\n                    // create a copy of the title, to avoid changing the title to\n                    // \"dashboard\" if the field is empty\n                    editDashboardScope.copy = {\n                        title: (model.title !== 'ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD' ? model.title : ''),\n                        description: model.description,\n                        icon: model.icon ? model.icon : 'fa-tachometer'\n                    };\n\n                    // pass icon list\n                    editDashboardScope.availableIcons = $faIcons.list();\n\n                    var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\n                    if (model.editTemplateUrl) {\n                        adfEditTemplatePath = model.editTemplateUrl;\n                    }\n                    var instance = $uibModal.open({\n                        scope: editDashboardScope,\n                        templateUrl: adfEditTemplatePath,\n                        backdrop: 'static',\n                        keyboard: false,\n                        size: 'lg'\n                    });\n\n\n                    editDashboardScope.closeDialog = function() {\n                        // copy the new title back to the model\n                        model.title = editDashboardScope.copy.title;\n                        model.description = editDashboardScope.copy.description;\n                        model.icon = editDashboardScope.copy.icon;\n\n                        // close modal and destroy the scope\n                        instance.close();\n                        editDashboardScope.$destroy();\n                    };\n                };\n\n                var adfOpenWidgetFromOther = $scope.$on('adfOpenWidgetFromOther', function(event, widget, config) {\n                    var internal_config = createConfiguration(widget);\n                    var _config = angular.merge({}, internal_config, config);\n                    var w = {\n                        type: widget,\n                        config: _config,\n                        title: _config.title\n                    };\n                    addNewWidgetToModel(model, w, name, !$scope.editMode);\n                });\n\n                var adfOpenModalWidgetFromOther = $scope.$on('adfOpenModalWidgetFromOther', function(event, widgetType, config) {\n                    var widget = createWidget(widgetType);\n                    widget.config = angular.merge({}, widget.config, config);\n                    widget.type = widgetType;\n                    if (widget.config.title) {\n                        widget.title = widget.config.title;\n                    }\n                    var fullScreenScope = $scope.$new();\n                    fullScreenScope.definition = fullScreenScope.widget = widget;\n                    var opts = {\n                        scope: fullScreenScope,\n                        templateUrl: adfTemplatePath + 'widget-fullscreen.html',\n                        size: fullScreenScope.definition.modalSize || 'ticket', // 'sm', 'lg'\n                        backdrop: 'static',\n                        windowClass: (fullScreenScope.definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n                    };\n\n                    if ($scope.model && !$scope.model.temporal) {\n                        fullScreenScope.persistDashboard = function() {\n                            $rootScope.$broadcast('adfOpenWidgetFromOther', this.$parent.widget.type, this.$parent.widget.config);\n                            this.closeDialog();\n                        }\n                    }\n\n                    var instance = $uibModal.open(opts);\n                    fullScreenScope.closeDialog = function() {\n                        instance.close();\n                        fullScreenScope.$destroy();\n                    };\n\n                });\n\n                var adfAddWidgetDialog = $scope.$on('adfAddWidgetDialog', function(event, isNewDashboard) {\n                    if (!model.temporal && model.editable) {\n                        if (!$scope.editMode) {\n                            $scope.editMode = true;\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\n                            $rootScope.$broadcast('adfIsEditMode');\n                        }\n\n                        $scope.addWidgetDialog();\n                    }\n                });\n\n                // add widget dialog\n                $scope.addScopeCfg = {\n                    widgetFilter: {},\n                    widgetSortingDirection: '',\n                    widgetSorting: 'priority'\n                };\n\n                $scope.addWidgetDialog = function() {\n                    var addScope = getNewModalScope();\n                    var widgets;\n                    if (angular.isFunction(widgetFilter)) {\n                        widgets = {};\n                        angular.forEach(dashboard.widgets, function(widget, type) {\n                            if (widgetFilter(widget, type, model)) {\n                                widgets[type] = widget;\n                            }\n                        });\n                    } else {\n                        widgets = dashboard.widgets;\n                    }\n                    addScope.widgets = widgets;\n\n                    angular.forEach(addScope.widgets, function(widget, type) {\n                        widget.key = type;\n                        if (!widget.category) {\n                            widget.category = 'Miscellaneous';\n                        }\n                    });\n\n                    // pass createCategories function to scope, if categories option is enabled\n                    if ($scope.options.categories) {\n                        addScope.createCategories = createCategories;\n                    } else {\n                        addScope.availableCategories = createCategoriesList(widgets);\n                    }\n\n                    var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\n                    if (model.addTemplateUrl) {\n                        adfAddTemplatePath = model.addTemplateUrl;\n                    }\n\n                    var opts = {\n                        scope: addScope,\n                        templateUrl: adfAddTemplatePath,\n                        backdrop: 'static',\n                        size: 'lg'\n                    };\n\n                    var instance = $uibModal.open(opts);\n\n                    addScope.widgetFilterCfg = $scope.addScopeCfg;\n\n                    addScope.addWidget = function(widget) {\n                        var w = {\n                            type: widget,\n                            config: createConfiguration(widget)\n                        };\n                        addNewWidgetToModel(model, w, name);\n                        // close and destroy\n                        instance.close();\n                        addScope.$destroy();\n\n                        // check for open edit mode immediately\n                        if (isEditModeImmediate(widget)) {\n                            openEditMode($scope, w);\n                        }\n                    };\n\n                    addScope.changeThumbnail = function(widget) {\n                        if (widget.images) {\n                            if (angular.isUndefined(widget._currThumb)) {\n                                widget._currThumb = 1;\n                            } else {\n                                widget._currThumb += 1;\n                            }\n\n\n                            if (widget._currThumb >= widget.images.length) {\n                                widget._currThumb = 0;\n                            }\n\n                            widget._currImg = widget.images[widget._currThumb];\n                        }\n                    };\n\n                    addScope.closeDialog = function() {\n                        // close and destroy\n                        instance.close();\n                        addScope.$destroy();\n                    };\n                };\n\n                $scope.addNewWidgetToModel = addNewWidgetToModel;\n\n                $scope.$on('destroy', function() {\n                    adfLaunchSearchingFromWidget();\n                    adfWindowTimeChangedFromWidget();\n                    adfToggleEditMode();\n                    adfOpenWidgetFromOther();\n                    adfOpenModalWidgetFromOther();\n                    adfCancelEditMode();\n                    adfAddWidgetDialog();\n                    adfEditDashboardDialog();\n                    adfWidgetRemoved();\n                });\n            },\n            link: function($scope, $element, $attr) {\n                // pass options to scope\n                var options = {\n                    name: $attr.name,\n                    editable: true,\n                    enableConfirmDelete: stringToBoolean($attr.enableConfirmDelete),\n                    maximizable: stringToBoolean($attr.maximizable),\n                    collapsible: stringToBoolean($attr.collapsible),\n                    categories: stringToBoolean($attr.categories),\n                    extraData: {}\n                };\n\n                if (angular.isDefined($attr.editable)) {\n                    options.editable = stringToBoolean($attr.editable);\n                }\n\n                if (angular.isDefined($scope.extraData)) {\n                    options.extraData = $scope.extraData;\n                }\n\n                options.extraData.editing = $scope.editMode;\n\n                $scope.options = options;\n            },\n            templateUrl: adfTemplatePath + 'dashboard.html'\n        };\n    });\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/* global angular */\nangular.module('adf')\n    .directive('adfDashboardGrid', function(adfTemplatePath) {\n        \n\n        function preLink($scope) {\n            $scope.gridOptions = {\n                cellHeight: 146,\n                verticalMargin: 10,\n                animate: true,\n                float: false,\n                //alwaysShowResizeHandle: /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),\n                alwaysShowResizeHandle: true,\n                minWidth: 768,\n                auto: true,\n                resizable: {\n                    handles: 'e, se, s, sw, w'\n                },\n                disableDrag: !$scope.editMode,\n                disableResize: !$scope.editMode\n            };\n\n            $scope.gsHandler = null;\n        }\n\n        return {\n            restrict: 'E',\n            scope: {\n                adfModel: '=',\n                editMode: '=',\n                continuousEditMode: '=',\n                options: '='\n            },\n            templateUrl: adfTemplatePath + 'dashboard-grid.html',\n            compile: function() {\n                return {\n                    pre: preLink,\n                };\n            },\n            controller: function($scope, $timeout) {\n                var dashEvents = [];\n                dashEvents.push($scope.$on('adfIsEditMode', function() {\n                    $timeout(function() {\n                        $scope.gsHandler.enable();\n                    }, 100);\n                }));\n\n                dashEvents.push($scope.$on('adfDashboardChanged', function() {\n                    $timeout(function() {\n                        $scope.gsHandler.disable();\n                    }, 100);\n                }));\n\n                dashEvents.push($scope.$on('adfDashboardEditsCancelled', function() {\n                    $timeout(function() {\n                        $scope.gsHandler.disable();\n                    }, 100);\n                }));\n\n                dashEvents.push($scope.$on('adfCancelEditMode', function() {\n                    $timeout(function() {\n                        $scope.gsHandler.disable();\n                    }, 100);\n                }));\n\n                dashEvents.push($scope.$on('adfWidgetAdded', function(event, name, model, widget) {\n                    $timeout(function() {\n                        $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\n                        $scope.gsHandler.enable();\n                    }, 100);\n                }));\n\n                $scope.onChange = function(event, items) {\n                    console.log(\"onChange event: \" + event + \" items:\" + items);\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\n                };\n\n                $scope.onDragStart = function(event, ui) {\n                    console.log(\"onDragStart event: \" + event + \" ui:\" + ui);\n                };\n\n                $scope.onDragStop = function(event, ui) {\n                    console.log(\"onDragStop event: \" + event + \" ui:\" + ui);\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\n                };\n\n                $scope.onResizeStart = function(event, ui) {\n                    console.log(\"onResizeStart event: \" + event + \" ui:\" + ui);\n                };\n\n                $scope.onResizeStop = function(event, ui) {\n                    console.log(\"onResizeStop event: \" + event + \" ui:\" + ui);\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\n                    $scope.$broadcast('OnResizeWidget')\n                };\n\n                $scope.onItemAdded = function(item) {\n                    console.log(\"onItemAdded item: \" + item);\n                };\n\n                $scope.onItemRemoved = function(item) {\n                    console.log(\"onItemRemoved item: \" + item);\n                };\n\n                $scope.$on('destroy', function() {\n                    dashEvents.forEach(function(dashEvt) {\n                        dashEvt();\n                    });\n                });\n            }\n        };\n    });\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .filter('adfOrderByObjectKey', function($filter) {\n    \n\n    return function(item, key){\n      var array = [];\n      angular.forEach(item, function(value, objectKey){\n        value[key] = objectKey;\n        array.push(value);\n      });\n      return $filter('orderBy')(array, key);\n    };\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\n/**\n * @ngdoc object\n * @name adf.dashboardProvider\n * @description\n *\n * The dashboardProvider can be used to register widgets.\n */\nangular.module('adf.provider', [])\n    .provider('dashboard', function() {\n\n        var widgets = {};\n        var widgetsPath = '';\n        var messageTemplate = '<div class=\"alert alert-primary\">{}</div>';\n        var loadingTemplate = '\\\n      <div class=\"progress progress-striped active\">\\n\\\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\n          <span class=\"sr-only\" translate>FORM.MSG.LOADING ...</span>\\n\\\n        </div>\\n\\\n      </div>';\n        var customWidgetTemplatePath = null;\n\n        // default apply function of widget.edit.apply\n        var defaultApplyFunction = function() {\n            return true;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#widget\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Registers a new widget.\n         *\n         * @param {string} name of the widget\n         * @param {object} widget to be registered.\n         *\n         *   Object properties:\n         *\n         *   - `title` - `{string=}` - The title of the widget.\n         *   - `description` - `{string=}` - Description of the widget.\n         *   - `category` - `{string=}` - Category of the widget.\n         *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\n         *   - `config` - `{object}` - Predefined widget configuration.\n         *   - `controller` - `{string=|function()=}` - Controller fn that should be\n         *      associated with newly created scope of the widget or the name of a\n         *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\n         *      if passed as a string.\n         *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\n         *      published to scope under the `controllerAs` name.\n         *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\n         *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\n         *   - `template` - `{string=|function()=}` - html template as a string.\n         *   - `templateUrl` - `{string=}` - path to an html template.\n         *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\n         *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n         *      be injected into the controller. If any of these dependencies are promises, the widget\n         *      will wait for them all to be resolved or one to be rejected before the controller is\n         *      instantiated.\n         *      If all the promises are resolved successfully, the values of the resolved promises are\n         *      injected.\n         *\n         *      The map object is:\n         *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n         *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n         *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\n         *        and the return value is treated as the dependency. If the result is a promise, it is\n         *        resolved before its value is injected into the controller.\n         *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n         *      on the scope of the widget.\n         *   - `edit` - `{object}` - Edit modus of the widget.\n         *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n         *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\n         *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n         *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\n         *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\n         *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n         *        on the scope of the widget.\n         *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\n         *        Default is true.\n         *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\n         *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\n         *        The function have to return a boolean or an promise which can be resolved to a boolean.\n         *        The function can use injection.\n         *\n         * @returns {Object} self\n         */\n        this.widget = function(name, widget) {\n            var w = angular.extend({\n                reload: false,\n                frameless: false\n            }, widget);\n            if (w.edit) {\n                var edit = {\n                    reload: true,\n                    immediate: false,\n                    apply: defaultApplyFunction\n                };\n                angular.extend(edit, w.edit);\n                w.edit = edit;\n            }\n            widgets[name] = w;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#widgetsPath\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Sets the path to the directory which contains the widgets. The widgets\n         * path is used for widgets with a templateUrl which contains the\n         * placeholder {widgetsPath}. The placeholder is replaced with the\n         * configured value, before the template is loaded, but the template is\n         * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\n         * The default value of widgetPaths is ''.\n         *\n         *\n         * @param {string} path to the directory which contains the widgets\n         *\n         * @returns {Object} self\n         */\n        this.widgetsPath = function(path) {\n            widgetsPath = path;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#messageTemplate\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the template for messages.\n         *\n         * @param {string} template for messages.\n         *\n         * @returns {Object} self\n         */\n        this.messageTemplate = function(template) {\n            messageTemplate = template;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#loadingTemplate\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the template which is displayed as\n         * long as the widget resources are not resolved.\n         *\n         * @param {string} template loading template\n         *\n         * @returns {Object} self\n         */\n        this.loadingTemplate = function(template) {\n            loadingTemplate = template;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#customWidgetTemplatePath\n         * @propertyOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the container template for the widgets\n         *\n         * @param {string} path to the custom widget template\n         *\n         * @returns {Object} self\n         */\n        this.customWidgetTemplatePath = function(templatePath) {\n            customWidgetTemplatePath = templatePath;\n            return this;\n        };\n\n        /**\n         * @ngdoc service\n         * @name adf.dashboard\n         * @description\n         *\n         * The dashboard holds all options and  widgets.\n         *\n         * @property {Array.<Object>} widgets Array of registered widgets.\n         * @property {string} widgetsPath Default path for widgets.\n         * @property {string} messageTemplate Template for messages.\n         * @property {string} loadingTemplate Template for widget loading.\n         * * @property {string} customWidgetTemplatePath Changes the container template for the widgets\n         *\n         * @returns {Object} self\n         */\n        this.$get = function() {\n            var cid = 0;\n\n            return {\n                widgets: widgets,\n                widgetsPath: widgetsPath,\n                messageTemplate: messageTemplate,\n                loadingTemplate: loadingTemplate,\n                customWidgetTemplatePath: customWidgetTemplatePath,\n\n                /**\n                 * @ngdoc method\n                 * @name adf.dashboard#id\n                 * @methodOf adf.dashboard\n                 * @description\n                 *\n                 * Creates an ongoing numeric id. The method is used to create ids for\n                 * columns and widgets in the dashboard.\n                 */\n                id: function() {\n                    return new Date().getTime() + '-' + (++cid);\n                },\n\n                /**\n                 * @ngdoc method\n                 * @name adf.dashboard#idEqual\n                 * @methodOf adf.dashboard\n                 * @description\n                 *\n                 * Checks if the given ids are equal.\n                 *\n                 * @param {string} id widget or column id\n                 * @param {string} other widget or column id\n                 */\n                idEquals: function(id, other) {\n                    // use toString, because old ids are numbers\n                    return ((id) && (other)) && (id.toString() === other.toString());\n                }\n            };\n        };\n\n    });\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf')\n    .directive('adfWidgetContent', function($log, $q, widgetService,\n        $compile, $controller, $injector, dashboard, $translate) {\n\n        function renderError($element, msg) {\n            $log.warn(msg);\n            $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\n        }\n\n        function compileWidget($scope, $element, currentScope, configChanged) {\n            var model = $scope.model;\n            var content = $scope.content;\n\n            var extra = $scope.extra;\n\n            var newScope = currentScope;\n            if (!model) {\n                $translate('ADF.ERROR.MODEL_IS_UNDEFINED').then(function(translateMessage) {\n                    renderError($element, translateMessage);\n                });\n            } else if (!content) {\n                if (model.title) {\n                    $translate('ADF.ERROR.WIDGET_FOR_DEPRECTATED', {\n                        title: model.title\n                    }).then(function(translateMessage) {\n                        renderError($element, translateMessage);\n                    });\n                } else {\n                    $translate('ADF.ERROR.WIDGET_DEPRECTATED').then(function(translateMessage) {\n                        renderError($element, translateMessage);\n                    });\n                }\n            } else {\n                if (newScope) {\n                    var is_menu = newScope.menu !== undefined && newScope.menu !== null && (!newScope.isPaginationEnable || !newScope.isPaginationEnable());\n                    var is_itemsPerPage = newScope.itemsPerPage !== undefined && newScope.itemsPerPage !== null;\n                    if (is_menu || configChanged || !angular.isFunction(newScope.reloadData)) {\n                        if ($scope.navOptionsHandler) {\n                            $scope.navOptionsHandler.firstLoad = true;\n                        }\n\n                        newScope = renderWidget($scope, $element, currentScope, model, content, extra);\n                    } else {\n                        if (is_itemsPerPage || newScope.page) {\n                            newScope.page = 1;\n                        }\n\n                        newScope.reloadData();\n                    }\n                } else {\n                    if ($scope.navOptionsHandler) {\n                        $scope.navOptionsHandler.firstLoad = true;\n                    }\n\n                    newScope = renderWidget($scope, $element, currentScope, model, content, extra);\n                }\n            }\n\n            function _getWindowTime(type) {\n                if (type === \"custom\") {\n                    return {\n                        from: newScope.config.windowFilter.from,\n                        to: newScope.config.windowFilter.to\n                    }\n                }\n                var from = window.moment().subtract(1, type);\n                return {\n                    from: from._d\n                };\n            }\n\n            if (newScope) {\n                if (newScope.config) {\n                    newScope.config.getWindowTime = function() {\n                        var windowFilter = newScope.config.windowFilter;\n                        if (windowFilter && windowFilter.type) {\n                            var winTime = _getWindowTime(windowFilter.type);\n                            /* jshint ignore:start */\n                            if (!window.eval(newScope.config.windowFilter.rawdate)) {\n                                for (var key in winTime) {\n                                    winTime[key] = window.moment(winTime[key]).format();\n                                }\n                                winTime['rawdate'] = true;\n                            }\n                            /* jshint ignore:end */\n                            return winTime;\n                        }\n                    }\n                }\n\n                if (extra) {\n                    newScope.editing = extra.editing ? true : false;\n                    newScope.extraData = extra;\n                }\n            }\n            return newScope;\n        }\n\n        function renderWidget($scope, $element, currentScope, model, content, extra) {\n            // display loading template\n            $element.html(dashboard.loadingTemplate);\n\n            // create new scope\n            var templateScope = $scope.$new();\n\n            // pass config object to scope\n            if (!model.config) {\n                model.config = {};\n            }\n\n            templateScope.config = model.config;\n            templateScope.editing = extra && extra.editing;\n\n            if (extra) {\n                templateScope.extra = extra;\n            }\n\n            templateScope.selectionManager = (currentScope && currentScope.selectionManager) ? currentScope.selectionManager : undefined;\n\n            // local injections\n            var base = {\n                $scope: templateScope,\n                widget: model,\n                config: model.config\n            };\n\n            // get resolve promises from content object\n            var resolvers = {};\n            resolvers.$tpl = widgetService.getTemplate(content);\n            if (content.resolve) {\n                angular.forEach(content.resolve, function(promise, key) {\n                    if (angular.isString(promise)) {\n                        resolvers[key] = $injector.get(promise);\n                    } else {\n                        resolvers[key] = $injector.invoke(promise, promise, base);\n                    }\n                });\n            }\n\n            // resolve all resolvers\n            $q.all(resolvers).then(function(locals) {\n                angular.extend(locals, base);\n\n                // pass resolve map to template scope as defined in resolveAs\n                if (content.resolveAs) {\n                    templateScope[content.resolveAs] = locals;\n                }\n\n                // compile & render template\n                var template = locals.$tpl;\n                $element.html(template);\n                if (content.controller) {\n                    var templateCtrl = $controller(content.controller, locals);\n                    if (content.controllerAs) {\n                        templateScope[content.controllerAs] = templateCtrl;\n                    }\n                    $element.children().data('$ngControllerController', templateCtrl);\n                }\n                $compile($element.contents())(templateScope);\n            }, function(reason) {\n                // handle promise rejection\n                var msg = 'ADF.ERROR.COULD_NOT_RESOLVE_ALL_PROMISSES';\n                $translate(msg, {\n                    reason: (reason ? \": \" + reason : reason)\n                }).then(function(translateMessage) {\n                    renderError($element, translateMessage);\n                });\n            });\n\n            // destroy old scope\n            if (currentScope) {\n                currentScope.$destroy();\n            }\n\n            return templateScope;\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            scope: {\n                model: '=',\n                content: '=',\n                extra: '=',\n                navOptionsHandler: '=?',\n                filterHandler: '=?',\n                widgetActionsHandler: '=?'\n            },\n            link: function($scope, $element) {\n                var currentScope = compileWidget($scope, $element, null);\n                var widgetConfigChangedEvt = $scope.$on('widgetConfigChanged', function() {\n                    currentScope = compileWidget($scope, $element, currentScope, true);\n                });\n\n                var widgetReloadEvt = $scope.$on('widgetReload', function() {\n                    currentScope = compileWidget($scope, $element, currentScope, false);\n                });\n\n                $scope.$on('destroy', function() {\n                    widgetConfigChangedEvt();\n                    widgetReloadEvt();\n                });\n            }\n        };\n    });\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf')\n    .directive('adfWidgetGrid', function($injector, $q, $log, $uibModal, $rootScope, $interval, dashboard, adfTemplatePath, Filter) {\n        function preLink($scope) {\n            var definition = $scope.definition;\n\n            if (definition) {\n                var w = dashboard.widgets[definition.type];\n                if (w) {\n                    // pass title\n                    if (!definition.title) {\n                        definition.title = w.title;\n                    }\n\n                    definition.titleTemplateUrl = adfTemplatePath + 'widget-grid-title.html';\n\n                    if (!definition.editTemplateUrl) {\n                        definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\n                        if (w.editTemplateUrl) {\n                            definition.editTemplateUrl = w.editTemplateUrl;\n                        }\n                    }\n\n                    if (!definition.titleTemplateUrl) {\n                        definition.frameless = w.frameless;\n                    }\n\n                    if (!definition.styleClass) {\n                        definition.styleClass = w.styleClass;\n                    }\n\n                    // set id for sortable\n                    if (!definition.wid) {\n                        definition.wid = dashboard.id();\n                    }\n\n                    // pass copy of widget to scope\n                    $scope.widget = angular.copy(w);\n\n                    // create config object\n                    var config = definition.config;\n                    if (config) {\n                        if (angular.isString(config)) {\n                            config = angular.fromJson(config);\n                        }\n                    } else {\n                        config = {};\n                    }\n\n                    if (typeof $scope.widget.show_modal_footer === \"undefined\") {\n                        $scope.widget.show_modal_footer = true;\n                    }\n\n                    if (typeof $scope.widget.show_reload_config === \"undefined\") {\n                        $scope.widget.show_reload_config = true;\n                    }\n\n                    // pass config to scope\n                    $scope.config = config;\n\n                    // collapse exposed $scope.widgetState property\n                    if (!$scope.widgetState) {\n                        $scope.widgetState = {};\n                        $scope.widgetState.isCollapsed = (w.collapsed === true) ? w.collapsed : false;\n                    }\n\n                } else {\n                    $log.warn('could not find widget ' + definition.type);\n                }\n            } else {\n                $log.debug('definition not specified, widget was probably removed');\n            }\n        }\n\n        function postLink($scope, $element) {\n            var definition = $scope.definition;\n            if (!definition) {\n                $log.debug('widget not found');\n                return;\n            }\n            if (!$scope.config) {\n                $scope.config = {};\n            }\n\n            var config = $scope.config;\n\n            // bind close function\n            var deleteWidget = function() {\n                $element.remove();\n                $rootScope.$broadcast('adfWidgetRemovedFromGrid', definition);\n            };\n\n            $scope.remove = function() {\n                if ($scope.options.enableConfirmDelete) {\n                    var deleteScope = $scope.$new();\n\n                    var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\n                    if (definition.deleteTemplateUrl) {\n                        deleteTemplateUrl = definition.deleteTemplateUrl;\n                    }\n                    var opts = {\n                        scope: deleteScope,\n                        templateUrl: deleteTemplateUrl,\n                        backdrop: 'static'\n                    };\n                    var instance = $uibModal.open(opts);\n\n                    deleteScope.closeDialog = function() {\n                        instance.close();\n                        deleteScope.$destroy();\n                    };\n                    deleteScope.deleteDialog = function() {\n                        deleteWidget();\n                        deleteScope.closeDialog();\n                    };\n                } else {\n                    deleteWidget();\n                }\n            };\n\n\n            $scope.print = function() {\n                if (!$scope.editMode) {\n                    $scope.$broadcast('widgetPrint');\n                }\n            }\n\n            $scope.isExecuteOperationEnabled = function() {\n\n                if (config.entityKey)\n                    return true;\n                var filter = config.filter;\n                if (typeof filter === \"string\") {\n                    return filter.length > 0;\n                }\n                if (typeof filter === \"object\") {\n                    return filter.value.length > 2 && filter.oql;\n                }\n                return false;\n            }\n\n            $scope.executeOperation = function() {\n                if (!$scope.editMode) {\n\n                    $scope.$parent.$broadcast('widgetExecuteOperation');\n                }\n            };\n\n            $scope.filter = {\n                value: \"\"\n            };\n            $scope.sort = {\n                value: \"\",\n                direction: \"\"\n            };\n\n            $scope.toggleAdvanced = 1;\n            var filter = config.filter;\n            if (typeof filter === \"object\" && filter.oql && filter.oql.length > 2) {\n                $scope.search = {\n                    oql: filter.oql,\n                    json: filter.value\n                };\n                $scope.toggleAdvanced = 0;\n            } else if (typeof filter === \"string\") {\n                $scope.search = {\n                    quick: filter\n                };\n                $scope.toggleAdvanced = 1;\n            } else if (typeof filter === \"object\" && filter.fields) {\n                $scope.search = {\n                    customFilter: filter.fields\n                };\n                $scope.search.fields = [];\n                angular.forEach(filter.fields, function(v, key) {\n                    $scope.search.fields.push(v.name);\n                });\n                $scope.toggleAdvanced = 2;\n            } else {\n                $scope.search = {\n                    quick: filter = \"\"\n                };\n            }\n\n            $scope.toggleFilter = function(advanced) {\n                $scope.toggleAdvanced = advanced;\n            };\n            $scope.filterAvailable = false;\n            $scope.showFilter = function() {\n                $scope.filterAvailable = $scope.filterAvailable === true ? false : true;\n            };\n\n            $scope.showFinalFilter = false;\n\n            $scope.launchSearching = function() {\n                var widget = {\n                    definition: definition,\n                    element: $element\n                };\n\n                $rootScope.$broadcast('adfLaunchSearchingFromWidget', widget, $scope.config.filter);\n                $scope.reload(true);\n            }\n            $scope.addCustomFilter = function(key) {\n                $scope.search.customFilter = $scope.search.customFilter ? $scope.search.customFilter : [];\n                $scope.search.customFilter.push({\n                    name: key,\n                    value: ''\n                });\n            }\n\n            $scope.launchCustomFilter = function() {\n                if ($scope.search.customFilter && $scope.search.customFilter.length > 0) {\n                    $scope.search.oql = $scope.search.json = '';\n\n                    $scope.config.filter = {\n                        value: {\n                            and: []\n                        },\n                        fields: $scope.search.customFilter\n                    }\n                    angular.forEach($scope.search.customFilter, function(v, key) {\n                        if (v.value) {\n                            var like = {};\n                            like[v.name] = v.value;\n                            $scope.config.filter.value.and.push({\n                                'like': like\n                            });\n                        }\n\n                    });\n                    $scope.config.filter.value = JSON.stringify($scope.config.filter.value);\n                }\n\n                $scope.launchSearching();\n            }\n\n\n\n            $scope.deleteFilter = function(value, model) {\n                angular.forEach($scope.search.customFilter, function(v, key) {\n                    if (v.name === value) {\n                        $scope.search.customFilter.splice(key, 1);\n                    }\n                });\n                if ($scope.search.customFilter.length === 0) {\n                    $scope.config.filter = {};\n                }\n            };\n\n            $scope.launchSearchingAdv = function() {\n                if (!$scope.filterApplied) {\n                    $scope.search.quick = '';\n                    if ($scope.search.json === '' || $scope.search.json === '{}' || (!angular.isString($scope.search.json) && Object.keys($scope.search.json).length === 0)) {\n                        $scope.config.filter = {\n                            oql: '',\n                            value: ''\n                        };\n                    } else {\n                        $scope.config.filter = {\n                            oql: $scope.search.oql,\n                            value: $scope.search.json\n                        };\n                    }\n                    $scope.launchSearching();\n                    $scope.filterApplied = true;\n                }\n            }\n\n            $scope.applyFilter = function(event) {\n                $scope.launchSearching();\n            }\n\n            $scope.launchSearchingQuick = function() {\n                if (!$scope.filterApplied) {\n                    $scope.search.oql = $scope.search.json = '';\n                    $scope.config.filter = $scope.search.quick;\n                    $scope.launchSearching();\n                    $scope.filterApplied = true;\n                }\n            }\n\n            var windowTimeChanged = $scope.$on('onWindowTimeChanged', function(event, timeObj) {\n                $scope.config.windowFilter = timeObj ? timeObj : (config.windowFilter ? {} : timeObj);\n                var widget = {\n                    definition: definition,\n                    element: $element\n                }\n                $rootScope.$broadcast('adfWindowTimeChangedFromWidget', widget, $scope.config.windowFilter);\n                $scope.reload();\n            });\n\n            $scope.enter = function(event) {\n                var keycode = (event.keyCode ? event.keyCode : event.which);\n                if (keycode === 13) {\n                    if ($scope.toggleAdvanced === 0)\n                        $scope.launchSearchingAdv();\n                    if ($scope.toggleAdvanced === 1)\n                        $scope.launchSearchingQuick();\n                    if ($scope.toggleAdvanced === 2)\n                        $scope.launchCustomFilter();\n\n                } else if (keycode === 19) {\n                    $scope.showFinalFilter = $scope.showFinalFilter === false ? true : false;\n                } else {\n                    $scope.filterApplied = false;\n                }\n            }\n\n\n            $scope.customSelectors = [];\n            $scope.getCustomSelectors = function() {\n                if ($scope.config.customSelectors) {\n                    $scope.customSelectors = $scope.config.customSelectors;\n                } else {\n                    config.widgetSelectors().findFields(\"\").then(function(fields) {\n                        $scope.customSelectors = fields;\n                        $scope.$apply();\n                    }).catch(function(err) {\n                        $log.error(err);\n                    });\n                }\n            }\n\n            $scope.customFilter = [];\n            $scope.getcustomFilter = function() {\n                config.widgetSelectors().findFields(\"\").then(function(fields) {\n                    $scope.customFilter = fields;\n                    $scope.$apply();\n                }).catch(function(err) {\n                    $log.error(err);\n                });\n\n            }\n\n            $scope.ifCustomFilter = function() {\n                return $scope.customSelectors && config.sort && $scope.definition.type === 'FullDevicesList' && $scope.toggleAdvanced === 2;\n            }\n\n            $scope.showCustomFields = function() {\n                return $scope.definition.type === 'FullDevicesList' && $scope.toggleAdvanced === 2 && $scope.search.customFilter && $scope.filterAvailable && !$scope.editMode;\n            }\n\n            $scope.changeDirection = function() {\n                var direction = config.sort.direction;\n                if (direction === 'DESCENDING') {\n                    $scope.config.sort.direction = 'ASCENDING'\n                } else if (direction === 'ASCENDING') {\n                    $scope.config.sort.direction = 'DESCENDING'\n                }\n                $scope.reload();\n            }\n\n            $scope.changeDefaultTab = function() {\n\n\n                $scope.reload();\n            }\n\n            $scope.debugQuery = function() {\n                Filter.parseQuery($scope.search.oql || '')\n                    .then(function(data) {\n                        //$scope.elementos = data;\n                        $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\n                        $scope.unknownWords = '';\n                        $scope.filter.error = null;\n                    })\n                    .catch(function(err) {\n                        $scope.filter.error = err;\n                        // Tratar el error\n                    });\n\n            }\n\n            $scope.autocomplete_options = function() {\n                var autocomplete_options = {\n                    suggest: Filter.suggest_field_delimited,\n                    customSelectors: config.widgetSelectors()\n                };\n\n                return autocomplete_options;\n\n            };\n\n            // Multiple selection\n            $scope.selectedItems = {};\n\n            // Gestor de seleccion\n            $scope.selectionManager = {\n                currentSelection: $scope.selectedItems,\n                isSelected: function(key, obj) {\n                    if ($scope.selectedItems[key] && !angular.isUndefined(obj)) {\n                        $scope.selectedItems[key].data = obj;\n                    }\n\n                    return $scope.selectedItems[key] ? true : false;\n                },\n                totalSelected: function() {\n                    return Object.keys($scope.selectedItems).length;\n                }\n            };\n\n            $scope.manageSelectedItems = function() {\n                var selectionScope = $scope.$new();\n\n                selectionScope.selectionConfig = config.selectionConfig;\n\n                selectionScope.selectedItems = [];\n                angular.forEach($scope.selectedItems, function(value, key) {\n                    selectionScope.selectedItems.push({\n                        key: key,\n                        value: value\n                    });\n                });\n\n                selectionScope.currentSelection = {\n                    selected: selectionScope.selectedItems\n                };\n\n                var manageItemsSelectedTemplate = adfTemplatePath + 'widget-selection.html';\n                var opts = {\n                    scope: selectionScope,\n                    templateUrl: manageItemsSelectedTemplate,\n                    backdrop: 'static',\n                    size: 'lg',\n                    animation: true\n                };\n\n                var instance = $uibModal.open(opts);\n\n                selectionScope.restoreSelection = function() {\n                    selectionScope.currentSelection = {\n                        selected: selectionScope.selectedItems\n                    };\n                };\n\n                selectionScope.clearSelection = function() {\n                    selectionScope.currentSelection.selected = [];\n                };\n\n                // Cierra sy guarda los datos de nueva selección\n                selectionScope.applyFilter = function(type) {\n                    var customOql = selectionScope.selectionConfig.filterAction(selectionScope.currentSelection.selected, type);\n\n                    if (!angular.isUndefined(customOql) && customOql !== null) {\n                        $scope.toggleAdvanced = 0;\n                        Filter.parseQuery(customOql).then(function(data) {\n                            $scope.search.oql = customOql;\n                            $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\n                            $scope.unknownWords = '';\n                            $scope.filter.error = null;\n\n                            $scope.launchSearchingAdv();\n                        }).catch(function(err) {\n                            $scope.filter.error = err;\n                        });\n                    }\n                };\n\n                selectionScope.executeOperation = function(operationType) {\n                    if (!$scope.editMode) {\n                        $scope.$parent.$broadcast('widgetExecuteOperation', {\n                            'selectedItems': selectionScope.currentSelection.selected,\n                            'type': operationType\n                        });\n                    }\n                };\n\n                // Cierra sy guarda los datos de nueva selección\n                selectionScope.saveChangesDialog = function() {\n                    var finalSelection = {};\n                    angular.forEach(selectionScope.currentSelection.selected, function(data, idx) {\n                        finalSelection[data.key] = {\n                            data: data.value.data,\n                            visible: data.value.visible\n                        };\n                    });\n\n                    $scope.selectedItems = angular.copy(finalSelection);\n                    $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n\n                    $scope.selectionManager.lastItem = {};\n                    $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n\n                    instance.close();\n                    selectionScope.$destroy();\n                };\n\n                // Cierra sin realizar ninguna acción\n                selectionScope.closeDialog = function() {\n                    instance.close();\n                    selectionScope.$destroy();\n                };\n            };\n\n\n            // bind edit function\n            $scope.edit = function() {\n                var editScope = $scope.$new();\n                editScope.definition = angular.copy(definition);\n\n                var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\n                if (definition.editTemplateUrl) {\n                    adfEditTemplatePath = definition.editTemplateUrl;\n                }\n\n                var opts = {\n                    scope: editScope,\n                    templateUrl: adfEditTemplatePath,\n                    backdrop: 'static',\n                    size: 'lg'\n                };\n\n                var instance = $uibModal.open(opts);\n\n                editScope.closeDialog = function() {\n                    instance.close();\n                    editScope.$destroy();\n                };\n\n                // TODO create util method\n                function createApplyPromise(result) {\n                    var promise;\n                    if (typeof result === 'boolean') {\n                        var deferred = $q.defer();\n                        if (result) {\n                            deferred.resolve();\n                        } else {\n                            deferred.reject();\n                        }\n                        promise = deferred.promise;\n                    } else {\n                        promise = $q.when(result);\n                    }\n                    return promise;\n                }\n\n                editScope.saveDialog = function() {\n                    // clear validation error\n                    editScope.validationError = null;\n\n                    // build injection locals\n                    var widget = $scope.widget;\n\n                    // create a default apply method for widgets\n                    // without edit mode\n                    // see issue https://goo.gl/KHPQLZ\n                    var applyFn;\n                    if (widget.edit) {\n                        applyFn = widget.edit.apply;\n                    } else {\n                        applyFn = function() {\n                            return true;\n                        };\n                    }\n\n                    // injection locals\n                    var locals = {\n                        widget: widget,\n                        definition: editScope.definition,\n                        config: editScope.definition.config\n                    };\n\n                    // invoke apply function and apply if success\n                    var result = $injector.invoke(applyFn, applyFn, locals);\n                    createApplyPromise(result).then(function() {\n                        definition.title = editScope.definition.title;\n                        angular.extend(definition.config, editScope.definition.config);\n\n                        editScope.closeDialog();\n\n                        if (widget.edit && widget.edit.reload) {\n                            $scope.setReloadTimeout();\n                            // reload content after edit dialog is closed\n                            $scope.$broadcast('widgetConfigChanged');\n                        }\n                    }, function(err) {\n                        if (err) {\n                            editScope.validationError = err;\n                        } else {\n                            editScope.validationError = 'VALIDATION_DURING_APPLY_FAILED';\n                        }\n                    });\n                };\n\n            };\n\n\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            templateUrl: adfTemplatePath + 'widget-grid.html',\n            scope: {\n                definition: '=',\n                editMode: '=',\n                options: '=',\n                widgetState: '='\n            },\n            controller: function($scope) {\n                // Controlador de la barra inferior de los widgets\n                $scope.navOptionsHandler = {\n                    firstLoad: true,\n                    loadingData: false,\n                    startLoading: function() {\n                        $scope.navOptionsHandler.loadingData = true;\n                    },\n                    stopLoading: function() {\n                        $scope.navOptionsHandler.firstLoad = false;\n                        $scope.navOptionsHandler.loadingData = false;\n                        $scope.navOptionsHandler.lastMessageTime = new Date();\n                    },\n                    setStatusMessage: function(message) {\n                        $scope.navOptionsHandler.statusMessage = message;\n                        $scope.navOptionsHandler.lastMessageTime = new Date();\n                    }\n                };\n\n                // Controlador de los parámetros del filtro\n                $scope.filterHandler = {\n                    changeFilter: function(filter, search, toggleAdvanced) {\n                        $scope.filter = filter;\n                        $scope.search = search;\n                        $scope.toggleAdvanced = toggleAdvanced;\n                    }\n                };\n\n                // Controlador de las custom actions del widget\n                $scope.widgetActionsHandler = {\n                    actions: [],\n                    setActions: function(actions) {\n                        $scope.widgetActionsHandler.actions = actions;\n                    }\n                };\n                $scope.showActionsMenu = false;\n                $scope.toggleActionsMenu = function() {\n                    $scope.showActionsMenu = !$scope.showActionsMenu;\n                };\n\n                var adfDashboardCollapseExpand = $scope.$on('adfDashboardCollapseExpand', function(event, args) {\n                    $scope.widgetState.isCollapsed = args.collapseExpandStatus;\n                });\n\n                var adfWidgetEnterEditMode = $scope.$on('adfWidgetEnterEditMode', function(event, widget) {\n                    if (dashboard.idEquals($scope.definition.wid, widget.wid)) {\n                        $scope.edit();\n                    }\n                });\n\n                var adfIsEditMode = $scope.$on('adfIsEditMode', function(event, widget) {\n                    $scope.editing = true;\n                });\n\n                var adfDashboardChanged = $scope.$on('adfDashboardChanged', function(event, widget) {\n                    $scope.editing = false;\n                });\n\n                var adfDashboardEditsCancelled = $scope.$on('adfDashboardEditsCancelled', function(event, widget) {\n                    $scope.editing = false;\n                });\n\n                $scope.widgetClasses = function(w, definition) {\n                    var classes = definition.styleClass || '';\n                    // w is undefined, if the type of the widget is unknown\n                    // see issue #216\n                    // if (!w || !w.frameless || $scope.editMode) {\n                    //     classes += ' panel panel-default';\n                    // }\n                    return classes;\n                };\n\n                $scope.openFullScreen = function() {\n\n                    $scope.$emit('adfOpenModalWidgetFromOther', $scope.definition.type, $scope.config);\n\n                    // var definition = $scope.definition;\n                    // var fullScreenScope = $scope.$new();\n                    // var opts = {\n                    //     scope: fullScreenScope,\n                    //     templateUrl: adfTemplatePath + 'widget-fullscreen.html',\n                    //     size: definition.modalSize || 'lg', // 'sm', 'lg'\n                    //     backdrop: 'static',\n                    //     windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n                    // };\n\n                    // var instance = $uibModal.open(opts);\n\n                    // fullScreenScope.reload = function() {\n                    //     fullScreenScope.$broadcast('widgetReload');\n                    // };\n\n                    // fullScreenScope.closeDialog = function() {\n                    //     instance.close();\n                    //     fullScreenScope.$destroy();\n                    // };\n                };\n\n                $scope.openFilter = function() {\n\n                }\n\n                $scope.openAboutScreen = function(size) {\n                    size = 'md';\n                    var modalInstance = $uibModal.open({\n                        animation: true,\n                        templateUrl: 'widgetAboutModal.html',\n                        controller: function($scope, $uibModalInstance, information) {\n                            $scope.about = {};\n                            $scope.about.info = information;\n                            $scope.ok = function() {\n                                $uibModalInstance.close();\n                            };\n                        },\n                        'size': size,\n                        resolve: {\n                            information: function() {\n                                return $scope.config.about;\n                            }\n                        }\n                    });\n\n                    modalInstance.result.then(function(selectedItem) {\n                        $scope.selected = selectedItem;\n                    }, function() {\n                        $log.info('Modal dismissed at: ' + new Date());\n                    });\n                };\n\n                $scope.saveWidgetScreen = function(wId) {\n                    $scope.$emit('generateSnapshot', {\n                        'objectSelector': '.widget_' + wId,\n                        'fileName': 'capture_' + new Date().getTime()\n                    });\n                };\n\n                var onWindowTimeChanged = function(timeObj) {\n                    var filter = {\n                        and: []\n                    };\n                    if (timeObj && timeObj.from) {\n                        filter.and.push({\n                            gt: {\n                                operationDate: timeObj.from\n                            }\n                        });\n\n                        if (timeObj.to) {\n                            filter.and.push({\n                                lt: {\n                                    operationDate: timeObj.to\n                                }\n                            });\n                        }\n                    } else {\n                        filter = null;\n                    }\n                    return filter;\n                }\n\n                var createQuickFilter = function(fieldsQuickSearch, filter) {\n                    var _filter = {\n                        or: []\n                    };\n                    var criteria;\n                    fieldsQuickSearch.forEach(function(field) {\n                        criteria = {};\n                        criteria[field.operator] = {};\n                        criteria[field.operator][field.name] = $scope.config.filter;\n                        _filter.or.push(criteria);\n                    });\n                    return _filter;\n                }\n\n                $scope.downloadCsv = function() {\n                    var columns = $scope.config.columns;\n                    var scope_filter = $scope.config.filter;\n                    var extra_filter;\n                    var final_filter = {};\n                    var order = $scope.config.sort ? $scope.config.sort : undefined;\n                    if ($scope.config.windowFilter) {\n                        var window_filter = $scope.config.onWindowTimeChanged($scope.config.windowFilter);\n                        if (window_filter && window_filter.and) {\n                            extra_filter = {\n                                and: window_filter.and\n                            };\n                        }\n                    }\n                    var filter;\n                    if (scope_filter.value && scope_filter.value.length > 4) {\n                        filter = JSON.parse(scope_filter.value);\n                    } else if (typeof scope_filter === 'string' && scope_filter.trim() !== '') {\n                        filter = createQuickFilter($scope.config.fieldsQuickSearch, scope_filter);\n                    }\n                    if (extra_filter) {\n                        if (filter) {\n                            final_filter = {\n                                and: [extra_filter, filter]\n                            };\n                        } else {\n                            final_filter = extra_filter;\n                        }\n                    } else {\n                        final_filter = filter;\n                    }\n                    $scope.$broadcast('downloadCsv', {\n                        'columns': columns,\n                        'filter': final_filter,\n                        'order': order\n                    });\n                };\n\n                $scope.generateQR = function() {\n                    $scope.$broadcast('generateQR');\n                };\n\n                var addItemToSelection = $scope.$on('addItemToSelection', function(event, item) {\n                    if (!$scope.selectedItems[item.key]) {\n                        $scope.selectedItems[item.key] = {\n                            data: item.data,\n                            visible: item.visible\n                        };\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n                        item.isSelected = true;\n                        $scope.selectionManager.lastItem = item;\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n                    }\n\n                });\n\n                var removeItemFromSelection = $scope.$on('removeItemFromSelection', function(event, item) {\n                    if ($scope.selectedItems[item.key]) {\n                        delete $scope.selectedItems[item.key];\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n                        item.isSelected = false;\n                        $scope.selectionManager.lastItem = item;\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n                    }\n                });\n\n                // bind reload function\n                var stopReloadTimeout;\n\n                $scope.setReloadTimeout = function() {\n                    var config = $scope.config || $scope.definition.config;\n\n                    if (config) {\n                        var reloadPeriod = config.reloadPeriod;\n                        if (!isNaN(reloadPeriod) && (reloadPeriod * 1) !== 0) {\n                            if (angular.isDefined(stopReloadTimeout)) {\n                                $interval.cancel(stopReloadTimeout)\n                                stopReloadTimeout = undefined;\n                            };\n                            stopReloadTimeout = $interval($scope.reload, (reloadPeriod * 1000));\n                        } else if (stopReloadTimeout) {\n                            $interval.cancel(stopReloadTimeout);\n                        }\n                    }\n                }\n\n                $scope.reload = function(completeReload) {\n                    if (completeReload) {\n                        $scope.$broadcast('widgetReload', completeReload);\n                    } else {\n                        $scope.$broadcast('widgetReload');\n                    }\n\n                    $scope.setReloadTimeout();\n                };\n\n                // verificacion de periodo de refresco\n                $scope.setReloadTimeout();\n\n                $scope.$on('$destroy', function() {\n                    adfDashboardCollapseExpand();\n                    adfWidgetEnterEditMode();\n                    adfIsEditMode();\n                    adfDashboardChanged();\n                    adfDashboardEditsCancelled();\n                    addItemToSelection();\n                    removeItemFromSelection();\n                    $interval.cancel(stopReloadTimeout);\n                });\n            },\n            compile: function() {\n\n                /**\n                 * use pre link, because link of widget-content\n                 * is executed before post link widget\n                 */\n                return {\n                    pre: preLink,\n                    post: postLink\n                };\n            }\n        };\n\n    });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/**\n * The widget service provide helper functions to render widgets and their content.\n */\nangular.module('adf')\n  .factory('widgetService', function($http, $q, $sce, $templateCache, dashboard) {\n    \n\n    function parseUrl(url) {\n      var parsedUrl = url;\n      if (url.indexOf('{widgetsPath}') >= 0) {\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\n                .replace('//', '/');\n        if (parsedUrl.indexOf('/') === 0) {\n          parsedUrl = parsedUrl.substring(1);\n        }\n      }\n      return parsedUrl;\n    }\n\n    var exposed = {};\n\n    exposed.getTemplate = function(widget){\n      var deferred = $q.defer();\n\n      if (widget.template) {\n        deferred.resolve(widget.template);\n      } else if (widget.templateUrl) {\n        // try to fetch template from cache\n        var tpl = $templateCache.get(widget.templateUrl);\n        if (tpl) {\n          deferred.resolve(tpl);\n        } else {\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\n          $http.get(url)\n               .success(function(response) {\n                 // put response to cache, with unmodified url as key\n                 $templateCache.put(widget.templateUrl, response);\n                 deferred.resolve(response);\n               })\n               .error(function() {\n                 deferred.reject('could not load template');\n               });\n        }\n      }\n\n      return deferred.promise;\n    };\n\n    return exposed;\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf')\n    .directive('adfWidget', function($injector, $q, $log, $uibModal, $rootScope, $interval, dashboard, adfTemplatePath, Filter) {\n        function preLink($scope) {\n            var definition = $scope.definition;\n\n            if (definition) {\n                var w = dashboard.widgets[definition.type];\n                if (w) {\n                    // pass title\n                    if (!definition.title) {\n                        definition.title = w.title;\n                    }\n\n                    if (!definition.titleTemplateUrl) {\n                        definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\n                        if (w.titleTemplateUrl) {\n                            definition.titleTemplateUrl = w.titleTemplateUrl;\n                        }\n                    }\n\n                    if (!definition.editTemplateUrl) {\n                        definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\n                        if (w.editTemplateUrl) {\n                            definition.editTemplateUrl = w.editTemplateUrl;\n                        }\n                    }\n\n                    if (!definition.titleTemplateUrl) {\n                        definition.frameless = w.frameless;\n                    }\n\n                    if (!definition.styleClass) {\n                        definition.styleClass = w.styleClass;\n                    }\n\n                    // set id for sortable\n                    if (!definition.wid) {\n                        definition.wid = dashboard.id();\n                    }\n\n                    // pass copy of widget to scope\n                    $scope.widget = angular.copy(w);\n\n                    // create config object\n                    var config = definition.config;\n                    if (config) {\n                        if (angular.isString(config)) {\n                            config = angular.fromJson(config);\n                        }\n                    } else {\n                        config = {};\n                    }\n\n                    if (typeof $scope.widget.show_modal_footer === \"undefined\") {\n                        $scope.widget.show_modal_footer = true;\n                    }\n\n                    if (typeof $scope.widget.show_reload_config === \"undefined\") {\n                        $scope.widget.show_reload_config = true;\n                    }\n\n                    // pass config to scope\n                    $scope.config = config;\n\n                    // collapse exposed $scope.widgetState property\n                    if (!$scope.widgetState) {\n                        $scope.widgetState = {};\n                        $scope.widgetState.isCollapsed = (w.collapsed === true) ? w.collapsed : false;\n                    }\n\n                } else {\n                    $log.warn('could not find widget ' + definition.type);\n                }\n            } else {\n                $log.debug('definition not specified, widget was probably removed');\n            }\n        }\n\n        function postLink($scope, $element) {\n            var definition = $scope.definition;\n            if (!definition) {\n                $log.debug('widget not found');\n                return;\n            }\n            if (!$scope.config) {\n                $scope.config = {};\n            }\n\n            var config = $scope.config;\n\n            // bind close function\n            var deleteWidget = function() {\n                var column = $scope.col;\n                if (column) {\n                    var index = column.widgets.indexOf(definition);\n                    if (index >= 0) {\n                        column.widgets.splice(index, 1);\n                    }\n                }\n                $element.remove();\n                $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n            };\n\n            $scope.remove = function() {\n                if ($scope.options.enableConfirmDelete) {\n                    var deleteScope = $scope.$new();\n\n                    var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\n                    if (definition.deleteTemplateUrl) {\n                        deleteTemplateUrl = definition.deleteTemplateUrl;\n                    }\n                    var opts = {\n                        scope: deleteScope,\n                        templateUrl: deleteTemplateUrl,\n                        backdrop: 'static'\n                    };\n                    var instance = $uibModal.open(opts);\n\n                    deleteScope.closeDialog = function() {\n                        instance.close();\n                        deleteScope.$destroy();\n                    };\n                    deleteScope.deleteDialog = function() {\n                        deleteWidget();\n                        deleteScope.closeDialog();\n                    };\n                } else {\n                    deleteWidget();\n                }\n            };\n\n\n            $scope.print = function() {\n                if (!$scope.editMode) {\n                    $scope.$broadcast('widgetPrint');\n                }\n            }\n\n            $scope.isExecuteOperationEnabled = function() {\n\n                if (config.entityKey)\n                    return true;\n                var filter = config.filter;\n                if (typeof filter === \"string\") {\n                    return filter.length > 0;\n                }\n                if (typeof filter === \"object\") {\n                    return filter.value.length > 2 && filter.oql;\n                }\n                return false;\n            }\n\n            $scope.executeOperation = function() {\n                if (!$scope.editMode) {\n\n                    $scope.$parent.$broadcast('widgetExecuteOperation');\n                }\n            };\n\n            $scope.filter = {\n                value: \"\"\n            };\n            $scope.sort = {\n                value: \"\",\n                direction: \"\"\n            };\n\n            $scope.toggleAdvanced = 1;\n            var filter = config.filter;\n            if (typeof filter === \"object\" && filter.oql && filter.oql.length > 2) {\n                $scope.search = {\n                    oql: filter.oql,\n                    json: filter.value\n                };\n                $scope.toggleAdvanced = 0;\n            } else if (typeof filter === \"string\") {\n                $scope.search = {\n                    quick: filter\n                };\n                $scope.toggleAdvanced = 1;\n            } else if (typeof filter === \"object\" && filter.fields) {\n                $scope.search = {\n                    customFilter: filter.fields\n                };\n                $scope.search.fields = [];\n                angular.forEach(filter.fields, function(v, key) {\n                    $scope.search.fields.push(v.name);\n                });\n                $scope.toggleAdvanced = 2;\n            } else {\n                $scope.search = {\n                    quick: filter = \"\"\n                };\n            }\n\n            $scope.toggleFilter = function(advanced) {\n                $scope.toggleAdvanced = advanced;\n            };\n            $scope.filterAvailable = false;\n            $scope.showFilter = function() {\n                $scope.filterAvailable = $scope.filterAvailable === true ? false : true;\n            };\n\n            $scope.showFinalFilter = false;\n\n            $scope.launchSearching = function() {\n                var widget = {\n                    definition: definition,\n                    element: $element\n                };\n\n                $rootScope.$broadcast('adfLaunchSearchingFromWidget', widget, $scope.config.filter);\n                $scope.reload(true);\n            }\n            $scope.addCustomFilter = function(key) {\n                $scope.search.customFilter = $scope.search.customFilter ? $scope.search.customFilter : [];\n                $scope.search.customFilter.push({\n                    name: key,\n                    value: ''\n                });\n            }\n\n            $scope.launchCustomFilter = function() {\n                if ($scope.search.customFilter && $scope.search.customFilter.length > 0) {\n                    $scope.search.oql = $scope.search.json = '';\n\n                    $scope.config.filter = {\n                        value: {\n                            and: []\n                        },\n                        fields: $scope.search.customFilter\n                    }\n                    angular.forEach($scope.search.customFilter, function(v, key) {\n                        if (v.value) {\n                            var like = {};\n                            like[v.name] = v.value;\n                            $scope.config.filter.value.and.push({\n                                'like': like\n                            });\n                        }\n\n                    });\n                    $scope.config.filter.value = JSON.stringify($scope.config.filter.value);\n                }\n\n                $scope.launchSearching();\n            }\n\n\n\n            $scope.deleteFilter = function(value, model) {\n                angular.forEach($scope.search.customFilter, function(v, key) {\n                    if (v.name === value) {\n                        $scope.search.customFilter.splice(key, 1);\n                    }\n                });\n                if ($scope.search.customFilter.length === 0) {\n                    $scope.config.filter = {};\n                }\n            };\n\n            $scope.launchSearchingAdv = function() {\n                if (!$scope.filterApplied) {\n                    $scope.search.quick = '';\n                    if ($scope.search.json === '' || $scope.search.json === '{}' || (!angular.isString($scope.search.json) && Object.keys($scope.search.json).length === 0)) {\n                        $scope.config.filter = {\n                            oql: '',\n                            value: ''\n                        };\n                    } else {\n                        $scope.config.filter = {\n                            oql: $scope.search.oql,\n                            value: $scope.search.json\n                        };\n                    }\n                    $scope.launchSearching();\n                    $scope.filterApplied = true;\n                }\n            }\n\n            $scope.applyFilter = function(event) {\n                $scope.launchSearching();\n            }\n\n            $scope.launchSearchingQuick = function() {\n                if (!$scope.filterApplied) {\n                    $scope.search.oql = $scope.search.json = '';\n                    $scope.config.filter = $scope.search.quick;\n                    $scope.launchSearching();\n                    $scope.filterApplied = true;\n                }\n            }\n\n            var windowTimeChanged = $scope.$on('onWindowTimeChanged', function(event, timeObj) {\n                $scope.config.windowFilter = timeObj ? timeObj : (config.windowFilter ? {} : timeObj);\n                var widget = {\n                    definition: definition,\n                    element: $element\n                }\n                $rootScope.$broadcast('adfWindowTimeChangedFromWidget', widget, $scope.config.windowFilter);\n                $scope.reload();\n            });\n\n            $scope.enter = function(event) {\n                var keycode = (event.keyCode ? event.keyCode : event.which);\n                if (keycode === 13) {\n                    if ($scope.toggleAdvanced === 0)\n                        $scope.launchSearchingAdv();\n                    if ($scope.toggleAdvanced === 1)\n                        $scope.launchSearchingQuick();\n                    if ($scope.toggleAdvanced === 2)\n                        $scope.launchCustomFilter();\n\n                } else if (keycode === 19) {\n                    $scope.showFinalFilter = $scope.showFinalFilter === false ? true : false;\n                } else {\n                    $scope.filterApplied = false;\n                }\n            }\n\n\n            $scope.customSelectors = [];\n            $scope.getCustomSelectors = function() {\n                if ($scope.config.customSelectors) {\n                    $scope.customSelectors = $scope.config.customSelectors;\n                } else {\n                    config.widgetSelectors().findFields(\"\").then(function(fields) {\n                        $scope.customSelectors = fields;\n                        $scope.$apply();\n                    }).catch(function(err) {\n                        $log.error(err);\n                    });\n                }\n            }\n\n            $scope.customFilter = [];\n            $scope.getcustomFilter = function() {\n                config.widgetSelectors().findFields(\"\").then(function(fields) {\n                    $scope.customFilter = fields;\n                    $scope.$apply();\n                }).catch(function(err) {\n                    $log.error(err);\n                });\n\n            }\n\n            $scope.ifCustomFilter = function() {\n                return $scope.customSelectors && config.sort && $scope.definition.type === 'FullDevicesList' && $scope.toggleAdvanced === 2;\n            }\n\n            $scope.showCustomFields = function() {\n                return $scope.definition.type === 'FullDevicesList' && $scope.toggleAdvanced === 2 && $scope.search.customFilter && $scope.filterAvailable && !$scope.editMode;\n            }\n\n            $scope.changeDirection = function() {\n                var direction = config.sort.direction;\n                if (direction === 'DESCENDING') {\n                    $scope.config.sort.direction = 'ASCENDING'\n                } else if (direction === 'ASCENDING') {\n                    $scope.config.sort.direction = 'DESCENDING'\n                }\n                $scope.reload();\n            }\n\n            $scope.changeDefaultTab = function() {\n\n\n                $scope.reload();\n            }\n\n            $scope.debugQuery = function() {\n                Filter.parseQuery($scope.search.oql || '')\n                    .then(function(data) {\n                        //$scope.elementos = data;\n                        $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\n                        $scope.unknownWords = '';\n                        $scope.filter.error = null;\n                    })\n                    .catch(function(err) {\n                        $scope.filter.error = err;\n                        // Tratar el error\n                    });\n\n            }\n\n            $scope.autocomplete_options = function() {\n                var autocomplete_options = {\n                    suggest: Filter.suggest_field_delimited,\n                    customSelectors: config.widgetSelectors()\n                };\n\n                return autocomplete_options;\n\n            };\n\n            // Multiple selection\n            $scope.selectedItems = {};\n\n            // Gestor de seleccion\n            $scope.selectionManager = {\n                currentSelection: $scope.selectedItems,\n                isSelected: function(key, obj) {\n                    if ($scope.selectedItems[key] && !angular.isUndefined(obj)) {\n                        $scope.selectedItems[key].data = obj;\n                    }\n\n                    return $scope.selectedItems[key] ? true : false;\n                },\n                totalSelected: function() {\n                    return Object.keys($scope.selectedItems).length;\n                }\n            };\n\n            $scope.manageSelectedItems = function() {\n                var selectionScope = $scope.$new();\n\n                selectionScope.selectionConfig = config.selectionConfig;\n\n                selectionScope.selectedItems = [];\n                angular.forEach($scope.selectedItems, function(value, key) {\n                    selectionScope.selectedItems.push({\n                        key: key,\n                        value: value\n                    });\n                });\n\n                selectionScope.currentSelection = {\n                    selected: selectionScope.selectedItems\n                };\n\n                var manageItemsSelectedTemplate = adfTemplatePath + 'widget-selection.html';\n                var opts = {\n                    scope: selectionScope,\n                    templateUrl: manageItemsSelectedTemplate,\n                    backdrop: 'static',\n                    size: 'lg',\n                    animation: true\n                };\n\n                var instance = $uibModal.open(opts);\n\n                selectionScope.restoreSelection = function() {\n                    selectionScope.currentSelection = {\n                        selected: selectionScope.selectedItems\n                    };\n                };\n\n                selectionScope.clearSelection = function() {\n                    selectionScope.currentSelection.selected = [];\n                };\n\n                // Cierra sy guarda los datos de nueva selección\n                selectionScope.applyFilter = function(type) {\n                    var customOql = selectionScope.selectionConfig.filterAction(selectionScope.currentSelection.selected, type);\n\n                    if (!angular.isUndefined(customOql) && customOql !== null) {\n                        $scope.toggleAdvanced = 0;\n                        Filter.parseQuery(customOql).then(function(data) {\n                            $scope.search.oql = customOql;\n                            $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\n                            $scope.unknownWords = '';\n                            $scope.filter.error = null;\n\n                            $scope.launchSearchingAdv();\n                        }).catch(function(err) {\n                            $scope.filter.error = err;\n                        });\n                    }\n                };\n\n                selectionScope.executeOperation = function(operationType) {\n                    if (!$scope.editMode) {\n                        $scope.$parent.$broadcast('widgetExecuteOperation', {\n                            'selectedItems': selectionScope.currentSelection.selected,\n                            'type': operationType\n                        });\n                    }\n                };\n\n                // Cierra sy guarda los datos de nueva selección\n                selectionScope.saveChangesDialog = function() {\n                    var finalSelection = {};\n                    angular.forEach(selectionScope.currentSelection.selected, function(data, idx) {\n                        finalSelection[data.key] = {\n                            data: data.value.data,\n                            visible: data.value.visible\n                        };\n                    });\n\n                    $scope.selectedItems = angular.copy(finalSelection);\n                    $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n\n                    $scope.selectionManager.lastItem = {};\n                    $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n\n                    instance.close();\n                    selectionScope.$destroy();\n                };\n\n                // Cierra sin realizar ninguna acción\n                selectionScope.closeDialog = function() {\n                    instance.close();\n                    selectionScope.$destroy();\n                };\n            };\n\n\n            // bind edit function\n            $scope.edit = function() {\n                var editScope = $scope.$new();\n                editScope.definition = angular.copy(definition);\n\n                var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\n                if (definition.editTemplateUrl) {\n                    adfEditTemplatePath = definition.editTemplateUrl;\n                }\n\n                var opts = {\n                    scope: editScope,\n                    templateUrl: adfEditTemplatePath,\n                    backdrop: 'static',\n                    size: 'lg'\n                };\n\n                var instance = $uibModal.open(opts);\n\n                editScope.closeDialog = function() {\n                    instance.close();\n                    editScope.$destroy();\n                };\n\n                // TODO create util method\n                function createApplyPromise(result) {\n                    var promise;\n                    if (typeof result === 'boolean') {\n                        var deferred = $q.defer();\n                        if (result) {\n                            deferred.resolve();\n                        } else {\n                            deferred.reject();\n                        }\n                        promise = deferred.promise;\n                    } else {\n                        promise = $q.when(result);\n                    }\n                    return promise;\n                }\n\n                editScope.saveDialog = function() {\n                    // clear validation error\n                    editScope.validationError = null;\n\n                    // build injection locals\n                    var widget = $scope.widget;\n\n                    // create a default apply method for widgets\n                    // without edit mode\n                    // see issue https://goo.gl/KHPQLZ\n                    var applyFn;\n                    if (widget.edit) {\n                        applyFn = widget.edit.apply;\n                    } else {\n                        applyFn = function() {\n                            return true;\n                        };\n                    }\n\n                    // injection locals\n                    var locals = {\n                        widget: widget,\n                        definition: editScope.definition,\n                        config: editScope.definition.config\n                    };\n\n                    // invoke apply function and apply if success\n                    var result = $injector.invoke(applyFn, applyFn, locals);\n                    createApplyPromise(result).then(function() {\n                        definition.title = editScope.definition.title;\n                        angular.extend(definition.config, editScope.definition.config);\n\n                        editScope.closeDialog();\n\n                        if (widget.edit && widget.edit.reload) {\n                            $scope.setReloadTimeout();\n                            // reload content after edit dialog is closed\n                            $scope.$broadcast('widgetConfigChanged');\n                        }\n                    }, function(err) {\n                        if (err) {\n                            editScope.validationError = err;\n                        } else {\n                            editScope.validationError = 'VALIDATION_DURING_APPLY_FAILED';\n                        }\n                    });\n                };\n\n            };\n\n\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            templateUrl: dashboard.customWidgetTemplatePath ? dashboard.customWidgetTemplatePath : adfTemplatePath + 'widget.html',\n            scope: {\n                definition: '=',\n                col: '=column',\n                editMode: '=',\n                options: '=',\n                widgetState: '='\n            },\n            controller: function($scope) {\n                var adfDashboardCollapseExpand = $scope.$on('adfDashboardCollapseExpand', function(event, args) {\n                    $scope.widgetState.isCollapsed = args.collapseExpandStatus;\n                });\n\n                var adfWidgetEnterEditMode = $scope.$on('adfWidgetEnterEditMode', function(event, widget) {\n                    if (dashboard.idEquals($scope.definition.wid, widget.wid)) {\n                        $scope.edit();\n                    }\n                });\n\n                var adfIsEditMode = $scope.$on('adfIsEditMode', function(event, widget) {\n                    $scope.editing = true;\n                });\n\n                var adfDashboardChanged = $scope.$on('adfDashboardChanged', function(event, widget) {\n                    $scope.editing = false;\n                });\n\n                var adfDashboardEditsCancelled = $scope.$on('adfDashboardEditsCancelled', function(event, widget) {\n                    $scope.editing = false;\n                });\n\n                $scope.widgetClasses = function(w, definition) {\n                    var classes = definition.styleClass || '';\n                    // w is undefined, if the type of the widget is unknown\n                    // see issue #216\n                    if (!w || !w.frameless || $scope.editMode) {\n                        classes += ' panel panel-default';\n                    }\n                    return classes;\n                };\n\n                $scope.openFullScreen = function() {\n\n                    $scope.$emit('adfOpenModalWidgetFromOther', $scope.definition.type, $scope.config);\n\n                    // var definition = $scope.definition;\n                    // var fullScreenScope = $scope.$new();\n                    // var opts = {\n                    //     scope: fullScreenScope,\n                    //     templateUrl: adfTemplatePath + 'widget-fullscreen.html',\n                    //     size: definition.modalSize || 'lg', // 'sm', 'lg'\n                    //     backdrop: 'static',\n                    //     windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n                    // };\n\n                    // var instance = $uibModal.open(opts);\n\n                    // fullScreenScope.reload = function() {\n                    //     fullScreenScope.$broadcast('widgetReload');\n                    // };\n\n                    // fullScreenScope.closeDialog = function() {\n                    //     instance.close();\n                    //     fullScreenScope.$destroy();\n                    // };\n                };\n\n                $scope.openFilter = function() {\n\n                }\n\n                $scope.openAboutScreen = function(size) {\n                    size = 'md';\n                    var modalInstance = $uibModal.open({\n                        animation: true,\n                        templateUrl: 'widgetAboutModal.html',\n                        controller: function($scope, $uibModalInstance, information) {\n                            $scope.about = {};\n                            $scope.about.info = information;\n                            $scope.ok = function() {\n                                $uibModalInstance.close();\n                            };\n                        },\n                        'size': size,\n                        resolve: {\n                            information: function() {\n                                return $scope.config.about;\n                            }\n                        }\n                    });\n\n                    modalInstance.result.then(function(selectedItem) {\n                        $scope.selected = selectedItem;\n                    }, function() {\n                        $log.info('Modal dismissed at: ' + new Date());\n                    });\n                };\n\n                $scope.saveWidgetScreen = function(wId) {\n                    $scope.$emit('generateSnapshot', {\n                        'objectSelector': '.widget_' + wId,\n                        'fileName': 'capture_' + new Date().getTime()\n                    });\n                };\n\n                var onWindowTimeChanged = function(timeObj) {\n                    var filter = {\n                        and: []\n                    };\n                    if (timeObj && timeObj.from) {\n                        filter.and.push({\n                            gt: {\n                                operationDate: timeObj.from\n                            }\n                        });\n\n                        if (timeObj.to) {\n                            filter.and.push({\n                                lt: {\n                                    operationDate: timeObj.to\n                                }\n                            });\n                        }\n                    } else {\n                        filter = null;\n                    }\n                    return filter;\n                }\n\n                var createQuickFilter = function(fieldsQuickSearch, filter) {\n                    var _filter = {\n                        or: []\n                    };\n                    var criteria;\n                    fieldsQuickSearch.forEach(function(field) {\n                        criteria = {};\n                        criteria[field.operator] = {};\n                        criteria[field.operator][field.name] = $scope.config.filter;\n                        _filter.or.push(criteria);\n                    });\n                    return _filter;\n                }\n\n                $scope.downloadCsv = function() {\n                    var columns = $scope.config.columns;\n                    var scope_filter = $scope.config.filter;\n                    var extra_filter;\n                    var final_filter = {};\n                    var order = $scope.config.sort ? $scope.config.sort : undefined;\n                    if ($scope.config.windowFilter) {\n                        var window_filter = $scope.config.onWindowTimeChanged($scope.config.windowFilter);\n                        if (window_filter && window_filter.and) {\n                            extra_filter = {\n                                and: window_filter.and\n                            };\n                        }\n                    }\n                    var filter;\n                    if (scope_filter.value && scope_filter.value.length > 4) {\n                        filter = JSON.parse(scope_filter.value);\n                    } else if (typeof scope_filter === 'string' && scope_filter.trim() !== '') {\n                        filter = createQuickFilter($scope.config.fieldsQuickSearch, scope_filter);\n                    }\n                    if (extra_filter) {\n                        if (filter) {\n                            final_filter = {\n                                and: [extra_filter, filter]\n                            };\n                        } else {\n                            final_filter = extra_filter;\n                        }\n                    } else {\n                        final_filter = filter;\n                    }\n                    $scope.$broadcast('downloadCsv', {\n                        'columns': columns,\n                        'filter': final_filter,\n                        'order': order\n                    });\n                };\n\n                $scope.generateQR = function() {\n                    $scope.$broadcast('generateQR');\n                };\n\n                var addItemToSelection = $scope.$on('addItemToSelection', function(event, item) {\n                    if (!$scope.selectedItems[item.key]) {\n                        $scope.selectedItems[item.key] = {\n                            data: item.data,\n                            visible: item.visible\n                        };\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n                        item.isSelected = true;\n                        $scope.selectionManager.lastItem = item;\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n                    }\n\n                });\n\n                var removeItemFromSelection = $scope.$on('removeItemFromSelection', function(event, item) {\n                    if ($scope.selectedItems[item.key]) {\n                        delete $scope.selectedItems[item.key];\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n                        item.isSelected = false;\n                        $scope.selectionManager.lastItem = item;\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n                    }\n                });\n\n                // bind reload function\n                var stopReloadTimeout;\n\n                $scope.setReloadTimeout = function() {\n                    var config = $scope.config || $scope.definition.config;\n\n                    if (config) {\n                        var reloadPeriod = config.reloadPeriod;\n                        if (!isNaN(reloadPeriod) && (reloadPeriod * 1) !== 0) {\n                            if (angular.isDefined(stopReloadTimeout)) {\n                                $interval.cancel(stopReloadTimeout)\n                                stopReloadTimeout = undefined;\n                            };\n                            stopReloadTimeout = $interval($scope.reload, (reloadPeriod * 1000));\n                        } else if (stopReloadTimeout) {\n                            $interval.cancel(stopReloadTimeout);\n                        }\n                    }\n                }\n\n                $scope.reload = function(completeReload) {\n                    if (completeReload) {\n                        $scope.$broadcast('widgetReload', completeReload);\n                    } else {\n                        $scope.$broadcast('widgetReload');\n                    }\n\n                    $scope.setReloadTimeout();\n                };\n\n                // verificacion de periodo de refresco\n                $scope.setReloadTimeout();\n\n                $scope.$on('$destroy', function() {\n                    adfDashboardCollapseExpand();\n                    adfWidgetEnterEditMode();\n                    adfIsEditMode();\n                    adfDashboardChanged();\n                    adfDashboardEditsCancelled();\n                    addItemToSelection();\n                    removeItemFromSelection();\n                    $interval.cancel(stopReloadTimeout);\n                });\n            },\n            compile: function() {\n\n                /**\n                 * use pre link, because link of widget-content\n                 * is executed before post link widget\n                 */\n                return {\n                    pre: preLink,\n                    post: postLink\n                };\n            }\n        };\n\n    });\nangular.module(\"adf\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"../src/templates/dashboard-column.html\",\"<div adf-id={{column.cid}} class=column ng-class=column.styleClass ng-model=column.widgets> {{widgetState}} <adf-widget ng-repeat=\\\"definition in column.widgets\\\" definition=definition column=column edit-mode=editMode options=options widget-state=widgetState>  </adf-widget></div>\");\n$templateCache.put(\"../src/templates/dashboard-edit.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h3 class=modal-title translate>ADF.DASHBOARD.TITLE.EDIT.DASHBOARD</h3> </div> <div class=modal-body> <form role=form name=form novalidate> <div class=\\\"form-group col-xs-12 col-md-6\\\"> <label for=dashboardTitle translate>ADF.COMMON.TITLE</label> <input type=text class=\\\"form-control text-primary\\\" id=dashboardTitle ng-model=copy.title required ng-init=\\\"copy.title=(copy.title | translate)\\\"> </div> <div class=\\\"form-group col-xs-12 col-md-6\\\"> <label for=dashboardDescription translate>ADF.DASHBOARD.LABEL.DESCRIPTION</label> <input type=text class=\\\"form-control text-primary\\\" id=dashboardDescription ng-init=\\\"copy.description=(copy.description | translate)\\\" ng-model=copy.description> </div> <div class=\\\"form-group col-xs-12 col-md-6\\\"> <label for=icon translate>ADF.DASHBOARD.LABEL.ICON</label> <ui-select tagging=tagTransform id=icon ng-model=copy.icon theme=bootstrap allow-clear=false required=true on-select=selectIcon($select.selected) title=\\\"{{\\'ADF.WIDGET.TITLE.CHOOSE_ICON\\' | translate}}\\\"> <ui-select-match placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.ICON\\' | translate}}\\\" allow-clear=false> <i class=\\\"fa {{$select.selected}} fa-2x\\\"></i> <span>{{$select.selected}}</span> </ui-select-match> <ui-select-choices class=oux-icon-selector repeat=\\\"iconTmp in availableIcons | filter: $select.search\\\"> <i class=\\\"fa fa-4x\\\" ng-class=iconTmp title={{iconTmp}}></i> <br> <span ng-bind-html=\\\"iconTmp| highlight: $select.search\\\"></span> </ui-select-choices> </ui-select> </div> </form> </div> <div class=modal-footer> <div class=col-xs-12> <button type=submit class=\\\"btn btn-primary\\\" ng-click=closeDialog() ng-disabled=form.$invalid translate>ADF.COMMON.CLOSE</button> </div> </div>\");\n$templateCache.put(\"../src/templates/dashboard-grid.html\",\"<div gridstack class=grid-stack options=gridOptions on-drag-start=onDragStart(event,ui) on-drag-stop=onDragStop(event,ui) on-resize-start=onResizeStart(event,ui) on-resize-stop=onResizeStop(event,ui) gridstack-handler=gsHandler on-change=onChange(event,items)> <div gridstack-item ng-repeat=\\\"w in adfModel.grid\\\" class=grid-stack-item gs-item-x=w.x gs-item-y=w.y gs-item-width=w.width gs-item-height=w.height gs-item-min-width=2 gs-item-min-height=2 gs-item-autopos=0> <adf-widget-grid ng-if=\\\"w && w.definition\\\" class=grid-stack-item-content options=options definition=w.definition edit-mode=editMode widget-state=widgetState></adf-widget-grid> </div> </div>\");\n$templateCache.put(\"../src/templates/dashboard-title.html\",\"<div class=row style=padding:0px;> <div class=\\\"col-xs-12 col-md-5\\\" ng-if=!hideButtons> <span ng-if=model.icon id=idDashboardIcon class=\\\"fa fa-2x\\\" ng-class=model.icon></span> <span id=idDashboardTitle class=\\\"fa-2x text-primary\\\">{{model.title | translate}}</span> <span ng-if=model.description id=idDashboardDescription>{{model.description | translate}}</span> </div> <div class=\\\"col-xs-12 col-md-7 text-right\\\" ng-if=!hideButtons> <a href ng-if=editMode title=\\\"{{ \\'ADF.DASHBOARD.TITLE.ADD\\' | translate }}\\\" ng-click=addWidgetDialog() class=\\\"btn btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-plus\\\" aria-hidden=true></i> {{\\'ADF.DASHBOARD.TITLE.ADD\\' | translate}} </a> <a href ng-if=editMode title=\\\"{{ \\'ADF.DASHBOARD.TITLE.CONFIGURATION\\' | translate }}\\\" ng-click=editDashboardDialog() class=\\\"btn btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-cog\\\"></i> {{\\'ADF.DASHBOARD.TITLE.CONFIGURATION\\' | translate}} </a> <a href ng-if=editMode title=\\\"{{ \\'ADF.DASHBOARD.TITLE.UNDO\\' | translate }}\\\" ng-click=cancelEditMode() class=\\\"btn btn-warning btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-close\\\"></i> {{\\'ADF.DASHBOARD.TITLE.UNDO\\' | translate}} </a> <a href ng-if=\\\"options.editable && !editMode && !model.temporal\\\" title=\\\"{{\\'ADF.DASHBOARD.TITLE.EDIT.MODE\\' | translate }}\\\" ng-click=toggleEditMode() class=\\\"btn btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-pencil-square-o\\\"></i> {{\\'ADF.DASHBOARD.TITLE.EDIT.MODE\\' | translate}} </a> <a href ng-if=\\\"options.editable && editMode\\\" title=\\\"{{\\'ADF.DASHBOARD.TITLE.SAVE\\' | translate)}}\\\" ng-click=toggleEditMode() class=\\\"btn btn-success btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-save\\\"></i> {{\\'ADF.DASHBOARD.TITLE.SAVE\\' | translate}} </a> </div> </div>\");\n$templateCache.put(\"../src/templates/dashboard.html\",\"<div class=dashboard-container x-ng-class=\\\"{\\'edit\\' : editMode}\\\"> <div ng-include src=model.titleTemplateUrl></div> <div class=dashboard x-ng-class=\\\"{\\'edit\\' : editMode}\\\" style=\\\"padding: 0px;margin: 0px;\\\"> <adf-dashboard-grid ng-if=model.grid adf-model=model options=options edit-mode=editMode> </adf-dashboard-grid></div> </div>\");\n$templateCache.put(\"../src/templates/widget-add.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title translate>ADF.WIDGET.TITLE.ADD_HEADER</h4> </div> <div class=modal-body>  <div ng-if=createCategories> <uib-accordion ng-init=\\\"categorized = createCategories(widgets)\\\"> <div uib-accordion-group heading=\\\"{{category.name | translate}}\\\" ng-repeat=\\\"category in categorized | adfOrderByObjectKey: \\'name\\'\\\"> <dl class=dl-horizontal> <dt ng-repeat-start=\\\"widget in category.widgets | adfOrderByObjectKey: \\'key\\'\\\"> <a href ng-click=addWidget(widget.key) ng-class={{widget.key}}> {{widget.title | translate}} </a> </dt> <dd ng-repeat-end ng-if=widget.description> {{widget.description | translate}} </dd> </dl> </div> </uib-accordion> </div>  <div ng-if=!createCategories> <div class=row> <div class=\\\"col-md-4 col-xs-12 form-group no-margin\\\"> <select ng-model=widgetFilterCfg.widgetFilter.categoryTags name=widgetsCategoryFilter class=form-control> <option value translate>ADF.WIDGET.LABEL.ALL_WIDGETS</option> <option ng-repeat=\\\"category in availableCategories | orderBy\\\" value={{category}}>{{ category | translate }}</option> </select> </div> <div class=\\\"col-md-4 col-xs-12 form-group no-margin\\\"> <select ng-model=widgetFilterCfg.widgetSorting name=widgetsSorting class=form-control> <option value=priority ng-selected=\\\"widgetFilterCfg.widgetSorting===\\'priority\\' || !widgetFilterCfg.widgetSorting\\\" translate=ADF.WIDGET.TITLE.SORTED_BY translate-values=\\\"{ item : (\\'ADF.WIDGET.LABEL.PRIORITY\\' | translate) }\\\"></option> <option value=name ng-selected=\\\"widgetFilterCfg.widgetSorting===\\'name\\'\\\" translate=ADF.WIDGET.TITLE.SORTED_BY translate-values=\\\"{ item : (\\'ADF.WIDGET.LABEL.NAME\\' | translate) }\\\"></option> <option value=category ng-selected=\\\"widgetFilterCfg.widgetSorting===\\'category\\'\\\" translate=ADF.WIDGET.TITLE.SORTED_BY translate-values=\\\"{ item : (\\'ADF.WIDGET.LABEL.CATEGORY\\' | translate) }\\\"></option> <option value=description ng-selected=\\\"widgetFilterCfg.widgetSorting===\\'description\\'\\\" translate=ADF.WIDGET.TITLE.SORTED_BY translate-values=\\\"{ item : (\\'ADF.WIDGET.LABEL.DESCRIPTION\\' | translate) }\\\"></option> </select> </div> <div class=\\\"col-md-4 col-xs-12 form-group no-margin\\\"> <select ng-model=widgetFilterCfg.widgetSortingDirection name=widgetSortingDirection class=form-control> <option value translate>BUTTON.TITLE.ASCENDING</option> <option value=1 translate>BUTTON.TITLE.DESCENDING</option> </select> </div> </div> <div class=row> <div class=\\\"col-xs-12 form-group no-margin\\\"> <input type=text class=form-control name=widgetsTitleFilter autofocus ng-model=widgetFilterCfg.widgetFilter.title placeholder=\\\"{{ \\'ADF.WIDGET.PLACEHOLDER.TYPE_WIDGET_FILTER\\'| translate }}\\\"> </div> </div> <div ng-repeat=\\\"widget in widgets | adfOrderByObjectKey: \\'key\\' | filter:widgetFilterCfg.widgetFilter:strict | orderBy:widgetFilterCfg.widgetSorting:widgetFilterCfg.widgetSortingDirection track by $index\\\" ng-class=\\\"{ \\'widgetPanelBig\\' : $index ===0 , \\'widgetPanelNormal\\' : $index > 0 }\\\"> <div class=\\\"pointer panel widgetInfoParent {{widget.key}}\\\" ng-click=addWidget(widget.key) title=\\\"{{widget.description | translate}}\\\"> <div class=\\\"widgetInfoImage pointer\\\"> <div ng-if=widget.svg class=widget-icon ng-include=widget.svg></div> <img ng-if=\\\"widget.images && !widget.svg\\\" ng-init=\\\"widget._currImg = widget.images[0]\\\" src=\\\"{{ widget._currImg }}\\\" ng-click=addWidget(widget.key) title=\\\"Click to change (if available)\\\"> <i ng-if=\\\"!widget.images && !widget.svg\\\" class=\\\"widgetInfoIcon fa\\\" ng-class=\\\"widget.icon ? widget.icon: \\'fa-plus-circle\\'\\\" ng-style=\\\"widget.color?{\\'color\\':widget.color}:\\'\\'\\\" aria-hidden=true></i> </div> <div class=widgetInfoContainer id=widgetKey_{{widget.key}} ng-class=\\\"{ \\'bg-contrast\\' : $index ===0, \\'bg-primary\\': $index !== 0}\\\">  <span class=widgetInfoTitle>{{widget.title }}</span><br> <span>({{widget.category}})</span> <span class=widgetInfoDescription>{{widget.description}}</span> </div> </div> </div> </div> </div> <div class=modal-footer style=clear:both;> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() translate>ADF.COMMON.CLOSE</button> </div>\");\n$templateCache.put(\"../src/templates/widget-delete.html\",\"<div class=modal-header> <h4 class=modal-title> <span translate>ADF.COMMON.DELETE</span> {{widget.title | translate}}</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=widgetTitle translate>ADF.WIDGET.LABEL.DELETE_CONFIRM_MESSAGE</label> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() translate>ADF.COMMON.CLOSE</button> <button type=button class=\\\"btn btn-primary\\\" ng-click=deleteDialog() translate>ADF.COMMON.DELETE</button> </div> \");\n$templateCache.put(\"../src/templates/widget-edit.html\",\"<form name=widgetEditForm novalidate role=form ng-submit=saveDialog()> <div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h3 class=modal-title>{{widget.title | translate}}</h3> </div> <div class=modal-body> <div class=row> <div class=col-xs-12> <div class=\\\"alert alert-danger\\\" role=alert ng-show=validationError> <strong translate>ADF.ERROR.APPLY_ERROR</strong> {{validationError | translate}} </div> </div> </div> <div class=row ng-if=widget.show_reload_config> <div class=\\\"col-xs-12 col-md-6\\\"> <div class=form-group> <label for=widgetTitle translate>ADF.COMMON.TITLE</label> <input type=text class=\\\"form-control text-primary\\\" id=widgetTitle ng-init=\\\"definition.title=(definition.title | translate)\\\" ng-model=definition.title placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.TITLE\\' | translate}}\\\"> </div> </div> <div class=\\\"col-xs-12 col-md-6\\\"> <div class=form-group> <label for=widgetReloadPeriod translate>ADF.WIDGET.TOOLTIP.REFRESH</label> <select class=form-control id=widgetReloadPeriod aria-label=\\\"ngSelected demo\\\" ng-model=definition.config.reloadPeriod required ng-init=\\\"definition.config.reloadPeriod ? definition.config.reloadPeriod : (definition.config.reloadPeriod = \\'0\\')\\\"> <option value=0 translate>ADF.WIDGET.OPTIONS.MANUAL</option> <option value=20 translate>ADF.WIDGET.OPTIONS.20_SECONDS</option> <option value=40 translate>ADF.WIDGET.OPTIONS.40_SECONDS</option> <option value=60 translate>ADF.WIDGET.OPTIONS.EVERY_MINUTE</option> </select> </div> </div> </div> <div class=row ng-if=!widget.show_reload_config> <div class=\\\"col-xs-12 col-md-12\\\"> <div class=form-group> <label for=widgetTitle translate>ADF.COMMON.TITLE</label> <input type=text class=\\\"form-control text-primary\\\" id=widgetTitle ng-init=\\\"definition.title=(definition.title | translate)\\\" ng-model=definition.title placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.TITLE\\' | translate}}\\\"> </div> </div> </div> <div ng-if=widget.edit class=row> <div class=col-xs-12> <adf-widget-content model=definition content=widget.edit> </adf-widget-content></div> </div> <div class=row> <div class=col-xs-12> <div class=form-group> <label for=widgetAbout translate>ADF.COMMON.ABOUT</label> <textarea class=\\\"form-control text-primary\\\" id=widgetAbout ng-model=definition.config.about placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.ENTER.DESCRIPTION\\'|translate}}\\\"></textarea> </div> </div> </div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() translate>ADF.WIDGET.BUTTON.CANCEL</button> <button type=submit class=\\\"btn btn-primary\\\" ng-disabled=widgetEditForm.$invalid value=\\\"{{\\'ADF.WIDGET.BUTTON.APPLY\\' | translate }}\\\" translate>ADF.WIDGET.BUTTON.APPLY</button> </div> </form>\");\n$templateCache.put(\"../src/templates/widget-fullscreen.html\",\"<div class=modal-header> <div class=\\\"pull-right widget-icons\\\"> <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.CLOSE\\' |translate }}\\\" ng-click=closeDialog() class=\\\"btn btn-xs btn-danger oux-button-margin\\\"> <i class=\\\"glyphicon glyphicon-remove\\\"></i> {{ \\'ADF.WIDGET.TOOLTIP.CLOSE\\' |translate }} </a> <a permission permission-only=\\\"\\'manageWorkspace\\'\\\" href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.INSERT\\' |translate }}\\\" ng-if=persistDashboard ng-click=persistDashboard() class=\\\"btn btn-xs btn-primary oux-button-margin\\\"> <i class=\\\"glyphicon glyphicon-save\\\"></i> {{ \\'ADF.WIDGET.TOOLTIP.INSERT\\' |translate }} </a> </div> <h4 class=\\\"modal-title pull-left\\\" translate>&nbsp;{{ definition.title | translate}}</h4> </div> <div class=\\\"modal-body widget\\\" style=overflow:hidden;>  <adf-widget-grid definition=definition edit-mode=false widget-state=widgetState></adf-widget-grid> </div> <div class=modal-footer ng-if=widget.show_modal_footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() translate>ADF.COMMON.CLOSE</button> </div>\");\n$templateCache.put(\"../src/templates/widget-grid-title.html\",\"<div class=panel-title style=margin:0px;> <div class=\\\"pull-right container-actions bg-primary\\\" data-intro=\\\"Widget actions\\\" data-position=bottom> <span ng-if=config.about> <a href uib-popover=\\\"{{ config.about }}\\\" popover-trigger=\\\"\\'mouseenter\\'\\\" popover-placement=top ng-click=openAboutScreen()> <i class=\\\"glyphicon glyphicon-info-sign\\\"></i> </a> <script type=text/ng-template id=widgetAboutModal.html> <div class=\\\"modal-header\\\"> <h4 class=\\\"modal-title\\\" translate>ADF.COMMON.ABOUT</h4> </div> <div class=\\\"modal-body\\\">{{ about.info }}</div> <div class=\\\"modal-footer\\\"> <button class=\\\"btn btn-primary\\\" type=\\\"button\\\" ng-click=\\\"ok()\\\" translate>ADF.WIDGET.BUTTON.OK</button> </div> </script> </span> <a ng-if=\\\"!editMode && widget.print\\\" href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.PRINT\\' | translate }}\\\" ng-click=print()> <i class=\\\"glyphicon glyphicon-print\\\"></i> </a> <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.REFRESH\\' | translate }}\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a>  <a permission permission-only=\\\"\\'viewFilter\\'\\\" href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.FILTER\\' | translate }}\\\" ng-if=\\\"config.widgetSelectors && !editMode\\\" ng-click=showFilter()> <i class=\\\"glyphicon glyphicon-filter\\\" ng-class=\\\"{\\'active\\': search.json || search.oql|| search.quick ||search.customFilter}\\\"></i> </a>  <a permission permission-only=\\\"\\'viewFilter\\'\\\" href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.SORT\\' | translate }}\\\" ng-if=\\\"config.sort && !editMode\\\" ng-click=showFilter()> <i class=\\\"glyphicon glyphicon-sort\\\" ng-class=\\\"{\\'active\\': (config.sort.value && config.sort.value !== \\'\\')}\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.EDIT\\' | translate }}\\\" ng-click=edit() ng-if=editMode> <i class=\\\"glyphicon glyphicon-cog\\\"></i> </a> <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.FULLSCREEN\\' | translate }}\\\" ng-click=openFullScreen() ng-show=\\\"options.maximizable && !widget.notMaximizable\\\"> <i class=\\\"glyphicon glyphicon-fullscreen\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.REMOVE\\' | translate}}\\\" ng-click=remove() ng-if=editMode> <i class=\\\"glyphicon glyphicon-trash\\\"></i> </a> <div ng-if=!editMode class=pointer style=\\\"display: inline;\\\" uib-dropdown uib-dropdown-toggle>  <i class=\\\"fa fa-ellipsis-h\\\" style=font-size:1.2em;></i> <ul uib-dropdown-menu class=dropdown-menu-right> <li role=menuitem> <a class=pointer href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.PICTURE\\' | translate}}\\\" ng-click=saveWidgetScreen(definition.wid)> <span class=\\\"glyphicon glyphicon-picture\\\"></span> {{ \\'ADF.WIDGET.TOOLTIP.PICTURE\\' | translate}} </a> </li> <li role=menuitem ng-if=widget.qr> <a class=pointer href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.QR\\' | translate }}\\\" ng-click=generateQR()> <span class=\\\"fa fa-qrcode\\\" style=\\\"font-size: 1.1em;\\\"></span> {{ \\'ADF.WIDGET.TOOLTIP.QR\\' | translate }} </a> </li> <li ng-if=widget.csv permission permission-only=\\\"\\'download\\'\\\" role=menuitem> <a class=pointer href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.CSV\\' | translate }}\\\" ng-click=downloadCsv()> <span class=\\\"glyphicon glyphicon-file\\\"></span> {{ \\'ADF.WIDGET.TOOLTIP.CSV\\' | translate }} </a> </li> <li role=menuitem permission permission-only=\\\"\\'executeOperation\\'\\\" ng-if=\\\"widget.executeOperation && isExecuteOperationEnabled()\\\"> <a class=pointer href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.OPERATION\\' | translate }}\\\" ng-click=executeOperation()> <span class=\\\"glyphicon glyphicon-flash\\\"></span> {{ \\'ADF.WIDGET.TOOLTIP.OPERATION\\' | translate }} </a> </li> <li role=menuitem ng-if=\\\"widgetActionsHandler && widgetActionsHandler.actions && widgetActionsHandler.actions.length > 0\\\" ng-repeat=\\\"customAction in widgetActionsHandler.actions\\\" permission permission-only=customAction.permissions> <a class=pointer title={{customAction.title}} ng-click=customAction.action(choice.value)> <span class=\\\"pointer {{customAction.icon}}\\\"></span> {{customAction.title}} </a> </li> </ul> </div> </div> <span class=pull-left>  <h4 ng-if=\\\"!widget.frameless && definition.title\\\" style=\\\"margin:4px 0px 0px 2px;float:left;\\\" translate class=text-primary>{{definition.title | translate}}</h4> </span> <div class=pull-right ng-if=\\\"navOptionsHandler.prevPage && navOptionsHandler.nextPage && navOptionsHandler.hasPrevPage && navOptionsHandler.hasNextPage && ( !navOptionsHandler.isPaginationEnable || navOptionsHandler.isPaginationEnable() ) && ( !navOptionsHandler.isNoContent || !navOptionsHandler.isNoContent() )\\\" style=margin-top:1px> <button class=\\\"btn btn-primary btn-sm pointer\\\" ng-click=navOptionsHandler.prevPage() ng-disabled=!navOptionsHandler.hasPrevPage()> <i class=\\\"glyphicon glyphicon-chevron-left browser-link\\\"></i>{{ \\'BUTTON.TITLE.PREVIOUS\\' | translate }} </button> <button class=\\\"btn btn-primary btn-sm pointer\\\" ng-click=navOptionsHandler.nextPage() ng-disabled=!navOptionsHandler.hasNextPage()> {{ \\'BUTTON.TITLE.NEXT\\' | translate }} <i class=\\\"glyphicon glyphicon-chevron-right browser-link\\\"></i> </button> </div> <div permission permission-only=\\\"[\\'viewFilter\\',\\'executeOperation\\']\\\" class=pull-right ng-if=\\\"selectedItemsLength > 0\\\" style=margin-top:1px> <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.SELECTION\\' | translate }}\\\" ng-click=manageSelectedItems() class=\\\"btn btn-primary btn-sm pointer\\\"> <i class=\\\"glyphicon glyphicon-check\\\"></i> <small class=ogux-budget>{{ selectedItemsLength }}</small> </a> </div> </div> <script type=text/ng-template id=actionsMenuTpl.html> <ul class=\\\"dropdown-menu\\\" uib-dropdown-menu role=\\\"menu\\\"> <li> <a class=\\\"pointer\\\" href=\\\"\\\" title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.PICTURE\\' | translate}}\\\" ng-click=\\\"saveWidgetScreen(definition.wid)\\\"> <span class=\\\"glyphicon glyphicon-picture\\\"></span> {{ \\'ADF.WIDGET.TOOLTIP.PICTURE\\' | translate}} </a> </li> <li ng-if=\\\"widget.qr\\\"> <a class=\\\"pointer\\\" href=\\\"\\\" title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.QR\\' | translate }}\\\" ng-click=\\\"generateQR()\\\"> <span class=\\\"fa fa-qrcode\\\" style=\\\"font-size: 1.1em;\\\"></span> {{ \\'ADF.WIDGET.TOOLTIP.QR\\' | translate }} </a> </li> <li ng-if=\\\"widget.csv\\\" permission permission-only=\\\" \\'download\\' \\\"> <a class=\\\"pointer\\\" href=\\\"\\\" title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.CSV\\' | translate }}\\\" ng-click=\\\"downloadCsv()\\\"> <span class=\\\"glyphicon glyphicon-file\\\"></span> {{ \\'ADF.WIDGET.TOOLTIP.CSV\\' | translate }} </a> </li> <li permission permission-only=\\\" \\'executeOperation\\' \\\" ng-if=\\\"widget.executeOperation && isExecuteOperationEnabled()\\\"> <a class=\\\"pointer\\\" href=\\\"\\\" title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.OPERATION\\' | translate }}\\\" ng-click=\\\"executeOperation()\\\"> <span class=\\\"glyphicon glyphicon-flash\\\"></span> {{ \\'ADF.WIDGET.TOOLTIP.OPERATION\\' | translate }} </a> </li> <li ng-if=\\\"widgetActionsHandler && widgetActionsHandler.actions && widgetActionsHandler.actions.length > 0\\\" ng-repeat=\\\"customAction in widgetActionsHandler.actions\\\" permission permission-only=\\\"customAction.permissions\\\"> <a class=\\\"pointer\\\" title=\\\"{{customAction.title}}\\\" ng-click=\\\"customAction.action(choice.value)\\\"> <span class=\\\"pointer {{customAction.icon}}\\\"></span> {{customAction.title}} </a> </li> </ul> </script>\");\n$templateCache.put(\"../src/templates/widget-grid.html\",\"<div adf-id={{definition.wid}} adf-widget-type={{definition.type}} ng-class=\\\"{\\'widget-move-mode\\': editMode}\\\" class=\\\"panel panel-default widget widget_{{definition.wid}}\\\"> <a name={{definition.wid}} id={{definition.wid}}></a> <div class=\\\"panel-heading clearfix\\\" ng-if=\\\"!widget.frameless || editMode\\\"> <div ng-include src=definition.titleTemplateUrl></div> </div> <div ng-class=\\\"{ \\'panel-body\\':!widget.frameless || editMode, \\'widget-blur-loading\\': (navOptionsHandler && navOptionsHandler.firstLoad && navOptionsHandler.loadingData) }\\\" uib-collapse=widgetState.isCollapsed> <div ng-if=\\\"!widgetState.isCollapsed && config.widgetSelectors && !editMode && filterAvailable\\\" class=\\\"row form-group\\\" style=\\\"margin-top: 5px !important;\\\"> <div ng-if=\\\"toggleAdvanced === 0\\\" class=\\\"col-xs-12 col-md-8\\\"> <div class=filter mass-autocomplete> <input class=form-control style=padding-right:15px; name=filterValue ng-keydown=enter($event) ng-model=search.oql ng-blur=launchSearchingAdv() placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.ENTER.FILTER.ADVANCED\\' | translate }}\\\" mass-autocomplete-item=autocomplete_options() ng-change=debugQuery()> <label ng-click=launchSearchingAdv() style=\\\"position: absolute;font-size: 1.5em;cursor:pointer;right: 15px;\\\" class=glyphicon ng-class=\\\"{ \\'glyphicon-search\\' : !filterApplied, \\'glyphicon-ok\\': filterApplied}\\\"></label> </div> <div ng-if=\\\"!editMode && filter.error\\\" class=col-xs-12> <alert type=danger class=\\\"text-center text-danger\\\"> <span>{{filter.error}}</span> </alert> </div> <div ng-if=\\\"showFinalFilter && search.json\\\" class=col-xs-12> <pre>{{ search.json }}</pre> </div> </div> <div ng-if=ifCustomFilter() class=\\\"col-xs-12 col-md-8\\\"> <div class=\\\"filter form-group\\\"> <a href class=text-danger ng-click=\\\"options.customFilter.open = !options.customFilter.open\\\"> <i class=glyphicon ng-class=\\\"{\\'glyphicon-chevron-up\\': options.customFilter.open, \\'glyphicon-chevron-down\\': !options.customFilter.open}\\\"></i> {{\\'ADF.WIDGET.TITLE.PICK_FILTER_FIELDS\\' | translate}} </a> <label ng-click=launchCustomFilter() style=\\\"position: absolute;font-size: 1.5em;cursor:pointer;right: 15px;\\\" class=\\\"glyphicon glyphicon-search\\\"></label> <div class=row ng-if=options.customFilter.open> <ui-select multiple=true ng-model=search.fields theme=bootstrap title=\\\"{{\\'ADF.WIDGET.TITLE.CHOOSE_FILTER\\' | translate }}\\\" on-select=addCustomFilter($item) on-remove=deleteFilter($item) ng-click=getcustomFilter()> <ui-select-match placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.PICK_FILTER_FIELDS\\' | translate }}\\\" allow-clear=true> {{$item}} </ui-select-match> <ui-select-choices repeat=\\\"selector in (customFilter | filter: $select.search) track by $index\\\"> <small ng-bind-html=\\\"selector | highlight: $select.search\\\"></small> </ui-select-choices> </ui-select> </div> </div> </div> <div ng-if=\\\"toggleAdvanced === 1\\\" class=\\\"col-xs-12 col-md-8\\\"> <div class=filter> <input class=form-control style=padding-right:15px; name=filterValue ng-keydown=enter($event) ng-blur=launchSearchingQuick() ng-model=search.quick placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.ENTER.FILTER.BASIC\\' | translate}}\\\"> <label ng-click=launchSearchingQuick() style=\\\"position: absolute;font-size: 1.5em;cursor:pointer;right: 15px;\\\" class=glyphicon ng-class=\\\"{ \\'glyphicon-search\\' : !filterApplied, \\'glyphicon-ok\\': filterApplied}\\\"></label> </div> </div> <div class=\\\"col-xs-12 col-md-4\\\" uib-dropdown> <button class=\\\"btn btn-sm\\\" uib-dropdown-toggle title=\\\"{{\\'ADF.WIDGET.TITLE.TOGGLE_AVANCED_BASIC_FILTER\\' | translate }}\\\"> <i class=\\\"advanced-filter glyphicon\\\" ng-class=\\\"{\\'glyphicon-font\\' : toggleAdvanced === 0, \\'glyphicon-bold\\' : toggleAdvanced ===1 , \\'glyphicon-filter\\' : toggleAdvanced === 2, }\\\"></i> <span class=caret></span> </button> <ul class=\\\"dropdown-menu panel\\\" style=\\\"border: 1px groove;\\\" uib-dropdown-menu aria-labelledby=simple-dropdown> <li ng-click=toggleFilter(0)> <a href> <i class=\\\"advanced-filter glyphicon glyphicon-font txt-primary\\\"></i> {{\\'ADF.WIDGET.TITLE.FILTER.ADVANCED\\' | translate}}</a> </li> <li ng-click=toggleFilter(1)> <a href> <i class=\\\"basic-filter glyphicon glyphicon-bold txt-primary\\\"></i> {{\\'ADF.WIDGET.TITLE.FILTER.BASIC\\' | translate}}</a> </li>  </ul> </div> </div> <div ng-if=\\\"customSelectors && config.sort && filterAvailable && toggleAdvanced != 2\\\" class=\\\"row form-group\\\" style=\\\"margin-top: 5px !important;\\\"> <div class=\\\"sort col-xs-12 col-md-8\\\"> <ui-select ng-model=config.sort.value theme=bootstrap title=\\\"{{\\'ADF.WIDGET.TITLE.CHOOSE_ORDER\\' | translate}}\\\" allow-clear=true append-to-body=true ng-change=launchSearching() ng-click=getCustomSelectors()> <ui-select-match placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.SHORTED_BY\\' | translate}}\\\" allow-clear=true>{{ \\'ADF.WIDGET.TITLE.SORTED_BY\\' | translate:{item: $select.selected} }}</ui-select-match> <ui-select-choices repeat=\\\"selector in customSelectors | filter: $select.search track by $index\\\"> <small> <span ng-bind-html=\\\"selector | highlight: $select.search\\\"></span> </small> </ui-select-choices> </ui-select> </div> <div class=\\\"sortDirection col-xs-4 col-md-4\\\"> <button class=\\\"btn btn-sm pointer\\\" ng-click=changeDirection() ng-disabled=\\\"config.sort.value === \\'\\'\\\" title=\\\"{{\\'TOGGLE_SORTING_DIRECTION\\' | translate}}\\\"> <i class=glyphicon style=font-size:1.3em; ng-class=\\\"config.sort.direction===\\'ASCENDING\\' ? \\'glyphicon-sort-by-attributes\\': \\'glyphicon-sort-by-attributes-alt\\'\\\"></i> </button> </div> </div> <div ng-if=showCustomFields() class=\\\"col-xs-12 col-md-12\\\"> <div class=\\\"col-xs-12 col-md-4\\\" ng-repeat=\\\"model in search.customFilter\\\"> <label>{{model.name | translate}}</label> <input class=form-control id={{model.name}} name={{model.name}} type=text ng-model=search.customFilter[$index].value ng-keydown=enter($event)> </div> </div>   <adf-widget-content ng-if=definition model=definition content=widget extra=options.extraData nav-options-handler=navOptionsHandler filter-handler=filterHandler widget-actions-handler=widgetActionsHandler> </adf-widget-content></div> <div class=loaderContainer ng-if=\\\"navOptionsHandler && navOptionsHandler.firstLoad && navOptionsHandler.loadingData\\\">  <img class=loaderImage src={{widget.images[0]}}> </div> <div class=\\\"panel-footer no-padding no-margin\\\"> <div class=\\\"col-xs-7 text-left\\\"> <span ng-if=\\\"navOptionsHandler && navOptionsHandler.statusMessage && !navOptionsHandler.loadingData && !navOptionsHandler.firstLoad\\\">{{navOptionsHandler.statusMessage | translate}}</span> </div> <div class=\\\"col-xs-5 spinner-container\\\" ng-if=\\\"navOptionsHandler && navOptionsHandler.loadingData && !navOptionsHandler.firstLoad\\\"> <div class=\\\"spinner pull-right\\\"></div> </div> <div class=\\\"col-xs-5 text-right no-padding no-margin\\\" ng-if=\\\"navOptionsHandler && navOptionsHandler.lastMessageTime && !navOptionsHandler.loadingData && !navOptionsHandler.firstLoad\\\"> <small class=label am-time-ago=navOptionsHandler.lastMessageTime></small> </div> </div> </div>\");\n$templateCache.put(\"../src/templates/widget-selection.html\",\"<style>\\n    .selected-entities-control .ui-select-container>div:first-child {\\n        max-height: 300px;\\n        overflow-y: scroll;\\n        overflow-x: hidden;\\n    }\\n</style> <form name=widgetSelectionForm novalidate role=form ng-submit=saveChangesDialog()> <div class=modal-header> <div class=\\\"col-xs-12 col-md-12\\\"> <h3 class=\\\"modal-title text-left\\\"> <i class=\\\"fa fa-check-square-o\\\" aria-hidden=true></i> {{\\'ADF.WIDGET.TITLE.SELECTED_ITEMS\\' | translate}}</h3> </div> </div> <div class=modal-body> <div class=col-xs-12> <div class=\\\"form-group selected-entities-control\\\"> <label for=currentSelection translate>ADF.WIDGET.LABEL.CURRENT_SELECTION</label> <ui-select multiple tagging ng-model=currentSelection.selected theme=bootstrap sortable=false title=\\\"{{\\'ADF.WIDGET.TITLE.SELECTED_ITEMS\\' | translate}}\\\"> <ui-select-match placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.NO_SELECTED\\' | translate}}\\\"> <div class=text-left style=\\\"margin-right: 15px;font-size: 0.9em;max-width:350px;\\\" ng-if=$item.value.visible> <span style=\\\"white-space: initial;word-break: break-word;\\\" ng-repeat=\\\"(k,v) in $item.value.visible track by $index\\\" ng-if=\\\"v !== undefined\\\"> <strong>{{k | translate}}:</strong> {{v}} <br> </span> </div> <div class=text-left style=\\\"margin-right: 15px;font-size: 0.9em;max-width:350px;\\\" ng-if=!$item.value.visible> <span style=\\\"white-space: initial;word-break: break-word;\\\">{{$item.key}}</span> </div> </ui-select-match> <ui-select-choices repeat=\\\"itemSel in currentSelection.selected | filter:$select.search\\\"> {{itemSel.key}} </ui-select-choices> </ui-select> </div> </div> <div class=\\\"col-xs-12 text-left\\\"> <button type=button class=\\\"btn btn-success btn-sm\\\" ng-click=restoreSelection() ng-disabled=\\\"currentSelection.selected.length === selectedItemsLength\\\" translate>ADF.WIDGET.BUTTON.RESTORE</button> <button type=button class=\\\"btn btn-danger btn-sm\\\" ng-click=clearSelection() ng-disabled=\\\"currentSelection.selected.length < 1\\\" translate>ADF.WIDGET.BUTTON.CLEAR</button> </div> </div> <div class=modal-footer> <div permission permission-only=\\\"\\'viewFilter\\'\\\" class=\\\"col-xs-12 col-md-2 text-left\\\"> <div uib-dropdown ng-if=\\\"selectionConfig && selectionConfig.filterTypes && currentSelection.selected.length > 0\\\"> <button id=applyFilterBy type=button class=\\\"btn btn-primary\\\" uib-dropdown-toggle> <i class=\\\"glyphicon glyphicon-filter pointer\\\"></i> {{\\'ADF.WIDGET.BUTTON.FILTER_BY\\' | translate}} <span class=caret></span> </button> <ul class=dropdown-menu uib-dropdown-menu role=menu aria-labelledby=applyFilterBy> <li role=menuitem ng-repeat=\\\"filterType in selectionConfig.filterTypes\\\"> <a href ng-click=applyFilter(filterType) title=\\\"{{\\'ADF.WIDGET.BUTTON.SELECTED\\' | translate:{filterType: filterType} }}\\\">{{\\'ADF.WIDGET.BUTTON.SELECTED\\' | translate:{filterType: filterType} }}</a> </li> </ul> </div> </div> <div permission permission-only=\\\"\\'executeOperation\\'\\\" class=\\\"col-xs-12 col-md-3 text-left\\\"> <div uib-dropdown ng-if=\\\"selectionConfig && selectionConfig.operationTypes && currentSelection.selected.length > 0\\\"> <button id=executeOperation type=button class=\\\"btn btn-primary\\\" uib-dropdown-toggle> <i class=\\\"glyphicon glyphicon-flash pointer\\\"></i> {{\\'ADF.WIDGET.BUTTON.EXECUTE_OPERATION\\' | translate}} <span class=caret></span> </button> <ul class=dropdown-menu uib-dropdown-menu role=menu aria-labelledby=executeOperation> <li role=menuitem ng-repeat=\\\"operationType in selectionConfig.operationTypes\\\"> <a href ng-click=executeOperation(operationType) title={{operationType|translate}}>{{operationType|translate}}</a> </li> </ul> </div> </div> <div class=\\\"col-xs-12 col-md-7 text-right\\\"> <button type=submit class=\\\"btn btn-primary\\\" ng-disabled=\\\"currentSelection.selected.length === selectedItemsLength\\\" translate value=\\\"{{\\'ADF.WIDGET.BUTTON.APPLY\\' | translate }}\\\">ADF.WIDGET.BUTTON.APPLY</button> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() translate>ADF.COMMON.CLOSE</button> </div> </div> </form>\");\n$templateCache.put(\"../src/templates/widget-title.html\",\"<div class=panel-title style=margin:0px;> <div class=\\\"pull-right container-actions bg-primary\\\"> <span ng-if=config.about> <a href uib-popover=\\\"{{ config.about }}\\\" popover-trigger=\\\"\\'mouseenter\\'\\\" popover-placement=top ng-click=openAboutScreen()> <i class=\\\"glyphicon glyphicon-info-sign\\\"></i> </a> <script type=text/ng-template id=widgetAboutModal.html> <div class=\\\"modal-header\\\"> <h4 class=\\\"modal-title\\\" translate>ADF.COMMON.ABOUT</h4> </div> <div class=\\\"modal-body\\\">{{ about.info }}</div> <div class=\\\"modal-footer\\\"> <button class=\\\"btn btn-primary\\\" type=\\\"button\\\" ng-click=\\\"ok()\\\" translate>ADF.WIDGET.BUTTON.OK</button> </div> </script> </span> <a ng-if=\\\"!editMode && widgetActions && widgetActions.length > 0\\\" ng-repeat=\\\"customAction in widgetActions\\\" permission permission-only=customAction.permissions title={{customAction.title}} ng-click=customAction.action(choice.value)> <i class=\\\"pointer {{customAction.icon}}\\\"></i> </a> <a ng-if=\\\"!editMode && widget.print\\\" href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.PRINT\\' | translate }}\\\" ng-click=print()> <i class=\\\"glyphicon glyphicon-print\\\"></i> </a> <span ng-if=\\\"!editMode && config.widgetOnToggleView && config.widgetViews\\\" uib-popover=\\\"Change view\\\" popover-trigger=\\\"\\'mouseenter\\'\\\" popover-placement=top uib-dropdown> <a href id=toggle_{{definition.wid}} uib-dropdown-toggle> <i class=\\\"glyphicon glyphicon-eye-close\\\"></i> </a> <ul class=dropdown-menu uib-dropdown-menu aria-labelledby=\\\"{{\\'ADF.WIDGET.LABEL.CHANGE_VIEW\\' | translate}}\\\"> <li ng-repeat=\\\"choice in config.widgetViews\\\"> <a ng-click=config.widgetOnToggleView(choice.value)>{{choice.name | translate}}</a> </li> </ul> </span> <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.REFRESH\\' | translate }}\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a>  <a permission permission-only=\\\"\\'executeOperation\\'\\\" href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.OPERATION\\' | translate }}\\\" ng-if=\\\"widget.executeOperation && !editMode && isExecuteOperationEnabled()\\\" ng-click=executeOperation()> <i class=\\\"glyphicon glyphicon-flash\\\"></i> </a>  <a permission permission-only=\\\"\\'viewFilter\\'\\\" href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.FILTER\\' | translate }}\\\" ng-if=\\\"config.widgetSelectors && !editMode\\\" ng-click=showFilter()> <i class=\\\"glyphicon glyphicon-filter\\\" ng-class=\\\"{\\'active\\': search.json || search.oql|| search.quick ||search.customFilter}\\\"></i> </a>  <a permission permission-only=\\\"\\'viewFilter\\'\\\" href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.SORT\\' | translate }}\\\" ng-if=\\\"config.sort && !editMode\\\" ng-click=showFilter()> <i class=\\\"glyphicon glyphicon-sort\\\" ng-class=\\\"{\\'active\\': (config.sort.value && config.sort.value !== \\'\\')}\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.PICTURE\\' | translate}}\\\" ng-if=\\\"!editMode && !widgetState.isCollapsed\\\" ng-click=saveWidgetScreen(definition.wid)> <i class=\\\"glyphicon glyphicon-picture\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.QR\\' | translate }}\\\" ng-if=\\\"!editMode && widget.qr\\\" ng-click=generateQR()> <i class=\\\"fa fa-qrcode\\\" style=\\\"font-size: 1.1em;\\\"></i> </a>  <a permission permission-only=\\\"\\'download\\'\\\" href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.CSV\\' | translate }}\\\" ng-if=\\\"!editMode && widget.csv\\\" ng-click=downloadCsv()> <i class=\\\"glyphicon glyphicon-file\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.MOVE\\' | translate }}\\\" class=adf-move ng-if=editMode> <i class=\\\"glyphicon glyphicon-move\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.COLLAPSE\\' | translate }}\\\" ng-show=\\\"options.collapsible && !widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-minus\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.EXPAND\\' | translate }}\\\" ng-show=\\\"options.collapsible && widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-plus\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.EDIT\\' | translate }}\\\" ng-click=edit() ng-if=editMode> <i class=\\\"glyphicon glyphicon-cog\\\"></i> </a> <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.FULLSCREEN\\' | translate }}\\\" ng-click=openFullScreen() ng-show=options.maximizable> <i class=\\\"glyphicon glyphicon-fullscreen\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.REMOVE\\' | translate}}\\\" ng-click=remove() ng-if=editMode> <i class=\\\"glyphicon glyphicon-trash\\\"></i> </a> </div> <span class=pull-left>  <h4 ng-if=\\\"!widget.frameless && definition.title\\\" style=\\\"margin:4px 0px 0px 2px;float:left;\\\" translate class=text-primary>{{definition.title | translate}}</h4> </span> <div class=pull-right ng-if=\\\"prevPage && nextPage && hasPrevPage && hasNextPage && ( !isPaginationEnable || isPaginationEnable() ) && ( !isNoContent || !isNoContent() )\\\" style=margin-top:1px> <button class=\\\"btn btn-primary btn-xs pointer oux-button-margin\\\" ng-click=prevPage() ng-disabled=!hasPrevPage()> <i class=\\\"glyphicon glyphicon-chevron-left browser-link\\\"></i>{{ \\'BUTTON.TITLE.PREVIOUS\\' | translate }} </button> <button class=\\\"btn btn-primary btn-xs pointer oux-button-margin\\\" ng-click=nextPage() ng-disabled=!hasNextPage()> {{ \\'BUTTON.TITLE.NEXT\\' | translate }} <i class=\\\"glyphicon glyphicon-chevron-right browser-link\\\"></i> </button> </div> <div permission permission-only=\\\"[\\'viewFilter\\',\\'executeOperation\\']\\\" class=pull-right ng-if=\\\"selectedItemsLength > 0\\\" style=margin-top:1px> <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.SELECTION\\' | translate }}\\\" ng-click=manageSelectedItems() class=\\\"btn btn-primary btn-xs pointer oux-button-margin\\\"> <i class=\\\"glyphicon glyphicon-check\\\"></i> <small class=ogux-budget>{{ selectedItemsLength }}</small> </a> </div> </div>\");\n$templateCache.put(\"../src/templates/widget.html\",\"<div adf-id={{definition.wid}} adf-widget-type={{definition.type}} ng-class=\\\"widgetClasses(widget, definition)\\\" class=\\\"widget widget_{{definition.wid}}\\\"> <a name={{definition.wid}} id={{definition.wid}}></a> <div class=\\\"panel-heading clearfix\\\" ng-if=\\\"!widget.frameless || editMode\\\"> <div ng-include src=definition.titleTemplateUrl></div> </div> <div ng-if=\\\"!widgetState.isCollapsed && config.widgetSelectors && !editMode && filterAvailable\\\" class=\\\"row form-group\\\" style=\\\"margin-top: 5px !important;\\\"> <div ng-if=\\\"toggleAdvanced === 0\\\" class=\\\"col-xs-12 col-md-8\\\"> <div class=filter mass-autocomplete> <input class=form-control style=padding-right:15px; name=filterValue ng-keydown=enter($event) ng-model=search.oql ng-blur=launchSearchingAdv() placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.ENTER.FILTER.ADVANCED\\' | translate }}\\\" mass-autocomplete-item=autocomplete_options() ng-change=debugQuery()> <label ng-click=launchSearchingAdv() style=\\\"position: absolute;font-size: 1.5em;cursor:pointer;right: 15px;\\\" class=glyphicon ng-class=\\\"{ \\'glyphicon-search\\' : !filterApplied, \\'glyphicon-ok\\': filterApplied}\\\"></label> </div> <div ng-if=\\\"!editMode && filter.error\\\" class=col-xs-12> <alert type=danger class=\\\"text-center text-danger\\\"> <span>{{filter.error}}</span> </alert> </div> <div ng-if=\\\"showFinalFilter && search.json\\\" class=col-xs-12> <pre>{{ search.json }}</pre> </div> </div> <div ng-if=ifCustomFilter() class=\\\"col-xs-12 col-md-8\\\"> <div class=\\\"filter form-group\\\"> <a href class=text-danger ng-click=\\\"options.customFilter.open = !options.customFilter.open\\\"> <i class=glyphicon ng-class=\\\"{\\'glyphicon-chevron-up\\': options.customFilter.open, \\'glyphicon-chevron-down\\': !options.customFilter.open}\\\"></i> {{\\'ADF.WIDGET.TITLE.PICK_FILTER_FIELDS\\' | translate}} </a> <label ng-click=launchCustomFilter() style=\\\"position: absolute;font-size: 1.5em;cursor:pointer;right: 15px;\\\" class=\\\"glyphicon glyphicon-search\\\"></label> <div class=row ng-if=options.customFilter.open> <ui-select multiple=true ng-model=search.fields theme=bootstrap title=\\\"{{\\'ADF.WIDGET.TITLE.CHOOSE_FILTER\\' | translate }}\\\" on-select=addCustomFilter($item) on-remove=deleteFilter($item) ng-click=getcustomFilter()> <ui-select-match placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.PICK_FILTER_FIELDS\\' | translate }}\\\" allow-clear=true> {{$item}} </ui-select-match> <ui-select-choices repeat=\\\"selector in (customFilter | filter: $select.search) track by $index\\\"> <small ng-bind-html=\\\"selector | highlight: $select.search\\\"></small> </ui-select-choices> </ui-select> </div> </div> </div> <div ng-if=\\\"toggleAdvanced === 1\\\" class=\\\"col-xs-12 col-md-8\\\"> <div class=filter> <input class=form-control style=padding-right:15px; name=filterValue ng-keydown=enter($event) ng-blur=launchSearchingQuick() ng-model=search.quick placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.ENTER.FILTER.BASIC\\' | translate}}\\\"> <label ng-click=launchSearchingQuick() style=\\\"position: absolute;font-size: 1.5em;cursor:pointer;right: 15px;\\\" class=glyphicon ng-class=\\\"{ \\'glyphicon-search\\' : !filterApplied, \\'glyphicon-ok\\': filterApplied}\\\"></label> </div> </div> <div class=\\\"col-xs-12 col-md-4\\\" uib-dropdown> <button class=\\\"btn btn-sm\\\" uib-dropdown-toggle title=\\\"{{\\'ADF.WIDGET.TITLE.TOGGLE_AVANCED_BASIC_FILTER\\' | translate }}\\\"> <i class=\\\"advanced-filter glyphicon\\\" ng-class=\\\"{\\'glyphicon-font\\' : toggleAdvanced === 0, \\'glyphicon-bold\\' : toggleAdvanced ===1 , \\'glyphicon-filter\\' : toggleAdvanced === 2, }\\\"></i> <span class=caret></span> </button> <ul class=\\\"dropdown-menu panel\\\" style=\\\"border: 1px groove;\\\" uib-dropdown-menu aria-labelledby=simple-dropdown> <li ng-click=toggleFilter(0)> <a href> <i class=\\\"advanced-filter glyphicon glyphicon-font txt-primary\\\"></i> {{\\'ADF.WIDGET.TITLE.FILTER.ADVANCED\\' | translate}}</a> </li> <li ng-click=toggleFilter(1)> <a href> <i class=\\\"basic-filter glyphicon glyphicon-bold txt-primary\\\"></i> {{\\'ADF.WIDGET.TITLE.FILTER.BASIC\\' | translate}}</a> </li>  </ul> </div> </div> <div ng-if=\\\"customSelectors && config.sort && filterAvailable && toggleAdvanced != 2\\\" class=\\\"row form-group\\\" style=\\\"margin-top: 5px !important;\\\"> <div class=\\\"sort col-xs-12 col-md-8\\\"> <ui-select ng-model=config.sort.value theme=bootstrap title=\\\"{{\\'ADF.WIDGET.TITLE.CHOOSE_ORDER\\' | translate}}\\\" allow-clear=true append-to-body=true ng-change=launchSearching() ng-click=getCustomSelectors()> <ui-select-match placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.SHORTED_BY\\' | translate}}\\\" allow-clear=true>{{ \\'ADF.WIDGET.TITLE.SORTED_BY\\' | translate:{item: $select.selected} }}</ui-select-match> <ui-select-choices repeat=\\\"selector in customSelectors | filter: $select.search track by $index\\\"> <small> <span ng-bind-html=\\\"selector | highlight: $select.search\\\"></span> </small> </ui-select-choices> </ui-select> </div> <div class=\\\"sortDirection col-xs-4 col-md-4\\\"> <button class=\\\"btn btn-sm pointer\\\" ng-click=changeDirection() ng-disabled=\\\"config.sort.value === \\'\\'\\\" title=\\\"{{\\'TOGGLE_SORTING_DIRECTION\\' | translate}}\\\"> <i class=glyphicon style=font-size:1.3em; ng-class=\\\"config.sort.direction===\\'ASCENDING\\' ? \\'glyphicon-sort-by-attributes\\': \\'glyphicon-sort-by-attributes-alt\\'\\\"></i> </button> </div> </div> <div ng-if=showCustomFields() class=\\\"col-xs-12 col-md-12\\\"> <div class=\\\"col-xs-12 col-md-4\\\" ng-repeat=\\\"model in search.customFilter\\\"> <label>{{model.name | translate}}</label> <input class=form-control id={{model.name}} name={{model.name}} type=text ng-model=search.customFilter[$index].value ng-keydown=enter($event)> </div> </div> <div ng-class=\\\"{ \\'panel-body\\':!widget.frameless || editMode}\\\" uib-collapse=widgetState.isCollapsed style=\\\"overflow:hidden;padding:0px 10px 0 10px;\\\"> <adf-widget-content model=definition content=widget extra=options.extraData> </adf-widget-content></div> </div>\");}]);\n})(window);"]}