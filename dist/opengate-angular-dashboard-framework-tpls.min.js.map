{"version":3,"sources":["adf.js","dashboard.js","grid.js","order-by-object-key.js","provider.js","widget-content.js","widget-grid-filter.js","widget-grid.js","widget-service.js","opengate-angular-dashboard-framework.tpl.js","opengate-angular-dashboard-framework-tpls.js"],"names":["window","undefined","angular","module","value","directive","$rootScope","$log","$timeout","$uibModal","dashboard","adfTemplatePath","$translate","Upload","stringToBoolean","string","isDefined","toLowerCase","Boolean","createConfiguration","type","cfg","config","widgets","copy","createWidget","wdgt","widget","addNewWidgetToModel","model","name","forceToSave","grid","newWidget","width","height","x","y","definition","push","$broadcast","error","isEditModeImmediate","edit","immediate","openEditMode","$scope","createCategories","categories","forEach","key","category","title","instant","description","isUndefined","createCategoriesList","categoryTags","categoriesTmp","split","allWidgetCategoriesTranslated","idx","translatedCat","indexOf","toString","replace","restrict","transclude","scope","collapsible","editable","editMode","continuousEditMode","maximizable","adfModel","adfWidgetFilter","hideButtons","extraData","controller","getNewModalScope","$new","extraConfig","cellHeight","widgetFilter","_getReloadWidgets","reloadWidgets","configChange","reload","ftype","Ftype","id","wid","filter","w","f","ft","updateWidgetFilters","widgetFilters","length","element","options","$watch","oldVal","newVal","titleTemplateUrl","toggleEditMode","openConfigWindow","modelCopy","editDashboardDialog","adfToggleEditMode","$on","event","isNewDashboard","adfCancelEditMode","cancelEditMode","adfWidgetRemoved","index","widgetTmp","splice","adfWidgetRemovedAndSave","adfEditDashboardDialog","adfLaunchSearchingFromWidget","adfWindowTimeChangedFromWidget","editDashboardScope","backgroundColor","time","Date","backgroundImage","file","backgroundSize","backgroundImageSize","100% 100%","contain","cover","iconConfiguration","iconType","url","icon","image","imageSelected","base64DataUrl","then","removeDataFile","backgroundImageSelected","removeBackgroundFile","adfEditTemplatePath","editTemplateUrl","instance","open","templateUrl","backdrop","keyboard","size","closeDialog","cancelChanges","console","warn","close","$destroy","adfOpenWidgetFromOther","internal_config","_config","merge","adfOpenModalWidgetFromOther","widgetType","origScope","sendSelection","fullScreenScope","opts","modalSize","windowClass","temporal","persistDashboard","this","$parent","adfAddWidgetDialog","addWidgetDialog","addScopeCfg","widgetSortingDirection","widgetSorting","addScope","isFunction","availableCategories","adfAddTemplatePath","addTemplateUrl","widgetFilterCfg","addWidget","changeThumbnail","images","_currThumb","_currImg","link","$element","$attr","enableConfirmDelete","editing","preLink","gridOptions","disableDrag","disableResize","gsHandler","verticalMargin","animate","float","alwaysShowResizeHandle","minWidth","auto","resizable","handles","compile","pre","dashEvents","enable","disable","$event","isNumber","newModel","GridStackUI","Utils","sort","onChange","items","onDragStop","ui","log","onResizeStop","dashEvt","$filter","item","array","objectKey","provider","widgetsPath","messageTemplate","loadingTemplate","customWidgetTemplatePath","defaultApplyFunction","extend","frameless","apply","path","template","templatePath","$get","cid","getTime","idEquals","other","$q","widgetService","$compile","$controller","$injector","renderError","msg","html","compileWidget","currentScope","configChanged","_getWindowTime","from","newScope","windowFilter","to","moment","startOf","subtract","_d","translateMessage","content","extra","is_menu","menu","isPaginationEnable","reloadData","navOptionsHandler","firstLoad","renderWidget","is_itemsPerPage","itemsPerPage","page","getWindowTime","winTime","eval","rawdate","format","templateScope","_from","selectionManager","base","resolvers","$tpl","getTemplate","resolve","promise","isString","get","invoke","all","locals","resolveAs","templateCtrl","controllerAs","children","data","contents","reason","require","filterHandler","widgetActionsHandler","attrs","adfWidgetGridCtrl","search","widgetConfigChangedEvt","changeWidgets","widgetReloadEvt","reloadWidget","factory","launchSearchingAdv","$interval","Filter","queryService","$api","toastr","styleClass","fromJson","show_modal_footer","show_reload_config","widgetState","isCollapsed","collapsed","debug","postLink","deleteWidget","remove","deleteScope","deleteTemplateUrl","deleteDialog","print","isExecuteOperationEnabled","entityKey","headersFilter","oql","executeOperation","_setFilterType","launchSearching","preventRefreshFilterEvent","typeFilter","advancedFilterScope","advancedFilterTemplate","animation","fieldsSearch","selected","datastreamsSearch","enableApply","evaluating","queryFields","identifier","addextraElements","field","existsOptions","disabledComparators","dsOptions","schemaForm","properties","schema","form","notitle","fieldHtmlClass","schemaName","removeextraElements","fields","map","comparators","dataTemplate","defaultData","dataType","basicTypesSearchBuilder","execute","response","statusCode","jsonSchemas","definitions","err","elementSelected","$item","Math","floor","random","onSelectDatastream","$ref","javaEnumNames","objectSchema","onDeleteDatastream","elementDeleted","clearFieldsSearch","advancedFilter_error","restoreSelection","selectionScope","currentSelection","selectedItems","operators","queryBuilderfilter","group","operator","rules","settings","nesting","addIconClass","removeIconClass","addButtonClass","removeButtonClass","queryAsString","filterJson","evaluateQuery","asReadableFilter","asStringFilter","parseQuery","toJson","unknownWords","applyQueryBuilderFilter","executeSearch","filterApplied","newValue","clearQuery","json","launchSearchingQuick","quick","launchSearchingShared","shared","filterSharedSelect","$model","filterSharedRemove","enter","keycode","keyCode","which","showFinalFilter","customSelectors","getCustomSelectors","widgetSelectors","findFields","$apply","changeDirection","direction","debugQuery","filter_error","autocomplete_options","suggest","suggest_field_delimited","isSelected","obj","totalSelected","Object","keys","sendEntities","manageSelectedItems","selectionConfig","operationTypes","filterTypes","manageItemsSelectedTemplate","clearSelection","applyFilter","customOql","filterAction","operationType","saveChangesDialog","finalSelection","visible","selectedItemsLength","lastItem","deleteIfNotConfigured","createApplyPromise","result","deferred","defer","reject","when","editScope","saveDialog","validationError","applyFn","editScopeDefinition","setReloadTimeout","selectFilter","showFilter","windowTimeChanged","timeObj","filterId","_widgetFilters","sharedFilters","loadingData","startLoading","stopLoading","lastMessageTime","setStatusMessage","message","statusMessage","changeFilter","actions","setActions","adfDashboardCollapseExpand","args","collapseExpandStatus","adfWidgetEnterEditMode","adfIsEditMode","adfDashboardChanged","widgetConfigChanged","adfDashboardEditsCancelled","openFullScreen","elem","document","getElementsByClassName","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","$emit","openAboutScreen","modalInstance","$uibModalInstance","information","about","info","ok","selectedItem","saveWidgetScreen","wId","objectSelector","fileName","moveWidgetToDashboard","copyWidgetToDashboard","createQuickFilter","fieldsQuickSearch","criteria","_filter","or","downloadCsv","extra_filter","columns","scope_filter","final_filter","order","onWindowTimeChanged","window_filter","and","JSON","parse","trim","generateQR","stopReloadTimeout","addItemToSelection","removeItemFromSelection","reloadPeriod","isNaN","cancel","post","$http","$sce","$templateCache","parseUrl","parsedUrl","substring","exposed","tpl","getTrustedResourceUrl","success","put","run"],"mappings":"CAAA,SAAAA,EAAAC,GAAA,YA2BAC,SAAAC,OAAA,OAAA,eAAA,eAAA,wBACAC,MAAA,kBAAA,qBACAA,MAAA,iBAAA,0IC7BAA,MAAA,aAAA,SAiDAF,QAAAC,OAAA,OACAE,UAAA,gBAAA,aAAA,OAAA,WAAA,YAAA,YAAA,kBAAA,aAAA,SAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAGA,QAAAC,GAAAC,GACA,OAAAb,QAAAc,UAAAD,GAAAA,EAAAE,cAAA,MACA,IAAA,OACA,IAAA,MACA,IAAA,IACA,OAAA,CACA,KAAA,QACA,IAAA,KACA,IAAA,IACA,IAAA,MACA,OAAA,CACA,SACA,MAAAC,SAAAH,IAIA,QAAAI,GAAAC,GACA,GAAAC,MACAC,EAAAZ,EAAAa,QAAAH,GAAAE,UAEA,OADAD,GAAAnB,QAAAsB,KAAAF,GAIA,QAAAG,GAAAL,GACA,GAAAM,MACAC,EAAAjB,EAAAa,QAAAH,EAIA,OAHAO,KACAD,EAAAxB,QAAAsB,KAAAG,IAEAD,EAUA,QAAAE,GAAAC,EAAAF,EAAAG,EAAAC,GACA,GAAAF,EAAA,CACAA,EAAAG,OACAH,EAAAG,QAGA,IAAAC,IACAC,MAAA,EACAC,OAAA,EACAC,EAAA,EACAC,EAAA,EACAC,WAAAX,EAEAE,GAAAG,KAAAO,KAAAN,GAEA3B,EAAAkC,WAAA,iBAAAV,EAAAD,EAAAF,GAEAI,GACAzB,EAAAkC,WAAA,sBAAAV,EAAAD,OAGAtB,GAAAkC,MAAA,sBASA,QAAAC,GAAAtB,GACA,GAAAO,GAAAjB,EAAAa,QAAAH,EACA,OAAAO,IAAAA,EAAAgB,MAAAhB,EAAAgB,KAAAC,UASA,QAAAC,GAAAC,EAAAnB,GAEAnB,EAAA,WACAsC,EAAAN,WAAA,yBAAAb,IACA,KAUA,QAAAoB,GAAAxB,GACA,GAAAyB,KAqBA,OApBA9C,SAAA+C,QAAA1B,EAAA,SAAAI,EAAAuB,GACA,GAAAC,GAAAxB,EAAAwB,QAEAA,KACAA,EAAA,4BAGAxB,EAAAyB,MAAAxC,EAAAyC,QAAA1B,EAAAyB,OACAzB,EAAA2B,YAAA1C,EAAAyC,QAAA1B,EAAA2B,aACA3B,EAAAwB,SAAAvC,EAAAyC,QAAA1B,EAAAwB,UAGAjD,QAAAqD,YAAAP,EAAArB,EAAAwB,aACAH,EAAArB,EAAAwB,WACA5B,aAIAyB,EAAArB,EAAAwB,UAAA5B,QAAA2B,GAAAvB,IAEAqB,EAGA,QAAAQ,GAAAjC,GACA,GAAAyB,KA+BA,OA9BA9C,SAAA+C,QAAA1B,EAAA,SAAAI,EAAAuB,GACAvB,EAAAwB,WACAxB,EAAAwB,SAAA,8BAGAxB,EAAAyB,MAAAxC,EAAAyC,QAAA1B,EAAAyB,OACAzB,EAAA2B,YAAA1C,EAAAyC,QAAA1B,EAAA2B,aACA3B,EAAAwB,SAAAvC,EAAAyC,QAAA1B,EAAAwB,UAEAxB,EAAA8B,eACA9B,EAAA8B,aAAA,iCAGA,IAAAC,GAAA/B,EAAA8B,aAAAE,MAAA,KAEAC,IACA1D,SAAA+C,QAAAS,EAAA,SAAAP,EAAAU,GAEA,GAAAC,GAAAlD,EAAAyC,QAAAF,EACAH,GAAAe,QAAAD,SACAd,EAAAT,KAAAuB,GAGAF,EAAAG,QAAAD,SACAF,EAAArB,KAAAuB,KAGAnC,EAAA8B,aAAAG,EAAAI,aAGAhB,EAGA,OACAiB,SAAA,EACAC,SAAA,KACAC,YAAA,EACAC,OACAtC,KAAA,IACAuC,YAAA,IACAC,SAAA,IACAC,SAAA,IACAC,mBAAA,IACAC,YAAA,IACAC,SAAA,IACAC,gBAAA,IACA3B,WAAA,IACA4B,YAAA,IACAC,UAAA,KAEAC,YAAA,SAAA,SAAAhC,GAkGA,QAAAiC,KACA,GAAAX,GAAAtB,EAAAkC,MACA,OAAAZ,GAnGA,GAAAvC,IACAoD,aACAC,WAAA,MAGAC,EAAA,KACArD,EAAAgB,EAAAhB,KAEAsD,EAAA,SAAAzD,GACA,GAAA0D,IACAC,gBACAC,UAEA,IAAA5D,EAAA,CACA,GAAAW,GAAApC,QAAAsB,KAAAG,EAAAW,YACAkD,EAAAlD,EAAAmD,MACAC,EAAApD,EAAAqD,IACArE,EAAAgB,EAAAhB,WACAsE,EAAAtE,EAAAsE,MACA/D,GAAAG,KAAAiB,QAAA,SAAA4C,GACA,GAAAC,GAAAD,EAAAvD,WAAAhB,OAAAsE,OACAG,EAAAF,EAAAvD,WAAAmD,KAKAK,IAAAA,EAAAJ,IAAAI,EAAAJ,KAAAA,GACAG,EAAAvD,WAAAhB,OAAAsE,OAAAA,EACAC,EAAAvD,WAAAhB,OAAAsE,OAAAF,GAAAA,EACAL,EAAAE,OAAAhD,KAAAsD,EAAAvD,WAAAqD,MACAH,IAAAO,GACAV,EAAAC,aAAA/C,KAAAsD,EAAAvD,WAAAqD,OAIA,MAAAN,IAGAW,EAAA,SAAAnE,GACA,GAAAoE,MACAjE,EAAAH,EAAAG,IACAA,IAAAA,EAAAkE,OAAA,GACAlE,EAAAiB,QAAA,SAAAkD,GACA,GAAA7D,GAAA6D,EAAA7D,WACAhB,EAAAgB,EAAAhB,WACAsE,EAAAtE,EAAAsE,MACAK,GAAA1D,MACAoD,IAAArD,EAAAqD,IACAvC,MAAAd,EAAAc,MACAwC,OAAAA,EACAH,MAAAnD,EAAAmD,UAIA3C,EAAAsD,UACAtD,EAAAsD,SACAvB,eAGA/B,EAAAsD,QAAAvB,UAAAoB,cAAAA,EAGAnD,GAAAuD,OAAA,WAAA,SAAAC,EAAAC,IAEA,OAAAA,GAAA,OAAAD,GAAA,OAAAC,KACA1E,EAAAiB,EAAA4B,SACAS,EAAArC,EAAA6B,gBAEA9C,GACAmE,EAAAnE,GACAA,EAAAuB,QACAvB,EAAAuB,MAAAxC,EAAAyC,QAAA,wCAEAxB,EAAA2E,mBACA3E,EAAA2E,iBAAA7F,EAAA,wBAGAkB,EAAAoD,YAKApD,EAAAoD,YAAAC,aACArD,EAAAoD,YAAAC,WAAA,KALArD,EAAAoD,aACAC,WAAA,KAQApC,EAAAjB,MAAAA,GAEAtB,EAAAkC,MAAA,qCAGA,GAGAK,EAAAyB,UAAA,EAOAzB,EAAA2D,eAAA,SAAAC,GACA5D,EAAAyB,UAAAzB,EAAAyB,SACAzB,EAAAyB,WACAzB,EAAA0B,qBACA1B,EAAA6D,UAAAzG,QAAAsB,KAAAsB,EAAA4B,aACApE,EAAAkC,WAAA,kBAGAkE,GACA5D,EAAA8D,uBAIA9D,EAAAyB,UACAjE,EAAAkC,WAAA,sBAAAV,EAAAD,GAIA,IAAAgF,GAAA/D,EAAAgE,IAAA,oBAAA,SAAAC,EAAAC,GACAA,EACAlE,EAAA2D,gBAAA,GAEA3D,EAAA2D,mBAIAQ,EAAAnE,EAAAgE,IAAA,oBAAA,SAAAC,GACAjE,EAAAyB,UACAzB,EAAAoE,mBAIAC,EAAArE,EAAAgE,IAAA,2BAAA,SAAAC,EAAApF,GACA,GAAAyF,GAAA,IACAlH,SAAA+C,QAAAH,EAAA4B,SAAA1C,KAAA,SAAAqF,EAAAxD,GACAwD,EAAA/E,WAAAqD,MAAAhE,EAAAgE,MACAyB,EAAAvD,KAIAuD,GAAA,GACAtE,EAAA4B,SAAA1C,KAAAsF,OAAAF,EAAA,KAGAG,EAAAzE,EAAAgE,IAAA,kCAAA,SAAAC,EAAApF,GACA,GAAAyF,GAAA,IACAtE,GAAA2D,iBACAvG,QAAA+C,QAAAH,EAAA4B,SAAA1C,KAAA,SAAAqF,EAAAxD,GACAwD,EAAA/E,WAAAqD,MAAAhE,EAAAgE,MACAyB,EAAAvD,KAIAuD,GAAA,GACAtE,EAAA4B,SAAA1C,KAAAsF,OAAAF,EAAA,GAEAtE,EAAA2D,kBAGA3D,GAAAoE,eAAA,WACApE,EAAAyB,UAAA,EACAzB,EAAA0B,oBAAA1B,EAAA6D,YAAA7D,EAAA4B,WACA5B,EAAA6D,UAAAzG,QAAAsB,KAAAsB,EAAA6D,UAAA7D,EAAA4B,WAEApE,EAAAkC,WAAA,6BAAAM,EAAA4B,SAAAtB,MAAAN,EAAA4B,UAGA,IAAA8C,GAAA1E,EAAAgE,IAAA,yBAAA,SAAAC,GACAjE,EAAAyB,UACAzB,EAAA8D,wBAKAa,EAAA3E,EAAAgE,IAAA,+BAAA,SAAAC,EAAApF,GACA,GAAA0D,GAAAD,EAAAzD,EACArB,GAAAkC,WAAA,mBAAAV,EAAAD,EAAAwD,KAEAqC,EAAA5E,EAAAgE,IAAA,iCAAA,SAAAC,GACAzG,EAAAkC,WAAA,mBAAAV,EAAAD,IAIAiB,GAAA8D,oBAAA,WACA,GAAAe,GAAA5C,GAGA4C,GAAAnG,MACA4B,MAAA,wCAAAvB,EAAAuB,MAAAvB,EAAAuB,MAAA,GACAE,YAAAzB,EAAAyB,YACAsE,gBAAA/F,EAAA+F,gBAAA/F,EAAA+F,gBAAA3H,EACA4H,KAAA,GAAAC,MACAC,gBAAAlG,EAAAkG,gBAAAlG,EAAAkG,gBAAA9H,EACA+H,KAAAnG,EAAAkG,gBAAAlG,EAAAkG,gBAAA9H,EACAgF,YAAA/E,QAAAsB,KAAAK,EAAAoD,cAGA0C,EAAAM,gBACAnG,KAAA,iBACAD,MAAAA,EAAAqG,oBAAArG,EAAAqG,oBAAA,YACA9B,SACA+B,aACA/E,MAAAxC,EAAAyC,QAAA,mBAEA+E,SACAhF,MAAAxC,EAAAyC,QAAA,sBAEAgF,OACAjF,MAAAxC,EAAAyC,QAAA,sBAKAsE,EAAAW,mBACAxG,KAAA,oBACAD,MAAAA,EAAA0G,SAAA1G,EAAA0G,SAAA,OACAC,IAAAvI,EACA+H,KAAA/H,EACAsI,SAAA1G,EAAA0G,SAAA1G,EAAA0G,SAAA,OACAE,KAAA,SAAA5G,EAAA0G,SAAA1G,EAAA4G,KAAA,gBACArC,SACAqC,MACArF,MAAAxC,EAAAyC,QAAA,iBAEAqF,OACAtF,MAAAxC,EAAAyC,QAAA,iBAIA,UAAAsE,EAAAW,kBAAAC,WACAZ,EAAAW,kBAAAN,KAAAnG,EAAA4G,KACAd,EAAAW,kBAAAE,IAAA3G,EAAA4G,MAEAd,EAAAgB,cAAA,SAAAX,GACAA,GACAL,EAAAW,kBAAAN,KAAAA,EACAnH,EAAA+H,cAAAZ,GAAAa,KACA,SAAAL,GACAb,EAAAW,kBAAAE,IAAAA,EACAb,EAAAW,kBAAAN,KAAAQ,EACAb,EAAAW,kBAAAC,SAAA,WAIAZ,EAAAmB,kBAGAnB,EAAAoB,wBAAA,SAAAf,GACAA,GACAL,EAAAW,kBAAAN,KAAAA,EACAnH,EAAA+H,cAAAZ,GAAAa,KACA,SAAAL,GACAb,EAAAnG,KAAAuG,gBAAAS,EACAb,EAAAnG,KAAAwG,KAAAQ,KAIAb,EAAAqB,wBAGArB,EAAAmB,eAAA,WACAnB,EAAAW,kBAAAN,KAAA,KACAL,EAAAW,kBAAAE,IAAA,MAEAb,EAAAqB,qBAAA,WACArB,EAAAnG,KAAAuG,gBAAA,KACAJ,EAAAnG,KAAAwG,KAAA,KAIA,IAAAiB,GAAAtI,EAAA,qBACAkB,GAAAqH,kBACAD,EAAApH,EAAAqH,gBAEA,IAAAC,GAAA1I,EAAA2I,MACAhF,MAAAuD,EACA0B,YAAAJ,EACAK,SAAA,SACAC,UAAA,EACAC,KAAA,MAIA7B,GAAA8B,YAAA,SAAAC,GACAA,EAmBAC,QAAAC,KAAA,uCAjBA/H,EAAAuB,MAAAuE,EAAAnG,KAAA4B,MACAvB,EAAAyB,YAAAqE,EAAAnG,KAAA8B,YACA,UAAAqE,EAAAW,kBAAAzG,MACAA,EAAA4G,KAAAd,EAAAW,kBAAAE,IAEA,SAAAb,EAAAW,kBAAAzG,QACAA,EAAA4G,KAAAd,EAAAW,kBAAAG,MAAAd,EAAAW,kBAAAG,KAAAvF,KAAAyE,EAAAW,kBAAAG,MAGA5G,EAAA0G,SAAAZ,EAAAW,kBAAAzG,MACAA,EAAA+F,gBAAAD,EAAAnG,KAAAoG,gBAAAD,EAAAnG,KAAAoG,gBAAA3H,EACA4B,EAAAkG,gBAAAJ,EAAAnG,KAAAuG,gBAAAJ,EAAAnG,KAAAuG,gBAAA9H,EACA4B,EAAAqG,oBAAAP,EAAAM,eAAApG,MACAA,EAAAoD,YAAA0C,EAAAnG,KAAAyD,YAAA0C,EAAAnG,KAAAyD,YAAAhF,EAEAK,EAAAkC,WAAA,oCAAAX,IAMAsH,EAAAU,QACAlC,EAAAmC,YAIA,IAAAC,GAAAjH,EAAAgE,IAAA,yBAAA,SAAAC,EAAApF,EAAAL,GACA,GAAA0I,GAAA7I,EAAAQ,GACAsI,EAAA/J,QAAAgK,SAAAF,EAAA1I,OACAuE,GACAzE,KAAAO,EACAL,OAAA2I,EACA7G,MAAA6G,EAAA7G,MAEAxB,GAAAC,EAAAgE,EAAA/D,GAAAgB,EAAAyB,YAGA4F,EAAArH,EAAAgE,IAAA,8BAAA,SAAAC,EAAAqD,EAAA9I,EAAA+I,GACA,GAAAhB,GAAA1I,EAAA,yBACAsJ,EAAA3I,KACA2I,GAAAK,gBACAjB,EAAA1I,EAAA,mCAGA,IAAA4J,EACA,IAAAF,EAWAE,EAAAF,MAXA,CACA,GAAA1I,GAAAF,EAAA2I,EACAzI,GAAAL,OAAApB,QAAAgK,SAAAvI,EAAAL,OAAA2I,GACAtI,EAAAP,KAAAgJ,EACAzI,EAAAL,OAAA8B,QACAzB,EAAAyB,MAAAzB,EAAAL,OAAA8B,OAGAmH,EAAAzH,EAAAkC,OACAuF,EAAAjI,WAAAiI,EAAA5I,OAAAA,EAKA,GAAA6I,IACApG,MAAAmG,EACAlB,YAAAA,EACAG,KAAAe,EAAAjI,WAAAmI,WAAA,KACAnB,SAAA,SACAoB,YAAAH,EAAAjI,WAAA,WAAA,oCAAA,kBAGAQ,GAAAjB,QAAAiB,EAAAjB,MAAA8I,WACAJ,EAAAK,iBAAA,WACAtK,EAAAkC,WAAA,yBAAAqI,KAAAC,QAAAnJ,OAAAP,KAAAyJ,KAAAC,QAAAnJ,OAAAL,YACAuJ,KAAApB,eAIA,IAAAN,GAAA1I,EAAA2I,KAAAoB,EACAD,GAAAd,YAAA,WACAN,EAAAU,QACAQ,EAGAE,EAAAhF,SAFAgF,EAAAT,cAOAiB,EAAAjI,EAAAgE,IAAA,qBAAA,SAAAC,IACAlF,EAAA8I,UAAA9I,EAAAyC,WACAxB,EAAAyB,WACAzB,EAAAyB,UAAA,EACAzB,EAAA6D,UAAAzG,QAAAsB,KAAAsB,EAAA4B,aACApE,EAAAkC,WAAA,kBAGAM,EAAAkI,oBAKAlI,GAAAmI,aACA9F,gBACA+F,uBAAA,GACAC,cAAA,YAGArI,EAAAkI,gBAAA,WACA,GACAzJ,GADA6J,EAAArG,GAEA7E,SAAAmL,WAAAlG,IACA5D,KACArB,QAAA+C,QAAAvC,EAAAa,QAAA,SAAAI,EAAAP,GACA+D,EAAAxD,EAAAP,EAAAS,KACAN,EAAAH,GAAAO,MAIAJ,EAAAb,EAAAa,QAEA6J,EAAA7J,QAAAA,EAEArB,QAAA+C,QAAAmI,EAAA7J,QAAA,SAAAI,EAAAP,GACAO,EAAAuB,IAAA9B,EACAO,EAAAwB,WACAxB,EAAAwB,SAAA,gCAKAL,EAAAsD,QAAApD,WACAoI,EAAArI,iBAAAA,EAEAqI,EAAAE,oBAAA9H,EAAAjC,EAGA,IAAAgK,GAAA5K,EAAA,iBACAkB,GAAA2J,iBACAD,EAAA1J,EAAA2J,eAGA,IAAAhB,IACApG,MAAAgH,EACA/B,YAAAkC,EACAjC,SAAA,SACAE,KAAA,MAGAL,EAAA1I,EAAA2I,KAAAoB,EAEAY,GAAAK,gBAAA3I,EAAAmI,YAEAG,EAAAM,UAAA,SAAA/J,GACA,GAAAkE,IACAzE,KAAAO,EACA8D,MAAA/E,EAAAa,QAAAI,GAAA8D,OAAA,KACAnE,OAAAH,EAAAQ,GAEAC,GAAAC,EAAAgE,EAAA/D,GAEAqH,EAAAU,QACAuB,EAAAtB,WAGApH,EAAAf,IACAkB,EAAAC,EAAA+C,IAIAuF,EAAAO,gBAAA,SAAAhK,GACAA,EAAAiK,SACA1L,QAAAqD,YAAA5B,EAAAkK,YACAlK,EAAAkK,WAAA,EAEAlK,EAAAkK,YAAA,EAIAlK,EAAAkK,YAAAlK,EAAAiK,OAAA1F,SACAvE,EAAAkK,WAAA,GAGAlK,EAAAmK,SAAAnK,EAAAiK,OAAAjK,EAAAkK,cAIAT,EAAA3B,YAAA,WAEAN,EAAAU,QACAuB,EAAAtB,aAIAhH,EAAAlB,oBAAAA,EAEAkB,EAAAgE,IAAA,UAAA,WACAW,IACAC,IACAb,IACAkD,IACAI,IACAlD,IACA8D,IACAvD,IACAL,IACAI,QAGAwE,KAAA,SAAAjJ,EAAAkJ,EAAAC,GAEA,GAAA7F,IACAtE,KAAAmK,EAAAnK,KACAwC,UAAA,EACA4H,oBAAApL,EAAAmL,EAAAC,qBACAzH,YAAA3D,EAAAmL,EAAAxH,aACAJ,YAAAvD,EAAAmL,EAAA5H,aACArB,WAAAlC,EAAAmL,EAAAjJ,YACA6B,aAGA3E,SAAAc,UAAAiL,EAAA3H,YACA8B,EAAA9B,SAAAxD,EAAAmL,EAAA3H,WAGApE,QAAAc,UAAA8B,EAAA+B,aACAuB,EAAAvB,UAAA/B,EAAA+B,WAGAuB,EAAAvB,UAAAsH,QAAArJ,EAAAyB,SAEAzB,EAAAsD,QAAAA,GAEAiD,YAAA1I,EAAA,qBC3sBAT,QAAAC,OAAA,OACAE,UAAA,oBAAA,kBAAA,SAAAM,GAkBA,QAAAyL,GAAAtJ,GACAuJ,EAAAC,aAAAxJ,EAAAyB,SACA8H,EAAAE,eAAAzJ,EAAAyB,SACAzB,EAAAuJ,YAAAA,EAEAvJ,EAAA0J,UAAA,KApBA,GAAAH,IACAnH,WAAA,IACAuH,eAAA,GACAC,SAAA,EACAC,SAAA,EACAC,wBAAA,EACAC,SAAA,IACAC,MAAA,EACAC,WACAC,QAAA,mBAEAV,aAAA,EACAC,eAAA,EAWA,QACArI,SAAA,IACAE,OACAM,SAAA,IACAH,SAAA,IACAC,mBAAA,IACA4B,QAAA,KAEAiD,YAAA1I,EAAA,sBACAsM,QAAA,WACA,OACAC,IAAAd,IAGAtH,YAAA,SAAA,WAAA,SAAAhC,EAAAtC,GACA,GAAA2M,KACAA,GAAA5K,KAAAO,EAAAgE,IAAA,gBAAA,WACAtG,EAAA,WACAsC,EAAA0J,UAAAY,UACA,QAGAD,EAAA5K,KAAAO,EAAAgE,IAAA,sBAAA,WACAtG,EAAA,WACAsC,EAAA0J,UAAAa,WACA,QAGAF,EAAA5K,KAAAO,EAAAgE,IAAA,6BAAA,SAAAwG,EAAAxL,EAAAD,GACAA,GAAAA,EAAAoD,aACA/E,QAAAqN,SAAA1L,EAAAoD,YAAAC,aACApC,EAAA0J,UAAAtH,WAAArD,EAAAoD,YAAAC,YAIA1E,EAAA,WACAsC,EAAA0J,UAAAa,WACA,QAGAF,EAAA5K,KAAAO,EAAAgE,IAAA,oCAAA,SAAAwG,EAAAE,GACAA,GAAAA,EAAAvI,aACA/E,QAAAqN,SAAAC,EAAAvI,YAAAC,aACApC,EAAA0J,UAAAtH,WAAAsI,EAAAvI,YAAAC,eAKAiI,EAAA5K,KAAAO,EAAAgE,IAAA,oBAAA,WACAtG,EAAA,WACAsC,EAAA0J,UAAAa,WACA,QAGAF,EAAA5K,KAAAO,EAAAgE,IAAA,iBAAA,SAAAC,GACAvG,EAAA,WACAsC,EAAA4B,SAAA1C,KAAAyL,YAAAC,MAAAC,KAAA7K,EAAA4B,SAAA1C,MACAc,EAAA0J,UAAAY,UACA,QAGAtK,EAAA8K,SAAA,SAAA7G,EAAA8G,GAEA/K,EAAA4B,SAAA1C,KAAAyL,YAAAC,MAAAC,KAAA7K,EAAA4B,SAAA1C,OAOAc,EAAAgL,WAAA,SAAA/G,EAAAgH,GACApE,QAAAqE,IAAA,qBAAAjH,EAAA,OAAAgH,GACAjL,EAAA4B,SAAA1C,KAAAyL,YAAAC,MAAAC,KAAA7K,EAAA4B,SAAA1C,OAOAc,EAAAmL,aAAA,SAAAlH,EAAAgH,GACApE,QAAAqE,IAAA,uBAAAjH,EAAA,OAAAgH,GACAjL,EAAA4B,SAAA1C,KAAAyL,YAAAC,MAAAC,KAAA7K,EAAA4B,SAAA1C,MACAc,EAAAN,WAAA,mBAWAM,EAAA4B,UAAA5B,EAAA4B,SAAAO,aACA/E,QAAAqN,SAAAzK,EAAA4B,SAAAO,YAAAC,cACAmH,EAAAnH,WAAApC,EAAA4B,SAAAO,YAAAC,YAIApC,EAAAgE,IAAA,WAAA,WACAqG,EAAAlK,QAAA,SAAAiL,GACAA,cChIAhO,QAAAC,OAAA,OACAyF,OAAA,uBAAA,UAAA,SAAAuI,GAGA,MAAA,UAAAC,EAAAlL,GACA,GAAAmL,KAKA,OAJAnO,SAAA+C,QAAAmL,EAAA,SAAAhO,EAAAkO,GACAlO,EAAA8C,GAAAoL,EACAD,EAAA9L,KAAAnC,KAEA+N,EAAA,WAAAE,EAAAnL,OCHAhD,QAAAC,OAAA,mBACAoO,SAAA,YAAA,WAEA,GAAAhN,MACAiN,EAAA,GACAC,EAAA,4CACAC,EAAA,uOAMAC,EAAA,KAGAC,EAAA,WACA,OAAA,EAgEA/D,MAAAlJ,OAAA,SAAAG,EAAAH,GACA,GAAAkE,GAAA3F,QAAA2O,QACAtJ,QAAA,EACAuJ,WAAA,GACAnN,EACA,IAAAkE,EAAAlD,KAAA,CACA,GAAAA,IACA4C,QAAA,EACA3C,WAAA,EACAmM,MAAAH,EAEA1O,SAAA2O,OAAAlM,EAAAkD,EAAAlD,MACAkD,EAAAlD,KAAAA,EAOA,MAJAkD,GAAAvE,SACAuE,EAAAvE,WAEAC,EAAAO,GAAA+D,EACAgF,MAqBAA,KAAA2D,YAAA,SAAAQ,GAEA,MADAR,GAAAQ,EACAnE,MAeAA,KAAA4D,gBAAA,SAAAQ,GAEA,MADAR,GAAAQ,EACApE,MAgBAA,KAAA6D,gBAAA,SAAAO,GAEA,MADAP,GAAAO,EACApE,MAeAA,KAAA8D,yBAAA,SAAAO,GAEA,MADAP,GAAAO,EACArE,MAkBAA,KAAAsE,KAAA,WACA,GAAAC,GAAA,CAEA,QACA7N,QAAAA,EACAiN,YAAAA,EACAC,gBAAAA,EACAC,gBAAAA,EACAC,yBAAAA,EAWAjJ,GAAA,WACA,OAAA,GAAAoC,OAAAuH,UAAA,OAAAD,GAcAE,SAAA,SAAA5J,EAAA6J,GAEA,MAAA,IAAA,GAAA7J,EAAA1B,aAAAuL,EAAAvL,gBC3OA9D,QAAAC,OAAA,OACAE,UAAA,oBAAA,OAAA,KAAA,gBAAA,WAAA,cAAA,YAAA,YAAA,aAAA,SAAAE,EAAAiP,EAAAC,EACAC,EAAAC,EAAAC,EAAAlP,EAAAE,GAEA,QAAAiP,GAAA7D,EAAA8D,GACAvP,EAAAqJ,KAAAkG,GACA9D,EAAA+D,KAAArP,EAAA+N,gBAAAxK,QAAA,MAAA6L,IAGA,QAAAE,GAAAlN,EAAAkJ,EAAAiE,EAAAC,GA6CA,QAAAC,GAAA/O,GACA,GAAA,WAAAA,EACA,OACAgP,KAAAC,EAAA/O,OAAAgP,aAAAF,KACAG,GAAAF,EAAA/O,OAAAgP,aAAAC,GAEA,IAAA,UAAAnP,EACA,OACAgP,KAAApQ,EAAAwQ,SAAAC,QAAA,OAGA,IAAAL,GAAApQ,EAAAwQ,SAAAC,QAAA,OAAAC,SAAA,EAAAtP,EACA,QACAgP,KAAAA,EAAAO,IAzDA,GAAA9O,GAAAiB,EAAAjB,KACA,KAAAA,EAIA,MAHAjB,GAAA,gCAAAiI,KAAA,SAAA+H,GACAf,EAAA7D,EAAA4E,KAEAX,CAGA,IAAAY,GAAA/N,EAAA+N,OAEA,KAAAA,EAMA,MALAjQ,GAAA,oCACAwC,MAAAvB,EAAAuB,QACAyF,KAAA,SAAA+H,GACAf,EAAA7D,EAAA4E,KAEAX,CAGA,IAAAa,GAAAhO,EAAAgO,MACAT,EAAAJ,CAEA,IAAAI,EAAA,CACA,GAAAU,KAAAV,EAAAW,OAAA/Q,GAAA,OAAAoQ,EAAAW,MAAAX,EAAAY,oBAAAZ,EAAAY,qBACA,IAAAF,GAAAb,IAAAhQ,QAAAmL,WAAAgF,EAAAa,YACApO,EAAAqO,oBACArO,EAAAqO,kBAAAC,WAAA,GAEAf,EAAAgB,EAAAvO,EAAAkJ,EAAAiE,EAAApO,EAAAgP,EAAAC,OACA,CACA,GAAAQ,GAAAjB,EAAAkB,eAAAtR,GAAA,OAAAoQ,EAAAkB,cACAD,GAAAjB,EAAAmB,QACAnB,EAAAmB,KAAA,GAEAnB,EAAAa,kBAGApO,GAAAqO,oBACArO,EAAAqO,kBAAAC,WAAA,GAGAf,EAAAgB,EAAAvO,EAAAkJ,EAAAiE,EAAApO,EAAAgP,EAAAC,EA2CA,OArBAT,GAAA/O,OAAAmQ,cAAA,WACA,GAAAnB,GAAAD,EAAA/O,OAAAgP,YACA,IAAAA,GAAAA,EAAAlP,KAAA,CACA,GAAAsQ,GAAAvB,EAAAG,EAAAlP,KAEA,KAAApB,EAAA2R,KAAAtB,EAAA/O,OAAAgP,aAAAsB,SAAA,CACA,IAAA,GAAA1O,KAAAwO,GACAA,EAAAxO,GAAAlD,EAAAwQ,OAAAkB,EAAAxO,IAAA2O,QAEAH,GAAA,SAAA,EAGA,MAAAA,KAIAZ,IACAT,EAAAlE,UAAA2E,EAAA3E,QACAkE,EAAAxL,UAAAiM,GAGAT,EAGA,QAAAgB,GAAAvO,EAAAkJ,EAAAiE,EAAApO,EAAAgP,EAAAC,GAEA9E,EAAA+D,KAAArP,EAAAgO,gBAGA,IAAAoD,GAAAhP,EAAAkC,MAGAnD,GAAAP,SACAO,EAAAP,WAGAwQ,EAAAxQ,OAAAO,EAAAP,OACAwQ,EAAA3F,QAAA2E,GAAAA,EAAA3E,QAEA2E,IACAgB,EAAAhB,MAAAA,EAGA,IAAAiB,GAAA9B,GAAA6B,EAAAxQ,MACAwQ,GAAAE,iBAAA,EAAAD,EAAAC,iBAAA/R,CAGA,IAAAgS,IACAnP,OAAAgP,EACAnQ,OAAAE,EACAP,OAAAO,EAAAP,QAIA4Q,IA+CA,OA9CAA,GAAAC,KAAA1C,EAAA2C,YAAAvB,GACAA,EAAAwB,SACAnS,QAAA+C,QAAA4N,EAAAwB,QAAA,SAAAC,EAAApP,GACAhD,QAAAqS,SAAAD,GACAJ,EAAAhP,GAAA0M,EAAA4C,IAAAF,GAEAJ,EAAAhP,GAAA0M,EAAA6C,OAAAH,EAAAA,EAAAL,KAMAzC,EAAAkD,IAAAR,GAAArJ,KAAA,SAAA8J,GACAzS,QAAA2O,OAAA8D,EAAAV,GAGApB,EAAA+B,YACAd,EAAAjB,EAAA+B,WAAAD,EAIA,IAAA1D,GAAA0D,EAAAR,IAEA,IADAnG,EAAA+D,KAAAd,GACA4B,EAAA/L,WAAA,CACA,GAAA+N,GAAAlD,EAAAkB,EAAA/L,WAAA6N,EACA9B,GAAAiC,eACAhB,EAAAjB,EAAAiC,cAAAD,GAEA7G,EAAA+G,WAAAC,KAAA,0BAAAH,GAEAnD,EAAA1D,EAAAiH,YAAAnB,IACA,SAAAoB,GAEA,GAAApD,GAAA,2CACAlP,GAAAkP,GACAoD,OAAAA,EAAA,KAAAA,EAAAA,IACArK,KAAA,SAAA+H,GACAf,EAAA7D,EAAA4E,OAKAX,GACAA,EAAAnG,WAGAgI,EAGA,OACA7N,SAAA,EACAC,SAAA,KACAC,YAAA,EACAgP,QAAA,mBACA/O,OACAvC,MAAA,IACAgP,QAAA,IACAC,MAAA,IACAK,kBAAA,KACAiC,cAAA,KACAC,qBAAA,MAEAtH,KAAA,SAAAjJ,EAAAkJ,EAAAsH,EAAAC,GACA,GAAAtD,GAAAD,EAAAlN,EAAAkJ,EAAA,KACAuH,KACAzQ,EAAA0Q,OAAA1Q,EAAA0Q,WACAD,EAAAvN,oBAAAlD,EAAAjB,MAAAP,OAAAsE,QAAA9C,EAAAjB,MAAAP,OAAAsE,OAAAF,IAGA,IAAA+N,GAAA3Q,EAAAgE,IAAA,sBAAA,SAAAC,EAAA2M,GACAA,EACAA,EAAA3P,QAAAjB,EAAAjB,MAAA8D,WAAA4N,GACAA,EAAAvN,oBAAAlD,EAAAjB,MAAAP,OAAAsE,QAAA9C,EAAAjB,MAAAP,OAAAsE,OAAAF,IAAA,GAGAuK,EAAAD,EAAAlN,EAAAkJ,EAAAiE,GAAA,KAIA0D,EAAA7Q,EAAAgE,IAAA,eAAA,SAAAC,EAAA1B,GACA,GAAAuO,IAAA,CACAvO,IAAAA,EAAAa,OAAA,IACA0N,EAAAvO,EAAAtB,QAAAjB,EAAAjB,MAAA8D,WAEAiO,IACA3D,EAAAD,EAAAlN,EAAAkJ,EAAAiE,GAAA,GACAsD,GAAAA,EAAAvN,qBACAuN,EAAAvN,oBAAAlD,EAAAjB,MAAAP,OAAAsE,QAAA9C,EAAAjB,MAAAP,OAAAsE,OAAAF,MAKA5C,GAAAgE,IAAA,UAAA,WACA2M,IACAE,WC5NAzT,QAAAC,OAAA,OACA0T,QAAA,eAAA,WAGA,GAAAC,GAAA,SAAAhR,GAKAA,EAAAkC,OACArE,gBAAA,8BAWA,QACAmT,mBAAAA,KCxBA5T,QAAAC,OAAA,OACAE,UAAA,iBAAA,YAAA,KAAA,OAAA,YAAA,aAAA,YAAA,YAAA,kBAAA,SAAA,eAAA,WAAA,OAAA,SAAA,aAAA,SAAAuP,EAAAJ,EAAAjP,EAAAE,EAAAH,EAAAyT,EAAArT,EAAAC,EAAAqT,EAAAC,EAAAzT,EAAA0T,EAAAC,EAAAvT,GAqCA,QAAAwL,GAAAtJ,GACA,GAAAR,GAAAQ,EAAAR,UAEA,IAAAA,EAAA,CACA,GAAAuD,GAAAnF,EAAAa,QAAAe,EAAAlB,KACA,IAAAyE,EAAA,CAEAvD,EAAAc,QACAd,EAAAc,MAAAyC,EAAAzC,OAGAd,EAAAkE,iBAAA7F,EAAA,yBAEA2B,EAAA4G,kBACA5G,EAAA4G,gBAAAvI,EAAA,mBACAkF,EAAAqD,kBACA5G,EAAA4G,gBAAArD,EAAAqD,kBAIA5G,EAAAkE,mBACAlE,EAAAwM,UAAAjJ,EAAAiJ,WAGAxM,EAAA8R,aACA9R,EAAA8R,WAAAvO,EAAAuO,YAIA9R,EAAAqD,MACArD,EAAAqD,IAAAjF,EAAAgF,MAIA5C,EAAAnB,OAAAzB,QAAAsB,KAAAqE,EAGA,IAAAvE,GAAAgB,EAAAhB,MACAA,GACApB,QAAAqS,SAAAjR,KACAA,EAAApB,QAAAmU,SAAA/S,IAGAA,KAGAwB,EAAAxB,OAAAA,EAEA,mBAAAwB,GAAAnB,OAAA2S,oBACAxR,EAAAnB,OAAA2S,mBAAA,GAGA,mBAAAxR,GAAAnB,OAAA4S,qBACAzR,EAAAnB,OAAA4S,oBAAA,GAIAzR,EAAA0R,cACA1R,EAAA0R,eACA1R,EAAA0R,YAAAC,YAAA5O,EAAA6O,aAAA,GAAA7O,EAAA6O,eAIAnU,GAAAqJ,KAAA,yBAAAtH,EAAAlB,UAGAb,GAAAoU,MAAA,yDAIA,QAAAC,GAAA9R,EAAAkJ,GACA,GAAA1J,GAAAQ,EAAAR,UACA,KAAAA,EAEA,WADA/B,GAAAoU,MAAA,mBAGA,IAAArT,GAAAwB,EAAAxB,WAGAuT,EAAA,WACA7I,EAAA8I,SACAxU,EAAAkC,WAAA,2BAAAF,GAGAQ,GAAAgS,OAAA,WACA,GAAAhS,EAAAsD,QAAA8F,oBAAA,CACA,GAAA6I,GAAAjS,EAAAkC,OAEAgQ,EAAArU,EAAA,oBACA2B,GAAA0S,oBACAA,EAAA1S,EAAA0S,kBAEA,IAAAxK,IACApG,MAAA2Q,EACA1L,YAAA2L,EACA1L,SAAA,UAEAH,EAAA1I,EAAA2I,KAAAoB,EAEAuK,GAAAtL,YAAA,WACAN,EAAAU,QACAkL,EAAAjL,YAEAiL,EAAAE,aAAA,WACAJ,IACAE,EAAAtL,mBAGAoL,MAKA/R,EAAAoS,MAAA,WACApS,EAAAyB,UACAzB,EAAAN,WAAA,gBAIAM,EAAAqS,0BAAA,WAEA,GAAA7T,EAAA8T,UACA,OAAA,CACA,IAAAxP,GAAAtE,EAAAsE,MAEA,IAAAA,EAAA,CACA,GAAAA,EAAAyP,eAAAzP,EAAAyP,cAAAnP,OAAA,EACA,OAAA,CAEA,IAAA,UAAAN,EAAAxE,KACA,MAAAwE,GAAAxF,OAAAwF,EAAAxF,MAAA8F,OAAA,CAEA,IAAA,aAAAN,EAAAxE,KACA,MAAAwE,GAAAxF,OAAAwF,EAAAxF,MAAA8F,OAAA,GAAAN,EAAA0P,IAKA,OAAA,GAGAxS,EAAAyS,iBAAA,WACAzS,EAAAyB,UAEAzB,EAAAgI,QAAAtI,WAAA,2BAIAgT,EAAA,OAAA1S,GAEAA,EAAA2S,gBAAA,WACA,GAAA3S,EAAAnB,SAAAmB,EAAAnB,OAAA+T,0BAAA,CACA,GAAA/T,IACAW,WAAAA,EACA6D,QAAA6F,EAGA1L,GAAAkC,WAAA,+BAAAb,EAAAmB,EAAAxB,OAAAsE,QAGA9C,EAAAyC,UAGAzC,EAAAgR,mBAAA,WACAhR,EAAA8C,OAAA+P,WAAA,CAEA,IAAAC,GAAA9S,EAAAkC,OACA6Q,EAAAlV,EAAA,8BACA6J,GACApG,MAAAwR,EACAvM,YAAAwM,EACAvM,SAAA,SACAE,KAAA,KACAsM,WAAA,EAEAF,GAAAG,cAAAC,aACAJ,EAAAK,mBAAAD,aAGAJ,EAAAM,aAAA,EACAN,EAAAO,YAAA,EAEAP,EAAAxU,KAAA0B,EAAAR,WAAAmD,MACA3C,EAAA0Q,OAAA4C,aACAtT,EAAA0Q,OAAA4C,YAAAnT,QAAA,SAAAmL,GACAwH,EAAAG,aAAAC,SAAAzT,KAAA6L,EAAAtM,MACA8T,EAAAK,kBAAAD,SAAAzT,MAAA8T,WAAAjI,EAAAtM,SAIA8T,EAAAU,iBAAA,SAAAC,GA0CA,MAzCA,8BAAAA,EAAAzU,MACAyU,EAAAC,eAAA,OAAA,SACAD,EAAAE,wBAEAF,EAAAE,qBACA,GAGAF,EAAAC,eAAA,OAAA,SACA,aAAA1T,EAAAR,WAAAmD,OAAA,YAAA3C,EAAAR,WAAAmD,QACA8Q,EAAAG,WAAA,GAAA,kBACA,mBACA,eACA,iBACA,qBACA,uBACA,2BACA,6BACA,+BACA,+BACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,sCACA,wCAGAH,EAAAI,YACAvV,KAAA,SACAwV,YACA5D,KAAAuD,EAAAM,SAGAN,EAAAO,OACA5T,IAAA,OACA6T,SAAA,EACAC,eAAAT,EAAAU,aAEAV,GAEAX,EAAAsB,oBAAA,SAAAX,GAMA,aALAA,GAAAC,oBACAD,GAAAG,gBACAH,GAAAO,WACAP,GAAAI,iBACAJ,GAAA1U,MACA0U,GAIAX,EAAAuB,OAAArU,EAAA0Q,OAAA4C,YAAAtT,EAAA0Q,OAAA4C,YAAAgB,IAAA,SAAAb,GAAA,MAAAX,GAAAU,iBAAAC,QAEA,aAAAzT,EAAAR,WAAAmD,OAAA,YAAA3C,EAAAR,WAAAmD,OACAmQ,EAAAyB,cACA3R,GAAA,EAAA5D,KAAA,KAAA1B,MAAA,IAAAkX,aAAA,uCAAAC,iBACA7R,GAAA,EAAA5D,KAAA,MAAA1B,MAAA,KAAAkX,aAAA,uCAAAC,iBACA7R,GAAA,EAAA5D,KAAA,OAAA1B,MAAA,IAAAkX,aAAA,uCAAAC,iBACA7R,GAAA,EAAA5D,KAAA,KAAA1B,MAAA,IAAAkX,aAAA,uCAAAC,iBACA7R,GAAA,EAAA5D,KAAA,MAAA1B,MAAA,KAAAkX,aAAA,uCAAAC,iBACA7R,GAAA,EAAA5D,KAAA,KAAA1B,MAAA,IAAAkX,aAAA,uCAAAC,iBACA7R,GAAA,EAAA5D,KAAA,MAAA1B,MAAA,KAAAkX,aAAA,uCAAAC,iBACA7R,GAAA,EAAA5D,KAAA,SAAA1B,MAAA,IAAAkX,aAAA,uCAAAC,iBACA7R,GAAA,EAAA5D,KAAA,KAAA1B,MAAA,KAAAkX,aAAA,6CAAAC,eAAAC,SAAA,UAEAtD,IAAAuD,0BAAAC,UAAA7O,KAAA,SAAA8O,GACA,MAAAA,EAAAC,WACAhC,EAAAiC,YAAAF,EAAA3E,KAAA8E,YAEAlC,EAAAiC,iBAJA3D,SAMA,SAAA6D,GACAnC,EAAAiC,eACAlO,QAAAlH,MAAAsV,MAGAnC,EAAAyB,cACA3R,GAAA,EAAA5D,KAAA,KAAA1B,MAAA,MACAsF,GAAA,EAAA5D,KAAA,MAAA1B,MAAA,OACAsF,GAAA,EAAA5D,KAAA,OAAA1B,MAAA,MACAsF,GAAA,EAAA5D,KAAA,KAAA1B,MAAA,MACAsF,GAAA,EAAA5D,KAAA,MAAA1B,MAAA,OACAsF,GAAA,EAAA5D,KAAA,KAAA1B,MAAA,MACAsF,GAAA,EAAA5D,KAAA,MAAA1B,MAAA,OACAsF,GAAA,EAAA5D,KAAA,KAAA1B,MAAA,KAAAkX,aAAA,2CAAAC,eAAAC,SAAA,UAIA5B,EAAAoC,gBAAA,SAAAC,GACArC,EAAAuB,OAAA5U,KAAAqT,EAAAU,kBACA5Q,GAAAwS,KAAAC,MAAA,IAAAD,KAAAE,SAAA,GACAtW,KAAAmW,MAIArC,EAAAyC,mBAAA,SAAAJ,GACA,GAAAhB,GAAAgB,EAAApB,QAAAoB,EAAApB,OAAAyB,KAAAL,EAAApB,OAAAyB,KAAA3U,MAAA,KAAA2D,WAAA,GAAArH,EACA4W,EAAAI,EAAArB,EAAAiC,YAAAZ,GAAAgB,EAAApB,OAAAoB,EAAApB,OAAA5W,QACA4W,GAAA0B,aACA,IAAAC,IACApX,KAAA,SACAwV,YACA5D,KAAA6D,GAGArW,GAAA,WACAoV,EAAAuB,OAAA5U,KAAAqT,EAAAU,kBACA5Q,GAAAwS,KAAAC,MAAA,IAAAD,KAAAE,SAAA,GACAtW,KAAAmW,EAAA5B,WACAjV,KAAAyV,EAAAzV,KACAuV,WAAA6B,EACA3B,OAAAA,EACAC,OACA5T,IAAA,OACA6T,SAAA,IAEAE,WAAAA,MAEA,MAGArB,EAAA6C,mBAAA,SAAAR,GACArC,EAAAuB,OAAAvB,EAAAuB,OAAAvR,OAAA,SAAAwI,GACA,MAAAA,GAAAtM,OAAAmW,EAAA5B,cAIAT,EAAA8C,eAAA,SAAAT,GACArC,EAAAuB,OAAAvB,EAAAuB,OAAAvR,OAAA,SAAAwI,GACA,MAAAA,GAAAtM,OAAAmW,KAIArC,EAAA+C,kBAAA,WACA/C,EAAAgD,qBAAA,KACAhD,EAAAuB,UACAvB,EAAAG,cAAAC,aACAJ,EAAAK,mBAAAD,cAIAJ,EAAAiD,iBAAA,WACAC,eAAAC,kBACA/C,SAAA8C,eAAAE,gBAIApD,EAAAqD,YACAnX,KAAA,MAAA1B,MAAA,OACA0B,KAAA,KAAA1B,MAAA,OAGAwV,EAAAsD,oBACAC,OAAAC,SAAAxD,EAAAqD,UAAA,GAAAI,WAGAzD,EAAA0D,UACAC,SAAA,EACAC,aAAA,4BACAC,gBAAA,4BACAC,eAAA,yBACAC,kBAAA,yBAEA/D,EAAAgE,cAAA9W,EAAA0Q,OAAAoG,cAAA9W,EAAA0Q,OAAAoG,cAAA,GAEAhE,EAAAiE,cACAjE,EAAAgD,qBAAA,KAEAhD,EAAAkE,cAAA,WACA,IACAlE,EAAAO,YAAA,EACAP,EAAAN,IAAArB,EAAA8F,iBAAAnE,EAAAsD,mBAAAC,OACAvD,EAAAgE,cAAA3F,EAAA+F,eAAApE,EAAAsD,mBAAAC,OACAnF,EAAAiG,WAAArE,EAAAN,KAAA,IACAzM,KAAA,SAAAmK,GACAxS,EAAA,WACAoV,EAAAM,aAAA,EACAN,EAAAO,YAAA,IAEAP,EAAAiE,WAAA3Z,QAAAga,OAAAlH,EAAApN,OAAA,KAAA,GACAgQ,EAAAuE,aAAA,GACAvE,EAAAgD,qBAAA,OARA5E,SAWA,SAAA+D,GACApO,QAAAqE,IAAA+J,GACAnC,EAAAgD,qBAAAb,EACAvX,EAAA,WACAoV,EAAAM,aAAA,EACAN,EAAAO,YAAA,IAEAhC,EAAA1R,MAAA7B,EAAAyC,QAAA,iCAEA,MAAA0U,GACAnC,EAAAgD,qBAAAb,EACAnC,EAAAM,aAAA,EACA/B,EAAA1R,MAAA7B,EAAAyC,QAAA,iCAKAuS,EAAAwE,wBAAA,WACA,GAAAjD,GAAAjX,QAAAsB,KAAAoU,EAAAuB,OACArU,GAAAxB,OAAAsE,QACAxE,KAAA,WACAkU,IAAAM,EAAAN,IAAAM,EAAAN,IAAA,GACAsE,cAAAhE,EAAAgE,cACAxZ,MAAAwV,EAAAiE,YAAA,GACAxE,cAAAvS,EAAAxB,OAAAsE,OAAAyP,eAAApV,EACAmW,YAAAe,EAAAjR,OAAA,EAAAiR,EAAAC,IAAA,SAAAb,GACA,MAAAX,GAAAsB,oBAAAX,KACAY,EAEA,IAAAkD,IAAA,CACAA,IACAvX,EAAA2S,kBACA3S,EAAAwX,eAAA,EACA1E,EAAAnM,eAGAmM,EAAAnM,eAIAmM,EAAAvP,OAAA,qBAAA,SAAAkU,GACA3E,EAAAM,aAAA,IAEA,GAEApT,EAAAgE,IAAA,cAAA,SAAAM,GACAwO,EAAAM,aAAA,IAEAN,EAAA4E,WAAA,iBACA5E,GAAAN,UACAM,GAAAgE,oBACAhE,GAAA6E,KAEA7E,EAAAiE,WAAA5Z,EACA2V,EAAAsD,oBACAC,OAAAC,SAAAxD,EAAAqD,UAAA,GAAAI,WAEAzD,EAAA+C,oBACAnY,EAAA,WACAoV,EAAAM,aAAA,IAIA,IAAA/M,GAAA1I,EAAA2I,KAAAoB,EAEAoL,GAAAnM,YAAA,WACAN,EAAAU,QACA+L,EAAA9L,aAiCAhH,EAAA4X,qBAAA,WACA5X,EAAAwX,gBACAxX,EAAA0Q,SACA1Q,EAAA0Q,WAEA1Q,EAAA0Q,OAAA8B,IAAAxS,EAAA0Q,OAAAiH,KAAA,GACA3X,EAAAxB,OAAAsE,QACAxE,KAAA,QACAhB,MAAA0C,EAAA0Q,OAAAmH,MACAtF,cAAAvS,EAAAxB,OAAAsE,OAAAyP,eAEAvS,EAAA2S,kBACA3S,EAAAwX,eAAA,IAIAxX,EAAA8X,sBAAA,WACA,GAAAC,GAAA/X,EAAA0Q,OAAA9N,EACAmV,IACAA,EAAAjV,OAAAF,GAAAmV,EAAAlV,IACA7C,EAAAxB,OAAAsE,OAAAiV,EAAAjV,QAEA9C,EAAAxB,OAAAsE,UAEA9C,EAAA2S,kBACA3S,EAAAwX,eAAA,GAGAxX,EAAAgY,mBAAA,SAAA7C,EAAA8C,GACAjY,EAAAwX,eAAA,EACAxX,EAAA8X,yBAEA9X,EAAAkY,mBAAA,SAAA/C,EAAA8C,GACAjY,EAAAwX,eAAA,GAGAxX,EAAAmY,MAAA,SAAAlU,GACA,GAAAmU,GAAAnU,EAAAoU,QAAApU,EAAAoU,QAAApU,EAAAqU,KACA,MAAAF,GACA,IAAApY,EAAA8C,OAAA+P,YACA7S,EAAAgR,qBACA,IAAAhR,EAAA8C,OAAA+P,YACA7S,EAAA4X,uBACA,IAAA5X,EAAA8C,OAAA+P,YACA7S,EAAA8X,yBACA,KAAAM,EACApY,EAAA8C,OAAAyV,iBAAAvY,EAAA8C,OAAAyV,gBAEAvY,EAAAwX,eAAA,GAKAxX,EAAAwY,mBACAxY,EAAAyY,mBAAA,WACAzY,EAAAxB,OAAAga,gBACAxY,EAAAwY,gBAAAxY,EAAAxB,OAAAga,gBAEAha,EAAAka,kBAAAC,WAAA,IAAA5S,KAAA,SAAAsO,GACArU,EAAAwY,gBAAAnE,EACArU,EAAA4Y,WAFApa,SAGA,SAAAyW,GACAxX,EAAAkC,MAAAsV,MAKAjV,EAAA6Y,gBAAA,WACA,GAAAC,GAAAta,EAAAqM,KAAAiO,SACA,gBAAAA,EACA9Y,EAAAxB,OAAAqM,KAAAiO,UAAA,YACA,cAAAA,IACA9Y,EAAAxB,OAAAqM,KAAAiO,UAAA,cAEA9Y,EAAAyC,UAGAzC,EAAA+Y,WAAA,WACA7H,EAAAiG,WAAAnX,EAAA0Q,OAAA8B,KAAA,IACAzM,KAAA,SAAAmK,GACAlQ,EAAA0Q,OAAAiH,KAAAva,QAAAga,OAAAlH,EAAApN,OAAA,KAAA,GACA9C,EAAAqX,aAAA,GACArX,EAAAgZ,aAAA,OAJA9H,SAMA,SAAA+D,GACAjV,EAAAgZ,aAAA/D,KAMAjV,EAAAiZ,qBAAA,WACA,GAAAA,IACAC,QAAAhI,EAAAiI,wBACAX,gBAAAha,EAAAka,kBAGA,OAAAO,IAKAjZ,EAAAkW,cAAA1W,EAAA0W,kBAGAlW,EAAAkP,kBACA+G,iBAAAjW,EAAAkW,cACAkD,WAAA,SAAAhZ,EAAAiZ,GAKA,MAJArZ,GAAAkW,cAAA9V,KAAAhD,QAAAqD,YAAA4Y,KACArZ,EAAAkW,cAAA9V,GAAA8P,KAAAmJ,KAGArZ,EAAAkW,cAAA9V,IAEAkZ,cAAA,WACA,MAAAC,QAAAC,KAAAxZ,EAAAkW,eAAA9S,SAIA5D,EAAAhB,OAAAgJ,gBAEAxH,EAAAyZ,aAAA,WACAja,EAAAhB,OAAAgJ,cAAAxH,EAAAkW,eACAlW,EAAAgI,QAAArB,eAGAnH,EAAAhB,OAAA0X,gBACAlW,EAAAkW,cAAA9Y,QAAAsB,KAAAc,EAAAhB,OAAA0X,gBAGAlW,EAAAxB,OAAA0Q,iBAAAlP,EAAAkP,kBAGAlP,EAAA0Z,oBAAA,WACA,GAAA1D,GAAAhW,EAAAkC,MAEA1C,GAAAhB,OAAAgJ,sBACAhJ,GAAAmb,gBAAAC,qBACApb,GAAAmb,gBAAAE,aAGA7D,EAAA2D,gBAAAnb,EAAAmb,gBAEA3D,EAAAE,iBACA9Y,QAAA+C,QAAAH,EAAAkW,cAAA,SAAA5Y,EAAA8C,GACA4V,EAAAE,cAAAzW,MACAW,IAAAA,EACA9C,MAAAA,MAIA0Y,EAAAC,kBACA/C,SAAA8C,EAAAE,cAGA,IAAA4D,GAAAjc,EAAA,wBACA6J,GACApG,MAAA0U,EACAzP,YAAAuT,EACAtT,SAAA,SACAE,KAAA,KACAsM,WAAA,GAGA3M,EAAA1I,EAAA2I,KAAAoB,EAEAsO,GAAAD,iBAAA,WACAC,EAAAC,kBACA/C,SAAA8C,EAAAE,gBAIAF,EAAA+D,eAAA,WACA/D,EAAAC,iBAAA/C,aAIA8C,EAAAgE,YAAA,SAAA1b,GACA,GAAA2b,GAAAjE,EAAA2D,gBAAAO,aAAAlE,EAAAC,iBAAA/C,SAAA5U,EAEAlB,SAAAqD,YAAAwZ,IAAA,OAAAA,IACAja,EAAA8C,OAAA+P,WAAA,EACA3B,EAAAiG,WAAA8C,GAAAlU,KAAA,SAAAmK,GACAlQ,EAAA0Q,OAAA8B,IAAAyH,EACAja,EAAA0Q,OAAAiH,KAAAva,QAAAga,OAAAlH,EAAApN,OAAA,KAAA,GACA9C,EAAAqX,aAAA,GACArX,EAAAgZ,aAAA,KAEAhZ,EAAAgR,uBANAE,SAOA,SAAA+D,GACAjV,EAAAgZ,aAAA/D,MAKAe,EAAAvD,iBAAA,SAAA0H,GACAna,EAAAyB,UACAzB,EAAAgI,QAAAtI,WAAA,0BACAwW,cAAAF,EAAAC,iBAAA/C,SACA5U,KAAA6b,KAMAnE,EAAAoE,kBAAA,WACA,GAAAC,KACAjd,SAAA+C,QAAA6V,EAAAC,iBAAA/C,SAAA,SAAAhD,EAAAnP,GACAsZ,EAAAnK,EAAA9P,MACA8P,KAAAA,EAAA5S,MAAA4S,KACAoK,QAAApK,EAAA5S,MAAAgd,WAIAta,EAAAkW,cAAA9Y,QAAAsB,KAAA2b,GACAra,EAAAua,oBAAAhB,OAAAC,KAAAxZ,EAAAkW,eAAA9S,OAEApD,EAAAkP,iBAAAsL,YACAxa,EAAAN,WAAA,yBAAAM,EAAAkP,kBAEA7I,EAAAU,QACAiP,EAAAhP,YAIAgP,EAAArP,YAAA,WACAN,EAAAU,QACAiP,EAAAhP,aAMAhH,EAAAH,KAAA,SAAA4a,GA4BA,QAAAC,GAAAC,GACA,GAAAnL,EACA,IAAA,iBAAAmL,GAAA,CACA,GAAAC,GAAAlO,EAAAmO,OACAF,GACAC,EAAArL,UAEAqL,EAAAE,SAEAtL,EAAAoL,EAAApL,YAEAA,GAAA9C,EAAAqO,KAAAJ,EAEA,OAAAnL,GAxCA,GAAAwL,GAAAhb,EAAAkC,MACA8Y,GAAAxb,WAAApC,QAAAsB,KAAAc,EAEA,IAAA2G,GAAAtI,EAAA,kBACA2B,GAAA4G,kBACAD,EAAA3G,EAAA4G,gBAGA,IAAAsB,IACApG,MAAA0Z,EACAzU,YAAAJ,EACAK,SAAA,SACAE,KAAA,MAGAL,EAAA1I,EAAA2I,KAAAoB,EAEAsT,GAAArU,YAAA,SAAArJ,GACA+I,EAAAU,QACA0T,GAAA,UAAAnd,GACAE,EAAAkC,WAAA,2BAAAsb,EAAAxb,YAGAwb,EAAAhU,YAoBAgU,EAAAC,WAAA,WAEAD,EAAAE,gBAAA,IAGA,IAKAC,GALAtc,EAAAmB,EAAAnB,MAOAsc,GADAtc,EAAAgB,KACAhB,EAAAgB,KAAAoM,MAEA,WACA,OAAA,EAIA,IAAAmP,GAAAJ,EAAAxb,WAAAhB,WAEAqR,GACAhR,OAAAA,EACAW,WAAAwb,EAAAxb,WACAhB,OAAA4c,GAIAT,EAAA7N,EAAA6C,OAAAwL,EAAAA,EAAAtL,EACA6K,GAAAC,GAAA5U,KAAA,WACAvG,EAAAc,MAAA0a,EAAAxb,WAAAc,MACA,iBAAA0a,EAAAxb,WAAAlB,OACA,oBAAA0c,EAAAxb,WAAAhB,OAAAF,MACA0c,EAAAxb,WAAAmD,MAAA,WACAnD,EAAAmD,MAAA,aAEAqY,EAAAxb,WAAAmD,MAAAqY,EAAAxb,WAAAhB,OAAAF,KAAAH,cACAqB,EAAAmD,MAAAqY,EAAAxb,WAAAhB,OAAAF,KAAAH,gBAGAf,QAAA2O,OAAAvM,EAAAhB,OAAA4c,GAEAJ,EAAArU,cAEA9H,EAAAgB,MAAAhB,EAAAgB,KAAA4C,SACAzC,EAAAqb,mBAEArb,EAAAN,WAAA,yBAEA,SAAAuV,GACAA,EACA+F,EAAAE,gBAAAjG,EAEA+F,EAAAE,gBAAA,qCA30BA,GAAAxI,GAAA,SAAA4I,EAAAtb,GACA,GAAAxB,GAAAwB,EAAAxB,WACAsE,EAAAtE,EAAAsE,OAAAtE,EAAAsE,OAAAtE,EAAAsE,UACAF,EAAAE,EAAAF,GAAA0Y,GAAAxY,EAAAF,EAMA,QALAE,EAAAyP,cAAA+I,GAAAxY,EAAAyP,cAEAvS,EAAA8C,SACA9C,EAAA8C,WAEAA,EAAAxE,MACA,IAAA,WACA0B,EAAA8C,OAAA+P,WAAAjQ,EAAA,EAAA,EACA5C,EAAA0Q,QACA8B,IAAA1P,EAAA0P,IACAmF,KAAA7U,EAAAxF,MACAwZ,cAAAhU,EAAAgU,eAAA,GACAxD,YAAAxQ,EAAAwQ,aAAAnW,EAEA,MACA,KAAA,QACA6C,EAAA8C,OAAA+P,WAAAjQ,EAAA,EAAA,EACA5C,EAAA0Q,QACAmH,MAAA/U,EAAAxF,MAGA,MACA,SACA0C,EAAA8C,OAAA+P,WAAAjQ,EAAA,EAAA,EACA5C,EAAA0Q,QACAmH,MAAA/U,EAAAxF,MAAA,IAIA0C,EAAA0Q,OAAA9N,GAAA0Y,EAozBA,QACAna,SAAA,EACAC,SAAA,KACAC,YAAA,EACAkF,YAAA1I,EAAA,mBACAyD,OACA9B,WAAA,IACAiC,SAAA,IACA6B,QAAA,IACAoO,YAAA,KAEA1P,YAAA,SAAA,WAAA,SAAAhC,EAAAkJ,GACAlJ,EAAA8C,QACA+P,WAAA,EACA0I,YAAA,EACAhD,iBAAA,EAGA,IAAAiD,GAAAxb,EAAAgE,IAAA,sBAAA,SAAAC,EAAAwX,GACAzb,EAAAxB,OAAAgP,aAAAiO,EAAAA,EAAAjd,OAAAgP,gBAAAiO,CACA,IAAA5c,IACAW,WAAAA,EACA6D,QAAA6F,EAEA1L,GAAAkC,WAAA,iCAAAb,EAAAmB,EAAAxB,OAAAgP,cACAxN,EAAAN,WAAA,0BAAAM,EAAAxB,OAAAgP,cACAxN,EAAAyC,UAGAsF,MAAA7E,oBAAA,SAAAwY,EAAAlZ,GACA,GAAAxC,EAAAsD,SAAAtD,EAAAsD,QAAAvB,WAAA/B,EAAAsD,QAAAvB,UAAAoB,cAAA,CACA,GAEAmY,GAFAK,EAAA3b,EAAAsD,QAAAvB,UAAAoB,cACApE,EAAAiB,EAAAR,WAEAoc,EAAAD,EAAA7Y,OAAA,SAAAT,GAKA,GAAA0V,KAAA1V,EAAAS,QAAAT,EAAAS,OAAAF,IAAAP,EAAAM,QAAA5D,EAAA4D,OAAAN,EAAAQ,MAAA9D,EAAA8D,IAGA,OAFAkV,IAAA2D,IAAArZ,EAAAQ,MACAyY,EAAAjZ,GACA0V,GAGA/X,GAAA4b,cAAAxe,QAAAsB,KAAAkd,KACApZ,IAAA8Y,GAAAI,IACAhJ,EAAA4I,EAAAtb,IAKA,IAAAR,GAAAQ,EAAAR,UAGAA,GAAAhB,OAAA0X,gBACAlW,EAAAua,oBAAAhB,OAAAC,KAAAha,EAAAhB,OAAA0X,eAAA9S,QAKApD,EAAAqO,mBACAC,WAAA,EACAuN,aAAA,EACAC,aAAA,WACA9b,EAAAqO,kBAAAwN,aAAA,GAEAE,YAAA,WACA/b,EAAAqO,kBAAAC,WAAA,EACAtO,EAAAqO,kBAAAwN,aAAA,EACA7b,EAAAqO,kBAAA2N,gBAAA,GAAAhX,OAEAiX,iBAAA,SAAAC,GACAlc,EAAAqO,kBAAA8N,cAAAD,EACAlc,EAAAqO,kBAAA2N,gBAAA,GAAAhX,QAKAhF,EAAAsQ,eACA8L,aAAA,SAAAtZ,EAAA4N,EAAAmC,GACA7S,EAAA0Q,OAAAA,EACA1Q,EAAA8C,OAAA+P,WAAAA,IAKA7S,EAAAuQ,sBACA8L,WACAC,WAAA,SAAAD,GACArc,EAAAuQ,qBAAA8L,QAAAA,GAIA,IAAAE,GAAAvc,EAAAgE,IAAA,6BAAA,SAAAC,EAAAuY,GACAxc,EAAA0R,YAAAC,YAAA6K,EAAAC,uBAGAC,EAAA1c,EAAAgE,IAAA,yBAAA,SAAAC,EAAApF,GACAjB,EAAA4O,SAAAhN,EAAAqD,IAAAhE,EAAAgE,MACA7C,EAAAH,MAAA,KAIA8c,EAAA3c,EAAAgE,IAAA,gBAAA,SAAAC,EAAApF,GACAmB,EAAAqJ,SAAA,IAGAuT,EAAA5c,EAAAgE,IAAA,sBAAA,SAAAC,EAAAjF,EAAAD,GAEA,GAAA8d,MACA3d,EAAAH,EAAAG,IACA,IAAAA,GAAAA,EAAAkE,OAAA,EAAA,CACAlE,EAAAiB,QAAA,SAAAkD,GACA,GAAA7D,GAAA6D,EAAA7D,UACAqd,GAAApd,KAAAD,EAAAqD,MAEA,IAAAM,GAAAnD,EAAAsD,SAAAtD,EAAAsD,QAAAvB,WAAA/B,EAAAsD,QAAAvB,UAAAoB,cACAyY,EAAAzY,EAAAL,OAAA,SAAAT,GACA,GAAAS,GAAAT,EAAAS,MACA,OAAAA,KAAAA,EAAAF,IAAAia,EAAA5b,QAAA6B,EAAAF,UAEA5C,GAAA4b,cAAAxe,QAAAsB,KAAAkd,GACA5b,EAAAqJ,SAAA,EACArJ,EAAAN,WAAA,sBAAAmd,MAIAC,EAAA9c,EAAAgE,IAAA,6BAAA,SAAAC,EAAApF,GACAmB,EAAAqJ,SAAA,GAGArJ,GAAA+c,eAAA,WACA,GAAAC,GAAAC,SAAAC,uBAAA,iBAAAld,EAAAR,WAAAqD,IACAma,GAAA,GAAAG,mBACAH,EAAA,GAAAG,oBACAnd,EAAAN,WAAA,mBACAsd,EAAA,GAAAI,sBACAJ,EAAA,GAAAI,uBACApd,EAAAN,WAAA,mBACAsd,EAAA,GAAAK,yBACAL,EAAA,GAAAK,0BACArd,EAAAN,WAAA,mBACAsd,EAAA,GAAAM,qBACAN,EAAA,GAAAM,sBACAtd,EAAAN,WAAA,mBAEAM,EAAAud,MAAA,8BAAA/d,EAAAlB,KAAA0B,EAAAxB,WAAAwB,IAIAA,EAAAwd,gBAAA,SAAA9W,GACAA,EAAA,IACA,IAAA+W,GAAA9f,EAAA2I,MACA0M,WAAA,EACAzM,YAAA,wBACAvE,YAAA,SAAA,oBAAA,cAAA,SAAAhC,EAAA0d,EAAAC,GACA3d,EAAA4d,SACA5d,EAAA4d,MAAAC,KAAAF,EACA3d,EAAA8d,GAAA,WACAJ,EAAA3W,WAGAL,KAAAA,EACA6I,SACAoO,YAAA,WACA,MAAA3d,GAAAxB,OAAAof,SAKAH,GAAA9C,OAAA5U,KAAA,SAAAgY,GACA/d,EAAAkT,SAAA6K,GACA,WACAtgB,EAAAogB,KAAA,uBAAA,GAAA7Y,UAIAhF,EAAAge,iBAAA,SAAAC,GACAje,EAAAud,MAAA,oBACAW,eAAA,WAAAD,EACAE,SAAA,YAAA,GAAAnZ,OAAAuH;IAKAvM,EAAAoe,sBAAA,SAAAH,GACAje,EAAAud,MAAA,kBACAW,eAAA,WAAAD,GACAA,IAEAje,EAAAqe,sBAAA,SAAAJ,GACAje,EAAAud,MAAA,kBACAW,eAAA,WAAAD,GACAA,GAGA,IAAAK,GAAA,SAAAC,GACA,GAGAC,GAHAC,GACAC,MASA,OANAH,GAAApe,QAAA,SAAAsT,GACA+K,KACAA,EAAA/K,EAAA6C,aACAkI,EAAA/K,EAAA6C,UAAA7C,EAAAzU,MAAAgB,EAAAxB,OAAAsE,OAAAxF,MACAmhB,EAAAC,GAAAjf,KAAA+e,KAEAC,EAGAze,GAAA2e,YAAA,WACA,GAEAC,GAFAC,EAAA7e,EAAAxB,OAAAqgB,QACAC,EAAA9e,EAAAxB,OAAAsE,OAEAic,KACAC,EAAAhf,EAAAxB,OAAAqM,KAAA7K,EAAAxB,OAAAqM,KAAA1N,CACA,IAAA6C,EAAAxB,OAAAmQ,eAAA3O,EAAAxB,OAAAygB,oBAAA,CACA,GAAArQ,GAAA5O,EAAAxB,OAAAmQ,gBACAuQ,EAAAlf,EAAAxB,OAAAygB,oBAAArQ,EACAsQ,IAAAA,EAAAC,MACAP,GACAO,IAAAD,EAAAC,MAIA,GAAArc,EACAgc,GAAAxgB,MAAA,aAAAwgB,EAAAxgB,MAAAwgB,EAAAxhB,MAAA8F,OAAA,EACAN,EAAAsc,KAAAC,MAAAP,EAAAxhB,OACAwhB,EAAAxgB,MAAA,UAAAwgB,EAAAxgB,MAAA,KAAAwgB,EAAAxhB,MAAAgiB,SACAxc,EAAAwb,EAAAte,EAAAxB,OAAA+f,kBAAAO,EAAAxhB,QAIAyhB,EAFAH,EACA9b,GAEAqc,KAAAP,EAAA9b,IAGA8b,EAGA9b,EAEA9C,EAAAN,WAAA,eACAmf,QAAAA,EACA/b,OAAAic,EACAC,MAAAA,KAIAhf,EAAAuf,WAAA,WACAvf,EAAAN,WAAA,cAGA,IAyBA8f,GAzBAC,EAAAzf,EAAAgE,IAAA,qBAAA,SAAAC,EAAAqH,GACAtL,EAAAkW,cAAA5K,EAAAlL,OACAJ,EAAAkW,cAAA5K,EAAAlL,MACA8P,KAAA5E,EAAA4E,KACAoK,QAAAhP,EAAAgP,SAEAta,EAAAua,oBAAAhB,OAAAC,KAAAxZ,EAAAkW,eAAA9S,OACAkI,EAAA8N,YAAA,EACApZ,EAAAkP,iBAAAsL,SAAAlP,EACAtL,EAAAN,WAAA,yBAAAM,EAAAkP,qBAKAwQ,EAAA1f,EAAAgE,IAAA,0BAAA,SAAAC,EAAAqH,GACAtL,EAAAkW,cAAA5K,EAAAlL,aACAJ,GAAAkW,cAAA5K,EAAAlL,KACAJ,EAAAua,oBAAAhB,OAAAC,KAAAxZ,EAAAkW,eAAA9S,OACAkI,EAAA8N,YAAA,EACApZ,EAAAkP,iBAAAsL,SAAAlP,EACAtL,EAAAN,WAAA,yBAAAM,EAAAkP,oBAOAlP,GAAAqb,iBAAA,WACA,GAAA7c,GAAAwB,EAAAxB,QAAAwB,EAAAR,WAAAhB,WAGAmhB,EAAAnhB,EAAAmhB,YACAC,OAAAD,IAAA,EAAAA,IAAA,EAMAH,GACAvO,EAAA4O,OAAAL,IANApiB,QAAAc,UAAAshB,KACAvO,EAAA4O,OAAAL,GACAA,EAAAriB,GAEAqiB,EAAAvO,EAAAjR,EAAAyC,OAAA,IAAAkd,KAMA3f,EAAAyC,OAAA,WACAzC,EAAAN,WAAA,gBAEAM,EAAAqb,oBAKArb,EAAAqb,mBAEArb,EAAAgE,IAAA,WAAA,WACAuY,IACAG,IACAC,IACAC,IACAE,IACA2C,IACAC,IACAlE,IACAvK,EAAA4O,OAAAL,OAGArV,QAAA,WAMA,OACAC,IAAAd,EACAwW,KAAAhO,QC3pCA1U,QAAAC,OAAA,OACA0T,QAAA,iBAAA,QAAA,KAAA,OAAA,iBAAA,YAAA,SAAAgP,EAAArT,EAAAsT,EAAAC,EAAAriB,GAGA,QAAAsiB,GAAAxa,GACA,GAAAya,GAAAza,CAQA,OAPAA,GAAAzE,QAAA,kBAAA,IACAkf,EAAAza,EAAAvE,QAAA,gBAAAvD,EAAA8N,aACAvK,QAAA,KAAA,KACA,IAAAgf,EAAAlf,QAAA,OACAkf,EAAAA,EAAAC,UAAA,KAGAD,EAGA,GAAAE,KA6BA,OA3BAA,GAAA/Q,YAAA,SAAAzQ,GACA,GAAA+b,GAAAlO,EAAAmO,OAEA,IAAAhc,EAAAsN,SACAyO,EAAArL,QAAA1Q,EAAAsN,cACA,IAAAtN,EAAA0H,YAAA,CAEA,GAAA+Z,GAAAL,EAAAvQ,IAAA7Q,EAAA0H,YACA,IAAA+Z,EACA1F,EAAArL,QAAA+Q,OACA,CACA,GAAA5a,GAAAsa,EAAAO,sBAAAL,EAAArhB,EAAA0H,aACAwZ,GAAArQ,IAAAhK,GACA8a,QAAA,SAAA3L,GAEAoL,EAAAQ,IAAA5hB,EAAA0H,YAAAsO,GACA+F,EAAArL,QAAAsF,KAEAlV,MAAA,WACAib,EAAAE,OAAA,8BAKA,MAAAF,GAAApL,SAGA6Q,KC1EAjjB,QAAAC,OAAA,OAAAqjB,KAAA,iBAAA,SAAAT,GAAAA,EAAAQ,IAAA,uCAAA,q+CACAR,EAAAQ,IAAA,uCAAA,sjPACAR,EAAAQ,IAAA,uCAAA,mxBACAR,EAAAQ,IAAA,wCAAA,2qDACAR,EAAAQ,IAAA,kCAAA,+UACAR,EAAAQ,IAAA,mCAAA,mjIACAR,EAAAQ,IAAA,+CAAA,+qIACAR,EAAAQ,IAAA,sCAAA,4hBACAR,EAAAQ,IAAA,oCAAA,y9FACAR,EAAAQ,IAAA,oDAAA,8kBACAR,EAAAQ,IAAA,0CAAA,sgCACAR,EAAAQ,IAAA,0CAAA;AACAR,EAAAQ,IAAA,oCAAA,svNACAR,EAAAQ,IAAA,yCAAA,+2HACAR,EAAAQ,IAAA,uCAAA,0HACAR,EAAAQ,IAAA,6CAAA,oUACAR,EAAAQ,IAAA,oCAAA,mUCuxFAR,EAAeQ,IAAI,uCAAuC,weACvDvjB","file":"opengate-angular-dashboard-framework-tpls.min.js","sourcesContent":["/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf', ['adf.provider', 'ui.bootstrap', 'opengate-angular-js'])\n    .value('adfTemplatePath', '../src/templates/')\n    .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\n    .value('adfVersion', '<<adfVersion>>');","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @ngdoc directive\n * @name adf.directive:adfDashboard\n * @element div\n * @restrict EA\n * @scope\n * @description\n *\n * `adfDashboard` is a directive which renders the dashboard with all its\n * components. The directive requires a name attribute. The name of the\n * dashboard can be used to store the model.\n *\n * @param {string} name name of the dashboard. This attribute is required.\n * @param {boolean=} editable false to disable the editmode of the dashboard.\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\n * @param {object=} adfModel model object of the dashboard.\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\n *                   events during edit mode not reset it if edit mode is exited.\n * @param {boolean=} categories enable categories for the add widget dialog.\n */\n\nangular.module('adf')\n    .directive('adfDashboard', function($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath, $translate, Upload) {\n        'use strict';\n\n        function stringToBoolean(string) {\n            switch (angular.isDefined(string) ? string.toLowerCase() : null) {\n                case 'true':\n                case 'yes':\n                case '1':\n                    return true;\n                case 'false':\n                case 'no':\n                case '0':\n                case null:\n                    return false;\n                default:\n                    return Boolean(string);\n            }\n        }\n\n        function createConfiguration(type) {\n            var cfg = {};\n            var config = dashboard.widgets[type].config || {};\n            cfg = angular.copy(config);\n            return cfg;\n        }\n\n        function createWidget(type) {\n            var wdgt = {};\n            var widget = dashboard.widgets[type];\n            if (widget) {\n                wdgt = angular.copy(widget);\n            }\n            return wdgt;\n        }\n\n        /**\n         * Adds the widget to first column of the model.\n         *\n         * @param dashboard model\n         * @param widget to add to model\n         * @param name name of the dashboard\n         */\n        function addNewWidgetToModel(model, widget, name, forceToSave) {\n            if (model) {\n                if (!model.grid) {\n                    model.grid = [];\n                }\n\n                var newWidget = {\n                    width: 3,\n                    height: 2,\n                    x: 0,\n                    y: 0,\n                    definition: widget\n                };\n                model.grid.push(newWidget);\n\n                $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\n\n                if (forceToSave) {\n                    $rootScope.$broadcast('adfDashboardChanged', name, model);\n                }\n            } else {\n                $log.error('model is undefined');\n            }\n        }\n\n        /**\n         * Checks if the edit mode of the widget should be opened immediately.\n         *\n         * @param widget type\n         */\n        function isEditModeImmediate(type) {\n            var widget = dashboard.widgets[type];\n            return widget && widget.edit && widget.edit.immediate;\n        }\n\n        /**\n         * Opens the edit mode of the specified widget.\n         *\n         * @param dashboard scope\n         * @param widget\n         */\n        function openEditMode($scope, widget) {\n            // wait some time before fire enter edit mode event\n            $timeout(function() {\n                $scope.$broadcast('adfWidgetEnterEditMode', widget);\n            }, 200);\n        }\n\n        /**\n         * Creates object with the category name as key and an array of widgets as value.\n         *\n         * @param widgets array of widgets\n         *\n         * @return array of categories\n         */\n        function createCategories(widgets) {\n            var categories = {};\n            angular.forEach(widgets, function(widget, key) {\n                var category = widget.category;\n                // if the widget has no category use a default one\n                if (!category) {\n                    category = 'ADF.CATEGORY.MISCELANOUS';\n                }\n\n                widget.title = $translate.instant(widget.title);\n                widget.description = $translate.instant(widget.description);\n                widget.category = $translate.instant(widget.category);\n\n                // push widget to category array\n                if (angular.isUndefined(categories[widget.category])) {\n                    categories[widget.category] = {\n                        widgets: {}\n                    };\n                }\n\n                categories[widget.category].widgets[key] = widget;\n            });\n            return categories;\n        }\n\n        function createCategoriesList(widgets) {\n            var categories = [];\n            angular.forEach(widgets, function(widget, key) {\n                if (!widget.category) {\n                    widget.category = 'ADF.CATEGORY.MISCELLANEOUS';\n                }\n\n                widget.title = $translate.instant(widget.title);\n                widget.description = $translate.instant(widget.description);\n                widget.category = $translate.instant(widget.category);\n\n                if (!widget.categoryTags) {\n                    widget.categoryTags = 'ADF.CATEGORY.TAG.MISCELLANEOUS';\n                }\n\n                var categoriesTmp = widget.categoryTags.split(',');\n\n                var allWidgetCategoriesTranslated = [];\n                angular.forEach(categoriesTmp, function(category, idx) {\n                    // push widget to category array\n                    var translatedCat = $translate.instant(category);\n                    if (categories.indexOf(translatedCat) === -1) {\n                        categories.push(translatedCat);\n                    }\n\n                    if (allWidgetCategoriesTranslated.indexOf(translatedCat) === -1) {\n                        allWidgetCategoriesTranslated.push(translatedCat);\n                    }\n                });\n                widget.categoryTags = allWidgetCategoriesTranslated.toString();\n\n            });\n            return categories;\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            scope: {\n                name: '@',\n                collapsible: '@',\n                editable: '@',\n                editMode: '@',\n                continuousEditMode: '=',\n                maximizable: '@',\n                adfModel: '=',\n                adfWidgetFilter: '=',\n                categories: '@',\n                hideButtons: '=',\n                extraData: '='\n            },\n            controller: function($scope) {\n                var model = {\n                    extraConfig: {\n                        cellHeight: 145\n                    }\n                };\n                var widgetFilter = null;\n                var name = $scope.name;\n\n                var _getReloadWidgets = function(widget) {\n                    var reloadWidgets = {\n                        configChange: [],\n                        reload: []\n                    };\n                    if (widget) {\n                        var definition = angular.copy(widget.definition);\n                        var ftype = definition.Ftype;\n                        var id = definition.wid;\n                        var config = definition.config || {};\n                        var filter = config.filter;\n                        model.grid.forEach(function(w) {\n                            var f = w.definition.config.filter;\n                            var ft = w.definition.Ftype;\n                            //solo recargamos y actualizamos los widgets:\n                            // - que tengan filtro\n                            // y que el id tenga filtro\n                            // y que el id del filtro coincida con el wid del widget que ha modificado el fitro\n                            if (f && f.id && f.id === id) {\n                                w.definition.config.filter = filter;\n                                w.definition.config.filter.id = id;\n                                reloadWidgets.reload.push(w.definition.wid);\n                            } else if (ftype === ft) {\n                                reloadWidgets.configChange.push(w.definition.wid);\n                            }\n                        });\n                    }\n                    return reloadWidgets;\n                };\n\n                var updateWidgetFilters = function(model) {\n                    var widgetFilters = [];\n                    var grid = model.grid;\n                    if (grid && grid.length > 0) {\n                        grid.forEach(function(element) {\n                            var definition = element.definition;\n                            var config = definition.config || {};\n                            var filter = config.filter;\n                            widgetFilters.push({\n                                wid: definition.wid,\n                                title: definition.title,\n                                filter: filter,\n                                Ftype: definition.Ftype\n                            });\n                        });\n                    }\n                    if (!$scope.options) {\n                        $scope.options = {\n                            extraData: {}\n                        };\n                    }\n                    $scope.options.extraData.widgetFilters = widgetFilters;\n                };\n                // Watching for changes on adfModel\n                $scope.$watch('adfModel', function(oldVal, newVal) {\n                    // has model changed or is the model attribute not set\n                    if (newVal !== null || (oldVal === null && newVal === null)) {\n                        model = $scope.adfModel;\n                        widgetFilter = $scope.adfWidgetFilter;\n\n                        if (model) {\n                            updateWidgetFilters(model);\n                            if (!model.title) {\n                                model.title = $translate.instant('ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD');\n                            }\n                            if (!model.titleTemplateUrl) {\n                                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\n                            }\n\n                            if (!model.extraConfig) {\n                                model.extraConfig = {\n                                    cellHeight: 145\n                                };\n                            } else {\n                                if (!model.extraConfig.cellHeight) {\n                                    model.extraConfig.cellHeight = 145;\n                                }\n                            }\n\n                            $scope.model = model;\n                        } else {\n                            $log.error('could not find or create model');\n                        }\n                    }\n                }, true);\n\n                // edit mode\n                $scope.editMode = false;\n\n                function getNewModalScope() {\n                    var scope = $scope.$new();\n                    return scope;\n                }\n\n                $scope.toggleEditMode = function(openConfigWindow) {\n                    $scope.editMode = !$scope.editMode;\n                    if ($scope.editMode) {\n                        if (!$scope.continuousEditMode) {\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\n                            $rootScope.$broadcast('adfIsEditMode');\n                        }\n\n                        if (openConfigWindow) {\n                            $scope.editDashboardDialog();\n                        }\n                    }\n\n                    if (!$scope.editMode) {\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\n                    }\n                };\n\n                var adfToggleEditMode = $scope.$on('adfToggleEditMode', function(event, isNewDashboard) {\n                    if (isNewDashboard) {\n                        $scope.toggleEditMode(true);\n                    } else {\n                        $scope.toggleEditMode();\n                    }\n                });\n\n                var adfCancelEditMode = $scope.$on('adfCancelEditMode', function(event) {\n                    if ($scope.editMode) {\n                        $scope.cancelEditMode();\n                    }\n                });\n\n                var adfWidgetRemoved = $scope.$on('adfWidgetRemovedFromGrid', function(event, widget) {\n                    var index = null;\n                    angular.forEach($scope.adfModel.grid, function(widgetTmp, idx) {\n                        if (widgetTmp.definition.wid === widget.wid) {\n                            index = idx;\n                        }\n                    });\n\n                    if (index >= 0) {\n                        $scope.adfModel.grid.splice(index, 1);\n                    }\n                });\n                var adfWidgetRemovedAndSave = $scope.$on('adfWidgetRemovedFromGridAndSave', function(event, widget) {\n                    var index = null;\n                    $scope.toggleEditMode();\n                    angular.forEach($scope.adfModel.grid, function(widgetTmp, idx) {\n                        if (widgetTmp.definition.wid === widget.wid) {\n                            index = idx;\n                        }\n                    });\n\n                    if (index >= 0) {\n                        $scope.adfModel.grid.splice(index, 1);\n                    }\n                    $scope.toggleEditMode();\n                });\n\n                $scope.cancelEditMode = function() {\n                    $scope.editMode = false;\n                    if (!$scope.continuousEditMode && ($scope.modelCopy !== $scope.adfModel)) {\n                        $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\n                    }\n                    $rootScope.$broadcast('adfDashboardEditsCancelled', $scope.adfModel.title, $scope.adfModel);\n                };\n\n                var adfEditDashboardDialog = $scope.$on('adfEditDashboardDialog', function(event) {\n                    if ($scope.editMode) {\n                        $scope.editDashboardDialog();\n                    }\n                });\n\n\n                var adfLaunchSearchingFromWidget = $scope.$on('adfLaunchSearchingFromWidget', function(event, widget) {\n                    var reloadWidgets = _getReloadWidgets(widget);\n                    $rootScope.$broadcast('adfFilterChanged', name, model, reloadWidgets);\n                });\n                var adfWindowTimeChangedFromWidget = $scope.$on('adfWindowTimeChangedFromWidget', function(event) {\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\n                });\n\n                // edit dashboard settings\n                $scope.editDashboardDialog = function() {\n                    var editDashboardScope = getNewModalScope();\n                    // create a copy of the title, to avoid changing the title to\n                    // \"dashboard\" if the field is empty\n                    editDashboardScope.copy = {\n                        title: (model.title !== 'ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD' ? model.title : ''),\n                        description: model.description,\n                        backgroundColor: model.backgroundColor ? model.backgroundColor : undefined,\n                        time: new Date(),\n                        backgroundImage: model.backgroundImage ? model.backgroundImage : undefined,\n                        file: model.backgroundImage ? model.backgroundImage : undefined,\n                        extraConfig: angular.copy(model.extraConfig)\n                    };\n\n                    editDashboardScope.backgroundSize = {\n                        name: 'backgroundSize',\n                        model: model.backgroundImageSize ? model.backgroundImageSize : '100% 100%',\n                        options: {\n                            '100% 100%': {\n                                title: $translate.instant('SIZE_CONF.AUTO')\n                            },\n                            'contain': {\n                                title: $translate.instant('SIZE_CONF.CONTAIN')\n                            },\n                            'cover': {\n                                title: $translate.instant('SIZE_CONF.COVER')\n                            }\n                        }\n                    };\n\n                    editDashboardScope.iconConfiguration = {\n                        name: 'iconConfiguration',\n                        model: model.iconType ? model.iconType : 'icon',\n                        url: undefined,\n                        file: undefined,\n                        iconType: model.iconType ? model.iconType : 'icon',\n                        icon: model.iconType === 'icon' ? model.icon : 'fa-tachometer',\n                        options: {\n                            'icon': {\n                                title: $translate.instant('ICON.LIBRARY'),\n                            },\n                            'image': {\n                                title: $translate.instant('ICON.IMAGE')\n                            }\n                        }\n                    };\n                    if (editDashboardScope.iconConfiguration.iconType === 'image') {\n                        editDashboardScope.iconConfiguration.file = model.icon;\n                        editDashboardScope.iconConfiguration.url = model.icon;\n                    }\n                    editDashboardScope.imageSelected = function(file) {\n                        if (file) {\n                            editDashboardScope.iconConfiguration.file = file;\n                            Upload.base64DataUrl(file).then(\n                                function(url) {\n                                    editDashboardScope.iconConfiguration.url = url;\n                                    editDashboardScope.iconConfiguration.file = url;\n                                    editDashboardScope.iconConfiguration.iconType = 'image';\n\n                                });\n                        } else {\n                            editDashboardScope.removeDataFile();\n                        }\n                    };\n                    editDashboardScope.backgroundImageSelected = function(file) {\n                        if (file) {\n                            editDashboardScope.iconConfiguration.file = file;\n                            Upload.base64DataUrl(file).then(\n                                function(url) {\n                                    editDashboardScope.copy.backgroundImage = url;\n                                    editDashboardScope.copy.file = url;\n\n                                });\n                        } else {\n                            editDashboardScope.removeBackgroundFile();\n                        }\n                    };\n                    editDashboardScope.removeDataFile = function() {\n                        editDashboardScope.iconConfiguration.file = null;\n                        editDashboardScope.iconConfiguration.url = null;\n                    };\n                    editDashboardScope.removeBackgroundFile = function() {\n                        editDashboardScope.copy.backgroundImage = null;\n                        editDashboardScope.copy.file = null;\n\n                    };\n\n                    var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\n                    if (model.editTemplateUrl) {\n                        adfEditTemplatePath = model.editTemplateUrl;\n                    }\n                    var instance = $uibModal.open({\n                        scope: editDashboardScope,\n                        templateUrl: adfEditTemplatePath,\n                        backdrop: 'static',\n                        keyboard: false,\n                        size: 'lg'\n                    });\n\n\n                    editDashboardScope.closeDialog = function(cancelChanges) {\n                        if (!cancelChanges) {\n                            // copy the new title back to the model\n                            model.title = editDashboardScope.copy.title;\n                            model.description = editDashboardScope.copy.description;\n                            if (editDashboardScope.iconConfiguration.model === 'image') {\n                                model.icon = editDashboardScope.iconConfiguration.url;\n\n                            } else if (editDashboardScope.iconConfiguration.model === 'icon') {\n                                model.icon = (editDashboardScope.iconConfiguration.icon && editDashboardScope.iconConfiguration.icon.key) || editDashboardScope.iconConfiguration.icon;\n\n                            }\n                            model.iconType = editDashboardScope.iconConfiguration.model;\n                            model.backgroundColor = editDashboardScope.copy.backgroundColor ? editDashboardScope.copy.backgroundColor : undefined;\n                            model.backgroundImage = editDashboardScope.copy.backgroundImage ? editDashboardScope.copy.backgroundImage : undefined;\n                            model.backgroundImageSize = editDashboardScope.backgroundSize.model;\n                            model.extraConfig = editDashboardScope.copy.extraConfig ? editDashboardScope.copy.extraConfig : undefined;\n\n                            $rootScope.$broadcast('adfDashboardInternalConfigChanged', model);\n                        } else {\n                            console.warn('Dashboard config cancelled by user');\n                        }\n\n                        // close modal and destroy the scope\n                        instance.close();\n                        editDashboardScope.$destroy();\n                    };\n                };\n\n                var adfOpenWidgetFromOther = $scope.$on('adfOpenWidgetFromOther', function(event, widget, config) {\n                    var internal_config = createConfiguration(widget);\n                    var _config = angular.merge({}, internal_config, config || {});\n                    var w = {\n                        type: widget,\n                        config: _config,\n                        title: _config.title\n                    };\n                    addNewWidgetToModel(model, w, name, !$scope.editMode);\n                });\n\n                var adfOpenModalWidgetFromOther = $scope.$on('adfOpenModalWidgetFromOther', function(event, widgetType, config, origScope) {\n                    var templateUrl = adfTemplatePath + 'widget-fullscreen.html';\n                    var _config = config || {};\n                    if (_config.sendSelection) {\n                        templateUrl = adfTemplatePath + 'widget-fullscreen-selection.html';\n                    }\n\n                    var fullScreenScope;\n                    if (!origScope) {\n                        var widget = createWidget(widgetType);\n                        widget.config = angular.merge({}, widget.config, _config);\n                        widget.type = widgetType;\n                        if (widget.config.title) {\n                            widget.title = widget.config.title;\n                        }\n\n                        fullScreenScope = $scope.$new();\n                        fullScreenScope.definition = fullScreenScope.widget = widget;\n                    } else {\n                        fullScreenScope = origScope;\n                    }\n\n                    var opts = {\n                        scope: fullScreenScope,\n                        templateUrl: templateUrl,\n                        size: fullScreenScope.definition.modalSize || 'el',\n                        backdrop: 'static',\n                        windowClass: (fullScreenScope.definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n                    };\n\n                    if ($scope.model && !$scope.model.temporal) {\n                        fullScreenScope.persistDashboard = function() {\n                            $rootScope.$broadcast('adfOpenWidgetFromOther', this.$parent.widget.type, this.$parent.widget.config || {});\n                            this.closeDialog();\n                        };\n                    }\n\n                    var instance = $uibModal.open(opts);\n                    fullScreenScope.closeDialog = function() {\n                        instance.close();\n                        if (!origScope) {\n                            fullScreenScope.$destroy();\n                        } else {\n                            fullScreenScope.reload();\n                        }\n                    };\n                });\n\n                var adfAddWidgetDialog = $scope.$on('adfAddWidgetDialog', function(event) {\n                    if (!model.temporal && model.editable) {\n                        if (!$scope.editMode) {\n                            $scope.editMode = true;\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\n                            $rootScope.$broadcast('adfIsEditMode');\n                        }\n\n                        $scope.addWidgetDialog();\n                    }\n                });\n\n                // add widget dialog\n                $scope.addScopeCfg = {\n                    widgetFilter: {},\n                    widgetSortingDirection: '',\n                    widgetSorting: 'priority'\n                };\n\n                $scope.addWidgetDialog = function() {\n                    var addScope = getNewModalScope();\n                    var widgets;\n                    if (angular.isFunction(widgetFilter)) {\n                        widgets = {};\n                        angular.forEach(dashboard.widgets, function(widget, type) {\n                            if (widgetFilter(widget, type, model)) {\n                                widgets[type] = widget;\n                            }\n                        });\n                    } else {\n                        widgets = dashboard.widgets;\n                    }\n                    addScope.widgets = widgets;\n\n                    angular.forEach(addScope.widgets, function(widget, type) {\n                        widget.key = type;\n                        if (!widget.category) {\n                            widget.category = 'ADF.CATEGORY.MISCELLANEOUS';\n                        }\n                    });\n\n                    // pass createCategories function to scope, if categories option is enabled\n                    if ($scope.options.categories) {\n                        addScope.createCategories = createCategories;\n                    } else {\n                        addScope.availableCategories = createCategoriesList(widgets);\n                    }\n\n                    var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\n                    if (model.addTemplateUrl) {\n                        adfAddTemplatePath = model.addTemplateUrl;\n                    }\n\n                    var opts = {\n                        scope: addScope,\n                        templateUrl: adfAddTemplatePath,\n                        backdrop: 'static',\n                        size: 'lg'\n                    };\n\n                    var instance = $uibModal.open(opts);\n\n                    addScope.widgetFilterCfg = $scope.addScopeCfg;\n\n                    addScope.addWidget = function(widget) {\n                        var w = {\n                            type: widget,\n                            Ftype: dashboard.widgets[widget].Ftype || null,\n                            config: createConfiguration(widget)\n                        };\n                        addNewWidgetToModel(model, w, name);\n                        // close and destroy\n                        instance.close();\n                        addScope.$destroy();\n\n                        // check for open edit mode immediately\n                        if (isEditModeImmediate(widget)) {\n                            openEditMode($scope, w);\n                        }\n                    };\n\n                    addScope.changeThumbnail = function(widget) {\n                        if (widget.images) {\n                            if (angular.isUndefined(widget._currThumb)) {\n                                widget._currThumb = 1;\n                            } else {\n                                widget._currThumb += 1;\n                            }\n\n\n                            if (widget._currThumb >= widget.images.length) {\n                                widget._currThumb = 0;\n                            }\n\n                            widget._currImg = widget.images[widget._currThumb];\n                        }\n                    };\n\n                    addScope.closeDialog = function() {\n                        // close and destroy\n                        instance.close();\n                        addScope.$destroy();\n                    };\n                };\n\n                $scope.addNewWidgetToModel = addNewWidgetToModel;\n\n                $scope.$on('destroy', function() {\n                    adfLaunchSearchingFromWidget();\n                    adfWindowTimeChangedFromWidget();\n                    adfToggleEditMode();\n                    adfOpenWidgetFromOther();\n                    adfOpenModalWidgetFromOther();\n                    adfCancelEditMode();\n                    adfAddWidgetDialog();\n                    adfEditDashboardDialog();\n                    adfWidgetRemoved();\n                    adfWidgetRemovedAndSave();\n                });\n            },\n            link: function($scope, $element, $attr) {\n                // pass options to scope\n                var options = {\n                    name: $attr.name,\n                    editable: true,\n                    enableConfirmDelete: stringToBoolean($attr.enableConfirmDelete),\n                    maximizable: stringToBoolean($attr.maximizable),\n                    collapsible: stringToBoolean($attr.collapsible),\n                    categories: stringToBoolean($attr.categories),\n                    extraData: {}\n                };\n\n                if (angular.isDefined($attr.editable)) {\n                    options.editable = stringToBoolean($attr.editable);\n                }\n\n                if (angular.isDefined($scope.extraData)) {\n                    options.extraData = $scope.extraData;\n                }\n\n                options.extraData.editing = $scope.editMode;\n\n                $scope.options = options;\n            },\n            templateUrl: adfTemplatePath + 'dashboard.html'\n        };\n    });","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the 'Software'), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/* global angular */\nangular.module('adf')\n    .directive('adfDashboardGrid', function(adfTemplatePath) {\n        'use strict';\n\n        var gridOptions = {\n            cellHeight: 145,\n            verticalMargin: 10,\n            animate: true,\n            float: false,\n            alwaysShowResizeHandle: true,\n            minWidth: 768,\n            auto: true,\n            resizable: {\n                handles: 'e, se, s, sw, w'\n            },\n            disableDrag: true,\n            disableResize: true\n        };\n\n        function preLink($scope) {\n            gridOptions.disableDrag = !$scope.editMode;\n            gridOptions.disableResize = !$scope.editMode;\n            $scope.gridOptions = gridOptions;\n\n            $scope.gsHandler = null;\n        }\n\n        return {\n            restrict: 'E',\n            scope: {\n                adfModel: '=',\n                editMode: '=',\n                continuousEditMode: '=',\n                options: '='\n            },\n            templateUrl: adfTemplatePath + 'dashboard-grid.html',\n            compile: function() {\n                return {\n                    pre: preLink,\n                };\n            },\n            controller: function($scope, $timeout) {\n                var dashEvents = [];\n                dashEvents.push($scope.$on('adfIsEditMode', function() {\n                    $timeout(function() {\n                        $scope.gsHandler.enable();\n                    }, 100);\n                }));\n\n                dashEvents.push($scope.$on('adfDashboardChanged', function() {\n                    $timeout(function() {\n                        $scope.gsHandler.disable();\n                    }, 100);\n                }));\n\n                dashEvents.push($scope.$on('adfDashboardEditsCancelled', function($event, name, model) {\n                    if (model && model.extraConfig) {\n                        if (angular.isNumber(model.extraConfig.cellHeight)) {\n                            $scope.gsHandler.cellHeight(model.extraConfig.cellHeight);\n                        }\n                    }\n\n                    $timeout(function() {\n                        $scope.gsHandler.disable();\n                    }, 100);\n                }));\n\n                dashEvents.push($scope.$on('adfDashboardInternalConfigChanged', function($event, newModel) {\n                    if (newModel && newModel.extraConfig) {\n                        if (angular.isNumber(newModel.extraConfig.cellHeight)) {\n                            $scope.gsHandler.cellHeight(newModel.extraConfig.cellHeight);\n                        }\n                    }\n                }));\n\n                dashEvents.push($scope.$on('adfCancelEditMode', function() {\n                    $timeout(function() {\n                        $scope.gsHandler.disable();\n                    }, 100);\n                }));\n\n                dashEvents.push($scope.$on('adfWidgetAdded', function(event) {\n                    $timeout(function() {\n                        $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\n                        $scope.gsHandler.enable();\n                    }, 100);\n                }));\n\n                $scope.onChange = function(event, items) {\n                    //console.log('onChange event: ' + event + ' items:' + items);\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\n                };\n\n                // $scope.onDragStart = function(event, ui) {\n                //     console.log('onDragStart event: ' + event + ' ui:' + ui);\n                // };\n\n                $scope.onDragStop = function(event, ui) {\n                    console.log('onDragStop event: ' + event + ' ui:' + ui);\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\n                };\n\n                // $scope.onResizeStart = function(event, ui) {\n                //     console.log('onResizeStart event: ' + event + ' ui:' + ui);\n                // };\n\n                $scope.onResizeStop = function(event, ui) {\n                    console.log('onResizeStop event: ' + event + ' ui:' + ui);\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\n                    $scope.$broadcast('OnResizeWidget');\n                };\n\n                // $scope.onItemAdded = function(item) {\n                //     console.log('onItemAdded item: ' + item);\n                // };\n\n                // $scope.onItemRemoved = function(item) {\n                //     console.log('onItemRemoved item: ' + item);\n                // };\n\n                if ($scope.adfModel && $scope.adfModel.extraConfig) {\n                    if (angular.isNumber($scope.adfModel.extraConfig.cellHeight)) {\n                        gridOptions.cellHeight = $scope.adfModel.extraConfig.cellHeight;\n                    }\n                }\n\n                $scope.$on('$destroy', function() {\n                    dashEvents.forEach(function(dashEvt) {\n                        dashEvt();\n                    });\n                });\n            }\n        };\n    });","/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .filter('adfOrderByObjectKey', function($filter) {\n    'use strict';\n\n    return function(item, key){\n      var array = [];\n      angular.forEach(item, function(value, objectKey){\n        value[key] = objectKey;\n        array.push(value);\n      });\n      return $filter('orderBy')(array, key);\n    };\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\n/**\n * @ngdoc object\n * @name adf.dashboardProvider\n * @description\n *\n * The dashboardProvider can be used to register widgets.\n */\nangular.module('adf.provider', [])\n    .provider('dashboard', function () {\n\n        var widgets = {};\n        var widgetsPath = '';\n        var messageTemplate = '<div class=\"alert alert-primary\">{}</div>';\n        var loadingTemplate = '\\\n      <div class=\"progress progress-striped active\">\\n\\\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\n          <span class=\"sr-only\" translate>FORM.MSG.LOADING ...</span>\\n\\\n        </div>\\n\\\n      </div>';\n        var customWidgetTemplatePath = null;\n\n        // default apply function of widget.edit.apply\n        var defaultApplyFunction = function () {\n            return true;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#widget\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Registers a new widget.\n         *\n         * @param {string} name of the widget\n         * @param {object} widget to be registered.\n         *\n         *   Object properties:\n         *\n         *   - `title` - `{string=}` - The title of the widget.\n         *   - `description` - `{string=}` - Description of the widget.\n         *   - `category` - `{string=}` - Category of the widget.\n         *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\n         *   - `config` - `{object}` - Predefined widget configuration.\n         *   - `controller` - `{string=|function()=}` - Controller fn that should be\n         *      associated with newly created scope of the widget or the name of a\n         *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\n         *      if passed as a string.\n         *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\n         *      published to scope under the `controllerAs` name.\n         *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\n         *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\n         *   - `template` - `{string=|function()=}` - html template as a string.\n         *   - `templateUrl` - `{string=}` - path to an html template.\n         *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\n         *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n         *      be injected into the controller. If any of these dependencies are promises, the widget\n         *      will wait for them all to be resolved or one to be rejected before the controller is\n         *      instantiated.\n         *      If all the promises are resolved successfully, the values of the resolved promises are\n         *      injected.\n         *\n         *      The map object is:\n         *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n         *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n         *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\n         *        and the return value is treated as the dependency. If the result is a promise, it is\n         *        resolved before its value is injected into the controller.\n         *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n         *      on the scope of the widget.\n         *   - `edit` - `{object}` - Edit modus of the widget.\n         *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n         *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\n         *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n         *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\n         *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\n         *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n         *        on the scope of the widget.\n         *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\n         *        Default is true.\n         *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\n         *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\n         *        The function have to return a boolean or an promise which can be resolved to a boolean.\n         *        The function can use injection.\n         *\n         * @returns {Object} self\n         */\n        this.widget = function (name, widget) {\n            var w = angular.extend({\n                reload: false,\n                frameless: false\n            }, widget);\n            if (w.edit) {\n                var edit = {\n                    reload: true,\n                    immediate: false,\n                    apply: defaultApplyFunction\n                };\n                angular.extend(edit, w.edit);\n                w.edit = edit;\n            }\n            //OUW-1610\n            if (!w.config) {\n                w.config = {};\n            }\n            widgets[name] = w;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#widgetsPath\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Sets the path to the directory which contains the widgets. The widgets\n         * path is used for widgets with a templateUrl which contains the\n         * placeholder {widgetsPath}. The placeholder is replaced with the\n         * configured value, before the template is loaded, but the template is\n         * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\n         * The default value of widgetPaths is ''.\n         *\n         *\n         * @param {string} path to the directory which contains the widgets\n         *\n         * @returns {Object} self\n         */\n        this.widgetsPath = function (path) {\n            widgetsPath = path;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#messageTemplate\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the template for messages.\n         *\n         * @param {string} template for messages.\n         *\n         * @returns {Object} self\n         */\n        this.messageTemplate = function (template) {\n            messageTemplate = template;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#loadingTemplate\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the template which is displayed as\n         * long as the widget resources are not resolved.\n         *\n         * @param {string} template loading template\n         *\n         * @returns {Object} self\n         */\n        this.loadingTemplate = function (template) {\n            loadingTemplate = template;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#customWidgetTemplatePath\n         * @propertyOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the container template for the widgets\n         *\n         * @param {string} path to the custom widget template\n         *\n         * @returns {Object} self\n         */\n        this.customWidgetTemplatePath = function (templatePath) {\n            customWidgetTemplatePath = templatePath;\n            return this;\n        };\n\n        /**\n         * @ngdoc service\n         * @name adf.dashboard\n         * @description\n         *\n         * The dashboard holds all options and  widgets.\n         *\n         * @property {Array.<Object>} widgets Array of registered widgets.\n         * @property {string} widgetsPath Default path for widgets.\n         * @property {string} messageTemplate Template for messages.\n         * @property {string} loadingTemplate Template for widget loading.\n         * * @property {string} customWidgetTemplatePath Changes the container template for the widgets\n         *\n         * @returns {Object} self\n         */\n        this.$get = function () {\n            var cid = 0;\n\n            return {\n                widgets: widgets,\n                widgetsPath: widgetsPath,\n                messageTemplate: messageTemplate,\n                loadingTemplate: loadingTemplate,\n                customWidgetTemplatePath: customWidgetTemplatePath,\n\n                /**\n                 * @ngdoc method\n                 * @name adf.dashboard#id\n                 * @methodOf adf.dashboard\n                 * @description\n                 *\n                 * Creates an ongoing numeric id. The method is used to create ids for\n                 * columns and widgets in the dashboard.\n                 */\n                id: function () {\n                    return new Date().getTime() + '-' + (++cid);\n                },\n\n                /**\n                 * @ngdoc method\n                 * @name adf.dashboard#idEqual\n                 * @methodOf adf.dashboard\n                 * @description\n                 *\n                 * Checks if the given ids are equal.\n                 *\n                 * @param {string} id widget or column id\n                 * @param {string} other widget or column id\n                 */\n                idEquals: function (id, other) {\n                    // use toString, because old ids are numbers\n                    return ((id) && (other)) && (id.toString() === other.toString());\n                }\n            };\n        };\n\n    });","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf')\n    .directive('adfWidgetContent', function($log, $q, widgetService,\n        $compile, $controller, $injector, dashboard, $translate) {\n\n        function renderError($element, msg) {\n            $log.warn(msg);\n            $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\n        }\n\n        function compileWidget($scope, $element, currentScope, configChanged) {\n            var model = $scope.model;\n            if (!model) {\n                $translate('ADF.ERROR.MODEL_IS_UNDEFINED').then(function(translateMessage) {\n                    renderError($element, translateMessage);\n                });\n                return currentScope;\n            }\n\n            var content = $scope.content;\n\n            if (!content) {\n                $translate('ADF.ERROR.WIDGET_FOR_DEPRECTATED', {\n                    title: model.title\n                }).then(function(translateMessage) {\n                    renderError($element, translateMessage);\n                });\n                return currentScope;\n            }\n\n            var extra = $scope.extra;\n            var newScope = currentScope;\n\n            if (newScope) {\n                var is_menu = newScope.menu !== undefined && newScope.menu !== null && (!newScope.isPaginationEnable || !newScope.isPaginationEnable());\n                if (is_menu || configChanged || !angular.isFunction(newScope.reloadData)) {\n                    if ($scope.navOptionsHandler) {\n                        $scope.navOptionsHandler.firstLoad = true;\n                    }\n                    newScope = renderWidget($scope, $element, currentScope, model, content, extra);\n                } else {\n                    var is_itemsPerPage = newScope.itemsPerPage !== undefined && newScope.itemsPerPage !== null;\n                    if (is_itemsPerPage || newScope.page) {\n                        newScope.page = 1;\n                    }\n                    newScope.reloadData();\n                }\n            } else {\n                if ($scope.navOptionsHandler) {\n                    $scope.navOptionsHandler.firstLoad = true;\n                }\n\n                newScope = renderWidget($scope, $element, currentScope, model, content, extra);\n            }\n\n            function _getWindowTime(type) {\n                if (type === 'custom') {\n                    return {\n                        from: newScope.config.windowFilter.from,\n                        to: newScope.config.windowFilter.to\n                    };\n                } else if (type === 'today') {\n                    return {\n                        from: window.moment().startOf('day')\n                    };\n                }\n                var from = window.moment().startOf('day').subtract(1, type);\n                return {\n                    from: from._d\n                };\n            }\n\n\n\n            newScope.config.getWindowTime = function() {\n                var windowFilter = newScope.config.windowFilter;\n                if (windowFilter && windowFilter.type) {\n                    var winTime = _getWindowTime(windowFilter.type);\n                    /* jshint ignore:start */\n                    if (!window.eval(newScope.config.windowFilter.rawdate)) {\n                        for (var key in winTime) {\n                            winTime[key] = window.moment(winTime[key]).format();\n                        }\n                        winTime['rawdate'] = true;\n                    }\n                    /* jshint ignore:end */\n                    return winTime;\n                }\n            };\n\n            if (extra) {\n                newScope.editing = extra.editing ? true : false;\n                newScope.extraData = extra;\n            }\n\n            return newScope;\n        }\n\n        function renderWidget($scope, $element, currentScope, model, content, extra) {\n            // display loading template\n            $element.html(dashboard.loadingTemplate);\n\n            // create new scope\n            var templateScope = $scope.$new();\n\n            // pass config object to scope\n            if (!model.config) {\n                model.config = {};\n            }\n\n            templateScope.config = model.config;\n            templateScope.editing = extra && extra.editing;\n\n            if (extra) {\n                templateScope.extra = extra;\n            }\n\n            var _from = currentScope || templateScope.config;\n            templateScope.selectionManager = (_from) ? _from.selectionManager : undefined;\n\n            // local injections\n            var base = {\n                $scope: templateScope,\n                widget: model,\n                config: model.config\n            };\n\n            // get resolve promises from content object\n            var resolvers = {};\n            resolvers.$tpl = widgetService.getTemplate(content);\n            if (content.resolve) {\n                angular.forEach(content.resolve, function(promise, key) {\n                    if (angular.isString(promise)) {\n                        resolvers[key] = $injector.get(promise);\n                    } else {\n                        resolvers[key] = $injector.invoke(promise, promise, base);\n                    }\n                });\n            }\n\n            // resolve all resolvers\n            $q.all(resolvers).then(function(locals) {\n                angular.extend(locals, base);\n\n                // pass resolve map to template scope as defined in resolveAs\n                if (content.resolveAs) {\n                    templateScope[content.resolveAs] = locals;\n                }\n\n                // compile & render template\n                var template = locals.$tpl;\n                $element.html(template);\n                if (content.controller) {\n                    var templateCtrl = $controller(content.controller, locals);\n                    if (content.controllerAs) {\n                        templateScope[content.controllerAs] = templateCtrl;\n                    }\n                    $element.children().data('$ngControllerController', templateCtrl);\n                }\n                $compile($element.contents())(templateScope);\n            }, function(reason) {\n                // handle promise rejection\n                var msg = 'ADF.ERROR.COULD_NOT_RESOLVE_ALL_PROMISSES';\n                $translate(msg, {\n                    reason: (reason ? ': ' + reason : reason)\n                }).then(function(translateMessage) {\n                    renderError($element, translateMessage);\n                });\n            });\n\n            // destroy old scope\n            if (currentScope) {\n                currentScope.$destroy();\n            }\n\n            return templateScope;\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            require: '?^^adfWidgetGrid',\n            scope: {\n                model: '=',\n                content: '=',\n                extra: '=',\n                navOptionsHandler: '=?',\n                filterHandler: '=?',\n                widgetActionsHandler: '=?'\n            },\n            link: function($scope, $element, attrs, adfWidgetGridCtrl) {\n                var currentScope = compileWidget($scope, $element, null);\n                if (adfWidgetGridCtrl) {\n                    $scope.search = $scope.search || {};\n                    adfWidgetGridCtrl.updateWidgetFilters($scope.model.config.filter && $scope.model.config.filter.id);\n                }\n\n                var widgetConfigChangedEvt = $scope.$on('widgetConfigChanged', function(event, changeWidgets) {\n                    if (changeWidgets) {\n                        if (changeWidgets.indexOf($scope.model.wid) !== -1 && adfWidgetGridCtrl) {\n                            adfWidgetGridCtrl.updateWidgetFilters($scope.model.config.filter && $scope.model.config.filter.id, true);\n                        }\n                    } else {\n                        currentScope = compileWidget($scope, $element, currentScope, true);\n                    }\n                });\n\n                var widgetReloadEvt = $scope.$on('widgetReload', function(event, reloadWidgets) {\n                    var reloadWidget = true;\n                    if (reloadWidgets && reloadWidgets.length > 0) {\n                        reloadWidget = reloadWidgets.indexOf($scope.model.wid) !== -1;\n                    }\n                    if (reloadWidget) {\n                        currentScope = compileWidget($scope, $element, currentScope, false);\n                        if (adfWidgetGridCtrl && adfWidgetGridCtrl.updateWidgetFilters) {\n                            adfWidgetGridCtrl.updateWidgetFilters($scope.model.config.filter && $scope.model.config.filter.id);\n                        }\n                    }\n                });\n\n                $scope.$on('destroy', function() {\n                    widgetConfigChangedEvt();\n                    widgetReloadEvt();\n                });\n            }\n        };\n    });","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/**\n * The widget service provide helper functions to render widgets and their content.\n */\nangular.module('adf')\n    .factory('widgetFilter', function() {\n        'use strict';\n\n        var launchSearchingAdv = function($scope) {\n            //modificas\n            //$scope.filter.typeFilter = 0;\n\n\n            var advancedFilterScope = $scope.$new();\n            var advancedFilterTemplate = adfTemplatePath + 'widget-advanced-filter.html';\n            var opts = {\n                scope: advancedFilterScope,\n                templateUrl: advancedFilterTemplate,\n                backdrop: 'static',\n                size: 'lg',\n                animation: true\n            };\n        }\n\n\n        return {\n            launchSearchingAdv: launchSearchingAdv\n        };\n    });","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf')\n    .directive('adfWidgetGrid', function($injector, $q, $log, $uibModal, $rootScope, $interval, dashboard, adfTemplatePath, Filter, queryService, $timeout, $api, toastr, $translate) {\n        var _setFilterType = function(selectFilter, $scope) {\n            var config = $scope.config || {};\n            var filter = config.filter = config.filter ? config.filter : {};\n            var id = filter.id = selectFilter && filter.id;\n            filter.headersFilter = selectFilter && filter.headersFilter;\n\n            if (!$scope.filter) {\n                $scope.filter = {};\n            }\n            switch (filter.type) {\n                case 'advanced':\n                    $scope.filter.typeFilter = id ? 2 : 0;\n                    $scope.search = {\n                        oql: filter.oql,\n                        json: filter.value,\n                        queryAsString: filter.queryAsString || '',\n                        queryFields: filter.queryFields || undefined\n                    };\n                    break;\n                case 'basic':\n                    $scope.filter.typeFilter = id ? 2 : 1;\n                    $scope.search = {\n                        quick: filter.value\n                    };\n\n                    break;\n                default:\n                    $scope.filter.typeFilter = id ? 2 : 1;\n                    $scope.search = {\n                        quick: filter.value = ''\n                    };\n                    break;\n            }\n            $scope.search.id = selectFilter;\n        };\n\n        function preLink($scope) {\n            var definition = $scope.definition;\n\n            if (definition) {\n                var w = dashboard.widgets[definition.type];\n                if (w) {\n                    // pass title\n                    if (!definition.title) {\n                        definition.title = w.title;\n                    }\n\n                    definition.titleTemplateUrl = adfTemplatePath + 'widget-grid-title.html';\n\n                    if (!definition.editTemplateUrl) {\n                        definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\n                        if (w.editTemplateUrl) {\n                            definition.editTemplateUrl = w.editTemplateUrl;\n                        }\n                    }\n\n                    if (!definition.titleTemplateUrl) {\n                        definition.frameless = w.frameless;\n                    }\n\n                    if (!definition.styleClass) {\n                        definition.styleClass = w.styleClass;\n                    }\n\n                    // set id for sortable\n                    if (!definition.wid) {\n                        definition.wid = dashboard.id();\n                    }\n\n                    // pass copy of widget to scope\n                    $scope.widget = angular.copy(w);\n\n                    // create config object\n                    var config = definition.config;\n                    if (config) {\n                        if (angular.isString(config)) {\n                            config = angular.fromJson(config);\n                        }\n                    } else {\n                        config = {};\n                    }\n                    // pass config to scope\n                    $scope.config = config;\n\n                    if (typeof $scope.widget.show_modal_footer === 'undefined') {\n                        $scope.widget.show_modal_footer = true;\n                    }\n\n                    if (typeof $scope.widget.show_reload_config === 'undefined') {\n                        $scope.widget.show_reload_config = true;\n                    }\n\n                    // collapse exposed $scope.widgetState property\n                    if (!$scope.widgetState) {\n                        $scope.widgetState = {};\n                        $scope.widgetState.isCollapsed = (w.collapsed === true) ? w.collapsed : false;\n                    }\n\n                } else {\n                    $log.warn('could not find widget ' + definition.type);\n                }\n            } else {\n                $log.debug('definition not specified, widget was probably removed');\n            }\n        }\n\n        function postLink($scope, $element) {\n            var definition = $scope.definition;\n            if (!definition) {\n                $log.debug('widget not found');\n                return;\n            }\n            var config = $scope.config || {};\n\n            // bind close function\n            var deleteWidget = function() {\n                $element.remove();\n                $rootScope.$broadcast('adfWidgetRemovedFromGrid', definition);\n            };\n\n            $scope.remove = function() {\n                if ($scope.options.enableConfirmDelete) {\n                    var deleteScope = $scope.$new();\n\n                    var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\n                    if (definition.deleteTemplateUrl) {\n                        deleteTemplateUrl = definition.deleteTemplateUrl;\n                    }\n                    var opts = {\n                        scope: deleteScope,\n                        templateUrl: deleteTemplateUrl,\n                        backdrop: 'static'\n                    };\n                    var instance = $uibModal.open(opts);\n\n                    deleteScope.closeDialog = function() {\n                        instance.close();\n                        deleteScope.$destroy();\n                    };\n                    deleteScope.deleteDialog = function() {\n                        deleteWidget();\n                        deleteScope.closeDialog();\n                    };\n                } else {\n                    deleteWidget();\n                }\n            };\n\n\n            $scope.print = function() {\n                if (!$scope.editMode) {\n                    $scope.$broadcast('widgetPrint');\n                }\n            };\n\n            $scope.isExecuteOperationEnabled = function() {\n\n                if (config.entityKey)\n                    return true;\n                var filter = config.filter;\n\n                if (filter) {\n                    if (filter.headersFilter && filter.headersFilter.length > 0) {\n                        return true;\n                    } else {\n                        if (filter.type === 'basic') {\n                            return filter.value && filter.value.length > 0;\n                        }\n                        if (filter.type === 'advanced') {\n                            return filter.value && filter.value.length > 2 && filter.oql;\n                        }\n                    }\n                }\n\n                return false;\n            };\n\n            $scope.executeOperation = function() {\n                if (!$scope.editMode) {\n\n                    $scope.$parent.$broadcast('widgetExecuteOperation');\n                }\n            };\n\n            _setFilterType('init', $scope);\n\n            $scope.launchSearching = function() {\n                if ($scope.widget && !$scope.widget.preventRefreshFilterEvent) {\n                    var widget = {\n                        definition: definition,\n                        element: $element\n                    };\n\n                    $rootScope.$broadcast('adfLaunchSearchingFromWidget', widget, $scope.config.filter);\n                }\n\n                $scope.reload();\n            };\n\n            $scope.launchSearchingAdv = function() {\n                $scope.filter.typeFilter = 0;\n\n                var advancedFilterScope = $scope.$new();\n                var advancedFilterTemplate = adfTemplatePath + 'widget-advanced-filter.html';\n                var opts = {\n                    scope: advancedFilterScope,\n                    templateUrl: advancedFilterTemplate,\n                    backdrop: 'static',\n                    size: 'lg',\n                    animation: true\n                };\n                advancedFilterScope.fieldsSearch = { selected: [] };\n                advancedFilterScope.datastreamsSearch = { selected: [] };\n\n                // advancedFilterScope.model = {};\n                advancedFilterScope.enableApply = false;\n                advancedFilterScope.evaluating = false;\n\n                advancedFilterScope.type = $scope.definition.Ftype\n                if ($scope.search.queryFields) {\n                    $scope.search.queryFields.forEach(function(item) {\n                        advancedFilterScope.fieldsSearch.selected.push(item.name);\n                        advancedFilterScope.datastreamsSearch.selected.push({ identifier: item.name });\n\n                    });\n                }\n                advancedFilterScope.addextraElements = function(field) {\n                    if (field.name === 'provision.device.location') {\n                        field.existsOptions = ['true', 'false']\n                        field.disabledComparators = []\n                    } else {\n                        field.disabledComparators = [\n                            8\n                        ];\n                    }\n                   field.existsOptions = ['true', 'false'];\n                   if ($scope.definition.Ftype === 'entities' || $scope.definition.Ftype === 'tickets'){\n                    field.dsOptions = ['', '._current.value',\n                        '._current.source',\n                        '._current.at',\n                        '._current.date',\n                        '._current.provType',\n                        '.scoring.performance',\n                        '.scoring.qrating.version',\n                        '.scoring.qrating.max_score',\n                        '.scoring.qrating.ideal.value',\n                        '.scoring.qrating.ideal.label',\n                        '.scoring.qrating.max_desired.value',\n                        '.scoring.qrating.max_desired.label',\n                        '.scoring.qrating.max_allowed.value',\n                        '.scoring.qrating.max_allowed.label',\n                        '.scoring.qrating.min_desired.value',\n                        '.scoring.qrating.min_desired.label',\n                        '.scoring.qrating.min_required.value',\n                        '.scoring.qrating.min_required.label',\n                    ];\n                }\n                    field.schemaForm = {\n                        type: \"object\",\n                        properties: {\n                            data: field.schema\n                        }\n                    };\n                    field.form = [{\n                        key: 'data',\n                        notitle: true,\n                        fieldHtmlClass:field.schemaName\n                    }];\n                    return field;\n                }\n                advancedFilterScope.removeextraElements = function(field) {\n                    delete field.existsOptions;\n                    delete field.dsOptions;\n                    delete field.form;\n                    delete field.schemaForm;\n                    delete field.model;\n                    return field;\n                }\n\n\n                advancedFilterScope.fields = $scope.search.queryFields ? $scope.search.queryFields.map(function(field) { return advancedFilterScope.addextraElements(field) }) : [];\n\n                if ($scope.definition.Ftype === 'entities' || $scope.definition.Ftype === 'tickets') {\n                    advancedFilterScope.comparators = [\n                        { id: 1, name: 'eq', value: '=', dataTemplate: '../src/templates/input-template.html', defaultData: [] },\n                        { id: 2, name: 'neq', value: '!=', dataTemplate: '../src/templates/input-template.html', defaultData: [] },\n                        { id: 3, name: 'like', value: '~', dataTemplate: '../src/templates/input-template.html', defaultData: [] },\n                        { id: 4, name: 'gt', value: '>', dataTemplate: '../src/templates/input-template.html', defaultData: [] },\n                        { id: 5, name: 'gte', value: '>=', dataTemplate: '../src/templates/input-template.html', defaultData: [] },\n                        { id: 6, name: 'lt', value: '<', dataTemplate: '../src/templates/input-template.html', defaultData: [] },\n                        { id: 7, name: 'lte', value: '<=', dataTemplate: '../src/templates/input-template.html', defaultData: [] },\n                        { id: 8, name: 'exists', value: '?', dataTemplate: '../src/templates/exist-template.html', defaultData: [] },\n                        { id: 9, name: 'in', value: '[]', dataTemplate: '../src/templates/in-template-entities.html', defaultData: [], dataType: 'array' },\n                    ];\n                    $api().basicTypesSearchBuilder().execute().then(function(response) {\n                        if (response.statusCode === 200) {\n                            advancedFilterScope.jsonSchemas = response.data.definitions;\n                        } else {\n                            advancedFilterScope.jsonSchemas = {};\n                        }\n                    }).catch(function(err) {\n                        advancedFilterScope.jsonSchemas = {};\n                        console.error(err);\n                    });\n                } else {\n                    advancedFilterScope.comparators = [\n                        { id: 1, name: 'eq', value: '=' },\n                        { id: 2, name: 'neq', value: '!=' },\n                        { id: 3, name: 'like', value: '~' },\n                        { id: 4, name: 'gt', value: '>' },\n                        { id: 5, name: 'gte', value: '>=' },\n                        { id: 6, name: 'lt', value: '<' },\n                        { id: 7, name: 'lte', value: '<=' },\n                        { id: 8, name: 'in', value: '[]', dataTemplate: '../src/templates/filter/in-template.html', defaultData: [], dataType: 'array' },\n                    ];\n                }\n\n                advancedFilterScope.elementSelected = function($item) {\n                    advancedFilterScope.fields.push(advancedFilterScope.addextraElements({\n                        id: Math.floor((Math.random() * 10000) + 1),\n                        name: $item\n                    }));\n                };\n\n                advancedFilterScope.onSelectDatastream = function($item) {\n                    var schemaName = ($item.schema && $item.schema.$ref) ? $item.schema.$ref.split('/').splice(-1)[0] : undefined;\n                    var schema = schemaName ? advancedFilterScope.jsonSchemas[schemaName] : ($item.schema ? $item.schema : undefined);\n                    delete schema.javaEnumNames;\n                    var objectSchema = {\n                        type: \"object\",\n                        properties: {\n                            data: schema\n                        }\n                    };   \n                    $timeout(function() {                 \n                        advancedFilterScope.fields.push(advancedFilterScope.addextraElements({\n                            id: Math.floor((Math.random() * 10000) + 1),\n                            name: $item.identifier,\n                            type: schema.type,\n                            schemaForm: objectSchema,\n                            schema: schema,\n                            form: [{\n                                key: 'data',\n                                notitle: true\n                            }],\n                            schemaName: schemaName\n                        }));\n                    },100);\n                };\n\n                advancedFilterScope.onDeleteDatastream = function($item) {\n                    advancedFilterScope.fields = advancedFilterScope.fields.filter(function(item) {\n                        return item.name !== $item.identifier\n                    });\n                };\n\n                advancedFilterScope.elementDeleted = function($item) {\n                    advancedFilterScope.fields = advancedFilterScope.fields.filter(function(item) {\n                        return item.name !== $item\n                    });\n                };\n\n                advancedFilterScope.clearFieldsSearch = function() {\n                    advancedFilterScope.advancedFilter_error = null\n                    advancedFilterScope.fields = [];\n                    advancedFilterScope.fieldsSearch = { selected: [] };\n                    advancedFilterScope.datastreamsSearch = { selected: [] };\n\n                };\n\n                advancedFilterScope.restoreSelection = function() {\n                    selectionScope.currentSelection = {\n                        selected: selectionScope.selectedItems\n                    };\n                };\n\n                advancedFilterScope.operators = [\n                    { name: 'and', value: '&&' },\n                    { name: 'or', value: '||' }\n\n                ];\n                advancedFilterScope.queryBuilderfilter = {\n                    group: { operator: advancedFilterScope.operators[0], rules: [] }\n\n                };\n                advancedFilterScope.settings = {\n                    nesting: true,\n                    addIconClass: ' glyphicon glyphicon-plus',\n                    removeIconClass: 'glyphicon glyphicon-trash',\n                    addButtonClass: 'btn btn-sm btn-primary',\n                    removeButtonClass: 'btn btn-sm btn-danger'\n                };\n                advancedFilterScope.queryAsString = $scope.search.queryAsString ? $scope.search.queryAsString : '';\n\n                advancedFilterScope.filterJson = {};\n                advancedFilterScope.advancedFilter_error = null;\n\n                advancedFilterScope.evaluateQuery = function() {\n                    try {\n                        advancedFilterScope.evaluating = true;       \n                        advancedFilterScope.oql = queryService.asReadableFilter(advancedFilterScope.queryBuilderfilter.group);\n                        advancedFilterScope.queryAsString = queryService.asStringFilter(advancedFilterScope.queryBuilderfilter.group);\n                        Filter.parseQuery(advancedFilterScope.oql || '')\n                            .then(function(data) {\n                                $timeout(function() {\n                                    advancedFilterScope.enableApply = true;\n                                    advancedFilterScope.evaluating = false;       \n                               });\n                                advancedFilterScope.filterJson = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\n                                advancedFilterScope.unknownWords = '';\n                                advancedFilterScope.advancedFilter_error = null;\n\n                            })\n                            .catch(function(err) {\n                                console.log(err);\n                                advancedFilterScope.advancedFilter_error = err;\n                                $timeout(function() {\n                                    advancedFilterScope.enableApply = false;\n                                    advancedFilterScope.evaluating = false;    \n                               });\n                                toastr.error($translate.instant('TOASTR.FILTER_IS_MALFORMED'));\n                            });\n                    } catch (err) {\n                        advancedFilterScope.advancedFilter_error = err;\n                        advancedFilterScope.enableApply = false;\n                        toastr.error($translate.instant('TOASTR.FILTER_IS_MALFORMED'));\n\n                    }\n                }\n\n                advancedFilterScope.applyQueryBuilderFilter = function() {\n                    var fields = angular.copy(advancedFilterScope.fields);\n                    $scope.config.filter = {\n                        type: 'advanced',\n                        oql: advancedFilterScope.oql ? advancedFilterScope.oql : '',\n                        queryAsString: advancedFilterScope.queryAsString,\n                        value: advancedFilterScope.filterJson || '',\n                        headersFilter: $scope.config.filter.headersFilter || undefined,\n                        queryFields: fields.length > 0 ? fields.map(function(field) {\n                            return advancedFilterScope.removeextraElements(field);\n                        }) : fields\n                    };\n                    var executeSearch = true;\n                    if (executeSearch) {\n                        $scope.launchSearching();\n                        $scope.filterApplied = true;\n                        advancedFilterScope.closeDialog();\n                    }\n                    else {\n                        advancedFilterScope.closeDialog();\n                    }\n\n                }\n                advancedFilterScope.$watch('queryBuilderfilter', function(newValue) {\n                    advancedFilterScope.enableApply = false;\n\n                }, true);\n\n                $scope.$on('clearFilter', function(index) {\n                    advancedFilterScope.enableApply = true;\n                });\n                advancedFilterScope.clearQuery = function() {\n                    delete advancedFilterScope.oql;\n                    delete advancedFilterScope.queryAsString;\n                    delete advancedFilterScope.json;\n\n                    advancedFilterScope.filterJson = undefined;\n                    advancedFilterScope.queryBuilderfilter = {\n                        group: { operator: advancedFilterScope.operators[0], rules: [] }\n                    };\n                    advancedFilterScope.clearFieldsSearch();\n                    $timeout(function() {\n                        advancedFilterScope.enableApply = true;\n                   });\n\n                }\n                var instance = $uibModal.open(opts);\n                // Cierra sin realizar ninguna acción\n                advancedFilterScope.closeDialog = function() {\n                    instance.close();\n                    advancedFilterScope.$destroy();\n                };\n\n                /*if (!$scope.filterApplied) {\n                    var executeSearch = true;\n                    $scope.search.quick = '';\n                    if ($scope.search.json === '' || $scope.search.json === '{}' || (!angular.isString($scope.search.json) && Object.keys($scope.search.json).length === 0)) {\n                        if ($scope.search.oql && $scope.search.oql.trim().length > 0) {\n                            toastr.error($translate.instant('TOASTR.FILTER_IS_MALFORMED'));\n                            executeSearch = false;\n                        } else {\n                            $scope.config.filter = {\n                                type: 'advanced',\n                                oql: '',\n                                value: ''\n                            };\n                        }\n                    } else {\n                        $scope.config.filter = {\n                            type: 'advanced',\n                            oql: $scope.search.oql,\n                            value: $scope.search.json,\n                            headersFilter: $scope.config.filter.headersFilter\n                        };\n                    }\n\n                    if (executeSearch) {\n                        $scope.launchSearching();\n                        $scope.filterApplied = true;\n                    }\n                }*/\n            };\n\n            $scope.launchSearchingQuick = function() {\n                if (!$scope.filterApplied) {\n                    if (!$scope.search) {\n                        $scope.search = {};\n                    }\n                    $scope.search.oql = $scope.search.json = '';\n                    $scope.config.filter = {\n                        type: 'basic',\n                        value: $scope.search.quick,\n                        headersFilter: $scope.config.filter.headersFilter\n                    };\n                    $scope.launchSearching();\n                    $scope.filterApplied = true;\n                }\n            };\n\n            $scope.launchSearchingShared = function() {\n                var shared = $scope.search.id;\n                if (shared) {\n                    shared.filter.id = shared.wid;\n                    $scope.config.filter = shared.filter;\n                } else {\n                    $scope.config.filter = {};\n                }\n                $scope.launchSearching();\n                $scope.filterApplied = true;\n            };\n\n            $scope.filterSharedSelect = function($item, $model) {\n                $scope.filterApplied = false;\n                $scope.launchSearchingShared();\n            };\n            $scope.filterSharedRemove = function($item, $model) {\n                $scope.filterApplied = false;\n            };\n\n            $scope.enter = function(event) {\n                var keycode = (event.keyCode ? event.keyCode : event.which);\n                if (keycode === 13) {\n                    if ($scope.filter.typeFilter === 0)\n                        $scope.launchSearchingAdv();\n                    if ($scope.filter.typeFilter === 1)\n                        $scope.launchSearchingQuick();\n                    if ($scope.filter.typeFilter === 2)\n                        $scope.launchSearchingShared();\n                } else if (keycode === 19) {\n                    $scope.filter.showFinalFilter = !$scope.filter.showFinalFilter;\n                } else {\n                    $scope.filterApplied = false;\n                }\n            };\n\n\n            $scope.customSelectors = [];\n            $scope.getCustomSelectors = function() {\n                if ($scope.config.customSelectors) {\n                    $scope.customSelectors = $scope.config.customSelectors;\n                } else {\n                    config.widgetSelectors().findFields('').then(function(fields) {\n                        $scope.customSelectors = fields;\n                        $scope.$apply();\n                    }).catch(function(err) {\n                        $log.error(err);\n                    });\n                }\n            };\n\n            $scope.changeDirection = function() {\n                var direction = config.sort.direction;\n                if (direction === 'DESCENDING') {\n                    $scope.config.sort.direction = 'ASCENDING';\n                } else if (direction === 'ASCENDING') {\n                    $scope.config.sort.direction = 'DESCENDING';\n                }\n                $scope.reload();\n            };\n\n            $scope.debugQuery = function() {\n                Filter.parseQuery($scope.search.oql || '')\n                    .then(function(data) {\n                        $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\n                        $scope.unknownWords = '';\n                        $scope.filter_error = null;\n                    })\n                    .catch(function(err) {\n                        $scope.filter_error = err;\n                        // Tratar el error\n                    });\n\n            };\n\n            $scope.autocomplete_options = function() {\n                var autocomplete_options = {\n                    suggest: Filter.suggest_field_delimited,\n                    customSelectors: config.widgetSelectors()\n                };\n\n                return autocomplete_options;\n\n            };\n\n            // Multiple selection\n            $scope.selectedItems = definition.selectedItems || {};\n\n            // Gestor de seleccion\n            $scope.selectionManager = {\n                currentSelection: $scope.selectedItems,\n                isSelected: function(key, obj) {\n                    if ($scope.selectedItems[key] && !angular.isUndefined(obj)) {\n                        $scope.selectedItems[key].data = obj;\n                    }\n\n                    return $scope.selectedItems[key] ? true : false;\n                },\n                totalSelected: function() {\n                    return Object.keys($scope.selectedItems).length;\n                }\n            };\n\n            if (definition.config.sendSelection) {\n\n                $scope.sendEntities = function() {\n                    definition.config.sendSelection($scope.selectedItems);\n                    $scope.$parent.closeDialog();\n                };\n\n                if (definition.config.selectedItems) {\n                    $scope.selectedItems = angular.copy(definition.config.selectedItems);\n                }\n\n                $scope.config.selectionManager = $scope.selectionManager;\n            }\n\n            $scope.manageSelectedItems = function() {\n                var selectionScope = $scope.$new();\n\n                if (definition.config.sendSelection) {\n                    delete config.selectionConfig.operationTypes;\n                    delete config.selectionConfig.filterTypes;\n                }\n\n                selectionScope.selectionConfig = config.selectionConfig;\n\n                selectionScope.selectedItems = [];\n                angular.forEach($scope.selectedItems, function(value, key) {\n                    selectionScope.selectedItems.push({\n                        key: key,\n                        value: value\n                    });\n                });\n\n                selectionScope.currentSelection = {\n                    selected: selectionScope.selectedItems\n                };\n\n                var manageItemsSelectedTemplate = adfTemplatePath + 'widget-selection.html';\n                var opts = {\n                    scope: selectionScope,\n                    templateUrl: manageItemsSelectedTemplate,\n                    backdrop: 'static',\n                    size: 'lg',\n                    animation: true\n                };\n\n                var instance = $uibModal.open(opts);\n\n                selectionScope.restoreSelection = function() {\n                    selectionScope.currentSelection = {\n                        selected: selectionScope.selectedItems\n                    };\n                };\n\n                selectionScope.clearSelection = function() {\n                    selectionScope.currentSelection.selected = [];\n                };\n\n                // Cierra sy guarda los datos de nueva selección\n                selectionScope.applyFilter = function(type) {\n                    var customOql = selectionScope.selectionConfig.filterAction(selectionScope.currentSelection.selected, type);\n\n                    if (!angular.isUndefined(customOql) && customOql !== null) {\n                        $scope.filter.typeFilter = 0;\n                        Filter.parseQuery(customOql).then(function(data) {\n                            $scope.search.oql = customOql;\n                            $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\n                            $scope.unknownWords = '';\n                            $scope.filter_error = null;\n\n                            $scope.launchSearchingAdv();\n                        }).catch(function(err) {\n                            $scope.filter_error = err;\n                        });\n                    }\n                };\n\n                selectionScope.executeOperation = function(operationType) {\n                    if (!$scope.editMode) {\n                        $scope.$parent.$broadcast('widgetExecuteOperation', {\n                            'selectedItems': selectionScope.currentSelection.selected,\n                            'type': operationType\n                        });\n                    }\n                };\n\n                // Cierra sy guarda los datos de nueva selección\n                selectionScope.saveChangesDialog = function() {\n                    var finalSelection = {};\n                    angular.forEach(selectionScope.currentSelection.selected, function(data, idx) {\n                        finalSelection[data.key] = {\n                            data: data.value.data,\n                            visible: data.value.visible\n                        };\n                    });\n\n                    $scope.selectedItems = angular.copy(finalSelection);\n                    $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n\n                    $scope.selectionManager.lastItem = {};\n                    $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n\n                    instance.close();\n                    selectionScope.$destroy();\n                };\n\n                // Cierra sin realizar ninguna acción\n                selectionScope.closeDialog = function() {\n                    instance.close();\n                    selectionScope.$destroy();\n                };\n            };\n\n\n            // bind edit function\n            $scope.edit = function(deleteIfNotConfigured) {\n                var editScope = $scope.$new();\n                editScope.definition = angular.copy(definition);\n\n                var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\n                if (definition.editTemplateUrl) {\n                    adfEditTemplatePath = definition.editTemplateUrl;\n                }\n\n                var opts = {\n                    scope: editScope,\n                    templateUrl: adfEditTemplatePath,\n                    backdrop: 'static',\n                    size: 'lg'\n                };\n\n                var instance = $uibModal.open(opts);\n\n                editScope.closeDialog = function(value) {\n                    instance.close();\n                    if (deleteIfNotConfigured && value === 'close') {\n                        $rootScope.$broadcast('adfWidgetRemovedFromGrid', editScope.definition);\n                    }\n\n                    editScope.$destroy();\n                };\n\n                // TODO create util method\n                function createApplyPromise(result) {\n                    var promise;\n                    if (typeof result === 'boolean') {\n                        var deferred = $q.defer();\n                        if (result) {\n                            deferred.resolve();\n                        } else {\n                            deferred.reject();\n                        }\n                        promise = deferred.promise;\n                    } else {\n                        promise = $q.when(result);\n                    }\n                    return promise;\n                }\n\n                editScope.saveDialog = function() {\n                    // clear validation error\n                    editScope.validationError = null;\n\n                    // build injection locals\n                    var widget = $scope.widget;\n\n                    // create a default apply method for widgets\n                    // without edit mode\n                    // see issue https://goo.gl/KHPQLZ\n                    var applyFn;\n                    if (widget.edit) {\n                        applyFn = widget.edit.apply;\n                    } else {\n                        applyFn = function() {\n                            return true;\n                        };\n                    }\n\n                    var editScopeDefinition = editScope.definition.config || {};\n                    // injection locals\n                    var locals = {\n                        widget: widget,\n                        definition: editScope.definition,\n                        config: editScopeDefinition\n                    };\n\n                    // invoke apply function and apply if success\n                    var result = $injector.invoke(applyFn, applyFn, locals);\n                    createApplyPromise(result).then(function() {\n                        definition.title = editScope.definition.title;\n                        if (editScope.definition.type === 'summaryChart') {\n                            if (editScope.definition.config.type === 'ENTITIES_VALUES') {\n                                editScope.definition.Ftype = 'entities';\n                                definition.Ftype = 'entities';\n                            } else {\n                                editScope.definition.Ftype = editScope.definition.config.type.toLowerCase();\n                                definition.Ftype = editScope.definition.config.type.toLowerCase();\n                            }\n                        }\n                        angular.extend(definition.config, editScopeDefinition);\n\n                        editScope.closeDialog();\n\n                        if (widget.edit && widget.edit.reload) {\n                            $scope.setReloadTimeout();\n                            // reload content after edit dialog is closed\n                            $scope.$broadcast('widgetConfigChanged');\n                        }\n                    }, function(err) {\n                        if (err) {\n                            editScope.validationError = err;\n                        } else {\n                            editScope.validationError = 'VALIDATION_DURING_APPLY_FAILED';\n                        }\n                    });\n                };\n\n            };\n\n\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            templateUrl: adfTemplatePath + 'widget-grid.html',\n            scope: {\n                definition: '=',\n                editMode: '=',\n                options: '=',\n                widgetState: '='\n            },\n            controller: function($scope, $element) {\n                $scope.filter = {\n                    typeFilter: 1,\n                    showFilter: false,\n                    showFinalFilter: false\n                };\n\n                var windowTimeChanged = $scope.$on('onWindowTimeChanged', function(event, timeObj) {\n                    $scope.config.windowFilter = timeObj ? timeObj : (config.windowFilter ? {} : timeObj);\n                    var widget = {\n                        definition: definition,\n                        element: $element\n                    };\n                    $rootScope.$broadcast('adfWindowTimeChangedFromWidget', widget, $scope.config.windowFilter);\n                    $scope.$broadcast('widgetWindowTimeChanged', $scope.config.windowFilter);\n                    $scope.reload();\n                });\n\n                this.updateWidgetFilters = function(filterId, configChange) {\n                    if ($scope.options && $scope.options.extraData && $scope.options.extraData.widgetFilters) {\n                        var _widgetFilters = $scope.options.extraData.widgetFilters;\n                        var model = $scope.definition;\n                        var selectFilter;\n                        var sharedFilters = _widgetFilters.filter(function(widgetFilter) {\n                            // Recuperamos solos los filtros de widgets que cumplan las condiciones:\n                            // - No tenga un filtro heredado como filtro\n                            // - El tipo de filtro sea igual que el widget que pueda heredarlo (Ftype)\n                            // - No recuperamos el filtro propio del widget  \n                            var shared = (!widgetFilter.filter || !widgetFilter.filter.id) && (widgetFilter.Ftype === model.Ftype) && (widgetFilter.wid !== model.wid);\n                            if (shared && (filterId === widgetFilter.wid))\n                                selectFilter = widgetFilter;\n                            return shared;\n                        });\n\n                        $scope.sharedFilters = angular.copy(sharedFilters);\n                        if (!configChange || !selectFilter && !!filterId)\n                            _setFilterType(selectFilter, $scope);\n                    }\n\n                };\n\n                var definition = $scope.definition;\n\n\n                if (definition.config.selectedItems) {\n                    $scope.selectedItemsLength = Object.keys(definition.config.selectedItems).length;\n                }\n\n\n                // Controlador de la barra inferior de los widgets\n                $scope.navOptionsHandler = {\n                    firstLoad: true,\n                    loadingData: false,\n                    startLoading: function() {\n                        $scope.navOptionsHandler.loadingData = true;\n                    },\n                    stopLoading: function() {\n                        $scope.navOptionsHandler.firstLoad = false;\n                        $scope.navOptionsHandler.loadingData = false;\n                        $scope.navOptionsHandler.lastMessageTime = new Date();\n                    },\n                    setStatusMessage: function(message) {\n                        $scope.navOptionsHandler.statusMessage = message;\n                        $scope.navOptionsHandler.lastMessageTime = new Date();\n                    }\n                };\n\n                // Controlador de los parámetros del filtro\n                $scope.filterHandler = {\n                    changeFilter: function(filter, search, typeFilter) {\n                        $scope.search = search;\n                        $scope.filter.typeFilter = typeFilter;\n                    }\n                };\n\n                // Controlador de las custom actions del widget\n                $scope.widgetActionsHandler = {\n                    actions: [],\n                    setActions: function(actions) {\n                        $scope.widgetActionsHandler.actions = actions;\n                    }\n                };\n\n                var adfDashboardCollapseExpand = $scope.$on('adfDashboardCollapseExpand', function(event, args) {\n                    $scope.widgetState.isCollapsed = args.collapseExpandStatus;\n                });\n\n                var adfWidgetEnterEditMode = $scope.$on('adfWidgetEnterEditMode', function(event, widget) {\n                    if (dashboard.idEquals(definition.wid, widget.wid)) {\n                        $scope.edit(true);\n                    }\n                });\n\n                var adfIsEditMode = $scope.$on('adfIsEditMode', function(event, widget) {\n                    $scope.editing = true;\n                });\n\n                var adfDashboardChanged = $scope.$on('adfDashboardChanged', function(event, name, model) {\n                    //config.widgetSelectors = tiene filtro\n                    var widgetConfigChanged = [];\n                    var grid = model.grid;\n                    if (grid && grid.length > 0) {\n                        grid.forEach(function(element) {\n                            var definition = element.definition;\n                            widgetConfigChanged.push(definition.wid);\n                        });\n                        var widgetFilters = $scope.options && $scope.options.extraData && $scope.options.extraData.widgetFilters;\n                        var sharedFilters = widgetFilters.filter(function(widgetFilter) {\n                            var filter = widgetFilter.filter;\n                            return filter && !filter.id || widgetConfigChanged.indexOf(filter.id) !== -1;\n                        });\n                        $scope.sharedFilters = angular.copy(sharedFilters);\n                        $scope.editing = false;\n                        $scope.$broadcast('widgetConfigChanged', widgetConfigChanged);\n                    }\n                });\n\n                var adfDashboardEditsCancelled = $scope.$on('adfDashboardEditsCancelled', function(event, widget) {\n                    $scope.editing = false;\n                });\n\n                $scope.openFullScreen = function() {\n                    var elem = document.getElementsByClassName('widget widget_' + $scope.definition.wid);\n                    if (elem[0].requestFullscreen) {\n                        elem[0].requestFullscreen();\n                        $scope.$broadcast('OnResizeWidget');\n                    } else if (elem[0].mozRequestFullScreen) { /* Firefox */\n                        elem[0].mozRequestFullScreen();\n                        $scope.$broadcast('OnResizeWidget');\n                    } else if (elem[0].webkitRequestFullscreen) { /* Chrome, Safari and Opera */\n                        elem[0].webkitRequestFullscreen();\n                        $scope.$broadcast('OnResizeWidget');\n                    } else if (elem[0].msRequestFullscreen) { /* IE/Edge */\n                        elem[0].msRequestFullscreen();\n                        $scope.$broadcast('OnResizeWidget');\n                    } else {\n                        $scope.$emit('adfOpenModalWidgetFromOther', definition.type, $scope.config || {}, $scope);\n                    }\n                };\n\n                $scope.openAboutScreen = function(size) {\n                    size = 'md';\n                    var modalInstance = $uibModal.open({\n                        animation: true,\n                        templateUrl: 'widgetAboutModal.html',\n                        controller: function($scope, $uibModalInstance, information) {\n                            $scope.about = {};\n                            $scope.about.info = information;\n                            $scope.ok = function() {\n                                $uibModalInstance.close();\n                            };\n                        },\n                        'size': size,\n                        resolve: {\n                            information: function() {\n                                return $scope.config.about;\n                            }\n                        }\n                    });\n\n                    modalInstance.result.then(function(selectedItem) {\n                        $scope.selected = selectedItem;\n                    }, function() {\n                        $log.info('Modal dismissed at: ' + new Date());\n                    });\n                };\n\n                $scope.saveWidgetScreen = function(wId) {\n                    $scope.$emit('generateSnapshot', {\n                        'objectSelector': '.widget_' + wId,\n                        'fileName': 'capture_' + new Date().getTime()\n                    });\n                };\n\n\n                $scope.moveWidgetToDashboard = function(wId) {\n                    $scope.$emit('ouxWidget-move', {\n                        'objectSelector': '.widget_' + wId\n                    }, wId);\n                };\n                $scope.copyWidgetToDashboard = function(wId) {\n                    $scope.$emit('ouxWidget-copy', {\n                        'objectSelector': '.widget_' + wId\n                    }, wId);\n                };\n\n                var createQuickFilter = function(fieldsQuickSearch) {\n                    var _filter = {\n                        or: []\n                    };\n                    var criteria;\n                    fieldsQuickSearch.forEach(function(field) {\n                        criteria = {};\n                        criteria[field.operator] = {};\n                        criteria[field.operator][field.name] = $scope.config.filter.value;\n                        _filter.or.push(criteria);\n                    });\n                    return _filter;\n                };\n\n                $scope.downloadCsv = function() {\n                    var columns = $scope.config.columns;\n                    var scope_filter = $scope.config.filter;\n                    var extra_filter;\n                    var final_filter = {};\n                    var order = $scope.config.sort ? $scope.config.sort : undefined;\n                    if ($scope.config.getWindowTime && $scope.config.onWindowTimeChanged) {\n                        var winTime = $scope.config.getWindowTime();\n                        var window_filter = $scope.config.onWindowTimeChanged(winTime);\n                        if (window_filter && window_filter.and) {\n                            extra_filter = {\n                                and: window_filter.and\n                            };\n                        }\n                    }\n                    var filter;\n                    if (scope_filter.type && scope_filter.type === 'advanced' && scope_filter.value.length > 4) {\n                        filter = JSON.parse(scope_filter.value);\n                    } else if (scope_filter.type && scope_filter.type === 'basic' && scope_filter.value.trim() !== '') {\n                        filter = createQuickFilter($scope.config.fieldsQuickSearch, scope_filter.value);\n                    }\n                    if (extra_filter) {\n                        if (filter) {\n                            final_filter = {\n                                and: [extra_filter, filter]\n                            };\n                        } else {\n                            final_filter = extra_filter;\n                        }\n                    } else {\n                        final_filter = filter;\n                    }\n                    $scope.$broadcast('downloadCsv', {\n                        'columns': columns,\n                        'filter': final_filter,\n                        'order': order\n                    });\n                };\n\n                $scope.generateQR = function() {\n                    $scope.$broadcast('generateQR');\n                };\n\n                var addItemToSelection = $scope.$on('addItemToSelection', function(event, item) {\n                    if (!$scope.selectedItems[item.key]) {\n                        $scope.selectedItems[item.key] = {\n                            data: item.data,\n                            visible: item.visible\n                        };\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n                        item.isSelected = true;\n                        $scope.selectionManager.lastItem = item;\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n                    }\n\n                });\n\n                var removeItemFromSelection = $scope.$on('removeItemFromSelection', function(event, item) {\n                    if ($scope.selectedItems[item.key]) {\n                        delete $scope.selectedItems[item.key];\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n                        item.isSelected = false;\n                        $scope.selectionManager.lastItem = item;\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n                    }\n                });\n\n                // bind reload function\n                var stopReloadTimeout;\n\n                $scope.setReloadTimeout = function() {\n                    var config = $scope.config || $scope.definition.config || {};\n\n\n                    var reloadPeriod = config.reloadPeriod;\n                    if (!isNaN(reloadPeriod) && (reloadPeriod * 1) !== 0) {\n                        if (angular.isDefined(stopReloadTimeout)) {\n                            $interval.cancel(stopReloadTimeout);\n                            stopReloadTimeout = undefined;\n                        }\n                        stopReloadTimeout = $interval($scope.reload, (reloadPeriod * 1000));\n                    } else if (stopReloadTimeout) {\n                        $interval.cancel(stopReloadTimeout);\n                    }\n                };\n\n                $scope.reload = function() {\n                    $scope.$broadcast('widgetReload');\n\n                    $scope.setReloadTimeout();\n                };\n\n\n                // verificacion de periodo de refresco\n                $scope.setReloadTimeout();\n\n                $scope.$on('$destroy', function() {\n                    adfDashboardCollapseExpand();\n                    adfWidgetEnterEditMode();\n                    adfIsEditMode();\n                    adfDashboardChanged();\n                    adfDashboardEditsCancelled();\n                    addItemToSelection();\n                    removeItemFromSelection();\n                    windowTimeChanged();\n                    $interval.cancel(stopReloadTimeout);\n                });\n            },\n            compile: function() {\n\n                /**\n                 * use pre link, because link of widget-content\n                 * is executed before post link widget\n                 */\n                return {\n                    pre: preLink,\n                    post: postLink\n                };\n            }\n        };\n\n    });","\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/**\n * The widget service provide helper functions to render widgets and their content.\n */\nangular.module('adf')\n  .factory('widgetService', function($http, $q, $sce, $templateCache, dashboard) {\n    'use strict';\n\n    function parseUrl(url) {\n      var parsedUrl = url;\n      if (url.indexOf('{widgetsPath}') >= 0) {\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\n                .replace('//', '/');\n        if (parsedUrl.indexOf('/') === 0) {\n          parsedUrl = parsedUrl.substring(1);\n        }\n      }\n      return parsedUrl;\n    }\n\n    var exposed = {};\n\n    exposed.getTemplate = function(widget){\n      var deferred = $q.defer();\n\n      if (widget.template) {\n        deferred.resolve(widget.template);\n      } else if (widget.templateUrl) {\n        // try to fetch template from cache\n        var tpl = $templateCache.get(widget.templateUrl);\n        if (tpl) {\n          deferred.resolve(tpl);\n        } else {\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\n          $http.get(url)\n               .success(function(response) {\n                 // put response to cache, with unmodified url as key\n                 $templateCache.put(widget.templateUrl, response);\n                 deferred.resolve(response);\n               })\n               .error(function() {\n                 deferred.reject('could not load template');\n               });\n        }\n      }\n\n      return deferred.promise;\n    };\n\n    return exposed;\n  });\n",null,"(function(window, undefined) {'use strict';\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf', ['adf.provider', 'ui.bootstrap', 'opengate-angular-js'])\n    .value('adfTemplatePath', '../src/templates/')\n    .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\n    .value('adfVersion', '8.9.1');\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @ngdoc directive\n * @name adf.directive:adfDashboard\n * @element div\n * @restrict EA\n * @scope\n * @description\n *\n * `adfDashboard` is a directive which renders the dashboard with all its\n * components. The directive requires a name attribute. The name of the\n * dashboard can be used to store the model.\n *\n * @param {string} name name of the dashboard. This attribute is required.\n * @param {boolean=} editable false to disable the editmode of the dashboard.\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\n * @param {object=} adfModel model object of the dashboard.\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\n *                   events during edit mode not reset it if edit mode is exited.\n * @param {boolean=} categories enable categories for the add widget dialog.\n */\n\nangular.module('adf')\n    .directive('adfDashboard', function($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath, $translate, Upload) {\n        \n\n        function stringToBoolean(string) {\n            switch (angular.isDefined(string) ? string.toLowerCase() : null) {\n                case 'true':\n                case 'yes':\n                case '1':\n                    return true;\n                case 'false':\n                case 'no':\n                case '0':\n                case null:\n                    return false;\n                default:\n                    return Boolean(string);\n            }\n        }\n\n        function createConfiguration(type) {\n            var cfg = {};\n            var config = dashboard.widgets[type].config || {};\n            cfg = angular.copy(config);\n            return cfg;\n        }\n\n        function createWidget(type) {\n            var wdgt = {};\n            var widget = dashboard.widgets[type];\n            if (widget) {\n                wdgt = angular.copy(widget);\n            }\n            return wdgt;\n        }\n\n        /**\n         * Adds the widget to first column of the model.\n         *\n         * @param dashboard model\n         * @param widget to add to model\n         * @param name name of the dashboard\n         */\n        function addNewWidgetToModel(model, widget, name, forceToSave) {\n            if (model) {\n                if (!model.grid) {\n                    model.grid = [];\n                }\n\n                var newWidget = {\n                    width: 3,\n                    height: 2,\n                    x: 0,\n                    y: 0,\n                    definition: widget\n                };\n                model.grid.push(newWidget);\n\n                $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\n\n                if (forceToSave) {\n                    $rootScope.$broadcast('adfDashboardChanged', name, model);\n                }\n            } else {\n                $log.error('model is undefined');\n            }\n        }\n\n        /**\n         * Checks if the edit mode of the widget should be opened immediately.\n         *\n         * @param widget type\n         */\n        function isEditModeImmediate(type) {\n            var widget = dashboard.widgets[type];\n            return widget && widget.edit && widget.edit.immediate;\n        }\n\n        /**\n         * Opens the edit mode of the specified widget.\n         *\n         * @param dashboard scope\n         * @param widget\n         */\n        function openEditMode($scope, widget) {\n            // wait some time before fire enter edit mode event\n            $timeout(function() {\n                $scope.$broadcast('adfWidgetEnterEditMode', widget);\n            }, 200);\n        }\n\n        /**\n         * Creates object with the category name as key and an array of widgets as value.\n         *\n         * @param widgets array of widgets\n         *\n         * @return array of categories\n         */\n        function createCategories(widgets) {\n            var categories = {};\n            angular.forEach(widgets, function(widget, key) {\n                var category = widget.category;\n                // if the widget has no category use a default one\n                if (!category) {\n                    category = 'ADF.CATEGORY.MISCELANOUS';\n                }\n\n                widget.title = $translate.instant(widget.title);\n                widget.description = $translate.instant(widget.description);\n                widget.category = $translate.instant(widget.category);\n\n                // push widget to category array\n                if (angular.isUndefined(categories[widget.category])) {\n                    categories[widget.category] = {\n                        widgets: {}\n                    };\n                }\n\n                categories[widget.category].widgets[key] = widget;\n            });\n            return categories;\n        }\n\n        function createCategoriesList(widgets) {\n            var categories = [];\n            angular.forEach(widgets, function(widget, key) {\n                if (!widget.category) {\n                    widget.category = 'ADF.CATEGORY.MISCELLANEOUS';\n                }\n\n                widget.title = $translate.instant(widget.title);\n                widget.description = $translate.instant(widget.description);\n                widget.category = $translate.instant(widget.category);\n\n                if (!widget.categoryTags) {\n                    widget.categoryTags = 'ADF.CATEGORY.TAG.MISCELLANEOUS';\n                }\n\n                var categoriesTmp = widget.categoryTags.split(',');\n\n                var allWidgetCategoriesTranslated = [];\n                angular.forEach(categoriesTmp, function(category, idx) {\n                    // push widget to category array\n                    var translatedCat = $translate.instant(category);\n                    if (categories.indexOf(translatedCat) === -1) {\n                        categories.push(translatedCat);\n                    }\n\n                    if (allWidgetCategoriesTranslated.indexOf(translatedCat) === -1) {\n                        allWidgetCategoriesTranslated.push(translatedCat);\n                    }\n                });\n                widget.categoryTags = allWidgetCategoriesTranslated.toString();\n\n            });\n            return categories;\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            scope: {\n                name: '@',\n                collapsible: '@',\n                editable: '@',\n                editMode: '@',\n                continuousEditMode: '=',\n                maximizable: '@',\n                adfModel: '=',\n                adfWidgetFilter: '=',\n                categories: '@',\n                hideButtons: '=',\n                extraData: '='\n            },\n            controller: function($scope) {\n                var model = {\n                    extraConfig: {\n                        cellHeight: 145\n                    }\n                };\n                var widgetFilter = null;\n                var name = $scope.name;\n\n                var _getReloadWidgets = function(widget) {\n                    var reloadWidgets = {\n                        configChange: [],\n                        reload: []\n                    };\n                    if (widget) {\n                        var definition = angular.copy(widget.definition);\n                        var ftype = definition.Ftype;\n                        var id = definition.wid;\n                        var config = definition.config || {};\n                        var filter = config.filter;\n                        model.grid.forEach(function(w) {\n                            var f = w.definition.config.filter;\n                            var ft = w.definition.Ftype;\n                            //solo recargamos y actualizamos los widgets:\n                            // - que tengan filtro\n                            // y que el id tenga filtro\n                            // y que el id del filtro coincida con el wid del widget que ha modificado el fitro\n                            if (f && f.id && f.id === id) {\n                                w.definition.config.filter = filter;\n                                w.definition.config.filter.id = id;\n                                reloadWidgets.reload.push(w.definition.wid);\n                            } else if (ftype === ft) {\n                                reloadWidgets.configChange.push(w.definition.wid);\n                            }\n                        });\n                    }\n                    return reloadWidgets;\n                };\n\n                var updateWidgetFilters = function(model) {\n                    var widgetFilters = [];\n                    var grid = model.grid;\n                    if (grid && grid.length > 0) {\n                        grid.forEach(function(element) {\n                            var definition = element.definition;\n                            var config = definition.config || {};\n                            var filter = config.filter;\n                            widgetFilters.push({\n                                wid: definition.wid,\n                                title: definition.title,\n                                filter: filter,\n                                Ftype: definition.Ftype\n                            });\n                        });\n                    }\n                    if (!$scope.options) {\n                        $scope.options = {\n                            extraData: {}\n                        };\n                    }\n                    $scope.options.extraData.widgetFilters = widgetFilters;\n                };\n                // Watching for changes on adfModel\n                $scope.$watch('adfModel', function(oldVal, newVal) {\n                    // has model changed or is the model attribute not set\n                    if (newVal !== null || (oldVal === null && newVal === null)) {\n                        model = $scope.adfModel;\n                        widgetFilter = $scope.adfWidgetFilter;\n\n                        if (model) {\n                            updateWidgetFilters(model);\n                            if (!model.title) {\n                                model.title = $translate.instant('ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD');\n                            }\n                            if (!model.titleTemplateUrl) {\n                                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\n                            }\n\n                            if (!model.extraConfig) {\n                                model.extraConfig = {\n                                    cellHeight: 145\n                                };\n                            } else {\n                                if (!model.extraConfig.cellHeight) {\n                                    model.extraConfig.cellHeight = 145;\n                                }\n                            }\n\n                            $scope.model = model;\n                        } else {\n                            $log.error('could not find or create model');\n                        }\n                    }\n                }, true);\n\n                // edit mode\n                $scope.editMode = false;\n\n                function getNewModalScope() {\n                    var scope = $scope.$new();\n                    return scope;\n                }\n\n                $scope.toggleEditMode = function(openConfigWindow) {\n                    $scope.editMode = !$scope.editMode;\n                    if ($scope.editMode) {\n                        if (!$scope.continuousEditMode) {\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\n                            $rootScope.$broadcast('adfIsEditMode');\n                        }\n\n                        if (openConfigWindow) {\n                            $scope.editDashboardDialog();\n                        }\n                    }\n\n                    if (!$scope.editMode) {\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\n                    }\n                };\n\n                var adfToggleEditMode = $scope.$on('adfToggleEditMode', function(event, isNewDashboard) {\n                    if (isNewDashboard) {\n                        $scope.toggleEditMode(true);\n                    } else {\n                        $scope.toggleEditMode();\n                    }\n                });\n\n                var adfCancelEditMode = $scope.$on('adfCancelEditMode', function(event) {\n                    if ($scope.editMode) {\n                        $scope.cancelEditMode();\n                    }\n                });\n\n                var adfWidgetRemoved = $scope.$on('adfWidgetRemovedFromGrid', function(event, widget) {\n                    var index = null;\n                    angular.forEach($scope.adfModel.grid, function(widgetTmp, idx) {\n                        if (widgetTmp.definition.wid === widget.wid) {\n                            index = idx;\n                        }\n                    });\n\n                    if (index >= 0) {\n                        $scope.adfModel.grid.splice(index, 1);\n                    }\n                });\n                var adfWidgetRemovedAndSave = $scope.$on('adfWidgetRemovedFromGridAndSave', function(event, widget) {\n                    var index = null;\n                    $scope.toggleEditMode();\n                    angular.forEach($scope.adfModel.grid, function(widgetTmp, idx) {\n                        if (widgetTmp.definition.wid === widget.wid) {\n                            index = idx;\n                        }\n                    });\n\n                    if (index >= 0) {\n                        $scope.adfModel.grid.splice(index, 1);\n                    }\n                    $scope.toggleEditMode();\n                });\n\n                $scope.cancelEditMode = function() {\n                    $scope.editMode = false;\n                    if (!$scope.continuousEditMode && ($scope.modelCopy !== $scope.adfModel)) {\n                        $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\n                    }\n                    $rootScope.$broadcast('adfDashboardEditsCancelled', $scope.adfModel.title, $scope.adfModel);\n                };\n\n                var adfEditDashboardDialog = $scope.$on('adfEditDashboardDialog', function(event) {\n                    if ($scope.editMode) {\n                        $scope.editDashboardDialog();\n                    }\n                });\n\n\n                var adfLaunchSearchingFromWidget = $scope.$on('adfLaunchSearchingFromWidget', function(event, widget) {\n                    var reloadWidgets = _getReloadWidgets(widget);\n                    $rootScope.$broadcast('adfFilterChanged', name, model, reloadWidgets);\n                });\n                var adfWindowTimeChangedFromWidget = $scope.$on('adfWindowTimeChangedFromWidget', function(event) {\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\n                });\n\n                // edit dashboard settings\n                $scope.editDashboardDialog = function() {\n                    var editDashboardScope = getNewModalScope();\n                    // create a copy of the title, to avoid changing the title to\n                    // \"dashboard\" if the field is empty\n                    editDashboardScope.copy = {\n                        title: (model.title !== 'ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD' ? model.title : ''),\n                        description: model.description,\n                        backgroundColor: model.backgroundColor ? model.backgroundColor : undefined,\n                        time: new Date(),\n                        backgroundImage: model.backgroundImage ? model.backgroundImage : undefined,\n                        file: model.backgroundImage ? model.backgroundImage : undefined,\n                        extraConfig: angular.copy(model.extraConfig)\n                    };\n\n                    editDashboardScope.backgroundSize = {\n                        name: 'backgroundSize',\n                        model: model.backgroundImageSize ? model.backgroundImageSize : '100% 100%',\n                        options: {\n                            '100% 100%': {\n                                title: $translate.instant('SIZE_CONF.AUTO')\n                            },\n                            'contain': {\n                                title: $translate.instant('SIZE_CONF.CONTAIN')\n                            },\n                            'cover': {\n                                title: $translate.instant('SIZE_CONF.COVER')\n                            }\n                        }\n                    };\n\n                    editDashboardScope.iconConfiguration = {\n                        name: 'iconConfiguration',\n                        model: model.iconType ? model.iconType : 'icon',\n                        url: undefined,\n                        file: undefined,\n                        iconType: model.iconType ? model.iconType : 'icon',\n                        icon: model.iconType === 'icon' ? model.icon : 'fa-tachometer',\n                        options: {\n                            'icon': {\n                                title: $translate.instant('ICON.LIBRARY'),\n                            },\n                            'image': {\n                                title: $translate.instant('ICON.IMAGE')\n                            }\n                        }\n                    };\n                    if (editDashboardScope.iconConfiguration.iconType === 'image') {\n                        editDashboardScope.iconConfiguration.file = model.icon;\n                        editDashboardScope.iconConfiguration.url = model.icon;\n                    }\n                    editDashboardScope.imageSelected = function(file) {\n                        if (file) {\n                            editDashboardScope.iconConfiguration.file = file;\n                            Upload.base64DataUrl(file).then(\n                                function(url) {\n                                    editDashboardScope.iconConfiguration.url = url;\n                                    editDashboardScope.iconConfiguration.file = url;\n                                    editDashboardScope.iconConfiguration.iconType = 'image';\n\n                                });\n                        } else {\n                            editDashboardScope.removeDataFile();\n                        }\n                    };\n                    editDashboardScope.backgroundImageSelected = function(file) {\n                        if (file) {\n                            editDashboardScope.iconConfiguration.file = file;\n                            Upload.base64DataUrl(file).then(\n                                function(url) {\n                                    editDashboardScope.copy.backgroundImage = url;\n                                    editDashboardScope.copy.file = url;\n\n                                });\n                        } else {\n                            editDashboardScope.removeBackgroundFile();\n                        }\n                    };\n                    editDashboardScope.removeDataFile = function() {\n                        editDashboardScope.iconConfiguration.file = null;\n                        editDashboardScope.iconConfiguration.url = null;\n                    };\n                    editDashboardScope.removeBackgroundFile = function() {\n                        editDashboardScope.copy.backgroundImage = null;\n                        editDashboardScope.copy.file = null;\n\n                    };\n\n                    var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\n                    if (model.editTemplateUrl) {\n                        adfEditTemplatePath = model.editTemplateUrl;\n                    }\n                    var instance = $uibModal.open({\n                        scope: editDashboardScope,\n                        templateUrl: adfEditTemplatePath,\n                        backdrop: 'static',\n                        keyboard: false,\n                        size: 'lg'\n                    });\n\n\n                    editDashboardScope.closeDialog = function(cancelChanges) {\n                        if (!cancelChanges) {\n                            // copy the new title back to the model\n                            model.title = editDashboardScope.copy.title;\n                            model.description = editDashboardScope.copy.description;\n                            if (editDashboardScope.iconConfiguration.model === 'image') {\n                                model.icon = editDashboardScope.iconConfiguration.url;\n\n                            } else if (editDashboardScope.iconConfiguration.model === 'icon') {\n                                model.icon = (editDashboardScope.iconConfiguration.icon && editDashboardScope.iconConfiguration.icon.key) || editDashboardScope.iconConfiguration.icon;\n\n                            }\n                            model.iconType = editDashboardScope.iconConfiguration.model;\n                            model.backgroundColor = editDashboardScope.copy.backgroundColor ? editDashboardScope.copy.backgroundColor : undefined;\n                            model.backgroundImage = editDashboardScope.copy.backgroundImage ? editDashboardScope.copy.backgroundImage : undefined;\n                            model.backgroundImageSize = editDashboardScope.backgroundSize.model;\n                            model.extraConfig = editDashboardScope.copy.extraConfig ? editDashboardScope.copy.extraConfig : undefined;\n\n                            $rootScope.$broadcast('adfDashboardInternalConfigChanged', model);\n                        } else {\n                            console.warn('Dashboard config cancelled by user');\n                        }\n\n                        // close modal and destroy the scope\n                        instance.close();\n                        editDashboardScope.$destroy();\n                    };\n                };\n\n                var adfOpenWidgetFromOther = $scope.$on('adfOpenWidgetFromOther', function(event, widget, config) {\n                    var internal_config = createConfiguration(widget);\n                    var _config = angular.merge({}, internal_config, config || {});\n                    var w = {\n                        type: widget,\n                        config: _config,\n                        title: _config.title\n                    };\n                    addNewWidgetToModel(model, w, name, !$scope.editMode);\n                });\n\n                var adfOpenModalWidgetFromOther = $scope.$on('adfOpenModalWidgetFromOther', function(event, widgetType, config, origScope) {\n                    var templateUrl = adfTemplatePath + 'widget-fullscreen.html';\n                    var _config = config || {};\n                    if (_config.sendSelection) {\n                        templateUrl = adfTemplatePath + 'widget-fullscreen-selection.html';\n                    }\n\n                    var fullScreenScope;\n                    if (!origScope) {\n                        var widget = createWidget(widgetType);\n                        widget.config = angular.merge({}, widget.config, _config);\n                        widget.type = widgetType;\n                        if (widget.config.title) {\n                            widget.title = widget.config.title;\n                        }\n\n                        fullScreenScope = $scope.$new();\n                        fullScreenScope.definition = fullScreenScope.widget = widget;\n                    } else {\n                        fullScreenScope = origScope;\n                    }\n\n                    var opts = {\n                        scope: fullScreenScope,\n                        templateUrl: templateUrl,\n                        size: fullScreenScope.definition.modalSize || 'el',\n                        backdrop: 'static',\n                        windowClass: (fullScreenScope.definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n                    };\n\n                    if ($scope.model && !$scope.model.temporal) {\n                        fullScreenScope.persistDashboard = function() {\n                            $rootScope.$broadcast('adfOpenWidgetFromOther', this.$parent.widget.type, this.$parent.widget.config || {});\n                            this.closeDialog();\n                        };\n                    }\n\n                    var instance = $uibModal.open(opts);\n                    fullScreenScope.closeDialog = function() {\n                        instance.close();\n                        if (!origScope) {\n                            fullScreenScope.$destroy();\n                        } else {\n                            fullScreenScope.reload();\n                        }\n                    };\n                });\n\n                var adfAddWidgetDialog = $scope.$on('adfAddWidgetDialog', function(event) {\n                    if (!model.temporal && model.editable) {\n                        if (!$scope.editMode) {\n                            $scope.editMode = true;\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\n                            $rootScope.$broadcast('adfIsEditMode');\n                        }\n\n                        $scope.addWidgetDialog();\n                    }\n                });\n\n                // add widget dialog\n                $scope.addScopeCfg = {\n                    widgetFilter: {},\n                    widgetSortingDirection: '',\n                    widgetSorting: 'priority'\n                };\n\n                $scope.addWidgetDialog = function() {\n                    var addScope = getNewModalScope();\n                    var widgets;\n                    if (angular.isFunction(widgetFilter)) {\n                        widgets = {};\n                        angular.forEach(dashboard.widgets, function(widget, type) {\n                            if (widgetFilter(widget, type, model)) {\n                                widgets[type] = widget;\n                            }\n                        });\n                    } else {\n                        widgets = dashboard.widgets;\n                    }\n                    addScope.widgets = widgets;\n\n                    angular.forEach(addScope.widgets, function(widget, type) {\n                        widget.key = type;\n                        if (!widget.category) {\n                            widget.category = 'ADF.CATEGORY.MISCELLANEOUS';\n                        }\n                    });\n\n                    // pass createCategories function to scope, if categories option is enabled\n                    if ($scope.options.categories) {\n                        addScope.createCategories = createCategories;\n                    } else {\n                        addScope.availableCategories = createCategoriesList(widgets);\n                    }\n\n                    var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\n                    if (model.addTemplateUrl) {\n                        adfAddTemplatePath = model.addTemplateUrl;\n                    }\n\n                    var opts = {\n                        scope: addScope,\n                        templateUrl: adfAddTemplatePath,\n                        backdrop: 'static',\n                        size: 'lg'\n                    };\n\n                    var instance = $uibModal.open(opts);\n\n                    addScope.widgetFilterCfg = $scope.addScopeCfg;\n\n                    addScope.addWidget = function(widget) {\n                        var w = {\n                            type: widget,\n                            Ftype: dashboard.widgets[widget].Ftype || null,\n                            config: createConfiguration(widget)\n                        };\n                        addNewWidgetToModel(model, w, name);\n                        // close and destroy\n                        instance.close();\n                        addScope.$destroy();\n\n                        // check for open edit mode immediately\n                        if (isEditModeImmediate(widget)) {\n                            openEditMode($scope, w);\n                        }\n                    };\n\n                    addScope.changeThumbnail = function(widget) {\n                        if (widget.images) {\n                            if (angular.isUndefined(widget._currThumb)) {\n                                widget._currThumb = 1;\n                            } else {\n                                widget._currThumb += 1;\n                            }\n\n\n                            if (widget._currThumb >= widget.images.length) {\n                                widget._currThumb = 0;\n                            }\n\n                            widget._currImg = widget.images[widget._currThumb];\n                        }\n                    };\n\n                    addScope.closeDialog = function() {\n                        // close and destroy\n                        instance.close();\n                        addScope.$destroy();\n                    };\n                };\n\n                $scope.addNewWidgetToModel = addNewWidgetToModel;\n\n                $scope.$on('destroy', function() {\n                    adfLaunchSearchingFromWidget();\n                    adfWindowTimeChangedFromWidget();\n                    adfToggleEditMode();\n                    adfOpenWidgetFromOther();\n                    adfOpenModalWidgetFromOther();\n                    adfCancelEditMode();\n                    adfAddWidgetDialog();\n                    adfEditDashboardDialog();\n                    adfWidgetRemoved();\n                    adfWidgetRemovedAndSave();\n                });\n            },\n            link: function($scope, $element, $attr) {\n                // pass options to scope\n                var options = {\n                    name: $attr.name,\n                    editable: true,\n                    enableConfirmDelete: stringToBoolean($attr.enableConfirmDelete),\n                    maximizable: stringToBoolean($attr.maximizable),\n                    collapsible: stringToBoolean($attr.collapsible),\n                    categories: stringToBoolean($attr.categories),\n                    extraData: {}\n                };\n\n                if (angular.isDefined($attr.editable)) {\n                    options.editable = stringToBoolean($attr.editable);\n                }\n\n                if (angular.isDefined($scope.extraData)) {\n                    options.extraData = $scope.extraData;\n                }\n\n                options.extraData.editing = $scope.editMode;\n\n                $scope.options = options;\n            },\n            templateUrl: adfTemplatePath + 'dashboard.html'\n        };\n    });\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the 'Software'), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/* global angular */\nangular.module('adf')\n    .directive('adfDashboardGrid', function(adfTemplatePath) {\n        \n\n        var gridOptions = {\n            cellHeight: 145,\n            verticalMargin: 10,\n            animate: true,\n            float: false,\n            alwaysShowResizeHandle: true,\n            minWidth: 768,\n            auto: true,\n            resizable: {\n                handles: 'e, se, s, sw, w'\n            },\n            disableDrag: true,\n            disableResize: true\n        };\n\n        function preLink($scope) {\n            gridOptions.disableDrag = !$scope.editMode;\n            gridOptions.disableResize = !$scope.editMode;\n            $scope.gridOptions = gridOptions;\n\n            $scope.gsHandler = null;\n        }\n\n        return {\n            restrict: 'E',\n            scope: {\n                adfModel: '=',\n                editMode: '=',\n                continuousEditMode: '=',\n                options: '='\n            },\n            templateUrl: adfTemplatePath + 'dashboard-grid.html',\n            compile: function() {\n                return {\n                    pre: preLink,\n                };\n            },\n            controller: function($scope, $timeout) {\n                var dashEvents = [];\n                dashEvents.push($scope.$on('adfIsEditMode', function() {\n                    $timeout(function() {\n                        $scope.gsHandler.enable();\n                    }, 100);\n                }));\n\n                dashEvents.push($scope.$on('adfDashboardChanged', function() {\n                    $timeout(function() {\n                        $scope.gsHandler.disable();\n                    }, 100);\n                }));\n\n                dashEvents.push($scope.$on('adfDashboardEditsCancelled', function($event, name, model) {\n                    if (model && model.extraConfig) {\n                        if (angular.isNumber(model.extraConfig.cellHeight)) {\n                            $scope.gsHandler.cellHeight(model.extraConfig.cellHeight);\n                        }\n                    }\n\n                    $timeout(function() {\n                        $scope.gsHandler.disable();\n                    }, 100);\n                }));\n\n                dashEvents.push($scope.$on('adfDashboardInternalConfigChanged', function($event, newModel) {\n                    if (newModel && newModel.extraConfig) {\n                        if (angular.isNumber(newModel.extraConfig.cellHeight)) {\n                            $scope.gsHandler.cellHeight(newModel.extraConfig.cellHeight);\n                        }\n                    }\n                }));\n\n                dashEvents.push($scope.$on('adfCancelEditMode', function() {\n                    $timeout(function() {\n                        $scope.gsHandler.disable();\n                    }, 100);\n                }));\n\n                dashEvents.push($scope.$on('adfWidgetAdded', function(event) {\n                    $timeout(function() {\n                        $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\n                        $scope.gsHandler.enable();\n                    }, 100);\n                }));\n\n                $scope.onChange = function(event, items) {\n                    //console.log('onChange event: ' + event + ' items:' + items);\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\n                };\n\n                // $scope.onDragStart = function(event, ui) {\n                //     console.log('onDragStart event: ' + event + ' ui:' + ui);\n                // };\n\n                $scope.onDragStop = function(event, ui) {\n                    console.log('onDragStop event: ' + event + ' ui:' + ui);\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\n                };\n\n                // $scope.onResizeStart = function(event, ui) {\n                //     console.log('onResizeStart event: ' + event + ' ui:' + ui);\n                // };\n\n                $scope.onResizeStop = function(event, ui) {\n                    console.log('onResizeStop event: ' + event + ' ui:' + ui);\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\n                    $scope.$broadcast('OnResizeWidget');\n                };\n\n                // $scope.onItemAdded = function(item) {\n                //     console.log('onItemAdded item: ' + item);\n                // };\n\n                // $scope.onItemRemoved = function(item) {\n                //     console.log('onItemRemoved item: ' + item);\n                // };\n\n                if ($scope.adfModel && $scope.adfModel.extraConfig) {\n                    if (angular.isNumber($scope.adfModel.extraConfig.cellHeight)) {\n                        gridOptions.cellHeight = $scope.adfModel.extraConfig.cellHeight;\n                    }\n                }\n\n                $scope.$on('$destroy', function() {\n                    dashEvents.forEach(function(dashEvt) {\n                        dashEvt();\n                    });\n                });\n            }\n        };\n    });\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .filter('adfOrderByObjectKey', function($filter) {\n    \n\n    return function(item, key){\n      var array = [];\n      angular.forEach(item, function(value, objectKey){\n        value[key] = objectKey;\n        array.push(value);\n      });\n      return $filter('orderBy')(array, key);\n    };\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\n/**\n * @ngdoc object\n * @name adf.dashboardProvider\n * @description\n *\n * The dashboardProvider can be used to register widgets.\n */\nangular.module('adf.provider', [])\n    .provider('dashboard', function () {\n\n        var widgets = {};\n        var widgetsPath = '';\n        var messageTemplate = '<div class=\"alert alert-primary\">{}</div>';\n        var loadingTemplate = '\\\n      <div class=\"progress progress-striped active\">\\n\\\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\n          <span class=\"sr-only\" translate>FORM.MSG.LOADING ...</span>\\n\\\n        </div>\\n\\\n      </div>';\n        var customWidgetTemplatePath = null;\n\n        // default apply function of widget.edit.apply\n        var defaultApplyFunction = function () {\n            return true;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#widget\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Registers a new widget.\n         *\n         * @param {string} name of the widget\n         * @param {object} widget to be registered.\n         *\n         *   Object properties:\n         *\n         *   - `title` - `{string=}` - The title of the widget.\n         *   - `description` - `{string=}` - Description of the widget.\n         *   - `category` - `{string=}` - Category of the widget.\n         *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\n         *   - `config` - `{object}` - Predefined widget configuration.\n         *   - `controller` - `{string=|function()=}` - Controller fn that should be\n         *      associated with newly created scope of the widget or the name of a\n         *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\n         *      if passed as a string.\n         *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\n         *      published to scope under the `controllerAs` name.\n         *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\n         *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\n         *   - `template` - `{string=|function()=}` - html template as a string.\n         *   - `templateUrl` - `{string=}` - path to an html template.\n         *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\n         *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n         *      be injected into the controller. If any of these dependencies are promises, the widget\n         *      will wait for them all to be resolved or one to be rejected before the controller is\n         *      instantiated.\n         *      If all the promises are resolved successfully, the values of the resolved promises are\n         *      injected.\n         *\n         *      The map object is:\n         *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n         *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n         *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\n         *        and the return value is treated as the dependency. If the result is a promise, it is\n         *        resolved before its value is injected into the controller.\n         *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n         *      on the scope of the widget.\n         *   - `edit` - `{object}` - Edit modus of the widget.\n         *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n         *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\n         *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n         *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\n         *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\n         *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n         *        on the scope of the widget.\n         *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\n         *        Default is true.\n         *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\n         *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\n         *        The function have to return a boolean or an promise which can be resolved to a boolean.\n         *        The function can use injection.\n         *\n         * @returns {Object} self\n         */\n        this.widget = function (name, widget) {\n            var w = angular.extend({\n                reload: false,\n                frameless: false\n            }, widget);\n            if (w.edit) {\n                var edit = {\n                    reload: true,\n                    immediate: false,\n                    apply: defaultApplyFunction\n                };\n                angular.extend(edit, w.edit);\n                w.edit = edit;\n            }\n            //OUW-1610\n            if (!w.config) {\n                w.config = {};\n            }\n            widgets[name] = w;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#widgetsPath\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Sets the path to the directory which contains the widgets. The widgets\n         * path is used for widgets with a templateUrl which contains the\n         * placeholder {widgetsPath}. The placeholder is replaced with the\n         * configured value, before the template is loaded, but the template is\n         * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\n         * The default value of widgetPaths is ''.\n         *\n         *\n         * @param {string} path to the directory which contains the widgets\n         *\n         * @returns {Object} self\n         */\n        this.widgetsPath = function (path) {\n            widgetsPath = path;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#messageTemplate\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the template for messages.\n         *\n         * @param {string} template for messages.\n         *\n         * @returns {Object} self\n         */\n        this.messageTemplate = function (template) {\n            messageTemplate = template;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#loadingTemplate\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the template which is displayed as\n         * long as the widget resources are not resolved.\n         *\n         * @param {string} template loading template\n         *\n         * @returns {Object} self\n         */\n        this.loadingTemplate = function (template) {\n            loadingTemplate = template;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#customWidgetTemplatePath\n         * @propertyOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the container template for the widgets\n         *\n         * @param {string} path to the custom widget template\n         *\n         * @returns {Object} self\n         */\n        this.customWidgetTemplatePath = function (templatePath) {\n            customWidgetTemplatePath = templatePath;\n            return this;\n        };\n\n        /**\n         * @ngdoc service\n         * @name adf.dashboard\n         * @description\n         *\n         * The dashboard holds all options and  widgets.\n         *\n         * @property {Array.<Object>} widgets Array of registered widgets.\n         * @property {string} widgetsPath Default path for widgets.\n         * @property {string} messageTemplate Template for messages.\n         * @property {string} loadingTemplate Template for widget loading.\n         * * @property {string} customWidgetTemplatePath Changes the container template for the widgets\n         *\n         * @returns {Object} self\n         */\n        this.$get = function () {\n            var cid = 0;\n\n            return {\n                widgets: widgets,\n                widgetsPath: widgetsPath,\n                messageTemplate: messageTemplate,\n                loadingTemplate: loadingTemplate,\n                customWidgetTemplatePath: customWidgetTemplatePath,\n\n                /**\n                 * @ngdoc method\n                 * @name adf.dashboard#id\n                 * @methodOf adf.dashboard\n                 * @description\n                 *\n                 * Creates an ongoing numeric id. The method is used to create ids for\n                 * columns and widgets in the dashboard.\n                 */\n                id: function () {\n                    return new Date().getTime() + '-' + (++cid);\n                },\n\n                /**\n                 * @ngdoc method\n                 * @name adf.dashboard#idEqual\n                 * @methodOf adf.dashboard\n                 * @description\n                 *\n                 * Checks if the given ids are equal.\n                 *\n                 * @param {string} id widget or column id\n                 * @param {string} other widget or column id\n                 */\n                idEquals: function (id, other) {\n                    // use toString, because old ids are numbers\n                    return ((id) && (other)) && (id.toString() === other.toString());\n                }\n            };\n        };\n\n    });\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf')\n    .directive('adfWidgetContent', function($log, $q, widgetService,\n        $compile, $controller, $injector, dashboard, $translate) {\n\n        function renderError($element, msg) {\n            $log.warn(msg);\n            $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\n        }\n\n        function compileWidget($scope, $element, currentScope, configChanged) {\n            var model = $scope.model;\n            if (!model) {\n                $translate('ADF.ERROR.MODEL_IS_UNDEFINED').then(function(translateMessage) {\n                    renderError($element, translateMessage);\n                });\n                return currentScope;\n            }\n\n            var content = $scope.content;\n\n            if (!content) {\n                $translate('ADF.ERROR.WIDGET_FOR_DEPRECTATED', {\n                    title: model.title\n                }).then(function(translateMessage) {\n                    renderError($element, translateMessage);\n                });\n                return currentScope;\n            }\n\n            var extra = $scope.extra;\n            var newScope = currentScope;\n\n            if (newScope) {\n                var is_menu = newScope.menu !== undefined && newScope.menu !== null && (!newScope.isPaginationEnable || !newScope.isPaginationEnable());\n                if (is_menu || configChanged || !angular.isFunction(newScope.reloadData)) {\n                    if ($scope.navOptionsHandler) {\n                        $scope.navOptionsHandler.firstLoad = true;\n                    }\n                    newScope = renderWidget($scope, $element, currentScope, model, content, extra);\n                } else {\n                    var is_itemsPerPage = newScope.itemsPerPage !== undefined && newScope.itemsPerPage !== null;\n                    if (is_itemsPerPage || newScope.page) {\n                        newScope.page = 1;\n                    }\n                    newScope.reloadData();\n                }\n            } else {\n                if ($scope.navOptionsHandler) {\n                    $scope.navOptionsHandler.firstLoad = true;\n                }\n\n                newScope = renderWidget($scope, $element, currentScope, model, content, extra);\n            }\n\n            function _getWindowTime(type) {\n                if (type === 'custom') {\n                    return {\n                        from: newScope.config.windowFilter.from,\n                        to: newScope.config.windowFilter.to\n                    };\n                } else if (type === 'today') {\n                    return {\n                        from: window.moment().startOf('day')\n                    };\n                }\n                var from = window.moment().startOf('day').subtract(1, type);\n                return {\n                    from: from._d\n                };\n            }\n\n\n\n            newScope.config.getWindowTime = function() {\n                var windowFilter = newScope.config.windowFilter;\n                if (windowFilter && windowFilter.type) {\n                    var winTime = _getWindowTime(windowFilter.type);\n                    /* jshint ignore:start */\n                    if (!window.eval(newScope.config.windowFilter.rawdate)) {\n                        for (var key in winTime) {\n                            winTime[key] = window.moment(winTime[key]).format();\n                        }\n                        winTime['rawdate'] = true;\n                    }\n                    /* jshint ignore:end */\n                    return winTime;\n                }\n            };\n\n            if (extra) {\n                newScope.editing = extra.editing ? true : false;\n                newScope.extraData = extra;\n            }\n\n            return newScope;\n        }\n\n        function renderWidget($scope, $element, currentScope, model, content, extra) {\n            // display loading template\n            $element.html(dashboard.loadingTemplate);\n\n            // create new scope\n            var templateScope = $scope.$new();\n\n            // pass config object to scope\n            if (!model.config) {\n                model.config = {};\n            }\n\n            templateScope.config = model.config;\n            templateScope.editing = extra && extra.editing;\n\n            if (extra) {\n                templateScope.extra = extra;\n            }\n\n            var _from = currentScope || templateScope.config;\n            templateScope.selectionManager = (_from) ? _from.selectionManager : undefined;\n\n            // local injections\n            var base = {\n                $scope: templateScope,\n                widget: model,\n                config: model.config\n            };\n\n            // get resolve promises from content object\n            var resolvers = {};\n            resolvers.$tpl = widgetService.getTemplate(content);\n            if (content.resolve) {\n                angular.forEach(content.resolve, function(promise, key) {\n                    if (angular.isString(promise)) {\n                        resolvers[key] = $injector.get(promise);\n                    } else {\n                        resolvers[key] = $injector.invoke(promise, promise, base);\n                    }\n                });\n            }\n\n            // resolve all resolvers\n            $q.all(resolvers).then(function(locals) {\n                angular.extend(locals, base);\n\n                // pass resolve map to template scope as defined in resolveAs\n                if (content.resolveAs) {\n                    templateScope[content.resolveAs] = locals;\n                }\n\n                // compile & render template\n                var template = locals.$tpl;\n                $element.html(template);\n                if (content.controller) {\n                    var templateCtrl = $controller(content.controller, locals);\n                    if (content.controllerAs) {\n                        templateScope[content.controllerAs] = templateCtrl;\n                    }\n                    $element.children().data('$ngControllerController', templateCtrl);\n                }\n                $compile($element.contents())(templateScope);\n            }, function(reason) {\n                // handle promise rejection\n                var msg = 'ADF.ERROR.COULD_NOT_RESOLVE_ALL_PROMISSES';\n                $translate(msg, {\n                    reason: (reason ? ': ' + reason : reason)\n                }).then(function(translateMessage) {\n                    renderError($element, translateMessage);\n                });\n            });\n\n            // destroy old scope\n            if (currentScope) {\n                currentScope.$destroy();\n            }\n\n            return templateScope;\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            require: '?^^adfWidgetGrid',\n            scope: {\n                model: '=',\n                content: '=',\n                extra: '=',\n                navOptionsHandler: '=?',\n                filterHandler: '=?',\n                widgetActionsHandler: '=?'\n            },\n            link: function($scope, $element, attrs, adfWidgetGridCtrl) {\n                var currentScope = compileWidget($scope, $element, null);\n                if (adfWidgetGridCtrl) {\n                    $scope.search = $scope.search || {};\n                    adfWidgetGridCtrl.updateWidgetFilters($scope.model.config.filter && $scope.model.config.filter.id);\n                }\n\n                var widgetConfigChangedEvt = $scope.$on('widgetConfigChanged', function(event, changeWidgets) {\n                    if (changeWidgets) {\n                        if (changeWidgets.indexOf($scope.model.wid) !== -1 && adfWidgetGridCtrl) {\n                            adfWidgetGridCtrl.updateWidgetFilters($scope.model.config.filter && $scope.model.config.filter.id, true);\n                        }\n                    } else {\n                        currentScope = compileWidget($scope, $element, currentScope, true);\n                    }\n                });\n\n                var widgetReloadEvt = $scope.$on('widgetReload', function(event, reloadWidgets) {\n                    var reloadWidget = true;\n                    if (reloadWidgets && reloadWidgets.length > 0) {\n                        reloadWidget = reloadWidgets.indexOf($scope.model.wid) !== -1;\n                    }\n                    if (reloadWidget) {\n                        currentScope = compileWidget($scope, $element, currentScope, false);\n                        if (adfWidgetGridCtrl && adfWidgetGridCtrl.updateWidgetFilters) {\n                            adfWidgetGridCtrl.updateWidgetFilters($scope.model.config.filter && $scope.model.config.filter.id);\n                        }\n                    }\n                });\n\n                $scope.$on('destroy', function() {\n                    widgetConfigChangedEvt();\n                    widgetReloadEvt();\n                });\n            }\n        };\n    });\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/**\n * The widget service provide helper functions to render widgets and their content.\n */\nangular.module('adf')\n    .factory('widgetFilter', function() {\n        \n\n        var launchSearchingAdv = function($scope) {\n            //modificas\n            //$scope.filter.typeFilter = 0;\n\n\n            var advancedFilterScope = $scope.$new();\n            var advancedFilterTemplate = adfTemplatePath + 'widget-advanced-filter.html';\n            var opts = {\n                scope: advancedFilterScope,\n                templateUrl: advancedFilterTemplate,\n                backdrop: 'static',\n                size: 'lg',\n                animation: true\n            };\n        }\n\n\n        return {\n            launchSearchingAdv: launchSearchingAdv\n        };\n    });\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf')\n    .directive('adfWidgetGrid', function($injector, $q, $log, $uibModal, $rootScope, $interval, dashboard, adfTemplatePath, Filter, queryService, $timeout, $api, toastr, $translate) {\n        var _setFilterType = function(selectFilter, $scope) {\n            var config = $scope.config || {};\n            var filter = config.filter = config.filter ? config.filter : {};\n            var id = filter.id = selectFilter && filter.id;\n            filter.headersFilter = selectFilter && filter.headersFilter;\n\n            if (!$scope.filter) {\n                $scope.filter = {};\n            }\n            switch (filter.type) {\n                case 'advanced':\n                    $scope.filter.typeFilter = id ? 2 : 0;\n                    $scope.search = {\n                        oql: filter.oql,\n                        json: filter.value,\n                        queryAsString: filter.queryAsString || '',\n                        queryFields: filter.queryFields || undefined\n                    };\n                    break;\n                case 'basic':\n                    $scope.filter.typeFilter = id ? 2 : 1;\n                    $scope.search = {\n                        quick: filter.value\n                    };\n\n                    break;\n                default:\n                    $scope.filter.typeFilter = id ? 2 : 1;\n                    $scope.search = {\n                        quick: filter.value = ''\n                    };\n                    break;\n            }\n            $scope.search.id = selectFilter;\n        };\n\n        function preLink($scope) {\n            var definition = $scope.definition;\n\n            if (definition) {\n                var w = dashboard.widgets[definition.type];\n                if (w) {\n                    // pass title\n                    if (!definition.title) {\n                        definition.title = w.title;\n                    }\n\n                    definition.titleTemplateUrl = adfTemplatePath + 'widget-grid-title.html';\n\n                    if (!definition.editTemplateUrl) {\n                        definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\n                        if (w.editTemplateUrl) {\n                            definition.editTemplateUrl = w.editTemplateUrl;\n                        }\n                    }\n\n                    if (!definition.titleTemplateUrl) {\n                        definition.frameless = w.frameless;\n                    }\n\n                    if (!definition.styleClass) {\n                        definition.styleClass = w.styleClass;\n                    }\n\n                    // set id for sortable\n                    if (!definition.wid) {\n                        definition.wid = dashboard.id();\n                    }\n\n                    // pass copy of widget to scope\n                    $scope.widget = angular.copy(w);\n\n                    // create config object\n                    var config = definition.config;\n                    if (config) {\n                        if (angular.isString(config)) {\n                            config = angular.fromJson(config);\n                        }\n                    } else {\n                        config = {};\n                    }\n                    // pass config to scope\n                    $scope.config = config;\n\n                    if (typeof $scope.widget.show_modal_footer === 'undefined') {\n                        $scope.widget.show_modal_footer = true;\n                    }\n\n                    if (typeof $scope.widget.show_reload_config === 'undefined') {\n                        $scope.widget.show_reload_config = true;\n                    }\n\n                    // collapse exposed $scope.widgetState property\n                    if (!$scope.widgetState) {\n                        $scope.widgetState = {};\n                        $scope.widgetState.isCollapsed = (w.collapsed === true) ? w.collapsed : false;\n                    }\n\n                } else {\n                    $log.warn('could not find widget ' + definition.type);\n                }\n            } else {\n                $log.debug('definition not specified, widget was probably removed');\n            }\n        }\n\n        function postLink($scope, $element) {\n            var definition = $scope.definition;\n            if (!definition) {\n                $log.debug('widget not found');\n                return;\n            }\n            var config = $scope.config || {};\n\n            // bind close function\n            var deleteWidget = function() {\n                $element.remove();\n                $rootScope.$broadcast('adfWidgetRemovedFromGrid', definition);\n            };\n\n            $scope.remove = function() {\n                if ($scope.options.enableConfirmDelete) {\n                    var deleteScope = $scope.$new();\n\n                    var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\n                    if (definition.deleteTemplateUrl) {\n                        deleteTemplateUrl = definition.deleteTemplateUrl;\n                    }\n                    var opts = {\n                        scope: deleteScope,\n                        templateUrl: deleteTemplateUrl,\n                        backdrop: 'static'\n                    };\n                    var instance = $uibModal.open(opts);\n\n                    deleteScope.closeDialog = function() {\n                        instance.close();\n                        deleteScope.$destroy();\n                    };\n                    deleteScope.deleteDialog = function() {\n                        deleteWidget();\n                        deleteScope.closeDialog();\n                    };\n                } else {\n                    deleteWidget();\n                }\n            };\n\n\n            $scope.print = function() {\n                if (!$scope.editMode) {\n                    $scope.$broadcast('widgetPrint');\n                }\n            };\n\n            $scope.isExecuteOperationEnabled = function() {\n\n                if (config.entityKey)\n                    return true;\n                var filter = config.filter;\n\n                if (filter) {\n                    if (filter.headersFilter && filter.headersFilter.length > 0) {\n                        return true;\n                    } else {\n                        if (filter.type === 'basic') {\n                            return filter.value && filter.value.length > 0;\n                        }\n                        if (filter.type === 'advanced') {\n                            return filter.value && filter.value.length > 2 && filter.oql;\n                        }\n                    }\n                }\n\n                return false;\n            };\n\n            $scope.executeOperation = function() {\n                if (!$scope.editMode) {\n\n                    $scope.$parent.$broadcast('widgetExecuteOperation');\n                }\n            };\n\n            _setFilterType('init', $scope);\n\n            $scope.launchSearching = function() {\n                if ($scope.widget && !$scope.widget.preventRefreshFilterEvent) {\n                    var widget = {\n                        definition: definition,\n                        element: $element\n                    };\n\n                    $rootScope.$broadcast('adfLaunchSearchingFromWidget', widget, $scope.config.filter);\n                }\n\n                $scope.reload();\n            };\n\n            $scope.launchSearchingAdv = function() {\n                $scope.filter.typeFilter = 0;\n\n                var advancedFilterScope = $scope.$new();\n                var advancedFilterTemplate = adfTemplatePath + 'widget-advanced-filter.html';\n                var opts = {\n                    scope: advancedFilterScope,\n                    templateUrl: advancedFilterTemplate,\n                    backdrop: 'static',\n                    size: 'lg',\n                    animation: true\n                };\n                advancedFilterScope.fieldsSearch = { selected: [] };\n                advancedFilterScope.datastreamsSearch = { selected: [] };\n\n                // advancedFilterScope.model = {};\n                advancedFilterScope.enableApply = false;\n                advancedFilterScope.evaluating = false;\n\n                advancedFilterScope.type = $scope.definition.Ftype\n                if ($scope.search.queryFields) {\n                    $scope.search.queryFields.forEach(function(item) {\n                        advancedFilterScope.fieldsSearch.selected.push(item.name);\n                        advancedFilterScope.datastreamsSearch.selected.push({ identifier: item.name });\n\n                    });\n                }\n                advancedFilterScope.addextraElements = function(field) {\n                    if (field.name === 'provision.device.location') {\n                        field.existsOptions = ['true', 'false']\n                        field.disabledComparators = []\n                    } else {\n                        field.disabledComparators = [\n                            8\n                        ];\n                    }\n                   field.existsOptions = ['true', 'false'];\n                   if ($scope.definition.Ftype === 'entities' || $scope.definition.Ftype === 'tickets'){\n                    field.dsOptions = ['', '._current.value',\n                        '._current.source',\n                        '._current.at',\n                        '._current.date',\n                        '._current.provType',\n                        '.scoring.performance',\n                        '.scoring.qrating.version',\n                        '.scoring.qrating.max_score',\n                        '.scoring.qrating.ideal.value',\n                        '.scoring.qrating.ideal.label',\n                        '.scoring.qrating.max_desired.value',\n                        '.scoring.qrating.max_desired.label',\n                        '.scoring.qrating.max_allowed.value',\n                        '.scoring.qrating.max_allowed.label',\n                        '.scoring.qrating.min_desired.value',\n                        '.scoring.qrating.min_desired.label',\n                        '.scoring.qrating.min_required.value',\n                        '.scoring.qrating.min_required.label',\n                    ];\n                }\n                    field.schemaForm = {\n                        type: \"object\",\n                        properties: {\n                            data: field.schema\n                        }\n                    };\n                    field.form = [{\n                        key: 'data',\n                        notitle: true,\n                        fieldHtmlClass:field.schemaName\n                    }];\n                    return field;\n                }\n                advancedFilterScope.removeextraElements = function(field) {\n                    delete field.existsOptions;\n                    delete field.dsOptions;\n                    delete field.form;\n                    delete field.schemaForm;\n                    delete field.model;\n                    return field;\n                }\n\n\n                advancedFilterScope.fields = $scope.search.queryFields ? $scope.search.queryFields.map(function(field) { return advancedFilterScope.addextraElements(field) }) : [];\n\n                if ($scope.definition.Ftype === 'entities' || $scope.definition.Ftype === 'tickets') {\n                    advancedFilterScope.comparators = [\n                        { id: 1, name: 'eq', value: '=', dataTemplate: '../src/templates/input-template.html', defaultData: [] },\n                        { id: 2, name: 'neq', value: '!=', dataTemplate: '../src/templates/input-template.html', defaultData: [] },\n                        { id: 3, name: 'like', value: '~', dataTemplate: '../src/templates/input-template.html', defaultData: [] },\n                        { id: 4, name: 'gt', value: '>', dataTemplate: '../src/templates/input-template.html', defaultData: [] },\n                        { id: 5, name: 'gte', value: '>=', dataTemplate: '../src/templates/input-template.html', defaultData: [] },\n                        { id: 6, name: 'lt', value: '<', dataTemplate: '../src/templates/input-template.html', defaultData: [] },\n                        { id: 7, name: 'lte', value: '<=', dataTemplate: '../src/templates/input-template.html', defaultData: [] },\n                        { id: 8, name: 'exists', value: '?', dataTemplate: '../src/templates/exist-template.html', defaultData: [] },\n                        { id: 9, name: 'in', value: '[]', dataTemplate: '../src/templates/in-template-entities.html', defaultData: [], dataType: 'array' },\n                    ];\n                    $api().basicTypesSearchBuilder().execute().then(function(response) {\n                        if (response.statusCode === 200) {\n                            advancedFilterScope.jsonSchemas = response.data.definitions;\n                        } else {\n                            advancedFilterScope.jsonSchemas = {};\n                        }\n                    }).catch(function(err) {\n                        advancedFilterScope.jsonSchemas = {};\n                        console.error(err);\n                    });\n                } else {\n                    advancedFilterScope.comparators = [\n                        { id: 1, name: 'eq', value: '=' },\n                        { id: 2, name: 'neq', value: '!=' },\n                        { id: 3, name: 'like', value: '~' },\n                        { id: 4, name: 'gt', value: '>' },\n                        { id: 5, name: 'gte', value: '>=' },\n                        { id: 6, name: 'lt', value: '<' },\n                        { id: 7, name: 'lte', value: '<=' },\n                        { id: 8, name: 'in', value: '[]', dataTemplate: '../src/templates/filter/in-template.html', defaultData: [], dataType: 'array' },\n                    ];\n                }\n\n                advancedFilterScope.elementSelected = function($item) {\n                    advancedFilterScope.fields.push(advancedFilterScope.addextraElements({\n                        id: Math.floor((Math.random() * 10000) + 1),\n                        name: $item\n                    }));\n                };\n\n                advancedFilterScope.onSelectDatastream = function($item) {\n                    var schemaName = ($item.schema && $item.schema.$ref) ? $item.schema.$ref.split('/').splice(-1)[0] : undefined;\n                    var schema = schemaName ? advancedFilterScope.jsonSchemas[schemaName] : ($item.schema ? $item.schema : undefined);\n                    delete schema.javaEnumNames;\n                    var objectSchema = {\n                        type: \"object\",\n                        properties: {\n                            data: schema\n                        }\n                    };   \n                    $timeout(function() {                 \n                        advancedFilterScope.fields.push(advancedFilterScope.addextraElements({\n                            id: Math.floor((Math.random() * 10000) + 1),\n                            name: $item.identifier,\n                            type: schema.type,\n                            schemaForm: objectSchema,\n                            schema: schema,\n                            form: [{\n                                key: 'data',\n                                notitle: true\n                            }],\n                            schemaName: schemaName\n                        }));\n                    },100);\n                };\n\n                advancedFilterScope.onDeleteDatastream = function($item) {\n                    advancedFilterScope.fields = advancedFilterScope.fields.filter(function(item) {\n                        return item.name !== $item.identifier\n                    });\n                };\n\n                advancedFilterScope.elementDeleted = function($item) {\n                    advancedFilterScope.fields = advancedFilterScope.fields.filter(function(item) {\n                        return item.name !== $item\n                    });\n                };\n\n                advancedFilterScope.clearFieldsSearch = function() {\n                    advancedFilterScope.advancedFilter_error = null\n                    advancedFilterScope.fields = [];\n                    advancedFilterScope.fieldsSearch = { selected: [] };\n                    advancedFilterScope.datastreamsSearch = { selected: [] };\n\n                };\n\n                advancedFilterScope.restoreSelection = function() {\n                    selectionScope.currentSelection = {\n                        selected: selectionScope.selectedItems\n                    };\n                };\n\n                advancedFilterScope.operators = [\n                    { name: 'and', value: '&&' },\n                    { name: 'or', value: '||' }\n\n                ];\n                advancedFilterScope.queryBuilderfilter = {\n                    group: { operator: advancedFilterScope.operators[0], rules: [] }\n\n                };\n                advancedFilterScope.settings = {\n                    nesting: true,\n                    addIconClass: ' glyphicon glyphicon-plus',\n                    removeIconClass: 'glyphicon glyphicon-trash',\n                    addButtonClass: 'btn btn-sm btn-primary',\n                    removeButtonClass: 'btn btn-sm btn-danger'\n                };\n                advancedFilterScope.queryAsString = $scope.search.queryAsString ? $scope.search.queryAsString : '';\n\n                advancedFilterScope.filterJson = {};\n                advancedFilterScope.advancedFilter_error = null;\n\n                advancedFilterScope.evaluateQuery = function() {\n                    try {\n                        advancedFilterScope.evaluating = true;       \n                        advancedFilterScope.oql = queryService.asReadableFilter(advancedFilterScope.queryBuilderfilter.group);\n                        advancedFilterScope.queryAsString = queryService.asStringFilter(advancedFilterScope.queryBuilderfilter.group);\n                        Filter.parseQuery(advancedFilterScope.oql || '')\n                            .then(function(data) {\n                                $timeout(function() {\n                                    advancedFilterScope.enableApply = true;\n                                    advancedFilterScope.evaluating = false;       \n                               });\n                                advancedFilterScope.filterJson = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\n                                advancedFilterScope.unknownWords = '';\n                                advancedFilterScope.advancedFilter_error = null;\n\n                            })\n                            .catch(function(err) {\n                                console.log(err);\n                                advancedFilterScope.advancedFilter_error = err;\n                                $timeout(function() {\n                                    advancedFilterScope.enableApply = false;\n                                    advancedFilterScope.evaluating = false;    \n                               });\n                                toastr.error($translate.instant('TOASTR.FILTER_IS_MALFORMED'));\n                            });\n                    } catch (err) {\n                        advancedFilterScope.advancedFilter_error = err;\n                        advancedFilterScope.enableApply = false;\n                        toastr.error($translate.instant('TOASTR.FILTER_IS_MALFORMED'));\n\n                    }\n                }\n\n                advancedFilterScope.applyQueryBuilderFilter = function() {\n                    var fields = angular.copy(advancedFilterScope.fields);\n                    $scope.config.filter = {\n                        type: 'advanced',\n                        oql: advancedFilterScope.oql ? advancedFilterScope.oql : '',\n                        queryAsString: advancedFilterScope.queryAsString,\n                        value: advancedFilterScope.filterJson || '',\n                        headersFilter: $scope.config.filter.headersFilter || undefined,\n                        queryFields: fields.length > 0 ? fields.map(function(field) {\n                            return advancedFilterScope.removeextraElements(field);\n                        }) : fields\n                    };\n                    var executeSearch = true;\n                    if (executeSearch) {\n                        $scope.launchSearching();\n                        $scope.filterApplied = true;\n                        advancedFilterScope.closeDialog();\n                    }\n                    else {\n                        advancedFilterScope.closeDialog();\n                    }\n\n                }\n                advancedFilterScope.$watch('queryBuilderfilter', function(newValue) {\n                    advancedFilterScope.enableApply = false;\n\n                }, true);\n\n                $scope.$on('clearFilter', function(index) {\n                    advancedFilterScope.enableApply = true;\n                });\n                advancedFilterScope.clearQuery = function() {\n                    delete advancedFilterScope.oql;\n                    delete advancedFilterScope.queryAsString;\n                    delete advancedFilterScope.json;\n\n                    advancedFilterScope.filterJson = undefined;\n                    advancedFilterScope.queryBuilderfilter = {\n                        group: { operator: advancedFilterScope.operators[0], rules: [] }\n                    };\n                    advancedFilterScope.clearFieldsSearch();\n                    $timeout(function() {\n                        advancedFilterScope.enableApply = true;\n                   });\n\n                }\n                var instance = $uibModal.open(opts);\n                // Cierra sin realizar ninguna acción\n                advancedFilterScope.closeDialog = function() {\n                    instance.close();\n                    advancedFilterScope.$destroy();\n                };\n\n                /*if (!$scope.filterApplied) {\n                    var executeSearch = true;\n                    $scope.search.quick = '';\n                    if ($scope.search.json === '' || $scope.search.json === '{}' || (!angular.isString($scope.search.json) && Object.keys($scope.search.json).length === 0)) {\n                        if ($scope.search.oql && $scope.search.oql.trim().length > 0) {\n                            toastr.error($translate.instant('TOASTR.FILTER_IS_MALFORMED'));\n                            executeSearch = false;\n                        } else {\n                            $scope.config.filter = {\n                                type: 'advanced',\n                                oql: '',\n                                value: ''\n                            };\n                        }\n                    } else {\n                        $scope.config.filter = {\n                            type: 'advanced',\n                            oql: $scope.search.oql,\n                            value: $scope.search.json,\n                            headersFilter: $scope.config.filter.headersFilter\n                        };\n                    }\n\n                    if (executeSearch) {\n                        $scope.launchSearching();\n                        $scope.filterApplied = true;\n                    }\n                }*/\n            };\n\n            $scope.launchSearchingQuick = function() {\n                if (!$scope.filterApplied) {\n                    if (!$scope.search) {\n                        $scope.search = {};\n                    }\n                    $scope.search.oql = $scope.search.json = '';\n                    $scope.config.filter = {\n                        type: 'basic',\n                        value: $scope.search.quick,\n                        headersFilter: $scope.config.filter.headersFilter\n                    };\n                    $scope.launchSearching();\n                    $scope.filterApplied = true;\n                }\n            };\n\n            $scope.launchSearchingShared = function() {\n                var shared = $scope.search.id;\n                if (shared) {\n                    shared.filter.id = shared.wid;\n                    $scope.config.filter = shared.filter;\n                } else {\n                    $scope.config.filter = {};\n                }\n                $scope.launchSearching();\n                $scope.filterApplied = true;\n            };\n\n            $scope.filterSharedSelect = function($item, $model) {\n                $scope.filterApplied = false;\n                $scope.launchSearchingShared();\n            };\n            $scope.filterSharedRemove = function($item, $model) {\n                $scope.filterApplied = false;\n            };\n\n            $scope.enter = function(event) {\n                var keycode = (event.keyCode ? event.keyCode : event.which);\n                if (keycode === 13) {\n                    if ($scope.filter.typeFilter === 0)\n                        $scope.launchSearchingAdv();\n                    if ($scope.filter.typeFilter === 1)\n                        $scope.launchSearchingQuick();\n                    if ($scope.filter.typeFilter === 2)\n                        $scope.launchSearchingShared();\n                } else if (keycode === 19) {\n                    $scope.filter.showFinalFilter = !$scope.filter.showFinalFilter;\n                } else {\n                    $scope.filterApplied = false;\n                }\n            };\n\n\n            $scope.customSelectors = [];\n            $scope.getCustomSelectors = function() {\n                if ($scope.config.customSelectors) {\n                    $scope.customSelectors = $scope.config.customSelectors;\n                } else {\n                    config.widgetSelectors().findFields('').then(function(fields) {\n                        $scope.customSelectors = fields;\n                        $scope.$apply();\n                    }).catch(function(err) {\n                        $log.error(err);\n                    });\n                }\n            };\n\n            $scope.changeDirection = function() {\n                var direction = config.sort.direction;\n                if (direction === 'DESCENDING') {\n                    $scope.config.sort.direction = 'ASCENDING';\n                } else if (direction === 'ASCENDING') {\n                    $scope.config.sort.direction = 'DESCENDING';\n                }\n                $scope.reload();\n            };\n\n            $scope.debugQuery = function() {\n                Filter.parseQuery($scope.search.oql || '')\n                    .then(function(data) {\n                        $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\n                        $scope.unknownWords = '';\n                        $scope.filter_error = null;\n                    })\n                    .catch(function(err) {\n                        $scope.filter_error = err;\n                        // Tratar el error\n                    });\n\n            };\n\n            $scope.autocomplete_options = function() {\n                var autocomplete_options = {\n                    suggest: Filter.suggest_field_delimited,\n                    customSelectors: config.widgetSelectors()\n                };\n\n                return autocomplete_options;\n\n            };\n\n            // Multiple selection\n            $scope.selectedItems = definition.selectedItems || {};\n\n            // Gestor de seleccion\n            $scope.selectionManager = {\n                currentSelection: $scope.selectedItems,\n                isSelected: function(key, obj) {\n                    if ($scope.selectedItems[key] && !angular.isUndefined(obj)) {\n                        $scope.selectedItems[key].data = obj;\n                    }\n\n                    return $scope.selectedItems[key] ? true : false;\n                },\n                totalSelected: function() {\n                    return Object.keys($scope.selectedItems).length;\n                }\n            };\n\n            if (definition.config.sendSelection) {\n\n                $scope.sendEntities = function() {\n                    definition.config.sendSelection($scope.selectedItems);\n                    $scope.$parent.closeDialog();\n                };\n\n                if (definition.config.selectedItems) {\n                    $scope.selectedItems = angular.copy(definition.config.selectedItems);\n                }\n\n                $scope.config.selectionManager = $scope.selectionManager;\n            }\n\n            $scope.manageSelectedItems = function() {\n                var selectionScope = $scope.$new();\n\n                if (definition.config.sendSelection) {\n                    delete config.selectionConfig.operationTypes;\n                    delete config.selectionConfig.filterTypes;\n                }\n\n                selectionScope.selectionConfig = config.selectionConfig;\n\n                selectionScope.selectedItems = [];\n                angular.forEach($scope.selectedItems, function(value, key) {\n                    selectionScope.selectedItems.push({\n                        key: key,\n                        value: value\n                    });\n                });\n\n                selectionScope.currentSelection = {\n                    selected: selectionScope.selectedItems\n                };\n\n                var manageItemsSelectedTemplate = adfTemplatePath + 'widget-selection.html';\n                var opts = {\n                    scope: selectionScope,\n                    templateUrl: manageItemsSelectedTemplate,\n                    backdrop: 'static',\n                    size: 'lg',\n                    animation: true\n                };\n\n                var instance = $uibModal.open(opts);\n\n                selectionScope.restoreSelection = function() {\n                    selectionScope.currentSelection = {\n                        selected: selectionScope.selectedItems\n                    };\n                };\n\n                selectionScope.clearSelection = function() {\n                    selectionScope.currentSelection.selected = [];\n                };\n\n                // Cierra sy guarda los datos de nueva selección\n                selectionScope.applyFilter = function(type) {\n                    var customOql = selectionScope.selectionConfig.filterAction(selectionScope.currentSelection.selected, type);\n\n                    if (!angular.isUndefined(customOql) && customOql !== null) {\n                        $scope.filter.typeFilter = 0;\n                        Filter.parseQuery(customOql).then(function(data) {\n                            $scope.search.oql = customOql;\n                            $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\n                            $scope.unknownWords = '';\n                            $scope.filter_error = null;\n\n                            $scope.launchSearchingAdv();\n                        }).catch(function(err) {\n                            $scope.filter_error = err;\n                        });\n                    }\n                };\n\n                selectionScope.executeOperation = function(operationType) {\n                    if (!$scope.editMode) {\n                        $scope.$parent.$broadcast('widgetExecuteOperation', {\n                            'selectedItems': selectionScope.currentSelection.selected,\n                            'type': operationType\n                        });\n                    }\n                };\n\n                // Cierra sy guarda los datos de nueva selección\n                selectionScope.saveChangesDialog = function() {\n                    var finalSelection = {};\n                    angular.forEach(selectionScope.currentSelection.selected, function(data, idx) {\n                        finalSelection[data.key] = {\n                            data: data.value.data,\n                            visible: data.value.visible\n                        };\n                    });\n\n                    $scope.selectedItems = angular.copy(finalSelection);\n                    $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n\n                    $scope.selectionManager.lastItem = {};\n                    $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n\n                    instance.close();\n                    selectionScope.$destroy();\n                };\n\n                // Cierra sin realizar ninguna acción\n                selectionScope.closeDialog = function() {\n                    instance.close();\n                    selectionScope.$destroy();\n                };\n            };\n\n\n            // bind edit function\n            $scope.edit = function(deleteIfNotConfigured) {\n                var editScope = $scope.$new();\n                editScope.definition = angular.copy(definition);\n\n                var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\n                if (definition.editTemplateUrl) {\n                    adfEditTemplatePath = definition.editTemplateUrl;\n                }\n\n                var opts = {\n                    scope: editScope,\n                    templateUrl: adfEditTemplatePath,\n                    backdrop: 'static',\n                    size: 'lg'\n                };\n\n                var instance = $uibModal.open(opts);\n\n                editScope.closeDialog = function(value) {\n                    instance.close();\n                    if (deleteIfNotConfigured && value === 'close') {\n                        $rootScope.$broadcast('adfWidgetRemovedFromGrid', editScope.definition);\n                    }\n\n                    editScope.$destroy();\n                };\n\n                // TODO create util method\n                function createApplyPromise(result) {\n                    var promise;\n                    if (typeof result === 'boolean') {\n                        var deferred = $q.defer();\n                        if (result) {\n                            deferred.resolve();\n                        } else {\n                            deferred.reject();\n                        }\n                        promise = deferred.promise;\n                    } else {\n                        promise = $q.when(result);\n                    }\n                    return promise;\n                }\n\n                editScope.saveDialog = function() {\n                    // clear validation error\n                    editScope.validationError = null;\n\n                    // build injection locals\n                    var widget = $scope.widget;\n\n                    // create a default apply method for widgets\n                    // without edit mode\n                    // see issue https://goo.gl/KHPQLZ\n                    var applyFn;\n                    if (widget.edit) {\n                        applyFn = widget.edit.apply;\n                    } else {\n                        applyFn = function() {\n                            return true;\n                        };\n                    }\n\n                    var editScopeDefinition = editScope.definition.config || {};\n                    // injection locals\n                    var locals = {\n                        widget: widget,\n                        definition: editScope.definition,\n                        config: editScopeDefinition\n                    };\n\n                    // invoke apply function and apply if success\n                    var result = $injector.invoke(applyFn, applyFn, locals);\n                    createApplyPromise(result).then(function() {\n                        definition.title = editScope.definition.title;\n                        if (editScope.definition.type === 'summaryChart') {\n                            if (editScope.definition.config.type === 'ENTITIES_VALUES') {\n                                editScope.definition.Ftype = 'entities';\n                                definition.Ftype = 'entities';\n                            } else {\n                                editScope.definition.Ftype = editScope.definition.config.type.toLowerCase();\n                                definition.Ftype = editScope.definition.config.type.toLowerCase();\n                            }\n                        }\n                        angular.extend(definition.config, editScopeDefinition);\n\n                        editScope.closeDialog();\n\n                        if (widget.edit && widget.edit.reload) {\n                            $scope.setReloadTimeout();\n                            // reload content after edit dialog is closed\n                            $scope.$broadcast('widgetConfigChanged');\n                        }\n                    }, function(err) {\n                        if (err) {\n                            editScope.validationError = err;\n                        } else {\n                            editScope.validationError = 'VALIDATION_DURING_APPLY_FAILED';\n                        }\n                    });\n                };\n\n            };\n\n\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            templateUrl: adfTemplatePath + 'widget-grid.html',\n            scope: {\n                definition: '=',\n                editMode: '=',\n                options: '=',\n                widgetState: '='\n            },\n            controller: function($scope, $element) {\n                $scope.filter = {\n                    typeFilter: 1,\n                    showFilter: false,\n                    showFinalFilter: false\n                };\n\n                var windowTimeChanged = $scope.$on('onWindowTimeChanged', function(event, timeObj) {\n                    $scope.config.windowFilter = timeObj ? timeObj : (config.windowFilter ? {} : timeObj);\n                    var widget = {\n                        definition: definition,\n                        element: $element\n                    };\n                    $rootScope.$broadcast('adfWindowTimeChangedFromWidget', widget, $scope.config.windowFilter);\n                    $scope.$broadcast('widgetWindowTimeChanged', $scope.config.windowFilter);\n                    $scope.reload();\n                });\n\n                this.updateWidgetFilters = function(filterId, configChange) {\n                    if ($scope.options && $scope.options.extraData && $scope.options.extraData.widgetFilters) {\n                        var _widgetFilters = $scope.options.extraData.widgetFilters;\n                        var model = $scope.definition;\n                        var selectFilter;\n                        var sharedFilters = _widgetFilters.filter(function(widgetFilter) {\n                            // Recuperamos solos los filtros de widgets que cumplan las condiciones:\n                            // - No tenga un filtro heredado como filtro\n                            // - El tipo de filtro sea igual que el widget que pueda heredarlo (Ftype)\n                            // - No recuperamos el filtro propio del widget  \n                            var shared = (!widgetFilter.filter || !widgetFilter.filter.id) && (widgetFilter.Ftype === model.Ftype) && (widgetFilter.wid !== model.wid);\n                            if (shared && (filterId === widgetFilter.wid))\n                                selectFilter = widgetFilter;\n                            return shared;\n                        });\n\n                        $scope.sharedFilters = angular.copy(sharedFilters);\n                        if (!configChange || !selectFilter && !!filterId)\n                            _setFilterType(selectFilter, $scope);\n                    }\n\n                };\n\n                var definition = $scope.definition;\n\n\n                if (definition.config.selectedItems) {\n                    $scope.selectedItemsLength = Object.keys(definition.config.selectedItems).length;\n                }\n\n\n                // Controlador de la barra inferior de los widgets\n                $scope.navOptionsHandler = {\n                    firstLoad: true,\n                    loadingData: false,\n                    startLoading: function() {\n                        $scope.navOptionsHandler.loadingData = true;\n                    },\n                    stopLoading: function() {\n                        $scope.navOptionsHandler.firstLoad = false;\n                        $scope.navOptionsHandler.loadingData = false;\n                        $scope.navOptionsHandler.lastMessageTime = new Date();\n                    },\n                    setStatusMessage: function(message) {\n                        $scope.navOptionsHandler.statusMessage = message;\n                        $scope.navOptionsHandler.lastMessageTime = new Date();\n                    }\n                };\n\n                // Controlador de los parámetros del filtro\n                $scope.filterHandler = {\n                    changeFilter: function(filter, search, typeFilter) {\n                        $scope.search = search;\n                        $scope.filter.typeFilter = typeFilter;\n                    }\n                };\n\n                // Controlador de las custom actions del widget\n                $scope.widgetActionsHandler = {\n                    actions: [],\n                    setActions: function(actions) {\n                        $scope.widgetActionsHandler.actions = actions;\n                    }\n                };\n\n                var adfDashboardCollapseExpand = $scope.$on('adfDashboardCollapseExpand', function(event, args) {\n                    $scope.widgetState.isCollapsed = args.collapseExpandStatus;\n                });\n\n                var adfWidgetEnterEditMode = $scope.$on('adfWidgetEnterEditMode', function(event, widget) {\n                    if (dashboard.idEquals(definition.wid, widget.wid)) {\n                        $scope.edit(true);\n                    }\n                });\n\n                var adfIsEditMode = $scope.$on('adfIsEditMode', function(event, widget) {\n                    $scope.editing = true;\n                });\n\n                var adfDashboardChanged = $scope.$on('adfDashboardChanged', function(event, name, model) {\n                    //config.widgetSelectors = tiene filtro\n                    var widgetConfigChanged = [];\n                    var grid = model.grid;\n                    if (grid && grid.length > 0) {\n                        grid.forEach(function(element) {\n                            var definition = element.definition;\n                            widgetConfigChanged.push(definition.wid);\n                        });\n                        var widgetFilters = $scope.options && $scope.options.extraData && $scope.options.extraData.widgetFilters;\n                        var sharedFilters = widgetFilters.filter(function(widgetFilter) {\n                            var filter = widgetFilter.filter;\n                            return filter && !filter.id || widgetConfigChanged.indexOf(filter.id) !== -1;\n                        });\n                        $scope.sharedFilters = angular.copy(sharedFilters);\n                        $scope.editing = false;\n                        $scope.$broadcast('widgetConfigChanged', widgetConfigChanged);\n                    }\n                });\n\n                var adfDashboardEditsCancelled = $scope.$on('adfDashboardEditsCancelled', function(event, widget) {\n                    $scope.editing = false;\n                });\n\n                $scope.openFullScreen = function() {\n                    var elem = document.getElementsByClassName('widget widget_' + $scope.definition.wid);\n                    if (elem[0].requestFullscreen) {\n                        elem[0].requestFullscreen();\n                        $scope.$broadcast('OnResizeWidget');\n                    } else if (elem[0].mozRequestFullScreen) { /* Firefox */\n                        elem[0].mozRequestFullScreen();\n                        $scope.$broadcast('OnResizeWidget');\n                    } else if (elem[0].webkitRequestFullscreen) { /* Chrome, Safari and Opera */\n                        elem[0].webkitRequestFullscreen();\n                        $scope.$broadcast('OnResizeWidget');\n                    } else if (elem[0].msRequestFullscreen) { /* IE/Edge */\n                        elem[0].msRequestFullscreen();\n                        $scope.$broadcast('OnResizeWidget');\n                    } else {\n                        $scope.$emit('adfOpenModalWidgetFromOther', definition.type, $scope.config || {}, $scope);\n                    }\n                };\n\n                $scope.openAboutScreen = function(size) {\n                    size = 'md';\n                    var modalInstance = $uibModal.open({\n                        animation: true,\n                        templateUrl: 'widgetAboutModal.html',\n                        controller: function($scope, $uibModalInstance, information) {\n                            $scope.about = {};\n                            $scope.about.info = information;\n                            $scope.ok = function() {\n                                $uibModalInstance.close();\n                            };\n                        },\n                        'size': size,\n                        resolve: {\n                            information: function() {\n                                return $scope.config.about;\n                            }\n                        }\n                    });\n\n                    modalInstance.result.then(function(selectedItem) {\n                        $scope.selected = selectedItem;\n                    }, function() {\n                        $log.info('Modal dismissed at: ' + new Date());\n                    });\n                };\n\n                $scope.saveWidgetScreen = function(wId) {\n                    $scope.$emit('generateSnapshot', {\n                        'objectSelector': '.widget_' + wId,\n                        'fileName': 'capture_' + new Date().getTime()\n                    });\n                };\n\n\n                $scope.moveWidgetToDashboard = function(wId) {\n                    $scope.$emit('ouxWidget-move', {\n                        'objectSelector': '.widget_' + wId\n                    }, wId);\n                };\n                $scope.copyWidgetToDashboard = function(wId) {\n                    $scope.$emit('ouxWidget-copy', {\n                        'objectSelector': '.widget_' + wId\n                    }, wId);\n                };\n\n                var createQuickFilter = function(fieldsQuickSearch) {\n                    var _filter = {\n                        or: []\n                    };\n                    var criteria;\n                    fieldsQuickSearch.forEach(function(field) {\n                        criteria = {};\n                        criteria[field.operator] = {};\n                        criteria[field.operator][field.name] = $scope.config.filter.value;\n                        _filter.or.push(criteria);\n                    });\n                    return _filter;\n                };\n\n                $scope.downloadCsv = function() {\n                    var columns = $scope.config.columns;\n                    var scope_filter = $scope.config.filter;\n                    var extra_filter;\n                    var final_filter = {};\n                    var order = $scope.config.sort ? $scope.config.sort : undefined;\n                    if ($scope.config.getWindowTime && $scope.config.onWindowTimeChanged) {\n                        var winTime = $scope.config.getWindowTime();\n                        var window_filter = $scope.config.onWindowTimeChanged(winTime);\n                        if (window_filter && window_filter.and) {\n                            extra_filter = {\n                                and: window_filter.and\n                            };\n                        }\n                    }\n                    var filter;\n                    if (scope_filter.type && scope_filter.type === 'advanced' && scope_filter.value.length > 4) {\n                        filter = JSON.parse(scope_filter.value);\n                    } else if (scope_filter.type && scope_filter.type === 'basic' && scope_filter.value.trim() !== '') {\n                        filter = createQuickFilter($scope.config.fieldsQuickSearch, scope_filter.value);\n                    }\n                    if (extra_filter) {\n                        if (filter) {\n                            final_filter = {\n                                and: [extra_filter, filter]\n                            };\n                        } else {\n                            final_filter = extra_filter;\n                        }\n                    } else {\n                        final_filter = filter;\n                    }\n                    $scope.$broadcast('downloadCsv', {\n                        'columns': columns,\n                        'filter': final_filter,\n                        'order': order\n                    });\n                };\n\n                $scope.generateQR = function() {\n                    $scope.$broadcast('generateQR');\n                };\n\n                var addItemToSelection = $scope.$on('addItemToSelection', function(event, item) {\n                    if (!$scope.selectedItems[item.key]) {\n                        $scope.selectedItems[item.key] = {\n                            data: item.data,\n                            visible: item.visible\n                        };\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n                        item.isSelected = true;\n                        $scope.selectionManager.lastItem = item;\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n                    }\n\n                });\n\n                var removeItemFromSelection = $scope.$on('removeItemFromSelection', function(event, item) {\n                    if ($scope.selectedItems[item.key]) {\n                        delete $scope.selectedItems[item.key];\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n                        item.isSelected = false;\n                        $scope.selectionManager.lastItem = item;\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n                    }\n                });\n\n                // bind reload function\n                var stopReloadTimeout;\n\n                $scope.setReloadTimeout = function() {\n                    var config = $scope.config || $scope.definition.config || {};\n\n\n                    var reloadPeriod = config.reloadPeriod;\n                    if (!isNaN(reloadPeriod) && (reloadPeriod * 1) !== 0) {\n                        if (angular.isDefined(stopReloadTimeout)) {\n                            $interval.cancel(stopReloadTimeout);\n                            stopReloadTimeout = undefined;\n                        }\n                        stopReloadTimeout = $interval($scope.reload, (reloadPeriod * 1000));\n                    } else if (stopReloadTimeout) {\n                        $interval.cancel(stopReloadTimeout);\n                    }\n                };\n\n                $scope.reload = function() {\n                    $scope.$broadcast('widgetReload');\n\n                    $scope.setReloadTimeout();\n                };\n\n\n                // verificacion de periodo de refresco\n                $scope.setReloadTimeout();\n\n                $scope.$on('$destroy', function() {\n                    adfDashboardCollapseExpand();\n                    adfWidgetEnterEditMode();\n                    adfIsEditMode();\n                    adfDashboardChanged();\n                    adfDashboardEditsCancelled();\n                    addItemToSelection();\n                    removeItemFromSelection();\n                    windowTimeChanged();\n                    $interval.cancel(stopReloadTimeout);\n                });\n            },\n            compile: function() {\n\n                /**\n                 * use pre link, because link of widget-content\n                 * is executed before post link widget\n                 */\n                return {\n                    pre: preLink,\n                    post: postLink\n                };\n            }\n        };\n\n    });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/**\n * The widget service provide helper functions to render widgets and their content.\n */\nangular.module('adf')\n  .factory('widgetService', function($http, $q, $sce, $templateCache, dashboard) {\n    \n\n    function parseUrl(url) {\n      var parsedUrl = url;\n      if (url.indexOf('{widgetsPath}') >= 0) {\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\n                .replace('//', '/');\n        if (parsedUrl.indexOf('/') === 0) {\n          parsedUrl = parsedUrl.substring(1);\n        }\n      }\n      return parsedUrl;\n    }\n\n    var exposed = {};\n\n    exposed.getTemplate = function(widget){\n      var deferred = $q.defer();\n\n      if (widget.template) {\n        deferred.resolve(widget.template);\n      } else if (widget.templateUrl) {\n        // try to fetch template from cache\n        var tpl = $templateCache.get(widget.templateUrl);\n        if (tpl) {\n          deferred.resolve(tpl);\n        } else {\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\n          $http.get(url)\n               .success(function(response) {\n                 // put response to cache, with unmodified url as key\n                 $templateCache.put(widget.templateUrl, response);\n                 deferred.resolve(response);\n               })\n               .error(function() {\n                 deferred.reject('could not load template');\n               });\n        }\n      }\n\n      return deferred.promise;\n    };\n\n    return exposed;\n  });\n\nangular.module(\"adf\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"../src/templates/actionsMenuTpl.html\",\"<ul class=dropdown-menu uib-dropdown-menu role=menu> <li> <a class=pointer title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.PICTURE\\' | translate}}\\\" ng-click=saveWidgetScreen(definition.wid)> <span class=\\\"glyphicon glyphicon-picture\\\"></span> {{ \\'ADF.WIDGET.TOOLTIP.PICTURE\\' | translate}} </a> </li> <li ng-if=widget.qr> <a class=pointer title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.QR\\' | translate }}\\\" ng-click=generateQR()> <span class=\\\"fa fa-qrcode\\\" style=\\\"font-size: 1.1em;\\\"></span> {{ \\'ADF.WIDGET.TOOLTIP.QR\\' | translate }} </a> </li> <li ng-if=widget.csv permission permission-only=\\\"\\'download\\'\\\"> <a class=pointer title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.CSV\\' | translate }}\\\" ng-click=downloadCsv()> <span class=\\\"glyphicon glyphicon-file\\\"></span> {{ \\'ADF.WIDGET.TOOLTIP.CSV\\' | translate }} </a> </li> <li permission permission-only=\\\"\\'executeOperation\\'\\\" ng-if=\\\"widget.executeOperation && isExecuteOperationEnabled()\\\"> <a class=pointer title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.OPERATION\\' | translate }}\\\" ng-click=executeOperation()> <span class=\\\"glyphicon glyphicon-flash\\\"></span> {{ \\'ADF.WIDGET.TOOLTIP.OPERATION\\' | translate }} </a> </li> <li ng-if=\\\"widgetActionsHandler && widgetActionsHandler.actions && widgetActionsHandler.actions.length > 0\\\" ng-repeat=\\\"customAction in widgetActionsHandler.actions\\\" permission permission-only=customAction.permissions> <a class=pointer title={{customAction.title}} ng-click=customAction.action(choice.value)> <span class=\\\"pointer {{customAction.icon}}\\\"></span> {{customAction.title}} </a> </li> </ul>\");\n$templateCache.put(\"../src/templates/dashboard-edit.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h3 class=modal-title translate>ADF.DASHBOARD.TITLE.EDIT.DASHBOARD</h3> </div> <div class=modal-body> <form role=form name=form novalidate> <div class=\\\"form-group col-xs-12 col-md-4\\\"> <label for=dashboardTitle translate>ADF.COMMON.TITLE</label> <input type=text class=\\\"form-control text-primary\\\" id=dashboardTitle ng-model=copy.title required ng-init=\\\"copy.title=(copy.title | translate)\\\"> </div> <div class=\\\"form-group col-xs-12 col-md-8\\\"> <label for=dashboardDescription translate>ADF.DASHBOARD.LABEL.DESCRIPTION</label> <input type=text class=\\\"form-control text-primary\\\" id=dashboardDescription ng-init=\\\"copy.description=(copy.description | translate)\\\" ng-model=copy.description> </div> <div class=col-xs-12> <uib-tabset active=configModeSelected justified=true> <uib-tab index=0 heading=\\\"{{ \\'HEADER.TAB.GENERAL\\' | translate }}\\\"> <div class=\\\"form-group col-xs-12 col-md-12\\\"> <label for=iconConfiguration.model class=text-primary>{{\\'ADF.DASHBOARD.LABEL.ICON\\' | translate }}</label> <div class=\\\"radio radio-primary radio-inline no-margin\\\"> <label id=icon_library> <input type=radio name=iconLibrary ng-model=iconConfiguration.model value=icon> <span class=circle></span> <span class=check></span> {{\\'ICON.LIBRARY\\' | translate }} </label> </div> <div class=\\\"radio radio-primary radio-inline\\\"> <label id=icon_image> <input type=radio name=iconImage ng-model=iconConfiguration.model value=image> <span class=circle></span> <span class=check></span> {{\\'ICON.IMAGE\\' | translate }} </label> </div> <div class=padding-5 ng-if=\\\"iconConfiguration.model === \\'icon\\'\\\"> <ui-select-fa-styles id=icon icon=iconConfiguration.icon required=false allow-clear=false disabled=\\\"iconConfiguration.model !== \\'icon\\'\\\" title=\\\"{{\\'ADF.WIDGET.TITLE.CHOOSE_ICON\\' | translate}}\\\"> </ui-select-fa-styles> <input type=hidden ng-model=iconConfiguration.icon required=\\\"iconConfiguration.model === \\'icon\\'\\\"> </div> <div class=padding-5 ng-if=\\\"iconConfiguration.model === \\'image\\'\\\"> <div class=col-xs-12 ng-disabled=\\\"iconConfiguration.model !== \\'image\\'\\\"> <div ng-disabled=\\\"iconConfiguration.model !== \\'image\\'\\\" ng-if=!iconConfiguration.url ngf-drop ng-model=iconConfiguration.file ngf-max-size=1MB ngf-select=imageSelected($file) class=\\\"drop-box pointer\\\" ngf-drag-over-class=\\\"\\'dragover\\'\\\" ngf-multiple=false ngf-accept=\\\"\\'image/*\\'\\\" ngf-pattern=\\\"\\'image/*\\'\\\">{{ \\'FORM.DRAG_DROP\\' | translate }}<br>{{ \\'FORM.MAX_SIZE\\' | translate }}</div> <img ng-if=iconConfiguration.url class=navbar-domain src=\\\"{{ iconConfiguration.url }}\\\" data-intro=\\\"{{ \\'HELP.HEADER.DOMAIN_LOGO\\' | translate }}\\\" data-position=fixed> <input ng-if=\\\"iconConfiguration.model === \\'image\\'\\\" type=hidden ng-model=iconConfiguration.url required> </div> <div class=col-xs-12 ng-if=iconConfiguration.url> <button id=idRemoveFileLink ng-click=removeDataFile() class=\\\"btn btn-warning ux-txt-warning btn-group-justified pointer\\\"><i class=\\\"fa fa-trash\\\" aria-hidden=true></i> {{ \\'BUTTON.TITLE.REMOVE\\' | translate }}</button> </div> </div> <input type=hidden ng-model=iconConfiguration.model required> </div> <div class=\\\"form-group col-xs-12 col-md-12\\\"> <label for=dashboardBackground translate>ADF.DASHBOARD.LABEL.BACKGROUND_COLOR</label> <input type=text placeholder=\\\"{{ \\'ADF.WIDGET.PLACEHOLDER.COLOR\\' | translate }}\\\" colorpicker=hex class=\\\"form-control {{stream.identifier}}_color\\\" ng-model=copy.backgroundColor> </div> <div class=\\\"form-group col-xs-12 col-md-6\\\"> <label for=dashboardBackground translate>ADF.DASHBOARD.LABEL.BACKGROUND_IMAGE</label> <div ng-if=!copy.backgroundImage ngf-drop ng-model=copy.file ngf-max-size=1MB ngf-select=backgroundImageSelected($file) class=\\\"drop-box pointer\\\" ngf-drag-over-class=\\\"\\'dragover\\'\\\" ngf-multiple=false ngf-accept=\\\"\\'image/*\\'\\\" ngf-pattern=\\\"\\'image/*\\'\\\">{{ \\'FORM.DRAG_DROP\\' | translate }}<br>{{ \\'FORM.MAX_SIZE\\' | translate }}</div>  <div class=col-xs-12 ng-if=copy.backgroundImage> <button id=idRemoveBackgroundImageFileLink ng-click=removeBackgroundFile() class=\\\"btn btn-warning ux-txt-warning btn-group-justified pointer\\\"><i class=\\\"fa fa-trash\\\" aria-hidden=true></i> {{ \\'BUTTON.TITLE.REMOVE\\' | translate }}</button> </div> </div> <div class=\\\"form-group col-xs-12 col-md-6\\\" ng-if=copy.backgroundImage> <label for=BACKGROUND_SIZE class=text-primary>{{\\'ADF.DASHBOARD.LABEL.BACKGROUND_SIZE\\' | translate }}</label> <wizard-radio info=backgroundSize></wizard-radio> </div> <div class=\\\"form-group col-xs-12 col-md-12\\\"> <b>{{\\'DIALOG.ICON.PREVIEW\\' | translate}}</b> </div> <div class=\\\"form-group col-xs-12 col-md-12 well padding-5 dashboardPanel\\\"> <div gridstack class=grid-stack> <div gridstack-item class=grid-stack-item gs-item-x=0 gs-item-y=0 gs-item-width=5 gs-item-height=2 gs-item-min-width=2 gs-item-min-height=1 gs-item-autopos=0 data-intro=\\\"{{ \\'HELP.WORKSPACES.DASHBOARD\\' | translate }}\\\" data-position=absolute> <div class=\\\"grid-stack-item-content panel well no-padding\\\" style=\\\"background-color: {{copy.backgroundColor}} !important; background-image: url( {{copy.backgroundImage }} ) !important; background-size : {{backgroundSize.model }} !important\\\" title=\\\"{{ copy.title | translate }}\\\"> <div class=\\\"col-xs-12 col-md-12 padding-5\\\"> <h4 class=\\\"text-primary no-margin\\\">{{ copy.title | translate }}</h4> <small ng-if=copy.description>{{ copy.description | translate }}</small> </div> <div class=dashboard-extra-info> <div class=\\\"padding-5 extra-info\\\"> <span><i class=\\\"fa fa-clock-o text-grey\\\"></i> <small am-time-ago=copy.time> {{copy.time}}</small></span> </div> <div class=\\\"padding-5 identity-icon-dashboard\\\"> <i ng-if=\\\"iconConfiguration.model === \\'icon\\'\\\" class=\\\"fa {{ iconConfiguration.icon}}\\\"></i> <img ng-if=\\\"iconConfiguration.model === \\'image\\'\\\" alt src=\\\"{{ iconConfiguration.url }}\\\" data-intro=\\\"{{ \\'HELP.HEADER.DOMAIN_LOGO\\' | translate }}\\\" data-position=fixed> </div> </div> </div> </div> </div> </div> </uib-tab> <uib-tab index=1 heading=\\\"{{ \\'HEADER.TAB.ADVANCED\\' | translate }}\\\"> <div class=\\\"form-group col-xs-12\\\"> <label translate>ADF.DASHBOARD.LABEL.REFRESH_RATIO</label> <select class=form-control ng-model=copy.extraConfig.dashboardRefreshInterval ng-change=changeInterval(dashboardRefreshInterval)> <option ng-value translate>ADF.WIDGET.OPTIONS.MANUAL</option> <option ng-value=300 translate>ADF.WIDGET.OPTIONS.5_MINUTES</option> <option ng-value=600 translate>ADF.WIDGET.OPTIONS.10_MINUTES</option> <option ng-value=900 translate>ADF.WIDGET.OPTIONS.15_MINUTES</option> <option ng-value=1800 translate>ADF.WIDGET.OPTIONS.30_MINUTES</option> </select> </div> <div class=\\\"form-group col-xs-12 col-md-6\\\"> <label translate>ADF.DASHBOARD.LABEL.CELL_HEIGHT</label> <input type=number class=form-control ng-model=copy.extraConfig.cellHeight min=50 ng-required=true> <button class=\\\"btn btn-default\\\" ng-disabled=\\\"copy.extraConfig.cellHeight === 145\\\" ng-click=\\\"copy.extraConfig.cellHeight = 145\\\">{{\\'FORM.OPTIONS.DEFAULT\\' | translate}}</button> </div> <div class=\\\"form-group col-xs-12 col-md-6\\\"> <div class=\\\"panel panel-default widget\\\" ng-style=\\\"{\\'height\\' : copy.extraConfig.cellHeight}\\\"> <div class=panel-title style=margin:0px;>{{\\'ADF.DASHBOARD.LABEL.WIDGET_EXAMPLE\\' | translate}} <div class=\\\"pull-right container-actions bg-primary\\\"><i class=\\\"fa fa-ellipsis-h\\\" style=font-size:1.2em;></i></div> </div> </div> </div> </uib-tab> </uib-tabset> </div> </form> </div> <div class=modal-footer> <div class=\\\"form-group col-xs-12\\\"> <button type=button class=\\\"btn btn-danger\\\" ng-click=closeDialog(true) translate>ADF.COMMON.CANCEL</button> <button type=submit class=\\\"btn btn-primary ux-txt-success\\\" ng-click=closeDialog() ng-disabled=form.$invalid translate>ADF.COMMON.CLOSE</button> </div> </div>\");\n$templateCache.put(\"../src/templates/dashboard-grid.html\",\"<div gridstack class=grid-stack options=gridOptions on-drag-start=onDragStart(event,ui) on-drag-stop=onDragStop(event,ui) on-resize-start=onResizeStart(event,ui) on-resize-stop=onResizeStop(event,ui) gridstack-handler=gsHandler on-change=onChange(event,items)> <div gridstack-item ng-repeat=\\\"w in adfModel.grid\\\" class=grid-stack-item gs-item-x=w.x gs-item-y=w.y gs-item-width=w.width gs-item-height=w.height gs-item-min-width=\\\"w.definition && w.definition.minWidth?w.definition.minWidth:2\\\" gs-item-min-height=\\\"w.definition && w.definition.minHeight?w.definition.minHeight:1\\\" gs-item-autopos=0> <adf-widget-grid ng-if=\\\"w && w.definition\\\" class=grid-stack-item-content options=options definition=w.definition edit-mode=editMode widget-state=widgetState></adf-widget-grid> </div> </div>\");\n$templateCache.put(\"../src/templates/dashboard-title.html\",\"<div class=row style=padding:0px;> <div class=\\\"col-xs-12 col-md-5\\\" ng-if=!hideButtons> <span ng-if=model.icon id=idDashboardIcon class=\\\"fa fa-2x\\\" ng-class=model.icon></span> <span id=idDashboardTitle class=\\\"fa-2x text-primary\\\">{{model.title | translate}}</span> <span ng-if=model.description id=idDashboardDescription>{{model.description | translate}}</span> </div> <div class=\\\"col-xs-12 col-md-7 text-right\\\" ng-if=!hideButtons> <a href ng-if=editMode title=\\\"{{ \\'ADF.DASHBOARD.TITLE.ADD\\' | translate }}\\\" ng-click=addWidgetDialog() class=\\\"btn btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-plus\\\" aria-hidden=true></i> {{\\'ADF.DASHBOARD.TITLE.ADD\\' | translate}} </a> <a href ng-if=editMode title=\\\"{{ \\'ADF.DASHBOARD.TITLE.CONFIGURATION\\' | translate }}\\\" ng-click=editDashboardDialog() class=\\\"btn btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-cog\\\"></i> {{\\'ADF.DASHBOARD.TITLE.CONFIGURATION\\' | translate}} </a> <a href ng-if=editMode title=\\\"{{ \\'ADF.DASHBOARD.TITLE.UNDO\\' | translate }}\\\" ng-click=cancelEditMode() class=\\\"btn btn-warning btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-close\\\"></i> {{\\'ADF.DASHBOARD.TITLE.UNDO\\' | translate}} </a> <a href ng-if=\\\"options.editable && !editMode && !model.temporal\\\" title=\\\"{{\\'ADF.DASHBOARD.TITLE.EDIT.MODE\\' | translate }}\\\" ng-click=toggleEditMode() class=\\\"btn btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-pencil-square-o\\\"></i> {{\\'ADF.DASHBOARD.TITLE.EDIT.MODE\\' | translate}} </a> <a href ng-if=\\\"options.editable && editMode\\\" title=\\\"{{\\'ADF.DASHBOARD.TITLE.SAVE\\' | translate)}}\\\" ng-click=toggleEditMode() class=\\\"btn btn-success btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-save\\\"></i> {{\\'ADF.DASHBOARD.TITLE.SAVE\\' | translate}} </a> </div> </div>\");\n$templateCache.put(\"../src/templates/dashboard.html\",\"<div class=dashboard-container x-ng-class=\\\"{\\'edit\\' : editMode}\\\"> <div ng-include src=model.titleTemplateUrl></div> <div class=dashboard x-ng-class=\\\"{\\'edit\\' : editMode}\\\" style=\\\"padding: 0px;margin: 0px;\\\"> <adf-dashboard-grid ng-if=model.grid adf-model=model options=options edit-mode=editMode> </adf-dashboard-grid></div> </div>\");\n$templateCache.put(\"../src/templates/widget-add.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title translate>ADF.WIDGET.TITLE.ADD_HEADER</h4> </div> <div class=modal-body>  <div ng-if=createCategories> <uib-accordion ng-init=\\\"categorized = createCategories(widgets)\\\"> <div uib-accordion-group heading=\\\"{{category.name | translate}}\\\" ng-repeat=\\\"category in categorized | adfOrderByObjectKey: \\'name\\'\\\"> <dl class=dl-horizontal> <dt ng-repeat-start=\\\"widget in category.widgets | adfOrderByObjectKey: \\'key\\'\\\"> <a href ng-click=addWidget(widget.key) ng-class={{widget.key}}> {{widget.title | translate}} </a> </dt> <dd ng-repeat-end ng-if=widget.description> {{widget.description | translate}} </dd> </dl> </div> </uib-accordion> </div>  <div ng-if=!createCategories> <div class=row> <div class=\\\"col-md-4 col-xs-12 form-group no-margin\\\"> <select ng-model=widgetFilterCfg.widgetFilter.categoryTags name=widgetsCategoryFilter class=form-control> <option value translate>ADF.WIDGET.LABEL.ALL_WIDGETS</option> <option ng-repeat=\\\"category in availableCategories | orderBy\\\" value={{category}}>{{ category | translate }}</option> </select> </div> <div class=\\\"col-md-4 col-xs-12 form-group no-margin\\\"> <select ng-model=widgetFilterCfg.widgetSorting name=widgetsSorting class=form-control> <option value=priority ng-selected=\\\"widgetFilterCfg.widgetSorting===\\'priority\\' || !widgetFilterCfg.widgetSorting\\\" translate=ADF.WIDGET.TITLE.SORTED_BY translate-values=\\\"{ item : (\\'ADF.WIDGET.LABEL.PRIORITY\\' | translate) }\\\"></option> <option value=name ng-selected=\\\"widgetFilterCfg.widgetSorting===\\'name\\'\\\" translate=ADF.WIDGET.TITLE.SORTED_BY translate-values=\\\"{ item : (\\'ADF.WIDGET.LABEL.NAME\\' | translate) }\\\"></option> <option value=category ng-selected=\\\"widgetFilterCfg.widgetSorting===\\'category\\'\\\" translate=ADF.WIDGET.TITLE.SORTED_BY translate-values=\\\"{ item : (\\'ADF.WIDGET.LABEL.CATEGORY\\' | translate) }\\\"></option> <option value=description ng-selected=\\\"widgetFilterCfg.widgetSorting===\\'description\\'\\\" translate=ADF.WIDGET.TITLE.SORTED_BY translate-values=\\\"{ item : (\\'ADF.WIDGET.LABEL.DESCRIPTION\\' | translate) }\\\"></option> </select> </div> <div class=\\\"col-md-4 col-xs-12 form-group no-margin\\\"> <select ng-model=widgetFilterCfg.widgetSortingDirection name=widgetSortingDirection class=form-control> <option value translate>BUTTON.TITLE.ASCENDING</option> <option value=1 translate>BUTTON.TITLE.DESCENDING</option> </select> </div> </div> <div class=row> <div class=\\\"col-xs-12 form-group no-margin\\\"> <input type=text class=form-control name=widgetsTitleFilter autofocus ng-model=widgetFilterCfg.widgetFilter.title placeholder=\\\"{{ \\'ADF.WIDGET.PLACEHOLDER.TYPE_WIDGET_FILTER\\'| translate }}\\\"> </div> </div> <div ng-repeat=\\\"widget in widgets | adfOrderByObjectKey: \\'key\\' | filter:widgetFilterCfg.widgetFilter:strict | orderBy:widgetFilterCfg.widgetSorting:widgetFilterCfg.widgetSortingDirection track by $index\\\" ng-class=\\\"{ \\'widgetPanelBig\\' : $index ===0 , \\'widgetPanelNormal\\' : $index > 0 }\\\"> <div class=\\\"pointer panel widgetInfoParent {{widget.key}}\\\" ng-click=addWidget(widget.key) title=\\\"{{widget.description | translate}}\\\"> <div class=\\\"widgetInfoImage pointer\\\"> <div ng-if=widget.svg class=widget-icon ng-include=widget.svg></div> <img ng-if=\\\"widget.images && !widget.svg\\\" ng-init=\\\"widget._currImg = widget.images[0]\\\" src=\\\"{{ widget._currImg }}\\\" ng-click=addWidget(widget.key) title=\\\"Click to change (if available)\\\"> <i ng-if=\\\"!widget.images && !widget.svg\\\" class=\\\"widgetInfoIcon fa\\\" ng-class=\\\"widget.icon ? widget.icon: \\'fa-plus-circle\\'\\\" ng-style=\\\"widget.color?{\\'color\\':widget.color}:\\'\\'\\\" aria-hidden=true></i> </div> <div class=widgetInfoContainer id=widgetKey_{{widget.key}} ng-class=\\\"{ \\'bg-contrast\\' : $index ===0, \\'bg-primary\\': $index !== 0}\\\">  <span class=widgetInfoTitle>{{widget.title }}</span><br> <span>({{widget.category}})</span> <span class=widgetInfoDescription>{{widget.description}}</span> </div> </div> </div> </div> </div> <div class=modal-footer style=clear:both;> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() translate>ADF.COMMON.CLOSE</button> </div>\");\n$templateCache.put(\"../src/templates/widget-advanced-filter.html\",\"<style>\\n    .selected-entities-control .ui-select-container>div:first-child {\\n        max-height: 400px;\\n        overflow-y: scroll;\\n        overflow-x: hidden;\\n    }\\n    \\n    .condition div {\\n        display: unset;\\n    }\\n    \\n    .select-custom-querybuilder {\\n        display: inline-block;\\n        height: 34px;\\n        padding: 6px 12px;\\n        font-size: 14px;\\n        line-height: 1.42857143;\\n        color: #555;\\n        background-color: #fff;\\n        background-image: none;\\n        border: 1px solid #ccc;\\n        border-radius: 4px;\\n    }\\n</style> <form name=widgetSelectionForm novalidate role=form ng-submit=saveChangesDialog()> <div class=modal-header> <div class=\\\"col-xs-12 col-md-12\\\"> <h3 class=\\\"modal-title text-left\\\"> {{\\'ADF.WIDGET.TITLE.ADVANCED_FILTER\\' | translate}}</h3> </div> </div> <div class=modal-body> <div class=col-xs-12 ng-if=\\\"type !== \\'entities\\' && type !== \\'tickets\\'\\\"> <div class=form-group> <custom-ui-select-fields-search label=\\\"\\'FORM.LABEL.SEARCHING_FIELDS\\'\\\" on-select-item=elementSelected($item) on-remove=elementDeleted($item) builder=autocomplete_options placeholder=FORM.PLACEHOLDER.SEARCHING_FIELDS element=fieldsSearch.selected ng-required=false multiple=true> </custom-ui-select-fields-search> </div> </div> <div class=col-xs-12 ng-if=\\\"type === \\'entities\\' || type === \\'tickets\\'\\\"> <div class=form-group> <custom-ui-select-datastream ng-if=\\\"type === \\'entities\\' || type === \\'tickets\\'\\\" on-remove=onDeleteDatastream($item) on-select-item=onSelectDatastream($item) datastream=datastreamsSearch.selected multiple=true> </custom-ui-select-datastream> </div> </div> <div class=\\\"col-xs-12 text-left\\\"> <button type=button class=\\\"btn btn-danger btn-sm\\\" ng-click=clearFieldsSearch() ng-disabled=\\\"currentSelection.selected.length < 1\\\" translate>ADF.WIDGET.BUTTON.CLEAR</button> </div> <query-builder class=query-builder fields=fields operators=operators comparators=comparators group=queryBuilderfilter.group settings=settings as-string=queryAsString></query-builder> </div> <div class=modal-footer> <div permission permission-only=\\\"\\'viewFilter\\'\\\" class=\\\"col-xs-12 col-md-2 text-left\\\"> <div uib-dropdown ng-if=\\\"selectionConfig && selectionConfig.filterTypes && currentSelection.selected.length > 0\\\"> <button id=applyFilterBy type=button class=\\\"btn btn-primary\\\" uib-dropdown-toggle> <i class=\\\"glyphicon glyphicon-filter pointer\\\"></i> {{\\'ADF.WIDGET.BUTTON.FILTER_BY\\' | translate}} <span class=caret></span> </button> <ul class=dropdown-menu uib-dropdown-menu role=menu aria-labelledby=applyFilterBy> <li role=menuitem ng-repeat=\\\"filterType in selectionConfig.filterTypes\\\"> <a href ng-click=applyFilter(filterType) title=\\\"{{\\'ADF.WIDGET.BUTTON.SELECTED\\' | translate:{filterType: filterType} }}\\\">{{\\'ADF.WIDGET.BUTTON.SELECTED\\' | translate:{filterType: filterType} }}</a> </li> </ul> </div> </div> <div permission permission-only=\\\"\\'executeOperation\\'\\\" class=\\\"col-xs-12 col-md-3 text-left\\\"> <div uib-dropdown ng-if=\\\"selectionConfig && selectionConfig.operationTypes && currentSelection.selected.length > 0\\\"> <button id=executeOperation type=button class=\\\"btn btn-primary\\\" uib-dropdown-toggle> <i class=\\\"glyphicon glyphicon-flash pointer\\\"></i> {{\\'ADF.WIDGET.BUTTON.EXECUTE_OPERATION\\' | translate}} <span class=caret></span> </button> <ul class=dropdown-menu uib-dropdown-menu role=menu aria-labelledby=executeOperation> <li role=menuitem ng-repeat=\\\"operationType in selectionConfig.operationTypes\\\"> <a href ng-click=executeOperation(operationType) title={{operationType|translate}}>{{operationType|translate}}</a> </li> </ul> </div> </div> <div class=\\\"col-xs-12 col-md-7 text-right\\\"> <button type=button class=\\\"btn btn-primary\\\" ng-disabled=evaluating ng-click=clearQuery() translate>ADF.WIDGET.BUTTON.CLEAR</button> <button type=button class=\\\"btn btn-primary\\\" ng-click=evaluateQuery() ng-disabled=\\\"evaluating && queryBuilderfilter.group.rules.length === 0\\\" translate>ADF.WIDGET.BUTTON.EVALUATE</button> <button type=button class=\\\"btn btn-primary\\\" ng-disabled=!enableApply ng-click=applyQueryBuilderFilter() translate>ADF.WIDGET.BUTTON.APPLY</button> <button type=button class=\\\"btn btn-default\\\" ng-disabled=evaluating ng-click=closeDialog() translate>ADF.COMMON.CLOSE</button> </div> </div> </form>\");\n$templateCache.put(\"../src/templates/widget-delete.html\",\"<div class=modal-header> <h4 class=modal-title> <span translate>ADF.COMMON.DELETE</span> {{widget.title | translate}}</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=widgetTitle translate>ADF.WIDGET.LABEL.DELETE_CONFIRM_MESSAGE</label> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() translate>ADF.COMMON.CLOSE</button> <button type=button class=\\\"btn btn-primary\\\" ng-click=deleteDialog() translate>ADF.COMMON.DELETE</button> </div> \");\n$templateCache.put(\"../src/templates/widget-edit.html\",\"<form name=widgetEditForm novalidate role=form ng-submit=saveDialog()> <div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h3 class=modal-title>{{widget.title | translate}}</h3> </div> <div class=modal-body> <div class=row> <div class=col-xs-12> <div class=\\\"alert alert-danger\\\" role=alert ng-show=validationError> <strong translate>ADF.ERROR.APPLY_ERROR</strong> {{validationError | translate}} </div> </div> </div> <div class=row ng-if=widget.show_reload_config> <div class=\\\"col-xs-12 col-md-6\\\"> <div class=form-group> <label for=widgetTitle translate>ADF.COMMON.TITLE</label> <input type=text class=\\\"form-control text-primary\\\" id=widgetTitle ng-init=\\\"definition.title=(definition.title | translate)\\\" ng-model=definition.title placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.TITLE\\' | translate}}\\\"> </div> </div> <div class=\\\"col-xs-12 col-md-6\\\"> <div class=form-group> <label for=widgetReloadPeriod translate>ADF.WIDGET.TOOLTIP.REFRESH</label> <select class=form-control id=widgetReloadPeriod aria-label=\\\"ngSelected demo\\\" ng-model=definition.config.reloadPeriod required ng-init=\\\"definition.config.reloadPeriod ? definition.config.reloadPeriod : (definition.config.reloadPeriod = \\'0\\')\\\"> <option value=0 translate>ADF.WIDGET.OPTIONS.MANUAL</option> <option value=20 translate>ADF.WIDGET.OPTIONS.20_SECONDS</option> <option value=40 translate>ADF.WIDGET.OPTIONS.40_SECONDS</option> <option value=60 translate>ADF.WIDGET.OPTIONS.EVERY_MINUTE</option> <option value=300 translate>ADF.WIDGET.OPTIONS.5_MINUTES</option> <option value=600 translate>ADF.WIDGET.OPTIONS.10_MINUTES</option> <option value=900 translate>ADF.WIDGET.OPTIONS.15_MINUTES</option> <option value=1800 translate>ADF.WIDGET.OPTIONS.30_MINUTES</option> </select> </div> </div> </div> <div class=row ng-if=!widget.show_reload_config> <div class=\\\"col-xs-12 col-md-12\\\"> <div class=form-group> <label for=widgetTitle translate>ADF.COMMON.TITLE</label> <input type=text class=\\\"form-control text-primary\\\" id=widgetTitle ng-init=\\\"definition.title=(definition.title | translate)\\\" ng-model=definition.title placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.TITLE\\' | translate}}\\\"> </div> </div> </div> <div ng-if=widget.edit class=row> <div class=col-xs-12> <adf-widget-content model=definition content=widget.edit> </adf-widget-content></div> </div> <div class=row> <div class=col-xs-12> <div class=form-group> <label for=widgetAbout translate>ADF.COMMON.ABOUT</label> <textarea class=\\\"form-control text-primary\\\" id=widgetAbout ng-model=definition.config.about placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.ENTER.DESCRIPTION\\'|translate}}\\\"></textarea> </div> </div> </div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=\\\"closeDialog(\\'close\\')\\\" translate>ADF.WIDGET.BUTTON.CANCEL</button> <button type=submit class=\\\"btn btn-primary ux-txt-success\\\" ng-disabled=widgetEditForm.$invalid value=\\\"{{\\'ADF.WIDGET.BUTTON.APPLY\\' | translate }}\\\" translate>ADF.WIDGET.BUTTON.APPLY</button> </div> </form>\");\n$templateCache.put(\"../src/templates/widget-fullscreen-selection.html\",\"<div class=modal-header> <div class=\\\"pull-right widget-icons\\\"> <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.CLOSE\\' |translate }}\\\" ng-click=closeDialog() class=\\\"btn btn-xs btn-danger oux-button-margin\\\"> <i class=\\\"glyphicon glyphicon-remove\\\"></i> {{ \\'ADF.WIDGET.TOOLTIP.CLOSE\\' |translate }} </a> </div> <h4 class=\\\"modal-title pull-left\\\" translate>&nbsp;{{ definition.title | translate}}</h4> </div> <div class=\\\"modal-body widget\\\"> <adf-widget-grid class=widget-fullscreen definition=definition edit-mode=false widget-state=widgetState></adf-widget-grid> </div> <div class=modal-footer></div>\");\n$templateCache.put(\"../src/templates/widget-fullscreen.html\",\"<div class=modal-header> <div class=\\\"pull-right widget-icons\\\"> <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.CLOSE\\' |translate }}\\\" ng-click=closeDialog() class=\\\"btn btn-xs btn-danger oux-button-margin\\\"> <i class=\\\"glyphicon glyphicon-remove\\\"></i> {{ \\'ADF.WIDGET.TOOLTIP.CLOSE\\' |translate }} </a> <a permission permission-only=\\\"\\'manageWorkspace\\'\\\" href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.INSERT\\' |translate }}\\\" ng-if=persistDashboard ng-click=persistDashboard() class=\\\"btn btn-xs btn-primary oux-button-margin\\\"> <i class=\\\"ogicon ogicon-minimize\\\"></i> {{ \\'ADF.WIDGET.TOOLTIP.INSERT\\' |translate }} </a> </div> <h4 class=\\\"modal-title pull-left\\\" translate>&nbsp;{{ definition.title | translate}}</h4> </div> <div class=\\\"modal-body widget\\\">  <adf-widget-grid class=widget-fullscreen definition=definition edit-mode=false widget-state=widgetState></adf-widget-grid> </div> <div class=modal-footer ng-if=widget.show_modal_footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() translate>ADF.COMMON.CLOSE</button> </div>\");\n$templateCache.put(\"../src/templates/widget-grid-title.html\",\"<div class=panel-title style=margin:0px;> <div class=\\\"pull-right container-actions bg-primary\\\" data-intro=\\\"Widget actions\\\" data-position=bottom> <span ng-if=config.about class=hide-on-fullscreen> <a uib-popover=\\\"{{ config.about }}\\\" popover-trigger=\\\"\\'mouseenter\\'\\\" popover-placement=top ng-click=openAboutScreen()> <i class=\\\"glyphicon glyphicon-info-sign\\\"></i> </a> <script type=text/ng-template id=widgetAboutModal.html> <div class=\\\"modal-header\\\"> <h4 class=\\\"modal-title\\\" translate>ADF.COMMON.ABOUT</h4> </div> <div class=\\\"modal-body\\\">{{ about.info }}</div> <div class=\\\"modal-footer\\\"> <button class=\\\"btn btn-primary\\\" type=\\\"button\\\" ng-click=\\\"ok()\\\" translate>ADF.WIDGET.BUTTON.OK</button> </div> </script> </span> <a ng-if=\\\"!editMode && widget.print\\\" title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.PRINT\\' | translate }}\\\" ng-click=print() class=hide-on-fullscreen> <i class=\\\"glyphicon glyphicon-print\\\"></i> </a> <a class=pointer title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.REFRESH\\' | translate }}\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a>  <a permission permission-only=\\\"\\'viewFilter\\'\\\" title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.FILTER\\' | translate }}\\\" ng-if=\\\"!widget.hideFilter && config.widgetSelectors && !editMode\\\" ng-click=\\\"filter.showFilter = !filter.showFilter\\\"> <i class=\\\"glyphicon glyphicon-filter\\\" ng-class=\\\"{\\'active\\': search.json || search.oql|| search.quick}\\\"></i> </a>  <a permission permission-only=\\\"\\'viewFilter\\'\\\" title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.SORT\\' | translate }}\\\" ng-if=\\\"!widget.hideFilter && config.sort && !editMode\\\" ng-click=\\\"filter.showFilter = !filter.showFilter\\\"> <i class=\\\"glyphicon glyphicon-sort\\\" ng-class=\\\"{\\'active\\': (config.sort.value && config.sort.value !== \\'\\')}\\\"></i> </a>  <a title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.EDIT\\' | translate }}\\\" class=\\\"pointer hide-on-fullscreen\\\" ng-click=edit() ng-if=editMode> <i class=\\\"glyphicon glyphicon-cog\\\"></i> </a> <a title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.FULLSCREEN\\' | translate }}\\\" class=\\\"pointer hide-on-fullscreen\\\" ng-click=openFullScreen() ng-show=\\\"options.maximizable && !widget.notMaximizable\\\"> <i class=\\\"glyphicon glyphicon-fullscreen\\\"></i> </a>  <a title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.REMOVE\\' | translate}}\\\" class=\\\"pointer hide-on-fullscreen\\\" ng-click=remove() ng-if=editMode> <i class=\\\"glyphicon glyphicon-trash\\\"></i> </a> <div ng-if=!editMode class=\\\"pointer hide-on-fullscreen\\\" ng-show=!widget.notshowOtherOptions style=\\\"display: inline;\\\" uib-dropdown uib-dropdown-toggle> <i class=\\\"fa fa-ellipsis-h\\\" style=font-size:1.2em;></i> <ul uib-dropdown-menu class=dropdown-menu-right> <li role=menuitem> <a class=pointer title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.PICTURE\\' | translate}}\\\" ng-click=saveWidgetScreen(definition.wid)> <span class=\\\"glyphicon glyphicon-picture\\\"></span> {{ \\'ADF.WIDGET.TOOLTIP.PICTURE\\' | translate}} </a> </li> <li role=menuitem> <a class=pointer title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.MOVE\\' | translate}}\\\" ng-click=moveWidgetToDashboard(definition)> <span class=\\\"fa-2x ogicon ogicon-mov_clone text-primary\\\"></span> {{ \\'ADF.WIDGET.TOOLTIP.MOVE\\' | translate}} </a> </li> <li role=menuitem> <a class=pointer title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.COPY\\' | translate}}\\\" ng-click=copyWidgetToDashboard(definition)> <span class=\\\"fa-2x ogicon ogicon-mov_clone text-primary\\\"></span> {{ \\'ADF.WIDGET.TOOLTIP.COPY\\' | translate}} </a> </li> <li role=menuitem ng-if=widget.qr> <a class=pointer title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.QR\\' | translate }}\\\" ng-click=generateQR()> <span class=\\\"fa fa-qrcode\\\" style=\\\"font-size: 1.1em;\\\"></span> {{ \\'ADF.WIDGET.TOOLTIP.QR\\' | translate }} </a> </li> <li ng-if=widget.csv permission permission-only=\\\"\\'download\\'\\\" role=menuitem> <a class=pointer title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.CSV\\' | translate }}\\\" ng-click=downloadCsv()> <span class=\\\"glyphicon glyphicon-file\\\"></span> {{ \\'ADF.WIDGET.TOOLTIP.CSV\\' | translate }} </a> </li> <li role=menuitem permission permission-only=\\\"\\'executeOperation\\'\\\" ng-if=\\\"widget.executeOperation && isExecuteOperationEnabled()\\\"> <a class=pointer title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.OPERATION\\' | translate }}\\\" ng-click=executeOperation()> <span class=\\\"glyphicon glyphicon-flash\\\"></span> {{ \\'ADF.WIDGET.TOOLTIP.OPERATION\\' | translate }} </a> </li> <li role=menuitem ng-if=\\\"widgetActionsHandler && widgetActionsHandler.actions && widgetActionsHandler.actions.length > 0\\\" ng-repeat=\\\"customAction in widgetActionsHandler.actions\\\" permission permission-only=customAction.permissions> <a class=pointer title={{customAction.title}} ng-click=customAction.action(choice.value)> <span class=\\\"pointer {{customAction.icon}}\\\"></span> {{customAction.title}} </a> </li> </ul> </div> </div> <span class=pull-left ng-class=\\\"{ \\'nav-buttons-enabled\\' : navOptionsHandler.prevPage && navOptionsHandler.nextPage && navOptionsHandler.hasPrevPage && navOptionsHandler.hasNextPage && ( !navOptionsHandler.isPaginationEnable || navOptionsHandler.isPaginationEnable() ) && ( !navOptionsHandler.isNoContent || !navOptionsHandler.isNoContent() ) }\\\">  <h4 ng-if=\\\"!widget.frameless && definition.title\\\" translate class=text-primary>{{definition.title | translate}}</h4> </span> <div class=pull-right ng-if=\\\"navOptionsHandler.prevPage && navOptionsHandler.nextPage && navOptionsHandler.hasPrevPage && navOptionsHandler.hasNextPage && ( !navOptionsHandler.isPaginationEnable || navOptionsHandler.isPaginationEnable() ) && ( !navOptionsHandler.isNoContent || !navOptionsHandler.isNoContent() )\\\" style=margin-top:1px> <button class=\\\"btn btn-primary btn-sm pointer\\\" ng-click=navOptionsHandler.prevPage() ng-disabled=\\\"!navOptionsHandler.hasPrevPage() || (navOptionsHandler && navOptionsHandler.loadingData)\\\"> <i class=\\\"glyphicon glyphicon-chevron-left browser-link\\\"></i>{{ \\'BUTTON.TITLE.PREVIOUS\\' | translate }} </button> <button class=\\\"btn btn-primary btn-sm pointer\\\" ng-click=navOptionsHandler.nextPage() ng-disabled=\\\"!navOptionsHandler.hasNextPage() || (navOptionsHandler && navOptionsHandler.loadingData)\\\"> {{ \\'BUTTON.TITLE.NEXT\\' | translate }} <i class=\\\"glyphicon glyphicon-chevron-right browser-link\\\"></i> </button> </div> <div permission permission-only=\\\"[\\'viewFilter\\',\\'executeOperation\\']\\\" class=\\\"pull-right hide-on-fullscreen\\\" ng-if=\\\"selectedItemsLength > 0\\\" style=margin-top:1px> <a title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.SELECTION\\' | translate }}\\\" ng-click=manageSelectedItems() class=\\\"btn btn-primary btn-sm pointer\\\"> <i class=\\\"glyphicon glyphicon-check\\\"></i> <small class=ogux-budget>{{ selectedItemsLength }}</small> </a> </div> </div> \");\n$templateCache.put(\"../src/templates/widget-grid.html\",\"<div adf-id={{definition.wid}} adf-widget-type={{definition.type}} ng-class=\\\"{\\'widget-move-mode\\': editMode}\\\" class=\\\"panel panel-default widget widget_{{definition.wid}}\\\"> <a name={{definition.wid}} id={{definition.wid}}></a> <div class=\\\"panel-heading clearfix\\\" ng-if=\\\"!widget.frameless || editMode\\\"> <div ng-include src=definition.titleTemplateUrl></div> </div> <div ng-class=\\\"{ \\'panel-body\\':!widget.frameless || editMode, \\'widget-blur-loading\\': (navOptionsHandler && navOptionsHandler.firstLoad && navOptionsHandler.loadingData) }\\\"> <div ng-if=\\\"!widgetState.isCollapsed && config.widgetSelectors && !editMode && filter.showFilter\\\" class=\\\"row form-group filterconf\\\"> <div ng-if=\\\"filter.typeFilter === 0\\\" class=\\\"col-xs-12 col-md-8\\\"> <div class=filter mass-autocomplete> <input class=form-control name=filterValue readonly disabled ng-keydown=enter($event) ng-model=search.oql placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.ENTER.FILTER.ADVANCED\\' | translate }}\\\" mass-autocomplete-item=autocomplete_options() ng-change=debugQuery()> <i ng-if=\\\"search.oql && !search.queryFields\\\" class=\\\"glyphicon glyphicon-warning-sign ng-scope\\\" uib-popover=\\\"This filter is deprecated, please make click over the edit button to configure the new one!\\\" popover-append-to-body=true popover-trigger=\\\"\\'outsideClick\\'\\\" popover-placement=bottom-left popover-class=\\\"popover-markdown large\\\"></i> <label ng-click=launchSearchingAdv() class=\\\"glyphicon glyphicon-edit\\\"></label> </div> <div ng-if=\\\"!editMode && filter_error\\\" class=col-xs-12> <alert type=danger class=\\\"text-center text-danger\\\"> <span>{{filter_error}}</span> </alert> </div> <div ng-if=\\\"filter.showFinalFilter && search.json\\\" class=col-xs-12> <pre>{{ search.json }}</pre> </div> </div> <div ng-if=\\\"filter.typeFilter === 1\\\" class=\\\"col-xs-12 col-md-8\\\"> <div class=filter> <input class=form-control name=filterValue ng-keydown=enter($event) ng-blur=launchSearchingQuick() ng-model=search.quick placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.ENTER.FILTER.BASIC\\' | translate}}\\\"> <label ng-click=launchSearchingQuick() class=glyphicon ng-class=\\\"{ \\'glyphicon-search\\' : !filterApplied, \\'glyphicon-ok\\': filterApplied}\\\"></label> </div> </div> <div ng-if=\\\"filter.typeFilter === 2\\\" class=\\\"col-xs-12 col-md-8\\\"> <div class=filter> <ui-select id=sharedFilter ng-model=search.id theme=bootstrap title=\\\"{{ \\'FORM.TITLE.SHARED_FILTER\\' | translate }}\\\" on-select=\\\"filterSharedSelect($item, $model)\\\" on-remove=\\\"filterSharedRemove($item, $model)\\\"> <ui-select-match placeholder=\\\"{{ \\'FORM.PLACEHOLDER.SHARED_FILTER\\' | translate }}\\\" allow-clear=true>{{$select.selected.title | translate }} </ui-select-match> <ui-select-choices repeat=\\\"sharedFilter in sharedFilters | filter: $select.search\\\"> <div> <span ng-bind-html=\\\"sharedFilter.title | highlight: $select.search | translate\\\"> </span></div> <small> <div ng-if=\\\"sharedFilter.filter.type === \\'advanced\\'\\\">{{ \\'FORM.LABEL.ADVANCED\\' | translate }} <span ng-bind-html=\\\"\\'\\'+sharedFilter.filter.oql | highlight: $select.search\\\"></span> </div> <div ng-if=\\\"sharedFilter.filter.type === \\'basic\\'\\\">{{ \\'FORM.LABEL.BASIC\\' | translate }} <span ng-bind-html=\\\"\\'\\'+sharedFilter.filter.value | highlight: $select.search\\\"></span> </div> </small> </ui-select-choices> </ui-select> </div> </div> <div class=\\\"col-xs-12 col-md-4\\\" uib-dropdown> <button class=\\\"btn btn-sm\\\" uib-dropdown-toggle title=\\\"{{\\'ADF.WIDGET.TITLE.TOGGLE_AVANCED_BASIC_FILTER\\' | translate }}\\\">  <i class=\\\"advanced-filter glyphicon\\\" ng-class=\\\"{\\'glyphicon-font\\' : filter.typeFilter === 0, \\'glyphicon-bold\\' : filter.typeFilter ===1, \\'glyphicon-share\\' : filter.typeFilter ===2,}\\\"></i> <span class=caret></span> </button> <ul class=\\\"dropdown-menu panel\\\" style=\\\"border: 1px groove;\\\" uib-dropdown-menu aria-labelledby=simple-dropdown>  <li> <a href ng-click=launchSearchingAdv()> <i class=\\\"advanced-filter glyphicon glyphicon-font txt-primary\\\"></i> {{\\'ADF.WIDGET.TITLE.FILTER.CUSTOM_ADVANCED\\' | translate}}</a> </li> <li ng-click=\\\"filter.typeFilter = 1\\\"> <a href> <i class=\\\"basic-filter glyphicon glyphicon-bold txt-primary\\\"></i> {{\\'ADF.WIDGET.TITLE.FILTER.BASIC\\' | translate}}</a> </li> <li ng-click=\\\"filter.typeFilter = 2\\\"> <a href> <i class=\\\"basic-filter glyphicon glyphicon-share txt-primary\\\"></i> {{\\'ADF.WIDGET.TITLE.FILTER.SHARED\\' | translate}}</a> </li> </ul> </div> </div> <div ng-if=\\\"customSelectors && config.sort && filter.showFilter && !editMode\\\" class=\\\"row form-group\\\" style=\\\"margin-top: 5px !important;\\\"> <div class=\\\"sort col-xs-12 col-md-8\\\"> <ui-select ng-model=config.sort.value theme=bootstrap title=\\\"{{\\'ADF.WIDGET.TITLE.CHOOSE_ORDER\\' | translate}}\\\" allow-clear=true append-to-body=true ng-change=launchSearching() ng-click=getCustomSelectors()> <ui-select-match placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.SHORTED_BY\\' | translate}}\\\" allow-clear=true>{{ \\'ADF.WIDGET.TITLE.SORTED_BY\\' | translate:{item: $select.selected} }}</ui-select-match> <ui-select-choices repeat=\\\"selector in customSelectors | filter: $select.search track by $index\\\"> <small> <span ng-bind-html=\\\"selector | highlight: $select.search\\\"></span> </small> </ui-select-choices> </ui-select> </div> <div class=\\\"sortDirection col-xs-4 col-md-4\\\"> <button class=\\\"btn btn-sm pointer\\\" ng-click=changeDirection() ng-disabled=\\\"config.sort.value === \\'\\'\\\" title=\\\"{{\\'ADF.WIDGET.TITLE.TOGGLE_SORTING_DIRECTION\\' | translate}}\\\"> <i class=glyphicon style=font-size:1.3em; ng-class=\\\"config.sort.direction===\\'ASCENDING\\' ? \\'glyphicon-sort-by-attributes\\': \\'glyphicon-sort-by-attributes-alt\\'\\\"></i> </button> </div> </div> <adf-widget-content ng-if=definition model=definition content=widget extra=options.extraData nav-options-handler=navOptionsHandler filter-handler=filterHandler widget-actions-handler=widgetActionsHandler> </adf-widget-content></div> <div class=loaderContainer ng-if=\\\"navOptionsHandler && navOptionsHandler.firstLoad && navOptionsHandler.loadingData\\\"> <img class=loaderImage src={{widget.images[0]}}> </div> <div class=row ng-if=\\\"config.showSaveButton && sendEntities\\\"> <div class=col-xs-12> <button type=button class=\\\"btn btn-xs btn-primary pull-right oux-button-margin\\\" ng-click=sendEntities() translate>ADF.COMMON.SAVE</button> </div> </div> <div class=\\\"panel-footer row no-padding no-margin\\\"> <div class=\\\"col-xs-7 text-left\\\"> <span ng-if=\\\"navOptionsHandler && navOptionsHandler.statusMessage && !navOptionsHandler.loadingData && !navOptionsHandler.firstLoad\\\">{{navOptionsHandler.statusMessage | translate}}</span> </div> <div class=\\\"col-xs-5 spinner-container\\\" ng-if=\\\"navOptionsHandler && navOptionsHandler.loadingData && !navOptionsHandler.firstLoad\\\"> <div class=\\\"spinner pull-right\\\"></div> </div> <div class=\\\"col-xs-5 text-right no-padding no-margin\\\" ng-if=\\\"navOptionsHandler && navOptionsHandler.lastMessageTime && !navOptionsHandler.loadingData && !navOptionsHandler.firstLoad\\\"> <small class=label am-time-ago=navOptionsHandler.lastMessageTime></small> </div> </div> </div>\");\n$templateCache.put(\"../src/templates/widget-selection.html\",\"<style>\\n    .selected-entities-control .ui-select-container>div:first-child {\\n        max-height: 300px;\\n        overflow-y: scroll;\\n        overflow-x: hidden;\\n    }\\n\\n</style> <form name=widgetSelectionForm novalidate role=form ng-submit=saveChangesDialog()> <div class=modal-header> <div class=\\\"col-xs-12 col-md-12\\\"> <h3 class=\\\"modal-title text-left\\\"> <i class=\\\"fa fa-check-square-o\\\" aria-hidden=true></i> {{\\'ADF.WIDGET.TITLE.SELECTED_ITEMS\\' | translate}}</h3> </div> </div> <div class=modal-body> <div class=col-xs-12> <div class=\\\"form-group selected-entities-control\\\"> <label for=currentSelection translate>ADF.WIDGET.LABEL.CURRENT_SELECTION</label> <ui-select multiple tagging ng-model=currentSelection.selected theme=bootstrap sortable=false title=\\\"{{\\'ADF.WIDGET.TITLE.SELECTED_ITEMS\\' | translate}}\\\"> <ui-select-match placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.NO_SELECTED\\' | translate}}\\\"> <div class=text-left style=\\\"margin-right: 15px;font-size: 0.9em;max-width:350px;\\\" ng-if=$item.value.visible> <span style=\\\"white-space: initial;word-break: break-word;\\\" ng-repeat=\\\"(k,v) in $item.value.visible track by $index\\\" ng-if=\\\"v !== undefined\\\"> <strong>{{k | translate}}:</strong> {{v}} <br> </span> </div> <div class=text-left style=\\\"margin-right: 15px;font-size: 0.9em;max-width:350px;\\\" ng-if=!$item.value.visible> <span style=\\\"white-space: initial;word-break: break-word;\\\">{{$item.key}}</span> </div> </ui-select-match> <ui-select-choices repeat=\\\"itemSel in currentSelection.selected | filter:$select.search\\\"> {{itemSel.key}} </ui-select-choices> </ui-select> </div> </div> <div class=\\\"col-xs-12 text-left\\\"> <button type=button class=\\\"btn btn-success btn-sm\\\" ng-click=restoreSelection() ng-disabled=\\\"currentSelection.selected.length === selectedItemsLength\\\" translate>ADF.WIDGET.BUTTON.RESTORE</button> <button type=button class=\\\"btn btn-danger btn-sm\\\" ng-click=clearSelection() ng-disabled=\\\"currentSelection.selected.length < 1\\\" translate>ADF.WIDGET.BUTTON.CLEAR</button> </div> </div> <div class=modal-footer> <div permission permission-only=\\\"\\'viewFilter\\'\\\" class=\\\"col-xs-12 col-md-2 text-left\\\"> <div uib-dropdown ng-if=\\\"selectionConfig && selectionConfig.filterTypes && currentSelection.selected.length > 0\\\"> <button id=applyFilterBy type=button class=\\\"btn btn-primary\\\" uib-dropdown-toggle> <i class=\\\"glyphicon glyphicon-filter pointer\\\"></i> {{\\'ADF.WIDGET.BUTTON.FILTER_BY\\' | translate}} <span class=caret></span> </button> <ul class=dropdown-menu uib-dropdown-menu role=menu aria-labelledby=applyFilterBy> <li role=menuitem ng-repeat=\\\"filterType in selectionConfig.filterTypes\\\"> <a href ng-click=applyFilter(filterType) title=\\\"{{\\'ADF.WIDGET.BUTTON.SELECTED\\' | translate:{filterType: filterType} }}\\\">{{\\'ADF.WIDGET.BUTTON.SELECTED\\' | translate:{filterType: filterType} }}</a> </li> </ul> </div> </div> <div permission permission-only=\\\"\\'executeOperation\\'\\\" class=\\\"col-xs-12 col-md-3 text-left\\\"> <div uib-dropdown ng-if=\\\"selectionConfig && selectionConfig.operationTypes && currentSelection.selected.length > 0\\\"> <button id=executeOperation type=button class=\\\"btn btn-primary\\\" uib-dropdown-toggle> <i class=\\\"glyphicon glyphicon-flash pointer\\\"></i> {{\\'ADF.WIDGET.BUTTON.EXECUTE_OPERATION\\' | translate}} <span class=caret></span> </button> <ul class=dropdown-menu uib-dropdown-menu role=menu aria-labelledby=executeOperation> <li role=menuitem ng-repeat=\\\"operationType in selectionConfig.operationTypes\\\"> <a href ng-click=executeOperation(operationType) title={{operationType|translate}}>{{operationType|translate}}</a> </li> </ul> </div> </div> <div class=\\\"col-xs-12 col-md-7 text-right\\\"> <button type=submit class=\\\"btn btn-primary\\\" ng-disabled=\\\"currentSelection.selected.length === selectedItemsLength\\\" translate value=\\\"{{\\'ADF.WIDGET.BUTTON.APPLY\\' | translate }}\\\">ADF.WIDGET.BUTTON.APPLY</button> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() translate>ADF.COMMON.CLOSE</button> </div> </div> </form> \");\n$templateCache.put(\"../src/templates/exist-template.html\",\"<select class=select-custom-querybuilder ng-model=rule.data ng-options=\\\"x for x in rule.field.existsOptions\\\"></select>\");\n$templateCache.put(\"../src/templates/in-template-entities.html\",\" <ui-select multiple tagging tagging-label=false ng-model=rule.data style=\\\"width: 300px;\\\"> <ui-select-match placeholder=\\\"{{ \\'FORM.PLACEHOLDER.FILTER_IN\\' | translate }}\\\">{{$item}}</ui-select-match> <ui-select-choices repeat=\\\"value in rule.field.data | filter:$select.search\\\"> {{value}} </ui-select-choices> </ui-select>\");\n$templateCache.put(\"../src/templates/in-template.html\",\"<ui-select multiple tagging tagging-label=false ng-model=rule.data style=\\\"width: 200px;\\\"> <ui-select-match placeholder=\\\"{{ \\'FORM.PLACEHOLDER.FILTER_IN\\' | translate }}\\\">{{$item}}</ui-select-match> <ui-select-choices repeat=\\\"value in rule.field.data | filter:$select.search\\\"> {{value}} </ui-select-choices> </ui-select>\");\n$templateCache.put(\"../src/templates/input-template.html\",\"<div ng-if=\\\"rule.field.type===\\'object\\'\\\"> <input type=text ng-required=true ng-model=rule.field.data> </div> <div ng-if=\\\"rule.field.type!==\\'object\\'\\\"> <div ng-if=\\\"!rule.field.suffix || rule.field.suffix===\\'._current.value\\'\\\" sf-schema=rule.field.schemaForm class={{rule.field.schemaName}} sf-form=rule.field.form sf-model=rule.model> </div> <input ng-if=\\\"rule.field.suffix && rule.field.suffix!==\\'._current.value\\'\\\" type=text ng-required=true ng-model=rule.field.data> </div> \");}]);\n})(window);"]}