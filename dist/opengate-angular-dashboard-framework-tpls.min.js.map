{"version":3,"sources":["adf.js","column.js","dashboard.js","order-by-object-key.js","provider.js","opengate-angular-dashboard-framework-tpls.min.js","row.js","structure-preview.js","widget-content.js","widget-service.js","widget.js","opengate-angular-dashboard-framework.tpl.js","opengate-angular-dashboard-framework-tpls.js"],"names":["window","undefined","angular","module","value","directive","$log","$compile","$rootScope","adfTemplatePath","rowTemplate","dashboard","moveWidgetInColumn","$scope","column","evt","widgets","$apply","splice","newIndex","oldIndex","$broadcast","findWidget","index","widget","i","length","w","idEquals","wid","findColumn","model","rows","r","j","columns","c","cid","getId","el","id","getAttribute","addWidgetToColumn","targetColumn","from","sourceColumn","item","warn","removeWidgetFromColumn","applySortable","$element","sortable","Sortable","create","group","handle","ghostClass","animation","onAdd","onRemove","onUpdate","on","destroy","restrict","replace","scope","editMode","continuousEditMode","adfModel","options","templateUrl","link","col","isDefined","isArray","cloned","append","$timeout","$uibModal","$faIcons","stringToBoolean","string","toLowerCase","Boolean","copyWidgets","source","target","shift","push","fillStructure","root","counter","forEach","row","isUndefined","readColumns","changeStructure","structure","copy","createConfiguration","type","cfg","config","createWidget","wdgt","findFirstWidgetColumn","error","addNewWidgetToModel","name","forceToSave","unshift","isEditModeImmediate","edit","immediate","openEditMode","split","object","size","arr","key","createCategories","categories","category","createCategoriesList","categoryTags","categoriesTmp","idx","indexOf","transclude","collapsible","editable","maximizable","adfWidgetFilter","hideButtons","extraData","controller","getNewModalScope","$new","widgetFilter","structureName","$watch","oldVal","newVal","structures","title","titleTemplateUrl","editClass","deleteDashboard","dashData","toggleEditMode","openConfigWindow","modelCopy","editDashboardDialog","saveTemporalDashboard","temporal","adfToggleEditMode","$on","event","isNewDashboard","adfCancelEditMode","cancelEditMode","collapseAll","collapseExpandStatus","adfEditDashboardDialog","adfLaunchSearchingFromWidget","configFilter","adfWindowTimeChangedFromWidget","windowFilter","editDashboardScope","description","icon","availableIcons","list","adfEditTemplatePath","editTemplateUrl","instance","open","backdrop","keyboard","info","closeDialog","close","$destroy","adfOpenWidgetFromOther","internal_config","_config","merge","adfOpenModalWidgetFromOther","widgetType","fullScreenScope","definition","opts","modalSize","windowClass","persistDashboard","this","$parent","adfAddWidgetDialog","addWidgetDialog","addScope","isFunction","availableCategories","adfAddTemplatePath","addTemplateUrl","addWidget","changeThumbnail","images","_currThumb","_currImg","$attr","enableConfirmDelete","editing","filter","$filter","array","objectKey","provider","widgetsPath","messageTemplate","loadingTemplate","customWidgetTemplatePath","defaultApplyFunction","extend","reload","frameless","apply","path","template","templatePath","$get","Date","getTime","other","toString","columnTemplate","adjustRowHeight","container","height","style","prepareStructure","preview","selected","$q","widgetService","$controller","$injector","$translate","renderError","msg","html","compileWidget","currentScope","configChanged","_getWindowTime","newScope","to","moment","subtract","_d","content","extra","is_menu","menu","is_itemsPerPage","itemsPerPage","reloadData","renderWidget","then","translateMessage","getWindowTime","winTime","eval","rawdate","format","templateScope","selectionManager","base","resolvers","$tpl","getTemplate","resolve","promise","isString","get","invoke","all","locals","resolveAs","templateCtrl","controllerAs","children","data","contents","reason","widgetConfigChangedEvt","widgetReloadEvt","factory","$http","$sce","$templateCache","parseUrl","url","parsedUrl","substring","exposed","deferred","defer","tpl","getTrustedResourceUrl","success","response","put","reject","$interval","Filter","preLink","styleClass","fromJson","reloadPeriod","show_modal_footer","show_reload_config","widgetState","isCollapsed","collapsed","debug","postLink","_setReloadTimeout","stopReloadTimeout","cancel","deleteWidget","remove","deleteScope","deleteTemplateUrl","deleteDialog","print","isExecuteOperationEnabled","entityKey","oql","executeOperation","completeReload","sort","direction","toggleAdvanced","search","json","quick","fields","customFilter","v","toggleFilter","advanced","filterAvailable","showFilter","showFinalFilter","launchSearching","element","addCustomFilter","launchCustomFilter","and","like","JSON","stringify","deleteFilter","launchSearchingAdv","Object","keys","applyFilter","launchSearchingQuick","timeObj","enter","keycode","keyCode","which","customSelectors","getCustomSelectors","widgetSelectors","findFields","err","getcustomFilter","ifCustomFilter","showCustomFields","changeDirection","debugQuery","parseQuery","toJson","unknownWords","autocomplete_options","suggest","suggest_field_delimited","selectedItems","currentSelection","isSelected","obj","totalSelected","manageSelectedItems","selectionScope","selectionConfig","manageItemsSelectedTemplate","restoreSelection","clearSelection","customOql","filterAction","operationType","saveChangesDialog","finalSelection","visible","selectedItemsLength","lastItem","createApplyPromise","result","when","editScope","saveDialog","validationError","applyFn","adfDashboardCollapseExpand","args","adfWidgetEnterEditMode","adfIsEditMode","adfDashboardChanged","adfDashboardEditsCancelled","widgetClasses","classes","openFullScreen","openFilter","openAboutScreen","modalInstance","$uibModalInstance","information","about","ok","selectedItem","saveWidgetScreen","wId","$emit","objectSelector","fileName","onWindowTimeChanged","gt","operationDate","lt","createQuickFilter","fieldsQuickSearch","criteria","_filter","or","field","operator","downloadCsv","extra_filter","scope_filter","final_filter","order","window_filter","parse","trim","generateQR","addItemToSelection","removeItemFromSelection","compile","pre","post","run"],"mappings":"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","file":"opengate-angular-dashboard-framework-tpls.min.js","sourcesContent":["/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('adf', ['adf.provider', 'ui.bootstrap', 'opengate-angular-js'])\r\n    .value('adfTemplatePath', '../src/templates/')\r\n    .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\r\n    .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\r\n    .value('adfVersion', '<<adfVersion>>');","/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardColumn', function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\r\n    'use strict';\r\n\r\n    /**\r\n     * moves a widget in between a column\r\n     */\r\n    function moveWidgetInColumn($scope, column, evt){\r\n      var widgets = column.widgets;\r\n      // move widget and apply to scope\r\n      $scope.$apply(function(){\r\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\r\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * finds a widget by its id in the column\r\n     */\r\n    function findWidget(column, index){\r\n      var widget = null;\r\n      for (var i=0; i<column.widgets.length; i++){\r\n        var w = column.widgets[i];\r\n        if (dashboard.idEquals(w.wid,index)){\r\n          widget = w;\r\n          break;\r\n        }\r\n      }\r\n      return widget;\r\n    }\r\n\r\n    /**\r\n     * finds a column by its id in the model\r\n     */\r\n    function findColumn(model, index){\r\n      var column = null;\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var r = model.rows[i];\r\n        for (var j=0; j<r.columns.length; j++){\r\n          var c = r.columns[j];\r\n          if (dashboard.idEquals(c.cid, index)){\r\n            column = c;\r\n            break;\r\n          } else if (c.rows){\r\n            column = findColumn(c, index);\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    /**\r\n     * get the adf id from an html element\r\n     */\r\n    function getId(el){\r\n      var id = el.getAttribute('adf-id');\r\n      return id ? id : '-1';\r\n    }\r\n\r\n    /**\r\n     * adds a widget to a column\r\n     */\r\n    function addWidgetToColumn($scope, model, targetColumn, evt){\r\n      // find source column\r\n      var cid = getId(evt.from);\r\n      var sourceColumn = findColumn(model, cid);\r\n\r\n      if (sourceColumn){\r\n        // find moved widget\r\n        var wid = getId(evt.item);\r\n        var widget = findWidget(sourceColumn, wid);\r\n\r\n        if (widget){\r\n          // add new item and apply to scope\r\n          $scope.$apply(function(){\r\n            if (!targetColumn.widgets) {\r\n              targetColumn.widgets = [];\r\n            }\r\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\r\n\r\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\r\n          });\r\n        } else {\r\n          $log.warn('could not find widget with id ' + wid);\r\n        }\r\n      } else {\r\n        $log.warn('could not find column with id ' + cid);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * removes a widget from a column\r\n     */\r\n    function removeWidgetFromColumn($scope, column, evt){\r\n      // remove old item and apply to scope\r\n      $scope.$apply(function(){\r\n        column.widgets.splice(evt.oldIndex, 1);\r\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * enable sortable\r\n     */\r\n    function applySortable($scope, $element, model, column){\r\n      // enable drag and drop\r\n      var el = $element[0];\r\n      var sortable = Sortable.create(el, {\r\n        group: 'widgets',\r\n        handle: '.adf-move',\r\n        ghostClass: 'placeholder',\r\n        animation: 150,\r\n        onAdd: function(evt){\r\n          addWidgetToColumn($scope, model, column, evt);\r\n        },\r\n        onRemove: function(evt){\r\n          removeWidgetFromColumn($scope, column, evt);\r\n        },\r\n        onUpdate: function(evt){\r\n          moveWidgetInColumn($scope, column, evt);\r\n        }\r\n      });\r\n\r\n      // destroy sortable on column destroy event\r\n      $element.on('$destroy', function () {\r\n        // check sortable element, before calling destroy\r\n        // see https://github.com/sdorra/angular-dashboard-framework/issues/118\r\n        if (sortable.el){\r\n          sortable.destroy();\r\n        }\r\n      });\r\n    }\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        column: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        adfModel: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\r\n      link: function ($scope, $element) {\r\n        // set id\r\n        var col = $scope.column;\r\n        if (!col.cid){\r\n          col.cid = dashboard.id();\r\n        }\r\n\r\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\r\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\r\n          $compile(rowTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        } else {\r\n          // enable drag and drop for widget only columns\r\n          applySortable($scope, $element, $scope.adfModel, col);\r\n        }\r\n      }\r\n    };\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name adf.directive:adfDashboard\r\n * @element div\r\n * @restrict EA\r\n * @scope\r\n * @description\r\n *\r\n * `adfDashboard` is a directive which renders the dashboard with all its\r\n * components. The directive requires a name attribute. The name of the\r\n * dashboard can be used to store the model.\r\n *\r\n * @param {string} name name of the dashboard. This attribute is required.\r\n * @param {boolean=} editable false to disable the editmode of the dashboard.\r\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\r\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\r\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\r\n * @param {string=} structure the default structure of the dashboard.\r\n * @param {object=} adfModel model object of the dashboard.\r\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\r\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\r\n *                   events during edit mode not reset it if edit mode is exited.\r\n * @param {boolean=} categories enable categories for the add widget dialog.\r\n */\r\n\r\nangular.module('adf')\r\n    .directive('adfDashboard', function ($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath, $faIcons) {\r\n        'use strict';\r\n\r\n        function stringToBoolean(string) {\r\n            switch (angular.isDefined(string) ? string.toLowerCase() : null) {\r\n                case 'true':\r\n                case 'yes':\r\n                case '1':\r\n                    return true;\r\n                case 'false':\r\n                case 'no':\r\n                case '0':\r\n                case null:\r\n                    return false;\r\n                default:\r\n                    return Boolean(string);\r\n            }\r\n        }\r\n\r\n        function copyWidgets(source, target) {\r\n            if (source.widgets && source.widgets.length > 0) {\r\n                var w = source.widgets.shift();\r\n                while (w) {\r\n                    target.widgets.push(w);\r\n                    w = source.widgets.shift();\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Copy widget from old columns to the new model\r\n         * @param object root the model\r\n         * @param array of columns\r\n         * @param counter\r\n         */\r\n        function fillStructure(root, columns, counter) {\r\n            counter = counter || 0;\r\n\r\n            if (angular.isDefined(root.rows)) {\r\n                angular.forEach(root.rows, function (row) {\r\n                    angular.forEach(row.columns, function (column) {\r\n                        // if the widgets prop doesn't exist, create a new array for it.\r\n                        // this allows ui.sortable to do it's thing without error\r\n                        if (!column.widgets) {\r\n                            column.widgets = [];\r\n                        }\r\n\r\n                        // if a column exist at the counter index, copy over the column\r\n                        if (angular.isDefined(columns[counter])) {\r\n                            // do not add widgets to a column, which uses nested rows\r\n                            if (angular.isUndefined(column.rows)) {\r\n                                copyWidgets(columns[counter], column);\r\n                                counter++;\r\n                            }\r\n                        }\r\n\r\n                        // run fillStructure again for any sub rows/columns\r\n                        counter = fillStructure(column, columns, counter);\r\n                    });\r\n                });\r\n            }\r\n            return counter;\r\n        }\r\n\r\n        /**\r\n         * Read Columns: recursively searches an object for the 'columns' property\r\n         * @param object model\r\n         * @param array  an array of existing columns; used when recursion happens\r\n         */\r\n        function readColumns(root, columns) {\r\n            columns = columns || [];\r\n\r\n            if (angular.isDefined(root.rows)) {\r\n                angular.forEach(root.rows, function (row) {\r\n                    angular.forEach(row.columns, function (col) {\r\n                        columns.push(col);\r\n                        // keep reading columns until we can't any more\r\n                        readColumns(col, columns);\r\n                    });\r\n                });\r\n            }\r\n\r\n            return columns;\r\n        }\r\n\r\n        function changeStructure(model, structure) {\r\n            var columns = readColumns(model);\r\n            var counter = 0;\r\n\r\n            model.rows = angular.copy(structure.rows);\r\n\r\n            while (counter < columns.length) {\r\n                counter = fillStructure(model, columns, counter);\r\n            }\r\n        }\r\n\r\n        function createConfiguration(type) {\r\n            var cfg = {};\r\n            var config = dashboard.widgets[type].config;\r\n            if (config) {\r\n                cfg = angular.copy(config);\r\n            }\r\n            return cfg;\r\n        }\r\n\r\n        function createWidget(type) {\r\n            var wdgt = {};\r\n            var widget = dashboard.widgets[type];\r\n            if (widget) {\r\n                wdgt = angular.copy(widget);\r\n            }\r\n            return wdgt;\r\n        }\r\n\r\n        /**\r\n         * Find first widget column in model.\r\n         *\r\n         * @param dashboard model\r\n         */\r\n        function findFirstWidgetColumn(model) {\r\n            var column = null;\r\n            if (!angular.isArray(model.rows)) {\r\n                $log.error('model does not have any rows');\r\n                return null;\r\n            }\r\n            for (var i = 0; i < model.rows.length; i++) {\r\n                var row = model.rows[i];\r\n                if (angular.isArray(row.columns)) {\r\n                    for (var j = 0; j < row.columns.length; j++) {\r\n                        var col = row.columns[j];\r\n                        if (!col.rows) {\r\n                            column = col;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if (column) {\r\n                    break;\r\n                }\r\n            }\r\n            return column;\r\n        }\r\n\r\n        /**\r\n         * Adds the widget to first column of the model.\r\n         *\r\n         * @param dashboard model\r\n         * @param widget to add to model\r\n         * @param name name of the dashboard\r\n         */\r\n        function addNewWidgetToModel(model, widget, name, forceToSave) {\r\n            if (model) {\r\n                var column = findFirstWidgetColumn(model);\r\n                if (column) {\r\n                    if (!column.widgets) {\r\n                        column.widgets = [];\r\n                    }\r\n                    column.widgets.unshift(widget);\r\n\r\n                    // broadcast added event\r\n                    $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\r\n\r\n                    if (forceToSave) {\r\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n                    }\r\n                } else {\r\n                    $log.error('could not find first widget column');\r\n                }\r\n            } else {\r\n                $log.error('model is undefined');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Checks if the edit mode of the widget should be opened immediately.\r\n         *\r\n         * @param widget type\r\n         */\r\n        function isEditModeImmediate(type) {\r\n            var widget = dashboard.widgets[type];\r\n            return widget && widget.edit && widget.edit.immediate;\r\n        }\r\n\r\n        /**\r\n         * Opens the edit mode of the specified widget.\r\n         *\r\n         * @param dashboard scope\r\n         * @param widget\r\n         */\r\n        function openEditMode($scope, widget) {\r\n            // wait some time before fire enter edit mode event\r\n            $timeout(function () {\r\n                $scope.$broadcast('adfWidgetEnterEditMode', widget);\r\n            }, 200);\r\n        }\r\n\r\n        /**\r\n         * Splits an object into an array multiple objects inside.\r\n         *\r\n         * @param object source object\r\n         * @param size size of array\r\n         *\r\n         * @return array of splitted objects\r\n         */\r\n        function split(object, size) {\r\n            var arr = [];\r\n            var i = 0;\r\n            angular.forEach(object, function (value, key) {\r\n                var index = i++ % size;\r\n                if (!arr[index]) {\r\n                    arr[index] = {};\r\n                }\r\n                arr[index][key] = value;\r\n            });\r\n            return arr;\r\n        }\r\n\r\n        /**\r\n         * Creates object with the category name as key and an array of widgets as value.\r\n         *\r\n         * @param widgets array of widgets\r\n         *\r\n         * @return array of categories\r\n         */\r\n        function createCategories(widgets) {\r\n            var categories = {};\r\n            angular.forEach(widgets, function (widget, key) {\r\n                var category = widget.category;\r\n                // if the widget has no category use a default one\r\n                if (!category) {\r\n                    category = 'ADF.CATEGORY.MISCELANOUS';\r\n                }\r\n                // push widget to category array\r\n                if (angular.isUndefined(categories[category])) {\r\n                    categories[category] = {\r\n                        widgets: {}\r\n                    };\r\n                }\r\n                categories[category].widgets[key] = widget;\r\n            });\r\n            return categories;\r\n        }\r\n\r\n        function createCategoriesList(widgets) {\r\n            var categories = [];\r\n            angular.forEach(widgets, function (widget, key) {\r\n                if (!widget.category) {\r\n                    widget.category = 'ADF.CATEGORY.MISCELLANEOUS';\r\n                }\r\n\r\n                if (!widget.categoryTags) {\r\n                    widget.categoryTags = 'ADF.CATEGORY.TAG.MISCELLANEOUS';\r\n                }\r\n                \r\n                var categoriesTmp = widget.categoryTags.split(',');\r\n\r\n                angular.forEach(categoriesTmp, function(category, idx) {\r\n                    // push widget to category array\r\n                    if (categories.indexOf(category) === -1) \r\n                        categories.push(category)\r\n                });\r\n                \r\n            });\r\n            return categories;\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            scope: {\r\n                structure: '@',\r\n                name: '@',\r\n                collapsible: '@',\r\n                editable: '@',\r\n                editMode: '@',\r\n                continuousEditMode: '=',\r\n                maximizable: '@',\r\n                adfModel: '=',\r\n                adfWidgetFilter: '=',\r\n                categories: '@',\r\n                hideButtons: '=',\r\n                extraData: '='\r\n            },\r\n            controller: function ($scope) {\r\n                var model = {};\r\n                var structure = {};\r\n                var widgetFilter = null;\r\n                var structureName = {};\r\n                var name = $scope.name;\r\n\r\n                // Watching for changes on adfModel\r\n                $scope.$watch('adfModel', function (oldVal, newVal) {\r\n                    // has model changed or is the model attribute not set\r\n                    if (newVal !== null || (oldVal === null && newVal === null)) {\r\n                        model = $scope.adfModel;\r\n                        widgetFilter = $scope.adfWidgetFilter;\r\n                        if (!model || !model.rows) {\r\n                            structureName = $scope.structure;\r\n                            structure = dashboard.structures[structureName];\r\n                            if (structure) {\r\n                                if (model) {\r\n                                    model.rows = angular.copy(structure).rows;\r\n                                } else {\r\n                                    model = angular.copy(structure);\r\n                                }\r\n                                model.structure = structureName;\r\n                            } else {\r\n                                $log.error('could not find structure ' + structureName);\r\n                            }\r\n                        }\r\n\r\n                        if (model) {\r\n                            if (!model.title) {\r\n                                model.title = 'ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD';\r\n                            }\r\n                            if (!model.titleTemplateUrl) {\r\n                                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\r\n                            }\r\n                            $scope.model = model;\r\n                        } else {\r\n                            $log.error('could not find or create model');\r\n                        }\r\n                    }\r\n                }, true);\r\n\r\n                // edit mode\r\n                $scope.editMode = false;\r\n                $scope.editClass = '';\r\n\r\n                function getNewModalScope() {\r\n                    var scope = $scope.$new();\r\n                    return scope;\r\n                }\r\n\r\n                $scope.deleteDashboard = function () {\r\n                    var dashData = {\r\n                        id: model.id,\r\n                        name: model.title\r\n                    };\r\n\r\n                    $rootScope.$broadcast('dashboardDelete', dashData);\r\n                };\r\n\r\n                $scope.toggleEditMode = function (openConfigWindow) {\r\n                    $scope.editMode = !$scope.editMode;\r\n                    if ($scope.editMode) {\r\n                        if (!$scope.continuousEditMode) {\r\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n                            $rootScope.$broadcast('adfIsEditMode');\r\n                        }\r\n\r\n                        if (openConfigWindow) {\r\n                            $scope.editDashboardDialog();\r\n                        }\r\n                    }\r\n\r\n                    if (!$scope.editMode) {\r\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n                    }\r\n                };\r\n\r\n                $scope.saveTemporalDashboard = function () {\r\n                    delete model.temporal;\r\n                    $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n                };\r\n\r\n                var adfToggleEditMode = $scope.$on('adfToggleEditMode', function (event, isNewDashboard) {\r\n                    if (isNewDashboard) {\r\n                        $scope.toggleEditMode(true);\r\n                    } else {\r\n                        $scope.toggleEditMode();\r\n                    }\r\n                });\r\n\r\n                var adfCancelEditMode = $scope.$on('adfCancelEditMode', function (event, isNewDashboard) {\r\n                    if ($scope.editMode) {\r\n                        $scope.cancelEditMode();\r\n                    }\r\n                });\r\n\r\n                $scope.collapseAll = function (collapseExpandStatus) {\r\n                    $rootScope.$broadcast('adfDashboardCollapseExpand', {\r\n                        collapseExpandStatus: collapseExpandStatus\r\n                    });\r\n                };\r\n\r\n                $scope.cancelEditMode = function () {\r\n                    $scope.editMode = false;\r\n                    if (!$scope.continuousEditMode && ($scope.modelCopy !== $scope.adfModel)) {\r\n                        $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\r\n                    }\r\n                    $rootScope.$broadcast('adfDashboardEditsCancelled');\r\n                };\r\n\r\n                var adfEditDashboardDialog = $scope.$on('adfEditDashboardDialog', function (event, isNewDashboard) {\r\n                    if ($scope.editMode) {\r\n                        $scope.editDashboardDialog();\r\n                    }\r\n                });\r\n\r\n                var adfLaunchSearchingFromWidget = $scope.$on('adfLaunchSearchingFromWidget', function (event, widget, configFilter) {\r\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\r\n                });\r\n                var adfWindowTimeChangedFromWidget = $scope.$on('adfWindowTimeChangedFromWidget', function (event, widget, windowFilter) {\r\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\r\n                });\r\n\r\n                // edit dashboard settings\r\n                $scope.editDashboardDialog = function () {\r\n                    var editDashboardScope = getNewModalScope();\r\n                    // create a copy of the title, to avoid changing the title to\r\n                    // \"dashboard\" if the field is empty\r\n                    editDashboardScope.copy = {\r\n                        title: (model.title !== 'ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD' ? model.title : ''),\r\n                        description: model.description,\r\n                        icon: model.icon ? model.icon : 'fa-tachometer'\r\n                    };\r\n\r\n                    // pass icon list\r\n                    editDashboardScope.availableIcons = $faIcons.list();\r\n\r\n                    // pass dashboard structure to scope\r\n                    editDashboardScope.structures = dashboard.structures;\r\n\r\n                    // pass split function to scope, to be able to display structures in multiple columns\r\n                    editDashboardScope.split = split;\r\n\r\n                    var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\r\n                    if (model.editTemplateUrl) {\r\n                        adfEditTemplatePath = model.editTemplateUrl;\r\n                    }\r\n                    var instance = $uibModal.open({\r\n                        scope: editDashboardScope,\r\n                        templateUrl: adfEditTemplatePath,\r\n                        backdrop: 'static',\r\n                        keyboard: false,\r\n                        size: 'lg'\r\n                    });\r\n\r\n                    editDashboardScope.changeStructure = function (name, structure) {\r\n                        $log.info('change structure to ' + name);\r\n                        changeStructure(model, structure);\r\n                        if (model.structure !== name) {\r\n                            model.structure = name;\r\n                        }\r\n                    };\r\n                    editDashboardScope.closeDialog = function () {\r\n                        // copy the new title back to the model\r\n                        model.title = editDashboardScope.copy.title;\r\n                        model.description = editDashboardScope.copy.description;\r\n                        model.icon = editDashboardScope.copy.icon;\r\n\r\n                        // close modal and destroy the scope\r\n                        instance.close();\r\n                        editDashboardScope.$destroy();\r\n                    };\r\n                };\r\n\r\n                var adfOpenWidgetFromOther = $scope.$on('adfOpenWidgetFromOther', function (event, widget, config) {\r\n                    var internal_config = createConfiguration(widget);\r\n                    var _config = angular.merge({}, internal_config, config);\r\n                    var w = {\r\n                        type: widget,\r\n                        config: _config,\r\n                        title: _config.title\r\n                    };\r\n                    addNewWidgetToModel(model, w, name, !$scope.editMode);\r\n                });\r\n\r\n                var adfOpenModalWidgetFromOther = $scope.$on('adfOpenModalWidgetFromOther', function (event, widgetType, config) {\r\n                    var widget = createWidget(widgetType);\r\n                    widget.config = angular.merge({}, widget.config, config);\r\n                    widget.type = widgetType;\r\n                    if (widget.config.title) {\r\n                        widget.title = widget.config.title;\r\n                    }\r\n                    var fullScreenScope = $scope.$new();\r\n                    fullScreenScope.definition = fullScreenScope.widget = widget;\r\n                    var opts = {\r\n                        scope: fullScreenScope,\r\n                        templateUrl: adfTemplatePath + 'widget-fullscreen.html',\r\n                        size: fullScreenScope.definition.modalSize || 'lg', // 'sm', 'lg'\r\n                        backdrop: 'static',\r\n                        windowClass: (fullScreenScope.definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\r\n                    };\r\n\r\n                    fullScreenScope.persistDashboard = function () {\r\n                        $rootScope.$broadcast('adfOpenWidgetFromOther', this.$parent.widget.type, this.$parent.widget.config);\r\n                        this.closeDialog();\r\n                    }\r\n\r\n                    var instance = $uibModal.open(opts);\r\n                    fullScreenScope.closeDialog = function () {\r\n                        instance.close();\r\n                        fullScreenScope.$destroy();\r\n                    };\r\n\r\n                });\r\n\r\n                var adfAddWidgetDialog = $scope.$on('adfAddWidgetDialog', function (event, isNewDashboard) {\r\n                    if (!model.temporal && model.editable) {\r\n                        if (!$scope.editMode) {\r\n                            $scope.editMode = true;\r\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n                            $rootScope.$broadcast('adfIsEditMode');\r\n                        }\r\n\r\n                        $scope.addWidgetDialog();\r\n                    }\r\n                });\r\n\r\n                // add widget dialog\r\n                $scope.addWidgetDialog = function () {\r\n                    var addScope = getNewModalScope();\r\n                    var widgets;\r\n                    if (angular.isFunction(widgetFilter)) {\r\n                        widgets = {};\r\n                        angular.forEach(dashboard.widgets, function (widget, type) {\r\n                            if (widgetFilter(widget, type, model)) {\r\n                                widgets[type] = widget;\r\n                            }\r\n                        });\r\n                    } else {\r\n                        widgets = dashboard.widgets;\r\n                    }\r\n                    addScope.widgets = widgets;\r\n\r\n                    angular.forEach(addScope.widgets, function (widget, type) {\r\n                        widget.key = type;\r\n                        if (!widget.category) {\r\n                            widget.category = 'Miscellaneous';\r\n                        }\r\n                    });\r\n                    \r\n                    // pass createCategories function to scope, if categories option is enabled\r\n                    if ($scope.options.categories) {\r\n                        addScope.createCategories = createCategories;\r\n                    } else {\r\n                        addScope.availableCategories = createCategoriesList(widgets);\r\n                    }\r\n\r\n                    var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\r\n                    if (model.addTemplateUrl) {\r\n                        adfAddTemplatePath = model.addTemplateUrl;\r\n                    }\r\n\r\n                    var opts = {\r\n                        scope: addScope,\r\n                        templateUrl: adfAddTemplatePath,\r\n                        backdrop: 'static',\r\n                        size: 'lg'\r\n                    };\r\n\r\n                    var instance = $uibModal.open(opts);\r\n                    addScope.widgetFilter = {};\r\n                    addScope.addWidget = function (widget) {\r\n                        var w = {\r\n                            type: widget,\r\n                            config: createConfiguration(widget)\r\n                        };\r\n                        addNewWidgetToModel(model, w, name);\r\n                        // close and destroy\r\n                        instance.close();\r\n                        addScope.$destroy();\r\n\r\n                        // check for open edit mode immediately\r\n                        if (isEditModeImmediate(widget)) {\r\n                            openEditMode($scope, w);\r\n                        }\r\n                    };\r\n\r\n                    addScope.changeThumbnail = function (widget) {\r\n                        if ( widget.images) {\r\n                            if (angular.isUndefined(widget._currThumb)) {\r\n                                widget._currThumb = 1;\r\n                            } else {\r\n                                widget._currThumb+=1;\r\n                            }\r\n                            \r\n                            \r\n                            if (widget._currThumb >= widget.images.length) {\r\n                                widget._currThumb = 0;\r\n                            } \r\n    \r\n                            widget._currImg = widget.images[widget._currThumb];\r\n                        }                        \r\n                    };\r\n\r\n                    addScope.closeDialog = function () {\r\n                        // close and destroy\r\n                        instance.close();\r\n                        addScope.$destroy();\r\n                    };\r\n                };\r\n\r\n                $scope.addNewWidgetToModel = addNewWidgetToModel;\r\n\r\n                $scope.$on('destroy', function () {\r\n                    adfLaunchSearchingFromWidget();\r\n                    adfWindowTimeChangedFromWidget();\r\n                    adfToggleEditMode();\r\n                    adfOpenWidgetFromOther();\r\n                    adfOpenModalWidgetFromOther();\r\n                    adfCancelEditMode();\r\n                    adfAddWidgetDialog();\r\n                    adfEditDashboardDialog();\r\n                });\r\n            },\r\n            link: function ($scope, $element, $attr) {\r\n                // pass options to scope\r\n                var options = {\r\n                    name: $attr.name,\r\n                    editable: true,\r\n                    enableConfirmDelete: stringToBoolean($attr.enableConfirmDelete),\r\n                    maximizable: stringToBoolean($attr.maximizable),\r\n                    collapsible: stringToBoolean($attr.collapsible),\r\n                    categories: stringToBoolean($attr.categories),\r\n                    extraData: {}\r\n                };\r\n\r\n                if (angular.isDefined($attr.editable)) {\r\n                    options.editable = stringToBoolean($attr.editable);\r\n                }\r\n\r\n                if (angular.isDefined($scope.extraData)) {\r\n                    options.extraData = $scope.extraData;\r\n                }\r\n\r\n                options.extraData.editing = $scope.editMode;\r\n\r\n                $scope.options = options;\r\n            },\r\n            templateUrl: adfTemplatePath + 'dashboard.html'\r\n        };\r\n    });","/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .filter('adfOrderByObjectKey', function($filter) {\r\n    'use strict';\r\n\r\n    return function(item, key){\r\n      var array = [];\r\n      angular.forEach(item, function(value, objectKey){\r\n        value[key] = objectKey;\r\n        array.push(value);\r\n      });\r\n      return $filter('orderBy')(array, key);\r\n    };\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * @ngdoc object\r\n * @name adf.dashboardProvider\r\n * @description\r\n *\r\n * The dashboardProvider can be used to register structures and widgets.\r\n */\r\nangular.module('adf.provider', [])\r\n    .provider('dashboard', function () {\r\n\r\n        var widgets = {};\r\n        var widgetsPath = '';\r\n        var structures = {};\r\n        var messageTemplate = '<div class=\"alert alert-primary\">{}</div>';\r\n        var loadingTemplate = '\\\r\n      <div class=\"progress progress-striped active\">\\n\\\r\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\r\n          <span class=\"sr-only\" translate>FORM.MSG.LOADING ...</span>\\n\\\r\n        </div>\\n\\\r\n      </div>';\r\n        var customWidgetTemplatePath = null;\r\n\r\n        // default apply function of widget.edit.apply\r\n        var defaultApplyFunction = function () {\r\n            return true;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#widget\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Registers a new widget.\r\n         *\r\n         * @param {string} name of the widget\r\n         * @param {object} widget to be registered.\r\n         *\r\n         *   Object properties:\r\n         *\r\n         *   - `title` - `{string=}` - The title of the widget.\r\n         *   - `description` - `{string=}` - Description of the widget.\r\n         *   - `category` - `{string=}` - Category of the widget.\r\n         *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\r\n         *   - `config` - `{object}` - Predefined widget configuration.\r\n         *   - `controller` - `{string=|function()=}` - Controller fn that should be\r\n         *      associated with newly created scope of the widget or the name of a\r\n         *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\r\n         *      if passed as a string.\r\n         *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\r\n         *      published to scope under the `controllerAs` name.\r\n         *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\r\n         *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\r\n         *   - `template` - `{string=|function()=}` - html template as a string.\r\n         *   - `templateUrl` - `{string=}` - path to an html template.\r\n         *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\r\n         *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n         *      be injected into the controller. If any of these dependencies are promises, the widget\r\n         *      will wait for them all to be resolved or one to be rejected before the controller is\r\n         *      instantiated.\r\n         *      If all the promises are resolved successfully, the values of the resolved promises are\r\n         *      injected.\r\n         *\r\n         *      The map object is:\r\n         *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\r\n         *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n         *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\r\n         *        and the return value is treated as the dependency. If the result is a promise, it is\r\n         *        resolved before its value is injected into the controller.\r\n         *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n         *      on the scope of the widget.\r\n         *   - `edit` - `{object}` - Edit modus of the widget.\r\n         *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n         *        on the scope of the widget.\r\n         *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\r\n         *        Default is true.\r\n         *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\r\n         *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\r\n         *        The function have to return a boolean or an promise which can be resolved to a boolean.\r\n         *        The function can use injection.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.widget = function (name, widget) {\r\n            var w = angular.extend({\r\n                reload: false,\r\n                frameless: false\r\n            }, widget);\r\n            if (w.edit) {\r\n                var edit = {\r\n                    reload: true,\r\n                    immediate: false,\r\n                    apply: defaultApplyFunction\r\n                };\r\n                angular.extend(edit, w.edit);\r\n                w.edit = edit;\r\n            }\r\n            widgets[name] = w;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#widgetsPath\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Sets the path to the directory which contains the widgets. The widgets\r\n         * path is used for widgets with a templateUrl which contains the\r\n         * placeholder {widgetsPath}. The placeholder is replaced with the\r\n         * configured value, before the template is loaded, but the template is\r\n         * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\r\n         * The default value of widgetPaths is ''.\r\n         *\r\n         *\r\n         * @param {string} path to the directory which contains the widgets\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.widgetsPath = function (path) {\r\n            widgetsPath = path;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#structure\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Registers a new structure.\r\n         *\r\n         * @param {string} name of the structure\r\n         * @param {object} structure to be registered.\r\n         *\r\n         *   Object properties:\r\n         *\r\n         *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\r\n         *     - `styleClass` - `{string}` - CSS Class of the row.\r\n         *     - `columns` - `{Array.<Object>}` - Columns of the row.\r\n         *       - `styleClass` - `{string}` - CSS Class of the column.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.structure = function (name, structure) {\r\n            structures[name] = structure;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#messageTemplate\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the template for messages.\r\n         *\r\n         * @param {string} template for messages.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.messageTemplate = function (template) {\r\n            messageTemplate = template;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#loadingTemplate\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the template which is displayed as\r\n         * long as the widget resources are not resolved.\r\n         *\r\n         * @param {string} template loading template\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.loadingTemplate = function (template) {\r\n            loadingTemplate = template;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#customWidgetTemplatePath\r\n         * @propertyOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the container template for the widgets\r\n         *\r\n         * @param {string} path to the custom widget template\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.customWidgetTemplatePath = function (templatePath) {\r\n            customWidgetTemplatePath = templatePath;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc service\r\n         * @name adf.dashboard\r\n         * @description\r\n         *\r\n         * The dashboard holds all options, structures and widgets.\r\n         *\r\n         * @property {Array.<Object>} widgets Array of registered widgets.\r\n         * @property {string} widgetsPath Default path for widgets.\r\n         * @property {Array.<Object>} structures Array of registered structures.\r\n         * @property {string} messageTemplate Template for messages.\r\n         * @property {string} loadingTemplate Template for widget loading.\r\n         * * @property {string} customWidgetTemplatePath Changes the container template for the widgets\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.$get = function () {\r\n            var cid = 0;\r\n\r\n            return {\r\n                widgets: widgets,\r\n                widgetsPath: widgetsPath,\r\n                structures: structures,\r\n                messageTemplate: messageTemplate,\r\n                loadingTemplate: loadingTemplate,\r\n                customWidgetTemplatePath: customWidgetTemplatePath,\r\n\r\n                /**\r\n                 * @ngdoc method\r\n                 * @name adf.dashboard#id\r\n                 * @methodOf adf.dashboard\r\n                 * @description\r\n                 *\r\n                 * Creates an ongoing numeric id. The method is used to create ids for\r\n                 * columns and widgets in the dashboard.\r\n                 */\r\n                id: function () {\r\n                    return new Date().getTime() + '-' + (++cid);\r\n                },\r\n\r\n                /**\r\n                 * @ngdoc method\r\n                 * @name adf.dashboard#idEqual\r\n                 * @methodOf adf.dashboard\r\n                 * @description\r\n                 *\r\n                 * Checks if the given ids are equal.\r\n                 *\r\n                 * @param {string} id widget or column id\r\n                 * @param {string} other widget or column id\r\n                 */\r\n                idEquals: function (id, other) {\r\n                    // use toString, because old ids are numbers\r\n                    return ((id) && (other)) && (id.toString() === other.toString());\r\n                }\r\n            };\r\n        };\r\n\r\n    });","(function(window, undefined) {'use strict';\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf', ['adf.provider', 'ui.bootstrap', 'opengate-angular-js'])\r\n    .value('adfTemplatePath', '../src/templates/')\r\n    .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\r\n    .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\r\n    .value('adfVersion', '4.0.0');\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardColumn', [\"$log\", \"$compile\", \"$rootScope\", \"adfTemplatePath\", \"rowTemplate\", \"dashboard\", function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\r\n    \r\n\r\n    /**\r\n     * moves a widget in between a column\r\n     */\r\n    function moveWidgetInColumn($scope, column, evt){\r\n      var widgets = column.widgets;\r\n      // move widget and apply to scope\r\n      $scope.$apply(function(){\r\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\r\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * finds a widget by its id in the column\r\n     */\r\n    function findWidget(column, index){\r\n      var widget = null;\r\n      for (var i=0; i<column.widgets.length; i++){\r\n        var w = column.widgets[i];\r\n        if (dashboard.idEquals(w.wid,index)){\r\n          widget = w;\r\n          break;\r\n        }\r\n      }\r\n      return widget;\r\n    }\r\n\r\n    /**\r\n     * finds a column by its id in the model\r\n     */\r\n    function findColumn(model, index){\r\n      var column = null;\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var r = model.rows[i];\r\n        for (var j=0; j<r.columns.length; j++){\r\n          var c = r.columns[j];\r\n          if (dashboard.idEquals(c.cid, index)){\r\n            column = c;\r\n            break;\r\n          } else if (c.rows){\r\n            column = findColumn(c, index);\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    /**\r\n     * get the adf id from an html element\r\n     */\r\n    function getId(el){\r\n      var id = el.getAttribute('adf-id');\r\n      return id ? id : '-1';\r\n    }\r\n\r\n    /**\r\n     * adds a widget to a column\r\n     */\r\n    function addWidgetToColumn($scope, model, targetColumn, evt){\r\n      // find source column\r\n      var cid = getId(evt.from);\r\n      var sourceColumn = findColumn(model, cid);\r\n\r\n      if (sourceColumn){\r\n        // find moved widget\r\n        var wid = getId(evt.item);\r\n        var widget = findWidget(sourceColumn, wid);\r\n\r\n        if (widget){\r\n          // add new item and apply to scope\r\n          $scope.$apply(function(){\r\n            if (!targetColumn.widgets) {\r\n              targetColumn.widgets = [];\r\n            }\r\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\r\n\r\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\r\n          });\r\n        } else {\r\n          $log.warn('could not find widget with id ' + wid);\r\n        }\r\n      } else {\r\n        $log.warn('could not find column with id ' + cid);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * removes a widget from a column\r\n     */\r\n    function removeWidgetFromColumn($scope, column, evt){\r\n      // remove old item and apply to scope\r\n      $scope.$apply(function(){\r\n        column.widgets.splice(evt.oldIndex, 1);\r\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * enable sortable\r\n     */\r\n    function applySortable($scope, $element, model, column){\r\n      // enable drag and drop\r\n      var el = $element[0];\r\n      var sortable = Sortable.create(el, {\r\n        group: 'widgets',\r\n        handle: '.adf-move',\r\n        ghostClass: 'placeholder',\r\n        animation: 150,\r\n        onAdd: function(evt){\r\n          addWidgetToColumn($scope, model, column, evt);\r\n        },\r\n        onRemove: function(evt){\r\n          removeWidgetFromColumn($scope, column, evt);\r\n        },\r\n        onUpdate: function(evt){\r\n          moveWidgetInColumn($scope, column, evt);\r\n        }\r\n      });\r\n\r\n      // destroy sortable on column destroy event\r\n      $element.on('$destroy', function () {\r\n        // check sortable element, before calling destroy\r\n        // see https://github.com/sdorra/angular-dashboard-framework/issues/118\r\n        if (sortable.el){\r\n          sortable.destroy();\r\n        }\r\n      });\r\n    }\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        column: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        adfModel: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\r\n      link: function ($scope, $element) {\r\n        // set id\r\n        var col = $scope.column;\r\n        if (!col.cid){\r\n          col.cid = dashboard.id();\r\n        }\r\n\r\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\r\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\r\n          $compile(rowTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        } else {\r\n          // enable drag and drop for widget only columns\r\n          applySortable($scope, $element, $scope.adfModel, col);\r\n        }\r\n      }\r\n    };\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name adf.directive:adfDashboard\r\n * @element div\r\n * @restrict EA\r\n * @scope\r\n * @description\r\n *\r\n * `adfDashboard` is a directive which renders the dashboard with all its\r\n * components. The directive requires a name attribute. The name of the\r\n * dashboard can be used to store the model.\r\n *\r\n * @param {string} name name of the dashboard. This attribute is required.\r\n * @param {boolean=} editable false to disable the editmode of the dashboard.\r\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\r\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\r\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\r\n * @param {string=} structure the default structure of the dashboard.\r\n * @param {object=} adfModel model object of the dashboard.\r\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\r\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\r\n *                   events during edit mode not reset it if edit mode is exited.\r\n * @param {boolean=} categories enable categories for the add widget dialog.\r\n */\r\n\r\nangular.module('adf')\r\n    .directive('adfDashboard', [\"$rootScope\", \"$log\", \"$timeout\", \"$uibModal\", \"dashboard\", \"adfTemplatePath\", \"$faIcons\", function ($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath, $faIcons) {\r\n        \r\n\r\n        function stringToBoolean(string) {\r\n            switch (angular.isDefined(string) ? string.toLowerCase() : null) {\r\n                case 'true':\r\n                case 'yes':\r\n                case '1':\r\n                    return true;\r\n                case 'false':\r\n                case 'no':\r\n                case '0':\r\n                case null:\r\n                    return false;\r\n                default:\r\n                    return Boolean(string);\r\n            }\r\n        }\r\n\r\n        function copyWidgets(source, target) {\r\n            if (source.widgets && source.widgets.length > 0) {\r\n                var w = source.widgets.shift();\r\n                while (w) {\r\n                    target.widgets.push(w);\r\n                    w = source.widgets.shift();\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Copy widget from old columns to the new model\r\n         * @param object root the model\r\n         * @param array of columns\r\n         * @param counter\r\n         */\r\n        function fillStructure(root, columns, counter) {\r\n            counter = counter || 0;\r\n\r\n            if (angular.isDefined(root.rows)) {\r\n                angular.forEach(root.rows, function (row) {\r\n                    angular.forEach(row.columns, function (column) {\r\n                        // if the widgets prop doesn't exist, create a new array for it.\r\n                        // this allows ui.sortable to do it's thing without error\r\n                        if (!column.widgets) {\r\n                            column.widgets = [];\r\n                        }\r\n\r\n                        // if a column exist at the counter index, copy over the column\r\n                        if (angular.isDefined(columns[counter])) {\r\n                            // do not add widgets to a column, which uses nested rows\r\n                            if (angular.isUndefined(column.rows)) {\r\n                                copyWidgets(columns[counter], column);\r\n                                counter++;\r\n                            }\r\n                        }\r\n\r\n                        // run fillStructure again for any sub rows/columns\r\n                        counter = fillStructure(column, columns, counter);\r\n                    });\r\n                });\r\n            }\r\n            return counter;\r\n        }\r\n\r\n        /**\r\n         * Read Columns: recursively searches an object for the 'columns' property\r\n         * @param object model\r\n         * @param array  an array of existing columns; used when recursion happens\r\n         */\r\n        function readColumns(root, columns) {\r\n            columns = columns || [];\r\n\r\n            if (angular.isDefined(root.rows)) {\r\n                angular.forEach(root.rows, function (row) {\r\n                    angular.forEach(row.columns, function (col) {\r\n                        columns.push(col);\r\n                        // keep reading columns until we can't any more\r\n                        readColumns(col, columns);\r\n                    });\r\n                });\r\n            }\r\n\r\n            return columns;\r\n        }\r\n\r\n        function changeStructure(model, structure) {\r\n            var columns = readColumns(model);\r\n            var counter = 0;\r\n\r\n            model.rows = angular.copy(structure.rows);\r\n\r\n            while (counter < columns.length) {\r\n                counter = fillStructure(model, columns, counter);\r\n            }\r\n        }\r\n\r\n        function createConfiguration(type) {\r\n            var cfg = {};\r\n            var config = dashboard.widgets[type].config;\r\n            if (config) {\r\n                cfg = angular.copy(config);\r\n            }\r\n            return cfg;\r\n        }\r\n\r\n        function createWidget(type) {\r\n            var wdgt = {};\r\n            var widget = dashboard.widgets[type];\r\n            if (widget) {\r\n                wdgt = angular.copy(widget);\r\n            }\r\n            return wdgt;\r\n        }\r\n\r\n        /**\r\n         * Find first widget column in model.\r\n         *\r\n         * @param dashboard model\r\n         */\r\n        function findFirstWidgetColumn(model) {\r\n            var column = null;\r\n            if (!angular.isArray(model.rows)) {\r\n                $log.error('model does not have any rows');\r\n                return null;\r\n            }\r\n            for (var i = 0; i < model.rows.length; i++) {\r\n                var row = model.rows[i];\r\n                if (angular.isArray(row.columns)) {\r\n                    for (var j = 0; j < row.columns.length; j++) {\r\n                        var col = row.columns[j];\r\n                        if (!col.rows) {\r\n                            column = col;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if (column) {\r\n                    break;\r\n                }\r\n            }\r\n            return column;\r\n        }\r\n\r\n        /**\r\n         * Adds the widget to first column of the model.\r\n         *\r\n         * @param dashboard model\r\n         * @param widget to add to model\r\n         * @param name name of the dashboard\r\n         */\r\n        function addNewWidgetToModel(model, widget, name, forceToSave) {\r\n            if (model) {\r\n                var column = findFirstWidgetColumn(model);\r\n                if (column) {\r\n                    if (!column.widgets) {\r\n                        column.widgets = [];\r\n                    }\r\n                    column.widgets.unshift(widget);\r\n\r\n                    // broadcast added event\r\n                    $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\r\n\r\n                    if (forceToSave) {\r\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n                    }\r\n                } else {\r\n                    $log.error('could not find first widget column');\r\n                }\r\n            } else {\r\n                $log.error('model is undefined');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Checks if the edit mode of the widget should be opened immediately.\r\n         *\r\n         * @param widget type\r\n         */\r\n        function isEditModeImmediate(type) {\r\n            var widget = dashboard.widgets[type];\r\n            return widget && widget.edit && widget.edit.immediate;\r\n        }\r\n\r\n        /**\r\n         * Opens the edit mode of the specified widget.\r\n         *\r\n         * @param dashboard scope\r\n         * @param widget\r\n         */\r\n        function openEditMode($scope, widget) {\r\n            // wait some time before fire enter edit mode event\r\n            $timeout(function () {\r\n                $scope.$broadcast('adfWidgetEnterEditMode', widget);\r\n            }, 200);\r\n        }\r\n\r\n        /**\r\n         * Splits an object into an array multiple objects inside.\r\n         *\r\n         * @param object source object\r\n         * @param size size of array\r\n         *\r\n         * @return array of splitted objects\r\n         */\r\n        function split(object, size) {\r\n            var arr = [];\r\n            var i = 0;\r\n            angular.forEach(object, function (value, key) {\r\n                var index = i++ % size;\r\n                if (!arr[index]) {\r\n                    arr[index] = {};\r\n                }\r\n                arr[index][key] = value;\r\n            });\r\n            return arr;\r\n        }\r\n\r\n        /**\r\n         * Creates object with the category name as key and an array of widgets as value.\r\n         *\r\n         * @param widgets array of widgets\r\n         *\r\n         * @return array of categories\r\n         */\r\n        function createCategories(widgets) {\r\n            var categories = {};\r\n            angular.forEach(widgets, function (widget, key) {\r\n                var category = widget.category;\r\n                // if the widget has no category use a default one\r\n                if (!category) {\r\n                    category = 'ADF.CATEGORY.MISCELANOUS';\r\n                }\r\n                // push widget to category array\r\n                if (angular.isUndefined(categories[category])) {\r\n                    categories[category] = {\r\n                        widgets: {}\r\n                    };\r\n                }\r\n                categories[category].widgets[key] = widget;\r\n            });\r\n            return categories;\r\n        }\r\n\r\n        function createCategoriesList(widgets) {\r\n            var categories = [];\r\n            angular.forEach(widgets, function (widget, key) {\r\n                if (!widget.category) {\r\n                    widget.category = 'ADF.CATEGORY.MISCELLANEOUS';\r\n                }\r\n\r\n                if (!widget.categoryTags) {\r\n                    widget.categoryTags = 'ADF.CATEGORY.TAG.MISCELLANEOUS';\r\n                }\r\n                \r\n                var categoriesTmp = widget.categoryTags.split(',');\r\n\r\n                angular.forEach(categoriesTmp, function(category, idx) {\r\n                    // push widget to category array\r\n                    if (categories.indexOf(category) === -1) \r\n                        categories.push(category)\r\n                });\r\n                \r\n            });\r\n            return categories;\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            scope: {\r\n                structure: '@',\r\n                name: '@',\r\n                collapsible: '@',\r\n                editable: '@',\r\n                editMode: '@',\r\n                continuousEditMode: '=',\r\n                maximizable: '@',\r\n                adfModel: '=',\r\n                adfWidgetFilter: '=',\r\n                categories: '@',\r\n                hideButtons: '=',\r\n                extraData: '='\r\n            },\r\n            controller: [\"$scope\", function ($scope) {\r\n                var model = {};\r\n                var structure = {};\r\n                var widgetFilter = null;\r\n                var structureName = {};\r\n                var name = $scope.name;\r\n\r\n                // Watching for changes on adfModel\r\n                $scope.$watch('adfModel', function (oldVal, newVal) {\r\n                    // has model changed or is the model attribute not set\r\n                    if (newVal !== null || (oldVal === null && newVal === null)) {\r\n                        model = $scope.adfModel;\r\n                        widgetFilter = $scope.adfWidgetFilter;\r\n                        if (!model || !model.rows) {\r\n                            structureName = $scope.structure;\r\n                            structure = dashboard.structures[structureName];\r\n                            if (structure) {\r\n                                if (model) {\r\n                                    model.rows = angular.copy(structure).rows;\r\n                                } else {\r\n                                    model = angular.copy(structure);\r\n                                }\r\n                                model.structure = structureName;\r\n                            } else {\r\n                                $log.error('could not find structure ' + structureName);\r\n                            }\r\n                        }\r\n\r\n                        if (model) {\r\n                            if (!model.title) {\r\n                                model.title = 'ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD';\r\n                            }\r\n                            if (!model.titleTemplateUrl) {\r\n                                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\r\n                            }\r\n                            $scope.model = model;\r\n                        } else {\r\n                            $log.error('could not find or create model');\r\n                        }\r\n                    }\r\n                }, true);\r\n\r\n                // edit mode\r\n                $scope.editMode = false;\r\n                $scope.editClass = '';\r\n\r\n                function getNewModalScope() {\r\n                    var scope = $scope.$new();\r\n                    return scope;\r\n                }\r\n\r\n                $scope.deleteDashboard = function () {\r\n                    var dashData = {\r\n                        id: model.id,\r\n                        name: model.title\r\n                    };\r\n\r\n                    $rootScope.$broadcast('dashboardDelete', dashData);\r\n                };\r\n\r\n                $scope.toggleEditMode = function (openConfigWindow) {\r\n                    $scope.editMode = !$scope.editMode;\r\n                    if ($scope.editMode) {\r\n                        if (!$scope.continuousEditMode) {\r\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n                            $rootScope.$broadcast('adfIsEditMode');\r\n                        }\r\n\r\n                        if (openConfigWindow) {\r\n                            $scope.editDashboardDialog();\r\n                        }\r\n                    }\r\n\r\n                    if (!$scope.editMode) {\r\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n                    }\r\n                };\r\n\r\n                $scope.saveTemporalDashboard = function () {\r\n                    delete model.temporal;\r\n                    $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n                };\r\n\r\n                var adfToggleEditMode = $scope.$on('adfToggleEditMode', function (event, isNewDashboard) {\r\n                    if (isNewDashboard) {\r\n                        $scope.toggleEditMode(true);\r\n                    } else {\r\n                        $scope.toggleEditMode();\r\n                    }\r\n                });\r\n\r\n                var adfCancelEditMode = $scope.$on('adfCancelEditMode', function (event, isNewDashboard) {\r\n                    if ($scope.editMode) {\r\n                        $scope.cancelEditMode();\r\n                    }\r\n                });\r\n\r\n                $scope.collapseAll = function (collapseExpandStatus) {\r\n                    $rootScope.$broadcast('adfDashboardCollapseExpand', {\r\n                        collapseExpandStatus: collapseExpandStatus\r\n                    });\r\n                };\r\n\r\n                $scope.cancelEditMode = function () {\r\n                    $scope.editMode = false;\r\n                    if (!$scope.continuousEditMode && ($scope.modelCopy !== $scope.adfModel)) {\r\n                        $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\r\n                    }\r\n                    $rootScope.$broadcast('adfDashboardEditsCancelled');\r\n                };\r\n\r\n                var adfEditDashboardDialog = $scope.$on('adfEditDashboardDialog', function (event, isNewDashboard) {\r\n                    if ($scope.editMode) {\r\n                        $scope.editDashboardDialog();\r\n                    }\r\n                });\r\n\r\n                var adfLaunchSearchingFromWidget = $scope.$on('adfLaunchSearchingFromWidget', function (event, widget, configFilter) {\r\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\r\n                });\r\n                var adfWindowTimeChangedFromWidget = $scope.$on('adfWindowTimeChangedFromWidget', function (event, widget, windowFilter) {\r\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\r\n                });\r\n\r\n                // edit dashboard settings\r\n                $scope.editDashboardDialog = function () {\r\n                    var editDashboardScope = getNewModalScope();\r\n                    // create a copy of the title, to avoid changing the title to\r\n                    // \"dashboard\" if the field is empty\r\n                    editDashboardScope.copy = {\r\n                        title: (model.title !== 'ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD' ? model.title : ''),\r\n                        description: model.description,\r\n                        icon: model.icon ? model.icon : 'fa-tachometer'\r\n                    };\r\n\r\n                    // pass icon list\r\n                    editDashboardScope.availableIcons = $faIcons.list();\r\n\r\n                    // pass dashboard structure to scope\r\n                    editDashboardScope.structures = dashboard.structures;\r\n\r\n                    // pass split function to scope, to be able to display structures in multiple columns\r\n                    editDashboardScope.split = split;\r\n\r\n                    var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\r\n                    if (model.editTemplateUrl) {\r\n                        adfEditTemplatePath = model.editTemplateUrl;\r\n                    }\r\n                    var instance = $uibModal.open({\r\n                        scope: editDashboardScope,\r\n                        templateUrl: adfEditTemplatePath,\r\n                        backdrop: 'static',\r\n                        keyboard: false,\r\n                        size: 'lg'\r\n                    });\r\n\r\n                    editDashboardScope.changeStructure = function (name, structure) {\r\n                        $log.info('change structure to ' + name);\r\n                        changeStructure(model, structure);\r\n                        if (model.structure !== name) {\r\n                            model.structure = name;\r\n                        }\r\n                    };\r\n                    editDashboardScope.closeDialog = function () {\r\n                        // copy the new title back to the model\r\n                        model.title = editDashboardScope.copy.title;\r\n                        model.description = editDashboardScope.copy.description;\r\n                        model.icon = editDashboardScope.copy.icon;\r\n\r\n                        // close modal and destroy the scope\r\n                        instance.close();\r\n                        editDashboardScope.$destroy();\r\n                    };\r\n                };\r\n\r\n                var adfOpenWidgetFromOther = $scope.$on('adfOpenWidgetFromOther', function (event, widget, config) {\r\n                    var internal_config = createConfiguration(widget);\r\n                    var _config = angular.merge({}, internal_config, config);\r\n                    var w = {\r\n                        type: widget,\r\n                        config: _config,\r\n                        title: _config.title\r\n                    };\r\n                    addNewWidgetToModel(model, w, name, !$scope.editMode);\r\n                });\r\n\r\n                var adfOpenModalWidgetFromOther = $scope.$on('adfOpenModalWidgetFromOther', function (event, widgetType, config) {\r\n                    var widget = createWidget(widgetType);\r\n                    widget.config = angular.merge({}, widget.config, config);\r\n                    widget.type = widgetType;\r\n                    if (widget.config.title) {\r\n                        widget.title = widget.config.title;\r\n                    }\r\n                    var fullScreenScope = $scope.$new();\r\n                    fullScreenScope.definition = fullScreenScope.widget = widget;\r\n                    var opts = {\r\n                        scope: fullScreenScope,\r\n                        templateUrl: adfTemplatePath + 'widget-fullscreen.html',\r\n                        size: fullScreenScope.definition.modalSize || 'lg', // 'sm', 'lg'\r\n                        backdrop: 'static',\r\n                        windowClass: (fullScreenScope.definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\r\n                    };\r\n\r\n                    fullScreenScope.persistDashboard = function () {\r\n                        $rootScope.$broadcast('adfOpenWidgetFromOther', this.$parent.widget.type, this.$parent.widget.config);\r\n                        this.closeDialog();\r\n                    }\r\n\r\n                    var instance = $uibModal.open(opts);\r\n                    fullScreenScope.closeDialog = function () {\r\n                        instance.close();\r\n                        fullScreenScope.$destroy();\r\n                    };\r\n\r\n                });\r\n\r\n                var adfAddWidgetDialog = $scope.$on('adfAddWidgetDialog', function (event, isNewDashboard) {\r\n                    if (!model.temporal && model.editable) {\r\n                        if (!$scope.editMode) {\r\n                            $scope.editMode = true;\r\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n                            $rootScope.$broadcast('adfIsEditMode');\r\n                        }\r\n\r\n                        $scope.addWidgetDialog();\r\n                    }\r\n                });\r\n\r\n                // add widget dialog\r\n                $scope.addWidgetDialog = function () {\r\n                    var addScope = getNewModalScope();\r\n                    var widgets;\r\n                    if (angular.isFunction(widgetFilter)) {\r\n                        widgets = {};\r\n                        angular.forEach(dashboard.widgets, function (widget, type) {\r\n                            if (widgetFilter(widget, type, model)) {\r\n                                widgets[type] = widget;\r\n                            }\r\n                        });\r\n                    } else {\r\n                        widgets = dashboard.widgets;\r\n                    }\r\n                    addScope.widgets = widgets;\r\n\r\n                    angular.forEach(addScope.widgets, function (widget, type) {\r\n                        widget.key = type;\r\n                        if (!widget.category) {\r\n                            widget.category = 'Miscellaneous';\r\n                        }\r\n                    });\r\n                    \r\n                    // pass createCategories function to scope, if categories option is enabled\r\n                    if ($scope.options.categories) {\r\n                        addScope.createCategories = createCategories;\r\n                    } else {\r\n                        addScope.availableCategories = createCategoriesList(widgets);\r\n                    }\r\n\r\n                    var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\r\n                    if (model.addTemplateUrl) {\r\n                        adfAddTemplatePath = model.addTemplateUrl;\r\n                    }\r\n\r\n                    var opts = {\r\n                        scope: addScope,\r\n                        templateUrl: adfAddTemplatePath,\r\n                        backdrop: 'static',\r\n                        size: 'lg'\r\n                    };\r\n\r\n                    var instance = $uibModal.open(opts);\r\n                    addScope.widgetFilter = {};\r\n                    addScope.addWidget = function (widget) {\r\n                        var w = {\r\n                            type: widget,\r\n                            config: createConfiguration(widget)\r\n                        };\r\n                        addNewWidgetToModel(model, w, name);\r\n                        // close and destroy\r\n                        instance.close();\r\n                        addScope.$destroy();\r\n\r\n                        // check for open edit mode immediately\r\n                        if (isEditModeImmediate(widget)) {\r\n                            openEditMode($scope, w);\r\n                        }\r\n                    };\r\n\r\n                    addScope.changeThumbnail = function (widget) {\r\n                        if ( widget.images) {\r\n                            if (angular.isUndefined(widget._currThumb)) {\r\n                                widget._currThumb = 1;\r\n                            } else {\r\n                                widget._currThumb+=1;\r\n                            }\r\n                            \r\n                            \r\n                            if (widget._currThumb >= widget.images.length) {\r\n                                widget._currThumb = 0;\r\n                            } \r\n    \r\n                            widget._currImg = widget.images[widget._currThumb];\r\n                        }                        \r\n                    };\r\n\r\n                    addScope.closeDialog = function () {\r\n                        // close and destroy\r\n                        instance.close();\r\n                        addScope.$destroy();\r\n                    };\r\n                };\r\n\r\n                $scope.addNewWidgetToModel = addNewWidgetToModel;\r\n\r\n                $scope.$on('destroy', function () {\r\n                    adfLaunchSearchingFromWidget();\r\n                    adfWindowTimeChangedFromWidget();\r\n                    adfToggleEditMode();\r\n                    adfOpenWidgetFromOther();\r\n                    adfOpenModalWidgetFromOther();\r\n                    adfCancelEditMode();\r\n                    adfAddWidgetDialog();\r\n                    adfEditDashboardDialog();\r\n                });\r\n            }],\r\n            link: function ($scope, $element, $attr) {\r\n                // pass options to scope\r\n                var options = {\r\n                    name: $attr.name,\r\n                    editable: true,\r\n                    enableConfirmDelete: stringToBoolean($attr.enableConfirmDelete),\r\n                    maximizable: stringToBoolean($attr.maximizable),\r\n                    collapsible: stringToBoolean($attr.collapsible),\r\n                    categories: stringToBoolean($attr.categories),\r\n                    extraData: {}\r\n                };\r\n\r\n                if (angular.isDefined($attr.editable)) {\r\n                    options.editable = stringToBoolean($attr.editable);\r\n                }\r\n\r\n                if (angular.isDefined($scope.extraData)) {\r\n                    options.extraData = $scope.extraData;\r\n                }\r\n\r\n                options.extraData.editing = $scope.editMode;\r\n\r\n                $scope.options = options;\r\n            },\r\n            templateUrl: adfTemplatePath + 'dashboard.html'\r\n        };\r\n    }]);\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .filter('adfOrderByObjectKey', [\"$filter\", function($filter) {\r\n    \r\n\r\n    return function(item, key){\r\n      var array = [];\r\n      angular.forEach(item, function(value, objectKey){\r\n        value[key] = objectKey;\r\n        array.push(value);\r\n      });\r\n      return $filter('orderBy')(array, key);\r\n    };\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\n/**\r\n * @ngdoc object\r\n * @name adf.dashboardProvider\r\n * @description\r\n *\r\n * The dashboardProvider can be used to register structures and widgets.\r\n */\r\nangular.module('adf.provider', [])\r\n    .provider('dashboard', function () {\r\n\r\n        var widgets = {};\r\n        var widgetsPath = '';\r\n        var structures = {};\r\n        var messageTemplate = '<div class=\"alert alert-primary\">{}</div>';\r\n        var loadingTemplate = '\\\r\n      <div class=\"progress progress-striped active\">\\n\\\r\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\r\n          <span class=\"sr-only\" translate>FORM.MSG.LOADING ...</span>\\n\\\r\n        </div>\\n\\\r\n      </div>';\r\n        var customWidgetTemplatePath = null;\r\n\r\n        // default apply function of widget.edit.apply\r\n        var defaultApplyFunction = function () {\r\n            return true;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#widget\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Registers a new widget.\r\n         *\r\n         * @param {string} name of the widget\r\n         * @param {object} widget to be registered.\r\n         *\r\n         *   Object properties:\r\n         *\r\n         *   - `title` - `{string=}` - The title of the widget.\r\n         *   - `description` - `{string=}` - Description of the widget.\r\n         *   - `category` - `{string=}` - Category of the widget.\r\n         *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\r\n         *   - `config` - `{object}` - Predefined widget configuration.\r\n         *   - `controller` - `{string=|function()=}` - Controller fn that should be\r\n         *      associated with newly created scope of the widget or the name of a\r\n         *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\r\n         *      if passed as a string.\r\n         *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\r\n         *      published to scope under the `controllerAs` name.\r\n         *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\r\n         *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\r\n         *   - `template` - `{string=|function()=}` - html template as a string.\r\n         *   - `templateUrl` - `{string=}` - path to an html template.\r\n         *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\r\n         *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n         *      be injected into the controller. If any of these dependencies are promises, the widget\r\n         *      will wait for them all to be resolved or one to be rejected before the controller is\r\n         *      instantiated.\r\n         *      If all the promises are resolved successfully, the values of the resolved promises are\r\n         *      injected.\r\n         *\r\n         *      The map object is:\r\n         *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\r\n         *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n         *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\r\n         *        and the return value is treated as the dependency. If the result is a promise, it is\r\n         *        resolved before its value is injected into the controller.\r\n         *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n         *      on the scope of the widget.\r\n         *   - `edit` - `{object}` - Edit modus of the widget.\r\n         *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n         *        on the scope of the widget.\r\n         *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\r\n         *        Default is true.\r\n         *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\r\n         *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\r\n         *        The function have to return a boolean or an promise which can be resolved to a boolean.\r\n         *        The function can use injection.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.widget = function (name, widget) {\r\n            var w = angular.extend({\r\n                reload: false,\r\n                frameless: false\r\n            }, widget);\r\n            if (w.edit) {\r\n                var edit = {\r\n                    reload: true,\r\n                    immediate: false,\r\n                    apply: defaultApplyFunction\r\n                };\r\n                angular.extend(edit, w.edit);\r\n                w.edit = edit;\r\n            }\r\n            widgets[name] = w;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#widgetsPath\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Sets the path to the directory which contains the widgets. The widgets\r\n         * path is used for widgets with a templateUrl which contains the\r\n         * placeholder {widgetsPath}. The placeholder is replaced with the\r\n         * configured value, before the template is loaded, but the template is\r\n         * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\r\n         * The default value of widgetPaths is ''.\r\n         *\r\n         *\r\n         * @param {string} path to the directory which contains the widgets\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.widgetsPath = function (path) {\r\n            widgetsPath = path;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#structure\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Registers a new structure.\r\n         *\r\n         * @param {string} name of the structure\r\n         * @param {object} structure to be registered.\r\n         *\r\n         *   Object properties:\r\n         *\r\n         *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\r\n         *     - `styleClass` - `{string}` - CSS Class of the row.\r\n         *     - `columns` - `{Array.<Object>}` - Columns of the row.\r\n         *       - `styleClass` - `{string}` - CSS Class of the column.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.structure = function (name, structure) {\r\n            structures[name] = structure;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#messageTemplate\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the template for messages.\r\n         *\r\n         * @param {string} template for messages.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.messageTemplate = function (template) {\r\n            messageTemplate = template;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#loadingTemplate\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the template which is displayed as\r\n         * long as the widget resources are not resolved.\r\n         *\r\n         * @param {string} template loading template\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.loadingTemplate = function (template) {\r\n            loadingTemplate = template;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#customWidgetTemplatePath\r\n         * @propertyOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the container template for the widgets\r\n         *\r\n         * @param {string} path to the custom widget template\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.customWidgetTemplatePath = function (templatePath) {\r\n            customWidgetTemplatePath = templatePath;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc service\r\n         * @name adf.dashboard\r\n         * @description\r\n         *\r\n         * The dashboard holds all options, structures and widgets.\r\n         *\r\n         * @property {Array.<Object>} widgets Array of registered widgets.\r\n         * @property {string} widgetsPath Default path for widgets.\r\n         * @property {Array.<Object>} structures Array of registered structures.\r\n         * @property {string} messageTemplate Template for messages.\r\n         * @property {string} loadingTemplate Template for widget loading.\r\n         * * @property {string} customWidgetTemplatePath Changes the container template for the widgets\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.$get = function () {\r\n            var cid = 0;\r\n\r\n            return {\r\n                widgets: widgets,\r\n                widgetsPath: widgetsPath,\r\n                structures: structures,\r\n                messageTemplate: messageTemplate,\r\n                loadingTemplate: loadingTemplate,\r\n                customWidgetTemplatePath: customWidgetTemplatePath,\r\n\r\n                /**\r\n                 * @ngdoc method\r\n                 * @name adf.dashboard#id\r\n                 * @methodOf adf.dashboard\r\n                 * @description\r\n                 *\r\n                 * Creates an ongoing numeric id. The method is used to create ids for\r\n                 * columns and widgets in the dashboard.\r\n                 */\r\n                id: function () {\r\n                    return new Date().getTime() + '-' + (++cid);\r\n                },\r\n\r\n                /**\r\n                 * @ngdoc method\r\n                 * @name adf.dashboard#idEqual\r\n                 * @methodOf adf.dashboard\r\n                 * @description\r\n                 *\r\n                 * Checks if the given ids are equal.\r\n                 *\r\n                 * @param {string} id widget or column id\r\n                 * @param {string} other widget or column id\r\n                 */\r\n                idEquals: function (id, other) {\r\n                    // use toString, because old ids are numbers\r\n                    return ((id) && (other)) && (id.toString() === other.toString());\r\n                }\r\n            };\r\n        };\r\n\r\n    });\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardRow', [\"$compile\", \"adfTemplatePath\", \"columnTemplate\", function ($compile, adfTemplatePath, columnTemplate) {\r\n    \r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        row: '=',\r\n        adfModel: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\r\n      link: function($scope, $element) {\r\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\r\n          $compile(columnTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        }\r\n      }\r\n    };\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfStructurePreview', [\"adfTemplatePath\", function(adfTemplatePath) {\r\n\r\n    function adjustRowHeight(container){\r\n      if (container.rows && container.rows.length > 0){\r\n        var height = 100 / container.rows.length;\r\n        angular.forEach(container.rows, function(row){\r\n          row.style = {\r\n            height: height + '%'\r\n          }\r\n\r\n          if (row.columns){\r\n            angular.forEach(row.columns, function(column){\r\n              adjustRowHeight(column);\r\n            });\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    function prepareStructure($scope){\r\n      var structure = angular.copy($scope.structure);\r\n      adjustRowHeight(structure);\r\n      $scope.preview = structure;\r\n    }\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        name: '=',\r\n        structure: '=',\r\n        selected: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'structure-preview.html',\r\n      link: prepareStructure\r\n    };\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf')\r\n    .directive('adfWidgetContent', [\"$log\", \"$q\", \"widgetService\", \"$compile\", \"$controller\", \"$injector\", \"dashboard\", \"$translate\", function ($log, $q, widgetService,\r\n        $compile, $controller, $injector, dashboard, $translate) {\r\n\r\n        function renderError($element, msg) {\r\n            $log.warn(msg);\r\n            $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\r\n        }\r\n\r\n        function compileWidget($scope, $element, currentScope, configChanged) {\r\n            var model = $scope.model;\r\n            var content = $scope.content;\r\n\r\n            var extra = $scope.extra;\r\n\r\n            var newScope = currentScope;\r\n            if (!model) {\r\n                $translate('ADF.ERROR.MODEL_IS_UNDEFINED').then(function (translateMessage) {\r\n                    renderError($element, translateMessage);\r\n                });\r\n            } else if (!content) {\r\n                if (model.title) {\r\n                    $translate('ADF.ERROR.WIDGET_FOR_DEPRECTATED', {\r\n                        title: model.title\r\n                    }).then(function (translateMessage) {\r\n                        renderError($element, translateMessage);\r\n                    });\r\n                } else {\r\n                    $translate('ADF.ERROR.WIDGET_DEPRECTATED').then(function (translateMessage) {\r\n                        renderError($element, translateMessage);\r\n                    });\r\n                }\r\n            } else {\r\n                if (newScope) {\r\n                    var is_menu = newScope.menu !== undefined && newScope.menu !== null;\r\n                    var is_itemsPerPage = newScope.itemsPerPage !== undefined && newScope.itemsPerPage !== null;\r\n                    if (is_menu || is_itemsPerPage || configChanged || !angular.isFunction(newScope.reloadData)) {\r\n                        newScope = renderWidget($scope, $element, currentScope, model, content, extra);\r\n                    } else {\r\n                        newScope.reloadData();\r\n                    }\r\n                } else {\r\n                    newScope = renderWidget($scope, $element, currentScope, model, content, extra);\r\n                }\r\n            }\r\n\r\n            function _getWindowTime(type) {\r\n                if (type === \"custom\") {\r\n                    return {\r\n                        from: newScope.config.windowFilter.from,\r\n                        to: newScope.config.windowFilter.to\r\n                    }\r\n                }\r\n                var from = window.moment().subtract(1, type);\r\n                return {\r\n                    from: from._d\r\n                };\r\n            }\r\n\r\n            if (newScope) {\r\n                if (newScope.config) {\r\n                    newScope.config.getWindowTime = function () {\r\n                        var windowFilter = newScope.config.windowFilter;\r\n                        if (windowFilter && windowFilter.type) {\r\n                            var winTime = _getWindowTime(windowFilter.type);\r\n                            /* jshint ignore:start */\r\n                            if (!window.eval(newScope.config.windowFilter.rawdate)) {\r\n                                for (var key in winTime) {\r\n                                    winTime[key] = window.moment(winTime[key]).format();\r\n                                }\r\n                                winTime['rawdate'] = true;\r\n                            }\r\n                            /* jshint ignore:end */\r\n                            return winTime;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (extra) {\r\n                    newScope.editing = extra.editing ? true : false;\r\n                    newScope.extraData = extra;\r\n                }\r\n            }\r\n            return newScope;\r\n        }\r\n\r\n        function renderWidget($scope, $element, currentScope, model, content, extra) {\r\n            // display loading template\r\n            $element.html(dashboard.loadingTemplate);\r\n\r\n            // create new scope\r\n            var templateScope = $scope.$new();\r\n\r\n            // pass config object to scope\r\n            if (!model.config) {\r\n                model.config = {};\r\n            }\r\n\r\n            templateScope.config = model.config;\r\n            templateScope.editing = extra && extra.editing;\r\n\r\n            if (extra) {\r\n                templateScope.extra = extra;\r\n            }\r\n\r\n            templateScope.selectionManager = (currentScope && currentScope.selectionManager) ? currentScope.selectionManager : undefined;\r\n\r\n            // local injections\r\n            var base = {\r\n                $scope: templateScope,\r\n                widget: model,\r\n                config: model.config\r\n            };\r\n\r\n            // get resolve promises from content object\r\n            var resolvers = {};\r\n            resolvers.$tpl = widgetService.getTemplate(content);\r\n            if (content.resolve) {\r\n                angular.forEach(content.resolve, function (promise, key) {\r\n                    if (angular.isString(promise)) {\r\n                        resolvers[key] = $injector.get(promise);\r\n                    } else {\r\n                        resolvers[key] = $injector.invoke(promise, promise, base);\r\n                    }\r\n                });\r\n            }\r\n\r\n            // resolve all resolvers\r\n            $q.all(resolvers).then(function (locals) {\r\n                angular.extend(locals, base);\r\n\r\n                // pass resolve map to template scope as defined in resolveAs\r\n                if (content.resolveAs) {\r\n                    templateScope[content.resolveAs] = locals;\r\n                }\r\n\r\n                // compile & render template\r\n                var template = locals.$tpl;\r\n                $element.html(template);\r\n                if (content.controller) {\r\n                    var templateCtrl = $controller(content.controller, locals);\r\n                    if (content.controllerAs) {\r\n                        templateScope[content.controllerAs] = templateCtrl;\r\n                    }\r\n                    $element.children().data('$ngControllerController', templateCtrl);\r\n                }\r\n                $compile($element.contents())(templateScope);\r\n            }, function (reason) {\r\n                // handle promise rejection\r\n                var msg = 'ADF.ERROR.COULD_NOT_RESOLVE_ALL_PROMISSES';\r\n                $translate(msg, {\r\n                    reason: (reason ? \": \" + reason : reason)\r\n                }).then(function (translateMessage) {\r\n                    renderError($element, translateMessage);\r\n                });\r\n            });\r\n\r\n            // destroy old scope\r\n            if (currentScope) {\r\n                currentScope.$destroy();\r\n            }\r\n\r\n            return templateScope;\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            scope: {\r\n                model: '=',\r\n                content: '=',\r\n                extra: '='\r\n            },\r\n            link: function ($scope, $element) {\r\n                var currentScope = compileWidget($scope, $element, null);\r\n                var widgetConfigChangedEvt = $scope.$on('widgetConfigChanged', function () {\r\n                    currentScope = compileWidget($scope, $element, currentScope, true);\r\n                });\r\n\r\n                var widgetReloadEvt = $scope.$on('widgetReload', function () {\r\n                    currentScope = compileWidget($scope, $element, currentScope, false);\r\n                });\r\n\r\n                $scope.$on('destroy', function () {\r\n                    widgetConfigChangedEvt();\r\n                    widgetReloadEvt();\r\n                });\r\n            }\r\n        };\r\n    }]);\n\r\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n/**\r\n * The widget service provide helper functions to render widgets and their content.\r\n */\r\nangular.module('adf')\r\n  .factory('widgetService', [\"$http\", \"$q\", \"$sce\", \"$templateCache\", \"dashboard\", function($http, $q, $sce, $templateCache, dashboard) {\r\n    \r\n\r\n    function parseUrl(url) {\r\n      var parsedUrl = url;\r\n      if (url.indexOf('{widgetsPath}') >= 0) {\r\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\r\n                .replace('//', '/');\r\n        if (parsedUrl.indexOf('/') === 0) {\r\n          parsedUrl = parsedUrl.substring(1);\r\n        }\r\n      }\r\n      return parsedUrl;\r\n    }\r\n\r\n    var exposed = {};\r\n\r\n    exposed.getTemplate = function(widget){\r\n      var deferred = $q.defer();\r\n\r\n      if (widget.template) {\r\n        deferred.resolve(widget.template);\r\n      } else if (widget.templateUrl) {\r\n        // try to fetch template from cache\r\n        var tpl = $templateCache.get(widget.templateUrl);\r\n        if (tpl) {\r\n          deferred.resolve(tpl);\r\n        } else {\r\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\r\n          $http.get(url)\r\n               .success(function(response) {\r\n                 // put response to cache, with unmodified url as key\r\n                 $templateCache.put(widget.templateUrl, response);\r\n                 deferred.resolve(response);\r\n               })\r\n               .error(function() {\r\n                 deferred.reject('could not load template');\r\n               });\r\n        }\r\n      }\r\n\r\n      return deferred.promise;\r\n    };\r\n\r\n    return exposed;\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf')\r\n    .directive('adfWidget', [\"$injector\", \"$q\", \"$log\", \"$uibModal\", \"$rootScope\", \"$interval\", \"dashboard\", \"adfTemplatePath\", \"Filter\", function ($injector, $q, $log, $uibModal, $rootScope, $interval, dashboard, adfTemplatePath, Filter) {\r\n        function preLink($scope) {\r\n            var definition = $scope.definition;\r\n\r\n            if (definition) {\r\n                var w = dashboard.widgets[definition.type];\r\n                if (w) {\r\n                    // pass title\r\n                    if (!definition.title) {\r\n                        definition.title = w.title;\r\n                    }\r\n\r\n                    if (!definition.titleTemplateUrl) {\r\n                        definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\r\n                        if (w.titleTemplateUrl) {\r\n                            definition.titleTemplateUrl = w.titleTemplateUrl;\r\n                        }\r\n                    }\r\n\r\n                    if (!definition.editTemplateUrl) {\r\n                        definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\r\n                        if (w.editTemplateUrl) {\r\n                            definition.editTemplateUrl = w.editTemplateUrl;\r\n                        }\r\n                    }\r\n\r\n                    if (!definition.titleTemplateUrl) {\r\n                        definition.frameless = w.frameless;\r\n                    }\r\n\r\n                    if (!definition.styleClass) {\r\n                        definition.styleClass = w.styleClass;\r\n                    }\r\n\r\n                    // set id for sortable\r\n                    if (!definition.wid) {\r\n                        definition.wid = dashboard.id();\r\n                    }\r\n\r\n                    // pass copy of widget to scope\r\n                    $scope.widget = angular.copy(w);\r\n\r\n                    // create config object\r\n                    var config = definition.config;\r\n                    if (config) {\r\n                        if (angular.isString(config)) {\r\n                            config = angular.fromJson(config);\r\n                        }\r\n                    } else {\r\n                        config = {};\r\n                    }\r\n\r\n                    if (!config.reloadPeriod) {\r\n                        config.reloadPeriod = \"0\";\r\n                    }\r\n\r\n                    if (typeof $scope.widget.show_modal_footer === \"undefined\") {\r\n                        $scope.widget.show_modal_footer = true;\r\n                    }\r\n\r\n                    if (typeof $scope.widget.show_reload_config === \"undefined\") {\r\n                        $scope.widget.show_reload_config = true;\r\n                    }\r\n\r\n                    // pass config to scope\r\n                    $scope.config = config;\r\n\r\n                    // collapse exposed $scope.widgetState property\r\n                    if (!$scope.widgetState) {\r\n                        $scope.widgetState = {};\r\n                        $scope.widgetState.isCollapsed = (w.collapsed === true) ? w.collapsed : false;\r\n                    }\r\n\r\n                } else {\r\n                    $log.warn('could not find widget ' + definition.type);\r\n                }\r\n            } else {\r\n                $log.debug('definition not specified, widget was probably removed');\r\n            }\r\n        }\r\n\r\n        function postLink($scope, $element) {\r\n            var definition = $scope.definition;\r\n            if (!definition) {\r\n                $log.debug('widget not found');\r\n                return;\r\n            }\r\n            if (!$scope.config) {\r\n                $scope.config = {};\r\n            }\r\n\r\n            var config = $scope.config;\r\n\r\n            // bind close function\r\n            var deleteWidget = function () {\r\n                var column = $scope.col;\r\n                if (column) {\r\n                    var index = column.widgets.indexOf(definition);\r\n                    if (index >= 0) {\r\n                        column.widgets.splice(index, 1);\r\n                    }\r\n                }\r\n                $element.remove();\r\n                $rootScope.$broadcast('adfWidgetRemovedFromColumn');\r\n            };\r\n\r\n            $scope.remove = function () {\r\n                if ($scope.options.enableConfirmDelete) {\r\n                    var deleteScope = $scope.$new();\r\n\r\n                    var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\r\n                    if (definition.deleteTemplateUrl) {\r\n                        deleteTemplateUrl = definition.deleteTemplateUrl;\r\n                    }\r\n                    var opts = {\r\n                        scope: deleteScope,\r\n                        templateUrl: deleteTemplateUrl,\r\n                        backdrop: 'static'\r\n                    };\r\n                    var instance = $uibModal.open(opts);\r\n\r\n                    deleteScope.closeDialog = function () {\r\n                        instance.close();\r\n                        deleteScope.$destroy();\r\n                    };\r\n                    deleteScope.deleteDialog = function () {\r\n                        deleteWidget();\r\n                        deleteScope.closeDialog();\r\n                    };\r\n                } else {\r\n                    deleteWidget();\r\n                }\r\n            };\r\n\r\n\r\n            $scope.print = function () {\r\n                if (!$scope.editMode) {\r\n                    $scope.$broadcast('widgetPrint');\r\n                }\r\n            }\r\n\r\n            $scope.isExecuteOperationEnabled = function () {\r\n                // if ($scope.selectionManager.totalSelected() > 0)\r\n                //     return true;\r\n                if (config.entityKey)\r\n                    return true;\r\n                var filter = config.filter;\r\n                if (typeof filter === \"string\") {\r\n                    return filter.length > 0;\r\n                }\r\n                if (typeof filter === \"object\") {\r\n                    return filter.value.length > 2 && filter.oql;\r\n                }\r\n                return false;\r\n            }\r\n\r\n            $scope.executeOperation = function () {\r\n                if (!$scope.editMode) {\r\n                    // if ($scope.selectionManager.totalSelected() > 0) {\r\n                    //     var selectedItems = [];\r\n                    //     angular.forEach($scope.selectionManager.currentSelection, function(data, key) {\r\n                    //         selectedItems.push({ key: key, value: data });\r\n                    //     });\r\n                    //     $scope.$parent.$broadcast('widgetExecuteOperation', { 'selectedItems': selectedItems });\r\n                    // } else {\r\n                    $scope.$parent.$broadcast('widgetExecuteOperation');\r\n                    // }\r\n                }\r\n            };\r\n\r\n            // bind reload function\r\n            var stopReloadTimeout;\r\n\r\n            function _setReloadTimeout() {\r\n                if (config && config.reloadPeriod && config.reloadPeriod !== \"0\") {\r\n                    if (angular.isDefined(stopReloadTimeout)) {\r\n                        $interval.cancel(stopReloadTimeout)\r\n                        stopReloadTimeout = undefined;\r\n                    };\r\n                    stopReloadTimeout = $interval($scope.reload, (config.reloadPeriod * 1000));\r\n                }\r\n            }\r\n\r\n            $scope.reload = function (completeReload) {\r\n                if (completeReload) {\r\n                    $scope.$broadcast('widgetReload', completeReload);\r\n                } else {\r\n                    $scope.$broadcast('widgetReload');\r\n                }\r\n\r\n                _setReloadTimeout();\r\n            };\r\n\r\n            // verificacion de periodo de refresco\r\n            _setReloadTimeout();\r\n\r\n            $element.on('$destroy', function () {\r\n                $interval.cancel(stopReloadTimeout);\r\n            });\r\n\r\n            $scope.filter = {\r\n                value: \"\"\r\n            };\r\n            $scope.sort = {\r\n                value: \"\",\r\n                direction: \"\"\r\n            };\r\n\r\n            $scope.toggleAdvanced = 1;\r\n            var filter = config.filter;\r\n            if (typeof filter === \"object\" && filter.oql && filter.oql.length > 2) {\r\n                $scope.search = {\r\n                    oql: filter.oql,\r\n                    json: filter.value\r\n                };\r\n                $scope.toggleAdvanced = 0;\r\n            } else if (typeof filter === \"string\") {\r\n                $scope.search = {\r\n                    quick: filter\r\n                };\r\n                $scope.toggleAdvanced = 1;\r\n            } else if (typeof filter === \"object\" && filter.fields) {\r\n                $scope.search = {\r\n                    customFilter: filter.fields\r\n                };\r\n                $scope.search.fields = [];\r\n                angular.forEach(filter.fields, function (v, key) {\r\n                    $scope.search.fields.push(v.name);\r\n                });\r\n                $scope.toggleAdvanced = 2;\r\n            } else {\r\n                $scope.search = {\r\n                    quick: filter = \"\"\r\n                };\r\n            }\r\n\r\n            $scope.toggleFilter = function (advanced) {\r\n                $scope.toggleAdvanced = advanced;\r\n            };\r\n            $scope.filterAvailable = false;\r\n            $scope.showFilter = function () {\r\n                $scope.filterAvailable = $scope.filterAvailable === true ? false : true;\r\n            };\r\n\r\n            $scope.showFinalFilter = false;\r\n\r\n            $scope.launchSearching = function () {\r\n                var widget = {\r\n                    definition: definition,\r\n                    element: $element\r\n                };\r\n\r\n                $rootScope.$broadcast('adfLaunchSearchingFromWidget', widget, $scope.config.filter);\r\n                $scope.reload(true);\r\n            }\r\n            $scope.addCustomFilter = function (key) {\r\n                $scope.search.customFilter = $scope.search.customFilter ? $scope.search.customFilter : [];\r\n                $scope.search.customFilter.push({\r\n                    name: key,\r\n                    value: ''\r\n                });\r\n            }\r\n\r\n            $scope.launchCustomFilter = function () {\r\n                if ($scope.search.customFilter && $scope.search.customFilter.length > 0) {\r\n                    $scope.search.oql = $scope.search.json = '';\r\n\r\n                    $scope.config.filter = {\r\n                        value: {\r\n                            and: []\r\n                        },\r\n                        fields: $scope.search.customFilter\r\n                    }\r\n                    angular.forEach($scope.search.customFilter, function (v, key) {\r\n                        if (v.value) {\r\n                            var like = {};\r\n                            like[v.name] = v.value;\r\n                            $scope.config.filter.value.and.push({\r\n                                'like': like\r\n                            });\r\n                        }\r\n\r\n                    });\r\n                    $scope.config.filter.value = JSON.stringify($scope.config.filter.value);\r\n                }\r\n\r\n                $scope.launchSearching();\r\n            }\r\n\r\n\r\n\r\n            $scope.deleteFilter = function (value, model) {\r\n                angular.forEach($scope.search.customFilter, function (v, key) {\r\n                    if (v.name === value) {\r\n                        $scope.search.customFilter.splice(key, 1);\r\n                    }\r\n                });\r\n                if ($scope.search.customFilter.length === 0) {\r\n                    $scope.config.filter = {};\r\n                }\r\n            };\r\n\r\n\r\n            $scope.launchSearchingAdv = function () {\r\n                $scope.search.quick = '';\r\n                if ($scope.search.json === '' || $scope.search.json === '{}' || (!angular.isString($scope.search.json) && Object.keys($scope.search.json).length === 0)) {\r\n                    $scope.config.filter = {\r\n                        oql: '',\r\n                        value: ''\r\n                    };\r\n                } else {\r\n                    $scope.config.filter = {\r\n                        oql: $scope.search.oql,\r\n                        value: $scope.search.json\r\n                    };\r\n                }\r\n                $scope.launchSearching();\r\n\r\n            }\r\n\r\n            $scope.applyFilter = function (event) {\r\n                $scope.launchSearching();\r\n            }\r\n\r\n            $scope.launchSearchingQuick = function () {\r\n                $scope.search.oql = $scope.search.json = '';\r\n                $scope.config.filter = $scope.search.quick;\r\n                $scope.launchSearching();\r\n            }\r\n\r\n            var windowTimeChanged = $scope.$on('onWindowTimeChanged', function (event, timeObj) {\r\n                $scope.config.windowFilter = timeObj ? timeObj : (config.windowFilter ? {} : timeObj);\r\n                var widget = {\r\n                    definition: definition,\r\n                    element: $element\r\n                }\r\n                $rootScope.$broadcast('adfWindowTimeChangedFromWidget', widget, $scope.config.windowFilter);\r\n                $scope.reload();\r\n            });\r\n\r\n            $scope.enter = function (event) {\r\n                var keycode = (event.keyCode ? event.keyCode : event.which);\r\n                if (keycode === 13) {\r\n                    if ($scope.toggleAdvanced === 0)\r\n                        $scope.launchSearchingAdv();\r\n                    if ($scope.toggleAdvanced === 1)\r\n                        $scope.launchSearchingQuick();\r\n                    if ($scope.toggleAdvanced === 2)\r\n                        $scope.launchCustomFilter();\r\n\r\n                }\r\n                if (keycode === 19) {\r\n                    $scope.showFinalFilter = $scope.showFinalFilter === false ? true : false;\r\n                }\r\n            }\r\n\r\n\r\n            $scope.customSelectors = [];\r\n            $scope.getCustomSelectors = function () {\r\n                config.widgetSelectors().findFields(\"\").then(function (fields) {\r\n                    $scope.customSelectors = fields;\r\n                    $scope.$apply();\r\n                }).catch(function (err) {\r\n                    $log.error(err);\r\n                });\r\n\r\n            }\r\n\r\n            $scope.customFilter = [];\r\n            $scope.getcustomFilter = function () {\r\n                config.widgetSelectors().findFields(\"\").then(function (fields) {\r\n                    $scope.customFilter = fields;\r\n                    $scope.$apply();\r\n                }).catch(function (err) {\r\n                    $log.error(err);\r\n                });\r\n\r\n            }\r\n\r\n            $scope.ifCustomFilter = function () {\r\n                return $scope.customSelectors && config.sort && $scope.definition.type === 'FullDevicesList' && $scope.toggleAdvanced === 2;\r\n            }\r\n\r\n            $scope.showCustomFields = function () {\r\n                return $scope.definition.type === 'FullDevicesList' && $scope.toggleAdvanced === 2 && $scope.search.customFilter && $scope.filterAvailable && !$scope.editMode;\r\n            }\r\n\r\n            $scope.changeDirection = function () {\r\n                var direction = config.sort.direction;\r\n                if (direction === 'DESCENDING') {\r\n                    $scope.config.sort.direction = 'ASCENDING'\r\n                } else if (direction === 'ASCENDING') {\r\n                    $scope.config.sort.direction = 'DESCENDING'\r\n                }\r\n                $scope.reload();\r\n            }\r\n\r\n            $scope.debugQuery = function () {\r\n                Filter.parseQuery($scope.search.oql || '')\r\n                    .then(function (data) {\r\n                        //$scope.elementos = data;\r\n                        $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\r\n                        $scope.unknownWords = '';\r\n                        $scope.filter.error = null;\r\n                    })\r\n                    .catch(function (err) {\r\n                        $scope.filter.error = err;\r\n                        // Tratar el error\r\n                    });\r\n\r\n            }\r\n\r\n            $scope.autocomplete_options = function () {\r\n                var autocomplete_options = {\r\n                    suggest: Filter.suggest_field_delimited,\r\n                    customSelectors: config.widgetSelectors()\r\n                };\r\n\r\n                return autocomplete_options;\r\n\r\n            };\r\n\r\n            // Multiple selection\r\n            $scope.selectedItems = {};\r\n\r\n            // Gestor de seleccion\r\n            $scope.selectionManager = {\r\n                currentSelection: $scope.selectedItems,\r\n                isSelected: function (key, obj) {\r\n                    if ($scope.selectedItems[key] && !angular.isUndefined(obj)) {\r\n                        $scope.selectedItems[key].data = obj;\r\n                    }\r\n\r\n                    return $scope.selectedItems[key] ? true : false;\r\n                },\r\n                totalSelected: function () {\r\n                    return Object.keys($scope.selectedItems).length;\r\n                }\r\n            };\r\n\r\n            $scope.manageSelectedItems = function () {\r\n                var selectionScope = $scope.$new();\r\n\r\n                selectionScope.selectionConfig = config.selectionConfig;\r\n\r\n                selectionScope.selectedItems = [];\r\n                angular.forEach($scope.selectedItems, function (value, key) {\r\n                    selectionScope.selectedItems.push({\r\n                        key: key,\r\n                        value: value\r\n                    });\r\n                });\r\n\r\n                selectionScope.currentSelection = {\r\n                    selected: selectionScope.selectedItems\r\n                };\r\n\r\n                var manageItemsSelectedTemplate = adfTemplatePath + 'widget-selection.html';\r\n                var opts = {\r\n                    scope: selectionScope,\r\n                    templateUrl: manageItemsSelectedTemplate,\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    animation: true\r\n                };\r\n\r\n                var instance = $uibModal.open(opts);\r\n\r\n                selectionScope.restoreSelection = function () {\r\n                    selectionScope.currentSelection = {\r\n                        selected: selectionScope.selectedItems\r\n                    };\r\n                };\r\n\r\n                selectionScope.clearSelection = function () {\r\n                    selectionScope.currentSelection.selected = [];\r\n                };\r\n\r\n                // Cierra sy guarda los datos de nueva selección\r\n                selectionScope.applyFilter = function (type) {\r\n                    var customOql = selectionScope.selectionConfig.filterAction(selectionScope.currentSelection.selected, type);\r\n\r\n                    if (!angular.isUndefined(customOql) && customOql !== null) {\r\n                        $scope.toggleAdvanced = 0;\r\n                        Filter.parseQuery(customOql).then(function (data) {\r\n                            $scope.search.oql = customOql;\r\n                            $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\r\n                            $scope.unknownWords = '';\r\n                            $scope.filter.error = null;\r\n\r\n                            $scope.launchSearchingAdv();\r\n                        }).catch(function (err) {\r\n                            $scope.filter.error = err;\r\n                        });\r\n                    }\r\n                };\r\n\r\n                selectionScope.executeOperation = function (operationType) {\r\n                    if (!$scope.editMode) {\r\n                        $scope.$parent.$broadcast('widgetExecuteOperation', {\r\n                            'selectedItems': selectionScope.currentSelection.selected,\r\n                            'type': operationType\r\n                        });\r\n                    }\r\n                };\r\n\r\n                // Cierra sy guarda los datos de nueva selección\r\n                selectionScope.saveChangesDialog = function () {\r\n                    var finalSelection = {};\r\n                    angular.forEach(selectionScope.currentSelection.selected, function (data, idx) {\r\n                        finalSelection[data.key] = {\r\n                            data: data.value.data,\r\n                            visible: data.value.visible\r\n                        };\r\n                    });\r\n\r\n                    $scope.selectedItems = angular.copy(finalSelection);\r\n                    $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n\r\n                    $scope.selectionManager.lastItem = {};\r\n                    $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n\r\n                    instance.close();\r\n                    selectionScope.$destroy();\r\n                };\r\n\r\n                // Cierra sin realizar ninguna acción\r\n                selectionScope.closeDialog = function () {\r\n                    instance.close();\r\n                    selectionScope.$destroy();\r\n                };\r\n            };\r\n\r\n\r\n            // bind edit function\r\n            $scope.edit = function () {\r\n                var editScope = $scope.$new();\r\n                editScope.definition = angular.copy(definition);\r\n\r\n                var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\r\n                if (definition.editTemplateUrl) {\r\n                    adfEditTemplatePath = definition.editTemplateUrl;\r\n                }\r\n\r\n                var opts = {\r\n                    scope: editScope,\r\n                    templateUrl: adfEditTemplatePath,\r\n                    backdrop: 'static',\r\n                    size: 'lg'\r\n                };\r\n\r\n                var instance = $uibModal.open(opts);\r\n\r\n                editScope.closeDialog = function () {\r\n                    instance.close();\r\n                    editScope.$destroy();\r\n                };\r\n\r\n                // TODO create util method\r\n                function createApplyPromise(result) {\r\n                    var promise;\r\n                    if (typeof result === 'boolean') {\r\n                        var deferred = $q.defer();\r\n                        if (result) {\r\n                            deferred.resolve();\r\n                        } else {\r\n                            deferred.reject();\r\n                        }\r\n                        promise = deferred.promise;\r\n                    } else {\r\n                        promise = $q.when(result);\r\n                    }\r\n                    return promise;\r\n                }\r\n\r\n                editScope.saveDialog = function () {\r\n                    // clear validation error\r\n                    editScope.validationError = null;\r\n\r\n                    // build injection locals\r\n                    var widget = $scope.widget;\r\n\r\n                    // create a default apply method for widgets\r\n                    // without edit mode\r\n                    // see issue https://goo.gl/KHPQLZ\r\n                    var applyFn;\r\n                    if (widget.edit) {\r\n                        applyFn = widget.edit.apply;\r\n                    } else {\r\n                        applyFn = function () {\r\n                            return true;\r\n                        };\r\n                    }\r\n\r\n                    // injection locals\r\n                    var locals = {\r\n                        widget: widget,\r\n                        definition: editScope.definition,\r\n                        config: editScope.definition.config\r\n                    };\r\n\r\n                    // invoke apply function and apply if success\r\n                    var result = $injector.invoke(applyFn, applyFn, locals);\r\n                    createApplyPromise(result).then(function () {\r\n                        definition.title = editScope.definition.title;\r\n                        angular.extend(definition.config, editScope.definition.config);\r\n\r\n                        editScope.closeDialog();\r\n\r\n                        if (widget.edit && widget.edit.reload) {\r\n                            // reload content after edit dialog is closed\r\n                            $scope.$broadcast('widgetConfigChanged');\r\n                        }\r\n                    }, function (err) {\r\n                        if (err) {\r\n                            editScope.validationError = err;\r\n                        } else {\r\n                            editScope.validationError = 'VALIDATION_DURING_APPLY_FAILED';\r\n                        }\r\n                    });\r\n                };\r\n\r\n            };\r\n\r\n\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            templateUrl: dashboard.customWidgetTemplatePath ? dashboard.customWidgetTemplatePath : adfTemplatePath + 'widget.html',\r\n            scope: {\r\n                definition: '=',\r\n                col: '=column',\r\n                editMode: '=',\r\n                options: '=',\r\n                widgetState: '='\r\n            },\r\n            controller: [\"$scope\", function ($scope) {\r\n                var adfDashboardCollapseExpand = $scope.$on('adfDashboardCollapseExpand', function (event, args) {\r\n                    $scope.widgetState.isCollapsed = args.collapseExpandStatus;\r\n                });\r\n\r\n                var adfWidgetEnterEditMode = $scope.$on('adfWidgetEnterEditMode', function (event, widget) {\r\n                    if (dashboard.idEquals($scope.definition.wid, widget.wid)) {\r\n                        $scope.edit();\r\n                    }\r\n                });\r\n\r\n                var adfIsEditMode = $scope.$on('adfIsEditMode', function (event, widget) {\r\n                    $scope.editing = true;\r\n                });\r\n\r\n                var adfDashboardChanged = $scope.$on('adfDashboardChanged', function (event, widget) {\r\n                    $scope.editing = false;\r\n                });\r\n\r\n                var adfDashboardEditsCancelled = $scope.$on('adfDashboardEditsCancelled', function (event, widget) {\r\n                    $scope.editing = false;\r\n                });\r\n\r\n                $scope.widgetClasses = function (w, definition) {\r\n                    var classes = definition.styleClass || '';\r\n                    // w is undefined, if the type of the widget is unknown\r\n                    // see issue #216\r\n                    if (!w || !w.frameless || $scope.editMode) {\r\n                        classes += ' panel panel-default';\r\n                    }\r\n                    return classes;\r\n                };\r\n\r\n                $scope.openFullScreen = function () {\r\n                    var definition = $scope.definition;\r\n                    var fullScreenScope = $scope.$new();\r\n                    var opts = {\r\n                        scope: fullScreenScope,\r\n                        templateUrl: adfTemplatePath + 'widget-fullscreen.html',\r\n                        size: definition.modalSize || 'lg', // 'sm', 'lg'\r\n                        backdrop: 'static',\r\n                        windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\r\n                    };\r\n\r\n                    var instance = $uibModal.open(opts);\r\n                    fullScreenScope.closeDialog = function () {\r\n                        instance.close();\r\n                        fullScreenScope.$destroy();\r\n                    };\r\n                };\r\n\r\n                $scope.openFilter = function () {\r\n\r\n                }\r\n\r\n                $scope.openAboutScreen = function (size) {\r\n                    size = 'md';\r\n                    var modalInstance = $uibModal.open({\r\n                        animation: true,\r\n                        templateUrl: 'widgetAboutModal.html',\r\n                        controller: [\"$scope\", \"$uibModalInstance\", \"information\", function ($scope, $uibModalInstance, information) {\r\n                            $scope.about = {};\r\n                            $scope.about.info = information;\r\n                            $scope.ok = function () {\r\n                                $uibModalInstance.close();\r\n                            };\r\n                        }],\r\n                        'size': size,\r\n                        resolve: {\r\n                            information: function () {\r\n                                return $scope.config.about;\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    modalInstance.result.then(function (selectedItem) {\r\n                        $scope.selected = selectedItem;\r\n                    }, function () {\r\n                        $log.info('Modal dismissed at: ' + new Date());\r\n                    });\r\n                };\r\n\r\n                $scope.saveWidgetScreen = function (wId) {\r\n                    $scope.$emit('generateSnapshot', {\r\n                        'objectSelector': '.widget_' + wId,\r\n                        'fileName': 'capture_' + new Date().getTime()\r\n                    });\r\n                };\r\n\r\n                var onWindowTimeChanged = function (timeObj) {\r\n                    var filter = {\r\n                        and: []\r\n                    };\r\n                    if (timeObj && timeObj.from) {\r\n                        filter.and.push({\r\n                            gt: {\r\n                                operationDate: timeObj.from\r\n                            }\r\n                        });\r\n\r\n                        if (timeObj.to) {\r\n                            filter.and.push({\r\n                                lt: {\r\n                                    operationDate: timeObj.to\r\n                                }\r\n                            });\r\n                        }\r\n                    } else {\r\n                        filter = null;\r\n                    }\r\n                    return filter;\r\n                }\r\n\r\n                var createQuickFilter = function (fieldsQuickSearch, filter) {\r\n                    var _filter = {\r\n                        or: []\r\n                    };\r\n                    var criteria;\r\n                    fieldsQuickSearch.forEach(function (field) {\r\n                        criteria = {};\r\n                        criteria[field.operator] = {};\r\n                        criteria[field.operator][field.name] = $scope.config.filter;\r\n                        _filter.or.push(criteria);\r\n                    });\r\n                    return _filter;\r\n                }\r\n\r\n                $scope.downloadCsv = function () {\r\n                    var columns = $scope.config.columns;\r\n                    var scope_filter = $scope.config.filter;\r\n                    var extra_filter;\r\n                    var final_filter = {};\r\n                    var order = $scope.config.sort ? $scope.config.sort : undefined;\r\n                    if ($scope.config.windowFilter) {\r\n                        var window_filter = onWindowTimeChanged($scope.config.windowFilter);\r\n                        if (window_filter && window_filter.and) {\r\n                            extra_filter = {\r\n                                and: window_filter.and\r\n                            };\r\n                        }\r\n                    }\r\n                    var filter;\r\n                    if (scope_filter.value && scope_filter.value.length > 4) {\r\n                        filter = JSON.parse(scope_filter.value);\r\n                    } else if (typeof scope_filter === 'string' && scope_filter.trim() !== '') {\r\n                        filter = createQuickFilter($scope.config.fieldsQuickSearch, scope_filter);\r\n                    }\r\n                    if (extra_filter) {\r\n                        if (filter) {\r\n                            final_filter = {\r\n                                and: [extra_filter, filter]\r\n                            };\r\n                        } else {\r\n                            final_filter = extra_filter;\r\n                        }\r\n                    } else {\r\n                        final_filter = filter;\r\n                    }\r\n                    $scope.$broadcast('downloadCsv', {\r\n                        'columns': columns,\r\n                        'filter': final_filter,\r\n                        'order': order\r\n                    });\r\n                };\r\n\r\n                $scope.generateQR = function () {\r\n                    $scope.$broadcast('generateQR');\r\n                };\r\n\r\n                var addItemToSelection = $scope.$on('addItemToSelection', function (event, item) {\r\n                    if (!$scope.selectedItems[item.key]) {\r\n                        $scope.selectedItems[item.key] = {\r\n                            data: item.data,\r\n                            visible: item.visible\r\n                        };\r\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n                        item.isSelected = true;\r\n                        $scope.selectionManager.lastItem = item;\r\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n                    }\r\n\r\n                });\r\n\r\n                var removeItemFromSelection = $scope.$on('removeItemFromSelection', function (event, item) {\r\n                    if ($scope.selectedItems[item.key]) {\r\n                        delete $scope.selectedItems[item.key];\r\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n                        item.isSelected = false;\r\n                        $scope.selectionManager.lastItem = item;\r\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n                    }\r\n                });\r\n\r\n                $scope.$on('$destroy', function () {\r\n                    adfDashboardCollapseExpand();\r\n                    adfWidgetEnterEditMode();\r\n                    adfIsEditMode();\r\n                    adfDashboardChanged();\r\n                    adfDashboardEditsCancelled();\r\n                    addItemToSelection();\r\n                    removeItemFromSelection();\r\n                });\r\n            }],\r\n            compile: function () {\r\n\r\n                /**\r\n                 * use pre link, because link of widget-content\r\n                 * is executed before post link widget\r\n                 */\r\n                return {\r\n                    pre: preLink,\r\n                    post: postLink\r\n                };\r\n            }\r\n        };\r\n\r\n    }]);\nangular.module(\"adf\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"../src/templates/dashboard-column.html\",\"<div adf-id={{column.cid}} class=column ng-class=column.styleClass ng-model=column.widgets> <adf-widget ng-repeat=\\\"definition in column.widgets\\\" definition=definition column=column edit-mode=editMode options=options widget-state=widgetState>  </adf-widget></div> \");\n$templateCache.put(\"../src/templates/dashboard-edit.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h3 class=modal-title translate>ADF.DASHBOARD.TITLE.EDIT.DASHBOARD</h3> </div> <div class=modal-body> <form role=form name=form novalidate> <div class=\\\"form-group col-xs-12 col-md-6\\\"> <label for=dashboardTitle translate>ADF.COMMON.TITLE</label> <input type=text class=\\\"form-control text-primary\\\" id=dashboardTitle ng-model=copy.title required ng-init=\\\"copy.title=(copy.title | translate)\\\"> </div> <div class=\\\"form-group col-xs-12 col-md-6\\\"> <label for=dashboardDescription translate>ADF.DASHBOARD.LABEL.DESCRIPTION</label> <input type=text class=\\\"form-control text-primary\\\" id=dashboardDescription ng-init=\\\"copy.description=(copy.description | translate)\\\" ng-model=copy.description> </div> <div class=\\\"form-group col-xs-12 col-md-6\\\"> <label for=icon translate>ADF.DASHBOARD.LABEL.ICON</label> <ui-select tagging=tagTransform id=icon ng-model=copy.icon theme=bootstrap allow-clear=false required=true on-select=selectIcon($select.selected) title=\\\"{{\\'ADF.WIDGET.TITLE.CHOOSE_ICON\\' | translate}}\\\"> <ui-select-match placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.ICON\\' | translate}}\\\" allow-clear=false> <i class=\\\"fa {{$select.selected}} fa-2x\\\"></i> <span>{{$select.selected}}</span> </ui-select-match> <ui-select-choices class=oux-icon-selector repeat=\\\"iconTmp in availableIcons | filter: $select.search\\\"> <i class=\\\"fa fa-4x\\\" ng-class=iconTmp title={{iconTmp}}></i> <br> <span ng-bind-html=\\\"iconTmp| highlight: $select.search\\\"></span> </ui-select-choices> </ui-select> </div> <div class=\\\"form-group col-xs-12\\\"> <label translate>ADF.DASHBOARD.LABEL.EDIT_DASHBOARD_STRUCTURE_LABEL</label> <div class=row ng-init=\\\"splitted = split(structures, 3)\\\"> <div class=col-lg-4 ng-repeat=\\\"structureColumn in splitted\\\"> <div class=radio ng-repeat=\\\"(key, structure) in structureColumn\\\"> <div class=row> <div class=col-sm-2> <label> <input type=radio value={{key}} ng-model=model.structure ng-change=\\\"changeStructure(key, structure)\\\"> </label> </div> <div class=col-sm-9 ng-click=\\\"changeStructure(key, structure)\\\"> <adf-structure-preview name=key structure=structure selected=\\\"model.structure == key\\\"> </adf-structure-preview> </div> </div> </div> </div> </div> </div> </form> </div> <div class=modal-footer> <div class=col-xs-12> <button type=submit class=\\\"btn btn-primary\\\" ng-click=closeDialog() ng-disabled=form.$invalid translate>ADF.COMMON.CLOSE</button> </div> </div> \");\n$templateCache.put(\"../src/templates/dashboard-row.html\",\"<div ng-class=row.styleClass ng-style=row.style class=ogux-row>  </div>\");\n$templateCache.put(\"../src/templates/dashboard-title.html\",\"<div class=row style=padding:0px;> <div class=col-xs-12 ng-class=\\\"hideButtons?\\'col-md-12\\':\\'col-md-5\\'\\\"> <span ng-if=model.icon id=idDashboardIcon class=\\\"fa fa-2x\\\" ng-class=model.icon></span> <span id=idDashboardTitle class=\\\"fa-2x text-primary\\\">{{model.title | translate}}</span> <span ng-if=model.description id=idDashboardDescription>{{model.description | translate}}</span> </div> <div class=\\\"col-xs-12 col-md-7 text-right\\\" ng-if=!hideButtons> <a href ng-if=editMode title=\\\"{{ \\'ADF.DASHBOARD.TITLE.ADD\\' | translate }}\\\" ng-click=addWidgetDialog() class=\\\"btn btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-plus\\\" aria-hidden=true></i> {{\\'ADF.DASHBOARD.TITLE.ADD\\' | translate}} </a> <a href ng-if=editMode title=\\\"{{ \\'ADF.DASHBOARD.TITLE.CONFIGURATION\\' | translate }}\\\" ng-click=editDashboardDialog() class=\\\"btn btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-cog\\\"></i> {{\\'ADF.DASHBOARD.TITLE.CONFIGURATION\\' | translate}} </a> <a href ng-if=editMode title=\\\"{{ \\'ADF.DASHBOARD.TITLE.UNDO\\' | translate }}\\\" ng-click=cancelEditMode() class=\\\"btn btn-warning btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-close\\\"></i> {{\\'ADF.DASHBOARD.TITLE.UNDO\\' | translate}} </a> <a href ng-if=\\\"options.editable && !editMode && !model.temporal\\\" title=\\\"{{\\'ADF.DASHBOARD.TITLE.EDIT.MODE\\' | translate }}\\\" ng-click=toggleEditMode() class=\\\"btn btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-pencil-square-o\\\"></i> {{\\'ADF.DASHBOARD.TITLE.EDIT.MODE\\' | translate}} </a> <a href ng-if=\\\"options.editable && editMode\\\" title=\\\"{{\\'ADF.DASHBOARD.TITLE.SAVE\\' | translate)}}\\\" ng-click=toggleEditMode() class=\\\"btn btn-success btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-save\\\"></i> {{\\'ADF.DASHBOARD.TITLE.SAVE\\' | translate}} </a> </div> </div> \");\n$templateCache.put(\"../src/templates/dashboard.html\",\"<div class=dashboard-container> <div ng-include src=model.titleTemplateUrl></div> <div class=dashboard x-ng-class=\\\"{\\'edit\\' : editMode}\\\" style=\\\"padding: 0px;margin: 0px;\\\"> <adf-dashboard-row row=row adf-model=model options=options ng-repeat=\\\"row in model.rows\\\" edit-mode=editMode continuous-edit-mode=continuousEditMode> </adf-dashboard-row></div> </div>\");\n$templateCache.put(\"../src/templates/structure-preview.html\",\"<div class=structure-preview ng-class=\\\"{selected: selected}\\\"> <h4>{{name}}</h4> <adf-dashboard-row ng-repeat=\\\"row in preview.rows\\\" row=row> </adf-dashboard-row></div> \");\n$templateCache.put(\"../src/templates/widget-add.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title translate>ADF.WIDGET.TITLE.ADD_HEADER</h4> </div> <div class=modal-body>  <div ng-if=createCategories> <uib-accordion ng-init=\\\"categorized = createCategories(widgets)\\\"> <div uib-accordion-group heading=\\\"{{category.name | translate}}\\\" ng-repeat=\\\"category in categorized | adfOrderByObjectKey: \\'name\\'\\\"> <dl class=dl-horizontal> <dt ng-repeat-start=\\\"widget in category.widgets | adfOrderByObjectKey: \\'key\\'\\\"> <a href ng-click=addWidget(widget.key) ng-class={{widget.key}}> {{widget.title | translate}} </a> </dt> <dd ng-repeat-end ng-if=widget.description> {{widget.description | translate}} </dd> </dl> </div> </uib-accordion> </div>  <div ng-if=!createCategories> <div class=row> <div class=\\\"col-md-4 col-xs-12\\\"> <select ng-model=widgetFilter.categoryTags name=widgetsCategoryFilter class=form-control> <option value translate>ADF.WIDGET.LABEL.ALL_WIDGETS</option> <option ng-repeat=\\\"category in availableCategories | orderBy\\\" value={{category}}>{{ category | translate }}</option> </select> </div> <div class=\\\"col-md-4 col-xs-12\\\" ng-init=\\\"widgetSorting = \\'priority\\'\\\"> <select ng-model=widgetSorting name=widgetsSorting class=form-control> <option value=priority selected translate=ADF.WIDGET.TITLE.SORTED_BY translate-values=\\\"{ item : (\\'ADF.WIDGET.LABEL.PRIORITY\\' | translate) }\\\"></option> <option value=name selected translate=ADF.WIDGET.TITLE.SORTED_BY translate-values=\\\"{ item : (\\'ADF.WIDGET.LABEL.NAME\\' | translate) }\\\"></option> <option value=category translate=ADF.WIDGET.TITLE.SORTED_BY translate-values=\\\"{ item : (\\'ADF.WIDGET.LABEL.CATEGORY\\' | translate) }\\\"></option> <option value=description translate=ADF.WIDGET.TITLE.SORTED_BY translate-values=\\\"{ item : (\\'ADF.WIDGET.LABEL.DESCRIPTION\\' | translate) }\\\"></option> </select> </div> <div class=\\\"col-md-4 col-xs-12\\\" ng-init=\\\"widgetSortingDirection = \\'\\'\\\"> <select ng-model=widgetSortingDirection name=widgetSortingDirection class=form-control> <option value selected translate>BUTTON.TITLE.ASCENDING</option> <option value=1 translate>BUTTON.TITLE.DESCENDING</option> </select> </div> </div>  <div ng-repeat=\\\"widget in widgets | adfOrderByObjectKey: \\'key\\' | filter:widgetFilter:strict | orderBy:widgetSorting:widgetSortingDirection track by $index\\\" ng-class=\\\"{ \\'widgetPanelBig\\' : $index ===0 , \\'widgetPanelNormal\\' : $index > 0 }\\\"> <div class=\\\"pointer widgetInfoParent {{widget.key}}\\\" ng-click=addWidget(widget.key) title=\\\"{{widget.description | translate}}\\\"> <div class=\\\"widgetInfoImage panel\\\"> <img ng-if=widget.images ng-init=\\\"widget._currImg = widget.images[0]\\\" src=\\\"{{ widget._currImg }}\\\" ng-click=changeThumbnail(widget);$event.stopPropagation(); title=\\\"Click to change (if available)\\\"> <i ng-if=!widget.images class=\\\"widgetInfoIcon fa\\\" ng-class=\\\"widget.icon ? widget.icon: \\'fa-plus-circle\\'\\\" ng-style=\\\"widget.color?{\\'color\\':widget.color}:\\'\\'\\\" aria-hidden=true></i> </div> <div class=widgetInfoContainer id=widgetKey_{{widget.key}} ng-class=\\\"{ \\'bg-primary\\' : $index ===0 , \\'bg-info\\' : $index > 0 }\\\"> <i ng-if=\\\"widget.images && widget.icon\\\" class=\\\"widgetInfoTitle fa\\\" ng-class=widget.icon ng-style=\\\"widget.color?{\\'color\\':widget.color}:\\'\\'\\\" aria-hidden=true></i><br> <span class=widgetInfoTitle>{{widget.title | translate | humanize}}</span><br> <span>({{widget.category | translate}})</span> <span class=widgetInfoDescription>{{widget.description | translate}}</span> </div> </div> </div> </div> </div> <div class=modal-footer style=clear:both;> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() translate>ADF.COMMON.CLOSE</button> </div> \");\n$templateCache.put(\"../src/templates/widget-delete.html\",\"<div class=modal-header> <h4 class=modal-title> <span translate>ADF.COMMON.DELETE</span> {{widget.title | translate}}</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=widgetTitle translate>ADF.WIDGET.LABEL.DELETE_CONFIRM_MESSAGE</label> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() translate>ADF.COMMON.CLOSE</button> <button type=button class=\\\"btn btn-primary\\\" ng-click=deleteDialog() translate>ADF.COMMON.DELETE</button> </div> \");\n$templateCache.put(\"../src/templates/widget-edit.html\",\"<form name=widgetEditForm novalidate role=form ng-submit=saveDialog()> <div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h3 class=modal-title>{{widget.title | translate}}</h3> </div> <div class=modal-body> <div class=row> <div class=col-xs-12> <div class=\\\"alert alert-danger\\\" role=alert ng-show=validationError> <strong translate>ADF.ERROR.APPLY_ERROR</strong> {{validationError | translate}} </div> </div> </div> <div class=row ng-if=widget.show_reload_config> <div class=\\\"col-xs-12 col-md-6\\\"> <div class=form-group> <label for=widgetTitle translate>ADF.COMMON.TITLE</label> <input type=text class=\\\"form-control text-primary\\\" id=widgetTitle ng-init=\\\"definition.title=(definition.title | translate)\\\" ng-model=definition.title placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.TITLE\\' | translate}}\\\"> </div> </div> <div class=\\\"col-xs-12 col-md-6\\\"> <div class=form-group> <label for=widgetReloadPeriod translate>ADF.WIDGET.TOOLTIP.REFRESH</label> <select class=form-control id=widgetReloadPeriod aria-label=\\\"ngSelected demo\\\" ng-model=definition.config.reloadPeriod required> <option ng-selected=selected value=0 translate>ADF.WIDGET.OPTIONS.MANUAL</option> <option value=20 translate>ADF.WIDGET.OPTIONS.20_SECONDS</option> <option value=40 translate>ADF.WIDGET.OPTIONS.40_SECONDS</option> <option value=60 translate>ADF.WIDGET.OPTIONS.EVERY_MINUTE</option> </select> </div> </div> </div> <div class=row ng-if=!widget.show_reload_config> <div class=\\\"col-xs-12 col-md-12\\\"> <div class=form-group> <label for=widgetTitle translate>ADF.COMMON.TITLE</label> <input type=text class=\\\"form-control text-primary\\\" id=widgetTitle ng-init=\\\"definition.title=(definition.title | translate)\\\" ng-model=definition.title placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.TITLE\\' | translate}}\\\"> </div> </div> </div> <div ng-if=widget.edit class=row> <div class=col-xs-12> <adf-widget-content model=definition content=widget.edit> </adf-widget-content></div> </div> <div class=row> <div class=col-xs-12> <div class=form-group> <label for=widgetAbout translate>ADF.COMMON.ABOUT</label> <textarea class=\\\"form-control text-primary\\\" id=widgetAbout ng-model=definition.config.about placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.ENTER.DESCRIPTION\\'|translate}}\\\"></textarea> </div> </div> </div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() translate>ADF.WIDGET.BUTTON.CANCEL</button> <button type=submit class=\\\"btn btn-primary\\\" ng-disabled=widgetEditForm.$invalid value=\\\"{{\\'ADF.WIDGET.BUTTON.APPLY\\' | translate }}\\\" translate>ADF.WIDGET.BUTTON.APPLY</button> </div> </form> \");\n$templateCache.put(\"../src/templates/widget-fullscreen.html\",\"<div class=modal-header> <div class=\\\"pull-right widget-icons\\\"> <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.REFRESH\\' |translate }}\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a> <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.CLOSE\\' |translate }}\\\" ng-click=closeDialog()> <i class=\\\"glyphicon glyphicon-remove\\\"></i> </a> <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.INSERT\\' |translate }}\\\" ng-if=persistDashboard ng-click=persistDashboard()> <i class=\\\"glyphicon glyphicon-save\\\"></i> </a> </div> <h4 class=modal-title translate>&nbsp;{{ definition.title | translate}}</h4> </div> <div class=\\\"modal-body widget\\\" style=overflow:hidden;> <adf-widget-content model=definition content=widget> </adf-widget-content></div> <div class=modal-footer ng-if=widget.show_modal_footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() translate>ADF.COMMON.CLOSE</button> </div> \");\n$templateCache.put(\"../src/templates/widget-selection.html\",\"<style>\\r\\n    .selected-entities-control .ui-select-container>div:first-child {\\r\\n        max-height: 300px;\\r\\n        overflow-y: scroll;\\r\\n        overflow-x: hidden;\\r\\n    }\\r\\n\\r\\n</style> <form name=widgetSelectionForm novalidate role=form ng-submit=saveChangesDialog()> <div class=modal-header> <div class=\\\"col-xs-12 col-md-12\\\"> <h3 class=\\\"modal-title text-left\\\"> <i class=\\\"fa fa-check-square-o\\\" aria-hidden=true></i> {{\\'ADF.WIDGET.TITLE.SELECTED_ITEMS\\' | translate}}</h3> </div> </div> <div class=modal-body> <div class=col-xs-12> <div class=\\\"form-group selected-entities-control\\\"> <label for=currentSelection translate>ADF.WIDGET.LABEL.CURRENT_SELECTION</label> <ui-select multiple tagging ng-model=currentSelection.selected theme=bootstrap sortable=false title=\\\"{{\\'ADF.WIDGET.TITLE.SELECTED_ITEMS\\' | translate}}\\\"> <ui-select-match placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.NO_SELECTED\\' | translate}}\\\"> <div class=text-left style=\\\"margin-right: 15px;font-size: 0.9em;max-width:350px;\\\" ng-if=$item.value.visible> <span style=\\\"white-space: initial;word-break: break-word;\\\" ng-repeat=\\\"(k,v) in $item.value.visible track by $index\\\" ng-if=\\\"v !== undefined\\\"> <strong>{{k | translate}}:</strong> {{v}} <br> </span> </div> <div class=text-left style=\\\"margin-right: 15px;font-size: 0.9em;max-width:350px;\\\" ng-if=!$item.value.visible> <span style=\\\"white-space: initial;word-break: break-word;\\\">{{$item.key}}</span> </div> </ui-select-match> <ui-select-choices repeat=\\\"itemSel in currentSelection.selected | filter:$select.search\\\"> {{itemSel.key}} </ui-select-choices> </ui-select> </div> </div> <div class=\\\"col-xs-12 text-left\\\"> <button type=button class=\\\"btn btn-success btn-sm\\\" ng-click=restoreSelection() ng-disabled=\\\"currentSelection.selected.length === selectedItemsLength\\\" translate>ADF.WIDGET.BUTTON.RESTORE</button> <button type=button class=\\\"btn btn-danger btn-sm\\\" ng-click=clearSelection() ng-disabled=\\\"currentSelection.selected.length < 1\\\" translate>ADF.WIDGET.BUTTON.CLEAR</button> </div> </div> <div class=modal-footer> <div class=\\\"col-xs-12 col-md-2 text-left\\\"> <div uib-dropdown ng-if=\\\"selectionConfig && selectionConfig.filterTypes && currentSelection.selected.length > 0\\\"> <button id=applyFilterBy type=button class=\\\"btn btn-primary\\\" uib-dropdown-toggle> <i class=\\\"glyphicon glyphicon-filter pointer\\\"></i> {{\\'ADF.WIDGET.BUTTON.FILTER_BY\\' | translate}} <span class=caret></span> </button> <ul class=dropdown-menu uib-dropdown-menu role=menu aria-labelledby=applyFilterBy> <li role=menuitem ng-repeat=\\\"filterType in selectionConfig.filterTypes\\\"> <a href ng-click=applyFilter(filterType) title=\\\"{{\\'ADF.WIDGET.BUTTON.SELECTED\\' | translate:{filterType: filterType} }}\\\">{{\\'ADF.WIDGET.BUTTON.SELECTED\\' | translate:{filterType: filterType} }}</a> </li> </ul> </div> </div> <div class=\\\"col-xs-12 col-md-3 text-left\\\"> <div uib-dropdown ng-if=\\\"selectionConfig && selectionConfig.operationTypes && currentSelection.selected.length > 0\\\"> <button id=executeOperation type=button class=\\\"btn btn-primary\\\" uib-dropdown-toggle> <i class=\\\"glyphicon glyphicon-flash pointer\\\"></i> {{\\'ADF.WIDGET.BUTTON.EXECUTE_OPERATION\\' | translate}} <span class=caret></span> </button> <ul class=dropdown-menu uib-dropdown-menu role=menu aria-labelledby=executeOperation> <li role=menuitem ng-repeat=\\\"operationType in selectionConfig.operationTypes\\\"> <a href ng-click=executeOperation(operationType) title={{operationType|translate}}>{{operationType|translate}}</a> </li> </ul> </div> </div> <div class=\\\"col-xs-12 col-md-7 text-right\\\"> <button type=submit class=\\\"btn btn-primary\\\" ng-disabled=\\\"currentSelection.selected.length === selectedItemsLength\\\" translate value=\\\"{{\\'ADF.WIDGET.BUTTON.APPLY\\' | translate }}\\\">ADF.WIDGET.BUTTON.APPLY</button> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() translate>ADF.COMMON.CLOSE</button> </div> </div> </form> \");\n$templateCache.put(\"../src/templates/widget-title.html\",\"<div class=panel-title style=margin:0px;> <span class=pull-left>  <a href ng-if=\\\"selectedItemsLength > 0\\\" title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.SELECTION\\' | translate }}\\\" ng-click=manageSelectedItems() style=float:left;> <i class=\\\"glyphicon glyphicon-check\\\"></i> <small class=ogux-budget>{{ selectedItemsLength }}</small> </a> <h4 ng-if=\\\"!widget.frameless && definition.title\\\" style=\\\"margin:0px 0px 0px 2px;float:left;\\\" translate>{{definition.title | translate}}</h4> </span> <div class=pull-right> <span ng-if=config.about> <a href uib-popover=\\\"{{ config.about }}\\\" popover-trigger=\\\"\\'mouseenter\\'\\\" popover-placement=top ng-click=openAboutScreen()> <i class=\\\"glyphicon glyphicon-info-sign\\\"></i> </a> <script type=text/ng-template id=widgetAboutModal.html> <div class=\\\"modal-header\\\"> <h4 class=\\\"modal-title\\\" translate>ADF.COMMON.ABOUT</h4> </div> <div class=\\\"modal-body\\\">{{ about.info }}</div> <div class=\\\"modal-footer\\\"> <button class=\\\"btn btn-primary\\\" type=\\\"button\\\" ng-click=\\\"ok()\\\" translate>ADF.WIDGET.BUTTON.OK</button> </div> </script> </span> <a ng-if=\\\"!editMode && widget.print\\\" href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.PRINT\\' | translate }}\\\" ng-click=print()> <i class=\\\"glyphicon glyphicon-print\\\"></i> </a> <span ng-if=\\\"!editMode && config.widgetOnToggleView && config.widgetViews\\\" uib-popover=\\\"Change view\\\" popover-trigger=\\\"\\'mouseenter\\'\\\" popover-placement=top uib-dropdown> <a href id=toggle_{{definition.wid}} uib-dropdown-toggle> <i class=\\\"glyphicon glyphicon-eye-close\\\"></i> </a> <ul class=dropdown-menu uib-dropdown-menu aria-labelledby=\\\"{{\\'ADF.WIDGET.LABEL.CHANGE_VIEW\\' | translate}}\\\"> <li ng-repeat=\\\"choice in config.widgetViews\\\"> <a ng-click=config.widgetOnToggleView(choice.value)>{{choice.name | translate}}</a> </li> </ul> </span> <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.REFRESH\\' | translate }}\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.OPERATION\\' | translate }}\\\" ng-if=\\\"widget.executeOperation && !editMode && isExecuteOperationEnabled()\\\" ng-click=executeOperation()> <i class=\\\"glyphicon glyphicon-flash\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.FILTER\\' | translate }}\\\" ng-if=\\\"config.widgetSelectors && !editMode\\\" ng-click=showFilter()> <i class=\\\"glyphicon glyphicon-filter\\\" ng-class=\\\"{\\'active\\': search.json || search.quick ||search.customFilter}\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.SORT\\' | translate }}\\\" ng-if=\\\"config.sort && !editMode\\\" ng-click=showFilter()> <i class=\\\"glyphicon glyphicon-sort\\\" ng-class=\\\"{\\'active\\': (config.sort.value && config.sort.value !== \\'\\')}\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.PICTURE\\' | translate}}\\\" ng-if=\\\"!editMode && !widgetState.isCollapsed\\\" ng-click=saveWidgetScreen(definition.wid)> <i class=\\\"glyphicon glyphicon-picture\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.QR\\' | translate }}\\\" ng-if=\\\"!editMode && widget.qr\\\" ng-click=generateQR()> <i class=\\\"fa fa-qrcode\\\" style=\\\"font-size: 1.1em;\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.CSV\\' | translate }}\\\" ng-if=\\\"!editMode && widget.csv\\\" ng-click=downloadCsv()> <i class=\\\"glyphicon glyphicon-file\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.MOVE\\' | translate }}\\\" class=adf-move ng-if=editMode> <i class=\\\"glyphicon glyphicon-move\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.COLLAPSE\\' | translate }}\\\" ng-show=\\\"options.collapsible && !widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-minus\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.EXPAND\\' | translate }}\\\" ng-show=\\\"options.collapsible && widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-plus\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.EDIT\\' | translate }}\\\" ng-click=edit() ng-if=editMode> <i class=\\\"glyphicon glyphicon-cog\\\"></i> </a> <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.FULLSCREEN\\' | translate }}\\\" ng-click=openFullScreen() ng-show=options.maximizable> <i class=\\\"glyphicon glyphicon-fullscreen\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.REMOVE\\' | translate}}\\\" ng-click=remove() ng-if=editMode> <i class=\\\"glyphicon glyphicon-trash\\\"></i> </a> </div> </div> \");\n$templateCache.put(\"../src/templates/widget.html\",\"<div adf-id={{definition.wid}} adf-widget-type={{definition.type}} ng-class=\\\"widgetClasses(widget, definition)\\\" class=\\\"widget widget_{{definition.wid}}\\\"> <a name={{definition.wid}} id={{definition.wid}}></a> <div class=\\\"panel-heading clearfix bg-primary\\\" ng-if=\\\"!widget.frameless || editMode\\\"> <div ng-include src=definition.titleTemplateUrl></div> </div> <div ng-if=\\\"!widgetState.isCollapsed && config.widgetSelectors && !editMode && filterAvailable\\\" class=\\\"row form-group\\\" style=\\\"margin-top: 5px !important;\\\"> <div ng-if=\\\"toggleAdvanced === 0\\\" class=\\\"col-xs-12 col-md-8\\\"> <div class=filter mass-autocomplete> <input class=form-control style=padding-right:15px; name=filterValue ng-keypress=enter($event) ng-model=search.oql placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.ENTER.FILTER.ADVANCED\\' | translate }}\\\" mass-autocomplete-item=autocomplete_options() ng-change=debugQuery()> <label ng-click=launchSearchingAdv() style=\\\"position: absolute;font-size: 1.5em;cursor:pointer;right: 15px;\\\" class=\\\"glyphicon glyphicon-search\\\"></label> </div> <div ng-if=\\\"!editMode && filter.error\\\" class=col-xs-12> <alert type=danger class=\\\"text-center text-danger\\\"> <span>{{filter.error}}</span> </alert> </div> <div ng-if=\\\"showFinalFilter && search.json\\\" class=col-xs-12> <pre>{{ search.json }}</pre> </div> </div> <div ng-if=ifCustomFilter() class=\\\"col-xs-12 col-md-8\\\"> <div class=\\\"filter form-group\\\"> <a href class=text-danger ng-click=\\\"options.customFilter.open = !options.customFilter.open\\\"> <i class=glyphicon ng-class=\\\"{\\'glyphicon-chevron-up\\': options.customFilter.open, \\'glyphicon-chevron-down\\': !options.customFilter.open}\\\"></i> {{\\'ADF.WIDGET.TITLE.PICK_FILTER_FIELDS\\' | translate}} </a> <label ng-click=launchCustomFilter() style=\\\"position: absolute;font-size: 1.5em;cursor:pointer;right: 15px;\\\" class=\\\"glyphicon glyphicon-search\\\"></label> <div class=row ng-if=options.customFilter.open> <ui-select multiple=true ng-model=search.fields theme=bootstrap title=\\\"{{\\'ADF.WIDGET.TITLE.CHOOSE_FILTER\\' | translate }}\\\" on-select=addCustomFilter($item) on-remove=deleteFilter($item) ng-click=getcustomFilter()> <ui-select-match placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.PICK_FILTER_FIELDS\\' | translate }}\\\" allow-clear=true> {{$item}} </ui-select-match> <ui-select-choices repeat=\\\"selector in (customFilter | filter: $select.search) track by $index\\\"> <small ng-bind-html=\\\"selector | highlight: $select.search\\\"></small> </ui-select-choices> </ui-select> </div> </div> </div> <div ng-if=\\\"toggleAdvanced === 1\\\" class=\\\"col-xs-12 col-md-8\\\"> <div class=filter> <input class=form-control style=padding-right:15px; name=filterValue ng-keypress=enter($event) ng-model=search.quick placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.ENTER.FILTER.BASIC\\' | translate}}\\\"> <label ng-click=launchSearchingQuick() style=\\\"position: absolute;font-size: 1.5em;cursor:pointer;right: 15px;\\\" class=\\\"glyphicon glyphicon-search\\\"></label> </div> </div> <div class=\\\"col-xs-12 col-md-4\\\" uib-dropdown> <button class=\\\"btn btn-sm\\\" uib-dropdown-toggle title=\\\"{{\\'ADF.WIDGET.TITLE.TOGGLE_AVANCED_BASIC_FILTER\\' | translate }}\\\"> <i class=\\\"advanced-filter glyphicon\\\" ng-class=\\\"{\\'glyphicon-font\\' : toggleAdvanced === 0, \\'glyphicon-bold\\' : toggleAdvanced ===1 , \\'glyphicon-filter\\' : toggleAdvanced === 2, }\\\"></i> <span class=caret></span> </button> <ul class=\\\"dropdown-menu panel\\\" style=\\\"border: 1px groove;\\\" uib-dropdown-menu aria-labelledby=simple-dropdown> <li ng-click=toggleFilter(0)> <a href> <i class=\\\"advanced-filter glyphicon glyphicon-font txt-primary\\\"></i> {{\\'ADF.WIDGET.TITLE.FILTER.ADVANCED\\' | translate}}</a> </li> <li ng-click=toggleFilter(1)> <a href> <i class=\\\"basic-filter glyphicon glyphicon-bold txt-primary\\\"></i> {{\\'ADF.WIDGET.TITLE.FILTER.BASIC\\' | translate}}</a> </li> <li ng-if=\\\"definition.type === \\'FullDevicesList\\'\\\" ng-click=toggleFilter(2)> <a href> <i class=\\\"custom-filter glyphicon glyphicon-filter txt-primary\\\"></i> {{\\'ADF.WIDGET.TITLE.FILTER.CUSTOM\\' | translate}}</a> </li> </ul> </div> </div> <div ng-if=\\\"customSelectors && config.sort && filterAvailable && toggleAdvanced != 2\\\" class=\\\"row form-group\\\" style=\\\"margin-top: 5px !important;\\\"> <div class=\\\"sort col-xs-12 col-md-8\\\"> <ui-select ng-model=config.sort.value theme=bootstrap title=\\\"{{\\'ADF.WIDGET.TITLE.CHOOSE_ORDER\\' | translate}}\\\" allow-clear=true append-to-body=true ng-change=launchSearching() ng-click=getCustomSelectors()> <ui-select-match placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.SHORTED_BY\\' | translate}}\\\" allow-clear=true>{{ \\'ADF.WIDGET.TITLE.SORTED_BY\\' | translate:{item: $select.selected} }}</ui-select-match> <ui-select-choices repeat=\\\"selector in customSelectors | filter: $select.search track by $index\\\"> <small> <span ng-bind-html=\\\"selector | highlight: $select.search\\\"></span> </small> </ui-select-choices> </ui-select> </div> <div class=\\\"sortDirection col-xs-4 col-md-4\\\"> <button class=\\\"btn btn-sm pointer\\\" ng-click=changeDirection() ng-disabled=\\\"config.sort.value === \\'\\'\\\" title=\\\"{{\\'TOGGLE_SORTING_DIRECTION\\' | translate}}\\\"> <i class=glyphicon style=font-size:1.3em; ng-class=\\\"config.sort.direction===\\'ASCENDING\\' ? \\'glyphicon-sort-by-attributes\\': \\'glyphicon-sort-by-attributes-alt\\'\\\"></i> </button> </div> </div> <div ng-if=showCustomFields() class=\\\"col-xs-12 col-md-12\\\"> <div class=\\\"col-xs-12 col-md-4\\\" ng-repeat=\\\"model in search.customFilter\\\"> <label>{{model.name | translate}}</label> <input class=form-control id={{model.name}} name={{model.name}} type=text ng-model=search.customFilter[$index].value ng-keypress=enter($event)> </div> </div> <div ng-class=\\\"{ \\'panel-body\\':!widget.frameless || editMode}\\\" uib-collapse=widgetState.isCollapsed style=overflow:hidden;> <adf-widget-content model=definition content=widget extra=options.extraData> </adf-widget-content></div> </div> \");}]);\n})(window);","/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardRow', function ($compile, adfTemplatePath, columnTemplate) {\r\n    'use strict';\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        row: '=',\r\n        adfModel: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\r\n      link: function($scope, $element) {\r\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\r\n          $compile(columnTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        }\r\n      }\r\n    };\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfStructurePreview', function(adfTemplatePath) {\r\n\r\n    function adjustRowHeight(container){\r\n      if (container.rows && container.rows.length > 0){\r\n        var height = 100 / container.rows.length;\r\n        angular.forEach(container.rows, function(row){\r\n          row.style = {\r\n            height: height + '%'\r\n          }\r\n\r\n          if (row.columns){\r\n            angular.forEach(row.columns, function(column){\r\n              adjustRowHeight(column);\r\n            });\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    function prepareStructure($scope){\r\n      var structure = angular.copy($scope.structure);\r\n      adjustRowHeight(structure);\r\n      $scope.preview = structure;\r\n    }\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        name: '=',\r\n        structure: '=',\r\n        selected: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'structure-preview.html',\r\n      link: prepareStructure\r\n    };\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('adf')\r\n    .directive('adfWidgetContent', function ($log, $q, widgetService,\r\n        $compile, $controller, $injector, dashboard, $translate) {\r\n\r\n        function renderError($element, msg) {\r\n            $log.warn(msg);\r\n            $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\r\n        }\r\n\r\n        function compileWidget($scope, $element, currentScope, configChanged) {\r\n            var model = $scope.model;\r\n            var content = $scope.content;\r\n\r\n            var extra = $scope.extra;\r\n\r\n            var newScope = currentScope;\r\n            if (!model) {\r\n                $translate('ADF.ERROR.MODEL_IS_UNDEFINED').then(function (translateMessage) {\r\n                    renderError($element, translateMessage);\r\n                });\r\n            } else if (!content) {\r\n                if (model.title) {\r\n                    $translate('ADF.ERROR.WIDGET_FOR_DEPRECTATED', {\r\n                        title: model.title\r\n                    }).then(function (translateMessage) {\r\n                        renderError($element, translateMessage);\r\n                    });\r\n                } else {\r\n                    $translate('ADF.ERROR.WIDGET_DEPRECTATED').then(function (translateMessage) {\r\n                        renderError($element, translateMessage);\r\n                    });\r\n                }\r\n            } else {\r\n                if (newScope) {\r\n                    var is_menu = newScope.menu !== undefined && newScope.menu !== null;\r\n                    var is_itemsPerPage = newScope.itemsPerPage !== undefined && newScope.itemsPerPage !== null;\r\n                    if (is_menu || is_itemsPerPage || configChanged || !angular.isFunction(newScope.reloadData)) {\r\n                        newScope = renderWidget($scope, $element, currentScope, model, content, extra);\r\n                    } else {\r\n                        newScope.reloadData();\r\n                    }\r\n                } else {\r\n                    newScope = renderWidget($scope, $element, currentScope, model, content, extra);\r\n                }\r\n            }\r\n\r\n            function _getWindowTime(type) {\r\n                if (type === \"custom\") {\r\n                    return {\r\n                        from: newScope.config.windowFilter.from,\r\n                        to: newScope.config.windowFilter.to\r\n                    }\r\n                }\r\n                var from = window.moment().subtract(1, type);\r\n                return {\r\n                    from: from._d\r\n                };\r\n            }\r\n\r\n            if (newScope) {\r\n                if (newScope.config) {\r\n                    newScope.config.getWindowTime = function () {\r\n                        var windowFilter = newScope.config.windowFilter;\r\n                        if (windowFilter && windowFilter.type) {\r\n                            var winTime = _getWindowTime(windowFilter.type);\r\n                            /* jshint ignore:start */\r\n                            if (!window.eval(newScope.config.windowFilter.rawdate)) {\r\n                                for (var key in winTime) {\r\n                                    winTime[key] = window.moment(winTime[key]).format();\r\n                                }\r\n                                winTime['rawdate'] = true;\r\n                            }\r\n                            /* jshint ignore:end */\r\n                            return winTime;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (extra) {\r\n                    newScope.editing = extra.editing ? true : false;\r\n                    newScope.extraData = extra;\r\n                }\r\n            }\r\n            return newScope;\r\n        }\r\n\r\n        function renderWidget($scope, $element, currentScope, model, content, extra) {\r\n            // display loading template\r\n            $element.html(dashboard.loadingTemplate);\r\n\r\n            // create new scope\r\n            var templateScope = $scope.$new();\r\n\r\n            // pass config object to scope\r\n            if (!model.config) {\r\n                model.config = {};\r\n            }\r\n\r\n            templateScope.config = model.config;\r\n            templateScope.editing = extra && extra.editing;\r\n\r\n            if (extra) {\r\n                templateScope.extra = extra;\r\n            }\r\n\r\n            templateScope.selectionManager = (currentScope && currentScope.selectionManager) ? currentScope.selectionManager : undefined;\r\n\r\n            // local injections\r\n            var base = {\r\n                $scope: templateScope,\r\n                widget: model,\r\n                config: model.config\r\n            };\r\n\r\n            // get resolve promises from content object\r\n            var resolvers = {};\r\n            resolvers.$tpl = widgetService.getTemplate(content);\r\n            if (content.resolve) {\r\n                angular.forEach(content.resolve, function (promise, key) {\r\n                    if (angular.isString(promise)) {\r\n                        resolvers[key] = $injector.get(promise);\r\n                    } else {\r\n                        resolvers[key] = $injector.invoke(promise, promise, base);\r\n                    }\r\n                });\r\n            }\r\n\r\n            // resolve all resolvers\r\n            $q.all(resolvers).then(function (locals) {\r\n                angular.extend(locals, base);\r\n\r\n                // pass resolve map to template scope as defined in resolveAs\r\n                if (content.resolveAs) {\r\n                    templateScope[content.resolveAs] = locals;\r\n                }\r\n\r\n                // compile & render template\r\n                var template = locals.$tpl;\r\n                $element.html(template);\r\n                if (content.controller) {\r\n                    var templateCtrl = $controller(content.controller, locals);\r\n                    if (content.controllerAs) {\r\n                        templateScope[content.controllerAs] = templateCtrl;\r\n                    }\r\n                    $element.children().data('$ngControllerController', templateCtrl);\r\n                }\r\n                $compile($element.contents())(templateScope);\r\n            }, function (reason) {\r\n                // handle promise rejection\r\n                var msg = 'ADF.ERROR.COULD_NOT_RESOLVE_ALL_PROMISSES';\r\n                $translate(msg, {\r\n                    reason: (reason ? \": \" + reason : reason)\r\n                }).then(function (translateMessage) {\r\n                    renderError($element, translateMessage);\r\n                });\r\n            });\r\n\r\n            // destroy old scope\r\n            if (currentScope) {\r\n                currentScope.$destroy();\r\n            }\r\n\r\n            return templateScope;\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            scope: {\r\n                model: '=',\r\n                content: '=',\r\n                extra: '='\r\n            },\r\n            link: function ($scope, $element) {\r\n                var currentScope = compileWidget($scope, $element, null);\r\n                var widgetConfigChangedEvt = $scope.$on('widgetConfigChanged', function () {\r\n                    currentScope = compileWidget($scope, $element, currentScope, true);\r\n                });\r\n\r\n                var widgetReloadEvt = $scope.$on('widgetReload', function () {\r\n                    currentScope = compileWidget($scope, $element, currentScope, false);\r\n                });\r\n\r\n                $scope.$on('destroy', function () {\r\n                    widgetConfigChangedEvt();\r\n                    widgetReloadEvt();\r\n                });\r\n            }\r\n        };\r\n    });","\r\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n/**\r\n * The widget service provide helper functions to render widgets and their content.\r\n */\r\nangular.module('adf')\r\n  .factory('widgetService', function($http, $q, $sce, $templateCache, dashboard) {\r\n    'use strict';\r\n\r\n    function parseUrl(url) {\r\n      var parsedUrl = url;\r\n      if (url.indexOf('{widgetsPath}') >= 0) {\r\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\r\n                .replace('//', '/');\r\n        if (parsedUrl.indexOf('/') === 0) {\r\n          parsedUrl = parsedUrl.substring(1);\r\n        }\r\n      }\r\n      return parsedUrl;\r\n    }\r\n\r\n    var exposed = {};\r\n\r\n    exposed.getTemplate = function(widget){\r\n      var deferred = $q.defer();\r\n\r\n      if (widget.template) {\r\n        deferred.resolve(widget.template);\r\n      } else if (widget.templateUrl) {\r\n        // try to fetch template from cache\r\n        var tpl = $templateCache.get(widget.templateUrl);\r\n        if (tpl) {\r\n          deferred.resolve(tpl);\r\n        } else {\r\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\r\n          $http.get(url)\r\n               .success(function(response) {\r\n                 // put response to cache, with unmodified url as key\r\n                 $templateCache.put(widget.templateUrl, response);\r\n                 deferred.resolve(response);\r\n               })\r\n               .error(function() {\r\n                 deferred.reject('could not load template');\r\n               });\r\n        }\r\n      }\r\n\r\n      return deferred.promise;\r\n    };\r\n\r\n    return exposed;\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('adf')\r\n    .directive('adfWidget', function ($injector, $q, $log, $uibModal, $rootScope, $interval, dashboard, adfTemplatePath, Filter) {\r\n        function preLink($scope) {\r\n            var definition = $scope.definition;\r\n\r\n            if (definition) {\r\n                var w = dashboard.widgets[definition.type];\r\n                if (w) {\r\n                    // pass title\r\n                    if (!definition.title) {\r\n                        definition.title = w.title;\r\n                    }\r\n\r\n                    if (!definition.titleTemplateUrl) {\r\n                        definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\r\n                        if (w.titleTemplateUrl) {\r\n                            definition.titleTemplateUrl = w.titleTemplateUrl;\r\n                        }\r\n                    }\r\n\r\n                    if (!definition.editTemplateUrl) {\r\n                        definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\r\n                        if (w.editTemplateUrl) {\r\n                            definition.editTemplateUrl = w.editTemplateUrl;\r\n                        }\r\n                    }\r\n\r\n                    if (!definition.titleTemplateUrl) {\r\n                        definition.frameless = w.frameless;\r\n                    }\r\n\r\n                    if (!definition.styleClass) {\r\n                        definition.styleClass = w.styleClass;\r\n                    }\r\n\r\n                    // set id for sortable\r\n                    if (!definition.wid) {\r\n                        definition.wid = dashboard.id();\r\n                    }\r\n\r\n                    // pass copy of widget to scope\r\n                    $scope.widget = angular.copy(w);\r\n\r\n                    // create config object\r\n                    var config = definition.config;\r\n                    if (config) {\r\n                        if (angular.isString(config)) {\r\n                            config = angular.fromJson(config);\r\n                        }\r\n                    } else {\r\n                        config = {};\r\n                    }\r\n\r\n                    if (!config.reloadPeriod) {\r\n                        config.reloadPeriod = \"0\";\r\n                    }\r\n\r\n                    if (typeof $scope.widget.show_modal_footer === \"undefined\") {\r\n                        $scope.widget.show_modal_footer = true;\r\n                    }\r\n\r\n                    if (typeof $scope.widget.show_reload_config === \"undefined\") {\r\n                        $scope.widget.show_reload_config = true;\r\n                    }\r\n\r\n                    // pass config to scope\r\n                    $scope.config = config;\r\n\r\n                    // collapse exposed $scope.widgetState property\r\n                    if (!$scope.widgetState) {\r\n                        $scope.widgetState = {};\r\n                        $scope.widgetState.isCollapsed = (w.collapsed === true) ? w.collapsed : false;\r\n                    }\r\n\r\n                } else {\r\n                    $log.warn('could not find widget ' + definition.type);\r\n                }\r\n            } else {\r\n                $log.debug('definition not specified, widget was probably removed');\r\n            }\r\n        }\r\n\r\n        function postLink($scope, $element) {\r\n            var definition = $scope.definition;\r\n            if (!definition) {\r\n                $log.debug('widget not found');\r\n                return;\r\n            }\r\n            if (!$scope.config) {\r\n                $scope.config = {};\r\n            }\r\n\r\n            var config = $scope.config;\r\n\r\n            // bind close function\r\n            var deleteWidget = function () {\r\n                var column = $scope.col;\r\n                if (column) {\r\n                    var index = column.widgets.indexOf(definition);\r\n                    if (index >= 0) {\r\n                        column.widgets.splice(index, 1);\r\n                    }\r\n                }\r\n                $element.remove();\r\n                $rootScope.$broadcast('adfWidgetRemovedFromColumn');\r\n            };\r\n\r\n            $scope.remove = function () {\r\n                if ($scope.options.enableConfirmDelete) {\r\n                    var deleteScope = $scope.$new();\r\n\r\n                    var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\r\n                    if (definition.deleteTemplateUrl) {\r\n                        deleteTemplateUrl = definition.deleteTemplateUrl;\r\n                    }\r\n                    var opts = {\r\n                        scope: deleteScope,\r\n                        templateUrl: deleteTemplateUrl,\r\n                        backdrop: 'static'\r\n                    };\r\n                    var instance = $uibModal.open(opts);\r\n\r\n                    deleteScope.closeDialog = function () {\r\n                        instance.close();\r\n                        deleteScope.$destroy();\r\n                    };\r\n                    deleteScope.deleteDialog = function () {\r\n                        deleteWidget();\r\n                        deleteScope.closeDialog();\r\n                    };\r\n                } else {\r\n                    deleteWidget();\r\n                }\r\n            };\r\n\r\n\r\n            $scope.print = function () {\r\n                if (!$scope.editMode) {\r\n                    $scope.$broadcast('widgetPrint');\r\n                }\r\n            }\r\n\r\n            $scope.isExecuteOperationEnabled = function () {\r\n                // if ($scope.selectionManager.totalSelected() > 0)\r\n                //     return true;\r\n                if (config.entityKey)\r\n                    return true;\r\n                var filter = config.filter;\r\n                if (typeof filter === \"string\") {\r\n                    return filter.length > 0;\r\n                }\r\n                if (typeof filter === \"object\") {\r\n                    return filter.value.length > 2 && filter.oql;\r\n                }\r\n                return false;\r\n            }\r\n\r\n            $scope.executeOperation = function () {\r\n                if (!$scope.editMode) {\r\n                    // if ($scope.selectionManager.totalSelected() > 0) {\r\n                    //     var selectedItems = [];\r\n                    //     angular.forEach($scope.selectionManager.currentSelection, function(data, key) {\r\n                    //         selectedItems.push({ key: key, value: data });\r\n                    //     });\r\n                    //     $scope.$parent.$broadcast('widgetExecuteOperation', { 'selectedItems': selectedItems });\r\n                    // } else {\r\n                    $scope.$parent.$broadcast('widgetExecuteOperation');\r\n                    // }\r\n                }\r\n            };\r\n\r\n            // bind reload function\r\n            var stopReloadTimeout;\r\n\r\n            function _setReloadTimeout() {\r\n                if (config && config.reloadPeriod && config.reloadPeriod !== \"0\") {\r\n                    if (angular.isDefined(stopReloadTimeout)) {\r\n                        $interval.cancel(stopReloadTimeout)\r\n                        stopReloadTimeout = undefined;\r\n                    };\r\n                    stopReloadTimeout = $interval($scope.reload, (config.reloadPeriod * 1000));\r\n                }\r\n            }\r\n\r\n            $scope.reload = function (completeReload) {\r\n                if (completeReload) {\r\n                    $scope.$broadcast('widgetReload', completeReload);\r\n                } else {\r\n                    $scope.$broadcast('widgetReload');\r\n                }\r\n\r\n                _setReloadTimeout();\r\n            };\r\n\r\n            // verificacion de periodo de refresco\r\n            _setReloadTimeout();\r\n\r\n            $element.on('$destroy', function () {\r\n                $interval.cancel(stopReloadTimeout);\r\n            });\r\n\r\n            $scope.filter = {\r\n                value: \"\"\r\n            };\r\n            $scope.sort = {\r\n                value: \"\",\r\n                direction: \"\"\r\n            };\r\n\r\n            $scope.toggleAdvanced = 1;\r\n            var filter = config.filter;\r\n            if (typeof filter === \"object\" && filter.oql && filter.oql.length > 2) {\r\n                $scope.search = {\r\n                    oql: filter.oql,\r\n                    json: filter.value\r\n                };\r\n                $scope.toggleAdvanced = 0;\r\n            } else if (typeof filter === \"string\") {\r\n                $scope.search = {\r\n                    quick: filter\r\n                };\r\n                $scope.toggleAdvanced = 1;\r\n            } else if (typeof filter === \"object\" && filter.fields) {\r\n                $scope.search = {\r\n                    customFilter: filter.fields\r\n                };\r\n                $scope.search.fields = [];\r\n                angular.forEach(filter.fields, function (v, key) {\r\n                    $scope.search.fields.push(v.name);\r\n                });\r\n                $scope.toggleAdvanced = 2;\r\n            } else {\r\n                $scope.search = {\r\n                    quick: filter = \"\"\r\n                };\r\n            }\r\n\r\n            $scope.toggleFilter = function (advanced) {\r\n                $scope.toggleAdvanced = advanced;\r\n            };\r\n            $scope.filterAvailable = false;\r\n            $scope.showFilter = function () {\r\n                $scope.filterAvailable = $scope.filterAvailable === true ? false : true;\r\n            };\r\n\r\n            $scope.showFinalFilter = false;\r\n\r\n            $scope.launchSearching = function () {\r\n                var widget = {\r\n                    definition: definition,\r\n                    element: $element\r\n                };\r\n\r\n                $rootScope.$broadcast('adfLaunchSearchingFromWidget', widget, $scope.config.filter);\r\n                $scope.reload(true);\r\n            }\r\n            $scope.addCustomFilter = function (key) {\r\n                $scope.search.customFilter = $scope.search.customFilter ? $scope.search.customFilter : [];\r\n                $scope.search.customFilter.push({\r\n                    name: key,\r\n                    value: ''\r\n                });\r\n            }\r\n\r\n            $scope.launchCustomFilter = function () {\r\n                if ($scope.search.customFilter && $scope.search.customFilter.length > 0) {\r\n                    $scope.search.oql = $scope.search.json = '';\r\n\r\n                    $scope.config.filter = {\r\n                        value: {\r\n                            and: []\r\n                        },\r\n                        fields: $scope.search.customFilter\r\n                    }\r\n                    angular.forEach($scope.search.customFilter, function (v, key) {\r\n                        if (v.value) {\r\n                            var like = {};\r\n                            like[v.name] = v.value;\r\n                            $scope.config.filter.value.and.push({\r\n                                'like': like\r\n                            });\r\n                        }\r\n\r\n                    });\r\n                    $scope.config.filter.value = JSON.stringify($scope.config.filter.value);\r\n                }\r\n\r\n                $scope.launchSearching();\r\n            }\r\n\r\n\r\n\r\n            $scope.deleteFilter = function (value, model) {\r\n                angular.forEach($scope.search.customFilter, function (v, key) {\r\n                    if (v.name === value) {\r\n                        $scope.search.customFilter.splice(key, 1);\r\n                    }\r\n                });\r\n                if ($scope.search.customFilter.length === 0) {\r\n                    $scope.config.filter = {};\r\n                }\r\n            };\r\n\r\n\r\n            $scope.launchSearchingAdv = function () {\r\n                $scope.search.quick = '';\r\n                if ($scope.search.json === '' || $scope.search.json === '{}' || (!angular.isString($scope.search.json) && Object.keys($scope.search.json).length === 0)) {\r\n                    $scope.config.filter = {\r\n                        oql: '',\r\n                        value: ''\r\n                    };\r\n                } else {\r\n                    $scope.config.filter = {\r\n                        oql: $scope.search.oql,\r\n                        value: $scope.search.json\r\n                    };\r\n                }\r\n                $scope.launchSearching();\r\n\r\n            }\r\n\r\n            $scope.applyFilter = function (event) {\r\n                $scope.launchSearching();\r\n            }\r\n\r\n            $scope.launchSearchingQuick = function () {\r\n                $scope.search.oql = $scope.search.json = '';\r\n                $scope.config.filter = $scope.search.quick;\r\n                $scope.launchSearching();\r\n            }\r\n\r\n            var windowTimeChanged = $scope.$on('onWindowTimeChanged', function (event, timeObj) {\r\n                $scope.config.windowFilter = timeObj ? timeObj : (config.windowFilter ? {} : timeObj);\r\n                var widget = {\r\n                    definition: definition,\r\n                    element: $element\r\n                }\r\n                $rootScope.$broadcast('adfWindowTimeChangedFromWidget', widget, $scope.config.windowFilter);\r\n                $scope.reload();\r\n            });\r\n\r\n            $scope.enter = function (event) {\r\n                var keycode = (event.keyCode ? event.keyCode : event.which);\r\n                if (keycode === 13) {\r\n                    if ($scope.toggleAdvanced === 0)\r\n                        $scope.launchSearchingAdv();\r\n                    if ($scope.toggleAdvanced === 1)\r\n                        $scope.launchSearchingQuick();\r\n                    if ($scope.toggleAdvanced === 2)\r\n                        $scope.launchCustomFilter();\r\n\r\n                }\r\n                if (keycode === 19) {\r\n                    $scope.showFinalFilter = $scope.showFinalFilter === false ? true : false;\r\n                }\r\n            }\r\n\r\n\r\n            $scope.customSelectors = [];\r\n            $scope.getCustomSelectors = function () {\r\n                config.widgetSelectors().findFields(\"\").then(function (fields) {\r\n                    $scope.customSelectors = fields;\r\n                    $scope.$apply();\r\n                }).catch(function (err) {\r\n                    $log.error(err);\r\n                });\r\n\r\n            }\r\n\r\n            $scope.customFilter = [];\r\n            $scope.getcustomFilter = function () {\r\n                config.widgetSelectors().findFields(\"\").then(function (fields) {\r\n                    $scope.customFilter = fields;\r\n                    $scope.$apply();\r\n                }).catch(function (err) {\r\n                    $log.error(err);\r\n                });\r\n\r\n            }\r\n\r\n            $scope.ifCustomFilter = function () {\r\n                return $scope.customSelectors && config.sort && $scope.definition.type === 'FullDevicesList' && $scope.toggleAdvanced === 2;\r\n            }\r\n\r\n            $scope.showCustomFields = function () {\r\n                return $scope.definition.type === 'FullDevicesList' && $scope.toggleAdvanced === 2 && $scope.search.customFilter && $scope.filterAvailable && !$scope.editMode;\r\n            }\r\n\r\n            $scope.changeDirection = function () {\r\n                var direction = config.sort.direction;\r\n                if (direction === 'DESCENDING') {\r\n                    $scope.config.sort.direction = 'ASCENDING'\r\n                } else if (direction === 'ASCENDING') {\r\n                    $scope.config.sort.direction = 'DESCENDING'\r\n                }\r\n                $scope.reload();\r\n            }\r\n\r\n            $scope.debugQuery = function () {\r\n                Filter.parseQuery($scope.search.oql || '')\r\n                    .then(function (data) {\r\n                        //$scope.elementos = data;\r\n                        $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\r\n                        $scope.unknownWords = '';\r\n                        $scope.filter.error = null;\r\n                    })\r\n                    .catch(function (err) {\r\n                        $scope.filter.error = err;\r\n                        // Tratar el error\r\n                    });\r\n\r\n            }\r\n\r\n            $scope.autocomplete_options = function () {\r\n                var autocomplete_options = {\r\n                    suggest: Filter.suggest_field_delimited,\r\n                    customSelectors: config.widgetSelectors()\r\n                };\r\n\r\n                return autocomplete_options;\r\n\r\n            };\r\n\r\n            // Multiple selection\r\n            $scope.selectedItems = {};\r\n\r\n            // Gestor de seleccion\r\n            $scope.selectionManager = {\r\n                currentSelection: $scope.selectedItems,\r\n                isSelected: function (key, obj) {\r\n                    if ($scope.selectedItems[key] && !angular.isUndefined(obj)) {\r\n                        $scope.selectedItems[key].data = obj;\r\n                    }\r\n\r\n                    return $scope.selectedItems[key] ? true : false;\r\n                },\r\n                totalSelected: function () {\r\n                    return Object.keys($scope.selectedItems).length;\r\n                }\r\n            };\r\n\r\n            $scope.manageSelectedItems = function () {\r\n                var selectionScope = $scope.$new();\r\n\r\n                selectionScope.selectionConfig = config.selectionConfig;\r\n\r\n                selectionScope.selectedItems = [];\r\n                angular.forEach($scope.selectedItems, function (value, key) {\r\n                    selectionScope.selectedItems.push({\r\n                        key: key,\r\n                        value: value\r\n                    });\r\n                });\r\n\r\n                selectionScope.currentSelection = {\r\n                    selected: selectionScope.selectedItems\r\n                };\r\n\r\n                var manageItemsSelectedTemplate = adfTemplatePath + 'widget-selection.html';\r\n                var opts = {\r\n                    scope: selectionScope,\r\n                    templateUrl: manageItemsSelectedTemplate,\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    animation: true\r\n                };\r\n\r\n                var instance = $uibModal.open(opts);\r\n\r\n                selectionScope.restoreSelection = function () {\r\n                    selectionScope.currentSelection = {\r\n                        selected: selectionScope.selectedItems\r\n                    };\r\n                };\r\n\r\n                selectionScope.clearSelection = function () {\r\n                    selectionScope.currentSelection.selected = [];\r\n                };\r\n\r\n                // Cierra sy guarda los datos de nueva selección\r\n                selectionScope.applyFilter = function (type) {\r\n                    var customOql = selectionScope.selectionConfig.filterAction(selectionScope.currentSelection.selected, type);\r\n\r\n                    if (!angular.isUndefined(customOql) && customOql !== null) {\r\n                        $scope.toggleAdvanced = 0;\r\n                        Filter.parseQuery(customOql).then(function (data) {\r\n                            $scope.search.oql = customOql;\r\n                            $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\r\n                            $scope.unknownWords = '';\r\n                            $scope.filter.error = null;\r\n\r\n                            $scope.launchSearchingAdv();\r\n                        }).catch(function (err) {\r\n                            $scope.filter.error = err;\r\n                        });\r\n                    }\r\n                };\r\n\r\n                selectionScope.executeOperation = function (operationType) {\r\n                    if (!$scope.editMode) {\r\n                        $scope.$parent.$broadcast('widgetExecuteOperation', {\r\n                            'selectedItems': selectionScope.currentSelection.selected,\r\n                            'type': operationType\r\n                        });\r\n                    }\r\n                };\r\n\r\n                // Cierra sy guarda los datos de nueva selección\r\n                selectionScope.saveChangesDialog = function () {\r\n                    var finalSelection = {};\r\n                    angular.forEach(selectionScope.currentSelection.selected, function (data, idx) {\r\n                        finalSelection[data.key] = {\r\n                            data: data.value.data,\r\n                            visible: data.value.visible\r\n                        };\r\n                    });\r\n\r\n                    $scope.selectedItems = angular.copy(finalSelection);\r\n                    $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n\r\n                    $scope.selectionManager.lastItem = {};\r\n                    $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n\r\n                    instance.close();\r\n                    selectionScope.$destroy();\r\n                };\r\n\r\n                // Cierra sin realizar ninguna acción\r\n                selectionScope.closeDialog = function () {\r\n                    instance.close();\r\n                    selectionScope.$destroy();\r\n                };\r\n            };\r\n\r\n\r\n            // bind edit function\r\n            $scope.edit = function () {\r\n                var editScope = $scope.$new();\r\n                editScope.definition = angular.copy(definition);\r\n\r\n                var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\r\n                if (definition.editTemplateUrl) {\r\n                    adfEditTemplatePath = definition.editTemplateUrl;\r\n                }\r\n\r\n                var opts = {\r\n                    scope: editScope,\r\n                    templateUrl: adfEditTemplatePath,\r\n                    backdrop: 'static',\r\n                    size: 'lg'\r\n                };\r\n\r\n                var instance = $uibModal.open(opts);\r\n\r\n                editScope.closeDialog = function () {\r\n                    instance.close();\r\n                    editScope.$destroy();\r\n                };\r\n\r\n                // TODO create util method\r\n                function createApplyPromise(result) {\r\n                    var promise;\r\n                    if (typeof result === 'boolean') {\r\n                        var deferred = $q.defer();\r\n                        if (result) {\r\n                            deferred.resolve();\r\n                        } else {\r\n                            deferred.reject();\r\n                        }\r\n                        promise = deferred.promise;\r\n                    } else {\r\n                        promise = $q.when(result);\r\n                    }\r\n                    return promise;\r\n                }\r\n\r\n                editScope.saveDialog = function () {\r\n                    // clear validation error\r\n                    editScope.validationError = null;\r\n\r\n                    // build injection locals\r\n                    var widget = $scope.widget;\r\n\r\n                    // create a default apply method for widgets\r\n                    // without edit mode\r\n                    // see issue https://goo.gl/KHPQLZ\r\n                    var applyFn;\r\n                    if (widget.edit) {\r\n                        applyFn = widget.edit.apply;\r\n                    } else {\r\n                        applyFn = function () {\r\n                            return true;\r\n                        };\r\n                    }\r\n\r\n                    // injection locals\r\n                    var locals = {\r\n                        widget: widget,\r\n                        definition: editScope.definition,\r\n                        config: editScope.definition.config\r\n                    };\r\n\r\n                    // invoke apply function and apply if success\r\n                    var result = $injector.invoke(applyFn, applyFn, locals);\r\n                    createApplyPromise(result).then(function () {\r\n                        definition.title = editScope.definition.title;\r\n                        angular.extend(definition.config, editScope.definition.config);\r\n\r\n                        editScope.closeDialog();\r\n\r\n                        if (widget.edit && widget.edit.reload) {\r\n                            // reload content after edit dialog is closed\r\n                            $scope.$broadcast('widgetConfigChanged');\r\n                        }\r\n                    }, function (err) {\r\n                        if (err) {\r\n                            editScope.validationError = err;\r\n                        } else {\r\n                            editScope.validationError = 'VALIDATION_DURING_APPLY_FAILED';\r\n                        }\r\n                    });\r\n                };\r\n\r\n            };\r\n\r\n\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            templateUrl: dashboard.customWidgetTemplatePath ? dashboard.customWidgetTemplatePath : adfTemplatePath + 'widget.html',\r\n            scope: {\r\n                definition: '=',\r\n                col: '=column',\r\n                editMode: '=',\r\n                options: '=',\r\n                widgetState: '='\r\n            },\r\n            controller: function ($scope) {\r\n                var adfDashboardCollapseExpand = $scope.$on('adfDashboardCollapseExpand', function (event, args) {\r\n                    $scope.widgetState.isCollapsed = args.collapseExpandStatus;\r\n                });\r\n\r\n                var adfWidgetEnterEditMode = $scope.$on('adfWidgetEnterEditMode', function (event, widget) {\r\n                    if (dashboard.idEquals($scope.definition.wid, widget.wid)) {\r\n                        $scope.edit();\r\n                    }\r\n                });\r\n\r\n                var adfIsEditMode = $scope.$on('adfIsEditMode', function (event, widget) {\r\n                    $scope.editing = true;\r\n                });\r\n\r\n                var adfDashboardChanged = $scope.$on('adfDashboardChanged', function (event, widget) {\r\n                    $scope.editing = false;\r\n                });\r\n\r\n                var adfDashboardEditsCancelled = $scope.$on('adfDashboardEditsCancelled', function (event, widget) {\r\n                    $scope.editing = false;\r\n                });\r\n\r\n                $scope.widgetClasses = function (w, definition) {\r\n                    var classes = definition.styleClass || '';\r\n                    // w is undefined, if the type of the widget is unknown\r\n                    // see issue #216\r\n                    if (!w || !w.frameless || $scope.editMode) {\r\n                        classes += ' panel panel-default';\r\n                    }\r\n                    return classes;\r\n                };\r\n\r\n                $scope.openFullScreen = function () {\r\n                    var definition = $scope.definition;\r\n                    var fullScreenScope = $scope.$new();\r\n                    var opts = {\r\n                        scope: fullScreenScope,\r\n                        templateUrl: adfTemplatePath + 'widget-fullscreen.html',\r\n                        size: definition.modalSize || 'lg', // 'sm', 'lg'\r\n                        backdrop: 'static',\r\n                        windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\r\n                    };\r\n\r\n                    var instance = $uibModal.open(opts);\r\n                    fullScreenScope.closeDialog = function () {\r\n                        instance.close();\r\n                        fullScreenScope.$destroy();\r\n                    };\r\n                };\r\n\r\n                $scope.openFilter = function () {\r\n\r\n                }\r\n\r\n                $scope.openAboutScreen = function (size) {\r\n                    size = 'md';\r\n                    var modalInstance = $uibModal.open({\r\n                        animation: true,\r\n                        templateUrl: 'widgetAboutModal.html',\r\n                        controller: function ($scope, $uibModalInstance, information) {\r\n                            $scope.about = {};\r\n                            $scope.about.info = information;\r\n                            $scope.ok = function () {\r\n                                $uibModalInstance.close();\r\n                            };\r\n                        },\r\n                        'size': size,\r\n                        resolve: {\r\n                            information: function () {\r\n                                return $scope.config.about;\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    modalInstance.result.then(function (selectedItem) {\r\n                        $scope.selected = selectedItem;\r\n                    }, function () {\r\n                        $log.info('Modal dismissed at: ' + new Date());\r\n                    });\r\n                };\r\n\r\n                $scope.saveWidgetScreen = function (wId) {\r\n                    $scope.$emit('generateSnapshot', {\r\n                        'objectSelector': '.widget_' + wId,\r\n                        'fileName': 'capture_' + new Date().getTime()\r\n                    });\r\n                };\r\n\r\n                var onWindowTimeChanged = function (timeObj) {\r\n                    var filter = {\r\n                        and: []\r\n                    };\r\n                    if (timeObj && timeObj.from) {\r\n                        filter.and.push({\r\n                            gt: {\r\n                                operationDate: timeObj.from\r\n                            }\r\n                        });\r\n\r\n                        if (timeObj.to) {\r\n                            filter.and.push({\r\n                                lt: {\r\n                                    operationDate: timeObj.to\r\n                                }\r\n                            });\r\n                        }\r\n                    } else {\r\n                        filter = null;\r\n                    }\r\n                    return filter;\r\n                }\r\n\r\n                var createQuickFilter = function (fieldsQuickSearch, filter) {\r\n                    var _filter = {\r\n                        or: []\r\n                    };\r\n                    var criteria;\r\n                    fieldsQuickSearch.forEach(function (field) {\r\n                        criteria = {};\r\n                        criteria[field.operator] = {};\r\n                        criteria[field.operator][field.name] = $scope.config.filter;\r\n                        _filter.or.push(criteria);\r\n                    });\r\n                    return _filter;\r\n                }\r\n\r\n                $scope.downloadCsv = function () {\r\n                    var columns = $scope.config.columns;\r\n                    var scope_filter = $scope.config.filter;\r\n                    var extra_filter;\r\n                    var final_filter = {};\r\n                    var order = $scope.config.sort ? $scope.config.sort : undefined;\r\n                    if ($scope.config.windowFilter) {\r\n                        var window_filter = onWindowTimeChanged($scope.config.windowFilter);\r\n                        if (window_filter && window_filter.and) {\r\n                            extra_filter = {\r\n                                and: window_filter.and\r\n                            };\r\n                        }\r\n                    }\r\n                    var filter;\r\n                    if (scope_filter.value && scope_filter.value.length > 4) {\r\n                        filter = JSON.parse(scope_filter.value);\r\n                    } else if (typeof scope_filter === 'string' && scope_filter.trim() !== '') {\r\n                        filter = createQuickFilter($scope.config.fieldsQuickSearch, scope_filter);\r\n                    }\r\n                    if (extra_filter) {\r\n                        if (filter) {\r\n                            final_filter = {\r\n                                and: [extra_filter, filter]\r\n                            };\r\n                        } else {\r\n                            final_filter = extra_filter;\r\n                        }\r\n                    } else {\r\n                        final_filter = filter;\r\n                    }\r\n                    $scope.$broadcast('downloadCsv', {\r\n                        'columns': columns,\r\n                        'filter': final_filter,\r\n                        'order': order\r\n                    });\r\n                };\r\n\r\n                $scope.generateQR = function () {\r\n                    $scope.$broadcast('generateQR');\r\n                };\r\n\r\n                var addItemToSelection = $scope.$on('addItemToSelection', function (event, item) {\r\n                    if (!$scope.selectedItems[item.key]) {\r\n                        $scope.selectedItems[item.key] = {\r\n                            data: item.data,\r\n                            visible: item.visible\r\n                        };\r\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n                        item.isSelected = true;\r\n                        $scope.selectionManager.lastItem = item;\r\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n                    }\r\n\r\n                });\r\n\r\n                var removeItemFromSelection = $scope.$on('removeItemFromSelection', function (event, item) {\r\n                    if ($scope.selectedItems[item.key]) {\r\n                        delete $scope.selectedItems[item.key];\r\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n                        item.isSelected = false;\r\n                        $scope.selectionManager.lastItem = item;\r\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n                    }\r\n                });\r\n\r\n                $scope.$on('$destroy', function () {\r\n                    adfDashboardCollapseExpand();\r\n                    adfWidgetEnterEditMode();\r\n                    adfIsEditMode();\r\n                    adfDashboardChanged();\r\n                    adfDashboardEditsCancelled();\r\n                    addItemToSelection();\r\n                    removeItemFromSelection();\r\n                });\r\n            },\r\n            compile: function () {\r\n\r\n                /**\r\n                 * use pre link, because link of widget-content\r\n                 * is executed before post link widget\r\n                 */\r\n                return {\r\n                    pre: preLink,\r\n                    post: postLink\r\n                };\r\n            }\r\n        };\r\n\r\n    });",null,"(function(window, undefined) {'use strict';\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf', ['adf.provider', 'ui.bootstrap', 'opengate-angular-js'])\r\n    .value('adfTemplatePath', '../src/templates/')\r\n    .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\r\n    .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\r\n    .value('adfVersion', '4.0.0');\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardColumn', function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\r\n    \r\n\r\n    /**\r\n     * moves a widget in between a column\r\n     */\r\n    function moveWidgetInColumn($scope, column, evt){\r\n      var widgets = column.widgets;\r\n      // move widget and apply to scope\r\n      $scope.$apply(function(){\r\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\r\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * finds a widget by its id in the column\r\n     */\r\n    function findWidget(column, index){\r\n      var widget = null;\r\n      for (var i=0; i<column.widgets.length; i++){\r\n        var w = column.widgets[i];\r\n        if (dashboard.idEquals(w.wid,index)){\r\n          widget = w;\r\n          break;\r\n        }\r\n      }\r\n      return widget;\r\n    }\r\n\r\n    /**\r\n     * finds a column by its id in the model\r\n     */\r\n    function findColumn(model, index){\r\n      var column = null;\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var r = model.rows[i];\r\n        for (var j=0; j<r.columns.length; j++){\r\n          var c = r.columns[j];\r\n          if (dashboard.idEquals(c.cid, index)){\r\n            column = c;\r\n            break;\r\n          } else if (c.rows){\r\n            column = findColumn(c, index);\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    /**\r\n     * get the adf id from an html element\r\n     */\r\n    function getId(el){\r\n      var id = el.getAttribute('adf-id');\r\n      return id ? id : '-1';\r\n    }\r\n\r\n    /**\r\n     * adds a widget to a column\r\n     */\r\n    function addWidgetToColumn($scope, model, targetColumn, evt){\r\n      // find source column\r\n      var cid = getId(evt.from);\r\n      var sourceColumn = findColumn(model, cid);\r\n\r\n      if (sourceColumn){\r\n        // find moved widget\r\n        var wid = getId(evt.item);\r\n        var widget = findWidget(sourceColumn, wid);\r\n\r\n        if (widget){\r\n          // add new item and apply to scope\r\n          $scope.$apply(function(){\r\n            if (!targetColumn.widgets) {\r\n              targetColumn.widgets = [];\r\n            }\r\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\r\n\r\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\r\n          });\r\n        } else {\r\n          $log.warn('could not find widget with id ' + wid);\r\n        }\r\n      } else {\r\n        $log.warn('could not find column with id ' + cid);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * removes a widget from a column\r\n     */\r\n    function removeWidgetFromColumn($scope, column, evt){\r\n      // remove old item and apply to scope\r\n      $scope.$apply(function(){\r\n        column.widgets.splice(evt.oldIndex, 1);\r\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * enable sortable\r\n     */\r\n    function applySortable($scope, $element, model, column){\r\n      // enable drag and drop\r\n      var el = $element[0];\r\n      var sortable = Sortable.create(el, {\r\n        group: 'widgets',\r\n        handle: '.adf-move',\r\n        ghostClass: 'placeholder',\r\n        animation: 150,\r\n        onAdd: function(evt){\r\n          addWidgetToColumn($scope, model, column, evt);\r\n        },\r\n        onRemove: function(evt){\r\n          removeWidgetFromColumn($scope, column, evt);\r\n        },\r\n        onUpdate: function(evt){\r\n          moveWidgetInColumn($scope, column, evt);\r\n        }\r\n      });\r\n\r\n      // destroy sortable on column destroy event\r\n      $element.on('$destroy', function () {\r\n        // check sortable element, before calling destroy\r\n        // see https://github.com/sdorra/angular-dashboard-framework/issues/118\r\n        if (sortable.el){\r\n          sortable.destroy();\r\n        }\r\n      });\r\n    }\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        column: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        adfModel: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\r\n      link: function ($scope, $element) {\r\n        // set id\r\n        var col = $scope.column;\r\n        if (!col.cid){\r\n          col.cid = dashboard.id();\r\n        }\r\n\r\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\r\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\r\n          $compile(rowTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        } else {\r\n          // enable drag and drop for widget only columns\r\n          applySortable($scope, $element, $scope.adfModel, col);\r\n        }\r\n      }\r\n    };\r\n  });\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name adf.directive:adfDashboard\r\n * @element div\r\n * @restrict EA\r\n * @scope\r\n * @description\r\n *\r\n * `adfDashboard` is a directive which renders the dashboard with all its\r\n * components. The directive requires a name attribute. The name of the\r\n * dashboard can be used to store the model.\r\n *\r\n * @param {string} name name of the dashboard. This attribute is required.\r\n * @param {boolean=} editable false to disable the editmode of the dashboard.\r\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\r\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\r\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\r\n * @param {string=} structure the default structure of the dashboard.\r\n * @param {object=} adfModel model object of the dashboard.\r\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\r\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\r\n *                   events during edit mode not reset it if edit mode is exited.\r\n * @param {boolean=} categories enable categories for the add widget dialog.\r\n */\r\n\r\nangular.module('adf')\r\n    .directive('adfDashboard', function ($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath, $faIcons) {\r\n        \r\n\r\n        function stringToBoolean(string) {\r\n            switch (angular.isDefined(string) ? string.toLowerCase() : null) {\r\n                case 'true':\r\n                case 'yes':\r\n                case '1':\r\n                    return true;\r\n                case 'false':\r\n                case 'no':\r\n                case '0':\r\n                case null:\r\n                    return false;\r\n                default:\r\n                    return Boolean(string);\r\n            }\r\n        }\r\n\r\n        function copyWidgets(source, target) {\r\n            if (source.widgets && source.widgets.length > 0) {\r\n                var w = source.widgets.shift();\r\n                while (w) {\r\n                    target.widgets.push(w);\r\n                    w = source.widgets.shift();\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Copy widget from old columns to the new model\r\n         * @param object root the model\r\n         * @param array of columns\r\n         * @param counter\r\n         */\r\n        function fillStructure(root, columns, counter) {\r\n            counter = counter || 0;\r\n\r\n            if (angular.isDefined(root.rows)) {\r\n                angular.forEach(root.rows, function (row) {\r\n                    angular.forEach(row.columns, function (column) {\r\n                        // if the widgets prop doesn't exist, create a new array for it.\r\n                        // this allows ui.sortable to do it's thing without error\r\n                        if (!column.widgets) {\r\n                            column.widgets = [];\r\n                        }\r\n\r\n                        // if a column exist at the counter index, copy over the column\r\n                        if (angular.isDefined(columns[counter])) {\r\n                            // do not add widgets to a column, which uses nested rows\r\n                            if (angular.isUndefined(column.rows)) {\r\n                                copyWidgets(columns[counter], column);\r\n                                counter++;\r\n                            }\r\n                        }\r\n\r\n                        // run fillStructure again for any sub rows/columns\r\n                        counter = fillStructure(column, columns, counter);\r\n                    });\r\n                });\r\n            }\r\n            return counter;\r\n        }\r\n\r\n        /**\r\n         * Read Columns: recursively searches an object for the 'columns' property\r\n         * @param object model\r\n         * @param array  an array of existing columns; used when recursion happens\r\n         */\r\n        function readColumns(root, columns) {\r\n            columns = columns || [];\r\n\r\n            if (angular.isDefined(root.rows)) {\r\n                angular.forEach(root.rows, function (row) {\r\n                    angular.forEach(row.columns, function (col) {\r\n                        columns.push(col);\r\n                        // keep reading columns until we can't any more\r\n                        readColumns(col, columns);\r\n                    });\r\n                });\r\n            }\r\n\r\n            return columns;\r\n        }\r\n\r\n        function changeStructure(model, structure) {\r\n            var columns = readColumns(model);\r\n            var counter = 0;\r\n\r\n            model.rows = angular.copy(structure.rows);\r\n\r\n            while (counter < columns.length) {\r\n                counter = fillStructure(model, columns, counter);\r\n            }\r\n        }\r\n\r\n        function createConfiguration(type) {\r\n            var cfg = {};\r\n            var config = dashboard.widgets[type].config;\r\n            if (config) {\r\n                cfg = angular.copy(config);\r\n            }\r\n            return cfg;\r\n        }\r\n\r\n        function createWidget(type) {\r\n            var wdgt = {};\r\n            var widget = dashboard.widgets[type];\r\n            if (widget) {\r\n                wdgt = angular.copy(widget);\r\n            }\r\n            return wdgt;\r\n        }\r\n\r\n        /**\r\n         * Find first widget column in model.\r\n         *\r\n         * @param dashboard model\r\n         */\r\n        function findFirstWidgetColumn(model) {\r\n            var column = null;\r\n            if (!angular.isArray(model.rows)) {\r\n                $log.error('model does not have any rows');\r\n                return null;\r\n            }\r\n            for (var i = 0; i < model.rows.length; i++) {\r\n                var row = model.rows[i];\r\n                if (angular.isArray(row.columns)) {\r\n                    for (var j = 0; j < row.columns.length; j++) {\r\n                        var col = row.columns[j];\r\n                        if (!col.rows) {\r\n                            column = col;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if (column) {\r\n                    break;\r\n                }\r\n            }\r\n            return column;\r\n        }\r\n\r\n        /**\r\n         * Adds the widget to first column of the model.\r\n         *\r\n         * @param dashboard model\r\n         * @param widget to add to model\r\n         * @param name name of the dashboard\r\n         */\r\n        function addNewWidgetToModel(model, widget, name, forceToSave) {\r\n            if (model) {\r\n                var column = findFirstWidgetColumn(model);\r\n                if (column) {\r\n                    if (!column.widgets) {\r\n                        column.widgets = [];\r\n                    }\r\n                    column.widgets.unshift(widget);\r\n\r\n                    // broadcast added event\r\n                    $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\r\n\r\n                    if (forceToSave) {\r\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n                    }\r\n                } else {\r\n                    $log.error('could not find first widget column');\r\n                }\r\n            } else {\r\n                $log.error('model is undefined');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Checks if the edit mode of the widget should be opened immediately.\r\n         *\r\n         * @param widget type\r\n         */\r\n        function isEditModeImmediate(type) {\r\n            var widget = dashboard.widgets[type];\r\n            return widget && widget.edit && widget.edit.immediate;\r\n        }\r\n\r\n        /**\r\n         * Opens the edit mode of the specified widget.\r\n         *\r\n         * @param dashboard scope\r\n         * @param widget\r\n         */\r\n        function openEditMode($scope, widget) {\r\n            // wait some time before fire enter edit mode event\r\n            $timeout(function () {\r\n                $scope.$broadcast('adfWidgetEnterEditMode', widget);\r\n            }, 200);\r\n        }\r\n\r\n        /**\r\n         * Splits an object into an array multiple objects inside.\r\n         *\r\n         * @param object source object\r\n         * @param size size of array\r\n         *\r\n         * @return array of splitted objects\r\n         */\r\n        function split(object, size) {\r\n            var arr = [];\r\n            var i = 0;\r\n            angular.forEach(object, function (value, key) {\r\n                var index = i++ % size;\r\n                if (!arr[index]) {\r\n                    arr[index] = {};\r\n                }\r\n                arr[index][key] = value;\r\n            });\r\n            return arr;\r\n        }\r\n\r\n        /**\r\n         * Creates object with the category name as key and an array of widgets as value.\r\n         *\r\n         * @param widgets array of widgets\r\n         *\r\n         * @return array of categories\r\n         */\r\n        function createCategories(widgets) {\r\n            var categories = {};\r\n            angular.forEach(widgets, function (widget, key) {\r\n                var category = widget.category;\r\n                // if the widget has no category use a default one\r\n                if (!category) {\r\n                    category = 'ADF.CATEGORY.MISCELANOUS';\r\n                }\r\n                // push widget to category array\r\n                if (angular.isUndefined(categories[category])) {\r\n                    categories[category] = {\r\n                        widgets: {}\r\n                    };\r\n                }\r\n                categories[category].widgets[key] = widget;\r\n            });\r\n            return categories;\r\n        }\r\n\r\n        function createCategoriesList(widgets) {\r\n            var categories = [];\r\n            angular.forEach(widgets, function (widget, key) {\r\n                if (!widget.category) {\r\n                    widget.category = 'ADF.CATEGORY.MISCELLANEOUS';\r\n                }\r\n\r\n                if (!widget.categoryTags) {\r\n                    widget.categoryTags = 'ADF.CATEGORY.TAG.MISCELLANEOUS';\r\n                }\r\n                \r\n                var categoriesTmp = widget.categoryTags.split(',');\r\n\r\n                angular.forEach(categoriesTmp, function(category, idx) {\r\n                    // push widget to category array\r\n                    if (categories.indexOf(category) === -1) \r\n                        categories.push(category)\r\n                });\r\n                \r\n            });\r\n            return categories;\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            scope: {\r\n                structure: '@',\r\n                name: '@',\r\n                collapsible: '@',\r\n                editable: '@',\r\n                editMode: '@',\r\n                continuousEditMode: '=',\r\n                maximizable: '@',\r\n                adfModel: '=',\r\n                adfWidgetFilter: '=',\r\n                categories: '@',\r\n                hideButtons: '=',\r\n                extraData: '='\r\n            },\r\n            controller: function ($scope) {\r\n                var model = {};\r\n                var structure = {};\r\n                var widgetFilter = null;\r\n                var structureName = {};\r\n                var name = $scope.name;\r\n\r\n                // Watching for changes on adfModel\r\n                $scope.$watch('adfModel', function (oldVal, newVal) {\r\n                    // has model changed or is the model attribute not set\r\n                    if (newVal !== null || (oldVal === null && newVal === null)) {\r\n                        model = $scope.adfModel;\r\n                        widgetFilter = $scope.adfWidgetFilter;\r\n                        if (!model || !model.rows) {\r\n                            structureName = $scope.structure;\r\n                            structure = dashboard.structures[structureName];\r\n                            if (structure) {\r\n                                if (model) {\r\n                                    model.rows = angular.copy(structure).rows;\r\n                                } else {\r\n                                    model = angular.copy(structure);\r\n                                }\r\n                                model.structure = structureName;\r\n                            } else {\r\n                                $log.error('could not find structure ' + structureName);\r\n                            }\r\n                        }\r\n\r\n                        if (model) {\r\n                            if (!model.title) {\r\n                                model.title = 'ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD';\r\n                            }\r\n                            if (!model.titleTemplateUrl) {\r\n                                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\r\n                            }\r\n                            $scope.model = model;\r\n                        } else {\r\n                            $log.error('could not find or create model');\r\n                        }\r\n                    }\r\n                }, true);\r\n\r\n                // edit mode\r\n                $scope.editMode = false;\r\n                $scope.editClass = '';\r\n\r\n                function getNewModalScope() {\r\n                    var scope = $scope.$new();\r\n                    return scope;\r\n                }\r\n\r\n                $scope.deleteDashboard = function () {\r\n                    var dashData = {\r\n                        id: model.id,\r\n                        name: model.title\r\n                    };\r\n\r\n                    $rootScope.$broadcast('dashboardDelete', dashData);\r\n                };\r\n\r\n                $scope.toggleEditMode = function (openConfigWindow) {\r\n                    $scope.editMode = !$scope.editMode;\r\n                    if ($scope.editMode) {\r\n                        if (!$scope.continuousEditMode) {\r\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n                            $rootScope.$broadcast('adfIsEditMode');\r\n                        }\r\n\r\n                        if (openConfigWindow) {\r\n                            $scope.editDashboardDialog();\r\n                        }\r\n                    }\r\n\r\n                    if (!$scope.editMode) {\r\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n                    }\r\n                };\r\n\r\n                $scope.saveTemporalDashboard = function () {\r\n                    delete model.temporal;\r\n                    $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n                };\r\n\r\n                var adfToggleEditMode = $scope.$on('adfToggleEditMode', function (event, isNewDashboard) {\r\n                    if (isNewDashboard) {\r\n                        $scope.toggleEditMode(true);\r\n                    } else {\r\n                        $scope.toggleEditMode();\r\n                    }\r\n                });\r\n\r\n                var adfCancelEditMode = $scope.$on('adfCancelEditMode', function (event, isNewDashboard) {\r\n                    if ($scope.editMode) {\r\n                        $scope.cancelEditMode();\r\n                    }\r\n                });\r\n\r\n                $scope.collapseAll = function (collapseExpandStatus) {\r\n                    $rootScope.$broadcast('adfDashboardCollapseExpand', {\r\n                        collapseExpandStatus: collapseExpandStatus\r\n                    });\r\n                };\r\n\r\n                $scope.cancelEditMode = function () {\r\n                    $scope.editMode = false;\r\n                    if (!$scope.continuousEditMode && ($scope.modelCopy !== $scope.adfModel)) {\r\n                        $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\r\n                    }\r\n                    $rootScope.$broadcast('adfDashboardEditsCancelled');\r\n                };\r\n\r\n                var adfEditDashboardDialog = $scope.$on('adfEditDashboardDialog', function (event, isNewDashboard) {\r\n                    if ($scope.editMode) {\r\n                        $scope.editDashboardDialog();\r\n                    }\r\n                });\r\n\r\n                var adfLaunchSearchingFromWidget = $scope.$on('adfLaunchSearchingFromWidget', function (event, widget, configFilter) {\r\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\r\n                });\r\n                var adfWindowTimeChangedFromWidget = $scope.$on('adfWindowTimeChangedFromWidget', function (event, widget, windowFilter) {\r\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\r\n                });\r\n\r\n                // edit dashboard settings\r\n                $scope.editDashboardDialog = function () {\r\n                    var editDashboardScope = getNewModalScope();\r\n                    // create a copy of the title, to avoid changing the title to\r\n                    // \"dashboard\" if the field is empty\r\n                    editDashboardScope.copy = {\r\n                        title: (model.title !== 'ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD' ? model.title : ''),\r\n                        description: model.description,\r\n                        icon: model.icon ? model.icon : 'fa-tachometer'\r\n                    };\r\n\r\n                    // pass icon list\r\n                    editDashboardScope.availableIcons = $faIcons.list();\r\n\r\n                    // pass dashboard structure to scope\r\n                    editDashboardScope.structures = dashboard.structures;\r\n\r\n                    // pass split function to scope, to be able to display structures in multiple columns\r\n                    editDashboardScope.split = split;\r\n\r\n                    var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\r\n                    if (model.editTemplateUrl) {\r\n                        adfEditTemplatePath = model.editTemplateUrl;\r\n                    }\r\n                    var instance = $uibModal.open({\r\n                        scope: editDashboardScope,\r\n                        templateUrl: adfEditTemplatePath,\r\n                        backdrop: 'static',\r\n                        keyboard: false,\r\n                        size: 'lg'\r\n                    });\r\n\r\n                    editDashboardScope.changeStructure = function (name, structure) {\r\n                        $log.info('change structure to ' + name);\r\n                        changeStructure(model, structure);\r\n                        if (model.structure !== name) {\r\n                            model.structure = name;\r\n                        }\r\n                    };\r\n                    editDashboardScope.closeDialog = function () {\r\n                        // copy the new title back to the model\r\n                        model.title = editDashboardScope.copy.title;\r\n                        model.description = editDashboardScope.copy.description;\r\n                        model.icon = editDashboardScope.copy.icon;\r\n\r\n                        // close modal and destroy the scope\r\n                        instance.close();\r\n                        editDashboardScope.$destroy();\r\n                    };\r\n                };\r\n\r\n                var adfOpenWidgetFromOther = $scope.$on('adfOpenWidgetFromOther', function (event, widget, config) {\r\n                    var internal_config = createConfiguration(widget);\r\n                    var _config = angular.merge({}, internal_config, config);\r\n                    var w = {\r\n                        type: widget,\r\n                        config: _config,\r\n                        title: _config.title\r\n                    };\r\n                    addNewWidgetToModel(model, w, name, !$scope.editMode);\r\n                });\r\n\r\n                var adfOpenModalWidgetFromOther = $scope.$on('adfOpenModalWidgetFromOther', function (event, widgetType, config) {\r\n                    var widget = createWidget(widgetType);\r\n                    widget.config = angular.merge({}, widget.config, config);\r\n                    widget.type = widgetType;\r\n                    if (widget.config.title) {\r\n                        widget.title = widget.config.title;\r\n                    }\r\n                    var fullScreenScope = $scope.$new();\r\n                    fullScreenScope.definition = fullScreenScope.widget = widget;\r\n                    var opts = {\r\n                        scope: fullScreenScope,\r\n                        templateUrl: adfTemplatePath + 'widget-fullscreen.html',\r\n                        size: fullScreenScope.definition.modalSize || 'lg', // 'sm', 'lg'\r\n                        backdrop: 'static',\r\n                        windowClass: (fullScreenScope.definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\r\n                    };\r\n\r\n                    fullScreenScope.persistDashboard = function () {\r\n                        $rootScope.$broadcast('adfOpenWidgetFromOther', this.$parent.widget.type, this.$parent.widget.config);\r\n                        this.closeDialog();\r\n                    }\r\n\r\n                    var instance = $uibModal.open(opts);\r\n                    fullScreenScope.closeDialog = function () {\r\n                        instance.close();\r\n                        fullScreenScope.$destroy();\r\n                    };\r\n\r\n                });\r\n\r\n                var adfAddWidgetDialog = $scope.$on('adfAddWidgetDialog', function (event, isNewDashboard) {\r\n                    if (!model.temporal && model.editable) {\r\n                        if (!$scope.editMode) {\r\n                            $scope.editMode = true;\r\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n                            $rootScope.$broadcast('adfIsEditMode');\r\n                        }\r\n\r\n                        $scope.addWidgetDialog();\r\n                    }\r\n                });\r\n\r\n                // add widget dialog\r\n                $scope.addWidgetDialog = function () {\r\n                    var addScope = getNewModalScope();\r\n                    var widgets;\r\n                    if (angular.isFunction(widgetFilter)) {\r\n                        widgets = {};\r\n                        angular.forEach(dashboard.widgets, function (widget, type) {\r\n                            if (widgetFilter(widget, type, model)) {\r\n                                widgets[type] = widget;\r\n                            }\r\n                        });\r\n                    } else {\r\n                        widgets = dashboard.widgets;\r\n                    }\r\n                    addScope.widgets = widgets;\r\n\r\n                    angular.forEach(addScope.widgets, function (widget, type) {\r\n                        widget.key = type;\r\n                        if (!widget.category) {\r\n                            widget.category = 'Miscellaneous';\r\n                        }\r\n                    });\r\n                    \r\n                    // pass createCategories function to scope, if categories option is enabled\r\n                    if ($scope.options.categories) {\r\n                        addScope.createCategories = createCategories;\r\n                    } else {\r\n                        addScope.availableCategories = createCategoriesList(widgets);\r\n                    }\r\n\r\n                    var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\r\n                    if (model.addTemplateUrl) {\r\n                        adfAddTemplatePath = model.addTemplateUrl;\r\n                    }\r\n\r\n                    var opts = {\r\n                        scope: addScope,\r\n                        templateUrl: adfAddTemplatePath,\r\n                        backdrop: 'static',\r\n                        size: 'lg'\r\n                    };\r\n\r\n                    var instance = $uibModal.open(opts);\r\n                    addScope.widgetFilter = {};\r\n                    addScope.addWidget = function (widget) {\r\n                        var w = {\r\n                            type: widget,\r\n                            config: createConfiguration(widget)\r\n                        };\r\n                        addNewWidgetToModel(model, w, name);\r\n                        // close and destroy\r\n                        instance.close();\r\n                        addScope.$destroy();\r\n\r\n                        // check for open edit mode immediately\r\n                        if (isEditModeImmediate(widget)) {\r\n                            openEditMode($scope, w);\r\n                        }\r\n                    };\r\n\r\n                    addScope.changeThumbnail = function (widget) {\r\n                        if ( widget.images) {\r\n                            if (angular.isUndefined(widget._currThumb)) {\r\n                                widget._currThumb = 1;\r\n                            } else {\r\n                                widget._currThumb+=1;\r\n                            }\r\n                            \r\n                            \r\n                            if (widget._currThumb >= widget.images.length) {\r\n                                widget._currThumb = 0;\r\n                            } \r\n    \r\n                            widget._currImg = widget.images[widget._currThumb];\r\n                        }                        \r\n                    };\r\n\r\n                    addScope.closeDialog = function () {\r\n                        // close and destroy\r\n                        instance.close();\r\n                        addScope.$destroy();\r\n                    };\r\n                };\r\n\r\n                $scope.addNewWidgetToModel = addNewWidgetToModel;\r\n\r\n                $scope.$on('destroy', function () {\r\n                    adfLaunchSearchingFromWidget();\r\n                    adfWindowTimeChangedFromWidget();\r\n                    adfToggleEditMode();\r\n                    adfOpenWidgetFromOther();\r\n                    adfOpenModalWidgetFromOther();\r\n                    adfCancelEditMode();\r\n                    adfAddWidgetDialog();\r\n                    adfEditDashboardDialog();\r\n                });\r\n            },\r\n            link: function ($scope, $element, $attr) {\r\n                // pass options to scope\r\n                var options = {\r\n                    name: $attr.name,\r\n                    editable: true,\r\n                    enableConfirmDelete: stringToBoolean($attr.enableConfirmDelete),\r\n                    maximizable: stringToBoolean($attr.maximizable),\r\n                    collapsible: stringToBoolean($attr.collapsible),\r\n                    categories: stringToBoolean($attr.categories),\r\n                    extraData: {}\r\n                };\r\n\r\n                if (angular.isDefined($attr.editable)) {\r\n                    options.editable = stringToBoolean($attr.editable);\r\n                }\r\n\r\n                if (angular.isDefined($scope.extraData)) {\r\n                    options.extraData = $scope.extraData;\r\n                }\r\n\r\n                options.extraData.editing = $scope.editMode;\r\n\r\n                $scope.options = options;\r\n            },\r\n            templateUrl: adfTemplatePath + 'dashboard.html'\r\n        };\r\n    });\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .filter('adfOrderByObjectKey', function($filter) {\r\n    \r\n\r\n    return function(item, key){\r\n      var array = [];\r\n      angular.forEach(item, function(value, objectKey){\r\n        value[key] = objectKey;\r\n        array.push(value);\r\n      });\r\n      return $filter('orderBy')(array, key);\r\n    };\r\n  });\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\n/**\r\n * @ngdoc object\r\n * @name adf.dashboardProvider\r\n * @description\r\n *\r\n * The dashboardProvider can be used to register structures and widgets.\r\n */\r\nangular.module('adf.provider', [])\r\n    .provider('dashboard', function () {\r\n\r\n        var widgets = {};\r\n        var widgetsPath = '';\r\n        var structures = {};\r\n        var messageTemplate = '<div class=\"alert alert-primary\">{}</div>';\r\n        var loadingTemplate = '\\\r\n      <div class=\"progress progress-striped active\">\\n\\\r\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\r\n          <span class=\"sr-only\" translate>FORM.MSG.LOADING ...</span>\\n\\\r\n        </div>\\n\\\r\n      </div>';\r\n        var customWidgetTemplatePath = null;\r\n\r\n        // default apply function of widget.edit.apply\r\n        var defaultApplyFunction = function () {\r\n            return true;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#widget\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Registers a new widget.\r\n         *\r\n         * @param {string} name of the widget\r\n         * @param {object} widget to be registered.\r\n         *\r\n         *   Object properties:\r\n         *\r\n         *   - `title` - `{string=}` - The title of the widget.\r\n         *   - `description` - `{string=}` - Description of the widget.\r\n         *   - `category` - `{string=}` - Category of the widget.\r\n         *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\r\n         *   - `config` - `{object}` - Predefined widget configuration.\r\n         *   - `controller` - `{string=|function()=}` - Controller fn that should be\r\n         *      associated with newly created scope of the widget or the name of a\r\n         *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\r\n         *      if passed as a string.\r\n         *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\r\n         *      published to scope under the `controllerAs` name.\r\n         *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\r\n         *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\r\n         *   - `template` - `{string=|function()=}` - html template as a string.\r\n         *   - `templateUrl` - `{string=}` - path to an html template.\r\n         *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\r\n         *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n         *      be injected into the controller. If any of these dependencies are promises, the widget\r\n         *      will wait for them all to be resolved or one to be rejected before the controller is\r\n         *      instantiated.\r\n         *      If all the promises are resolved successfully, the values of the resolved promises are\r\n         *      injected.\r\n         *\r\n         *      The map object is:\r\n         *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\r\n         *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n         *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\r\n         *        and the return value is treated as the dependency. If the result is a promise, it is\r\n         *        resolved before its value is injected into the controller.\r\n         *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n         *      on the scope of the widget.\r\n         *   - `edit` - `{object}` - Edit modus of the widget.\r\n         *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n         *        on the scope of the widget.\r\n         *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\r\n         *        Default is true.\r\n         *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\r\n         *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\r\n         *        The function have to return a boolean or an promise which can be resolved to a boolean.\r\n         *        The function can use injection.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.widget = function (name, widget) {\r\n            var w = angular.extend({\r\n                reload: false,\r\n                frameless: false\r\n            }, widget);\r\n            if (w.edit) {\r\n                var edit = {\r\n                    reload: true,\r\n                    immediate: false,\r\n                    apply: defaultApplyFunction\r\n                };\r\n                angular.extend(edit, w.edit);\r\n                w.edit = edit;\r\n            }\r\n            widgets[name] = w;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#widgetsPath\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Sets the path to the directory which contains the widgets. The widgets\r\n         * path is used for widgets with a templateUrl which contains the\r\n         * placeholder {widgetsPath}. The placeholder is replaced with the\r\n         * configured value, before the template is loaded, but the template is\r\n         * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\r\n         * The default value of widgetPaths is ''.\r\n         *\r\n         *\r\n         * @param {string} path to the directory which contains the widgets\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.widgetsPath = function (path) {\r\n            widgetsPath = path;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#structure\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Registers a new structure.\r\n         *\r\n         * @param {string} name of the structure\r\n         * @param {object} structure to be registered.\r\n         *\r\n         *   Object properties:\r\n         *\r\n         *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\r\n         *     - `styleClass` - `{string}` - CSS Class of the row.\r\n         *     - `columns` - `{Array.<Object>}` - Columns of the row.\r\n         *       - `styleClass` - `{string}` - CSS Class of the column.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.structure = function (name, structure) {\r\n            structures[name] = structure;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#messageTemplate\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the template for messages.\r\n         *\r\n         * @param {string} template for messages.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.messageTemplate = function (template) {\r\n            messageTemplate = template;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#loadingTemplate\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the template which is displayed as\r\n         * long as the widget resources are not resolved.\r\n         *\r\n         * @param {string} template loading template\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.loadingTemplate = function (template) {\r\n            loadingTemplate = template;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#customWidgetTemplatePath\r\n         * @propertyOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the container template for the widgets\r\n         *\r\n         * @param {string} path to the custom widget template\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.customWidgetTemplatePath = function (templatePath) {\r\n            customWidgetTemplatePath = templatePath;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc service\r\n         * @name adf.dashboard\r\n         * @description\r\n         *\r\n         * The dashboard holds all options, structures and widgets.\r\n         *\r\n         * @property {Array.<Object>} widgets Array of registered widgets.\r\n         * @property {string} widgetsPath Default path for widgets.\r\n         * @property {Array.<Object>} structures Array of registered structures.\r\n         * @property {string} messageTemplate Template for messages.\r\n         * @property {string} loadingTemplate Template for widget loading.\r\n         * * @property {string} customWidgetTemplatePath Changes the container template for the widgets\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.$get = function () {\r\n            var cid = 0;\r\n\r\n            return {\r\n                widgets: widgets,\r\n                widgetsPath: widgetsPath,\r\n                structures: structures,\r\n                messageTemplate: messageTemplate,\r\n                loadingTemplate: loadingTemplate,\r\n                customWidgetTemplatePath: customWidgetTemplatePath,\r\n\r\n                /**\r\n                 * @ngdoc method\r\n                 * @name adf.dashboard#id\r\n                 * @methodOf adf.dashboard\r\n                 * @description\r\n                 *\r\n                 * Creates an ongoing numeric id. The method is used to create ids for\r\n                 * columns and widgets in the dashboard.\r\n                 */\r\n                id: function () {\r\n                    return new Date().getTime() + '-' + (++cid);\r\n                },\r\n\r\n                /**\r\n                 * @ngdoc method\r\n                 * @name adf.dashboard#idEqual\r\n                 * @methodOf adf.dashboard\r\n                 * @description\r\n                 *\r\n                 * Checks if the given ids are equal.\r\n                 *\r\n                 * @param {string} id widget or column id\r\n                 * @param {string} other widget or column id\r\n                 */\r\n                idEquals: function (id, other) {\r\n                    // use toString, because old ids are numbers\r\n                    return ((id) && (other)) && (id.toString() === other.toString());\r\n                }\r\n            };\r\n        };\r\n\r\n    });\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardRow', function ($compile, adfTemplatePath, columnTemplate) {\r\n    \r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        row: '=',\r\n        adfModel: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\r\n      link: function($scope, $element) {\r\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\r\n          $compile(columnTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        }\r\n      }\r\n    };\r\n  });\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfStructurePreview', function(adfTemplatePath) {\r\n\r\n    function adjustRowHeight(container){\r\n      if (container.rows && container.rows.length > 0){\r\n        var height = 100 / container.rows.length;\r\n        angular.forEach(container.rows, function(row){\r\n          row.style = {\r\n            height: height + '%'\r\n          }\r\n\r\n          if (row.columns){\r\n            angular.forEach(row.columns, function(column){\r\n              adjustRowHeight(column);\r\n            });\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    function prepareStructure($scope){\r\n      var structure = angular.copy($scope.structure);\r\n      adjustRowHeight(structure);\r\n      $scope.preview = structure;\r\n    }\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        name: '=',\r\n        structure: '=',\r\n        selected: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'structure-preview.html',\r\n      link: prepareStructure\r\n    };\r\n  });\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf')\r\n    .directive('adfWidgetContent', function ($log, $q, widgetService,\r\n        $compile, $controller, $injector, dashboard, $translate) {\r\n\r\n        function renderError($element, msg) {\r\n            $log.warn(msg);\r\n            $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\r\n        }\r\n\r\n        function compileWidget($scope, $element, currentScope, configChanged) {\r\n            var model = $scope.model;\r\n            var content = $scope.content;\r\n\r\n            var extra = $scope.extra;\r\n\r\n            var newScope = currentScope;\r\n            if (!model) {\r\n                $translate('ADF.ERROR.MODEL_IS_UNDEFINED').then(function (translateMessage) {\r\n                    renderError($element, translateMessage);\r\n                });\r\n            } else if (!content) {\r\n                if (model.title) {\r\n                    $translate('ADF.ERROR.WIDGET_FOR_DEPRECTATED', {\r\n                        title: model.title\r\n                    }).then(function (translateMessage) {\r\n                        renderError($element, translateMessage);\r\n                    });\r\n                } else {\r\n                    $translate('ADF.ERROR.WIDGET_DEPRECTATED').then(function (translateMessage) {\r\n                        renderError($element, translateMessage);\r\n                    });\r\n                }\r\n            } else {\r\n                if (newScope) {\r\n                    var is_menu = newScope.menu !== undefined && newScope.menu !== null;\r\n                    var is_itemsPerPage = newScope.itemsPerPage !== undefined && newScope.itemsPerPage !== null;\r\n                    if (is_menu || is_itemsPerPage || configChanged || !angular.isFunction(newScope.reloadData)) {\r\n                        newScope = renderWidget($scope, $element, currentScope, model, content, extra);\r\n                    } else {\r\n                        newScope.reloadData();\r\n                    }\r\n                } else {\r\n                    newScope = renderWidget($scope, $element, currentScope, model, content, extra);\r\n                }\r\n            }\r\n\r\n            function _getWindowTime(type) {\r\n                if (type === \"custom\") {\r\n                    return {\r\n                        from: newScope.config.windowFilter.from,\r\n                        to: newScope.config.windowFilter.to\r\n                    }\r\n                }\r\n                var from = window.moment().subtract(1, type);\r\n                return {\r\n                    from: from._d\r\n                };\r\n            }\r\n\r\n            if (newScope) {\r\n                if (newScope.config) {\r\n                    newScope.config.getWindowTime = function () {\r\n                        var windowFilter = newScope.config.windowFilter;\r\n                        if (windowFilter && windowFilter.type) {\r\n                            var winTime = _getWindowTime(windowFilter.type);\r\n                            /* jshint ignore:start */\r\n                            if (!window.eval(newScope.config.windowFilter.rawdate)) {\r\n                                for (var key in winTime) {\r\n                                    winTime[key] = window.moment(winTime[key]).format();\r\n                                }\r\n                                winTime['rawdate'] = true;\r\n                            }\r\n                            /* jshint ignore:end */\r\n                            return winTime;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (extra) {\r\n                    newScope.editing = extra.editing ? true : false;\r\n                    newScope.extraData = extra;\r\n                }\r\n            }\r\n            return newScope;\r\n        }\r\n\r\n        function renderWidget($scope, $element, currentScope, model, content, extra) {\r\n            // display loading template\r\n            $element.html(dashboard.loadingTemplate);\r\n\r\n            // create new scope\r\n            var templateScope = $scope.$new();\r\n\r\n            // pass config object to scope\r\n            if (!model.config) {\r\n                model.config = {};\r\n            }\r\n\r\n            templateScope.config = model.config;\r\n            templateScope.editing = extra && extra.editing;\r\n\r\n            if (extra) {\r\n                templateScope.extra = extra;\r\n            }\r\n\r\n            templateScope.selectionManager = (currentScope && currentScope.selectionManager) ? currentScope.selectionManager : undefined;\r\n\r\n            // local injections\r\n            var base = {\r\n                $scope: templateScope,\r\n                widget: model,\r\n                config: model.config\r\n            };\r\n\r\n            // get resolve promises from content object\r\n            var resolvers = {};\r\n            resolvers.$tpl = widgetService.getTemplate(content);\r\n            if (content.resolve) {\r\n                angular.forEach(content.resolve, function (promise, key) {\r\n                    if (angular.isString(promise)) {\r\n                        resolvers[key] = $injector.get(promise);\r\n                    } else {\r\n                        resolvers[key] = $injector.invoke(promise, promise, base);\r\n                    }\r\n                });\r\n            }\r\n\r\n            // resolve all resolvers\r\n            $q.all(resolvers).then(function (locals) {\r\n                angular.extend(locals, base);\r\n\r\n                // pass resolve map to template scope as defined in resolveAs\r\n                if (content.resolveAs) {\r\n                    templateScope[content.resolveAs] = locals;\r\n                }\r\n\r\n                // compile & render template\r\n                var template = locals.$tpl;\r\n                $element.html(template);\r\n                if (content.controller) {\r\n                    var templateCtrl = $controller(content.controller, locals);\r\n                    if (content.controllerAs) {\r\n                        templateScope[content.controllerAs] = templateCtrl;\r\n                    }\r\n                    $element.children().data('$ngControllerController', templateCtrl);\r\n                }\r\n                $compile($element.contents())(templateScope);\r\n            }, function (reason) {\r\n                // handle promise rejection\r\n                var msg = 'ADF.ERROR.COULD_NOT_RESOLVE_ALL_PROMISSES';\r\n                $translate(msg, {\r\n                    reason: (reason ? \": \" + reason : reason)\r\n                }).then(function (translateMessage) {\r\n                    renderError($element, translateMessage);\r\n                });\r\n            });\r\n\r\n            // destroy old scope\r\n            if (currentScope) {\r\n                currentScope.$destroy();\r\n            }\r\n\r\n            return templateScope;\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            scope: {\r\n                model: '=',\r\n                content: '=',\r\n                extra: '='\r\n            },\r\n            link: function ($scope, $element) {\r\n                var currentScope = compileWidget($scope, $element, null);\r\n                var widgetConfigChangedEvt = $scope.$on('widgetConfigChanged', function () {\r\n                    currentScope = compileWidget($scope, $element, currentScope, true);\r\n                });\r\n\r\n                var widgetReloadEvt = $scope.$on('widgetReload', function () {\r\n                    currentScope = compileWidget($scope, $element, currentScope, false);\r\n                });\r\n\r\n                $scope.$on('destroy', function () {\r\n                    widgetConfigChangedEvt();\r\n                    widgetReloadEvt();\r\n                });\r\n            }\r\n        };\r\n    });\n\r\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n/**\r\n * The widget service provide helper functions to render widgets and their content.\r\n */\r\nangular.module('adf')\r\n  .factory('widgetService', function($http, $q, $sce, $templateCache, dashboard) {\r\n    \r\n\r\n    function parseUrl(url) {\r\n      var parsedUrl = url;\r\n      if (url.indexOf('{widgetsPath}') >= 0) {\r\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\r\n                .replace('//', '/');\r\n        if (parsedUrl.indexOf('/') === 0) {\r\n          parsedUrl = parsedUrl.substring(1);\r\n        }\r\n      }\r\n      return parsedUrl;\r\n    }\r\n\r\n    var exposed = {};\r\n\r\n    exposed.getTemplate = function(widget){\r\n      var deferred = $q.defer();\r\n\r\n      if (widget.template) {\r\n        deferred.resolve(widget.template);\r\n      } else if (widget.templateUrl) {\r\n        // try to fetch template from cache\r\n        var tpl = $templateCache.get(widget.templateUrl);\r\n        if (tpl) {\r\n          deferred.resolve(tpl);\r\n        } else {\r\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\r\n          $http.get(url)\r\n               .success(function(response) {\r\n                 // put response to cache, with unmodified url as key\r\n                 $templateCache.put(widget.templateUrl, response);\r\n                 deferred.resolve(response);\r\n               })\r\n               .error(function() {\r\n                 deferred.reject('could not load template');\r\n               });\r\n        }\r\n      }\r\n\r\n      return deferred.promise;\r\n    };\r\n\r\n    return exposed;\r\n  });\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf')\r\n    .directive('adfWidget', function ($injector, $q, $log, $uibModal, $rootScope, $interval, dashboard, adfTemplatePath, Filter) {\r\n        function preLink($scope) {\r\n            var definition = $scope.definition;\r\n\r\n            if (definition) {\r\n                var w = dashboard.widgets[definition.type];\r\n                if (w) {\r\n                    // pass title\r\n                    if (!definition.title) {\r\n                        definition.title = w.title;\r\n                    }\r\n\r\n                    if (!definition.titleTemplateUrl) {\r\n                        definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\r\n                        if (w.titleTemplateUrl) {\r\n                            definition.titleTemplateUrl = w.titleTemplateUrl;\r\n                        }\r\n                    }\r\n\r\n                    if (!definition.editTemplateUrl) {\r\n                        definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\r\n                        if (w.editTemplateUrl) {\r\n                            definition.editTemplateUrl = w.editTemplateUrl;\r\n                        }\r\n                    }\r\n\r\n                    if (!definition.titleTemplateUrl) {\r\n                        definition.frameless = w.frameless;\r\n                    }\r\n\r\n                    if (!definition.styleClass) {\r\n                        definition.styleClass = w.styleClass;\r\n                    }\r\n\r\n                    // set id for sortable\r\n                    if (!definition.wid) {\r\n                        definition.wid = dashboard.id();\r\n                    }\r\n\r\n                    // pass copy of widget to scope\r\n                    $scope.widget = angular.copy(w);\r\n\r\n                    // create config object\r\n                    var config = definition.config;\r\n                    if (config) {\r\n                        if (angular.isString(config)) {\r\n                            config = angular.fromJson(config);\r\n                        }\r\n                    } else {\r\n                        config = {};\r\n                    }\r\n\r\n                    if (!config.reloadPeriod) {\r\n                        config.reloadPeriod = \"0\";\r\n                    }\r\n\r\n                    if (typeof $scope.widget.show_modal_footer === \"undefined\") {\r\n                        $scope.widget.show_modal_footer = true;\r\n                    }\r\n\r\n                    if (typeof $scope.widget.show_reload_config === \"undefined\") {\r\n                        $scope.widget.show_reload_config = true;\r\n                    }\r\n\r\n                    // pass config to scope\r\n                    $scope.config = config;\r\n\r\n                    // collapse exposed $scope.widgetState property\r\n                    if (!$scope.widgetState) {\r\n                        $scope.widgetState = {};\r\n                        $scope.widgetState.isCollapsed = (w.collapsed === true) ? w.collapsed : false;\r\n                    }\r\n\r\n                } else {\r\n                    $log.warn('could not find widget ' + definition.type);\r\n                }\r\n            } else {\r\n                $log.debug('definition not specified, widget was probably removed');\r\n            }\r\n        }\r\n\r\n        function postLink($scope, $element) {\r\n            var definition = $scope.definition;\r\n            if (!definition) {\r\n                $log.debug('widget not found');\r\n                return;\r\n            }\r\n            if (!$scope.config) {\r\n                $scope.config = {};\r\n            }\r\n\r\n            var config = $scope.config;\r\n\r\n            // bind close function\r\n            var deleteWidget = function () {\r\n                var column = $scope.col;\r\n                if (column) {\r\n                    var index = column.widgets.indexOf(definition);\r\n                    if (index >= 0) {\r\n                        column.widgets.splice(index, 1);\r\n                    }\r\n                }\r\n                $element.remove();\r\n                $rootScope.$broadcast('adfWidgetRemovedFromColumn');\r\n            };\r\n\r\n            $scope.remove = function () {\r\n                if ($scope.options.enableConfirmDelete) {\r\n                    var deleteScope = $scope.$new();\r\n\r\n                    var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\r\n                    if (definition.deleteTemplateUrl) {\r\n                        deleteTemplateUrl = definition.deleteTemplateUrl;\r\n                    }\r\n                    var opts = {\r\n                        scope: deleteScope,\r\n                        templateUrl: deleteTemplateUrl,\r\n                        backdrop: 'static'\r\n                    };\r\n                    var instance = $uibModal.open(opts);\r\n\r\n                    deleteScope.closeDialog = function () {\r\n                        instance.close();\r\n                        deleteScope.$destroy();\r\n                    };\r\n                    deleteScope.deleteDialog = function () {\r\n                        deleteWidget();\r\n                        deleteScope.closeDialog();\r\n                    };\r\n                } else {\r\n                    deleteWidget();\r\n                }\r\n            };\r\n\r\n\r\n            $scope.print = function () {\r\n                if (!$scope.editMode) {\r\n                    $scope.$broadcast('widgetPrint');\r\n                }\r\n            }\r\n\r\n            $scope.isExecuteOperationEnabled = function () {\r\n                // if ($scope.selectionManager.totalSelected() > 0)\r\n                //     return true;\r\n                if (config.entityKey)\r\n                    return true;\r\n                var filter = config.filter;\r\n                if (typeof filter === \"string\") {\r\n                    return filter.length > 0;\r\n                }\r\n                if (typeof filter === \"object\") {\r\n                    return filter.value.length > 2 && filter.oql;\r\n                }\r\n                return false;\r\n            }\r\n\r\n            $scope.executeOperation = function () {\r\n                if (!$scope.editMode) {\r\n                    // if ($scope.selectionManager.totalSelected() > 0) {\r\n                    //     var selectedItems = [];\r\n                    //     angular.forEach($scope.selectionManager.currentSelection, function(data, key) {\r\n                    //         selectedItems.push({ key: key, value: data });\r\n                    //     });\r\n                    //     $scope.$parent.$broadcast('widgetExecuteOperation', { 'selectedItems': selectedItems });\r\n                    // } else {\r\n                    $scope.$parent.$broadcast('widgetExecuteOperation');\r\n                    // }\r\n                }\r\n            };\r\n\r\n            // bind reload function\r\n            var stopReloadTimeout;\r\n\r\n            function _setReloadTimeout() {\r\n                if (config && config.reloadPeriod && config.reloadPeriod !== \"0\") {\r\n                    if (angular.isDefined(stopReloadTimeout)) {\r\n                        $interval.cancel(stopReloadTimeout)\r\n                        stopReloadTimeout = undefined;\r\n                    };\r\n                    stopReloadTimeout = $interval($scope.reload, (config.reloadPeriod * 1000));\r\n                }\r\n            }\r\n\r\n            $scope.reload = function (completeReload) {\r\n                if (completeReload) {\r\n                    $scope.$broadcast('widgetReload', completeReload);\r\n                } else {\r\n                    $scope.$broadcast('widgetReload');\r\n                }\r\n\r\n                _setReloadTimeout();\r\n            };\r\n\r\n            // verificacion de periodo de refresco\r\n            _setReloadTimeout();\r\n\r\n            $element.on('$destroy', function () {\r\n                $interval.cancel(stopReloadTimeout);\r\n            });\r\n\r\n            $scope.filter = {\r\n                value: \"\"\r\n            };\r\n            $scope.sort = {\r\n                value: \"\",\r\n                direction: \"\"\r\n            };\r\n\r\n            $scope.toggleAdvanced = 1;\r\n            var filter = config.filter;\r\n            if (typeof filter === \"object\" && filter.oql && filter.oql.length > 2) {\r\n                $scope.search = {\r\n                    oql: filter.oql,\r\n                    json: filter.value\r\n                };\r\n                $scope.toggleAdvanced = 0;\r\n            } else if (typeof filter === \"string\") {\r\n                $scope.search = {\r\n                    quick: filter\r\n                };\r\n                $scope.toggleAdvanced = 1;\r\n            } else if (typeof filter === \"object\" && filter.fields) {\r\n                $scope.search = {\r\n                    customFilter: filter.fields\r\n                };\r\n                $scope.search.fields = [];\r\n                angular.forEach(filter.fields, function (v, key) {\r\n                    $scope.search.fields.push(v.name);\r\n                });\r\n                $scope.toggleAdvanced = 2;\r\n            } else {\r\n                $scope.search = {\r\n                    quick: filter = \"\"\r\n                };\r\n            }\r\n\r\n            $scope.toggleFilter = function (advanced) {\r\n                $scope.toggleAdvanced = advanced;\r\n            };\r\n            $scope.filterAvailable = false;\r\n            $scope.showFilter = function () {\r\n                $scope.filterAvailable = $scope.filterAvailable === true ? false : true;\r\n            };\r\n\r\n            $scope.showFinalFilter = false;\r\n\r\n            $scope.launchSearching = function () {\r\n                var widget = {\r\n                    definition: definition,\r\n                    element: $element\r\n                };\r\n\r\n                $rootScope.$broadcast('adfLaunchSearchingFromWidget', widget, $scope.config.filter);\r\n                $scope.reload(true);\r\n            }\r\n            $scope.addCustomFilter = function (key) {\r\n                $scope.search.customFilter = $scope.search.customFilter ? $scope.search.customFilter : [];\r\n                $scope.search.customFilter.push({\r\n                    name: key,\r\n                    value: ''\r\n                });\r\n            }\r\n\r\n            $scope.launchCustomFilter = function () {\r\n                if ($scope.search.customFilter && $scope.search.customFilter.length > 0) {\r\n                    $scope.search.oql = $scope.search.json = '';\r\n\r\n                    $scope.config.filter = {\r\n                        value: {\r\n                            and: []\r\n                        },\r\n                        fields: $scope.search.customFilter\r\n                    }\r\n                    angular.forEach($scope.search.customFilter, function (v, key) {\r\n                        if (v.value) {\r\n                            var like = {};\r\n                            like[v.name] = v.value;\r\n                            $scope.config.filter.value.and.push({\r\n                                'like': like\r\n                            });\r\n                        }\r\n\r\n                    });\r\n                    $scope.config.filter.value = JSON.stringify($scope.config.filter.value);\r\n                }\r\n\r\n                $scope.launchSearching();\r\n            }\r\n\r\n\r\n\r\n            $scope.deleteFilter = function (value, model) {\r\n                angular.forEach($scope.search.customFilter, function (v, key) {\r\n                    if (v.name === value) {\r\n                        $scope.search.customFilter.splice(key, 1);\r\n                    }\r\n                });\r\n                if ($scope.search.customFilter.length === 0) {\r\n                    $scope.config.filter = {};\r\n                }\r\n            };\r\n\r\n\r\n            $scope.launchSearchingAdv = function () {\r\n                $scope.search.quick = '';\r\n                if ($scope.search.json === '' || $scope.search.json === '{}' || (!angular.isString($scope.search.json) && Object.keys($scope.search.json).length === 0)) {\r\n                    $scope.config.filter = {\r\n                        oql: '',\r\n                        value: ''\r\n                    };\r\n                } else {\r\n                    $scope.config.filter = {\r\n                        oql: $scope.search.oql,\r\n                        value: $scope.search.json\r\n                    };\r\n                }\r\n                $scope.launchSearching();\r\n\r\n            }\r\n\r\n            $scope.applyFilter = function (event) {\r\n                $scope.launchSearching();\r\n            }\r\n\r\n            $scope.launchSearchingQuick = function () {\r\n                $scope.search.oql = $scope.search.json = '';\r\n                $scope.config.filter = $scope.search.quick;\r\n                $scope.launchSearching();\r\n            }\r\n\r\n            var windowTimeChanged = $scope.$on('onWindowTimeChanged', function (event, timeObj) {\r\n                $scope.config.windowFilter = timeObj ? timeObj : (config.windowFilter ? {} : timeObj);\r\n                var widget = {\r\n                    definition: definition,\r\n                    element: $element\r\n                }\r\n                $rootScope.$broadcast('adfWindowTimeChangedFromWidget', widget, $scope.config.windowFilter);\r\n                $scope.reload();\r\n            });\r\n\r\n            $scope.enter = function (event) {\r\n                var keycode = (event.keyCode ? event.keyCode : event.which);\r\n                if (keycode === 13) {\r\n                    if ($scope.toggleAdvanced === 0)\r\n                        $scope.launchSearchingAdv();\r\n                    if ($scope.toggleAdvanced === 1)\r\n                        $scope.launchSearchingQuick();\r\n                    if ($scope.toggleAdvanced === 2)\r\n                        $scope.launchCustomFilter();\r\n\r\n                }\r\n                if (keycode === 19) {\r\n                    $scope.showFinalFilter = $scope.showFinalFilter === false ? true : false;\r\n                }\r\n            }\r\n\r\n\r\n            $scope.customSelectors = [];\r\n            $scope.getCustomSelectors = function () {\r\n                config.widgetSelectors().findFields(\"\").then(function (fields) {\r\n                    $scope.customSelectors = fields;\r\n                    $scope.$apply();\r\n                }).catch(function (err) {\r\n                    $log.error(err);\r\n                });\r\n\r\n            }\r\n\r\n            $scope.customFilter = [];\r\n            $scope.getcustomFilter = function () {\r\n                config.widgetSelectors().findFields(\"\").then(function (fields) {\r\n                    $scope.customFilter = fields;\r\n                    $scope.$apply();\r\n                }).catch(function (err) {\r\n                    $log.error(err);\r\n                });\r\n\r\n            }\r\n\r\n            $scope.ifCustomFilter = function () {\r\n                return $scope.customSelectors && config.sort && $scope.definition.type === 'FullDevicesList' && $scope.toggleAdvanced === 2;\r\n            }\r\n\r\n            $scope.showCustomFields = function () {\r\n                return $scope.definition.type === 'FullDevicesList' && $scope.toggleAdvanced === 2 && $scope.search.customFilter && $scope.filterAvailable && !$scope.editMode;\r\n            }\r\n\r\n            $scope.changeDirection = function () {\r\n                var direction = config.sort.direction;\r\n                if (direction === 'DESCENDING') {\r\n                    $scope.config.sort.direction = 'ASCENDING'\r\n                } else if (direction === 'ASCENDING') {\r\n                    $scope.config.sort.direction = 'DESCENDING'\r\n                }\r\n                $scope.reload();\r\n            }\r\n\r\n            $scope.debugQuery = function () {\r\n                Filter.parseQuery($scope.search.oql || '')\r\n                    .then(function (data) {\r\n                        //$scope.elementos = data;\r\n                        $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\r\n                        $scope.unknownWords = '';\r\n                        $scope.filter.error = null;\r\n                    })\r\n                    .catch(function (err) {\r\n                        $scope.filter.error = err;\r\n                        // Tratar el error\r\n                    });\r\n\r\n            }\r\n\r\n            $scope.autocomplete_options = function () {\r\n                var autocomplete_options = {\r\n                    suggest: Filter.suggest_field_delimited,\r\n                    customSelectors: config.widgetSelectors()\r\n                };\r\n\r\n                return autocomplete_options;\r\n\r\n            };\r\n\r\n            // Multiple selection\r\n            $scope.selectedItems = {};\r\n\r\n            // Gestor de seleccion\r\n            $scope.selectionManager = {\r\n                currentSelection: $scope.selectedItems,\r\n                isSelected: function (key, obj) {\r\n                    if ($scope.selectedItems[key] && !angular.isUndefined(obj)) {\r\n                        $scope.selectedItems[key].data = obj;\r\n                    }\r\n\r\n                    return $scope.selectedItems[key] ? true : false;\r\n                },\r\n                totalSelected: function () {\r\n                    return Object.keys($scope.selectedItems).length;\r\n                }\r\n            };\r\n\r\n            $scope.manageSelectedItems = function () {\r\n                var selectionScope = $scope.$new();\r\n\r\n                selectionScope.selectionConfig = config.selectionConfig;\r\n\r\n                selectionScope.selectedItems = [];\r\n                angular.forEach($scope.selectedItems, function (value, key) {\r\n                    selectionScope.selectedItems.push({\r\n                        key: key,\r\n                        value: value\r\n                    });\r\n                });\r\n\r\n                selectionScope.currentSelection = {\r\n                    selected: selectionScope.selectedItems\r\n                };\r\n\r\n                var manageItemsSelectedTemplate = adfTemplatePath + 'widget-selection.html';\r\n                var opts = {\r\n                    scope: selectionScope,\r\n                    templateUrl: manageItemsSelectedTemplate,\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    animation: true\r\n                };\r\n\r\n                var instance = $uibModal.open(opts);\r\n\r\n                selectionScope.restoreSelection = function () {\r\n                    selectionScope.currentSelection = {\r\n                        selected: selectionScope.selectedItems\r\n                    };\r\n                };\r\n\r\n                selectionScope.clearSelection = function () {\r\n                    selectionScope.currentSelection.selected = [];\r\n                };\r\n\r\n                // Cierra sy guarda los datos de nueva selección\r\n                selectionScope.applyFilter = function (type) {\r\n                    var customOql = selectionScope.selectionConfig.filterAction(selectionScope.currentSelection.selected, type);\r\n\r\n                    if (!angular.isUndefined(customOql) && customOql !== null) {\r\n                        $scope.toggleAdvanced = 0;\r\n                        Filter.parseQuery(customOql).then(function (data) {\r\n                            $scope.search.oql = customOql;\r\n                            $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\r\n                            $scope.unknownWords = '';\r\n                            $scope.filter.error = null;\r\n\r\n                            $scope.launchSearchingAdv();\r\n                        }).catch(function (err) {\r\n                            $scope.filter.error = err;\r\n                        });\r\n                    }\r\n                };\r\n\r\n                selectionScope.executeOperation = function (operationType) {\r\n                    if (!$scope.editMode) {\r\n                        $scope.$parent.$broadcast('widgetExecuteOperation', {\r\n                            'selectedItems': selectionScope.currentSelection.selected,\r\n                            'type': operationType\r\n                        });\r\n                    }\r\n                };\r\n\r\n                // Cierra sy guarda los datos de nueva selección\r\n                selectionScope.saveChangesDialog = function () {\r\n                    var finalSelection = {};\r\n                    angular.forEach(selectionScope.currentSelection.selected, function (data, idx) {\r\n                        finalSelection[data.key] = {\r\n                            data: data.value.data,\r\n                            visible: data.value.visible\r\n                        };\r\n                    });\r\n\r\n                    $scope.selectedItems = angular.copy(finalSelection);\r\n                    $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n\r\n                    $scope.selectionManager.lastItem = {};\r\n                    $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n\r\n                    instance.close();\r\n                    selectionScope.$destroy();\r\n                };\r\n\r\n                // Cierra sin realizar ninguna acción\r\n                selectionScope.closeDialog = function () {\r\n                    instance.close();\r\n                    selectionScope.$destroy();\r\n                };\r\n            };\r\n\r\n\r\n            // bind edit function\r\n            $scope.edit = function () {\r\n                var editScope = $scope.$new();\r\n                editScope.definition = angular.copy(definition);\r\n\r\n                var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\r\n                if (definition.editTemplateUrl) {\r\n                    adfEditTemplatePath = definition.editTemplateUrl;\r\n                }\r\n\r\n                var opts = {\r\n                    scope: editScope,\r\n                    templateUrl: adfEditTemplatePath,\r\n                    backdrop: 'static',\r\n                    size: 'lg'\r\n                };\r\n\r\n                var instance = $uibModal.open(opts);\r\n\r\n                editScope.closeDialog = function () {\r\n                    instance.close();\r\n                    editScope.$destroy();\r\n                };\r\n\r\n                // TODO create util method\r\n                function createApplyPromise(result) {\r\n                    var promise;\r\n                    if (typeof result === 'boolean') {\r\n                        var deferred = $q.defer();\r\n                        if (result) {\r\n                            deferred.resolve();\r\n                        } else {\r\n                            deferred.reject();\r\n                        }\r\n                        promise = deferred.promise;\r\n                    } else {\r\n                        promise = $q.when(result);\r\n                    }\r\n                    return promise;\r\n                }\r\n\r\n                editScope.saveDialog = function () {\r\n                    // clear validation error\r\n                    editScope.validationError = null;\r\n\r\n                    // build injection locals\r\n                    var widget = $scope.widget;\r\n\r\n                    // create a default apply method for widgets\r\n                    // without edit mode\r\n                    // see issue https://goo.gl/KHPQLZ\r\n                    var applyFn;\r\n                    if (widget.edit) {\r\n                        applyFn = widget.edit.apply;\r\n                    } else {\r\n                        applyFn = function () {\r\n                            return true;\r\n                        };\r\n                    }\r\n\r\n                    // injection locals\r\n                    var locals = {\r\n                        widget: widget,\r\n                        definition: editScope.definition,\r\n                        config: editScope.definition.config\r\n                    };\r\n\r\n                    // invoke apply function and apply if success\r\n                    var result = $injector.invoke(applyFn, applyFn, locals);\r\n                    createApplyPromise(result).then(function () {\r\n                        definition.title = editScope.definition.title;\r\n                        angular.extend(definition.config, editScope.definition.config);\r\n\r\n                        editScope.closeDialog();\r\n\r\n                        if (widget.edit && widget.edit.reload) {\r\n                            // reload content after edit dialog is closed\r\n                            $scope.$broadcast('widgetConfigChanged');\r\n                        }\r\n                    }, function (err) {\r\n                        if (err) {\r\n                            editScope.validationError = err;\r\n                        } else {\r\n                            editScope.validationError = 'VALIDATION_DURING_APPLY_FAILED';\r\n                        }\r\n                    });\r\n                };\r\n\r\n            };\r\n\r\n\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            templateUrl: dashboard.customWidgetTemplatePath ? dashboard.customWidgetTemplatePath : adfTemplatePath + 'widget.html',\r\n            scope: {\r\n                definition: '=',\r\n                col: '=column',\r\n                editMode: '=',\r\n                options: '=',\r\n                widgetState: '='\r\n            },\r\n            controller: function ($scope) {\r\n                var adfDashboardCollapseExpand = $scope.$on('adfDashboardCollapseExpand', function (event, args) {\r\n                    $scope.widgetState.isCollapsed = args.collapseExpandStatus;\r\n                });\r\n\r\n                var adfWidgetEnterEditMode = $scope.$on('adfWidgetEnterEditMode', function (event, widget) {\r\n                    if (dashboard.idEquals($scope.definition.wid, widget.wid)) {\r\n                        $scope.edit();\r\n                    }\r\n                });\r\n\r\n                var adfIsEditMode = $scope.$on('adfIsEditMode', function (event, widget) {\r\n                    $scope.editing = true;\r\n                });\r\n\r\n                var adfDashboardChanged = $scope.$on('adfDashboardChanged', function (event, widget) {\r\n                    $scope.editing = false;\r\n                });\r\n\r\n                var adfDashboardEditsCancelled = $scope.$on('adfDashboardEditsCancelled', function (event, widget) {\r\n                    $scope.editing = false;\r\n                });\r\n\r\n                $scope.widgetClasses = function (w, definition) {\r\n                    var classes = definition.styleClass || '';\r\n                    // w is undefined, if the type of the widget is unknown\r\n                    // see issue #216\r\n                    if (!w || !w.frameless || $scope.editMode) {\r\n                        classes += ' panel panel-default';\r\n                    }\r\n                    return classes;\r\n                };\r\n\r\n                $scope.openFullScreen = function () {\r\n                    var definition = $scope.definition;\r\n                    var fullScreenScope = $scope.$new();\r\n                    var opts = {\r\n                        scope: fullScreenScope,\r\n                        templateUrl: adfTemplatePath + 'widget-fullscreen.html',\r\n                        size: definition.modalSize || 'lg', // 'sm', 'lg'\r\n                        backdrop: 'static',\r\n                        windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\r\n                    };\r\n\r\n                    var instance = $uibModal.open(opts);\r\n                    fullScreenScope.closeDialog = function () {\r\n                        instance.close();\r\n                        fullScreenScope.$destroy();\r\n                    };\r\n                };\r\n\r\n                $scope.openFilter = function () {\r\n\r\n                }\r\n\r\n                $scope.openAboutScreen = function (size) {\r\n                    size = 'md';\r\n                    var modalInstance = $uibModal.open({\r\n                        animation: true,\r\n                        templateUrl: 'widgetAboutModal.html',\r\n                        controller: function ($scope, $uibModalInstance, information) {\r\n                            $scope.about = {};\r\n                            $scope.about.info = information;\r\n                            $scope.ok = function () {\r\n                                $uibModalInstance.close();\r\n                            };\r\n                        },\r\n                        'size': size,\r\n                        resolve: {\r\n                            information: function () {\r\n                                return $scope.config.about;\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    modalInstance.result.then(function (selectedItem) {\r\n                        $scope.selected = selectedItem;\r\n                    }, function () {\r\n                        $log.info('Modal dismissed at: ' + new Date());\r\n                    });\r\n                };\r\n\r\n                $scope.saveWidgetScreen = function (wId) {\r\n                    $scope.$emit('generateSnapshot', {\r\n                        'objectSelector': '.widget_' + wId,\r\n                        'fileName': 'capture_' + new Date().getTime()\r\n                    });\r\n                };\r\n\r\n                var onWindowTimeChanged = function (timeObj) {\r\n                    var filter = {\r\n                        and: []\r\n                    };\r\n                    if (timeObj && timeObj.from) {\r\n                        filter.and.push({\r\n                            gt: {\r\n                                operationDate: timeObj.from\r\n                            }\r\n                        });\r\n\r\n                        if (timeObj.to) {\r\n                            filter.and.push({\r\n                                lt: {\r\n                                    operationDate: timeObj.to\r\n                                }\r\n                            });\r\n                        }\r\n                    } else {\r\n                        filter = null;\r\n                    }\r\n                    return filter;\r\n                }\r\n\r\n                var createQuickFilter = function (fieldsQuickSearch, filter) {\r\n                    var _filter = {\r\n                        or: []\r\n                    };\r\n                    var criteria;\r\n                    fieldsQuickSearch.forEach(function (field) {\r\n                        criteria = {};\r\n                        criteria[field.operator] = {};\r\n                        criteria[field.operator][field.name] = $scope.config.filter;\r\n                        _filter.or.push(criteria);\r\n                    });\r\n                    return _filter;\r\n                }\r\n\r\n                $scope.downloadCsv = function () {\r\n                    var columns = $scope.config.columns;\r\n                    var scope_filter = $scope.config.filter;\r\n                    var extra_filter;\r\n                    var final_filter = {};\r\n                    var order = $scope.config.sort ? $scope.config.sort : undefined;\r\n                    if ($scope.config.windowFilter) {\r\n                        var window_filter = onWindowTimeChanged($scope.config.windowFilter);\r\n                        if (window_filter && window_filter.and) {\r\n                            extra_filter = {\r\n                                and: window_filter.and\r\n                            };\r\n                        }\r\n                    }\r\n                    var filter;\r\n                    if (scope_filter.value && scope_filter.value.length > 4) {\r\n                        filter = JSON.parse(scope_filter.value);\r\n                    } else if (typeof scope_filter === 'string' && scope_filter.trim() !== '') {\r\n                        filter = createQuickFilter($scope.config.fieldsQuickSearch, scope_filter);\r\n                    }\r\n                    if (extra_filter) {\r\n                        if (filter) {\r\n                            final_filter = {\r\n                                and: [extra_filter, filter]\r\n                            };\r\n                        } else {\r\n                            final_filter = extra_filter;\r\n                        }\r\n                    } else {\r\n                        final_filter = filter;\r\n                    }\r\n                    $scope.$broadcast('downloadCsv', {\r\n                        'columns': columns,\r\n                        'filter': final_filter,\r\n                        'order': order\r\n                    });\r\n                };\r\n\r\n                $scope.generateQR = function () {\r\n                    $scope.$broadcast('generateQR');\r\n                };\r\n\r\n                var addItemToSelection = $scope.$on('addItemToSelection', function (event, item) {\r\n                    if (!$scope.selectedItems[item.key]) {\r\n                        $scope.selectedItems[item.key] = {\r\n                            data: item.data,\r\n                            visible: item.visible\r\n                        };\r\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n                        item.isSelected = true;\r\n                        $scope.selectionManager.lastItem = item;\r\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n                    }\r\n\r\n                });\r\n\r\n                var removeItemFromSelection = $scope.$on('removeItemFromSelection', function (event, item) {\r\n                    if ($scope.selectedItems[item.key]) {\r\n                        delete $scope.selectedItems[item.key];\r\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n                        item.isSelected = false;\r\n                        $scope.selectionManager.lastItem = item;\r\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n                    }\r\n                });\r\n\r\n                $scope.$on('$destroy', function () {\r\n                    adfDashboardCollapseExpand();\r\n                    adfWidgetEnterEditMode();\r\n                    adfIsEditMode();\r\n                    adfDashboardChanged();\r\n                    adfDashboardEditsCancelled();\r\n                    addItemToSelection();\r\n                    removeItemFromSelection();\r\n                });\r\n            },\r\n            compile: function () {\r\n\r\n                /**\r\n                 * use pre link, because link of widget-content\r\n                 * is executed before post link widget\r\n                 */\r\n                return {\r\n                    pre: preLink,\r\n                    post: postLink\r\n                };\r\n            }\r\n        };\r\n\r\n    });\nangular.module(\"adf\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"../src/templates/dashboard-column.html\",\"<div adf-id={{column.cid}} class=column ng-class=column.styleClass ng-model=column.widgets> <adf-widget ng-repeat=\\\"definition in column.widgets\\\" definition=definition column=column edit-mode=editMode options=options widget-state=widgetState>  </adf-widget></div> \");\n$templateCache.put(\"../src/templates/dashboard-edit.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h3 class=modal-title translate>ADF.DASHBOARD.TITLE.EDIT.DASHBOARD</h3> </div> <div class=modal-body> <form role=form name=form novalidate> <div class=\\\"form-group col-xs-12 col-md-6\\\"> <label for=dashboardTitle translate>ADF.COMMON.TITLE</label> <input type=text class=\\\"form-control text-primary\\\" id=dashboardTitle ng-model=copy.title required ng-init=\\\"copy.title=(copy.title | translate)\\\"> </div> <div class=\\\"form-group col-xs-12 col-md-6\\\"> <label for=dashboardDescription translate>ADF.DASHBOARD.LABEL.DESCRIPTION</label> <input type=text class=\\\"form-control text-primary\\\" id=dashboardDescription ng-init=\\\"copy.description=(copy.description | translate)\\\" ng-model=copy.description> </div> <div class=\\\"form-group col-xs-12 col-md-6\\\"> <label for=icon translate>ADF.DASHBOARD.LABEL.ICON</label> <ui-select tagging=tagTransform id=icon ng-model=copy.icon theme=bootstrap allow-clear=false required=true on-select=selectIcon($select.selected) title=\\\"{{\\'ADF.WIDGET.TITLE.CHOOSE_ICON\\' | translate}}\\\"> <ui-select-match placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.ICON\\' | translate}}\\\" allow-clear=false> <i class=\\\"fa {{$select.selected}} fa-2x\\\"></i> <span>{{$select.selected}}</span> </ui-select-match> <ui-select-choices class=oux-icon-selector repeat=\\\"iconTmp in availableIcons | filter: $select.search\\\"> <i class=\\\"fa fa-4x\\\" ng-class=iconTmp title={{iconTmp}}></i> <br> <span ng-bind-html=\\\"iconTmp| highlight: $select.search\\\"></span> </ui-select-choices> </ui-select> </div> <div class=\\\"form-group col-xs-12\\\"> <label translate>ADF.DASHBOARD.LABEL.EDIT_DASHBOARD_STRUCTURE_LABEL</label> <div class=row ng-init=\\\"splitted = split(structures, 3)\\\"> <div class=col-lg-4 ng-repeat=\\\"structureColumn in splitted\\\"> <div class=radio ng-repeat=\\\"(key, structure) in structureColumn\\\"> <div class=row> <div class=col-sm-2> <label> <input type=radio value={{key}} ng-model=model.structure ng-change=\\\"changeStructure(key, structure)\\\"> </label> </div> <div class=col-sm-9 ng-click=\\\"changeStructure(key, structure)\\\"> <adf-structure-preview name=key structure=structure selected=\\\"model.structure == key\\\"> </adf-structure-preview> </div> </div> </div> </div> </div> </div> </form> </div> <div class=modal-footer> <div class=col-xs-12> <button type=submit class=\\\"btn btn-primary\\\" ng-click=closeDialog() ng-disabled=form.$invalid translate>ADF.COMMON.CLOSE</button> </div> </div> \");\n$templateCache.put(\"../src/templates/dashboard-row.html\",\"<div ng-class=row.styleClass ng-style=row.style class=ogux-row>  </div>\");\n$templateCache.put(\"../src/templates/dashboard-title.html\",\"<div class=row style=padding:0px;> <div class=col-xs-12 ng-class=\\\"hideButtons?\\'col-md-12\\':\\'col-md-5\\'\\\"> <span ng-if=model.icon id=idDashboardIcon class=\\\"fa fa-2x\\\" ng-class=model.icon></span> <span id=idDashboardTitle class=\\\"fa-2x text-primary\\\">{{model.title | translate}}</span> <span ng-if=model.description id=idDashboardDescription>{{model.description | translate}}</span> </div> <div class=\\\"col-xs-12 col-md-7 text-right\\\" ng-if=!hideButtons> <a href ng-if=editMode title=\\\"{{ \\'ADF.DASHBOARD.TITLE.ADD\\' | translate }}\\\" ng-click=addWidgetDialog() class=\\\"btn btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-plus\\\" aria-hidden=true></i> {{\\'ADF.DASHBOARD.TITLE.ADD\\' | translate}} </a> <a href ng-if=editMode title=\\\"{{ \\'ADF.DASHBOARD.TITLE.CONFIGURATION\\' | translate }}\\\" ng-click=editDashboardDialog() class=\\\"btn btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-cog\\\"></i> {{\\'ADF.DASHBOARD.TITLE.CONFIGURATION\\' | translate}} </a> <a href ng-if=editMode title=\\\"{{ \\'ADF.DASHBOARD.TITLE.UNDO\\' | translate }}\\\" ng-click=cancelEditMode() class=\\\"btn btn-warning btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-close\\\"></i> {{\\'ADF.DASHBOARD.TITLE.UNDO\\' | translate}} </a> <a href ng-if=\\\"options.editable && !editMode && !model.temporal\\\" title=\\\"{{\\'ADF.DASHBOARD.TITLE.EDIT.MODE\\' | translate }}\\\" ng-click=toggleEditMode() class=\\\"btn btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-pencil-square-o\\\"></i> {{\\'ADF.DASHBOARD.TITLE.EDIT.MODE\\' | translate}} </a> <a href ng-if=\\\"options.editable && editMode\\\" title=\\\"{{\\'ADF.DASHBOARD.TITLE.SAVE\\' | translate)}}\\\" ng-click=toggleEditMode() class=\\\"btn btn-success btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-save\\\"></i> {{\\'ADF.DASHBOARD.TITLE.SAVE\\' | translate}} </a> </div> </div> \");\n$templateCache.put(\"../src/templates/dashboard.html\",\"<div class=dashboard-container> <div ng-include src=model.titleTemplateUrl></div> <div class=dashboard x-ng-class=\\\"{\\'edit\\' : editMode}\\\" style=\\\"padding: 0px;margin: 0px;\\\"> <adf-dashboard-row row=row adf-model=model options=options ng-repeat=\\\"row in model.rows\\\" edit-mode=editMode continuous-edit-mode=continuousEditMode> </adf-dashboard-row></div> </div>\");\n$templateCache.put(\"../src/templates/structure-preview.html\",\"<div class=structure-preview ng-class=\\\"{selected: selected}\\\"> <h4>{{name}}</h4> <adf-dashboard-row ng-repeat=\\\"row in preview.rows\\\" row=row> </adf-dashboard-row></div> \");\n$templateCache.put(\"../src/templates/widget-add.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title translate>ADF.WIDGET.TITLE.ADD_HEADER</h4> </div> <div class=modal-body>  <div ng-if=createCategories> <uib-accordion ng-init=\\\"categorized = createCategories(widgets)\\\"> <div uib-accordion-group heading=\\\"{{category.name | translate}}\\\" ng-repeat=\\\"category in categorized | adfOrderByObjectKey: \\'name\\'\\\"> <dl class=dl-horizontal> <dt ng-repeat-start=\\\"widget in category.widgets | adfOrderByObjectKey: \\'key\\'\\\"> <a href ng-click=addWidget(widget.key) ng-class={{widget.key}}> {{widget.title | translate}} </a> </dt> <dd ng-repeat-end ng-if=widget.description> {{widget.description | translate}} </dd> </dl> </div> </uib-accordion> </div>  <div ng-if=!createCategories> <div class=row> <div class=\\\"col-md-4 col-xs-12\\\"> <select ng-model=widgetFilter.categoryTags name=widgetsCategoryFilter class=form-control> <option value translate>ADF.WIDGET.LABEL.ALL_WIDGETS</option> <option ng-repeat=\\\"category in availableCategories | orderBy\\\" value={{category}}>{{ category | translate }}</option> </select> </div> <div class=\\\"col-md-4 col-xs-12\\\" ng-init=\\\"widgetSorting = \\'priority\\'\\\"> <select ng-model=widgetSorting name=widgetsSorting class=form-control> <option value=priority selected translate=ADF.WIDGET.TITLE.SORTED_BY translate-values=\\\"{ item : (\\'ADF.WIDGET.LABEL.PRIORITY\\' | translate) }\\\"></option> <option value=name selected translate=ADF.WIDGET.TITLE.SORTED_BY translate-values=\\\"{ item : (\\'ADF.WIDGET.LABEL.NAME\\' | translate) }\\\"></option> <option value=category translate=ADF.WIDGET.TITLE.SORTED_BY translate-values=\\\"{ item : (\\'ADF.WIDGET.LABEL.CATEGORY\\' | translate) }\\\"></option> <option value=description translate=ADF.WIDGET.TITLE.SORTED_BY translate-values=\\\"{ item : (\\'ADF.WIDGET.LABEL.DESCRIPTION\\' | translate) }\\\"></option> </select> </div> <div class=\\\"col-md-4 col-xs-12\\\" ng-init=\\\"widgetSortingDirection = \\'\\'\\\"> <select ng-model=widgetSortingDirection name=widgetSortingDirection class=form-control> <option value selected translate>BUTTON.TITLE.ASCENDING</option> <option value=1 translate>BUTTON.TITLE.DESCENDING</option> </select> </div> </div>  <div ng-repeat=\\\"widget in widgets | adfOrderByObjectKey: \\'key\\' | filter:widgetFilter:strict | orderBy:widgetSorting:widgetSortingDirection track by $index\\\" ng-class=\\\"{ \\'widgetPanelBig\\' : $index ===0 , \\'widgetPanelNormal\\' : $index > 0 }\\\"> <div class=\\\"pointer widgetInfoParent {{widget.key}}\\\" ng-click=addWidget(widget.key) title=\\\"{{widget.description | translate}}\\\"> <div class=\\\"widgetInfoImage panel\\\"> <img ng-if=widget.images ng-init=\\\"widget._currImg = widget.images[0]\\\" src=\\\"{{ widget._currImg }}\\\" ng-click=changeThumbnail(widget);$event.stopPropagation(); title=\\\"Click to change (if available)\\\"> <i ng-if=!widget.images class=\\\"widgetInfoIcon fa\\\" ng-class=\\\"widget.icon ? widget.icon: \\'fa-plus-circle\\'\\\" ng-style=\\\"widget.color?{\\'color\\':widget.color}:\\'\\'\\\" aria-hidden=true></i> </div> <div class=widgetInfoContainer id=widgetKey_{{widget.key}} ng-class=\\\"{ \\'bg-primary\\' : $index ===0 , \\'bg-info\\' : $index > 0 }\\\"> <i ng-if=\\\"widget.images && widget.icon\\\" class=\\\"widgetInfoTitle fa\\\" ng-class=widget.icon ng-style=\\\"widget.color?{\\'color\\':widget.color}:\\'\\'\\\" aria-hidden=true></i><br> <span class=widgetInfoTitle>{{widget.title | translate | humanize}}</span><br> <span>({{widget.category | translate}})</span> <span class=widgetInfoDescription>{{widget.description | translate}}</span> </div> </div> </div> </div> </div> <div class=modal-footer style=clear:both;> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() translate>ADF.COMMON.CLOSE</button> </div> \");\n$templateCache.put(\"../src/templates/widget-delete.html\",\"<div class=modal-header> <h4 class=modal-title> <span translate>ADF.COMMON.DELETE</span> {{widget.title | translate}}</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=widgetTitle translate>ADF.WIDGET.LABEL.DELETE_CONFIRM_MESSAGE</label> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() translate>ADF.COMMON.CLOSE</button> <button type=button class=\\\"btn btn-primary\\\" ng-click=deleteDialog() translate>ADF.COMMON.DELETE</button> </div> \");\n$templateCache.put(\"../src/templates/widget-edit.html\",\"<form name=widgetEditForm novalidate role=form ng-submit=saveDialog()> <div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h3 class=modal-title>{{widget.title | translate}}</h3> </div> <div class=modal-body> <div class=row> <div class=col-xs-12> <div class=\\\"alert alert-danger\\\" role=alert ng-show=validationError> <strong translate>ADF.ERROR.APPLY_ERROR</strong> {{validationError | translate}} </div> </div> </div> <div class=row ng-if=widget.show_reload_config> <div class=\\\"col-xs-12 col-md-6\\\"> <div class=form-group> <label for=widgetTitle translate>ADF.COMMON.TITLE</label> <input type=text class=\\\"form-control text-primary\\\" id=widgetTitle ng-init=\\\"definition.title=(definition.title | translate)\\\" ng-model=definition.title placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.TITLE\\' | translate}}\\\"> </div> </div> <div class=\\\"col-xs-12 col-md-6\\\"> <div class=form-group> <label for=widgetReloadPeriod translate>ADF.WIDGET.TOOLTIP.REFRESH</label> <select class=form-control id=widgetReloadPeriod aria-label=\\\"ngSelected demo\\\" ng-model=definition.config.reloadPeriod required> <option ng-selected=selected value=0 translate>ADF.WIDGET.OPTIONS.MANUAL</option> <option value=20 translate>ADF.WIDGET.OPTIONS.20_SECONDS</option> <option value=40 translate>ADF.WIDGET.OPTIONS.40_SECONDS</option> <option value=60 translate>ADF.WIDGET.OPTIONS.EVERY_MINUTE</option> </select> </div> </div> </div> <div class=row ng-if=!widget.show_reload_config> <div class=\\\"col-xs-12 col-md-12\\\"> <div class=form-group> <label for=widgetTitle translate>ADF.COMMON.TITLE</label> <input type=text class=\\\"form-control text-primary\\\" id=widgetTitle ng-init=\\\"definition.title=(definition.title | translate)\\\" ng-model=definition.title placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.TITLE\\' | translate}}\\\"> </div> </div> </div> <div ng-if=widget.edit class=row> <div class=col-xs-12> <adf-widget-content model=definition content=widget.edit> </adf-widget-content></div> </div> <div class=row> <div class=col-xs-12> <div class=form-group> <label for=widgetAbout translate>ADF.COMMON.ABOUT</label> <textarea class=\\\"form-control text-primary\\\" id=widgetAbout ng-model=definition.config.about placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.ENTER.DESCRIPTION\\'|translate}}\\\"></textarea> </div> </div> </div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() translate>ADF.WIDGET.BUTTON.CANCEL</button> <button type=submit class=\\\"btn btn-primary\\\" ng-disabled=widgetEditForm.$invalid value=\\\"{{\\'ADF.WIDGET.BUTTON.APPLY\\' | translate }}\\\" translate>ADF.WIDGET.BUTTON.APPLY</button> </div> </form> \");\n$templateCache.put(\"../src/templates/widget-fullscreen.html\",\"<div class=modal-header> <div class=\\\"pull-right widget-icons\\\"> <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.REFRESH\\' |translate }}\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a> <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.CLOSE\\' |translate }}\\\" ng-click=closeDialog()> <i class=\\\"glyphicon glyphicon-remove\\\"></i> </a> <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.INSERT\\' |translate }}\\\" ng-if=persistDashboard ng-click=persistDashboard()> <i class=\\\"glyphicon glyphicon-save\\\"></i> </a> </div> <h4 class=modal-title translate>&nbsp;{{ definition.title | translate}}</h4> </div> <div class=\\\"modal-body widget\\\" style=overflow:hidden;> <adf-widget-content model=definition content=widget> </adf-widget-content></div> <div class=modal-footer ng-if=widget.show_modal_footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() translate>ADF.COMMON.CLOSE</button> </div> \");\n$templateCache.put(\"../src/templates/widget-selection.html\",\"<style>\\r\\n    .selected-entities-control .ui-select-container>div:first-child {\\r\\n        max-height: 300px;\\r\\n        overflow-y: scroll;\\r\\n        overflow-x: hidden;\\r\\n    }\\r\\n\\r\\n</style> <form name=widgetSelectionForm novalidate role=form ng-submit=saveChangesDialog()> <div class=modal-header> <div class=\\\"col-xs-12 col-md-12\\\"> <h3 class=\\\"modal-title text-left\\\"> <i class=\\\"fa fa-check-square-o\\\" aria-hidden=true></i> {{\\'ADF.WIDGET.TITLE.SELECTED_ITEMS\\' | translate}}</h3> </div> </div> <div class=modal-body> <div class=col-xs-12> <div class=\\\"form-group selected-entities-control\\\"> <label for=currentSelection translate>ADF.WIDGET.LABEL.CURRENT_SELECTION</label> <ui-select multiple tagging ng-model=currentSelection.selected theme=bootstrap sortable=false title=\\\"{{\\'ADF.WIDGET.TITLE.SELECTED_ITEMS\\' | translate}}\\\"> <ui-select-match placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.NO_SELECTED\\' | translate}}\\\"> <div class=text-left style=\\\"margin-right: 15px;font-size: 0.9em;max-width:350px;\\\" ng-if=$item.value.visible> <span style=\\\"white-space: initial;word-break: break-word;\\\" ng-repeat=\\\"(k,v) in $item.value.visible track by $index\\\" ng-if=\\\"v !== undefined\\\"> <strong>{{k | translate}}:</strong> {{v}} <br> </span> </div> <div class=text-left style=\\\"margin-right: 15px;font-size: 0.9em;max-width:350px;\\\" ng-if=!$item.value.visible> <span style=\\\"white-space: initial;word-break: break-word;\\\">{{$item.key}}</span> </div> </ui-select-match> <ui-select-choices repeat=\\\"itemSel in currentSelection.selected | filter:$select.search\\\"> {{itemSel.key}} </ui-select-choices> </ui-select> </div> </div> <div class=\\\"col-xs-12 text-left\\\"> <button type=button class=\\\"btn btn-success btn-sm\\\" ng-click=restoreSelection() ng-disabled=\\\"currentSelection.selected.length === selectedItemsLength\\\" translate>ADF.WIDGET.BUTTON.RESTORE</button> <button type=button class=\\\"btn btn-danger btn-sm\\\" ng-click=clearSelection() ng-disabled=\\\"currentSelection.selected.length < 1\\\" translate>ADF.WIDGET.BUTTON.CLEAR</button> </div> </div> <div class=modal-footer> <div class=\\\"col-xs-12 col-md-2 text-left\\\"> <div uib-dropdown ng-if=\\\"selectionConfig && selectionConfig.filterTypes && currentSelection.selected.length > 0\\\"> <button id=applyFilterBy type=button class=\\\"btn btn-primary\\\" uib-dropdown-toggle> <i class=\\\"glyphicon glyphicon-filter pointer\\\"></i> {{\\'ADF.WIDGET.BUTTON.FILTER_BY\\' | translate}} <span class=caret></span> </button> <ul class=dropdown-menu uib-dropdown-menu role=menu aria-labelledby=applyFilterBy> <li role=menuitem ng-repeat=\\\"filterType in selectionConfig.filterTypes\\\"> <a href ng-click=applyFilter(filterType) title=\\\"{{\\'ADF.WIDGET.BUTTON.SELECTED\\' | translate:{filterType: filterType} }}\\\">{{\\'ADF.WIDGET.BUTTON.SELECTED\\' | translate:{filterType: filterType} }}</a> </li> </ul> </div> </div> <div class=\\\"col-xs-12 col-md-3 text-left\\\"> <div uib-dropdown ng-if=\\\"selectionConfig && selectionConfig.operationTypes && currentSelection.selected.length > 0\\\"> <button id=executeOperation type=button class=\\\"btn btn-primary\\\" uib-dropdown-toggle> <i class=\\\"glyphicon glyphicon-flash pointer\\\"></i> {{\\'ADF.WIDGET.BUTTON.EXECUTE_OPERATION\\' | translate}} <span class=caret></span> </button> <ul class=dropdown-menu uib-dropdown-menu role=menu aria-labelledby=executeOperation> <li role=menuitem ng-repeat=\\\"operationType in selectionConfig.operationTypes\\\"> <a href ng-click=executeOperation(operationType) title={{operationType|translate}}>{{operationType|translate}}</a> </li> </ul> </div> </div> <div class=\\\"col-xs-12 col-md-7 text-right\\\"> <button type=submit class=\\\"btn btn-primary\\\" ng-disabled=\\\"currentSelection.selected.length === selectedItemsLength\\\" translate value=\\\"{{\\'ADF.WIDGET.BUTTON.APPLY\\' | translate }}\\\">ADF.WIDGET.BUTTON.APPLY</button> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() translate>ADF.COMMON.CLOSE</button> </div> </div> </form> \");\n$templateCache.put(\"../src/templates/widget-title.html\",\"<div class=panel-title style=margin:0px;> <span class=pull-left>  <a href ng-if=\\\"selectedItemsLength > 0\\\" title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.SELECTION\\' | translate }}\\\" ng-click=manageSelectedItems() style=float:left;> <i class=\\\"glyphicon glyphicon-check\\\"></i> <small class=ogux-budget>{{ selectedItemsLength }}</small> </a> <h4 ng-if=\\\"!widget.frameless && definition.title\\\" style=\\\"margin:0px 0px 0px 2px;float:left;\\\" translate>{{definition.title | translate}}</h4> </span> <div class=pull-right> <span ng-if=config.about> <a href uib-popover=\\\"{{ config.about }}\\\" popover-trigger=\\\"\\'mouseenter\\'\\\" popover-placement=top ng-click=openAboutScreen()> <i class=\\\"glyphicon glyphicon-info-sign\\\"></i> </a> <script type=text/ng-template id=widgetAboutModal.html> <div class=\\\"modal-header\\\"> <h4 class=\\\"modal-title\\\" translate>ADF.COMMON.ABOUT</h4> </div> <div class=\\\"modal-body\\\">{{ about.info }}</div> <div class=\\\"modal-footer\\\"> <button class=\\\"btn btn-primary\\\" type=\\\"button\\\" ng-click=\\\"ok()\\\" translate>ADF.WIDGET.BUTTON.OK</button> </div> </script> </span> <a ng-if=\\\"!editMode && widget.print\\\" href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.PRINT\\' | translate }}\\\" ng-click=print()> <i class=\\\"glyphicon glyphicon-print\\\"></i> </a> <span ng-if=\\\"!editMode && config.widgetOnToggleView && config.widgetViews\\\" uib-popover=\\\"Change view\\\" popover-trigger=\\\"\\'mouseenter\\'\\\" popover-placement=top uib-dropdown> <a href id=toggle_{{definition.wid}} uib-dropdown-toggle> <i class=\\\"glyphicon glyphicon-eye-close\\\"></i> </a> <ul class=dropdown-menu uib-dropdown-menu aria-labelledby=\\\"{{\\'ADF.WIDGET.LABEL.CHANGE_VIEW\\' | translate}}\\\"> <li ng-repeat=\\\"choice in config.widgetViews\\\"> <a ng-click=config.widgetOnToggleView(choice.value)>{{choice.name | translate}}</a> </li> </ul> </span> <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.REFRESH\\' | translate }}\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.OPERATION\\' | translate }}\\\" ng-if=\\\"widget.executeOperation && !editMode && isExecuteOperationEnabled()\\\" ng-click=executeOperation()> <i class=\\\"glyphicon glyphicon-flash\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.FILTER\\' | translate }}\\\" ng-if=\\\"config.widgetSelectors && !editMode\\\" ng-click=showFilter()> <i class=\\\"glyphicon glyphicon-filter\\\" ng-class=\\\"{\\'active\\': search.json || search.quick ||search.customFilter}\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.SORT\\' | translate }}\\\" ng-if=\\\"config.sort && !editMode\\\" ng-click=showFilter()> <i class=\\\"glyphicon glyphicon-sort\\\" ng-class=\\\"{\\'active\\': (config.sort.value && config.sort.value !== \\'\\')}\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.PICTURE\\' | translate}}\\\" ng-if=\\\"!editMode && !widgetState.isCollapsed\\\" ng-click=saveWidgetScreen(definition.wid)> <i class=\\\"glyphicon glyphicon-picture\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.QR\\' | translate }}\\\" ng-if=\\\"!editMode && widget.qr\\\" ng-click=generateQR()> <i class=\\\"fa fa-qrcode\\\" style=\\\"font-size: 1.1em;\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.CSV\\' | translate }}\\\" ng-if=\\\"!editMode && widget.csv\\\" ng-click=downloadCsv()> <i class=\\\"glyphicon glyphicon-file\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.MOVE\\' | translate }}\\\" class=adf-move ng-if=editMode> <i class=\\\"glyphicon glyphicon-move\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.COLLAPSE\\' | translate }}\\\" ng-show=\\\"options.collapsible && !widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-minus\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.EXPAND\\' | translate }}\\\" ng-show=\\\"options.collapsible && widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-plus\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.EDIT\\' | translate }}\\\" ng-click=edit() ng-if=editMode> <i class=\\\"glyphicon glyphicon-cog\\\"></i> </a> <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.FULLSCREEN\\' | translate }}\\\" ng-click=openFullScreen() ng-show=options.maximizable> <i class=\\\"glyphicon glyphicon-fullscreen\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.REMOVE\\' | translate}}\\\" ng-click=remove() ng-if=editMode> <i class=\\\"glyphicon glyphicon-trash\\\"></i> </a> </div> </div> \");\n$templateCache.put(\"../src/templates/widget.html\",\"<div adf-id={{definition.wid}} adf-widget-type={{definition.type}} ng-class=\\\"widgetClasses(widget, definition)\\\" class=\\\"widget widget_{{definition.wid}}\\\"> <a name={{definition.wid}} id={{definition.wid}}></a> <div class=\\\"panel-heading clearfix bg-primary\\\" ng-if=\\\"!widget.frameless || editMode\\\"> <div ng-include src=definition.titleTemplateUrl></div> </div> <div ng-if=\\\"!widgetState.isCollapsed && config.widgetSelectors && !editMode && filterAvailable\\\" class=\\\"row form-group\\\" style=\\\"margin-top: 5px !important;\\\"> <div ng-if=\\\"toggleAdvanced === 0\\\" class=\\\"col-xs-12 col-md-8\\\"> <div class=filter mass-autocomplete> <input class=form-control style=padding-right:15px; name=filterValue ng-keypress=enter($event) ng-model=search.oql placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.ENTER.FILTER.ADVANCED\\' | translate }}\\\" mass-autocomplete-item=autocomplete_options() ng-change=debugQuery()> <label ng-click=launchSearchingAdv() style=\\\"position: absolute;font-size: 1.5em;cursor:pointer;right: 15px;\\\" class=\\\"glyphicon glyphicon-search\\\"></label> </div> <div ng-if=\\\"!editMode && filter.error\\\" class=col-xs-12> <alert type=danger class=\\\"text-center text-danger\\\"> <span>{{filter.error}}</span> </alert> </div> <div ng-if=\\\"showFinalFilter && search.json\\\" class=col-xs-12> <pre>{{ search.json }}</pre> </div> </div> <div ng-if=ifCustomFilter() class=\\\"col-xs-12 col-md-8\\\"> <div class=\\\"filter form-group\\\"> <a href class=text-danger ng-click=\\\"options.customFilter.open = !options.customFilter.open\\\"> <i class=glyphicon ng-class=\\\"{\\'glyphicon-chevron-up\\': options.customFilter.open, \\'glyphicon-chevron-down\\': !options.customFilter.open}\\\"></i> {{\\'ADF.WIDGET.TITLE.PICK_FILTER_FIELDS\\' | translate}} </a> <label ng-click=launchCustomFilter() style=\\\"position: absolute;font-size: 1.5em;cursor:pointer;right: 15px;\\\" class=\\\"glyphicon glyphicon-search\\\"></label> <div class=row ng-if=options.customFilter.open> <ui-select multiple=true ng-model=search.fields theme=bootstrap title=\\\"{{\\'ADF.WIDGET.TITLE.CHOOSE_FILTER\\' | translate }}\\\" on-select=addCustomFilter($item) on-remove=deleteFilter($item) ng-click=getcustomFilter()> <ui-select-match placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.PICK_FILTER_FIELDS\\' | translate }}\\\" allow-clear=true> {{$item}} </ui-select-match> <ui-select-choices repeat=\\\"selector in (customFilter | filter: $select.search) track by $index\\\"> <small ng-bind-html=\\\"selector | highlight: $select.search\\\"></small> </ui-select-choices> </ui-select> </div> </div> </div> <div ng-if=\\\"toggleAdvanced === 1\\\" class=\\\"col-xs-12 col-md-8\\\"> <div class=filter> <input class=form-control style=padding-right:15px; name=filterValue ng-keypress=enter($event) ng-model=search.quick placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.ENTER.FILTER.BASIC\\' | translate}}\\\"> <label ng-click=launchSearchingQuick() style=\\\"position: absolute;font-size: 1.5em;cursor:pointer;right: 15px;\\\" class=\\\"glyphicon glyphicon-search\\\"></label> </div> </div> <div class=\\\"col-xs-12 col-md-4\\\" uib-dropdown> <button class=\\\"btn btn-sm\\\" uib-dropdown-toggle title=\\\"{{\\'ADF.WIDGET.TITLE.TOGGLE_AVANCED_BASIC_FILTER\\' | translate }}\\\"> <i class=\\\"advanced-filter glyphicon\\\" ng-class=\\\"{\\'glyphicon-font\\' : toggleAdvanced === 0, \\'glyphicon-bold\\' : toggleAdvanced ===1 , \\'glyphicon-filter\\' : toggleAdvanced === 2, }\\\"></i> <span class=caret></span> </button> <ul class=\\\"dropdown-menu panel\\\" style=\\\"border: 1px groove;\\\" uib-dropdown-menu aria-labelledby=simple-dropdown> <li ng-click=toggleFilter(0)> <a href> <i class=\\\"advanced-filter glyphicon glyphicon-font txt-primary\\\"></i> {{\\'ADF.WIDGET.TITLE.FILTER.ADVANCED\\' | translate}}</a> </li> <li ng-click=toggleFilter(1)> <a href> <i class=\\\"basic-filter glyphicon glyphicon-bold txt-primary\\\"></i> {{\\'ADF.WIDGET.TITLE.FILTER.BASIC\\' | translate}}</a> </li> <li ng-if=\\\"definition.type === \\'FullDevicesList\\'\\\" ng-click=toggleFilter(2)> <a href> <i class=\\\"custom-filter glyphicon glyphicon-filter txt-primary\\\"></i> {{\\'ADF.WIDGET.TITLE.FILTER.CUSTOM\\' | translate}}</a> </li> </ul> </div> </div> <div ng-if=\\\"customSelectors && config.sort && filterAvailable && toggleAdvanced != 2\\\" class=\\\"row form-group\\\" style=\\\"margin-top: 5px !important;\\\"> <div class=\\\"sort col-xs-12 col-md-8\\\"> <ui-select ng-model=config.sort.value theme=bootstrap title=\\\"{{\\'ADF.WIDGET.TITLE.CHOOSE_ORDER\\' | translate}}\\\" allow-clear=true append-to-body=true ng-change=launchSearching() ng-click=getCustomSelectors()> <ui-select-match placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.SHORTED_BY\\' | translate}}\\\" allow-clear=true>{{ \\'ADF.WIDGET.TITLE.SORTED_BY\\' | translate:{item: $select.selected} }}</ui-select-match> <ui-select-choices repeat=\\\"selector in customSelectors | filter: $select.search track by $index\\\"> <small> <span ng-bind-html=\\\"selector | highlight: $select.search\\\"></span> </small> </ui-select-choices> </ui-select> </div> <div class=\\\"sortDirection col-xs-4 col-md-4\\\"> <button class=\\\"btn btn-sm pointer\\\" ng-click=changeDirection() ng-disabled=\\\"config.sort.value === \\'\\'\\\" title=\\\"{{\\'TOGGLE_SORTING_DIRECTION\\' | translate}}\\\"> <i class=glyphicon style=font-size:1.3em; ng-class=\\\"config.sort.direction===\\'ASCENDING\\' ? \\'glyphicon-sort-by-attributes\\': \\'glyphicon-sort-by-attributes-alt\\'\\\"></i> </button> </div> </div> <div ng-if=showCustomFields() class=\\\"col-xs-12 col-md-12\\\"> <div class=\\\"col-xs-12 col-md-4\\\" ng-repeat=\\\"model in search.customFilter\\\"> <label>{{model.name | translate}}</label> <input class=form-control id={{model.name}} name={{model.name}} type=text ng-model=search.customFilter[$index].value ng-keypress=enter($event)> </div> </div> <div ng-class=\\\"{ \\'panel-body\\':!widget.frameless || editMode}\\\" uib-collapse=widgetState.isCollapsed style=overflow:hidden;> <adf-widget-content model=definition content=widget extra=options.extraData> </adf-widget-content></div> </div> \");}]);\n})(window);"]}