{"version":3,"sources":["adf.js","column.js","dashboard.js","order-by-object-key.js","provider.js","row.js","structure-preview.js","widget-content.js","widget-service.js","widget.js","opengate-angular-dashboard-framework.tpl.js","opengate-angular-dashboard-framework-tpls.js"],"names":["window","undefined","angular","module","value","directive","$log","$compile","$rootScope","adfTemplatePath","rowTemplate","dashboard","moveWidgetInColumn","$scope","column","evt","widgets","$apply","splice","newIndex","oldIndex","$broadcast","findWidget","index","widget","i","length","w","idEquals","wid","findColumn","model","rows","r","j","columns","c","cid","getId","el","id","getAttribute","addWidgetToColumn","targetColumn","from","sourceColumn","item","warn","removeWidgetFromColumn","applySortable","$element","sortable","Sortable","create","group","handle","ghostClass","animation","onAdd","onRemove","onUpdate","on","destroy","restrict","replace","scope","editMode","continuousEditMode","adfModel","options","templateUrl","link","col","isDefined","isArray","cloned","append","$timeout","$uibModal","$faIcons","$translate","stringToBoolean","string","toLowerCase","Boolean","copyWidgets","source","target","shift","push","fillStructure","root","counter","forEach","row","isUndefined","readColumns","changeStructure","structure","copy","createConfiguration","type","cfg","config","createWidget","wdgt","findFirstWidgetColumn","error","addNewWidgetToModel","name","forceToSave","unshift","isEditModeImmediate","edit","immediate","openEditMode","split","object","size","arr","key","createCategories","categories","category","title","instant","description","createCategoriesList","categoryTags","categoriesTmp","idx","translatedCat","indexOf","transclude","collapsible","editable","maximizable","adfWidgetFilter","hideButtons","extraData","controller","getNewModalScope","$new","widgetFilter","structureName","$watch","oldVal","newVal","structures","titleTemplateUrl","editClass","deleteDashboard","dashData","toggleEditMode","openConfigWindow","modelCopy","editDashboardDialog","saveTemporalDashboard","temporal","adfToggleEditMode","$on","event","isNewDashboard","adfCancelEditMode","cancelEditMode","collapseAll","collapseExpandStatus","adfEditDashboardDialog","adfLaunchSearchingFromWidget","configFilter","adfWindowTimeChangedFromWidget","windowFilter","editDashboardScope","icon","availableIcons","list","adfEditTemplatePath","editTemplateUrl","instance","open","backdrop","keyboard","info","closeDialog","close","$destroy","adfOpenWidgetFromOther","internal_config","_config","merge","adfOpenModalWidgetFromOther","widgetType","fullScreenScope","definition","opts","modalSize","windowClass","persistDashboard","this","$parent","adfAddWidgetDialog","addWidgetDialog","addScopeCfg","widgetSortingDirection","widgetSorting","addScope","isFunction","availableCategories","adfAddTemplatePath","addTemplateUrl","widgetFilterCfg","addWidget","changeThumbnail","images","_currThumb","_currImg","$attr","enableConfirmDelete","editing","filter","$filter","array","objectKey","provider","widgetsPath","messageTemplate","loadingTemplate","customWidgetTemplatePath","defaultApplyFunction","extend","reload","frameless","apply","path","template","templatePath","$get","Date","getTime","other","toString","columnTemplate","adjustRowHeight","container","height","style","prepareStructure","preview","selected","$q","widgetService","$controller","$injector","renderError","msg","html","compileWidget","currentScope","configChanged","_getWindowTime","newScope","to","moment","subtract","_d","content","extra","is_menu","menu","is_itemsPerPage","itemsPerPage","reloadData","renderWidget","then","translateMessage","getWindowTime","winTime","eval","rawdate","format","templateScope","selectionManager","base","resolvers","$tpl","getTemplate","resolve","promise","isString","get","invoke","all","locals","resolveAs","templateCtrl","controllerAs","children","data","contents","reason","widgetConfigChangedEvt","widgetReloadEvt","factory","$http","$sce","$templateCache","parseUrl","url","parsedUrl","substring","exposed","deferred","defer","tpl","getTrustedResourceUrl","success","response","put","reject","$interval","Filter","preLink","styleClass","fromJson","reloadPeriod","show_modal_footer","show_reload_config","widgetState","isCollapsed","collapsed","debug","postLink","_setReloadTimeout","stopReloadTimeout","cancel","deleteWidget","remove","deleteScope","deleteTemplateUrl","deleteDialog","print","isExecuteOperationEnabled","entityKey","oql","executeOperation","completeReload","sort","direction","toggleAdvanced","search","json","quick","fields","customFilter","v","toggleFilter","advanced","filterAvailable","showFilter","showFinalFilter","launchSearching","element","addCustomFilter","launchCustomFilter","and","like","JSON","stringify","deleteFilter","launchSearchingAdv","Object","keys","applyFilter","launchSearchingQuick","timeObj","enter","keycode","keyCode","which","customSelectors","getCustomSelectors","widgetSelectors","findFields","err","getcustomFilter","ifCustomFilter","showCustomFields","changeDirection","changeDefaultTab","debugQuery","parseQuery","toJson","unknownWords","autocomplete_options","suggest","suggest_field_delimited","selectedItems","currentSelection","isSelected","obj","totalSelected","manageSelectedItems","selectionScope","selectionConfig","manageItemsSelectedTemplate","restoreSelection","clearSelection","customOql","filterAction","operationType","saveChangesDialog","finalSelection","visible","selectedItemsLength","lastItem","createApplyPromise","result","when","editScope","saveDialog","validationError","applyFn","adfDashboardCollapseExpand","args","adfWidgetEnterEditMode","adfIsEditMode","adfDashboardChanged","adfDashboardEditsCancelled","widgetClasses","classes","openFullScreen","openFilter","openAboutScreen","modalInstance","$uibModalInstance","information","about","ok","selectedItem","saveWidgetScreen","wId","$emit","objectSelector","fileName","createQuickFilter","fieldsQuickSearch","criteria","_filter","or","field","operator","downloadCsv","extra_filter","scope_filter","final_filter","order","window_filter","onWindowTimeChanged","parse","trim","generateQR","addItemToSelection","removeItemFromSelection","compile","pre","post","run"],"mappings":"CAAA,SAAAA,EAAAC,GAAA,YA2BAC,SAAAC,OAAA,OAAA,eAAA,eAAA,wBACAC,MAAA,kBAAA,qBACAA,MAAA,cAAA,8HACAA,MAAA,iBAAA,0IC9BAA,MAAA,aAAA,SA2BAF,QAAAC,OAAA,OACAE,UAAA,sBAAA,OAAA,WAAA,aAAA,kBAAA,cAAA,YAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAMA,QAAAC,GAAAC,EAAAC,EAAAC,GACA,GAAAC,GAAAF,EAAAE,OAEAH,GAAAI,OAAA,WACAD,EAAAE,OAAAH,EAAAI,SAAA,EAAAH,EAAAE,OAAAH,EAAAK,SAAA,GAAA,IACAZ,EAAAa,WAAA,4BAOA,QAAAC,GAAAR,EAAAS,GAEA,IAAA,GADAC,GAAA,KACAC,EAAA,EAAAA,EAAAX,EAAAE,QAAAU,OAAAD,IAAA,CACA,GAAAE,GAAAb,EAAAE,QAAAS,EACA,IAAAd,EAAAiB,SAAAD,EAAAE,IAAAN,GAAA,CACAC,EAAAG,CACA,QAGA,MAAAH,GAMA,QAAAM,GAAAC,EAAAR,GAEA,IAAA,GADAT,GAAA,KACAW,EAAA,EAAAA,EAAAM,EAAAC,KAAAN,OAAAD,IAAA,CAEA,IAAA,GADAQ,GAAAF,EAAAC,KAAAP,GACAS,EAAA,EAAAA,EAAAD,EAAAE,QAAAT,OAAAQ,IAAA,CACA,GAAAE,GAAAH,EAAAE,QAAAD,EACA,IAAAvB,EAAAiB,SAAAQ,EAAAC,IAAAd,GAAA,CACAT,EAAAsB,CACA,OACAA,EAAAJ,OACAlB,EAAAgB,EAAAM,EAAAb,IAGA,GAAAT,EACA,MAGA,MAAAA,GAMA,QAAAwB,GAAAC,GACA,GAAAC,GAAAD,EAAAE,aAAA,SACA,OAAAD,GAAAA,EAAA,KAMA,QAAAE,GAAA7B,EAAAkB,EAAAY,EAAA5B,GAEA,GAAAsB,GAAAC,EAAAvB,EAAA6B,MACAC,EAAAf,EAAAC,EAAAM,EAEA,IAAAQ,EAAA,CAEA,GAAAhB,GAAAS,EAAAvB,EAAA+B,MACAtB,EAAAF,EAAAuB,EAAAhB,EAEAL,GAEAX,EAAAI,OAAA,WACA0B,EAAA3B,UACA2B,EAAA3B,YAEA2B,EAAA3B,QAAAE,OAAAH,EAAAI,SAAA,EAAAK,GAEAhB,EAAAa,WAAA,4BAGAf,EAAAyC,KAAA,iCAAAlB,OAGAvB,GAAAyC,KAAA,iCAAAV,GAOA,QAAAW,GAAAnC,EAAAC,EAAAC,GAEAF,EAAAI,OAAA,WACAH,EAAAE,QAAAE,OAAAH,EAAAK,SAAA,GACAZ,EAAAa,WAAA,gCAOA,QAAA4B,GAAApC,EAAAqC,EAAAnB,EAAAjB,GAEA,GAAAyB,GAAAW,EAAA,GACAC,EAAAC,SAAAC,OAAAd,GACAe,MAAA,UACAC,OAAA,YACAC,WAAA,cACAC,UAAA,IACAC,MAAA,SAAA3C,GACA2B,EAAA7B,EAAAkB,EAAAjB,EAAAC,IAEA4C,SAAA,SAAA5C,GACAiC,EAAAnC,EAAAC,EAAAC,IAEA6C,SAAA,SAAA7C,GACAH,EAAAC,EAAAC,EAAAC,KAKAmC,GAAAW,GAAA,WAAA,WAGAV,EAAAZ,IACAY,EAAAW,YAKA,OACAC,SAAA,IACAC,SAAA,EACAC,OACAnD,OAAA,IACAoD,SAAA,IACAC,mBAAA,IACAC,SAAA,IACAC,QAAA,KAEAC,YAAA7D,EAAA,wBACA8D,KAAA,SAAA1D,EAAAqC,GAEA,GAAAsB,GAAA3D,EAAAC,MACA0D,GAAAnC,MACAmC,EAAAnC,IAAA1B,EAAA6B,MAGAtC,QAAAuE,UAAAD,EAAAxC,OAAA9B,QAAAwE,QAAAF,EAAAxC,MAEAzB,EAAAG,GAAAG,EAAA,SAAA8D,GACAzB,EAAA0B,OAAAD,KAIA1B,EAAApC,EAAAqC,EAAArC,EAAAuD,SAAAI,QC1IAtE,QAAAC,OAAA,OACAE,UAAA,gBAAA,aAAA,OAAA,WAAA,YAAA,YAAA,kBAAA,WAAA,aAAA,SAAAG,EAAAF,EAAAuE,EAAAC,EAAAnE,EAAAF,EAAAsE,EAAAC,GAGA,QAAAC,GAAAC,GACA,OAAAhF,QAAAuE,UAAAS,GAAAA,EAAAC,cAAA,MACA,IAAA,OACA,IAAA,MACA,IAAA,IACA,OAAA,CACA,KAAA,QACA,IAAA,KACA,IAAA,IACA,IAAA,MACA,OAAA,CACA,SACA,MAAAC,SAAAF,IAIA,QAAAG,GAAAC,EAAAC,GACA,GAAAD,EAAAtE,SAAAsE,EAAAtE,QAAAU,OAAA,EAEA,IADA,GAAAC,GAAA2D,EAAAtE,QAAAwE,QACA7D,GACA4D,EAAAvE,QAAAyE,KAAA9D,GACAA,EAAA2D,EAAAtE,QAAAwE,QAWA,QAAAE,GAAAC,EAAAxD,EAAAyD,GA0BA,MAzBAA,GAAAA,GAAA,EAEA1F,QAAAuE,UAAAkB,EAAA3D,OACA9B,QAAA2F,QAAAF,EAAA3D,KAAA,SAAA8D,GACA5F,QAAA2F,QAAAC,EAAA3D,QAAA,SAAArB,GAGAA,EAAAE,UACAF,EAAAE,YAIAd,QAAAuE,UAAAtC,EAAAyD,KAEA1F,QAAA6F,YAAAjF,EAAAkB,QACAqD,EAAAlD,EAAAyD,GAAA9E,GACA8E,KAKAA,EAAAF,EAAA5E,EAAAqB,EAAAyD,OAIAA,EAQA,QAAAI,GAAAL,EAAAxD,GAaA,MAZAA,GAAAA,MAEAjC,QAAAuE,UAAAkB,EAAA3D,OACA9B,QAAA2F,QAAAF,EAAA3D,KAAA,SAAA8D,GACA5F,QAAA2F,QAAAC,EAAA3D,QAAA,SAAAqC,GACArC,EAAAsD,KAAAjB,GAEAwB,EAAAxB,EAAArC,OAKAA,EAGA,QAAA8D,GAAAlE,EAAAmE,GACA,GAAA/D,GAAA6D,EAAAjE,GACA6D,EAAA,CAIA,KAFA7D,EAAAC,KAAA9B,QAAAiG,KAAAD,EAAAlE,MAEA4D,EAAAzD,EAAAT,QACAkE,EAAAF,EAAA3D,EAAAI,EAAAyD,GAIA,QAAAQ,GAAAC,GACA,GAAAC,MACAC,EAAA5F,EAAAK,QAAAqF,GAAAE,MAIA,OAHAA,KACAD,EAAApG,QAAAiG,KAAAI,IAEAD,EAGA,QAAAE,GAAAH,GACA,GAAAI,MACAjF,EAAAb,EAAAK,QAAAqF,EAIA,OAHA7E,KACAiF,EAAAvG,QAAAiG,KAAA3E,IAEAiF,EAQA,QAAAC,GAAA3E,GACA,GAAAjB,GAAA,IACA,KAAAZ,QAAAwE,QAAA3C,EAAAC,MAEA,MADA1B,GAAAqG,MAAA,gCACA,IAEA,KAAA,GAAAlF,GAAA,EAAAA,EAAAM,EAAAC,KAAAN,OAAAD,IAAA,CACA,GAAAqE,GAAA/D,EAAAC,KAAAP,EACA,IAAAvB,QAAAwE,QAAAoB,EAAA3D,SACA,IAAA,GAAAD,GAAA,EAAAA,EAAA4D,EAAA3D,QAAAT,OAAAQ,IAAA,CACA,GAAAsC,GAAAsB,EAAA3D,QAAAD,EACA,KAAAsC,EAAAxC,KAAA,CACAlB,EAAA0D,CACA,QAIA,GAAA1D,EACA,MAGA,MAAAA,GAUA,QAAA8F,GAAA7E,EAAAP,EAAAqF,EAAAC,GACA,GAAA/E,EAAA,CACA,GAAAjB,GAAA4F,EAAA3E,EACAjB,IACAA,EAAAE,UACAF,EAAAE,YAEAF,EAAAE,QAAA+F,QAAAvF,GAGAhB,EAAAa,WAAA,iBAAAwF,EAAA9E,EAAAP,GAEAsF,GACAtG,EAAAa,WAAA,sBAAAwF,EAAA9E,IAGAzB,EAAAqG,MAAA,0CAGArG,GAAAqG,MAAA,sBASA,QAAAK,GAAAX,GACA,GAAA7E,GAAAb,EAAAK,QAAAqF,EACA,OAAA7E,IAAAA,EAAAyF,MAAAzF,EAAAyF,KAAAC,UASA,QAAAC,GAAAtG,EAAAW,GAEAqD,EAAA,WACAhE,EAAAQ,WAAA,yBAAAG,IACA,KAWA,QAAA4F,GAAAC,EAAAC,GACA,GAAAC,MACA9F,EAAA,CAQA,OAPAvB,SAAA2F,QAAAwB,EAAA,SAAAjH,EAAAoH,GACA,GAAAjG,GAAAE,IAAA6F,CACAC,GAAAhG,KACAgG,EAAAhG,OAEAgG,EAAAhG,GAAAiG,GAAApH,IAEAmH,EAUA,QAAAE,GAAAzG,GACA,GAAA0G,KAqBA,OApBAxH,SAAA2F,QAAA7E,EAAA,SAAAQ,EAAAgG,GACA,GAAAG,GAAAnG,EAAAmG,QAEAA,KACAA,EAAA,4BAGAnG,EAAAoG,MAAA5C,EAAA6C,QAAArG,EAAAoG,OACApG,EAAAsG,YAAA9C,EAAA6C,QAAArG,EAAAsG,aACAtG,EAAAmG,SAAA3C,EAAA6C,QAAArG,EAAAmG,UAGAzH,QAAA6F,YAAA2B,EAAAlG,EAAAmG,aACAD,EAAAlG,EAAAmG,WACA3G,aAIA0G,EAAAlG,EAAAmG,UAAA3G,QAAAwG,GAAAhG,IAEAkG,EAGA,QAAAK,GAAA/G,GACA,GAAA0G,KAwBA,OAvBAxH,SAAA2F,QAAA7E,EAAA,SAAAQ,EAAAgG,GACAhG,EAAAmG,WACAnG,EAAAmG,SAAA,8BAGAnG,EAAAoG,MAAA5C,EAAA6C,QAAArG,EAAAoG,OACApG,EAAAsG,YAAA9C,EAAA6C,QAAArG,EAAAsG,aACAtG,EAAAmG,SAAA3C,EAAA6C,QAAArG,EAAAmG,UAEAnG,EAAAwG,eACAxG,EAAAwG,aAAA,iCAGA,IAAAC,GAAAzG,EAAAwG,aAAAZ,MAAA,IAEAlH,SAAA2F,QAAAoC,EAAA,SAAAN,EAAAO,GAEA,GAAAC,GAAAnD,EAAA6C,QAAAF,EACAD,GAAAU,QAAAD,SACAT,EAAAjC,KAAA0C,OAIAT,EAGA,OACA1D,SAAA,EACAD,SAAA,KACAsE,YAAA,EACApE,OACAiC,UAAA,IACAW,KAAA,IACAyB,YAAA,IACAC,SAAA,IACArE,SAAA,IACAC,mBAAA,IACAqE,YAAA,IACApE,SAAA,IACAqE,gBAAA,IACAf,WAAA,IACAgB,YAAA,IACAC,UAAA,KAEAC,YAAA,SAAA,SAAA/H,GA8CA,QAAAgI,KACA,GAAA5E,GAAApD,EAAAiI,MACA,OAAA7E,GA/CA,GAAAlC,MACAmE,KACA6C,EAAA,KACAC,KACAnC,EAAAhG,EAAAgG,IAGAhG,GAAAoI,OAAA,WAAA,SAAAC,EAAAC,IAEA,OAAAA,GAAA,OAAAD,GAAA,OAAAC,KACApH,EAAAlB,EAAAuD,SACA2E,EAAAlI,EAAA4H,gBACA1G,GAAAA,EAAAC,OACAgH,EAAAnI,EAAAqF,UACAA,EAAAvF,EAAAyI,WAAAJ,GACA9C,GACAnE,EACAA,EAAAC,KAAA9B,QAAAiG,KAAAD,GAAAlE,KAEAD,EAAA7B,QAAAiG,KAAAD,GAEAnE,EAAAmE,UAAA8C,GAEA1I,EAAAqG,MAAA,4BAAAqC,IAIAjH,GACAA,EAAA6F,QACA7F,EAAA6F,MAAA5C,EAAA6C,QAAA,wCAEA9F,EAAAsH,mBACAtH,EAAAsH,iBAAA5I,EAAA,wBAEAI,EAAAkB,MAAAA,GAEAzB,EAAAqG,MAAA,qCAGA,GAGA9F,EAAAqD,UAAA,EACArD,EAAAyI,UAAA,GAOAzI,EAAA0I,gBAAA,WACA,GAAAC,IACAhH,GAAAT,EAAAS,GACAqE,KAAA9E,EAAA6F,MAGApH,GAAAa,WAAA,kBAAAmI,IAGA3I,EAAA4I,eAAA,SAAAC,GACA7I,EAAAqD,UAAArD,EAAAqD,SACArD,EAAAqD,WACArD,EAAAsD,qBACAtD,EAAA8I,UAAAzJ,QAAAiG,KAAAtF,EAAAuD,aACA5D,EAAAa,WAAA,kBAGAqI,GACA7I,EAAA+I,uBAIA/I,EAAAqD,UACA1D,EAAAa,WAAA,sBAAAwF,EAAA9E,IAIAlB,EAAAgJ,sBAAA,iBACA9H,GAAA+H,SACAtJ,EAAAa,WAAA,sBAAAwF,EAAA9E,GAGA,IAAAgI,GAAAlJ,EAAAmJ,IAAA,oBAAA,SAAAC,EAAAC,GACAA,EACArJ,EAAA4I,gBAAA,GAEA5I,EAAA4I,mBAIAU,EAAAtJ,EAAAmJ,IAAA,oBAAA,SAAAC,EAAAC,GACArJ,EAAAqD,UACArD,EAAAuJ,kBAIAvJ,GAAAwJ,YAAA,SAAAC,GACA9J,EAAAa,WAAA,8BACAiJ,qBAAAA,KAIAzJ,EAAAuJ,eAAA,WACAvJ,EAAAqD,UAAA,EACArD,EAAAsD,oBAAAtD,EAAA8I,YAAA9I,EAAAuD,WACAvD,EAAA8I,UAAAzJ,QAAAiG,KAAAtF,EAAA8I,UAAA9I,EAAAuD,WAEA5D,EAAAa,WAAA,8BAGA,IAAAkJ,GAAA1J,EAAAmJ,IAAA,yBAAA,SAAAC,EAAAC,GACArJ,EAAAqD,UACArD,EAAA+I,wBAIAY,EAAA3J,EAAAmJ,IAAA,+BAAA,SAAAC,EAAAzI,EAAAiJ,GACAjK,EAAAa,WAAA,mBAAAwF,EAAA9E,KAEA2I,EAAA7J,EAAAmJ,IAAA,iCAAA,SAAAC,EAAAzI,EAAAmJ,GACAnK,EAAAa,WAAA,mBAAAwF,EAAA9E,IAIAlB,GAAA+I,oBAAA,WACA,GAAAgB,GAAA/B,GAGA+B,GAAAzE,MACAyB,MAAA,wCAAA7F,EAAA6F,MAAA7F,EAAA6F,MAAA,GACAE,YAAA/F,EAAA+F,YACA+C,KAAA9I,EAAA8I,KAAA9I,EAAA8I,KAAA,iBAIAD,EAAAE,eAAA/F,EAAAgG,OAGAH,EAAAxB,WAAAzI,EAAAyI,WAGAwB,EAAAxD,MAAAA,CAEA,IAAA4D,GAAAvK,EAAA,qBACAsB,GAAAkJ,kBACAD,EAAAjJ,EAAAkJ,gBAEA,IAAAC,GAAApG,EAAAqG,MACAlH,MAAA2G,EACAtG,YAAA0G,EACAI,SAAA,SACAC,UAAA,EACA/D,KAAA,MAGAsD,GAAA3E,gBAAA,SAAAY,EAAAX,GACA5F,EAAAgL,KAAA,uBAAAzE,GACAZ,EAAAlE,EAAAmE,GACAnE,EAAAmE,YAAAW,IACA9E,EAAAmE,UAAAW,IAGA+D,EAAAW,YAAA,WAEAxJ,EAAA6F,MAAAgD,EAAAzE,KAAAyB,MACA7F,EAAA+F,YAAA8C,EAAAzE,KAAA2B,YACA/F,EAAA8I,KAAAD,EAAAzE,KAAA0E,KAGAK,EAAAM,QACAZ,EAAAa,YAIA,IAAAC,GAAA7K,EAAAmJ,IAAA,yBAAA,SAAAC,EAAAzI,EAAA+E,GACA,GAAAoF,GAAAvF,EAAA5E,GACAoK,EAAA1L,QAAA2L,SAAAF,EAAApF,GACA5E,GACA0E,KAAA7E,EACA+E,OAAAqF,EACAhE,MAAAgE,EAAAhE,MAEAhB,GAAA7E,EAAAJ,EAAAkF,GAAAhG,EAAAqD,YAGA4H,EAAAjL,EAAAmJ,IAAA,8BAAA,SAAAC,EAAA8B,EAAAxF,GACA,GAAA/E,GAAAgF,EAAAuF,EACAvK,GAAA+E,OAAArG,QAAA2L,SAAArK,EAAA+E,OAAAA,GACA/E,EAAA6E,KAAA0F,EACAvK,EAAA+E,OAAAqB,QACApG,EAAAoG,MAAApG,EAAA+E,OAAAqB,MAEA,IAAAoE,GAAAnL,EAAAiI,MACAkD,GAAAC,WAAAD,EAAAxK,OAAAA,CACA,IAAA0K,IACAjI,MAAA+H,EACA1H,YAAA7D,EAAA,yBACA6G,KAAA0E,EAAAC,WAAAE,WAAA,KACAf,SAAA,SACAgB,YAAAJ,EAAAC,WAAA,WAAA,oCAAA,kBAGAD,GAAAK,iBAAA,WACA7L,EAAAa,WAAA,yBAAAiL,KAAAC,QAAA/K,OAAA6E,KAAAiG,KAAAC,QAAA/K,OAAA+E,QACA+F,KAAAf,cAGA,IAAAL,GAAApG,EAAAqG,KAAAe,EACAF,GAAAT,YAAA,WACAL,EAAAM,QACAQ,EAAAP,cAKAe,EAAA3L,EAAAmJ,IAAA,qBAAA,SAAAC,EAAAC,IACAnI,EAAA+H,UAAA/H,EAAAwG,WACA1H,EAAAqD,WACArD,EAAAqD,UAAA,EACArD,EAAA8I,UAAAzJ,QAAAiG,KAAAtF,EAAAuD,aACA5D,EAAAa,WAAA,kBAGAR,EAAA4L,oBAKA5L,GAAA6L,aACA3D,gBACA4D,uBAAA,GACAC,cAAA,YAGA/L,EAAA4L,gBAAA,WACA,GACAzL,GADA6L,EAAAhE,GAEA3I,SAAA4M,WAAA/D,IACA/H,KACAd,QAAA2F,QAAAlF,EAAAK,QAAA,SAAAQ,EAAA6E,GACA0C,EAAAvH,EAAA6E,EAAAtE,KACAf,EAAAqF,GAAA7E,MAIAR,EAAAL,EAAAK,QAEA6L,EAAA7L,QAAAA,EAEAd,QAAA2F,QAAAgH,EAAA7L,QAAA,SAAAQ,EAAA6E,GACA7E,EAAAgG,IAAAnB,EACA7E,EAAAmG,WACAnG,EAAAmG,SAAA,mBAKA9G,EAAAwD,QAAAqD,WACAmF,EAAApF,iBAAAA,EAEAoF,EAAAE,oBAAAhF,EAAA/G,EAGA,IAAAgM,GAAAvM,EAAA,iBACAsB,GAAAkL,iBACAD,EAAAjL,EAAAkL,eAGA,IAAAf,IACAjI,MAAA4I,EACAvI,YAAA0I,EACA5B,SAAA,SACA9D,KAAA,MAGA4D,EAAApG,EAAAqG,KAAAe,EAEAW,GAAAK,gBAAArM,EAAA6L,YAMAG,EAAAM,UAAA,SAAA3L,GACA,GAAAG,IACA0E,KAAA7E,EACA+E,OAAAH,EAAA5E,GAEAoF,GAAA7E,EAAAJ,EAAAkF,GAEAqE,EAAAM,QACAqB,EAAApB,WAGAzE,EAAAxF,IACA2F,EAAAtG,EAAAc,IAIAkL,EAAAO,gBAAA,SAAA5L,GACAA,EAAA6L,SACAnN,QAAA6F,YAAAvE,EAAA8L,YACA9L,EAAA8L,WAAA,EAEA9L,EAAA8L,YAAA,EAIA9L,EAAA8L,YAAA9L,EAAA6L,OAAA3L,SACAF,EAAA8L,WAAA,GAGA9L,EAAA+L,SAAA/L,EAAA6L,OAAA7L,EAAA8L,cAIAT,EAAAtB,YAAA,WAEAL,EAAAM,QACAqB,EAAApB,aAIA5K,EAAA+F,oBAAAA,EAEA/F,EAAAmJ,IAAA,UAAA,WACAQ,IACAE,IACAX,IACA2B,IACAI,IACA3B,IACAqC,IACAjC,QAGAhG,KAAA,SAAA1D,EAAAqC,EAAAsK,GAEA,GAAAnJ,IACAwC,KAAA2G,EAAA3G,KACA0B,UAAA,EACAkF,oBAAAxI,EAAAuI,EAAAC,qBACAjF,YAAAvD,EAAAuI,EAAAhF,aACAF,YAAArD,EAAAuI,EAAAlF,aACAZ,WAAAzC,EAAAuI,EAAA9F,YACAiB,aAGAzI,SAAAuE,UAAA+I,EAAAjF,YACAlE,EAAAkE,SAAAtD,EAAAuI,EAAAjF,WAGArI,QAAAuE,UAAA5D,EAAA8H,aACAtE,EAAAsE,UAAA9H,EAAA8H,WAGAtE,EAAAsE,UAAA+E,QAAA7M,EAAAqD,SAEArD,EAAAwD,QAAAA,GAEAC,YAAA7D,EAAA,qBCxqBAP,QAAAC,OAAA,OACAwN,OAAA,uBAAA,UAAA,SAAAC,GAGA,MAAA,UAAA9K,EAAA0E,GACA,GAAAqG,KAKA,OAJA3N,SAAA2F,QAAA/C,EAAA,SAAA1C,EAAA0N,GACA1N,EAAAoH,GAAAsG,EACAD,EAAApI,KAAArF,KAEAwN,EAAA,WAAAC,EAAArG,OCHAtH,QAAAC,OAAA,mBACA4N,SAAA,YAAA,WAEA,GAAA/M,MACAgN,EAAA,GACA5E,KACA6E,EAAA,4CACAC,EAAA,uOAMAC,EAAA,KAGAC,EAAA,WACA,OAAA,EAgEA9B,MAAA9K,OAAA,SAAAqF,EAAArF,GACA,GAAAG,GAAAzB,QAAAmO,QACAC,QAAA,EACAC,WAAA,GACA/M,EACA,IAAAG,EAAAsF,KAAA,CACA,GAAAA,IACAqH,QAAA,EACApH,WAAA,EACAsH,MAAAJ,EAEAlO,SAAAmO,OAAApH,EAAAtF,EAAAsF,MACAtF,EAAAsF,KAAAA,EAGA,MADAjG,GAAA6F,GAAAlF,EACA2K,MAqBAA,KAAA0B,YAAA,SAAAS,GAEA,MADAT,GAAAS,EACAnC,MAuBAA,KAAApG,UAAA,SAAAW,EAAAX,GAEA,MADAkD,GAAAvC,GAAAX,EACAoG,MAeAA,KAAA2B,gBAAA,SAAAS,GAEA,MADAT,GAAAS,EACApC,MAgBAA,KAAA4B,gBAAA,SAAAQ,GAEA,MADAR,GAAAQ,EACApC,MAeAA,KAAA6B,yBAAA,SAAAQ,GAEA,MADAR,GAAAQ,EACArC,MAmBAA,KAAAsC,KAAA,WACA,GAAAvM,GAAA,CAEA,QACArB,QAAAA,EACAgN,YAAAA,EACA5E,WAAAA,EACA6E,gBAAAA,EACAC,gBAAAA,EACAC,yBAAAA,EAWA3L,GAAA,WACA,OAAA,GAAAqM,OAAAC,UAAA,OAAAzM,GAcAT,SAAA,SAAAY,EAAAuM,GAEA,MAAA,IAAA,GAAAvM,EAAAwM,aAAAD,EAAAC,gBCnQA9O,QAAAC,OAAA,OACAE,UAAA,mBAAA,WAAA,kBAAA,iBAAA,SAAAE,EAAAE,EAAAwO,GAGA,OACAlL,SAAA,IACAC,SAAA,EACAC,OACA6B,IAAA,IACA1B,SAAA,IACAF,SAAA,IACAC,mBAAA,IACAE,QAAA,KAEAC,YAAA7D,EAAA,qBACA8D,KAAA,SAAA1D,EAAAqC,GACAhD,QAAAuE,UAAA5D,EAAAiF,IAAA3D,UAAAjC,QAAAwE,QAAA7D,EAAAiF,IAAA3D,UACA5B,EAAA0O,GAAApO,EAAA,SAAA8D,GACAzB,EAAA0B,OAAAD,UCjBAzE,QAAAC,OAAA,OACAE,UAAA,uBAAA,kBAAA,SAAAI,GAEA,QAAAyO,GAAAC,GACA,GAAAA,EAAAnN,MAAAmN,EAAAnN,KAAAN,OAAA,EAAA,CACA,GAAA0N,GAAA,IAAAD,EAAAnN,KAAAN,MACAxB,SAAA2F,QAAAsJ,EAAAnN,KAAA,SAAA8D,GACAA,EAAAuJ,OACAD,OAAAA,EAAA,KAGAtJ,EAAA3D,SACAjC,QAAA2F,QAAAC,EAAA3D,QAAA,SAAArB,GACAoO,EAAApO,QAOA,QAAAwO,GAAAzO,GACA,GAAAqF,GAAAhG,QAAAiG,KAAAtF,EAAAqF,UACAgJ,GAAAhJ,GACArF,EAAA0O,QAAArJ,EAGA,OACAnC,SAAA,IACAC,SAAA,EACAC,OACA4C,KAAA,IACAX,UAAA,IACAsJ,SAAA,KAEAlL,YAAA7D,EAAA,yBACA8D,KAAA+K,MCpCApP,QAAAC,OAAA,OACAE,UAAA,oBAAA,OAAA,KAAA,gBAAA,WAAA,cAAA,YAAA,YAAA,aAAA,SAAAC,EAAAmP,EAAAC,EACAnP,EAAAoP,EAAAC,EAAAjP,EAAAqE,GAEA,QAAA6K,GAAA3M,EAAA4M,GACAxP,EAAAyC,KAAA+M,GACA5M,EAAA6M,KAAApP,EAAAsN,gBAAAjK,QAAA,MAAA8L,IAGA,QAAAE,GAAAnP,EAAAqC,EAAA+M,EAAAC,GAqCA,QAAAC,GAAA9J,GACA,GAAA,WAAAA,EACA,OACAzD,KAAAwN,EAAA7J,OAAAoE,aAAA/H,KACAyN,GAAAD,EAAA7J,OAAAoE,aAAA0F,GAGA,IAAAzN,GAAA5C,EAAAsQ,SAAAC,SAAA,EAAAlK,EACA,QACAzD,KAAAA,EAAA4N,IA7CA,GAAAzO,GAAAlB,EAAAkB,MACA0O,EAAA5P,EAAA4P,QAEAC,EAAA7P,EAAA6P,MAEAN,EAAAH,CACA,IAAAlO,EAIA,GAAA0O,EAaA,GAAAL,EAAA,CACA,GAAAO,GAAAP,EAAAQ,OAAA3Q,GAAA,OAAAmQ,EAAAQ,KACAC,EAAAT,EAAAU,eAAA7Q,GAAA,OAAAmQ,EAAAU,YACAH,IAAAE,GAAAX,IAAAhQ,QAAA4M,WAAAsD,EAAAW,YACAX,EAAAY,EAAAnQ,EAAAqC,EAAA+M,EAAAlO,EAAA0O,EAAAC,GAEAN,EAAAW,iBAGAX,GAAAY,EAAAnQ,EAAAqC,EAAA+M,EAAAlO,EAAA0O,EAAAC,OArBA3O,GAAA6F,MACA5C,EAAA,oCACA4C,MAAA7F,EAAA6F,QACAqJ,KAAA,SAAAC,GACArB,EAAA3M,EAAAgO,KAGAlM,EAAA,gCAAAiM,KAAA,SAAAC,GACArB,EAAA3M,EAAAgO,SAZAlM,GAAA,gCAAAiM,KAAA,SAAAC,GACArB,EAAA3M,EAAAgO,IAiEA,OAxBAd,KACAA,EAAA7J,SACA6J,EAAA7J,OAAA4K,cAAA,WACA,GAAAxG,GAAAyF,EAAA7J,OAAAoE,YACA,IAAAA,GAAAA,EAAAtE,KAAA,CACA,GAAA+K,GAAAjB,EAAAxF,EAAAtE,KAEA,KAAArG,EAAAqR,KAAAjB,EAAA7J,OAAAoE,aAAA2G,SAAA,CACA,IAAA,GAAA9J,KAAA4J,GACAA,EAAA5J,GAAAxH,EAAAsQ,OAAAc,EAAA5J,IAAA+J,QAEAH,GAAA,SAAA,EAGA,MAAAA,MAKAV,IACAN,EAAA1C,UAAAgD,EAAAhD,QACA0C,EAAAzH,UAAA+H,IAGAN,EAGA,QAAAY,GAAAnQ,EAAAqC,EAAA+M,EAAAlO,EAAA0O,EAAAC,GAEAxN,EAAA6M,KAAApP,EAAAuN,gBAGA,IAAAsD,GAAA3Q,EAAAiI,MAGA/G,GAAAwE,SACAxE,EAAAwE,WAGAiL,EAAAjL,OAAAxE,EAAAwE,OACAiL,EAAA9D,QAAAgD,GAAAA,EAAAhD,QAEAgD,IACAc,EAAAd,MAAAA,GAGAc,EAAAC,iBAAAxB,GAAAA,EAAAwB,iBAAAxB,EAAAwB,iBAAAxR,CAGA,IAAAyR,IACA7Q,OAAA2Q,EACAhQ,OAAAO,EACAwE,OAAAxE,EAAAwE,QAIAoL,IA+CA,OA9CAA,GAAAC,KAAAlC,EAAAmC,YAAApB,GACAA,EAAAqB,SACA5R,QAAA2F,QAAA4K,EAAAqB,QAAA,SAAAC,EAAAvK,GACAtH,QAAA8R,SAAAD,GACAJ,EAAAnK,GAAAoI,EAAAqC,IAAAF,GAEAJ,EAAAnK,GAAAoI,EAAAsC,OAAAH,EAAAA,EAAAL,KAMAjC,EAAA0C,IAAAR,GAAAV,KAAA,SAAAmB,GACAlS,QAAAmO,OAAA+D,EAAAV,GAGAjB,EAAA4B,YACAb,EAAAf,EAAA4B,WAAAD,EAIA,IAAA1D,GAAA0D,EAAAR,IAEA,IADA1O,EAAA6M,KAAArB,GACA+B,EAAA7H,WAAA,CACA,GAAA0J,GAAA3C,EAAAc,EAAA7H,WAAAwJ,EACA3B,GAAA8B,eACAf,EAAAf,EAAA8B,cAAAD,GAEApP,EAAAsP,WAAAC,KAAA,0BAAAH,GAEA/R,EAAA2C,EAAAwP,YAAAlB,IACA,SAAAmB,GAEA,GAAA7C,GAAA,2CACA9K,GAAA8K,GACA6C,OAAAA,EAAA,KAAAA,EAAAA,IACA1B,KAAA,SAAAC,GACArB,EAAA3M,EAAAgO,OAKAjB,GACAA,EAAAxE,WAGA+F,EAGA,OACAxN,SAAA,EACAD,SAAA,KACAsE,YAAA,EACApE,OACAlC,MAAA,IACA0O,QAAA,IACAC,MAAA,KAEAnM,KAAA,SAAA1D,EAAAqC,GACA,GAAA+M,GAAAD,EAAAnP,EAAAqC,EAAA,MACA0P,EAAA/R,EAAAmJ,IAAA,sBAAA,WACAiG,EAAAD,EAAAnP,EAAAqC,EAAA+M,GAAA,KAGA4C,EAAAhS,EAAAmJ,IAAA,eAAA,WACAiG,EAAAD,EAAAnP,EAAAqC,EAAA+M,GAAA,IAGApP,GAAAmJ,IAAA,UAAA,WACA4I,IACAC,WCvLA3S,QAAAC,OAAA,OACA2S,QAAA,iBAAA,QAAA,KAAA,OAAA,iBAAA,YAAA,SAAAC,EAAAtD,EAAAuD,EAAAC,EAAAtS,GAGA,QAAAuS,GAAAC,GACA,GAAAC,GAAAD,CAQA,OAPAA,GAAA/K,QAAA,kBAAA,IACAgL,EAAAD,EAAAnP,QAAA,gBAAArD,EAAAqN,aACAhK,QAAA,KAAA,KACA,IAAAoP,EAAAhL,QAAA,OACAgL,EAAAA,EAAAC,UAAA,KAGAD,EAGA,GAAAE,KA6BA,OA3BAA,GAAAzB,YAAA,SAAArQ,GACA,GAAA+R,GAAA9D,EAAA+D,OAEA,IAAAhS,EAAAkN,SACA6E,EAAAzB,QAAAtQ,EAAAkN,cACA,IAAAlN,EAAA8C,YAAA,CAEA,GAAAmP,GAAAR,EAAAhB,IAAAzQ,EAAA8C,YACA,IAAAmP,EACAF,EAAAzB,QAAA2B,OACA,CACA,GAAAN,GAAAH,EAAAU,sBAAAR,EAAA1R,EAAA8C,aACAyO,GAAAd,IAAAkB,GACAQ,QAAA,SAAAC,GAEAX,EAAAY,IAAArS,EAAA8C,YAAAsP,GACAL,EAAAzB,QAAA8B,KAEAjN,MAAA,WACA4M,EAAAO,OAAA,8BAKA,MAAAP,GAAAxB,SAGAuB,KChDApT,QAAAC,OAAA,OACAE,UAAA,aAAA,YAAA,KAAA,OAAA,YAAA,aAAA,YAAA,YAAA,kBAAA,SAAA,SAAAuP,EAAAH,EAAAnP,EAAAwE,EAAAtE,EAAAuT,EAAApT,EAAAF,EAAAuT,GACA,QAAAC,GAAApT,GACA,GAAAoL,GAAApL,EAAAoL,UAEA,IAAAA,EAAA,CACA,GAAAtK,GAAAhB,EAAAK,QAAAiL,EAAA5F,KACA,IAAA1E,EAAA,CAEAsK,EAAArE,QACAqE,EAAArE,MAAAjG,EAAAiG,OAGAqE,EAAA5C,mBACA4C,EAAA5C,iBAAA5I,EAAA,oBACAkB,EAAA0H,mBACA4C,EAAA5C,iBAAA1H,EAAA0H,mBAIA4C,EAAAhB,kBACAgB,EAAAhB,gBAAAxK,EAAA,mBACAkB,EAAAsJ,kBACAgB,EAAAhB,gBAAAtJ,EAAAsJ,kBAIAgB,EAAA5C,mBACA4C,EAAAsC,UAAA5M,EAAA4M,WAGAtC,EAAAiI,aACAjI,EAAAiI,WAAAvS,EAAAuS,YAIAjI,EAAApK,MACAoK,EAAApK,IAAAlB,EAAA6B,MAIA3B,EAAAW,OAAAtB,QAAAiG,KAAAxE,EAGA,IAAA4E,GAAA0F,EAAA1F,MACAA,GACArG,QAAA8R,SAAAzL,KACAA,EAAArG,QAAAiU,SAAA5N,IAGAA,KAGAA,EAAA6N,eACA7N,EAAA6N,aAAA,KAGA,mBAAAvT,GAAAW,OAAA6S,oBACAxT,EAAAW,OAAA6S,mBAAA,GAGA,mBAAAxT,GAAAW,OAAA8S,qBACAzT,EAAAW,OAAA8S,oBAAA,GAIAzT,EAAA0F,OAAAA,EAGA1F,EAAA0T,cACA1T,EAAA0T,eACA1T,EAAA0T,YAAAC,YAAA7S,EAAA8S,aAAA,GAAA9S,EAAA8S,eAIAnU,GAAAyC,KAAA,yBAAAkJ,EAAA5F,UAGA/F,GAAAoU,MAAA,yDAIA,QAAAC,GAAA9T,EAAAqC,GAoFA,QAAA0R,KACArO,GAAAA,EAAA6N,cAAA,MAAA7N,EAAA6N,eACAlU,QAAAuE,UAAAoQ,KACAd,EAAAe,OAAAD,GACAA,EAAA5U,GAEA4U,EAAAd,EAAAlT,EAAAyN,OAAA,IAAA/H,EAAA6N,eAzFA,GAAAnI,GAAApL,EAAAoL,UACA,KAAAA,EAEA,WADA3L,GAAAoU,MAAA,mBAGA7T,GAAA0F,SACA1F,EAAA0F,UAGA,IAAAA,GAAA1F,EAAA0F,OAGAwO,EAAA,WACA,GAAAjU,GAAAD,EAAA2D,GACA,IAAA1D,EAAA,CACA,GAAAS,GAAAT,EAAAE,QAAAoH,QAAA6D,EACA1K,IAAA,GACAT,EAAAE,QAAAE,OAAAK,EAAA,GAGA2B,EAAA8R,SACAxU,EAAAa,WAAA,8BAGAR,GAAAmU,OAAA,WACA,GAAAnU,EAAAwD,QAAAoJ,oBAAA,CACA,GAAAwH,GAAApU,EAAAiI,OAEAoM,EAAAzU,EAAA,oBACAwL,GAAAiJ,oBACAA,EAAAjJ,EAAAiJ,kBAEA,IAAAhJ,IACAjI,MAAAgR,EACA3Q,YAAA4Q,EACA9J,SAAA,UAEAF,EAAApG,EAAAqG,KAAAe,EAEA+I,GAAA1J,YAAA,WACAL,EAAAM,QACAyJ,EAAAxJ,YAEAwJ,EAAAE,aAAA,WACAJ,IACAE,EAAA1J,mBAGAwJ,MAKAlU,EAAAuU,MAAA,WACAvU,EAAAqD,UACArD,EAAAQ,WAAA,gBAIAR,EAAAwU,0BAAA,WAEA,GAAA9O,EAAA+O,UACA,OAAA,CACA,IAAA3H,GAAApH,EAAAoH,MACA,OAAA,gBAAAA,GACAA,EAAAjM,OAAA,EAEA,gBAAAiM,KACAA,EAAAvN,MAAAsB,OAAA,GAAAiM,EAAA4H,MAKA1U,EAAA2U,iBAAA,WACA3U,EAAAqD,UAEArD,EAAA0L,QAAAlL,WAAA,0BAKA,IAAAwT,EAYAhU,GAAAyN,OAAA,SAAAmH,GACAA,EACA5U,EAAAQ,WAAA,eAAAoU,GAEA5U,EAAAQ,WAAA,gBAGAuT,KAIAA,IAEA1R,EAAAW,GAAA,WAAA,WACAkQ,EAAAe,OAAAD,KAGAhU,EAAA8M,QACAvN,MAAA,IAEAS,EAAA6U,MACAtV,MAAA,GACAuV,UAAA,IAGA9U,EAAA+U,eAAA,CACA,IAAAjI,GAAApH,EAAAoH,MACA,iBAAAA,IAAAA,EAAA4H,KAAA5H,EAAA4H,IAAA7T,OAAA,GACAb,EAAAgV,QACAN,IAAA5H,EAAA4H,IACAO,KAAAnI,EAAAvN,OAEAS,EAAA+U,eAAA,GACA,gBAAAjI,IACA9M,EAAAgV,QACAE,MAAApI,GAEA9M,EAAA+U,eAAA,GACA,gBAAAjI,IAAAA,EAAAqI,QACAnV,EAAAgV,QACAI,aAAAtI,EAAAqI,QAEAnV,EAAAgV,OAAAG,UACA9V,QAAA2F,QAAA8H,EAAAqI,OAAA,SAAAE,EAAA1O,GACA3G,EAAAgV,OAAAG,OAAAvQ,KAAAyQ,EAAArP,QAEAhG,EAAA+U,eAAA,GAEA/U,EAAAgV,QACAE,MAAApI,EAAA,IAIA9M,EAAAsV,aAAA,SAAAC,GACAvV,EAAA+U,eAAAQ,GAEAvV,EAAAwV,iBAAA,EACAxV,EAAAyV,WAAA,WACAzV,EAAAwV,gBAAAxV,EAAAwV,mBAAA,GAGAxV,EAAA0V,iBAAA,EAEA1V,EAAA2V,gBAAA,WACA,GAAAhV,IACAyK,WAAAA,EACAwK,QAAAvT,EAGA1C,GAAAa,WAAA,+BAAAG,EAAAX,EAAA0F,OAAAoH,QACA9M,EAAAyN,QAAA,IAEAzN,EAAA6V,gBAAA,SAAAlP,GACA3G,EAAAgV,OAAAI,aAAApV,EAAAgV,OAAAI,aAAApV,EAAAgV,OAAAI,gBACApV,EAAAgV,OAAAI,aAAAxQ,MACAoB,KAAAW,EACApH,MAAA,MAIAS,EAAA8V,mBAAA,WACA9V,EAAAgV,OAAAI,cAAApV,EAAAgV,OAAAI,aAAAvU,OAAA,IACAb,EAAAgV,OAAAN,IAAA1U,EAAAgV,OAAAC,KAAA,GAEAjV,EAAA0F,OAAAoH,QACAvN,OACAwW,QAEAZ,OAAAnV,EAAAgV,OAAAI,cAEA/V,QAAA2F,QAAAhF,EAAAgV,OAAAI,aAAA,SAAAC,EAAA1O,GACA,GAAA0O,EAAA9V,MAAA,CACA,GAAAyW,KACAA,GAAAX,EAAArP,MAAAqP,EAAA9V,MACAS,EAAA0F,OAAAoH,OAAAvN,MAAAwW,IAAAnR,MACAoR,KAAAA,OAKAhW,EAAA0F,OAAAoH,OAAAvN,MAAA0W,KAAAC,UAAAlW,EAAA0F,OAAAoH,OAAAvN,QAGAS,EAAA2V,mBAKA3V,EAAAmW,aAAA,SAAA5W,EAAA2B,GACA7B,QAAA2F,QAAAhF,EAAAgV,OAAAI,aAAA,SAAAC,EAAA1O,GACA0O,EAAArP,OAAAzG,GACAS,EAAAgV,OAAAI,aAAA/U,OAAAsG,EAAA,KAGA,IAAA3G,EAAAgV,OAAAI,aAAAvU,SACAb,EAAA0F,OAAAoH,YAKA9M,EAAAoW,mBAAA,WACApW,EAAAgV,OAAAE,MAAA,GACA,KAAAlV,EAAAgV,OAAAC,MAAA,OAAAjV,EAAAgV,OAAAC,OAAA5V,QAAA8R,SAAAnR,EAAAgV,OAAAC,OAAA,IAAAoB,OAAAC,KAAAtW,EAAAgV,OAAAC,MAAApU,OACAb,EAAA0F,OAAAoH,QACA4H,IAAA,GACAnV,MAAA,IAGAS,EAAA0F,OAAAoH,QACA4H,IAAA1U,EAAAgV,OAAAN,IACAnV,MAAAS,EAAAgV,OAAAC,MAGAjV,EAAA2V,mBAIA3V,EAAAuW,YAAA,SAAAnN,GACApJ,EAAA2V,mBAGA3V,EAAAwW,qBAAA,WACAxW,EAAAgV,OAAAN,IAAA1U,EAAAgV,OAAAC,KAAA,GACAjV,EAAA0F,OAAAoH,OAAA9M,EAAAgV,OAAAE,MACAlV,EAAA2V,kBAGA3V,GAAAmJ,IAAA,sBAAA,SAAAC,EAAAqN,GACAzW,EAAA0F,OAAAoE,aAAA2M,EAAAA,EAAA/Q,EAAAoE,gBAAA2M,CACA,IAAA9V,IACAyK,WAAAA,EACAwK,QAAAvT,EAEA1C,GAAAa,WAAA,iCAAAG,EAAAX,EAAA0F,OAAAoE,cACA9J,EAAAyN,UAGAzN,GAAA0W,MAAA,SAAAtN,GACA,GAAAuN,GAAAvN,EAAAwN,QAAAxN,EAAAwN,QAAAxN,EAAAyN,KACA,MAAAF,IACA,IAAA3W,EAAA+U,gBACA/U,EAAAoW,qBACA,IAAApW,EAAA+U,gBACA/U,EAAAwW,uBACA,IAAAxW,EAAA+U,gBACA/U,EAAA8V,sBAGA,KAAAa,IACA3W,EAAA0V,gBAAA1V,EAAA0V,mBAAA,IAKA1V,EAAA8W,mBACA9W,EAAA+W,mBAAA,WACA/W,EAAA0F,OAAAoR,gBACA9W,EAAA8W,gBAAA9W,EAAA0F,OAAAoR,gBAEApR,EAAAsR,kBAAAC,WAAA,IAAA7G,KAAA,SAAA+E,GACAnV,EAAA8W,gBAAA3B,EACAnV,EAAAI,WAFAsF,SAGA,SAAAwR,GACAzX,EAAAqG,MAAAoR,MAMAlX,EAAAoV,gBACApV,EAAAmX,gBAAA,WACAzR,EAAAsR,kBAAAC,WAAA,IAAA7G,KAAA,SAAA+E,GACAnV,EAAAoV,aAAAD,EACAnV,EAAAI,WAFAsF,SAGA,SAAAwR,GACAzX,EAAAqG,MAAAoR,MAKAlX,EAAAoX,eAAA,WACA,MAAApX,GAAA8W,iBAAApR,EAAAmP,MAAA,oBAAA7U,EAAAoL,WAAA5F,MAAA,IAAAxF,EAAA+U,gBAGA/U,EAAAqX,iBAAA,WACA,MAAA,oBAAArX,EAAAoL,WAAA5F,MAAA,IAAAxF,EAAA+U,gBAAA/U,EAAAgV,OAAAI,cAAApV,EAAAwV,kBAAAxV,EAAAqD,UAGArD,EAAAsX,gBAAA,WACA,GAAAxC,GAAApP,EAAAmP,KAAAC,SACA,gBAAAA,EACA9U,EAAA0F,OAAAmP,KAAAC,UAAA,YACA,cAAAA,IACA9U,EAAA0F,OAAAmP,KAAAC,UAAA,cAEA9U,EAAAyN,UAGAzN,EAAAuX,iBAAA,WAGAvX,EAAAyN,UAGAzN,EAAAwX,WAAA,WACArE,EAAAsE,WAAAzX,EAAAgV,OAAAN,KAAA,IACAtE,KAAA,SAAAwB,GAEA5R,EAAAgV,OAAAC,KAAA5V,QAAAqY,OAAA9F,EAAA9E,OAAA,KAAA,GACA9M,EAAA2X,aAAA,GACA3X,EAAA8M,OAAAhH,MAAA,OALAqN,SAOA,SAAA+D,GACAlX,EAAA8M,OAAAhH,MAAAoR,KAMAlX,EAAA4X,qBAAA,WACA,GAAAA,IACAC,QAAA1E,EAAA2E,wBACAhB,gBAAApR,EAAAsR,kBAGA,OAAAY,IAKA5X,EAAA+X,iBAGA/X,EAAA4Q,kBACAoH,iBAAAhY,EAAA+X,cACAE,WAAA,SAAAtR,EAAAuR,GAKA,MAJAlY,GAAA+X,cAAApR,KAAAtH,QAAA6F,YAAAgT,KACAlY,EAAA+X,cAAApR,GAAAiL,KAAAsG,KAGAlY,EAAA+X,cAAApR,IAEAwR,cAAA,WACA,MAAA9B,QAAAC,KAAAtW,EAAA+X,eAAAlX,SAIAb,EAAAoY,oBAAA,WACA,GAAAC,GAAArY,EAAAiI,MAEAoQ,GAAAC,gBAAA5S,EAAA4S,gBAEAD,EAAAN,iBACA1Y,QAAA2F,QAAAhF,EAAA+X,cAAA,SAAAxY,EAAAoH,GACA0R,EAAAN,cAAAnT,MACA+B,IAAAA,EACApH,MAAAA,MAIA8Y,EAAAL,kBACArJ,SAAA0J,EAAAN,cAGA,IAAAQ,GAAA3Y,EAAA,wBACAyL,GACAjI,MAAAiV,EACA5U,YAAA8U,EACAhO,SAAA,SACA9D,KAAA,KACA7D,WAAA,GAGAyH,EAAApG,EAAAqG,KAAAe,EAEAgN,GAAAG,iBAAA,WACAH,EAAAL,kBACArJ,SAAA0J,EAAAN,gBAIAM,EAAAI,eAAA,WACAJ,EAAAL,iBAAArJ,aAIA0J,EAAA9B,YAAA,SAAA/Q,GACA,GAAAkT,GAAAL,EAAAC,gBAAAK,aAAAN,EAAAL,iBAAArJ,SAAAnJ,EAEAnG,SAAA6F,YAAAwT,IAAA,OAAAA,IACA1Y,EAAA+U,eAAA,EACA5B,EAAAsE,WAAAiB,GAAAtI,KAAA,SAAAwB,GACA5R,EAAAgV,OAAAN,IAAAgE,EACA1Y,EAAAgV,OAAAC,KAAA5V,QAAAqY,OAAA9F,EAAA9E,OAAA,KAAA,GACA9M,EAAA2X,aAAA,GACA3X,EAAA8M,OAAAhH,MAAA,KAEA9F,EAAAoW,uBANAjD,SAOA,SAAA+D,GACAlX,EAAA8M,OAAAhH,MAAAoR,MAKAmB,EAAA1D,iBAAA,SAAAiE,GACA5Y,EAAAqD,UACArD,EAAA0L,QAAAlL,WAAA,0BACAuX,cAAAM,EAAAL,iBAAArJ,SACAnJ,KAAAoT,KAMAP,EAAAQ,kBAAA,WACA,GAAAC,KACAzZ,SAAA2F,QAAAqT,EAAAL,iBAAArJ,SAAA,SAAAiD,EAAAvK,GACAyR,EAAAlH,EAAAjL,MACAiL,KAAAA,EAAArS,MAAAqS,KACAmH,QAAAnH,EAAArS,MAAAwZ,WAIA/Y,EAAA+X,cAAA1Y,QAAAiG,KAAAwT,GACA9Y,EAAAgZ,oBAAA3C,OAAAC,KAAAtW,EAAA+X,eAAAlX,OAEAb,EAAA4Q,iBAAAqI,YACAjZ,EAAAQ,WAAA,yBAAAR,EAAA4Q,kBAEAvG,EAAAM,QACA0N,EAAAzN,YAIAyN,EAAA3N,YAAA,WACAL,EAAAM,QACA0N,EAAAzN,aAMA5K,EAAAoG,KAAA,WAwBA,QAAA8S,GAAAC,GACA,GAAAjI,EACA,IAAA,iBAAAiI,GAAA,CACA,GAAAzG,GAAA9D,EAAA+D,OACAwG,GACAzG,EAAAzB,UAEAyB,EAAAO,SAEA/B,EAAAwB,EAAAxB,YAEAA,GAAAtC,EAAAwK,KAAAD,EAEA,OAAAjI,GApCA,GAAAmI,GAAArZ,EAAAiI,MACAoR,GAAAjO,WAAA/L,QAAAiG,KAAA8F,EAEA,IAAAjB,GAAAvK,EAAA,kBACAwL,GAAAhB,kBACAD,EAAAiB,EAAAhB,gBAGA,IAAAiB,IACAjI,MAAAiW,EACA5V,YAAA0G,EACAI,SAAA,SACA9D,KAAA,MAGA4D,EAAApG,EAAAqG,KAAAe,EAEAgO,GAAA3O,YAAA,WACAL,EAAAM,QACA0O,EAAAzO,YAoBAyO,EAAAC,WAAA,WAEAD,EAAAE,gBAAA,IAGA,IAKAC,GALA7Y,EAAAX,EAAAW,MAOA6Y,GADA7Y,EAAAyF,KACAzF,EAAAyF,KAAAuH,MAEA,WACA,OAAA,EAKA,IAAA4D,IACA5Q,OAAAA,EACAyK,WAAAiO,EAAAjO,WACA1F,OAAA2T,EAAAjO,WAAA1F,QAIAyT,EAAApK,EAAAsC,OAAAmI,EAAAA,EAAAjI,EACA2H,GAAAC,GAAA/I,KAAA,WACAhF,EAAArE,MAAAsS,EAAAjO,WAAArE,MACA1H,QAAAmO,OAAApC,EAAA1F,OAAA2T,EAAAjO,WAAA1F,QAEA2T,EAAA3O,cAEA/J,EAAAyF,MAAAzF,EAAAyF,KAAAqH,QAEAzN,EAAAQ,WAAA,wBAEA,SAAA0W,GACAA,EACAmC,EAAAE,gBAAArC,EAEAmC,EAAAE,gBAAA,qCAUA,OACApW,SAAA,EACAD,SAAA,KACAsE,YAAA,EACA/D,YAAA3D,EAAAwN,yBAAAxN,EAAAwN,yBAAA1N,EAAA,cACAwD,OACAgI,WAAA,IACAzH,IAAA,UACAN,SAAA,IACAG,QAAA,IACAkQ,YAAA,KAEA3L,YAAA,SAAA,SAAA/H,GACA,GAAAyZ,GAAAzZ,EAAAmJ,IAAA,6BAAA,SAAAC,EAAAsQ,GACA1Z,EAAA0T,YAAAC,YAAA+F,EAAAjQ,uBAGAkQ,EAAA3Z,EAAAmJ,IAAA,yBAAA,SAAAC,EAAAzI,GACAb,EAAAiB,SAAAf,EAAAoL,WAAApK,IAAAL,EAAAK,MACAhB,EAAAoG,SAIAwT,EAAA5Z,EAAAmJ,IAAA,gBAAA,SAAAC,EAAAzI,GACAX,EAAA6M,SAAA,IAGAgN,EAAA7Z,EAAAmJ,IAAA,sBAAA,SAAAC,EAAAzI,GACAX,EAAA6M,SAAA,IAGAiN,EAAA9Z,EAAAmJ,IAAA,6BAAA,SAAAC,EAAAzI,GACAX,EAAA6M,SAAA,GAGA7M,GAAA+Z,cAAA,SAAAjZ,EAAAsK,GACA,GAAA4O,GAAA5O,EAAAiI,YAAA,EAMA,OAHAvS,IAAAA,EAAA4M,YAAA1N,EAAAqD,WACA2W,GAAA,wBAEAA,GAGAha,EAAAia,eAAA,WACA,GAAA7O,GAAApL,EAAAoL,WACAD,EAAAnL,EAAAiI,OACAoD,GACAjI,MAAA+H,EACA1H,YAAA7D,EAAA,yBACA6G,KAAA2E,EAAAE,WAAA,KACAf,SAAA,SACAgB,YAAAH,EAAA,WAAA,oCAAA,mBAGAf,EAAApG,EAAAqG,KAAAe,EACAF,GAAAT,YAAA,WACAL,EAAAM,QACAQ,EAAAP,aAIA5K,EAAAka,WAAA,aAIAla,EAAAma,gBAAA,SAAA1T,GACAA,EAAA,IACA,IAAA2T,GAAAnW,EAAAqG,MACA1H,WAAA,EACAa,YAAA,wBACAsE,YAAA,SAAA,oBAAA,cAAA,SAAA/H,EAAAqa,EAAAC,GACAta,EAAAua,SACAva,EAAAua,MAAA9P,KAAA6P,EACAta,EAAAwa,GAAA,WACAH,EAAA1P,WAGAlE,KAAAA,EACAwK,SACAqJ,YAAA,WACA,MAAAta,GAAA0F,OAAA6U,SAKAH,GAAAjB,OAAA/I,KAAA,SAAAqK,GACAza,EAAA2O,SAAA8L,GACA,WACAhb,EAAAgL,KAAA,uBAAA,GAAAuD,UAIAhO,EAAA0a,iBAAA,SAAAC,GACA3a,EAAA4a,MAAA,oBACAC,eAAA,WAAAF,EACAG,SAAA,YAAA,GAAA9M,OAAAC,YAIA,IAwBA8M,GAAA,SAAAC,EAAAlO,GACA,GAGAmO,GAHAC,GACAC,MASA,OANAH,GAAAhW,QAAA,SAAAoW,GACAH,KACAA,EAAAG,EAAAC,aACAJ,EAAAG,EAAAC,UAAAD,EAAApV,MAAAhG,EAAA0F,OAAAoH,OACAoO,EAAAC,GAAAvW,KAAAqW,KAEAC,EAGAlb,GAAAsb,YAAA,WACA,GAEAC,GAFAja,EAAAtB,EAAA0F,OAAApE,QACAka,EAAAxb,EAAA0F,OAAAoH,OAEA2O,KACAC,EAAA1b,EAAA0F,OAAAmP,KAAA7U,EAAA0F,OAAAmP,KAAAzV,CACA,IAAAY,EAAA0F,OAAAoE,aAAA,CACA,GAAA6R,GAAA3b,EAAA0F,OAAAkW,oBAAA5b,EAAA0F,OAAAoE,aACA6R,IAAAA,EAAA5F,MACAwF,GACAxF,IAAA4F,EAAA5F,MAIA,GAAAjJ,EACA0O,GAAAjc,OAAAic,EAAAjc,MAAAsB,OAAA,EACAiM,EAAAmJ,KAAA4F,MAAAL,EAAAjc,OACA,gBAAAic,IAAA,KAAAA,EAAAM,SACAhP,EAAAiO,EAAA/a,EAAA0F,OAAAsV,kBAAAQ,IAIAC,EAFAF,EACAzO,GAEAiJ,KAAAwF,EAAAzO,IAGAyO,EAGAzO,EAEA9M,EAAAQ,WAAA,eACAc,QAAAA,EACAwL,OAAA2O,EACAC,MAAAA,KAIA1b,EAAA+b,WAAA,WACA/b,EAAAQ,WAAA,cAGA,IAAAwb,GAAAhc,EAAAmJ,IAAA,qBAAA,SAAAC,EAAAnH,GACAjC,EAAA+X,cAAA9V,EAAA0E,OACA3G,EAAA+X,cAAA9V,EAAA0E,MACAiL,KAAA3P,EAAA2P,KACAmH,QAAA9W,EAAA8W,SAEA/Y,EAAAgZ,oBAAA3C,OAAAC,KAAAtW,EAAA+X,eAAAlX,OACAoB,EAAAgW,YAAA,EACAjY,EAAA4Q,iBAAAqI,SAAAhX,EACAjC,EAAAQ,WAAA,yBAAAR,EAAA4Q,qBAKAqL,EAAAjc,EAAAmJ,IAAA,0BAAA,SAAAC,EAAAnH,GACAjC,EAAA+X,cAAA9V,EAAA0E,aACA3G,GAAA+X,cAAA9V,EAAA0E,KACA3G,EAAAgZ,oBAAA3C,OAAAC,KAAAtW,EAAA+X,eAAAlX,OACAoB,EAAAgW,YAAA,EACAjY,EAAA4Q,iBAAAqI,SAAAhX,EACAjC,EAAAQ,WAAA,yBAAAR,EAAA4Q,oBAIA5Q,GAAAmJ,IAAA,WAAA,WACAsQ,IACAE,IACAC,IACAC,IACAC,IACAkC,IACAC,QAGAC,QAAA,WAMA,OACAC,IAAA/I,EACAgJ,KAAAtI,QC/2BAzU,QAAAC,OAAA,OAAA+c,KAAA,iBAAA,SAAAjK,GAAAA,EAAAY,IAAA,yCAAA,2QACAZ,EAAAY,IAAA,uCAAA,o6EACAZ,EAAAY,IAAA,sCAAA,2EACAZ,EAAAY,IAAA,wCAAA,2qDACAZ,EAAAY,IAAA,kCAAA,uWACAZ,EAAAY,IAAA,0CAAA,2KACAZ,EAAAY,IAAA,mCAAA;AACAZ,EAAAY,IAAA,sCAAA,4hBACAZ,EAAAY,IAAA,oCAAA,olFACAZ,EAAAY,IAAA,0CAAA,24BACAZ,EAAAY,IAAA,yCAAA,ixHACAZ,EAAAY,IAAA,qCAAA,0sICigFAZ,EAAeY,IAAI,+BAA+B,6oLAC/C7T","file":"opengate-angular-dashboard-framework-tpls.min.js","sourcesContent":["/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf', ['adf.provider', 'ui.bootstrap', 'opengate-angular-js'])\n    .value('adfTemplatePath', '../src/templates/')\n    .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\n    .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\n    .value('adfVersion', '<<adfVersion>>');","/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardColumn', function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\n    'use strict';\n\n    /**\n     * moves a widget in between a column\n     */\n    function moveWidgetInColumn($scope, column, evt){\n      var widgets = column.widgets;\n      // move widget and apply to scope\n      $scope.$apply(function(){\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\n      });\n    }\n\n    /**\n     * finds a widget by its id in the column\n     */\n    function findWidget(column, index){\n      var widget = null;\n      for (var i=0; i<column.widgets.length; i++){\n        var w = column.widgets[i];\n        if (dashboard.idEquals(w.wid,index)){\n          widget = w;\n          break;\n        }\n      }\n      return widget;\n    }\n\n    /**\n     * finds a column by its id in the model\n     */\n    function findColumn(model, index){\n      var column = null;\n      for (var i=0; i<model.rows.length; i++){\n        var r = model.rows[i];\n        for (var j=0; j<r.columns.length; j++){\n          var c = r.columns[j];\n          if (dashboard.idEquals(c.cid, index)){\n            column = c;\n            break;\n          } else if (c.rows){\n            column = findColumn(c, index);\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * get the adf id from an html element\n     */\n    function getId(el){\n      var id = el.getAttribute('adf-id');\n      return id ? id : '-1';\n    }\n\n    /**\n     * adds a widget to a column\n     */\n    function addWidgetToColumn($scope, model, targetColumn, evt){\n      // find source column\n      var cid = getId(evt.from);\n      var sourceColumn = findColumn(model, cid);\n\n      if (sourceColumn){\n        // find moved widget\n        var wid = getId(evt.item);\n        var widget = findWidget(sourceColumn, wid);\n\n        if (widget){\n          // add new item and apply to scope\n          $scope.$apply(function(){\n            if (!targetColumn.widgets) {\n              targetColumn.widgets = [];\n            }\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\n\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\n          });\n        } else {\n          $log.warn('could not find widget with id ' + wid);\n        }\n      } else {\n        $log.warn('could not find column with id ' + cid);\n      }\n    }\n\n    /**\n     * removes a widget from a column\n     */\n    function removeWidgetFromColumn($scope, column, evt){\n      // remove old item and apply to scope\n      $scope.$apply(function(){\n        column.widgets.splice(evt.oldIndex, 1);\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n      });\n    }\n\n    /**\n     * enable sortable\n     */\n    function applySortable($scope, $element, model, column){\n      // enable drag and drop\n      var el = $element[0];\n      var sortable = Sortable.create(el, {\n        group: 'widgets',\n        handle: '.adf-move',\n        ghostClass: 'placeholder',\n        animation: 150,\n        onAdd: function(evt){\n          addWidgetToColumn($scope, model, column, evt);\n        },\n        onRemove: function(evt){\n          removeWidgetFromColumn($scope, column, evt);\n        },\n        onUpdate: function(evt){\n          moveWidgetInColumn($scope, column, evt);\n        }\n      });\n\n      // destroy sortable on column destroy event\n      $element.on('$destroy', function () {\n        // check sortable element, before calling destroy\n        // see https://github.com/sdorra/angular-dashboard-framework/issues/118\n        if (sortable.el){\n          sortable.destroy();\n        }\n      });\n    }\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        column: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        adfModel: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\n      link: function ($scope, $element) {\n        // set id\n        var col = $scope.column;\n        if (!col.cid){\n          col.cid = dashboard.id();\n        }\n\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\n          $compile(rowTemplate)($scope, function(cloned) {\n            $element.append(cloned);\n          });\n        } else {\n          // enable drag and drop for widget only columns\n          applySortable($scope, $element, $scope.adfModel, col);\n        }\n      }\n    };\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @ngdoc directive\n * @name adf.directive:adfDashboard\n * @element div\n * @restrict EA\n * @scope\n * @description\n *\n * `adfDashboard` is a directive which renders the dashboard with all its\n * components. The directive requires a name attribute. The name of the\n * dashboard can be used to store the model.\n *\n * @param {string} name name of the dashboard. This attribute is required.\n * @param {boolean=} editable false to disable the editmode of the dashboard.\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\n * @param {string=} structure the default structure of the dashboard.\n * @param {object=} adfModel model object of the dashboard.\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\n *                   events during edit mode not reset it if edit mode is exited.\n * @param {boolean=} categories enable categories for the add widget dialog.\n */\n\nangular.module('adf')\n    .directive('adfDashboard', function($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath, $faIcons, $translate) {\n        'use strict';\n\n        function stringToBoolean(string) {\n            switch (angular.isDefined(string) ? string.toLowerCase() : null) {\n                case 'true':\n                case 'yes':\n                case '1':\n                    return true;\n                case 'false':\n                case 'no':\n                case '0':\n                case null:\n                    return false;\n                default:\n                    return Boolean(string);\n            }\n        }\n\n        function copyWidgets(source, target) {\n            if (source.widgets && source.widgets.length > 0) {\n                var w = source.widgets.shift();\n                while (w) {\n                    target.widgets.push(w);\n                    w = source.widgets.shift();\n                }\n            }\n        }\n\n        /**\n         * Copy widget from old columns to the new model\n         * @param object root the model\n         * @param array of columns\n         * @param counter\n         */\n        function fillStructure(root, columns, counter) {\n            counter = counter || 0;\n\n            if (angular.isDefined(root.rows)) {\n                angular.forEach(root.rows, function(row) {\n                    angular.forEach(row.columns, function(column) {\n                        // if the widgets prop doesn't exist, create a new array for it.\n                        // this allows ui.sortable to do it's thing without error\n                        if (!column.widgets) {\n                            column.widgets = [];\n                        }\n\n                        // if a column exist at the counter index, copy over the column\n                        if (angular.isDefined(columns[counter])) {\n                            // do not add widgets to a column, which uses nested rows\n                            if (angular.isUndefined(column.rows)) {\n                                copyWidgets(columns[counter], column);\n                                counter++;\n                            }\n                        }\n\n                        // run fillStructure again for any sub rows/columns\n                        counter = fillStructure(column, columns, counter);\n                    });\n                });\n            }\n            return counter;\n        }\n\n        /**\n         * Read Columns: recursively searches an object for the 'columns' property\n         * @param object model\n         * @param array  an array of existing columns; used when recursion happens\n         */\n        function readColumns(root, columns) {\n            columns = columns || [];\n\n            if (angular.isDefined(root.rows)) {\n                angular.forEach(root.rows, function(row) {\n                    angular.forEach(row.columns, function(col) {\n                        columns.push(col);\n                        // keep reading columns until we can't any more\n                        readColumns(col, columns);\n                    });\n                });\n            }\n\n            return columns;\n        }\n\n        function changeStructure(model, structure) {\n            var columns = readColumns(model);\n            var counter = 0;\n\n            model.rows = angular.copy(structure.rows);\n\n            while (counter < columns.length) {\n                counter = fillStructure(model, columns, counter);\n            }\n        }\n\n        function createConfiguration(type) {\n            var cfg = {};\n            var config = dashboard.widgets[type].config;\n            if (config) {\n                cfg = angular.copy(config);\n            }\n            return cfg;\n        }\n\n        function createWidget(type) {\n            var wdgt = {};\n            var widget = dashboard.widgets[type];\n            if (widget) {\n                wdgt = angular.copy(widget);\n            }\n            return wdgt;\n        }\n\n        /**\n         * Find first widget column in model.\n         *\n         * @param dashboard model\n         */\n        function findFirstWidgetColumn(model) {\n            var column = null;\n            if (!angular.isArray(model.rows)) {\n                $log.error('model does not have any rows');\n                return null;\n            }\n            for (var i = 0; i < model.rows.length; i++) {\n                var row = model.rows[i];\n                if (angular.isArray(row.columns)) {\n                    for (var j = 0; j < row.columns.length; j++) {\n                        var col = row.columns[j];\n                        if (!col.rows) {\n                            column = col;\n                            break;\n                        }\n                    }\n                }\n                if (column) {\n                    break;\n                }\n            }\n            return column;\n        }\n\n        /**\n         * Adds the widget to first column of the model.\n         *\n         * @param dashboard model\n         * @param widget to add to model\n         * @param name name of the dashboard\n         */\n        function addNewWidgetToModel(model, widget, name, forceToSave) {\n            if (model) {\n                var column = findFirstWidgetColumn(model);\n                if (column) {\n                    if (!column.widgets) {\n                        column.widgets = [];\n                    }\n                    column.widgets.unshift(widget);\n\n                    // broadcast added event\n                    $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\n\n                    if (forceToSave) {\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\n                    }\n                } else {\n                    $log.error('could not find first widget column');\n                }\n            } else {\n                $log.error('model is undefined');\n            }\n        }\n\n        /**\n         * Checks if the edit mode of the widget should be opened immediately.\n         *\n         * @param widget type\n         */\n        function isEditModeImmediate(type) {\n            var widget = dashboard.widgets[type];\n            return widget && widget.edit && widget.edit.immediate;\n        }\n\n        /**\n         * Opens the edit mode of the specified widget.\n         *\n         * @param dashboard scope\n         * @param widget\n         */\n        function openEditMode($scope, widget) {\n            // wait some time before fire enter edit mode event\n            $timeout(function() {\n                $scope.$broadcast('adfWidgetEnterEditMode', widget);\n            }, 200);\n        }\n\n        /**\n         * Splits an object into an array multiple objects inside.\n         *\n         * @param object source object\n         * @param size size of array\n         *\n         * @return array of splitted objects\n         */\n        function split(object, size) {\n            var arr = [];\n            var i = 0;\n            angular.forEach(object, function(value, key) {\n                var index = i++ % size;\n                if (!arr[index]) {\n                    arr[index] = {};\n                }\n                arr[index][key] = value;\n            });\n            return arr;\n        }\n\n        /**\n         * Creates object with the category name as key and an array of widgets as value.\n         *\n         * @param widgets array of widgets\n         *\n         * @return array of categories\n         */\n        function createCategories(widgets) {\n            var categories = {};\n            angular.forEach(widgets, function(widget, key) {\n                var category = widget.category;\n                // if the widget has no category use a default one\n                if (!category) {\n                    category = 'ADF.CATEGORY.MISCELANOUS';\n                }\n\n                widget.title = $translate.instant(widget.title);\n                widget.description = $translate.instant(widget.description);\n                widget.category = $translate.instant(widget.category);\n\n                // push widget to category array\n                if (angular.isUndefined(categories[widget.category])) {\n                    categories[widget.category] = {\n                        widgets: {}\n                    };\n                }\n\n                categories[widget.category].widgets[key] = widget;\n            });\n            return categories;\n        }\n\n        function createCategoriesList(widgets) {\n            var categories = [];\n            angular.forEach(widgets, function(widget, key) {\n                if (!widget.category) {\n                    widget.category = 'ADF.CATEGORY.MISCELLANEOUS';\n                }\n\n                widget.title = $translate.instant(widget.title);\n                widget.description = $translate.instant(widget.description);\n                widget.category = $translate.instant(widget.category);\n\n                if (!widget.categoryTags) {\n                    widget.categoryTags = 'ADF.CATEGORY.TAG.MISCELLANEOUS';\n                }\n\n                var categoriesTmp = widget.categoryTags.split(',');\n\n                angular.forEach(categoriesTmp, function(category, idx) {\n                    // push widget to category array\n                    var translatedCat = $translate.instant(category);\n                    if (categories.indexOf(translatedCat) === -1)\n                        categories.push(translatedCat);\n                });\n\n            });\n            return categories;\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            scope: {\n                structure: '@',\n                name: '@',\n                collapsible: '@',\n                editable: '@',\n                editMode: '@',\n                continuousEditMode: '=',\n                maximizable: '@',\n                adfModel: '=',\n                adfWidgetFilter: '=',\n                categories: '@',\n                hideButtons: '=',\n                extraData: '='\n            },\n            controller: function($scope) {\n                var model = {};\n                var structure = {};\n                var widgetFilter = null;\n                var structureName = {};\n                var name = $scope.name;\n\n                // Watching for changes on adfModel\n                $scope.$watch('adfModel', function(oldVal, newVal) {\n                    // has model changed or is the model attribute not set\n                    if (newVal !== null || (oldVal === null && newVal === null)) {\n                        model = $scope.adfModel;\n                        widgetFilter = $scope.adfWidgetFilter;\n                        if (!model || !model.rows) {\n                            structureName = $scope.structure;\n                            structure = dashboard.structures[structureName];\n                            if (structure) {\n                                if (model) {\n                                    model.rows = angular.copy(structure).rows;\n                                } else {\n                                    model = angular.copy(structure);\n                                }\n                                model.structure = structureName;\n                            } else {\n                                $log.error('could not find structure ' + structureName);\n                            }\n                        }\n\n                        if (model) {\n                            if (!model.title) {\n                                model.title = $translate.instant('ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD');\n                            }\n                            if (!model.titleTemplateUrl) {\n                                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\n                            }\n                            $scope.model = model;\n                        } else {\n                            $log.error('could not find or create model');\n                        }\n                    }\n                }, true);\n\n                // edit mode\n                $scope.editMode = false;\n                $scope.editClass = '';\n\n                function getNewModalScope() {\n                    var scope = $scope.$new();\n                    return scope;\n                }\n\n                $scope.deleteDashboard = function() {\n                    var dashData = {\n                        id: model.id,\n                        name: model.title\n                    };\n\n                    $rootScope.$broadcast('dashboardDelete', dashData);\n                };\n\n                $scope.toggleEditMode = function(openConfigWindow) {\n                    $scope.editMode = !$scope.editMode;\n                    if ($scope.editMode) {\n                        if (!$scope.continuousEditMode) {\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\n                            $rootScope.$broadcast('adfIsEditMode');\n                        }\n\n                        if (openConfigWindow) {\n                            $scope.editDashboardDialog();\n                        }\n                    }\n\n                    if (!$scope.editMode) {\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\n                    }\n                };\n\n                $scope.saveTemporalDashboard = function() {\n                    delete model.temporal;\n                    $rootScope.$broadcast('adfDashboardChanged', name, model);\n                };\n\n                var adfToggleEditMode = $scope.$on('adfToggleEditMode', function(event, isNewDashboard) {\n                    if (isNewDashboard) {\n                        $scope.toggleEditMode(true);\n                    } else {\n                        $scope.toggleEditMode();\n                    }\n                });\n\n                var adfCancelEditMode = $scope.$on('adfCancelEditMode', function(event, isNewDashboard) {\n                    if ($scope.editMode) {\n                        $scope.cancelEditMode();\n                    }\n                });\n\n                $scope.collapseAll = function(collapseExpandStatus) {\n                    $rootScope.$broadcast('adfDashboardCollapseExpand', {\n                        collapseExpandStatus: collapseExpandStatus\n                    });\n                };\n\n                $scope.cancelEditMode = function() {\n                    $scope.editMode = false;\n                    if (!$scope.continuousEditMode && ($scope.modelCopy !== $scope.adfModel)) {\n                        $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\n                    }\n                    $rootScope.$broadcast('adfDashboardEditsCancelled');\n                };\n\n                var adfEditDashboardDialog = $scope.$on('adfEditDashboardDialog', function(event, isNewDashboard) {\n                    if ($scope.editMode) {\n                        $scope.editDashboardDialog();\n                    }\n                });\n\n                var adfLaunchSearchingFromWidget = $scope.$on('adfLaunchSearchingFromWidget', function(event, widget, configFilter) {\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\n                });\n                var adfWindowTimeChangedFromWidget = $scope.$on('adfWindowTimeChangedFromWidget', function(event, widget, windowFilter) {\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\n                });\n\n                // edit dashboard settings\n                $scope.editDashboardDialog = function() {\n                    var editDashboardScope = getNewModalScope();\n                    // create a copy of the title, to avoid changing the title to\n                    // \"dashboard\" if the field is empty\n                    editDashboardScope.copy = {\n                        title: (model.title !== 'ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD' ? model.title : ''),\n                        description: model.description,\n                        icon: model.icon ? model.icon : 'fa-tachometer'\n                    };\n\n                    // pass icon list\n                    editDashboardScope.availableIcons = $faIcons.list();\n\n                    // pass dashboard structure to scope\n                    editDashboardScope.structures = dashboard.structures;\n\n                    // pass split function to scope, to be able to display structures in multiple columns\n                    editDashboardScope.split = split;\n\n                    var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\n                    if (model.editTemplateUrl) {\n                        adfEditTemplatePath = model.editTemplateUrl;\n                    }\n                    var instance = $uibModal.open({\n                        scope: editDashboardScope,\n                        templateUrl: adfEditTemplatePath,\n                        backdrop: 'static',\n                        keyboard: false,\n                        size: 'lg'\n                    });\n\n                    editDashboardScope.changeStructure = function(name, structure) {\n                        $log.info('change structure to ' + name);\n                        changeStructure(model, structure);\n                        if (model.structure !== name) {\n                            model.structure = name;\n                        }\n                    };\n                    editDashboardScope.closeDialog = function() {\n                        // copy the new title back to the model\n                        model.title = editDashboardScope.copy.title;\n                        model.description = editDashboardScope.copy.description;\n                        model.icon = editDashboardScope.copy.icon;\n\n                        // close modal and destroy the scope\n                        instance.close();\n                        editDashboardScope.$destroy();\n                    };\n                };\n\n                var adfOpenWidgetFromOther = $scope.$on('adfOpenWidgetFromOther', function(event, widget, config) {\n                    var internal_config = createConfiguration(widget);\n                    var _config = angular.merge({}, internal_config, config);\n                    var w = {\n                        type: widget,\n                        config: _config,\n                        title: _config.title\n                    };\n                    addNewWidgetToModel(model, w, name, !$scope.editMode);\n                });\n\n                var adfOpenModalWidgetFromOther = $scope.$on('adfOpenModalWidgetFromOther', function(event, widgetType, config) {\n                    var widget = createWidget(widgetType);\n                    widget.config = angular.merge({}, widget.config, config);\n                    widget.type = widgetType;\n                    if (widget.config.title) {\n                        widget.title = widget.config.title;\n                    }\n                    var fullScreenScope = $scope.$new();\n                    fullScreenScope.definition = fullScreenScope.widget = widget;\n                    var opts = {\n                        scope: fullScreenScope,\n                        templateUrl: adfTemplatePath + 'widget-fullscreen.html',\n                        size: fullScreenScope.definition.modalSize || 'lg', // 'sm', 'lg'\n                        backdrop: 'static',\n                        windowClass: (fullScreenScope.definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n                    };\n\n                    fullScreenScope.persistDashboard = function() {\n                        $rootScope.$broadcast('adfOpenWidgetFromOther', this.$parent.widget.type, this.$parent.widget.config);\n                        this.closeDialog();\n                    }\n\n                    var instance = $uibModal.open(opts);\n                    fullScreenScope.closeDialog = function() {\n                        instance.close();\n                        fullScreenScope.$destroy();\n                    };\n\n                });\n\n                var adfAddWidgetDialog = $scope.$on('adfAddWidgetDialog', function(event, isNewDashboard) {\n                    if (!model.temporal && model.editable) {\n                        if (!$scope.editMode) {\n                            $scope.editMode = true;\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\n                            $rootScope.$broadcast('adfIsEditMode');\n                        }\n\n                        $scope.addWidgetDialog();\n                    }\n                });\n\n                // add widget dialog\n                $scope.addScopeCfg = {\n                    widgetFilter: {},\n                    widgetSortingDirection: '',\n                    widgetSorting: 'priority'\n                };\n\n                $scope.addWidgetDialog = function() {\n                    var addScope = getNewModalScope();\n                    var widgets;\n                    if (angular.isFunction(widgetFilter)) {\n                        widgets = {};\n                        angular.forEach(dashboard.widgets, function(widget, type) {\n                            if (widgetFilter(widget, type, model)) {\n                                widgets[type] = widget;\n                            }\n                        });\n                    } else {\n                        widgets = dashboard.widgets;\n                    }\n                    addScope.widgets = widgets;\n\n                    angular.forEach(addScope.widgets, function(widget, type) {\n                        widget.key = type;\n                        if (!widget.category) {\n                            widget.category = 'Miscellaneous';\n                        }\n                    });\n\n                    // pass createCategories function to scope, if categories option is enabled\n                    if ($scope.options.categories) {\n                        addScope.createCategories = createCategories;\n                    } else {\n                        addScope.availableCategories = createCategoriesList(widgets);\n                    }\n\n                    var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\n                    if (model.addTemplateUrl) {\n                        adfAddTemplatePath = model.addTemplateUrl;\n                    }\n\n                    var opts = {\n                        scope: addScope,\n                        templateUrl: adfAddTemplatePath,\n                        backdrop: 'static',\n                        size: 'lg'\n                    };\n\n                    var instance = $uibModal.open(opts);\n\n                    addScope.widgetFilterCfg = $scope.addScopeCfg;\n\n                    // addScope.widgetFilter = $scope.addScopeCfg.widgetFilter;\n                    // addScope.widgetSortingDirection = $scope.addScopeCfg.widgetSortingDirection;\n                    // addScope.widgetSorting = $scope.addScopeCfg.widgetSorting;\n\n                    addScope.addWidget = function(widget) {\n                        var w = {\n                            type: widget,\n                            config: createConfiguration(widget)\n                        };\n                        addNewWidgetToModel(model, w, name);\n                        // close and destroy\n                        instance.close();\n                        addScope.$destroy();\n\n                        // check for open edit mode immediately\n                        if (isEditModeImmediate(widget)) {\n                            openEditMode($scope, w);\n                        }\n                    };\n\n                    addScope.changeThumbnail = function(widget) {\n                        if (widget.images) {\n                            if (angular.isUndefined(widget._currThumb)) {\n                                widget._currThumb = 1;\n                            } else {\n                                widget._currThumb += 1;\n                            }\n\n\n                            if (widget._currThumb >= widget.images.length) {\n                                widget._currThumb = 0;\n                            }\n\n                            widget._currImg = widget.images[widget._currThumb];\n                        }\n                    };\n\n                    addScope.closeDialog = function() {\n                        // close and destroy\n                        instance.close();\n                        addScope.$destroy();\n                    };\n                };\n\n                $scope.addNewWidgetToModel = addNewWidgetToModel;\n\n                $scope.$on('destroy', function() {\n                    adfLaunchSearchingFromWidget();\n                    adfWindowTimeChangedFromWidget();\n                    adfToggleEditMode();\n                    adfOpenWidgetFromOther();\n                    adfOpenModalWidgetFromOther();\n                    adfCancelEditMode();\n                    adfAddWidgetDialog();\n                    adfEditDashboardDialog();\n                });\n            },\n            link: function($scope, $element, $attr) {\n                // pass options to scope\n                var options = {\n                    name: $attr.name,\n                    editable: true,\n                    enableConfirmDelete: stringToBoolean($attr.enableConfirmDelete),\n                    maximizable: stringToBoolean($attr.maximizable),\n                    collapsible: stringToBoolean($attr.collapsible),\n                    categories: stringToBoolean($attr.categories),\n                    extraData: {}\n                };\n\n                if (angular.isDefined($attr.editable)) {\n                    options.editable = stringToBoolean($attr.editable);\n                }\n\n                if (angular.isDefined($scope.extraData)) {\n                    options.extraData = $scope.extraData;\n                }\n\n                options.extraData.editing = $scope.editMode;\n\n                $scope.options = options;\n            },\n            templateUrl: adfTemplatePath + 'dashboard.html'\n        };\n    });","/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .filter('adfOrderByObjectKey', function($filter) {\n    'use strict';\n\n    return function(item, key){\n      var array = [];\n      angular.forEach(item, function(value, objectKey){\n        value[key] = objectKey;\n        array.push(value);\n      });\n      return $filter('orderBy')(array, key);\n    };\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\n/**\n * @ngdoc object\n * @name adf.dashboardProvider\n * @description\n *\n * The dashboardProvider can be used to register structures and widgets.\n */\nangular.module('adf.provider', [])\n    .provider('dashboard', function () {\n\n        var widgets = {};\n        var widgetsPath = '';\n        var structures = {};\n        var messageTemplate = '<div class=\"alert alert-primary\">{}</div>';\n        var loadingTemplate = '\\\n      <div class=\"progress progress-striped active\">\\n\\\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\n          <span class=\"sr-only\" translate>FORM.MSG.LOADING ...</span>\\n\\\n        </div>\\n\\\n      </div>';\n        var customWidgetTemplatePath = null;\n\n        // default apply function of widget.edit.apply\n        var defaultApplyFunction = function () {\n            return true;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#widget\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Registers a new widget.\n         *\n         * @param {string} name of the widget\n         * @param {object} widget to be registered.\n         *\n         *   Object properties:\n         *\n         *   - `title` - `{string=}` - The title of the widget.\n         *   - `description` - `{string=}` - Description of the widget.\n         *   - `category` - `{string=}` - Category of the widget.\n         *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\n         *   - `config` - `{object}` - Predefined widget configuration.\n         *   - `controller` - `{string=|function()=}` - Controller fn that should be\n         *      associated with newly created scope of the widget or the name of a\n         *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\n         *      if passed as a string.\n         *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\n         *      published to scope under the `controllerAs` name.\n         *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\n         *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\n         *   - `template` - `{string=|function()=}` - html template as a string.\n         *   - `templateUrl` - `{string=}` - path to an html template.\n         *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\n         *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n         *      be injected into the controller. If any of these dependencies are promises, the widget\n         *      will wait for them all to be resolved or one to be rejected before the controller is\n         *      instantiated.\n         *      If all the promises are resolved successfully, the values of the resolved promises are\n         *      injected.\n         *\n         *      The map object is:\n         *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n         *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n         *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\n         *        and the return value is treated as the dependency. If the result is a promise, it is\n         *        resolved before its value is injected into the controller.\n         *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n         *      on the scope of the widget.\n         *   - `edit` - `{object}` - Edit modus of the widget.\n         *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n         *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\n         *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n         *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\n         *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\n         *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n         *        on the scope of the widget.\n         *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\n         *        Default is true.\n         *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\n         *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\n         *        The function have to return a boolean or an promise which can be resolved to a boolean.\n         *        The function can use injection.\n         *\n         * @returns {Object} self\n         */\n        this.widget = function (name, widget) {\n            var w = angular.extend({\n                reload: false,\n                frameless: false\n            }, widget);\n            if (w.edit) {\n                var edit = {\n                    reload: true,\n                    immediate: false,\n                    apply: defaultApplyFunction\n                };\n                angular.extend(edit, w.edit);\n                w.edit = edit;\n            }\n            widgets[name] = w;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#widgetsPath\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Sets the path to the directory which contains the widgets. The widgets\n         * path is used for widgets with a templateUrl which contains the\n         * placeholder {widgetsPath}. The placeholder is replaced with the\n         * configured value, before the template is loaded, but the template is\n         * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\n         * The default value of widgetPaths is ''.\n         *\n         *\n         * @param {string} path to the directory which contains the widgets\n         *\n         * @returns {Object} self\n         */\n        this.widgetsPath = function (path) {\n            widgetsPath = path;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#structure\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Registers a new structure.\n         *\n         * @param {string} name of the structure\n         * @param {object} structure to be registered.\n         *\n         *   Object properties:\n         *\n         *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\n         *     - `styleClass` - `{string}` - CSS Class of the row.\n         *     - `columns` - `{Array.<Object>}` - Columns of the row.\n         *       - `styleClass` - `{string}` - CSS Class of the column.\n         *\n         * @returns {Object} self\n         */\n        this.structure = function (name, structure) {\n            structures[name] = structure;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#messageTemplate\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the template for messages.\n         *\n         * @param {string} template for messages.\n         *\n         * @returns {Object} self\n         */\n        this.messageTemplate = function (template) {\n            messageTemplate = template;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#loadingTemplate\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the template which is displayed as\n         * long as the widget resources are not resolved.\n         *\n         * @param {string} template loading template\n         *\n         * @returns {Object} self\n         */\n        this.loadingTemplate = function (template) {\n            loadingTemplate = template;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#customWidgetTemplatePath\n         * @propertyOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the container template for the widgets\n         *\n         * @param {string} path to the custom widget template\n         *\n         * @returns {Object} self\n         */\n        this.customWidgetTemplatePath = function (templatePath) {\n            customWidgetTemplatePath = templatePath;\n            return this;\n        };\n\n        /**\n         * @ngdoc service\n         * @name adf.dashboard\n         * @description\n         *\n         * The dashboard holds all options, structures and widgets.\n         *\n         * @property {Array.<Object>} widgets Array of registered widgets.\n         * @property {string} widgetsPath Default path for widgets.\n         * @property {Array.<Object>} structures Array of registered structures.\n         * @property {string} messageTemplate Template for messages.\n         * @property {string} loadingTemplate Template for widget loading.\n         * * @property {string} customWidgetTemplatePath Changes the container template for the widgets\n         *\n         * @returns {Object} self\n         */\n        this.$get = function () {\n            var cid = 0;\n\n            return {\n                widgets: widgets,\n                widgetsPath: widgetsPath,\n                structures: structures,\n                messageTemplate: messageTemplate,\n                loadingTemplate: loadingTemplate,\n                customWidgetTemplatePath: customWidgetTemplatePath,\n\n                /**\n                 * @ngdoc method\n                 * @name adf.dashboard#id\n                 * @methodOf adf.dashboard\n                 * @description\n                 *\n                 * Creates an ongoing numeric id. The method is used to create ids for\n                 * columns and widgets in the dashboard.\n                 */\n                id: function () {\n                    return new Date().getTime() + '-' + (++cid);\n                },\n\n                /**\n                 * @ngdoc method\n                 * @name adf.dashboard#idEqual\n                 * @methodOf adf.dashboard\n                 * @description\n                 *\n                 * Checks if the given ids are equal.\n                 *\n                 * @param {string} id widget or column id\n                 * @param {string} other widget or column id\n                 */\n                idEquals: function (id, other) {\n                    // use toString, because old ids are numbers\n                    return ((id) && (other)) && (id.toString() === other.toString());\n                }\n            };\n        };\n\n    });","/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardRow', function ($compile, adfTemplatePath, columnTemplate) {\n    'use strict';\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        row: '=',\n        adfModel: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\n      link: function($scope, $element) {\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\n          $compile(columnTemplate)($scope, function(cloned) {\n            $element.append(cloned);\n          });\n        }\n      }\n    };\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\n/* global angular */\nangular.module('adf')\n  .directive('adfStructurePreview', function(adfTemplatePath) {\n\n    function adjustRowHeight(container){\n      if (container.rows && container.rows.length > 0){\n        var height = 100 / container.rows.length;\n        angular.forEach(container.rows, function(row){\n          row.style = {\n            height: height + '%'\n          }\n\n          if (row.columns){\n            angular.forEach(row.columns, function(column){\n              adjustRowHeight(column);\n            });\n          }\n        });\n      }\n    }\n\n    function prepareStructure($scope){\n      var structure = angular.copy($scope.structure);\n      adjustRowHeight(structure);\n      $scope.preview = structure;\n    }\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        name: '=',\n        structure: '=',\n        selected: '='\n      },\n      templateUrl: adfTemplatePath + 'structure-preview.html',\n      link: prepareStructure\n    };\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf')\n    .directive('adfWidgetContent', function ($log, $q, widgetService,\n        $compile, $controller, $injector, dashboard, $translate) {\n\n        function renderError($element, msg) {\n            $log.warn(msg);\n            $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\n        }\n\n        function compileWidget($scope, $element, currentScope, configChanged) {\n            var model = $scope.model;\n            var content = $scope.content;\n\n            var extra = $scope.extra;\n\n            var newScope = currentScope;\n            if (!model) {\n                $translate('ADF.ERROR.MODEL_IS_UNDEFINED').then(function (translateMessage) {\n                    renderError($element, translateMessage);\n                });\n            } else if (!content) {\n                if (model.title) {\n                    $translate('ADF.ERROR.WIDGET_FOR_DEPRECTATED', {\n                        title: model.title\n                    }).then(function (translateMessage) {\n                        renderError($element, translateMessage);\n                    });\n                } else {\n                    $translate('ADF.ERROR.WIDGET_DEPRECTATED').then(function (translateMessage) {\n                        renderError($element, translateMessage);\n                    });\n                }\n            } else {\n                if (newScope) {\n                    var is_menu = newScope.menu !== undefined && newScope.menu !== null;\n                    var is_itemsPerPage = newScope.itemsPerPage !== undefined && newScope.itemsPerPage !== null;\n                    if (is_menu || is_itemsPerPage || configChanged || !angular.isFunction(newScope.reloadData)) {\n                        newScope = renderWidget($scope, $element, currentScope, model, content, extra);\n                    } else {\n                        newScope.reloadData();\n                    }\n                } else {\n                    newScope = renderWidget($scope, $element, currentScope, model, content, extra);\n                }\n            }\n\n            function _getWindowTime(type) {\n                if (type === \"custom\") {\n                    return {\n                        from: newScope.config.windowFilter.from,\n                        to: newScope.config.windowFilter.to\n                    }\n                }\n                var from = window.moment().subtract(1, type);\n                return {\n                    from: from._d\n                };\n            }\n\n            if (newScope) {\n                if (newScope.config) {\n                    newScope.config.getWindowTime = function () {\n                        var windowFilter = newScope.config.windowFilter;\n                        if (windowFilter && windowFilter.type) {\n                            var winTime = _getWindowTime(windowFilter.type);\n                            /* jshint ignore:start */\n                            if (!window.eval(newScope.config.windowFilter.rawdate)) {\n                                for (var key in winTime) {\n                                    winTime[key] = window.moment(winTime[key]).format();\n                                }\n                                winTime['rawdate'] = true;\n                            }\n                            /* jshint ignore:end */\n                            return winTime;\n                        }\n                    }\n                }\n\n                if (extra) {\n                    newScope.editing = extra.editing ? true : false;\n                    newScope.extraData = extra;\n                }\n            }\n            return newScope;\n        }\n\n        function renderWidget($scope, $element, currentScope, model, content, extra) {\n            // display loading template\n            $element.html(dashboard.loadingTemplate);\n\n            // create new scope\n            var templateScope = $scope.$new();\n\n            // pass config object to scope\n            if (!model.config) {\n                model.config = {};\n            }\n\n            templateScope.config = model.config;\n            templateScope.editing = extra && extra.editing;\n\n            if (extra) {\n                templateScope.extra = extra;\n            }\n\n            templateScope.selectionManager = (currentScope && currentScope.selectionManager) ? currentScope.selectionManager : undefined;\n\n            // local injections\n            var base = {\n                $scope: templateScope,\n                widget: model,\n                config: model.config\n            };\n\n            // get resolve promises from content object\n            var resolvers = {};\n            resolvers.$tpl = widgetService.getTemplate(content);\n            if (content.resolve) {\n                angular.forEach(content.resolve, function (promise, key) {\n                    if (angular.isString(promise)) {\n                        resolvers[key] = $injector.get(promise);\n                    } else {\n                        resolvers[key] = $injector.invoke(promise, promise, base);\n                    }\n                });\n            }\n\n            // resolve all resolvers\n            $q.all(resolvers).then(function (locals) {\n                angular.extend(locals, base);\n\n                // pass resolve map to template scope as defined in resolveAs\n                if (content.resolveAs) {\n                    templateScope[content.resolveAs] = locals;\n                }\n\n                // compile & render template\n                var template = locals.$tpl;\n                $element.html(template);\n                if (content.controller) {\n                    var templateCtrl = $controller(content.controller, locals);\n                    if (content.controllerAs) {\n                        templateScope[content.controllerAs] = templateCtrl;\n                    }\n                    $element.children().data('$ngControllerController', templateCtrl);\n                }\n                $compile($element.contents())(templateScope);\n            }, function (reason) {\n                // handle promise rejection\n                var msg = 'ADF.ERROR.COULD_NOT_RESOLVE_ALL_PROMISSES';\n                $translate(msg, {\n                    reason: (reason ? \": \" + reason : reason)\n                }).then(function (translateMessage) {\n                    renderError($element, translateMessage);\n                });\n            });\n\n            // destroy old scope\n            if (currentScope) {\n                currentScope.$destroy();\n            }\n\n            return templateScope;\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            scope: {\n                model: '=',\n                content: '=',\n                extra: '='\n            },\n            link: function ($scope, $element) {\n                var currentScope = compileWidget($scope, $element, null);\n                var widgetConfigChangedEvt = $scope.$on('widgetConfigChanged', function () {\n                    currentScope = compileWidget($scope, $element, currentScope, true);\n                });\n\n                var widgetReloadEvt = $scope.$on('widgetReload', function () {\n                    currentScope = compileWidget($scope, $element, currentScope, false);\n                });\n\n                $scope.$on('destroy', function () {\n                    widgetConfigChangedEvt();\n                    widgetReloadEvt();\n                });\n            }\n        };\n    });","\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/**\n * The widget service provide helper functions to render widgets and their content.\n */\nangular.module('adf')\n  .factory('widgetService', function($http, $q, $sce, $templateCache, dashboard) {\n    'use strict';\n\n    function parseUrl(url) {\n      var parsedUrl = url;\n      if (url.indexOf('{widgetsPath}') >= 0) {\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\n                .replace('//', '/');\n        if (parsedUrl.indexOf('/') === 0) {\n          parsedUrl = parsedUrl.substring(1);\n        }\n      }\n      return parsedUrl;\n    }\n\n    var exposed = {};\n\n    exposed.getTemplate = function(widget){\n      var deferred = $q.defer();\n\n      if (widget.template) {\n        deferred.resolve(widget.template);\n      } else if (widget.templateUrl) {\n        // try to fetch template from cache\n        var tpl = $templateCache.get(widget.templateUrl);\n        if (tpl) {\n          deferred.resolve(tpl);\n        } else {\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\n          $http.get(url)\n               .success(function(response) {\n                 // put response to cache, with unmodified url as key\n                 $templateCache.put(widget.templateUrl, response);\n                 deferred.resolve(response);\n               })\n               .error(function() {\n                 deferred.reject('could not load template');\n               });\n        }\n      }\n\n      return deferred.promise;\n    };\n\n    return exposed;\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf')\n    .directive('adfWidget', function($injector, $q, $log, $uibModal, $rootScope, $interval, dashboard, adfTemplatePath, Filter) {\n        function preLink($scope) {\n            var definition = $scope.definition;\n\n            if (definition) {\n                var w = dashboard.widgets[definition.type];\n                if (w) {\n                    // pass title\n                    if (!definition.title) {\n                        definition.title = w.title;\n                    }\n\n                    if (!definition.titleTemplateUrl) {\n                        definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\n                        if (w.titleTemplateUrl) {\n                            definition.titleTemplateUrl = w.titleTemplateUrl;\n                        }\n                    }\n\n                    if (!definition.editTemplateUrl) {\n                        definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\n                        if (w.editTemplateUrl) {\n                            definition.editTemplateUrl = w.editTemplateUrl;\n                        }\n                    }\n\n                    if (!definition.titleTemplateUrl) {\n                        definition.frameless = w.frameless;\n                    }\n\n                    if (!definition.styleClass) {\n                        definition.styleClass = w.styleClass;\n                    }\n\n                    // set id for sortable\n                    if (!definition.wid) {\n                        definition.wid = dashboard.id();\n                    }\n\n                    // pass copy of widget to scope\n                    $scope.widget = angular.copy(w);\n\n                    // create config object\n                    var config = definition.config;\n                    if (config) {\n                        if (angular.isString(config)) {\n                            config = angular.fromJson(config);\n                        }\n                    } else {\n                        config = {};\n                    }\n\n                    if (!config.reloadPeriod) {\n                        config.reloadPeriod = \"0\";\n                    }\n\n                    if (typeof $scope.widget.show_modal_footer === \"undefined\") {\n                        $scope.widget.show_modal_footer = true;\n                    }\n\n                    if (typeof $scope.widget.show_reload_config === \"undefined\") {\n                        $scope.widget.show_reload_config = true;\n                    }\n\n                    // pass config to scope\n                    $scope.config = config;\n\n                    // collapse exposed $scope.widgetState property\n                    if (!$scope.widgetState) {\n                        $scope.widgetState = {};\n                        $scope.widgetState.isCollapsed = (w.collapsed === true) ? w.collapsed : false;\n                    }\n\n                } else {\n                    $log.warn('could not find widget ' + definition.type);\n                }\n            } else {\n                $log.debug('definition not specified, widget was probably removed');\n            }\n        }\n\n        function postLink($scope, $element) {\n            var definition = $scope.definition;\n            if (!definition) {\n                $log.debug('widget not found');\n                return;\n            }\n            if (!$scope.config) {\n                $scope.config = {};\n            }\n\n            var config = $scope.config;\n\n            // bind close function\n            var deleteWidget = function() {\n                var column = $scope.col;\n                if (column) {\n                    var index = column.widgets.indexOf(definition);\n                    if (index >= 0) {\n                        column.widgets.splice(index, 1);\n                    }\n                }\n                $element.remove();\n                $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n            };\n\n            $scope.remove = function() {\n                if ($scope.options.enableConfirmDelete) {\n                    var deleteScope = $scope.$new();\n\n                    var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\n                    if (definition.deleteTemplateUrl) {\n                        deleteTemplateUrl = definition.deleteTemplateUrl;\n                    }\n                    var opts = {\n                        scope: deleteScope,\n                        templateUrl: deleteTemplateUrl,\n                        backdrop: 'static'\n                    };\n                    var instance = $uibModal.open(opts);\n\n                    deleteScope.closeDialog = function() {\n                        instance.close();\n                        deleteScope.$destroy();\n                    };\n                    deleteScope.deleteDialog = function() {\n                        deleteWidget();\n                        deleteScope.closeDialog();\n                    };\n                } else {\n                    deleteWidget();\n                }\n            };\n\n\n            $scope.print = function() {\n                if (!$scope.editMode) {\n                    $scope.$broadcast('widgetPrint');\n                }\n            }\n\n            $scope.isExecuteOperationEnabled = function() {\n\n                if (config.entityKey)\n                    return true;\n                var filter = config.filter;\n                if (typeof filter === \"string\") {\n                    return filter.length > 0;\n                }\n                if (typeof filter === \"object\") {\n                    return filter.value.length > 2 && filter.oql;\n                }\n                return false;\n            }\n\n            $scope.executeOperation = function() {\n                if (!$scope.editMode) {\n\n                    $scope.$parent.$broadcast('widgetExecuteOperation');\n                }\n            };\n\n            // bind reload function\n            var stopReloadTimeout;\n\n            function _setReloadTimeout() {\n                if (config && config.reloadPeriod && config.reloadPeriod !== \"0\") {\n                    if (angular.isDefined(stopReloadTimeout)) {\n                        $interval.cancel(stopReloadTimeout)\n                        stopReloadTimeout = undefined;\n                    };\n                    stopReloadTimeout = $interval($scope.reload, (config.reloadPeriod * 1000));\n                }\n            }\n\n            $scope.reload = function(completeReload) {\n                if (completeReload) {\n                    $scope.$broadcast('widgetReload', completeReload);\n                } else {\n                    $scope.$broadcast('widgetReload');\n                }\n\n                _setReloadTimeout();\n            };\n\n            // verificacion de periodo de refresco\n            _setReloadTimeout();\n\n            $element.on('$destroy', function() {\n                $interval.cancel(stopReloadTimeout);\n            });\n\n            $scope.filter = {\n                value: \"\"\n            };\n            $scope.sort = {\n                value: \"\",\n                direction: \"\"\n            };\n\n            $scope.toggleAdvanced = 1;\n            var filter = config.filter;\n            if (typeof filter === \"object\" && filter.oql && filter.oql.length > 2) {\n                $scope.search = {\n                    oql: filter.oql,\n                    json: filter.value\n                };\n                $scope.toggleAdvanced = 0;\n            } else if (typeof filter === \"string\") {\n                $scope.search = {\n                    quick: filter\n                };\n                $scope.toggleAdvanced = 1;\n            } else if (typeof filter === \"object\" && filter.fields) {\n                $scope.search = {\n                    customFilter: filter.fields\n                };\n                $scope.search.fields = [];\n                angular.forEach(filter.fields, function(v, key) {\n                    $scope.search.fields.push(v.name);\n                });\n                $scope.toggleAdvanced = 2;\n            } else {\n                $scope.search = {\n                    quick: filter = \"\"\n                };\n            }\n\n            $scope.toggleFilter = function(advanced) {\n                $scope.toggleAdvanced = advanced;\n            };\n            $scope.filterAvailable = false;\n            $scope.showFilter = function() {\n                $scope.filterAvailable = $scope.filterAvailable === true ? false : true;\n            };\n\n            $scope.showFinalFilter = false;\n\n            $scope.launchSearching = function() {\n                var widget = {\n                    definition: definition,\n                    element: $element\n                };\n\n                $rootScope.$broadcast('adfLaunchSearchingFromWidget', widget, $scope.config.filter);\n                $scope.reload(true);\n            }\n            $scope.addCustomFilter = function(key) {\n                $scope.search.customFilter = $scope.search.customFilter ? $scope.search.customFilter : [];\n                $scope.search.customFilter.push({\n                    name: key,\n                    value: ''\n                });\n            }\n\n            $scope.launchCustomFilter = function() {\n                if ($scope.search.customFilter && $scope.search.customFilter.length > 0) {\n                    $scope.search.oql = $scope.search.json = '';\n\n                    $scope.config.filter = {\n                        value: {\n                            and: []\n                        },\n                        fields: $scope.search.customFilter\n                    }\n                    angular.forEach($scope.search.customFilter, function(v, key) {\n                        if (v.value) {\n                            var like = {};\n                            like[v.name] = v.value;\n                            $scope.config.filter.value.and.push({\n                                'like': like\n                            });\n                        }\n\n                    });\n                    $scope.config.filter.value = JSON.stringify($scope.config.filter.value);\n                }\n\n                $scope.launchSearching();\n            }\n\n\n\n            $scope.deleteFilter = function(value, model) {\n                angular.forEach($scope.search.customFilter, function(v, key) {\n                    if (v.name === value) {\n                        $scope.search.customFilter.splice(key, 1);\n                    }\n                });\n                if ($scope.search.customFilter.length === 0) {\n                    $scope.config.filter = {};\n                }\n            };\n\n\n            $scope.launchSearchingAdv = function() {\n                $scope.search.quick = '';\n                if ($scope.search.json === '' || $scope.search.json === '{}' || (!angular.isString($scope.search.json) && Object.keys($scope.search.json).length === 0)) {\n                    $scope.config.filter = {\n                        oql: '',\n                        value: ''\n                    };\n                } else {\n                    $scope.config.filter = {\n                        oql: $scope.search.oql,\n                        value: $scope.search.json\n                    };\n                }\n                $scope.launchSearching();\n\n            }\n\n            $scope.applyFilter = function(event) {\n                $scope.launchSearching();\n            }\n\n            $scope.launchSearchingQuick = function() {\n                $scope.search.oql = $scope.search.json = '';\n                $scope.config.filter = $scope.search.quick;\n                $scope.launchSearching();\n            }\n\n            var windowTimeChanged = $scope.$on('onWindowTimeChanged', function(event, timeObj) {\n                $scope.config.windowFilter = timeObj ? timeObj : (config.windowFilter ? {} : timeObj);\n                var widget = {\n                    definition: definition,\n                    element: $element\n                }\n                $rootScope.$broadcast('adfWindowTimeChangedFromWidget', widget, $scope.config.windowFilter);\n                $scope.reload();\n            });\n\n            $scope.enter = function(event) {\n                var keycode = (event.keyCode ? event.keyCode : event.which);\n                if (keycode === 13) {\n                    if ($scope.toggleAdvanced === 0)\n                        $scope.launchSearchingAdv();\n                    if ($scope.toggleAdvanced === 1)\n                        $scope.launchSearchingQuick();\n                    if ($scope.toggleAdvanced === 2)\n                        $scope.launchCustomFilter();\n\n                }\n                if (keycode === 19) {\n                    $scope.showFinalFilter = $scope.showFinalFilter === false ? true : false;\n                }\n            }\n\n\n            $scope.customSelectors = [];\n            $scope.getCustomSelectors = function() {\n                if ($scope.config.customSelectors) {\n                    $scope.customSelectors = $scope.config.customSelectors;\n                } else {\n                    config.widgetSelectors().findFields(\"\").then(function(fields) {\n                        $scope.customSelectors = fields;\n                        $scope.$apply();\n                    }).catch(function(err) {\n                        $log.error(err);\n                    });\n                }\n\n            }\n\n            $scope.customFilter = [];\n            $scope.getcustomFilter = function() {\n                config.widgetSelectors().findFields(\"\").then(function(fields) {\n                    $scope.customFilter = fields;\n                    $scope.$apply();\n                }).catch(function(err) {\n                    $log.error(err);\n                });\n\n            }\n\n            $scope.ifCustomFilter = function() {\n                return $scope.customSelectors && config.sort && $scope.definition.type === 'FullDevicesList' && $scope.toggleAdvanced === 2;\n            }\n\n            $scope.showCustomFields = function() {\n                return $scope.definition.type === 'FullDevicesList' && $scope.toggleAdvanced === 2 && $scope.search.customFilter && $scope.filterAvailable && !$scope.editMode;\n            }\n\n            $scope.changeDirection = function() {\n                var direction = config.sort.direction;\n                if (direction === 'DESCENDING') {\n                    $scope.config.sort.direction = 'ASCENDING'\n                } else if (direction === 'ASCENDING') {\n                    $scope.config.sort.direction = 'DESCENDING'\n                }\n                $scope.reload();\n            }\n\n            $scope.changeDefaultTab = function() {\n\n\n                $scope.reload();\n            }\n\n            $scope.debugQuery = function() {\n                Filter.parseQuery($scope.search.oql || '')\n                    .then(function(data) {\n                        //$scope.elementos = data;\n                        $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\n                        $scope.unknownWords = '';\n                        $scope.filter.error = null;\n                    })\n                    .catch(function(err) {\n                        $scope.filter.error = err;\n                        // Tratar el error\n                    });\n\n            }\n\n            $scope.autocomplete_options = function() {\n                var autocomplete_options = {\n                    suggest: Filter.suggest_field_delimited,\n                    customSelectors: config.widgetSelectors()\n                };\n\n                return autocomplete_options;\n\n            };\n\n            // Multiple selection\n            $scope.selectedItems = {};\n\n            // Gestor de seleccion\n            $scope.selectionManager = {\n                currentSelection: $scope.selectedItems,\n                isSelected: function(key, obj) {\n                    if ($scope.selectedItems[key] && !angular.isUndefined(obj)) {\n                        $scope.selectedItems[key].data = obj;\n                    }\n\n                    return $scope.selectedItems[key] ? true : false;\n                },\n                totalSelected: function() {\n                    return Object.keys($scope.selectedItems).length;\n                }\n            };\n\n            $scope.manageSelectedItems = function() {\n                var selectionScope = $scope.$new();\n\n                selectionScope.selectionConfig = config.selectionConfig;\n\n                selectionScope.selectedItems = [];\n                angular.forEach($scope.selectedItems, function(value, key) {\n                    selectionScope.selectedItems.push({\n                        key: key,\n                        value: value\n                    });\n                });\n\n                selectionScope.currentSelection = {\n                    selected: selectionScope.selectedItems\n                };\n\n                var manageItemsSelectedTemplate = adfTemplatePath + 'widget-selection.html';\n                var opts = {\n                    scope: selectionScope,\n                    templateUrl: manageItemsSelectedTemplate,\n                    backdrop: 'static',\n                    size: 'lg',\n                    animation: true\n                };\n\n                var instance = $uibModal.open(opts);\n\n                selectionScope.restoreSelection = function() {\n                    selectionScope.currentSelection = {\n                        selected: selectionScope.selectedItems\n                    };\n                };\n\n                selectionScope.clearSelection = function() {\n                    selectionScope.currentSelection.selected = [];\n                };\n\n                // Cierra sy guarda los datos de nueva selección\n                selectionScope.applyFilter = function(type) {\n                    var customOql = selectionScope.selectionConfig.filterAction(selectionScope.currentSelection.selected, type);\n\n                    if (!angular.isUndefined(customOql) && customOql !== null) {\n                        $scope.toggleAdvanced = 0;\n                        Filter.parseQuery(customOql).then(function(data) {\n                            $scope.search.oql = customOql;\n                            $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\n                            $scope.unknownWords = '';\n                            $scope.filter.error = null;\n\n                            $scope.launchSearchingAdv();\n                        }).catch(function(err) {\n                            $scope.filter.error = err;\n                        });\n                    }\n                };\n\n                selectionScope.executeOperation = function(operationType) {\n                    if (!$scope.editMode) {\n                        $scope.$parent.$broadcast('widgetExecuteOperation', {\n                            'selectedItems': selectionScope.currentSelection.selected,\n                            'type': operationType\n                        });\n                    }\n                };\n\n                // Cierra sy guarda los datos de nueva selección\n                selectionScope.saveChangesDialog = function() {\n                    var finalSelection = {};\n                    angular.forEach(selectionScope.currentSelection.selected, function(data, idx) {\n                        finalSelection[data.key] = {\n                            data: data.value.data,\n                            visible: data.value.visible\n                        };\n                    });\n\n                    $scope.selectedItems = angular.copy(finalSelection);\n                    $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n\n                    $scope.selectionManager.lastItem = {};\n                    $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n\n                    instance.close();\n                    selectionScope.$destroy();\n                };\n\n                // Cierra sin realizar ninguna acción\n                selectionScope.closeDialog = function() {\n                    instance.close();\n                    selectionScope.$destroy();\n                };\n            };\n\n\n            // bind edit function\n            $scope.edit = function() {\n                var editScope = $scope.$new();\n                editScope.definition = angular.copy(definition);\n\n                var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\n                if (definition.editTemplateUrl) {\n                    adfEditTemplatePath = definition.editTemplateUrl;\n                }\n\n                var opts = {\n                    scope: editScope,\n                    templateUrl: adfEditTemplatePath,\n                    backdrop: 'static',\n                    size: 'lg'\n                };\n\n                var instance = $uibModal.open(opts);\n\n                editScope.closeDialog = function() {\n                    instance.close();\n                    editScope.$destroy();\n                };\n\n                // TODO create util method\n                function createApplyPromise(result) {\n                    var promise;\n                    if (typeof result === 'boolean') {\n                        var deferred = $q.defer();\n                        if (result) {\n                            deferred.resolve();\n                        } else {\n                            deferred.reject();\n                        }\n                        promise = deferred.promise;\n                    } else {\n                        promise = $q.when(result);\n                    }\n                    return promise;\n                }\n\n                editScope.saveDialog = function() {\n                    // clear validation error\n                    editScope.validationError = null;\n\n                    // build injection locals\n                    var widget = $scope.widget;\n\n                    // create a default apply method for widgets\n                    // without edit mode\n                    // see issue https://goo.gl/KHPQLZ\n                    var applyFn;\n                    if (widget.edit) {\n                        applyFn = widget.edit.apply;\n                    } else {\n                        applyFn = function() {\n                            return true;\n                        };\n                    }\n\n                    // injection locals\n                    var locals = {\n                        widget: widget,\n                        definition: editScope.definition,\n                        config: editScope.definition.config\n                    };\n\n                    // invoke apply function and apply if success\n                    var result = $injector.invoke(applyFn, applyFn, locals);\n                    createApplyPromise(result).then(function() {\n                        definition.title = editScope.definition.title;\n                        angular.extend(definition.config, editScope.definition.config);\n\n                        editScope.closeDialog();\n\n                        if (widget.edit && widget.edit.reload) {\n                            // reload content after edit dialog is closed\n                            $scope.$broadcast('widgetConfigChanged');\n                        }\n                    }, function(err) {\n                        if (err) {\n                            editScope.validationError = err;\n                        } else {\n                            editScope.validationError = 'VALIDATION_DURING_APPLY_FAILED';\n                        }\n                    });\n                };\n\n            };\n\n\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            templateUrl: dashboard.customWidgetTemplatePath ? dashboard.customWidgetTemplatePath : adfTemplatePath + 'widget.html',\n            scope: {\n                definition: '=',\n                col: '=column',\n                editMode: '=',\n                options: '=',\n                widgetState: '='\n            },\n            controller: function($scope) {\n                var adfDashboardCollapseExpand = $scope.$on('adfDashboardCollapseExpand', function(event, args) {\n                    $scope.widgetState.isCollapsed = args.collapseExpandStatus;\n                });\n\n                var adfWidgetEnterEditMode = $scope.$on('adfWidgetEnterEditMode', function(event, widget) {\n                    if (dashboard.idEquals($scope.definition.wid, widget.wid)) {\n                        $scope.edit();\n                    }\n                });\n\n                var adfIsEditMode = $scope.$on('adfIsEditMode', function(event, widget) {\n                    $scope.editing = true;\n                });\n\n                var adfDashboardChanged = $scope.$on('adfDashboardChanged', function(event, widget) {\n                    $scope.editing = false;\n                });\n\n                var adfDashboardEditsCancelled = $scope.$on('adfDashboardEditsCancelled', function(event, widget) {\n                    $scope.editing = false;\n                });\n\n                $scope.widgetClasses = function(w, definition) {\n                    var classes = definition.styleClass || '';\n                    // w is undefined, if the type of the widget is unknown\n                    // see issue #216\n                    if (!w || !w.frameless || $scope.editMode) {\n                        classes += ' panel panel-default';\n                    }\n                    return classes;\n                };\n\n                $scope.openFullScreen = function() {\n                    var definition = $scope.definition;\n                    var fullScreenScope = $scope.$new();\n                    var opts = {\n                        scope: fullScreenScope,\n                        templateUrl: adfTemplatePath + 'widget-fullscreen.html',\n                        size: definition.modalSize || 'lg', // 'sm', 'lg'\n                        backdrop: 'static',\n                        windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n                    };\n\n                    var instance = $uibModal.open(opts);\n                    fullScreenScope.closeDialog = function() {\n                        instance.close();\n                        fullScreenScope.$destroy();\n                    };\n                };\n\n                $scope.openFilter = function() {\n\n                }\n\n                $scope.openAboutScreen = function(size) {\n                    size = 'md';\n                    var modalInstance = $uibModal.open({\n                        animation: true,\n                        templateUrl: 'widgetAboutModal.html',\n                        controller: function($scope, $uibModalInstance, information) {\n                            $scope.about = {};\n                            $scope.about.info = information;\n                            $scope.ok = function() {\n                                $uibModalInstance.close();\n                            };\n                        },\n                        'size': size,\n                        resolve: {\n                            information: function() {\n                                return $scope.config.about;\n                            }\n                        }\n                    });\n\n                    modalInstance.result.then(function(selectedItem) {\n                        $scope.selected = selectedItem;\n                    }, function() {\n                        $log.info('Modal dismissed at: ' + new Date());\n                    });\n                };\n\n                $scope.saveWidgetScreen = function(wId) {\n                    $scope.$emit('generateSnapshot', {\n                        'objectSelector': '.widget_' + wId,\n                        'fileName': 'capture_' + new Date().getTime()\n                    });\n                };\n\n                var onWindowTimeChanged = function(timeObj) {\n                    var filter = {\n                        and: []\n                    };\n                    if (timeObj && timeObj.from) {\n                        filter.and.push({\n                            gt: {\n                                operationDate: timeObj.from\n                            }\n                        });\n\n                        if (timeObj.to) {\n                            filter.and.push({\n                                lt: {\n                                    operationDate: timeObj.to\n                                }\n                            });\n                        }\n                    } else {\n                        filter = null;\n                    }\n                    return filter;\n                }\n\n                var createQuickFilter = function(fieldsQuickSearch, filter) {\n                    var _filter = {\n                        or: []\n                    };\n                    var criteria;\n                    fieldsQuickSearch.forEach(function(field) {\n                        criteria = {};\n                        criteria[field.operator] = {};\n                        criteria[field.operator][field.name] = $scope.config.filter;\n                        _filter.or.push(criteria);\n                    });\n                    return _filter;\n                }\n\n                $scope.downloadCsv = function() {\n                    var columns = $scope.config.columns;\n                    var scope_filter = $scope.config.filter;\n                    var extra_filter;\n                    var final_filter = {};\n                    var order = $scope.config.sort ? $scope.config.sort : undefined;\n                    if ($scope.config.windowFilter) {\n                        var window_filter = $scope.config.onWindowTimeChanged($scope.config.windowFilter);\n                        if (window_filter && window_filter.and) {\n                            extra_filter = {\n                                and: window_filter.and\n                            };\n                        }\n                    }\n                    var filter;\n                    if (scope_filter.value && scope_filter.value.length > 4) {\n                        filter = JSON.parse(scope_filter.value);\n                    } else if (typeof scope_filter === 'string' && scope_filter.trim() !== '') {\n                        filter = createQuickFilter($scope.config.fieldsQuickSearch, scope_filter);\n                    }\n                    if (extra_filter) {\n                        if (filter) {\n                            final_filter = {\n                                and: [extra_filter, filter]\n                            };\n                        } else {\n                            final_filter = extra_filter;\n                        }\n                    } else {\n                        final_filter = filter;\n                    }\n                    $scope.$broadcast('downloadCsv', {\n                        'columns': columns,\n                        'filter': final_filter,\n                        'order': order\n                    });\n                };\n\n                $scope.generateQR = function() {\n                    $scope.$broadcast('generateQR');\n                };\n\n                var addItemToSelection = $scope.$on('addItemToSelection', function(event, item) {\n                    if (!$scope.selectedItems[item.key]) {\n                        $scope.selectedItems[item.key] = {\n                            data: item.data,\n                            visible: item.visible\n                        };\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n                        item.isSelected = true;\n                        $scope.selectionManager.lastItem = item;\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n                    }\n\n                });\n\n                var removeItemFromSelection = $scope.$on('removeItemFromSelection', function(event, item) {\n                    if ($scope.selectedItems[item.key]) {\n                        delete $scope.selectedItems[item.key];\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n                        item.isSelected = false;\n                        $scope.selectionManager.lastItem = item;\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n                    }\n                });\n\n                $scope.$on('$destroy', function() {\n                    adfDashboardCollapseExpand();\n                    adfWidgetEnterEditMode();\n                    adfIsEditMode();\n                    adfDashboardChanged();\n                    adfDashboardEditsCancelled();\n                    addItemToSelection();\n                    removeItemFromSelection();\n                });\n            },\n            compile: function() {\n\n                /**\n                 * use pre link, because link of widget-content\n                 * is executed before post link widget\n                 */\n                return {\n                    pre: preLink,\n                    post: postLink\n                };\n            }\n        };\n\n    });",null,"(function(window, undefined) {'use strict';\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf', ['adf.provider', 'ui.bootstrap', 'opengate-angular-js'])\n    .value('adfTemplatePath', '../src/templates/')\n    .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\n    .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\n    .value('adfVersion', '4.5.0');\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardColumn', function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\n    \n\n    /**\n     * moves a widget in between a column\n     */\n    function moveWidgetInColumn($scope, column, evt){\n      var widgets = column.widgets;\n      // move widget and apply to scope\n      $scope.$apply(function(){\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\n      });\n    }\n\n    /**\n     * finds a widget by its id in the column\n     */\n    function findWidget(column, index){\n      var widget = null;\n      for (var i=0; i<column.widgets.length; i++){\n        var w = column.widgets[i];\n        if (dashboard.idEquals(w.wid,index)){\n          widget = w;\n          break;\n        }\n      }\n      return widget;\n    }\n\n    /**\n     * finds a column by its id in the model\n     */\n    function findColumn(model, index){\n      var column = null;\n      for (var i=0; i<model.rows.length; i++){\n        var r = model.rows[i];\n        for (var j=0; j<r.columns.length; j++){\n          var c = r.columns[j];\n          if (dashboard.idEquals(c.cid, index)){\n            column = c;\n            break;\n          } else if (c.rows){\n            column = findColumn(c, index);\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * get the adf id from an html element\n     */\n    function getId(el){\n      var id = el.getAttribute('adf-id');\n      return id ? id : '-1';\n    }\n\n    /**\n     * adds a widget to a column\n     */\n    function addWidgetToColumn($scope, model, targetColumn, evt){\n      // find source column\n      var cid = getId(evt.from);\n      var sourceColumn = findColumn(model, cid);\n\n      if (sourceColumn){\n        // find moved widget\n        var wid = getId(evt.item);\n        var widget = findWidget(sourceColumn, wid);\n\n        if (widget){\n          // add new item and apply to scope\n          $scope.$apply(function(){\n            if (!targetColumn.widgets) {\n              targetColumn.widgets = [];\n            }\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\n\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\n          });\n        } else {\n          $log.warn('could not find widget with id ' + wid);\n        }\n      } else {\n        $log.warn('could not find column with id ' + cid);\n      }\n    }\n\n    /**\n     * removes a widget from a column\n     */\n    function removeWidgetFromColumn($scope, column, evt){\n      // remove old item and apply to scope\n      $scope.$apply(function(){\n        column.widgets.splice(evt.oldIndex, 1);\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n      });\n    }\n\n    /**\n     * enable sortable\n     */\n    function applySortable($scope, $element, model, column){\n      // enable drag and drop\n      var el = $element[0];\n      var sortable = Sortable.create(el, {\n        group: 'widgets',\n        handle: '.adf-move',\n        ghostClass: 'placeholder',\n        animation: 150,\n        onAdd: function(evt){\n          addWidgetToColumn($scope, model, column, evt);\n        },\n        onRemove: function(evt){\n          removeWidgetFromColumn($scope, column, evt);\n        },\n        onUpdate: function(evt){\n          moveWidgetInColumn($scope, column, evt);\n        }\n      });\n\n      // destroy sortable on column destroy event\n      $element.on('$destroy', function () {\n        // check sortable element, before calling destroy\n        // see https://github.com/sdorra/angular-dashboard-framework/issues/118\n        if (sortable.el){\n          sortable.destroy();\n        }\n      });\n    }\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        column: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        adfModel: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\n      link: function ($scope, $element) {\n        // set id\n        var col = $scope.column;\n        if (!col.cid){\n          col.cid = dashboard.id();\n        }\n\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\n          $compile(rowTemplate)($scope, function(cloned) {\n            $element.append(cloned);\n          });\n        } else {\n          // enable drag and drop for widget only columns\n          applySortable($scope, $element, $scope.adfModel, col);\n        }\n      }\n    };\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @ngdoc directive\n * @name adf.directive:adfDashboard\n * @element div\n * @restrict EA\n * @scope\n * @description\n *\n * `adfDashboard` is a directive which renders the dashboard with all its\n * components. The directive requires a name attribute. The name of the\n * dashboard can be used to store the model.\n *\n * @param {string} name name of the dashboard. This attribute is required.\n * @param {boolean=} editable false to disable the editmode of the dashboard.\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\n * @param {string=} structure the default structure of the dashboard.\n * @param {object=} adfModel model object of the dashboard.\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\n *                   events during edit mode not reset it if edit mode is exited.\n * @param {boolean=} categories enable categories for the add widget dialog.\n */\n\nangular.module('adf')\n    .directive('adfDashboard', function($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath, $faIcons, $translate) {\n        \n\n        function stringToBoolean(string) {\n            switch (angular.isDefined(string) ? string.toLowerCase() : null) {\n                case 'true':\n                case 'yes':\n                case '1':\n                    return true;\n                case 'false':\n                case 'no':\n                case '0':\n                case null:\n                    return false;\n                default:\n                    return Boolean(string);\n            }\n        }\n\n        function copyWidgets(source, target) {\n            if (source.widgets && source.widgets.length > 0) {\n                var w = source.widgets.shift();\n                while (w) {\n                    target.widgets.push(w);\n                    w = source.widgets.shift();\n                }\n            }\n        }\n\n        /**\n         * Copy widget from old columns to the new model\n         * @param object root the model\n         * @param array of columns\n         * @param counter\n         */\n        function fillStructure(root, columns, counter) {\n            counter = counter || 0;\n\n            if (angular.isDefined(root.rows)) {\n                angular.forEach(root.rows, function(row) {\n                    angular.forEach(row.columns, function(column) {\n                        // if the widgets prop doesn't exist, create a new array for it.\n                        // this allows ui.sortable to do it's thing without error\n                        if (!column.widgets) {\n                            column.widgets = [];\n                        }\n\n                        // if a column exist at the counter index, copy over the column\n                        if (angular.isDefined(columns[counter])) {\n                            // do not add widgets to a column, which uses nested rows\n                            if (angular.isUndefined(column.rows)) {\n                                copyWidgets(columns[counter], column);\n                                counter++;\n                            }\n                        }\n\n                        // run fillStructure again for any sub rows/columns\n                        counter = fillStructure(column, columns, counter);\n                    });\n                });\n            }\n            return counter;\n        }\n\n        /**\n         * Read Columns: recursively searches an object for the 'columns' property\n         * @param object model\n         * @param array  an array of existing columns; used when recursion happens\n         */\n        function readColumns(root, columns) {\n            columns = columns || [];\n\n            if (angular.isDefined(root.rows)) {\n                angular.forEach(root.rows, function(row) {\n                    angular.forEach(row.columns, function(col) {\n                        columns.push(col);\n                        // keep reading columns until we can't any more\n                        readColumns(col, columns);\n                    });\n                });\n            }\n\n            return columns;\n        }\n\n        function changeStructure(model, structure) {\n            var columns = readColumns(model);\n            var counter = 0;\n\n            model.rows = angular.copy(structure.rows);\n\n            while (counter < columns.length) {\n                counter = fillStructure(model, columns, counter);\n            }\n        }\n\n        function createConfiguration(type) {\n            var cfg = {};\n            var config = dashboard.widgets[type].config;\n            if (config) {\n                cfg = angular.copy(config);\n            }\n            return cfg;\n        }\n\n        function createWidget(type) {\n            var wdgt = {};\n            var widget = dashboard.widgets[type];\n            if (widget) {\n                wdgt = angular.copy(widget);\n            }\n            return wdgt;\n        }\n\n        /**\n         * Find first widget column in model.\n         *\n         * @param dashboard model\n         */\n        function findFirstWidgetColumn(model) {\n            var column = null;\n            if (!angular.isArray(model.rows)) {\n                $log.error('model does not have any rows');\n                return null;\n            }\n            for (var i = 0; i < model.rows.length; i++) {\n                var row = model.rows[i];\n                if (angular.isArray(row.columns)) {\n                    for (var j = 0; j < row.columns.length; j++) {\n                        var col = row.columns[j];\n                        if (!col.rows) {\n                            column = col;\n                            break;\n                        }\n                    }\n                }\n                if (column) {\n                    break;\n                }\n            }\n            return column;\n        }\n\n        /**\n         * Adds the widget to first column of the model.\n         *\n         * @param dashboard model\n         * @param widget to add to model\n         * @param name name of the dashboard\n         */\n        function addNewWidgetToModel(model, widget, name, forceToSave) {\n            if (model) {\n                var column = findFirstWidgetColumn(model);\n                if (column) {\n                    if (!column.widgets) {\n                        column.widgets = [];\n                    }\n                    column.widgets.unshift(widget);\n\n                    // broadcast added event\n                    $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\n\n                    if (forceToSave) {\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\n                    }\n                } else {\n                    $log.error('could not find first widget column');\n                }\n            } else {\n                $log.error('model is undefined');\n            }\n        }\n\n        /**\n         * Checks if the edit mode of the widget should be opened immediately.\n         *\n         * @param widget type\n         */\n        function isEditModeImmediate(type) {\n            var widget = dashboard.widgets[type];\n            return widget && widget.edit && widget.edit.immediate;\n        }\n\n        /**\n         * Opens the edit mode of the specified widget.\n         *\n         * @param dashboard scope\n         * @param widget\n         */\n        function openEditMode($scope, widget) {\n            // wait some time before fire enter edit mode event\n            $timeout(function() {\n                $scope.$broadcast('adfWidgetEnterEditMode', widget);\n            }, 200);\n        }\n\n        /**\n         * Splits an object into an array multiple objects inside.\n         *\n         * @param object source object\n         * @param size size of array\n         *\n         * @return array of splitted objects\n         */\n        function split(object, size) {\n            var arr = [];\n            var i = 0;\n            angular.forEach(object, function(value, key) {\n                var index = i++ % size;\n                if (!arr[index]) {\n                    arr[index] = {};\n                }\n                arr[index][key] = value;\n            });\n            return arr;\n        }\n\n        /**\n         * Creates object with the category name as key and an array of widgets as value.\n         *\n         * @param widgets array of widgets\n         *\n         * @return array of categories\n         */\n        function createCategories(widgets) {\n            var categories = {};\n            angular.forEach(widgets, function(widget, key) {\n                var category = widget.category;\n                // if the widget has no category use a default one\n                if (!category) {\n                    category = 'ADF.CATEGORY.MISCELANOUS';\n                }\n\n                widget.title = $translate.instant(widget.title);\n                widget.description = $translate.instant(widget.description);\n                widget.category = $translate.instant(widget.category);\n\n                // push widget to category array\n                if (angular.isUndefined(categories[widget.category])) {\n                    categories[widget.category] = {\n                        widgets: {}\n                    };\n                }\n\n                categories[widget.category].widgets[key] = widget;\n            });\n            return categories;\n        }\n\n        function createCategoriesList(widgets) {\n            var categories = [];\n            angular.forEach(widgets, function(widget, key) {\n                if (!widget.category) {\n                    widget.category = 'ADF.CATEGORY.MISCELLANEOUS';\n                }\n\n                widget.title = $translate.instant(widget.title);\n                widget.description = $translate.instant(widget.description);\n                widget.category = $translate.instant(widget.category);\n\n                if (!widget.categoryTags) {\n                    widget.categoryTags = 'ADF.CATEGORY.TAG.MISCELLANEOUS';\n                }\n\n                var categoriesTmp = widget.categoryTags.split(',');\n\n                angular.forEach(categoriesTmp, function(category, idx) {\n                    // push widget to category array\n                    var translatedCat = $translate.instant(category);\n                    if (categories.indexOf(translatedCat) === -1)\n                        categories.push(translatedCat);\n                });\n\n            });\n            return categories;\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            scope: {\n                structure: '@',\n                name: '@',\n                collapsible: '@',\n                editable: '@',\n                editMode: '@',\n                continuousEditMode: '=',\n                maximizable: '@',\n                adfModel: '=',\n                adfWidgetFilter: '=',\n                categories: '@',\n                hideButtons: '=',\n                extraData: '='\n            },\n            controller: function($scope) {\n                var model = {};\n                var structure = {};\n                var widgetFilter = null;\n                var structureName = {};\n                var name = $scope.name;\n\n                // Watching for changes on adfModel\n                $scope.$watch('adfModel', function(oldVal, newVal) {\n                    // has model changed or is the model attribute not set\n                    if (newVal !== null || (oldVal === null && newVal === null)) {\n                        model = $scope.adfModel;\n                        widgetFilter = $scope.adfWidgetFilter;\n                        if (!model || !model.rows) {\n                            structureName = $scope.structure;\n                            structure = dashboard.structures[structureName];\n                            if (structure) {\n                                if (model) {\n                                    model.rows = angular.copy(structure).rows;\n                                } else {\n                                    model = angular.copy(structure);\n                                }\n                                model.structure = structureName;\n                            } else {\n                                $log.error('could not find structure ' + structureName);\n                            }\n                        }\n\n                        if (model) {\n                            if (!model.title) {\n                                model.title = $translate.instant('ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD');\n                            }\n                            if (!model.titleTemplateUrl) {\n                                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\n                            }\n                            $scope.model = model;\n                        } else {\n                            $log.error('could not find or create model');\n                        }\n                    }\n                }, true);\n\n                // edit mode\n                $scope.editMode = false;\n                $scope.editClass = '';\n\n                function getNewModalScope() {\n                    var scope = $scope.$new();\n                    return scope;\n                }\n\n                $scope.deleteDashboard = function() {\n                    var dashData = {\n                        id: model.id,\n                        name: model.title\n                    };\n\n                    $rootScope.$broadcast('dashboardDelete', dashData);\n                };\n\n                $scope.toggleEditMode = function(openConfigWindow) {\n                    $scope.editMode = !$scope.editMode;\n                    if ($scope.editMode) {\n                        if (!$scope.continuousEditMode) {\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\n                            $rootScope.$broadcast('adfIsEditMode');\n                        }\n\n                        if (openConfigWindow) {\n                            $scope.editDashboardDialog();\n                        }\n                    }\n\n                    if (!$scope.editMode) {\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\n                    }\n                };\n\n                $scope.saveTemporalDashboard = function() {\n                    delete model.temporal;\n                    $rootScope.$broadcast('adfDashboardChanged', name, model);\n                };\n\n                var adfToggleEditMode = $scope.$on('adfToggleEditMode', function(event, isNewDashboard) {\n                    if (isNewDashboard) {\n                        $scope.toggleEditMode(true);\n                    } else {\n                        $scope.toggleEditMode();\n                    }\n                });\n\n                var adfCancelEditMode = $scope.$on('adfCancelEditMode', function(event, isNewDashboard) {\n                    if ($scope.editMode) {\n                        $scope.cancelEditMode();\n                    }\n                });\n\n                $scope.collapseAll = function(collapseExpandStatus) {\n                    $rootScope.$broadcast('adfDashboardCollapseExpand', {\n                        collapseExpandStatus: collapseExpandStatus\n                    });\n                };\n\n                $scope.cancelEditMode = function() {\n                    $scope.editMode = false;\n                    if (!$scope.continuousEditMode && ($scope.modelCopy !== $scope.adfModel)) {\n                        $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\n                    }\n                    $rootScope.$broadcast('adfDashboardEditsCancelled');\n                };\n\n                var adfEditDashboardDialog = $scope.$on('adfEditDashboardDialog', function(event, isNewDashboard) {\n                    if ($scope.editMode) {\n                        $scope.editDashboardDialog();\n                    }\n                });\n\n                var adfLaunchSearchingFromWidget = $scope.$on('adfLaunchSearchingFromWidget', function(event, widget, configFilter) {\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\n                });\n                var adfWindowTimeChangedFromWidget = $scope.$on('adfWindowTimeChangedFromWidget', function(event, widget, windowFilter) {\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\n                });\n\n                // edit dashboard settings\n                $scope.editDashboardDialog = function() {\n                    var editDashboardScope = getNewModalScope();\n                    // create a copy of the title, to avoid changing the title to\n                    // \"dashboard\" if the field is empty\n                    editDashboardScope.copy = {\n                        title: (model.title !== 'ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD' ? model.title : ''),\n                        description: model.description,\n                        icon: model.icon ? model.icon : 'fa-tachometer'\n                    };\n\n                    // pass icon list\n                    editDashboardScope.availableIcons = $faIcons.list();\n\n                    // pass dashboard structure to scope\n                    editDashboardScope.structures = dashboard.structures;\n\n                    // pass split function to scope, to be able to display structures in multiple columns\n                    editDashboardScope.split = split;\n\n                    var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\n                    if (model.editTemplateUrl) {\n                        adfEditTemplatePath = model.editTemplateUrl;\n                    }\n                    var instance = $uibModal.open({\n                        scope: editDashboardScope,\n                        templateUrl: adfEditTemplatePath,\n                        backdrop: 'static',\n                        keyboard: false,\n                        size: 'lg'\n                    });\n\n                    editDashboardScope.changeStructure = function(name, structure) {\n                        $log.info('change structure to ' + name);\n                        changeStructure(model, structure);\n                        if (model.structure !== name) {\n                            model.structure = name;\n                        }\n                    };\n                    editDashboardScope.closeDialog = function() {\n                        // copy the new title back to the model\n                        model.title = editDashboardScope.copy.title;\n                        model.description = editDashboardScope.copy.description;\n                        model.icon = editDashboardScope.copy.icon;\n\n                        // close modal and destroy the scope\n                        instance.close();\n                        editDashboardScope.$destroy();\n                    };\n                };\n\n                var adfOpenWidgetFromOther = $scope.$on('adfOpenWidgetFromOther', function(event, widget, config) {\n                    var internal_config = createConfiguration(widget);\n                    var _config = angular.merge({}, internal_config, config);\n                    var w = {\n                        type: widget,\n                        config: _config,\n                        title: _config.title\n                    };\n                    addNewWidgetToModel(model, w, name, !$scope.editMode);\n                });\n\n                var adfOpenModalWidgetFromOther = $scope.$on('adfOpenModalWidgetFromOther', function(event, widgetType, config) {\n                    var widget = createWidget(widgetType);\n                    widget.config = angular.merge({}, widget.config, config);\n                    widget.type = widgetType;\n                    if (widget.config.title) {\n                        widget.title = widget.config.title;\n                    }\n                    var fullScreenScope = $scope.$new();\n                    fullScreenScope.definition = fullScreenScope.widget = widget;\n                    var opts = {\n                        scope: fullScreenScope,\n                        templateUrl: adfTemplatePath + 'widget-fullscreen.html',\n                        size: fullScreenScope.definition.modalSize || 'lg', // 'sm', 'lg'\n                        backdrop: 'static',\n                        windowClass: (fullScreenScope.definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n                    };\n\n                    fullScreenScope.persistDashboard = function() {\n                        $rootScope.$broadcast('adfOpenWidgetFromOther', this.$parent.widget.type, this.$parent.widget.config);\n                        this.closeDialog();\n                    }\n\n                    var instance = $uibModal.open(opts);\n                    fullScreenScope.closeDialog = function() {\n                        instance.close();\n                        fullScreenScope.$destroy();\n                    };\n\n                });\n\n                var adfAddWidgetDialog = $scope.$on('adfAddWidgetDialog', function(event, isNewDashboard) {\n                    if (!model.temporal && model.editable) {\n                        if (!$scope.editMode) {\n                            $scope.editMode = true;\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\n                            $rootScope.$broadcast('adfIsEditMode');\n                        }\n\n                        $scope.addWidgetDialog();\n                    }\n                });\n\n                // add widget dialog\n                $scope.addScopeCfg = {\n                    widgetFilter: {},\n                    widgetSortingDirection: '',\n                    widgetSorting: 'priority'\n                };\n\n                $scope.addWidgetDialog = function() {\n                    var addScope = getNewModalScope();\n                    var widgets;\n                    if (angular.isFunction(widgetFilter)) {\n                        widgets = {};\n                        angular.forEach(dashboard.widgets, function(widget, type) {\n                            if (widgetFilter(widget, type, model)) {\n                                widgets[type] = widget;\n                            }\n                        });\n                    } else {\n                        widgets = dashboard.widgets;\n                    }\n                    addScope.widgets = widgets;\n\n                    angular.forEach(addScope.widgets, function(widget, type) {\n                        widget.key = type;\n                        if (!widget.category) {\n                            widget.category = 'Miscellaneous';\n                        }\n                    });\n\n                    // pass createCategories function to scope, if categories option is enabled\n                    if ($scope.options.categories) {\n                        addScope.createCategories = createCategories;\n                    } else {\n                        addScope.availableCategories = createCategoriesList(widgets);\n                    }\n\n                    var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\n                    if (model.addTemplateUrl) {\n                        adfAddTemplatePath = model.addTemplateUrl;\n                    }\n\n                    var opts = {\n                        scope: addScope,\n                        templateUrl: adfAddTemplatePath,\n                        backdrop: 'static',\n                        size: 'lg'\n                    };\n\n                    var instance = $uibModal.open(opts);\n\n                    addScope.widgetFilterCfg = $scope.addScopeCfg;\n\n                    // addScope.widgetFilter = $scope.addScopeCfg.widgetFilter;\n                    // addScope.widgetSortingDirection = $scope.addScopeCfg.widgetSortingDirection;\n                    // addScope.widgetSorting = $scope.addScopeCfg.widgetSorting;\n\n                    addScope.addWidget = function(widget) {\n                        var w = {\n                            type: widget,\n                            config: createConfiguration(widget)\n                        };\n                        addNewWidgetToModel(model, w, name);\n                        // close and destroy\n                        instance.close();\n                        addScope.$destroy();\n\n                        // check for open edit mode immediately\n                        if (isEditModeImmediate(widget)) {\n                            openEditMode($scope, w);\n                        }\n                    };\n\n                    addScope.changeThumbnail = function(widget) {\n                        if (widget.images) {\n                            if (angular.isUndefined(widget._currThumb)) {\n                                widget._currThumb = 1;\n                            } else {\n                                widget._currThumb += 1;\n                            }\n\n\n                            if (widget._currThumb >= widget.images.length) {\n                                widget._currThumb = 0;\n                            }\n\n                            widget._currImg = widget.images[widget._currThumb];\n                        }\n                    };\n\n                    addScope.closeDialog = function() {\n                        // close and destroy\n                        instance.close();\n                        addScope.$destroy();\n                    };\n                };\n\n                $scope.addNewWidgetToModel = addNewWidgetToModel;\n\n                $scope.$on('destroy', function() {\n                    adfLaunchSearchingFromWidget();\n                    adfWindowTimeChangedFromWidget();\n                    adfToggleEditMode();\n                    adfOpenWidgetFromOther();\n                    adfOpenModalWidgetFromOther();\n                    adfCancelEditMode();\n                    adfAddWidgetDialog();\n                    adfEditDashboardDialog();\n                });\n            },\n            link: function($scope, $element, $attr) {\n                // pass options to scope\n                var options = {\n                    name: $attr.name,\n                    editable: true,\n                    enableConfirmDelete: stringToBoolean($attr.enableConfirmDelete),\n                    maximizable: stringToBoolean($attr.maximizable),\n                    collapsible: stringToBoolean($attr.collapsible),\n                    categories: stringToBoolean($attr.categories),\n                    extraData: {}\n                };\n\n                if (angular.isDefined($attr.editable)) {\n                    options.editable = stringToBoolean($attr.editable);\n                }\n\n                if (angular.isDefined($scope.extraData)) {\n                    options.extraData = $scope.extraData;\n                }\n\n                options.extraData.editing = $scope.editMode;\n\n                $scope.options = options;\n            },\n            templateUrl: adfTemplatePath + 'dashboard.html'\n        };\n    });\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .filter('adfOrderByObjectKey', function($filter) {\n    \n\n    return function(item, key){\n      var array = [];\n      angular.forEach(item, function(value, objectKey){\n        value[key] = objectKey;\n        array.push(value);\n      });\n      return $filter('orderBy')(array, key);\n    };\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\n/**\n * @ngdoc object\n * @name adf.dashboardProvider\n * @description\n *\n * The dashboardProvider can be used to register structures and widgets.\n */\nangular.module('adf.provider', [])\n    .provider('dashboard', function () {\n\n        var widgets = {};\n        var widgetsPath = '';\n        var structures = {};\n        var messageTemplate = '<div class=\"alert alert-primary\">{}</div>';\n        var loadingTemplate = '\\\n      <div class=\"progress progress-striped active\">\\n\\\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\n          <span class=\"sr-only\" translate>FORM.MSG.LOADING ...</span>\\n\\\n        </div>\\n\\\n      </div>';\n        var customWidgetTemplatePath = null;\n\n        // default apply function of widget.edit.apply\n        var defaultApplyFunction = function () {\n            return true;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#widget\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Registers a new widget.\n         *\n         * @param {string} name of the widget\n         * @param {object} widget to be registered.\n         *\n         *   Object properties:\n         *\n         *   - `title` - `{string=}` - The title of the widget.\n         *   - `description` - `{string=}` - Description of the widget.\n         *   - `category` - `{string=}` - Category of the widget.\n         *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\n         *   - `config` - `{object}` - Predefined widget configuration.\n         *   - `controller` - `{string=|function()=}` - Controller fn that should be\n         *      associated with newly created scope of the widget or the name of a\n         *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\n         *      if passed as a string.\n         *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\n         *      published to scope under the `controllerAs` name.\n         *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\n         *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\n         *   - `template` - `{string=|function()=}` - html template as a string.\n         *   - `templateUrl` - `{string=}` - path to an html template.\n         *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\n         *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n         *      be injected into the controller. If any of these dependencies are promises, the widget\n         *      will wait for them all to be resolved or one to be rejected before the controller is\n         *      instantiated.\n         *      If all the promises are resolved successfully, the values of the resolved promises are\n         *      injected.\n         *\n         *      The map object is:\n         *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n         *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n         *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\n         *        and the return value is treated as the dependency. If the result is a promise, it is\n         *        resolved before its value is injected into the controller.\n         *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n         *      on the scope of the widget.\n         *   - `edit` - `{object}` - Edit modus of the widget.\n         *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n         *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\n         *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n         *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\n         *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\n         *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n         *        on the scope of the widget.\n         *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\n         *        Default is true.\n         *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\n         *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\n         *        The function have to return a boolean or an promise which can be resolved to a boolean.\n         *        The function can use injection.\n         *\n         * @returns {Object} self\n         */\n        this.widget = function (name, widget) {\n            var w = angular.extend({\n                reload: false,\n                frameless: false\n            }, widget);\n            if (w.edit) {\n                var edit = {\n                    reload: true,\n                    immediate: false,\n                    apply: defaultApplyFunction\n                };\n                angular.extend(edit, w.edit);\n                w.edit = edit;\n            }\n            widgets[name] = w;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#widgetsPath\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Sets the path to the directory which contains the widgets. The widgets\n         * path is used for widgets with a templateUrl which contains the\n         * placeholder {widgetsPath}. The placeholder is replaced with the\n         * configured value, before the template is loaded, but the template is\n         * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\n         * The default value of widgetPaths is ''.\n         *\n         *\n         * @param {string} path to the directory which contains the widgets\n         *\n         * @returns {Object} self\n         */\n        this.widgetsPath = function (path) {\n            widgetsPath = path;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#structure\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Registers a new structure.\n         *\n         * @param {string} name of the structure\n         * @param {object} structure to be registered.\n         *\n         *   Object properties:\n         *\n         *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\n         *     - `styleClass` - `{string}` - CSS Class of the row.\n         *     - `columns` - `{Array.<Object>}` - Columns of the row.\n         *       - `styleClass` - `{string}` - CSS Class of the column.\n         *\n         * @returns {Object} self\n         */\n        this.structure = function (name, structure) {\n            structures[name] = structure;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#messageTemplate\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the template for messages.\n         *\n         * @param {string} template for messages.\n         *\n         * @returns {Object} self\n         */\n        this.messageTemplate = function (template) {\n            messageTemplate = template;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#loadingTemplate\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the template which is displayed as\n         * long as the widget resources are not resolved.\n         *\n         * @param {string} template loading template\n         *\n         * @returns {Object} self\n         */\n        this.loadingTemplate = function (template) {\n            loadingTemplate = template;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#customWidgetTemplatePath\n         * @propertyOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the container template for the widgets\n         *\n         * @param {string} path to the custom widget template\n         *\n         * @returns {Object} self\n         */\n        this.customWidgetTemplatePath = function (templatePath) {\n            customWidgetTemplatePath = templatePath;\n            return this;\n        };\n\n        /**\n         * @ngdoc service\n         * @name adf.dashboard\n         * @description\n         *\n         * The dashboard holds all options, structures and widgets.\n         *\n         * @property {Array.<Object>} widgets Array of registered widgets.\n         * @property {string} widgetsPath Default path for widgets.\n         * @property {Array.<Object>} structures Array of registered structures.\n         * @property {string} messageTemplate Template for messages.\n         * @property {string} loadingTemplate Template for widget loading.\n         * * @property {string} customWidgetTemplatePath Changes the container template for the widgets\n         *\n         * @returns {Object} self\n         */\n        this.$get = function () {\n            var cid = 0;\n\n            return {\n                widgets: widgets,\n                widgetsPath: widgetsPath,\n                structures: structures,\n                messageTemplate: messageTemplate,\n                loadingTemplate: loadingTemplate,\n                customWidgetTemplatePath: customWidgetTemplatePath,\n\n                /**\n                 * @ngdoc method\n                 * @name adf.dashboard#id\n                 * @methodOf adf.dashboard\n                 * @description\n                 *\n                 * Creates an ongoing numeric id. The method is used to create ids for\n                 * columns and widgets in the dashboard.\n                 */\n                id: function () {\n                    return new Date().getTime() + '-' + (++cid);\n                },\n\n                /**\n                 * @ngdoc method\n                 * @name adf.dashboard#idEqual\n                 * @methodOf adf.dashboard\n                 * @description\n                 *\n                 * Checks if the given ids are equal.\n                 *\n                 * @param {string} id widget or column id\n                 * @param {string} other widget or column id\n                 */\n                idEquals: function (id, other) {\n                    // use toString, because old ids are numbers\n                    return ((id) && (other)) && (id.toString() === other.toString());\n                }\n            };\n        };\n\n    });\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardRow', function ($compile, adfTemplatePath, columnTemplate) {\n    \n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        row: '=',\n        adfModel: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\n      link: function($scope, $element) {\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\n          $compile(columnTemplate)($scope, function(cloned) {\n            $element.append(cloned);\n          });\n        }\n      }\n    };\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfStructurePreview', function(adfTemplatePath) {\n\n    function adjustRowHeight(container){\n      if (container.rows && container.rows.length > 0){\n        var height = 100 / container.rows.length;\n        angular.forEach(container.rows, function(row){\n          row.style = {\n            height: height + '%'\n          }\n\n          if (row.columns){\n            angular.forEach(row.columns, function(column){\n              adjustRowHeight(column);\n            });\n          }\n        });\n      }\n    }\n\n    function prepareStructure($scope){\n      var structure = angular.copy($scope.structure);\n      adjustRowHeight(structure);\n      $scope.preview = structure;\n    }\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        name: '=',\n        structure: '=',\n        selected: '='\n      },\n      templateUrl: adfTemplatePath + 'structure-preview.html',\n      link: prepareStructure\n    };\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf')\n    .directive('adfWidgetContent', function ($log, $q, widgetService,\n        $compile, $controller, $injector, dashboard, $translate) {\n\n        function renderError($element, msg) {\n            $log.warn(msg);\n            $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\n        }\n\n        function compileWidget($scope, $element, currentScope, configChanged) {\n            var model = $scope.model;\n            var content = $scope.content;\n\n            var extra = $scope.extra;\n\n            var newScope = currentScope;\n            if (!model) {\n                $translate('ADF.ERROR.MODEL_IS_UNDEFINED').then(function (translateMessage) {\n                    renderError($element, translateMessage);\n                });\n            } else if (!content) {\n                if (model.title) {\n                    $translate('ADF.ERROR.WIDGET_FOR_DEPRECTATED', {\n                        title: model.title\n                    }).then(function (translateMessage) {\n                        renderError($element, translateMessage);\n                    });\n                } else {\n                    $translate('ADF.ERROR.WIDGET_DEPRECTATED').then(function (translateMessage) {\n                        renderError($element, translateMessage);\n                    });\n                }\n            } else {\n                if (newScope) {\n                    var is_menu = newScope.menu !== undefined && newScope.menu !== null;\n                    var is_itemsPerPage = newScope.itemsPerPage !== undefined && newScope.itemsPerPage !== null;\n                    if (is_menu || is_itemsPerPage || configChanged || !angular.isFunction(newScope.reloadData)) {\n                        newScope = renderWidget($scope, $element, currentScope, model, content, extra);\n                    } else {\n                        newScope.reloadData();\n                    }\n                } else {\n                    newScope = renderWidget($scope, $element, currentScope, model, content, extra);\n                }\n            }\n\n            function _getWindowTime(type) {\n                if (type === \"custom\") {\n                    return {\n                        from: newScope.config.windowFilter.from,\n                        to: newScope.config.windowFilter.to\n                    }\n                }\n                var from = window.moment().subtract(1, type);\n                return {\n                    from: from._d\n                };\n            }\n\n            if (newScope) {\n                if (newScope.config) {\n                    newScope.config.getWindowTime = function () {\n                        var windowFilter = newScope.config.windowFilter;\n                        if (windowFilter && windowFilter.type) {\n                            var winTime = _getWindowTime(windowFilter.type);\n                            /* jshint ignore:start */\n                            if (!window.eval(newScope.config.windowFilter.rawdate)) {\n                                for (var key in winTime) {\n                                    winTime[key] = window.moment(winTime[key]).format();\n                                }\n                                winTime['rawdate'] = true;\n                            }\n                            /* jshint ignore:end */\n                            return winTime;\n                        }\n                    }\n                }\n\n                if (extra) {\n                    newScope.editing = extra.editing ? true : false;\n                    newScope.extraData = extra;\n                }\n            }\n            return newScope;\n        }\n\n        function renderWidget($scope, $element, currentScope, model, content, extra) {\n            // display loading template\n            $element.html(dashboard.loadingTemplate);\n\n            // create new scope\n            var templateScope = $scope.$new();\n\n            // pass config object to scope\n            if (!model.config) {\n                model.config = {};\n            }\n\n            templateScope.config = model.config;\n            templateScope.editing = extra && extra.editing;\n\n            if (extra) {\n                templateScope.extra = extra;\n            }\n\n            templateScope.selectionManager = (currentScope && currentScope.selectionManager) ? currentScope.selectionManager : undefined;\n\n            // local injections\n            var base = {\n                $scope: templateScope,\n                widget: model,\n                config: model.config\n            };\n\n            // get resolve promises from content object\n            var resolvers = {};\n            resolvers.$tpl = widgetService.getTemplate(content);\n            if (content.resolve) {\n                angular.forEach(content.resolve, function (promise, key) {\n                    if (angular.isString(promise)) {\n                        resolvers[key] = $injector.get(promise);\n                    } else {\n                        resolvers[key] = $injector.invoke(promise, promise, base);\n                    }\n                });\n            }\n\n            // resolve all resolvers\n            $q.all(resolvers).then(function (locals) {\n                angular.extend(locals, base);\n\n                // pass resolve map to template scope as defined in resolveAs\n                if (content.resolveAs) {\n                    templateScope[content.resolveAs] = locals;\n                }\n\n                // compile & render template\n                var template = locals.$tpl;\n                $element.html(template);\n                if (content.controller) {\n                    var templateCtrl = $controller(content.controller, locals);\n                    if (content.controllerAs) {\n                        templateScope[content.controllerAs] = templateCtrl;\n                    }\n                    $element.children().data('$ngControllerController', templateCtrl);\n                }\n                $compile($element.contents())(templateScope);\n            }, function (reason) {\n                // handle promise rejection\n                var msg = 'ADF.ERROR.COULD_NOT_RESOLVE_ALL_PROMISSES';\n                $translate(msg, {\n                    reason: (reason ? \": \" + reason : reason)\n                }).then(function (translateMessage) {\n                    renderError($element, translateMessage);\n                });\n            });\n\n            // destroy old scope\n            if (currentScope) {\n                currentScope.$destroy();\n            }\n\n            return templateScope;\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            scope: {\n                model: '=',\n                content: '=',\n                extra: '='\n            },\n            link: function ($scope, $element) {\n                var currentScope = compileWidget($scope, $element, null);\n                var widgetConfigChangedEvt = $scope.$on('widgetConfigChanged', function () {\n                    currentScope = compileWidget($scope, $element, currentScope, true);\n                });\n\n                var widgetReloadEvt = $scope.$on('widgetReload', function () {\n                    currentScope = compileWidget($scope, $element, currentScope, false);\n                });\n\n                $scope.$on('destroy', function () {\n                    widgetConfigChangedEvt();\n                    widgetReloadEvt();\n                });\n            }\n        };\n    });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/**\n * The widget service provide helper functions to render widgets and their content.\n */\nangular.module('adf')\n  .factory('widgetService', function($http, $q, $sce, $templateCache, dashboard) {\n    \n\n    function parseUrl(url) {\n      var parsedUrl = url;\n      if (url.indexOf('{widgetsPath}') >= 0) {\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\n                .replace('//', '/');\n        if (parsedUrl.indexOf('/') === 0) {\n          parsedUrl = parsedUrl.substring(1);\n        }\n      }\n      return parsedUrl;\n    }\n\n    var exposed = {};\n\n    exposed.getTemplate = function(widget){\n      var deferred = $q.defer();\n\n      if (widget.template) {\n        deferred.resolve(widget.template);\n      } else if (widget.templateUrl) {\n        // try to fetch template from cache\n        var tpl = $templateCache.get(widget.templateUrl);\n        if (tpl) {\n          deferred.resolve(tpl);\n        } else {\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\n          $http.get(url)\n               .success(function(response) {\n                 // put response to cache, with unmodified url as key\n                 $templateCache.put(widget.templateUrl, response);\n                 deferred.resolve(response);\n               })\n               .error(function() {\n                 deferred.reject('could not load template');\n               });\n        }\n      }\n\n      return deferred.promise;\n    };\n\n    return exposed;\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf')\n    .directive('adfWidget', function($injector, $q, $log, $uibModal, $rootScope, $interval, dashboard, adfTemplatePath, Filter) {\n        function preLink($scope) {\n            var definition = $scope.definition;\n\n            if (definition) {\n                var w = dashboard.widgets[definition.type];\n                if (w) {\n                    // pass title\n                    if (!definition.title) {\n                        definition.title = w.title;\n                    }\n\n                    if (!definition.titleTemplateUrl) {\n                        definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\n                        if (w.titleTemplateUrl) {\n                            definition.titleTemplateUrl = w.titleTemplateUrl;\n                        }\n                    }\n\n                    if (!definition.editTemplateUrl) {\n                        definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\n                        if (w.editTemplateUrl) {\n                            definition.editTemplateUrl = w.editTemplateUrl;\n                        }\n                    }\n\n                    if (!definition.titleTemplateUrl) {\n                        definition.frameless = w.frameless;\n                    }\n\n                    if (!definition.styleClass) {\n                        definition.styleClass = w.styleClass;\n                    }\n\n                    // set id for sortable\n                    if (!definition.wid) {\n                        definition.wid = dashboard.id();\n                    }\n\n                    // pass copy of widget to scope\n                    $scope.widget = angular.copy(w);\n\n                    // create config object\n                    var config = definition.config;\n                    if (config) {\n                        if (angular.isString(config)) {\n                            config = angular.fromJson(config);\n                        }\n                    } else {\n                        config = {};\n                    }\n\n                    if (!config.reloadPeriod) {\n                        config.reloadPeriod = \"0\";\n                    }\n\n                    if (typeof $scope.widget.show_modal_footer === \"undefined\") {\n                        $scope.widget.show_modal_footer = true;\n                    }\n\n                    if (typeof $scope.widget.show_reload_config === \"undefined\") {\n                        $scope.widget.show_reload_config = true;\n                    }\n\n                    // pass config to scope\n                    $scope.config = config;\n\n                    // collapse exposed $scope.widgetState property\n                    if (!$scope.widgetState) {\n                        $scope.widgetState = {};\n                        $scope.widgetState.isCollapsed = (w.collapsed === true) ? w.collapsed : false;\n                    }\n\n                } else {\n                    $log.warn('could not find widget ' + definition.type);\n                }\n            } else {\n                $log.debug('definition not specified, widget was probably removed');\n            }\n        }\n\n        function postLink($scope, $element) {\n            var definition = $scope.definition;\n            if (!definition) {\n                $log.debug('widget not found');\n                return;\n            }\n            if (!$scope.config) {\n                $scope.config = {};\n            }\n\n            var config = $scope.config;\n\n            // bind close function\n            var deleteWidget = function() {\n                var column = $scope.col;\n                if (column) {\n                    var index = column.widgets.indexOf(definition);\n                    if (index >= 0) {\n                        column.widgets.splice(index, 1);\n                    }\n                }\n                $element.remove();\n                $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n            };\n\n            $scope.remove = function() {\n                if ($scope.options.enableConfirmDelete) {\n                    var deleteScope = $scope.$new();\n\n                    var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\n                    if (definition.deleteTemplateUrl) {\n                        deleteTemplateUrl = definition.deleteTemplateUrl;\n                    }\n                    var opts = {\n                        scope: deleteScope,\n                        templateUrl: deleteTemplateUrl,\n                        backdrop: 'static'\n                    };\n                    var instance = $uibModal.open(opts);\n\n                    deleteScope.closeDialog = function() {\n                        instance.close();\n                        deleteScope.$destroy();\n                    };\n                    deleteScope.deleteDialog = function() {\n                        deleteWidget();\n                        deleteScope.closeDialog();\n                    };\n                } else {\n                    deleteWidget();\n                }\n            };\n\n\n            $scope.print = function() {\n                if (!$scope.editMode) {\n                    $scope.$broadcast('widgetPrint');\n                }\n            }\n\n            $scope.isExecuteOperationEnabled = function() {\n\n                if (config.entityKey)\n                    return true;\n                var filter = config.filter;\n                if (typeof filter === \"string\") {\n                    return filter.length > 0;\n                }\n                if (typeof filter === \"object\") {\n                    return filter.value.length > 2 && filter.oql;\n                }\n                return false;\n            }\n\n            $scope.executeOperation = function() {\n                if (!$scope.editMode) {\n\n                    $scope.$parent.$broadcast('widgetExecuteOperation');\n                }\n            };\n\n            // bind reload function\n            var stopReloadTimeout;\n\n            function _setReloadTimeout() {\n                if (config && config.reloadPeriod && config.reloadPeriod !== \"0\") {\n                    if (angular.isDefined(stopReloadTimeout)) {\n                        $interval.cancel(stopReloadTimeout)\n                        stopReloadTimeout = undefined;\n                    };\n                    stopReloadTimeout = $interval($scope.reload, (config.reloadPeriod * 1000));\n                }\n            }\n\n            $scope.reload = function(completeReload) {\n                if (completeReload) {\n                    $scope.$broadcast('widgetReload', completeReload);\n                } else {\n                    $scope.$broadcast('widgetReload');\n                }\n\n                _setReloadTimeout();\n            };\n\n            // verificacion de periodo de refresco\n            _setReloadTimeout();\n\n            $element.on('$destroy', function() {\n                $interval.cancel(stopReloadTimeout);\n            });\n\n            $scope.filter = {\n                value: \"\"\n            };\n            $scope.sort = {\n                value: \"\",\n                direction: \"\"\n            };\n\n            $scope.toggleAdvanced = 1;\n            var filter = config.filter;\n            if (typeof filter === \"object\" && filter.oql && filter.oql.length > 2) {\n                $scope.search = {\n                    oql: filter.oql,\n                    json: filter.value\n                };\n                $scope.toggleAdvanced = 0;\n            } else if (typeof filter === \"string\") {\n                $scope.search = {\n                    quick: filter\n                };\n                $scope.toggleAdvanced = 1;\n            } else if (typeof filter === \"object\" && filter.fields) {\n                $scope.search = {\n                    customFilter: filter.fields\n                };\n                $scope.search.fields = [];\n                angular.forEach(filter.fields, function(v, key) {\n                    $scope.search.fields.push(v.name);\n                });\n                $scope.toggleAdvanced = 2;\n            } else {\n                $scope.search = {\n                    quick: filter = \"\"\n                };\n            }\n\n            $scope.toggleFilter = function(advanced) {\n                $scope.toggleAdvanced = advanced;\n            };\n            $scope.filterAvailable = false;\n            $scope.showFilter = function() {\n                $scope.filterAvailable = $scope.filterAvailable === true ? false : true;\n            };\n\n            $scope.showFinalFilter = false;\n\n            $scope.launchSearching = function() {\n                var widget = {\n                    definition: definition,\n                    element: $element\n                };\n\n                $rootScope.$broadcast('adfLaunchSearchingFromWidget', widget, $scope.config.filter);\n                $scope.reload(true);\n            }\n            $scope.addCustomFilter = function(key) {\n                $scope.search.customFilter = $scope.search.customFilter ? $scope.search.customFilter : [];\n                $scope.search.customFilter.push({\n                    name: key,\n                    value: ''\n                });\n            }\n\n            $scope.launchCustomFilter = function() {\n                if ($scope.search.customFilter && $scope.search.customFilter.length > 0) {\n                    $scope.search.oql = $scope.search.json = '';\n\n                    $scope.config.filter = {\n                        value: {\n                            and: []\n                        },\n                        fields: $scope.search.customFilter\n                    }\n                    angular.forEach($scope.search.customFilter, function(v, key) {\n                        if (v.value) {\n                            var like = {};\n                            like[v.name] = v.value;\n                            $scope.config.filter.value.and.push({\n                                'like': like\n                            });\n                        }\n\n                    });\n                    $scope.config.filter.value = JSON.stringify($scope.config.filter.value);\n                }\n\n                $scope.launchSearching();\n            }\n\n\n\n            $scope.deleteFilter = function(value, model) {\n                angular.forEach($scope.search.customFilter, function(v, key) {\n                    if (v.name === value) {\n                        $scope.search.customFilter.splice(key, 1);\n                    }\n                });\n                if ($scope.search.customFilter.length === 0) {\n                    $scope.config.filter = {};\n                }\n            };\n\n\n            $scope.launchSearchingAdv = function() {\n                $scope.search.quick = '';\n                if ($scope.search.json === '' || $scope.search.json === '{}' || (!angular.isString($scope.search.json) && Object.keys($scope.search.json).length === 0)) {\n                    $scope.config.filter = {\n                        oql: '',\n                        value: ''\n                    };\n                } else {\n                    $scope.config.filter = {\n                        oql: $scope.search.oql,\n                        value: $scope.search.json\n                    };\n                }\n                $scope.launchSearching();\n\n            }\n\n            $scope.applyFilter = function(event) {\n                $scope.launchSearching();\n            }\n\n            $scope.launchSearchingQuick = function() {\n                $scope.search.oql = $scope.search.json = '';\n                $scope.config.filter = $scope.search.quick;\n                $scope.launchSearching();\n            }\n\n            var windowTimeChanged = $scope.$on('onWindowTimeChanged', function(event, timeObj) {\n                $scope.config.windowFilter = timeObj ? timeObj : (config.windowFilter ? {} : timeObj);\n                var widget = {\n                    definition: definition,\n                    element: $element\n                }\n                $rootScope.$broadcast('adfWindowTimeChangedFromWidget', widget, $scope.config.windowFilter);\n                $scope.reload();\n            });\n\n            $scope.enter = function(event) {\n                var keycode = (event.keyCode ? event.keyCode : event.which);\n                if (keycode === 13) {\n                    if ($scope.toggleAdvanced === 0)\n                        $scope.launchSearchingAdv();\n                    if ($scope.toggleAdvanced === 1)\n                        $scope.launchSearchingQuick();\n                    if ($scope.toggleAdvanced === 2)\n                        $scope.launchCustomFilter();\n\n                }\n                if (keycode === 19) {\n                    $scope.showFinalFilter = $scope.showFinalFilter === false ? true : false;\n                }\n            }\n\n\n            $scope.customSelectors = [];\n            $scope.getCustomSelectors = function() {\n                if ($scope.config.customSelectors) {\n                    $scope.customSelectors = $scope.config.customSelectors;\n                } else {\n                    config.widgetSelectors().findFields(\"\").then(function(fields) {\n                        $scope.customSelectors = fields;\n                        $scope.$apply();\n                    }).catch(function(err) {\n                        $log.error(err);\n                    });\n                }\n\n            }\n\n            $scope.customFilter = [];\n            $scope.getcustomFilter = function() {\n                config.widgetSelectors().findFields(\"\").then(function(fields) {\n                    $scope.customFilter = fields;\n                    $scope.$apply();\n                }).catch(function(err) {\n                    $log.error(err);\n                });\n\n            }\n\n            $scope.ifCustomFilter = function() {\n                return $scope.customSelectors && config.sort && $scope.definition.type === 'FullDevicesList' && $scope.toggleAdvanced === 2;\n            }\n\n            $scope.showCustomFields = function() {\n                return $scope.definition.type === 'FullDevicesList' && $scope.toggleAdvanced === 2 && $scope.search.customFilter && $scope.filterAvailable && !$scope.editMode;\n            }\n\n            $scope.changeDirection = function() {\n                var direction = config.sort.direction;\n                if (direction === 'DESCENDING') {\n                    $scope.config.sort.direction = 'ASCENDING'\n                } else if (direction === 'ASCENDING') {\n                    $scope.config.sort.direction = 'DESCENDING'\n                }\n                $scope.reload();\n            }\n\n            $scope.changeDefaultTab = function() {\n\n\n                $scope.reload();\n            }\n\n            $scope.debugQuery = function() {\n                Filter.parseQuery($scope.search.oql || '')\n                    .then(function(data) {\n                        //$scope.elementos = data;\n                        $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\n                        $scope.unknownWords = '';\n                        $scope.filter.error = null;\n                    })\n                    .catch(function(err) {\n                        $scope.filter.error = err;\n                        // Tratar el error\n                    });\n\n            }\n\n            $scope.autocomplete_options = function() {\n                var autocomplete_options = {\n                    suggest: Filter.suggest_field_delimited,\n                    customSelectors: config.widgetSelectors()\n                };\n\n                return autocomplete_options;\n\n            };\n\n            // Multiple selection\n            $scope.selectedItems = {};\n\n            // Gestor de seleccion\n            $scope.selectionManager = {\n                currentSelection: $scope.selectedItems,\n                isSelected: function(key, obj) {\n                    if ($scope.selectedItems[key] && !angular.isUndefined(obj)) {\n                        $scope.selectedItems[key].data = obj;\n                    }\n\n                    return $scope.selectedItems[key] ? true : false;\n                },\n                totalSelected: function() {\n                    return Object.keys($scope.selectedItems).length;\n                }\n            };\n\n            $scope.manageSelectedItems = function() {\n                var selectionScope = $scope.$new();\n\n                selectionScope.selectionConfig = config.selectionConfig;\n\n                selectionScope.selectedItems = [];\n                angular.forEach($scope.selectedItems, function(value, key) {\n                    selectionScope.selectedItems.push({\n                        key: key,\n                        value: value\n                    });\n                });\n\n                selectionScope.currentSelection = {\n                    selected: selectionScope.selectedItems\n                };\n\n                var manageItemsSelectedTemplate = adfTemplatePath + 'widget-selection.html';\n                var opts = {\n                    scope: selectionScope,\n                    templateUrl: manageItemsSelectedTemplate,\n                    backdrop: 'static',\n                    size: 'lg',\n                    animation: true\n                };\n\n                var instance = $uibModal.open(opts);\n\n                selectionScope.restoreSelection = function() {\n                    selectionScope.currentSelection = {\n                        selected: selectionScope.selectedItems\n                    };\n                };\n\n                selectionScope.clearSelection = function() {\n                    selectionScope.currentSelection.selected = [];\n                };\n\n                // Cierra sy guarda los datos de nueva selección\n                selectionScope.applyFilter = function(type) {\n                    var customOql = selectionScope.selectionConfig.filterAction(selectionScope.currentSelection.selected, type);\n\n                    if (!angular.isUndefined(customOql) && customOql !== null) {\n                        $scope.toggleAdvanced = 0;\n                        Filter.parseQuery(customOql).then(function(data) {\n                            $scope.search.oql = customOql;\n                            $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\n                            $scope.unknownWords = '';\n                            $scope.filter.error = null;\n\n                            $scope.launchSearchingAdv();\n                        }).catch(function(err) {\n                            $scope.filter.error = err;\n                        });\n                    }\n                };\n\n                selectionScope.executeOperation = function(operationType) {\n                    if (!$scope.editMode) {\n                        $scope.$parent.$broadcast('widgetExecuteOperation', {\n                            'selectedItems': selectionScope.currentSelection.selected,\n                            'type': operationType\n                        });\n                    }\n                };\n\n                // Cierra sy guarda los datos de nueva selección\n                selectionScope.saveChangesDialog = function() {\n                    var finalSelection = {};\n                    angular.forEach(selectionScope.currentSelection.selected, function(data, idx) {\n                        finalSelection[data.key] = {\n                            data: data.value.data,\n                            visible: data.value.visible\n                        };\n                    });\n\n                    $scope.selectedItems = angular.copy(finalSelection);\n                    $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n\n                    $scope.selectionManager.lastItem = {};\n                    $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n\n                    instance.close();\n                    selectionScope.$destroy();\n                };\n\n                // Cierra sin realizar ninguna acción\n                selectionScope.closeDialog = function() {\n                    instance.close();\n                    selectionScope.$destroy();\n                };\n            };\n\n\n            // bind edit function\n            $scope.edit = function() {\n                var editScope = $scope.$new();\n                editScope.definition = angular.copy(definition);\n\n                var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\n                if (definition.editTemplateUrl) {\n                    adfEditTemplatePath = definition.editTemplateUrl;\n                }\n\n                var opts = {\n                    scope: editScope,\n                    templateUrl: adfEditTemplatePath,\n                    backdrop: 'static',\n                    size: 'lg'\n                };\n\n                var instance = $uibModal.open(opts);\n\n                editScope.closeDialog = function() {\n                    instance.close();\n                    editScope.$destroy();\n                };\n\n                // TODO create util method\n                function createApplyPromise(result) {\n                    var promise;\n                    if (typeof result === 'boolean') {\n                        var deferred = $q.defer();\n                        if (result) {\n                            deferred.resolve();\n                        } else {\n                            deferred.reject();\n                        }\n                        promise = deferred.promise;\n                    } else {\n                        promise = $q.when(result);\n                    }\n                    return promise;\n                }\n\n                editScope.saveDialog = function() {\n                    // clear validation error\n                    editScope.validationError = null;\n\n                    // build injection locals\n                    var widget = $scope.widget;\n\n                    // create a default apply method for widgets\n                    // without edit mode\n                    // see issue https://goo.gl/KHPQLZ\n                    var applyFn;\n                    if (widget.edit) {\n                        applyFn = widget.edit.apply;\n                    } else {\n                        applyFn = function() {\n                            return true;\n                        };\n                    }\n\n                    // injection locals\n                    var locals = {\n                        widget: widget,\n                        definition: editScope.definition,\n                        config: editScope.definition.config\n                    };\n\n                    // invoke apply function and apply if success\n                    var result = $injector.invoke(applyFn, applyFn, locals);\n                    createApplyPromise(result).then(function() {\n                        definition.title = editScope.definition.title;\n                        angular.extend(definition.config, editScope.definition.config);\n\n                        editScope.closeDialog();\n\n                        if (widget.edit && widget.edit.reload) {\n                            // reload content after edit dialog is closed\n                            $scope.$broadcast('widgetConfigChanged');\n                        }\n                    }, function(err) {\n                        if (err) {\n                            editScope.validationError = err;\n                        } else {\n                            editScope.validationError = 'VALIDATION_DURING_APPLY_FAILED';\n                        }\n                    });\n                };\n\n            };\n\n\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            templateUrl: dashboard.customWidgetTemplatePath ? dashboard.customWidgetTemplatePath : adfTemplatePath + 'widget.html',\n            scope: {\n                definition: '=',\n                col: '=column',\n                editMode: '=',\n                options: '=',\n                widgetState: '='\n            },\n            controller: function($scope) {\n                var adfDashboardCollapseExpand = $scope.$on('adfDashboardCollapseExpand', function(event, args) {\n                    $scope.widgetState.isCollapsed = args.collapseExpandStatus;\n                });\n\n                var adfWidgetEnterEditMode = $scope.$on('adfWidgetEnterEditMode', function(event, widget) {\n                    if (dashboard.idEquals($scope.definition.wid, widget.wid)) {\n                        $scope.edit();\n                    }\n                });\n\n                var adfIsEditMode = $scope.$on('adfIsEditMode', function(event, widget) {\n                    $scope.editing = true;\n                });\n\n                var adfDashboardChanged = $scope.$on('adfDashboardChanged', function(event, widget) {\n                    $scope.editing = false;\n                });\n\n                var adfDashboardEditsCancelled = $scope.$on('adfDashboardEditsCancelled', function(event, widget) {\n                    $scope.editing = false;\n                });\n\n                $scope.widgetClasses = function(w, definition) {\n                    var classes = definition.styleClass || '';\n                    // w is undefined, if the type of the widget is unknown\n                    // see issue #216\n                    if (!w || !w.frameless || $scope.editMode) {\n                        classes += ' panel panel-default';\n                    }\n                    return classes;\n                };\n\n                $scope.openFullScreen = function() {\n                    var definition = $scope.definition;\n                    var fullScreenScope = $scope.$new();\n                    var opts = {\n                        scope: fullScreenScope,\n                        templateUrl: adfTemplatePath + 'widget-fullscreen.html',\n                        size: definition.modalSize || 'lg', // 'sm', 'lg'\n                        backdrop: 'static',\n                        windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n                    };\n\n                    var instance = $uibModal.open(opts);\n                    fullScreenScope.closeDialog = function() {\n                        instance.close();\n                        fullScreenScope.$destroy();\n                    };\n                };\n\n                $scope.openFilter = function() {\n\n                }\n\n                $scope.openAboutScreen = function(size) {\n                    size = 'md';\n                    var modalInstance = $uibModal.open({\n                        animation: true,\n                        templateUrl: 'widgetAboutModal.html',\n                        controller: function($scope, $uibModalInstance, information) {\n                            $scope.about = {};\n                            $scope.about.info = information;\n                            $scope.ok = function() {\n                                $uibModalInstance.close();\n                            };\n                        },\n                        'size': size,\n                        resolve: {\n                            information: function() {\n                                return $scope.config.about;\n                            }\n                        }\n                    });\n\n                    modalInstance.result.then(function(selectedItem) {\n                        $scope.selected = selectedItem;\n                    }, function() {\n                        $log.info('Modal dismissed at: ' + new Date());\n                    });\n                };\n\n                $scope.saveWidgetScreen = function(wId) {\n                    $scope.$emit('generateSnapshot', {\n                        'objectSelector': '.widget_' + wId,\n                        'fileName': 'capture_' + new Date().getTime()\n                    });\n                };\n\n                var onWindowTimeChanged = function(timeObj) {\n                    var filter = {\n                        and: []\n                    };\n                    if (timeObj && timeObj.from) {\n                        filter.and.push({\n                            gt: {\n                                operationDate: timeObj.from\n                            }\n                        });\n\n                        if (timeObj.to) {\n                            filter.and.push({\n                                lt: {\n                                    operationDate: timeObj.to\n                                }\n                            });\n                        }\n                    } else {\n                        filter = null;\n                    }\n                    return filter;\n                }\n\n                var createQuickFilter = function(fieldsQuickSearch, filter) {\n                    var _filter = {\n                        or: []\n                    };\n                    var criteria;\n                    fieldsQuickSearch.forEach(function(field) {\n                        criteria = {};\n                        criteria[field.operator] = {};\n                        criteria[field.operator][field.name] = $scope.config.filter;\n                        _filter.or.push(criteria);\n                    });\n                    return _filter;\n                }\n\n                $scope.downloadCsv = function() {\n                    var columns = $scope.config.columns;\n                    var scope_filter = $scope.config.filter;\n                    var extra_filter;\n                    var final_filter = {};\n                    var order = $scope.config.sort ? $scope.config.sort : undefined;\n                    if ($scope.config.windowFilter) {\n                        var window_filter = $scope.config.onWindowTimeChanged($scope.config.windowFilter);\n                        if (window_filter && window_filter.and) {\n                            extra_filter = {\n                                and: window_filter.and\n                            };\n                        }\n                    }\n                    var filter;\n                    if (scope_filter.value && scope_filter.value.length > 4) {\n                        filter = JSON.parse(scope_filter.value);\n                    } else if (typeof scope_filter === 'string' && scope_filter.trim() !== '') {\n                        filter = createQuickFilter($scope.config.fieldsQuickSearch, scope_filter);\n                    }\n                    if (extra_filter) {\n                        if (filter) {\n                            final_filter = {\n                                and: [extra_filter, filter]\n                            };\n                        } else {\n                            final_filter = extra_filter;\n                        }\n                    } else {\n                        final_filter = filter;\n                    }\n                    $scope.$broadcast('downloadCsv', {\n                        'columns': columns,\n                        'filter': final_filter,\n                        'order': order\n                    });\n                };\n\n                $scope.generateQR = function() {\n                    $scope.$broadcast('generateQR');\n                };\n\n                var addItemToSelection = $scope.$on('addItemToSelection', function(event, item) {\n                    if (!$scope.selectedItems[item.key]) {\n                        $scope.selectedItems[item.key] = {\n                            data: item.data,\n                            visible: item.visible\n                        };\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n                        item.isSelected = true;\n                        $scope.selectionManager.lastItem = item;\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n                    }\n\n                });\n\n                var removeItemFromSelection = $scope.$on('removeItemFromSelection', function(event, item) {\n                    if ($scope.selectedItems[item.key]) {\n                        delete $scope.selectedItems[item.key];\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n                        item.isSelected = false;\n                        $scope.selectionManager.lastItem = item;\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n                    }\n                });\n\n                $scope.$on('$destroy', function() {\n                    adfDashboardCollapseExpand();\n                    adfWidgetEnterEditMode();\n                    adfIsEditMode();\n                    adfDashboardChanged();\n                    adfDashboardEditsCancelled();\n                    addItemToSelection();\n                    removeItemFromSelection();\n                });\n            },\n            compile: function() {\n\n                /**\n                 * use pre link, because link of widget-content\n                 * is executed before post link widget\n                 */\n                return {\n                    pre: preLink,\n                    post: postLink\n                };\n            }\n        };\n\n    });\nangular.module(\"adf\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"../src/templates/dashboard-column.html\",\"<div adf-id={{column.cid}} class=column ng-class=column.styleClass ng-model=column.widgets> <adf-widget ng-repeat=\\\"definition in column.widgets\\\" definition=definition column=column edit-mode=editMode options=options widget-state=widgetState>  </adf-widget></div> \");\n$templateCache.put(\"../src/templates/dashboard-edit.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h3 class=modal-title translate>ADF.DASHBOARD.TITLE.EDIT.DASHBOARD</h3> </div> <div class=modal-body> <form role=form name=form novalidate> <div class=\\\"form-group col-xs-12 col-md-6\\\"> <label for=dashboardTitle translate>ADF.COMMON.TITLE</label> <input type=text class=\\\"form-control text-primary\\\" id=dashboardTitle ng-model=copy.title required ng-init=\\\"copy.title=(copy.title | translate)\\\"> </div> <div class=\\\"form-group col-xs-12 col-md-6\\\"> <label for=dashboardDescription translate>ADF.DASHBOARD.LABEL.DESCRIPTION</label> <input type=text class=\\\"form-control text-primary\\\" id=dashboardDescription ng-init=\\\"copy.description=(copy.description | translate)\\\" ng-model=copy.description> </div> <div class=\\\"form-group col-xs-12 col-md-6\\\"> <label for=icon translate>ADF.DASHBOARD.LABEL.ICON</label> <ui-select tagging=tagTransform id=icon ng-model=copy.icon theme=bootstrap allow-clear=false required=true on-select=selectIcon($select.selected) title=\\\"{{\\'ADF.WIDGET.TITLE.CHOOSE_ICON\\' | translate}}\\\"> <ui-select-match placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.ICON\\' | translate}}\\\" allow-clear=false> <i class=\\\"fa {{$select.selected}} fa-2x\\\"></i> <span>{{$select.selected}}</span> </ui-select-match> <ui-select-choices class=oux-icon-selector repeat=\\\"iconTmp in availableIcons | filter: $select.search\\\"> <i class=\\\"fa fa-4x\\\" ng-class=iconTmp title={{iconTmp}}></i> <br> <span ng-bind-html=\\\"iconTmp| highlight: $select.search\\\"></span> </ui-select-choices> </ui-select> </div> <div class=\\\"form-group col-xs-12\\\"> <label translate>ADF.DASHBOARD.LABEL.EDIT_DASHBOARD_STRUCTURE_LABEL</label> <div class=row ng-init=\\\"splitted = split(structures, 3)\\\"> <div class=col-lg-4 ng-repeat=\\\"structureColumn in splitted\\\"> <div class=radio ng-repeat=\\\"(key, structure) in structureColumn\\\"> <div class=row> <div class=col-sm-2> <label> <input type=radio value={{key}} ng-model=model.structure ng-change=\\\"changeStructure(key, structure)\\\"> </label> </div> <div class=col-sm-9 ng-click=\\\"changeStructure(key, structure)\\\"> <adf-structure-preview name=key structure=structure selected=\\\"model.structure == key\\\"> </adf-structure-preview> </div> </div> </div> </div> </div> </div> </form> </div> <div class=modal-footer> <div class=col-xs-12> <button type=submit class=\\\"btn btn-primary\\\" ng-click=closeDialog() ng-disabled=form.$invalid translate>ADF.COMMON.CLOSE</button> </div> </div> \");\n$templateCache.put(\"../src/templates/dashboard-row.html\",\"<div ng-class=row.styleClass ng-style=row.style class=ogux-row>  </div>\");\n$templateCache.put(\"../src/templates/dashboard-title.html\",\"<div class=row style=padding:0px;> <div class=\\\"col-xs-12 col-md-5\\\" ng-if=!hideButtons> <span ng-if=model.icon id=idDashboardIcon class=\\\"fa fa-2x\\\" ng-class=model.icon></span> <span id=idDashboardTitle class=\\\"fa-2x text-primary\\\">{{model.title | translate}}</span> <span ng-if=model.description id=idDashboardDescription>{{model.description | translate}}</span> </div> <div class=\\\"col-xs-12 col-md-7 text-right\\\" ng-if=!hideButtons> <a href ng-if=editMode title=\\\"{{ \\'ADF.DASHBOARD.TITLE.ADD\\' | translate }}\\\" ng-click=addWidgetDialog() class=\\\"btn btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-plus\\\" aria-hidden=true></i> {{\\'ADF.DASHBOARD.TITLE.ADD\\' | translate}} </a> <a href ng-if=editMode title=\\\"{{ \\'ADF.DASHBOARD.TITLE.CONFIGURATION\\' | translate }}\\\" ng-click=editDashboardDialog() class=\\\"btn btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-cog\\\"></i> {{\\'ADF.DASHBOARD.TITLE.CONFIGURATION\\' | translate}} </a> <a href ng-if=editMode title=\\\"{{ \\'ADF.DASHBOARD.TITLE.UNDO\\' | translate }}\\\" ng-click=cancelEditMode() class=\\\"btn btn-warning btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-close\\\"></i> {{\\'ADF.DASHBOARD.TITLE.UNDO\\' | translate}} </a> <a href ng-if=\\\"options.editable && !editMode && !model.temporal\\\" title=\\\"{{\\'ADF.DASHBOARD.TITLE.EDIT.MODE\\' | translate }}\\\" ng-click=toggleEditMode() class=\\\"btn btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-pencil-square-o\\\"></i> {{\\'ADF.DASHBOARD.TITLE.EDIT.MODE\\' | translate}} </a> <a href ng-if=\\\"options.editable && editMode\\\" title=\\\"{{\\'ADF.DASHBOARD.TITLE.SAVE\\' | translate)}}\\\" ng-click=toggleEditMode() class=\\\"btn btn-success btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-save\\\"></i> {{\\'ADF.DASHBOARD.TITLE.SAVE\\' | translate}} </a> </div> </div>\");\n$templateCache.put(\"../src/templates/dashboard.html\",\"<div class=dashboard-container> <div ng-include src=model.titleTemplateUrl></div> <div class=dashboard x-ng-class=\\\"{\\'edit\\' : editMode}\\\" style=\\\"padding: 0px;margin: 0px;\\\"> <adf-dashboard-row row=row adf-model=model options=options ng-repeat=\\\"row in model.rows\\\" edit-mode=editMode continuous-edit-mode=continuousEditMode> </adf-dashboard-row></div> </div>\");\n$templateCache.put(\"../src/templates/structure-preview.html\",\"<div class=structure-preview ng-class=\\\"{selected: selected}\\\"> <h4>{{name}}</h4> <adf-dashboard-row ng-repeat=\\\"row in preview.rows\\\" row=row> </adf-dashboard-row></div> \");\n$templateCache.put(\"../src/templates/widget-add.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title translate>ADF.WIDGET.TITLE.ADD_HEADER</h4> </div> <div class=modal-body>  <div ng-if=createCategories> <uib-accordion ng-init=\\\"categorized = createCategories(widgets)\\\"> <div uib-accordion-group heading=\\\"{{category.name | translate}}\\\" ng-repeat=\\\"category in categorized | adfOrderByObjectKey: \\'name\\'\\\"> <dl class=dl-horizontal> <dt ng-repeat-start=\\\"widget in category.widgets | adfOrderByObjectKey: \\'key\\'\\\"> <a href ng-click=addWidget(widget.key) ng-class={{widget.key}}> {{widget.title | translate}} </a> </dt> <dd ng-repeat-end ng-if=widget.description> {{widget.description | translate}} </dd> </dl> </div> </uib-accordion> </div>  <div ng-if=!createCategories> <div class=row> <div class=\\\"col-md-4 col-xs-12 form-group no-margin\\\"> <select ng-model=widgetFilterCfg.widgetFilter.categoryTags name=widgetsCategoryFilter class=form-control> <option value translate>ADF.WIDGET.LABEL.ALL_WIDGETS</option> <option ng-repeat=\\\"category in availableCategories | orderBy\\\" value={{category}}>{{ category | translate }}</option> </select> </div> <div class=\\\"col-md-4 col-xs-12 form-group no-margin\\\"> <select ng-model=widgetFilterCfg.widgetSorting name=widgetsSorting class=form-control> <option value=priority ng-selected=\\\"widgetFilterCfg.widgetSorting===\\'priority\\' || !widgetFilterCfg.widgetSorting\\\" translate=ADF.WIDGET.TITLE.SORTED_BY translate-values=\\\"{ item : (\\'ADF.WIDGET.LABEL.PRIORITY\\' | translate) }\\\"></option> <option value=name ng-selected=\\\"widgetFilterCfg.widgetSorting===\\'name\\'\\\" translate=ADF.WIDGET.TITLE.SORTED_BY translate-values=\\\"{ item : (\\'ADF.WIDGET.LABEL.NAME\\' | translate) }\\\"></option> <option value=category ng-selected=\\\"widgetFilterCfg.widgetSorting===\\'category\\'\\\" translate=ADF.WIDGET.TITLE.SORTED_BY translate-values=\\\"{ item : (\\'ADF.WIDGET.LABEL.CATEGORY\\' | translate) }\\\"></option> <option value=description ng-selected=\\\"widgetFilterCfg.widgetSorting===\\'description\\'\\\" translate=ADF.WIDGET.TITLE.SORTED_BY translate-values=\\\"{ item : (\\'ADF.WIDGET.LABEL.DESCRIPTION\\' | translate) }\\\"></option> </select> </div> <div class=\\\"col-md-4 col-xs-12 form-group no-margin\\\"> <select ng-model=widgetFilterCfg.widgetSortingDirection name=widgetSortingDirection class=form-control> <option value translate>BUTTON.TITLE.ASCENDING</option> <option value=1 translate>BUTTON.TITLE.DESCENDING</option> </select> </div> </div> <div class=row> <div class=\\\"col-xs-12 form-group no-margin\\\"> <input type=text class=form-control name=widgetsTitleFilter autofocus ng-model=widgetFilterCfg.widgetFilter.title placeholder=\\\"{{ \\'ADF.WIDGET.PLACEHOLDER.TYPE_WIDGET_FILTER\\'| translate }}\\\"> </div> </div> <div ng-repeat=\\\"widget in widgets | adfOrderByObjectKey: \\'key\\' | filter:widgetFilterCfg.widgetFilter:strict | orderBy:widgetFilterCfg.widgetSorting:widgetFilterCfg.widgetSortingDirection track by $index\\\" ng-class=\\\"{ \\'widgetPanelBig\\' : $index ===0 , \\'widgetPanelNormal\\' : $index > 0 }\\\"> <div class=\\\"pointer panel widgetInfoParent {{widget.key}}\\\" ng-click=addWidget(widget.key) title=\\\"{{widget.description | translate}}\\\"> <div class=\\\"widgetInfoImage pointer\\\"> <img ng-if=widget.images ng-init=\\\"widget._currImg = widget.images[0]\\\" src=\\\"{{ widget._currImg }}\\\" ng-click=changeThumbnail(widget);$event.stopPropagation(); title=\\\"Click to change (if available)\\\"> <i ng-if=!widget.images class=\\\"widgetInfoIcon fa\\\" ng-class=\\\"widget.icon ? widget.icon: \\'fa-plus-circle\\'\\\" ng-style=\\\"widget.color?{\\'color\\':widget.color}:\\'\\'\\\" aria-hidden=true></i> </div> <div class=\\\"widgetInfoContainer bg-primary\\\" id=widgetKey_{{widget.key}} ng-style=\\\"$index ===0?{\\'opacity\\':1} :{\\'opacity\\':0.8}\\\"> <i ng-if=\\\"widget.images && widget.icon\\\" class=\\\"widgetInfoTitle fa\\\" ng-class=widget.icon ng-style=\\\"widget.color?{\\'color\\':widget.color}:\\'\\'\\\" aria-hidden=true></i><br> <span class=widgetInfoTitle>{{widget.title }}</span><br> <span>({{widget.category}})</span> <span class=widgetInfoDescription>{{widget.description}}</span> </div> </div> </div> </div> </div> <div class=modal-footer style=clear:both;> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() translate>ADF.COMMON.CLOSE</button> </div>\");\n$templateCache.put(\"../src/templates/widget-delete.html\",\"<div class=modal-header> <h4 class=modal-title> <span translate>ADF.COMMON.DELETE</span> {{widget.title | translate}}</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=widgetTitle translate>ADF.WIDGET.LABEL.DELETE_CONFIRM_MESSAGE</label> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() translate>ADF.COMMON.CLOSE</button> <button type=button class=\\\"btn btn-primary\\\" ng-click=deleteDialog() translate>ADF.COMMON.DELETE</button> </div> \");\n$templateCache.put(\"../src/templates/widget-edit.html\",\"<form name=widgetEditForm novalidate role=form ng-submit=saveDialog()> <div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h3 class=modal-title>{{widget.title | translate}}</h3> </div> <div class=modal-body> <div class=row> <div class=col-xs-12> <div class=\\\"alert alert-danger\\\" role=alert ng-show=validationError> <strong translate>ADF.ERROR.APPLY_ERROR</strong> {{validationError | translate}} </div> </div> </div> <div class=row ng-if=widget.show_reload_config> <div class=\\\"col-xs-12 col-md-6\\\"> <div class=form-group> <label for=widgetTitle translate>ADF.COMMON.TITLE</label> <input type=text class=\\\"form-control text-primary\\\" id=widgetTitle ng-init=\\\"definition.title=(definition.title | translate)\\\" ng-model=definition.title placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.TITLE\\' | translate}}\\\"> </div> </div> <div class=\\\"col-xs-12 col-md-6\\\"> <div class=form-group> <label for=widgetReloadPeriod translate>ADF.WIDGET.TOOLTIP.REFRESH</label> <select class=form-control id=widgetReloadPeriod aria-label=\\\"ngSelected demo\\\" ng-model=definition.config.reloadPeriod required> <option ng-selected=selected value=0 translate>ADF.WIDGET.OPTIONS.MANUAL</option> <option value=20 translate>ADF.WIDGET.OPTIONS.20_SECONDS</option> <option value=40 translate>ADF.WIDGET.OPTIONS.40_SECONDS</option> <option value=60 translate>ADF.WIDGET.OPTIONS.EVERY_MINUTE</option> </select> </div> </div> </div> <div class=row ng-if=!widget.show_reload_config> <div class=\\\"col-xs-12 col-md-12\\\"> <div class=form-group> <label for=widgetTitle translate>ADF.COMMON.TITLE</label> <input type=text class=\\\"form-control text-primary\\\" id=widgetTitle ng-init=\\\"definition.title=(definition.title | translate)\\\" ng-model=definition.title placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.TITLE\\' | translate}}\\\"> </div> </div> </div> <div ng-if=widget.edit class=row> <div class=col-xs-12> <adf-widget-content model=definition content=widget.edit> </adf-widget-content></div> </div> <div class=row> <div class=col-xs-12> <div class=form-group> <label for=widgetAbout translate>ADF.COMMON.ABOUT</label> <textarea class=\\\"form-control text-primary\\\" id=widgetAbout ng-model=definition.config.about placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.ENTER.DESCRIPTION\\'|translate}}\\\"></textarea> </div> </div> </div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() translate>ADF.WIDGET.BUTTON.CANCEL</button> <button type=submit class=\\\"btn btn-primary\\\" ng-disabled=widgetEditForm.$invalid value=\\\"{{\\'ADF.WIDGET.BUTTON.APPLY\\' | translate }}\\\" translate>ADF.WIDGET.BUTTON.APPLY</button> </div> </form> \");\n$templateCache.put(\"../src/templates/widget-fullscreen.html\",\"<div class=modal-header> <div class=\\\"pull-right widget-icons\\\"> <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.REFRESH\\' |translate }}\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a> <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.CLOSE\\' |translate }}\\\" ng-click=closeDialog()> <i class=\\\"glyphicon glyphicon-remove\\\"></i> </a> <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.INSERT\\' |translate }}\\\" ng-if=persistDashboard ng-click=persistDashboard()> <i class=\\\"glyphicon glyphicon-save\\\"></i> </a> </div> <h4 class=modal-title translate>&nbsp;{{ definition.title | translate}}</h4> </div> <div class=\\\"modal-body widget\\\" style=overflow:hidden;> <adf-widget-content model=definition content=widget> </adf-widget-content></div> <div class=modal-footer ng-if=widget.show_modal_footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() translate>ADF.COMMON.CLOSE</button> </div> \");\n$templateCache.put(\"../src/templates/widget-selection.html\",\"<style>\\n    .selected-entities-control .ui-select-container>div:first-child {\\n        max-height: 300px;\\n        overflow-y: scroll;\\n        overflow-x: hidden;\\n    }\\n\\n</style> <form name=widgetSelectionForm novalidate role=form ng-submit=saveChangesDialog()> <div class=modal-header> <div class=\\\"col-xs-12 col-md-12\\\"> <h3 class=\\\"modal-title text-left\\\"> <i class=\\\"fa fa-check-square-o\\\" aria-hidden=true></i> {{\\'ADF.WIDGET.TITLE.SELECTED_ITEMS\\' | translate}}</h3> </div> </div> <div class=modal-body> <div class=col-xs-12> <div class=\\\"form-group selected-entities-control\\\"> <label for=currentSelection translate>ADF.WIDGET.LABEL.CURRENT_SELECTION</label> <ui-select multiple tagging ng-model=currentSelection.selected theme=bootstrap sortable=false title=\\\"{{\\'ADF.WIDGET.TITLE.SELECTED_ITEMS\\' | translate}}\\\"> <ui-select-match placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.NO_SELECTED\\' | translate}}\\\"> <div class=text-left style=\\\"margin-right: 15px;font-size: 0.9em;max-width:350px;\\\" ng-if=$item.value.visible> <span style=\\\"white-space: initial;word-break: break-word;\\\" ng-repeat=\\\"(k,v) in $item.value.visible track by $index\\\" ng-if=\\\"v !== undefined\\\"> <strong>{{k | translate}}:</strong> {{v}} <br> </span> </div> <div class=text-left style=\\\"margin-right: 15px;font-size: 0.9em;max-width:350px;\\\" ng-if=!$item.value.visible> <span style=\\\"white-space: initial;word-break: break-word;\\\">{{$item.key}}</span> </div> </ui-select-match> <ui-select-choices repeat=\\\"itemSel in currentSelection.selected | filter:$select.search\\\"> {{itemSel.key}} </ui-select-choices> </ui-select> </div> </div> <div class=\\\"col-xs-12 text-left\\\"> <button type=button class=\\\"btn btn-success btn-sm\\\" ng-click=restoreSelection() ng-disabled=\\\"currentSelection.selected.length === selectedItemsLength\\\" translate>ADF.WIDGET.BUTTON.RESTORE</button> <button type=button class=\\\"btn btn-danger btn-sm\\\" ng-click=clearSelection() ng-disabled=\\\"currentSelection.selected.length < 1\\\" translate>ADF.WIDGET.BUTTON.CLEAR</button> </div> </div> <div class=modal-footer> <div class=\\\"col-xs-12 col-md-2 text-left\\\"> <div uib-dropdown ng-if=\\\"selectionConfig && selectionConfig.filterTypes && currentSelection.selected.length > 0\\\"> <button id=applyFilterBy type=button class=\\\"btn btn-primary\\\" uib-dropdown-toggle> <i class=\\\"glyphicon glyphicon-filter pointer\\\"></i> {{\\'ADF.WIDGET.BUTTON.FILTER_BY\\' | translate}} <span class=caret></span> </button> <ul class=dropdown-menu uib-dropdown-menu role=menu aria-labelledby=applyFilterBy> <li role=menuitem ng-repeat=\\\"filterType in selectionConfig.filterTypes\\\"> <a href ng-click=applyFilter(filterType) title=\\\"{{\\'ADF.WIDGET.BUTTON.SELECTED\\' | translate:{filterType: filterType} }}\\\">{{\\'ADF.WIDGET.BUTTON.SELECTED\\' | translate:{filterType: filterType} }}</a> </li> </ul> </div> </div> <div class=\\\"col-xs-12 col-md-3 text-left\\\"> <div uib-dropdown ng-if=\\\"selectionConfig && selectionConfig.operationTypes && currentSelection.selected.length > 0\\\"> <button id=executeOperation type=button class=\\\"btn btn-primary\\\" uib-dropdown-toggle> <i class=\\\"glyphicon glyphicon-flash pointer\\\"></i> {{\\'ADF.WIDGET.BUTTON.EXECUTE_OPERATION\\' | translate}} <span class=caret></span> </button> <ul class=dropdown-menu uib-dropdown-menu role=menu aria-labelledby=executeOperation> <li role=menuitem ng-repeat=\\\"operationType in selectionConfig.operationTypes\\\"> <a href ng-click=executeOperation(operationType) title={{operationType|translate}}>{{operationType|translate}}</a> </li> </ul> </div> </div> <div class=\\\"col-xs-12 col-md-7 text-right\\\"> <button type=submit class=\\\"btn btn-primary\\\" ng-disabled=\\\"currentSelection.selected.length === selectedItemsLength\\\" translate value=\\\"{{\\'ADF.WIDGET.BUTTON.APPLY\\' | translate }}\\\">ADF.WIDGET.BUTTON.APPLY</button> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() translate>ADF.COMMON.CLOSE</button> </div> </div> </form> \");\n$templateCache.put(\"../src/templates/widget-title.html\",\"<div class=panel-title style=margin:0px;> <div class=\\\"pull-right container-actions bg-primary\\\"> <span ng-if=config.about> <a href uib-popover=\\\"{{ config.about }}\\\" popover-trigger=\\\"\\'mouseenter\\'\\\" popover-placement=top ng-click=openAboutScreen()> <i class=\\\"glyphicon glyphicon-info-sign\\\"></i> </a> <script type=text/ng-template id=widgetAboutModal.html> <div class=\\\"modal-header\\\"> <h4 class=\\\"modal-title\\\" translate>ADF.COMMON.ABOUT</h4> </div> <div class=\\\"modal-body\\\">{{ about.info }}</div> <div class=\\\"modal-footer\\\"> <button class=\\\"btn btn-primary\\\" type=\\\"button\\\" ng-click=\\\"ok()\\\" translate>ADF.WIDGET.BUTTON.OK</button> </div> </script> </span> <a ng-if=\\\"!editMode && widget.print\\\" href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.PRINT\\' | translate }}\\\" ng-click=print()> <i class=\\\"glyphicon glyphicon-print\\\"></i> </a> <span ng-if=\\\"!editMode && config.widgetOnToggleView && config.widgetViews\\\" uib-popover=\\\"Change view\\\" popover-trigger=\\\"\\'mouseenter\\'\\\" popover-placement=top uib-dropdown> <a href id=toggle_{{definition.wid}} uib-dropdown-toggle> <i class=\\\"glyphicon glyphicon-eye-close\\\"></i> </a> <ul class=dropdown-menu uib-dropdown-menu aria-labelledby=\\\"{{\\'ADF.WIDGET.LABEL.CHANGE_VIEW\\' | translate}}\\\"> <li ng-repeat=\\\"choice in config.widgetViews\\\"> <a ng-click=config.widgetOnToggleView(choice.value)>{{choice.name | translate}}</a> </li> </ul> </span> <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.REFRESH\\' | translate }}\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.OPERATION\\' | translate }}\\\" ng-if=\\\"widget.executeOperation && !editMode && isExecuteOperationEnabled()\\\" ng-click=executeOperation()> <i class=\\\"glyphicon glyphicon-flash\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.FILTER\\' | translate }}\\\" ng-if=\\\"config.widgetSelectors && !editMode\\\" ng-click=showFilter()> <i class=\\\"glyphicon glyphicon-filter\\\" ng-class=\\\"{\\'active\\': search.json || search.oql|| search.quick ||search.customFilter}\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.SORT\\' | translate }}\\\" ng-if=\\\"config.sort && !editMode\\\" ng-click=showFilter()> <i class=\\\"glyphicon glyphicon-sort\\\" ng-class=\\\"{\\'active\\': (config.sort.value && config.sort.value !== \\'\\')}\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.PICTURE\\' | translate}}\\\" ng-if=\\\"!editMode && !widgetState.isCollapsed\\\" ng-click=saveWidgetScreen(definition.wid)> <i class=\\\"glyphicon glyphicon-picture\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.QR\\' | translate }}\\\" ng-if=\\\"!editMode && widget.qr\\\" ng-click=generateQR()> <i class=\\\"fa fa-qrcode\\\" style=\\\"font-size: 1.1em;\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.CSV\\' | translate }}\\\" ng-if=\\\"!editMode && widget.csv\\\" ng-click=downloadCsv()> <i class=\\\"glyphicon glyphicon-file\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.MOVE\\' | translate }}\\\" class=adf-move ng-if=editMode> <i class=\\\"glyphicon glyphicon-move\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.COLLAPSE\\' | translate }}\\\" ng-show=\\\"options.collapsible && !widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-minus\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.EXPAND\\' | translate }}\\\" ng-show=\\\"options.collapsible && widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-plus\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.EDIT\\' | translate }}\\\" ng-click=edit() ng-if=editMode> <i class=\\\"glyphicon glyphicon-cog\\\"></i> </a> <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.FULLSCREEN\\' | translate }}\\\" ng-click=openFullScreen() ng-show=options.maximizable> <i class=\\\"glyphicon glyphicon-fullscreen\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.REMOVE\\' | translate}}\\\" ng-click=remove() ng-if=editMode> <i class=\\\"glyphicon glyphicon-trash\\\"></i> </a> </div> <span class=pull-left>  <a href ng-if=\\\"selectedItemsLength > 0\\\" title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.SELECTION\\' | translate }}\\\" ng-click=manageSelectedItems() style=float:left;> <i class=\\\"glyphicon glyphicon-check\\\"></i> <small class=ogux-budget>{{ selectedItemsLength }}</small> </a> <h4 ng-if=\\\"!widget.frameless && definition.title\\\" style=\\\"margin:4px 0px 0px 2px;float:left;\\\" translate class=text-primary>{{definition.title | translate}}</h4> </span> </div>\");\n$templateCache.put(\"../src/templates/widget.html\",\"<div adf-id={{definition.wid}} adf-widget-type={{definition.type}} ng-class=\\\"widgetClasses(widget, definition)\\\" class=\\\"widget widget_{{definition.wid}}\\\"> <a name={{definition.wid}} id={{definition.wid}}></a> <div class=\\\"panel-heading clearfix\\\" ng-if=\\\"!widget.frameless || editMode\\\"> <div ng-include src=definition.titleTemplateUrl></div> </div> <div ng-if=\\\"!widgetState.isCollapsed && config.widgetSelectors && !editMode && filterAvailable\\\" class=\\\"row form-group\\\" style=\\\"margin-top: 5px !important;\\\"> <div ng-if=\\\"toggleAdvanced === 0\\\" class=\\\"col-xs-12 col-md-8\\\"> <div class=filter mass-autocomplete> <input class=form-control style=padding-right:15px; name=filterValue ng-keypress=enter($event) ng-model=search.oql placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.ENTER.FILTER.ADVANCED\\' | translate }}\\\" mass-autocomplete-item=autocomplete_options() ng-change=debugQuery()> <label ng-click=launchSearchingAdv() style=\\\"position: absolute;font-size: 1.5em;cursor:pointer;right: 15px;\\\" class=\\\"glyphicon glyphicon-search\\\"></label> </div> <div ng-if=\\\"!editMode && filter.error\\\" class=col-xs-12> <alert type=danger class=\\\"text-center text-danger\\\"> <span>{{filter.error}}</span> </alert> </div> <div ng-if=\\\"showFinalFilter && search.json\\\" class=col-xs-12> <pre>{{ search.json }}</pre> </div> </div> <div ng-if=ifCustomFilter() class=\\\"col-xs-12 col-md-8\\\"> <div class=\\\"filter form-group\\\"> <a href class=text-danger ng-click=\\\"options.customFilter.open = !options.customFilter.open\\\"> <i class=glyphicon ng-class=\\\"{\\'glyphicon-chevron-up\\': options.customFilter.open, \\'glyphicon-chevron-down\\': !options.customFilter.open}\\\"></i> {{\\'ADF.WIDGET.TITLE.PICK_FILTER_FIELDS\\' | translate}} </a> <label ng-click=launchCustomFilter() style=\\\"position: absolute;font-size: 1.5em;cursor:pointer;right: 15px;\\\" class=\\\"glyphicon glyphicon-search\\\"></label> <div class=row ng-if=options.customFilter.open> <ui-select multiple=true ng-model=search.fields theme=bootstrap title=\\\"{{\\'ADF.WIDGET.TITLE.CHOOSE_FILTER\\' | translate }}\\\" on-select=addCustomFilter($item) on-remove=deleteFilter($item) ng-click=getcustomFilter()> <ui-select-match placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.PICK_FILTER_FIELDS\\' | translate }}\\\" allow-clear=true> {{$item}} </ui-select-match> <ui-select-choices repeat=\\\"selector in (customFilter | filter: $select.search) track by $index\\\"> <small ng-bind-html=\\\"selector | highlight: $select.search\\\"></small> </ui-select-choices> </ui-select> </div> </div> </div> <div ng-if=\\\"toggleAdvanced === 1\\\" class=\\\"col-xs-12 col-md-8\\\"> <div class=filter> <input class=form-control style=padding-right:15px; name=filterValue ng-keypress=enter($event) ng-model=search.quick placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.ENTER.FILTER.BASIC\\' | translate}}\\\"> <label ng-click=launchSearchingQuick() style=\\\"position: absolute;font-size: 1.5em;cursor:pointer;right: 15px;\\\" class=\\\"glyphicon glyphicon-search\\\"></label> </div> </div> <div class=\\\"col-xs-12 col-md-4\\\" uib-dropdown> <button class=\\\"btn btn-sm\\\" uib-dropdown-toggle title=\\\"{{\\'ADF.WIDGET.TITLE.TOGGLE_AVANCED_BASIC_FILTER\\' | translate }}\\\"> <i class=\\\"advanced-filter glyphicon\\\" ng-class=\\\"{\\'glyphicon-font\\' : toggleAdvanced === 0, \\'glyphicon-bold\\' : toggleAdvanced ===1 , \\'glyphicon-filter\\' : toggleAdvanced === 2, }\\\"></i> <span class=caret></span> </button> <ul class=\\\"dropdown-menu panel\\\" style=\\\"border: 1px groove;\\\" uib-dropdown-menu aria-labelledby=simple-dropdown> <li ng-click=toggleFilter(0)> <a href> <i class=\\\"advanced-filter glyphicon glyphicon-font txt-primary\\\"></i> {{\\'ADF.WIDGET.TITLE.FILTER.ADVANCED\\' | translate}}</a> </li> <li ng-click=toggleFilter(1)> <a href> <i class=\\\"basic-filter glyphicon glyphicon-bold txt-primary\\\"></i> {{\\'ADF.WIDGET.TITLE.FILTER.BASIC\\' | translate}}</a> </li> <li ng-if=\\\"definition.type === \\'FullDevicesList\\'\\\" ng-click=toggleFilter(2)> <a href> <i class=\\\"custom-filter glyphicon glyphicon-filter txt-primary\\\"></i> {{\\'ADF.WIDGET.TITLE.FILTER.CUSTOM\\' | translate}}</a> </li> </ul> </div> </div> <div ng-if=\\\"customSelectors && config.sort && filterAvailable && toggleAdvanced != 2\\\" class=\\\"row form-group\\\" style=\\\"margin-top: 5px !important;\\\"> <div class=\\\"sort col-xs-12 col-md-8\\\"> <ui-select ng-model=config.sort.value theme=bootstrap title=\\\"{{\\'ADF.WIDGET.TITLE.CHOOSE_ORDER\\' | translate}}\\\" allow-clear=true append-to-body=true ng-change=launchSearching() ng-click=getCustomSelectors()> <ui-select-match placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.SHORTED_BY\\' | translate}}\\\" allow-clear=true>{{ \\'ADF.WIDGET.TITLE.SORTED_BY\\' | translate:{item: $select.selected} }}</ui-select-match> <ui-select-choices repeat=\\\"selector in customSelectors | filter: $select.search track by $index\\\"> <small> <span ng-bind-html=\\\"selector | highlight: $select.search\\\"></span> </small> </ui-select-choices> </ui-select> </div> <div class=\\\"sortDirection col-xs-4 col-md-4\\\"> <button class=\\\"btn btn-sm pointer\\\" ng-click=changeDirection() ng-disabled=\\\"config.sort.value === \\'\\'\\\" title=\\\"{{\\'TOGGLE_SORTING_DIRECTION\\' | translate}}\\\"> <i class=glyphicon style=font-size:1.3em; ng-class=\\\"config.sort.direction===\\'ASCENDING\\' ? \\'glyphicon-sort-by-attributes\\': \\'glyphicon-sort-by-attributes-alt\\'\\\"></i> </button> </div> </div> <div ng-if=showCustomFields() class=\\\"col-xs-12 col-md-12\\\"> <div class=\\\"col-xs-12 col-md-4\\\" ng-repeat=\\\"model in search.customFilter\\\"> <label>{{model.name | translate}}</label> <input class=form-control id={{model.name}} name={{model.name}} type=text ng-model=search.customFilter[$index].value ng-keypress=enter($event)> </div> </div> <div ng-class=\\\"{ \\'panel-body\\':!widget.frameless || editMode}\\\" uib-collapse=widgetState.isCollapsed style=\\\"overflow:hidden;padding:0px 10px 0 10px;\\\"> <adf-widget-content model=definition content=widget extra=options.extraData> </adf-widget-content></div> </div>\");}]);\n})(window);"]}