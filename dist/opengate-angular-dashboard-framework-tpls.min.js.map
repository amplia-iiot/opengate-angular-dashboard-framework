{"version":3,"sources":["adf.js","dashboard.js","grid.js","order-by-object-key.js","provider.js","widget-content.js","widget-grid.js","widget-service.js","opengate-angular-dashboard-framework.tpl.js","opengate-angular-dashboard-framework-tpls.js"],"names":["window","undefined","angular","module","value","directive","$rootScope","$log","$timeout","$uibModal","dashboard","adfTemplatePath","$faIcons","$translate","Upload","stringToBoolean","string","isDefined","toLowerCase","Boolean","createConfiguration","type","cfg","config","widgets","copy","createWidget","wdgt","widget","addNewWidgetToModel","model","name","forceToSave","grid","newWidget","width","height","x","y","definition","push","$broadcast","error","isEditModeImmediate","edit","immediate","openEditMode","$scope","createCategories","categories","forEach","key","category","title","instant","description","isUndefined","createCategoriesList","categoryTags","categoriesTmp","split","idx","translatedCat","indexOf","replace","restrict","transclude","scope","collapsible","editable","editMode","continuousEditMode","maximizable","adfModel","adfWidgetFilter","hideButtons","extraData","controller","getNewModalScope","$new","widgetFilter","_getReloadWidgets","reloadWidgets","configChange","reload","ftype","Ftype","id","wid","filter","w","f","ft","updateWidgetFilters","widgetFilters","length","element","options","$watch","oldVal","newVal","titleTemplateUrl","toggleEditMode","openConfigWindow","modelCopy","editDashboardDialog","adfToggleEditMode","$on","event","isNewDashboard","adfCancelEditMode","cancelEditMode","adfWidgetRemoved","index","widgetTmp","splice","adfEditDashboardDialog","adfLaunchSearchingFromWidget","adfWindowTimeChangedFromWidget","editDashboardScope","backgroundColor","time","Date","backgroundImage","file","backgroundSize","backgroundImageSize","100% 100%","contain","cover","iconConfiguration","iconType","url","icon","image","imageSelected","base64DataUrl","then","removeDataFile","backgroundImageSelected","removeBackgroundFile","availableIcons","list","adfEditTemplatePath","editTemplateUrl","instance","open","templateUrl","backdrop","keyboard","size","closeDialog","close","$destroy","adfOpenWidgetFromOther","internal_config","_config","merge","adfOpenModalWidgetFromOther","widgetType","sendSelection","fullScreenScope","opts","modalSize","windowClass","temporal","persistDashboard","this","$parent","adfAddWidgetDialog","addWidgetDialog","addScopeCfg","widgetSortingDirection","widgetSorting","addScope","isFunction","availableCategories","adfAddTemplatePath","addTemplateUrl","widgetFilterCfg","addWidget","changeThumbnail","images","_currThumb","_currImg","link","$element","$attr","enableConfirmDelete","editing","preLink","gridOptions","cellHeight","verticalMargin","animate","float","alwaysShowResizeHandle","minWidth","auto","resizable","handles","disableDrag","disableResize","gsHandler","compile","pre","dashEvents","enable","disable","GridStackUI","Utils","sort","onChange","items","onDragStart","ui","console","log","onDragStop","onResizeStart","onResizeStop","onItemAdded","item","onItemRemoved","dashEvt","$filter","array","objectKey","provider","widgetsPath","messageTemplate","loadingTemplate","customWidgetTemplatePath","defaultApplyFunction","extend","frameless","apply","path","template","templatePath","$get","cid","getTime","idEquals","other","toString","$q","widgetService","$compile","$controller","$injector","renderError","msg","warn","html","compileWidget","currentScope","configChanged","_getWindowTime","from","newScope","windowFilter","to","moment","subtract","_d","translateMessage","content","extra","is_menu","menu","isPaginationEnable","reloadData","navOptionsHandler","firstLoad","renderWidget","is_itemsPerPage","itemsPerPage","page","getWindowTime","winTime","eval","rawdate","format","templateScope","_from","selectionManager","base","resolvers","$tpl","getTemplate","resolve","promise","isString","get","invoke","all","locals","resolveAs","templateCtrl","controllerAs","children","data","contents","reason","require","filterHandler","widgetActionsHandler","attrs","adfWidgetGridCtrl","search","widgetConfigChangedEvt","changeWidgets","widgetReloadEvt","reloadWidget","$interval","Filter","toastr","styleClass","fromJson","show_modal_footer","show_reload_config","widgetState","isCollapsed","collapsed","debug","postLink","deleteWidget","remove","deleteScope","deleteTemplateUrl","deleteDialog","print","isExecuteOperationEnabled","entityKey","headersFilter","oql","executeOperation","typeFilter","showFilter","showFinalFilter","launchSearching","launchSearchingAdv","filterApplied","executeSearch","quick","json","Object","keys","trim","launchSearchingQuick","launchSearchingShared","shared","filterSharedSelect","$item","$model","filterSharedRemove","timeObj","enter","keycode","keyCode","which","customSelectors","getCustomSelectors","widgetSelectors","findFields","fields","$apply","err","changeDirection","direction","debugQuery","parseQuery","toJson","unknownWords","filter_error","autocomplete_options","suggest","suggest_field_delimited","selectedItems","currentSelection","isSelected","obj","totalSelected","sendEntities","manageSelectedItems","selectionScope","selectionConfig","operationTypes","filterTypes","selected","manageItemsSelectedTemplate","animation","restoreSelection","clearSelection","applyFilter","customOql","filterAction","operationType","saveChangesDialog","finalSelection","visible","selectedItemsLength","lastItem","createApplyPromise","result","deferred","defer","reject","when","editScope","saveDialog","validationError","applyFn","setReloadTimeout","_setFilterType","selectFilter","filterId","_widgetFilters","sharedFilters","loadingData","startLoading","stopLoading","lastMessageTime","setStatusMessage","message","statusMessage","changeFilter","actions","setActions","adfDashboardCollapseExpand","args","collapseExpandStatus","adfWidgetEnterEditMode","adfIsEditMode","adfDashboardChanged","widgetConfigChanged","adfDashboardEditsCancelled","openFullScreen","$emit","openAboutScreen","modalInstance","$uibModalInstance","information","about","info","ok","selectedItem","saveWidgetScreen","wId","objectSelector","fileName","createQuickFilter","fieldsQuickSearch","criteria","_filter","or","field","operator","downloadCsv","extra_filter","columns","scope_filter","final_filter","order","window_filter","onWindowTimeChanged","and","JSON","parse","generateQR","stopReloadTimeout","addItemToSelection","removeItemFromSelection","reloadPeriod","isNaN","cancel","post","factory","$http","$sce","$templateCache","parseUrl","parsedUrl","substring","exposed","tpl","getTrustedResourceUrl","success","response","put","run"],"mappings":"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","file":"opengate-angular-dashboard-framework-tpls.min.js","sourcesContent":["/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf', ['adf.provider', 'ui.bootstrap', 'opengate-angular-js'])\n    .value('adfTemplatePath', '../src/templates/')\n    .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\n    .value('adfVersion', '<<adfVersion>>');","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @ngdoc directive\n * @name adf.directive:adfDashboard\n * @element div\n * @restrict EA\n * @scope\n * @description\n *\n * `adfDashboard` is a directive which renders the dashboard with all its\n * components. The directive requires a name attribute. The name of the\n * dashboard can be used to store the model.\n *\n * @param {string} name name of the dashboard. This attribute is required.\n * @param {boolean=} editable false to disable the editmode of the dashboard.\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\n * @param {object=} adfModel model object of the dashboard.\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\n *                   events during edit mode not reset it if edit mode is exited.\n * @param {boolean=} categories enable categories for the add widget dialog.\n */\n\nangular.module('adf')\n    .directive('adfDashboard', function($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath, $faIcons, $translate, Upload) {\n        'use strict';\n\n        function stringToBoolean(string) {\n            switch (angular.isDefined(string) ? string.toLowerCase() : null) {\n                case 'true':\n                case 'yes':\n                case '1':\n                    return true;\n                case 'false':\n                case 'no':\n                case '0':\n                case null:\n                    return false;\n                default:\n                    return Boolean(string);\n            }\n        }\n\n        function createConfiguration(type) {\n            var cfg = {};\n            var config = dashboard.widgets[type].config;\n            if (config) {\n                cfg = angular.copy(config);\n            }\n            return cfg;\n        }\n\n        function createWidget(type) {\n            var wdgt = {};\n            var widget = dashboard.widgets[type];\n            if (widget) {\n                wdgt = angular.copy(widget);\n            }\n            return wdgt;\n        }\n\n        /**\n         * Adds the widget to first column of the model.\n         *\n         * @param dashboard model\n         * @param widget to add to model\n         * @param name name of the dashboard\n         */\n        function addNewWidgetToModel(model, widget, name, forceToSave) {\n            if (model) {\n                if (!model.grid) {\n                    model.grid = [];\n                }\n\n                var newWidget = {\n                    width: 3,\n                    height: 2,\n                    x: 0,\n                    y: 0,\n                    definition: widget\n                };\n                model.grid.push(newWidget);\n\n                $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\n\n                if (forceToSave) {\n                    $rootScope.$broadcast('adfDashboardChanged', name, model);\n                }\n            } else {\n                $log.error('model is undefined');\n            }\n        }\n\n        /**\n         * Checks if the edit mode of the widget should be opened immediately.\n         *\n         * @param widget type\n         */\n        function isEditModeImmediate(type) {\n            var widget = dashboard.widgets[type];\n            return widget && widget.edit && widget.edit.immediate;\n        }\n\n        /**\n         * Opens the edit mode of the specified widget.\n         *\n         * @param dashboard scope\n         * @param widget\n         */\n        function openEditMode($scope, widget) {\n            // wait some time before fire enter edit mode event\n            $timeout(function() {\n                $scope.$broadcast('adfWidgetEnterEditMode', widget);\n            }, 200);\n        }\n\n        /**\n         * Creates object with the category name as key and an array of widgets as value.\n         *\n         * @param widgets array of widgets\n         *\n         * @return array of categories\n         */\n        function createCategories(widgets) {\n            var categories = {};\n            angular.forEach(widgets, function(widget, key) {\n                var category = widget.category;\n                // if the widget has no category use a default one\n                if (!category) {\n                    category = 'ADF.CATEGORY.MISCELANOUS';\n                }\n\n                widget.title = $translate.instant(widget.title);\n                widget.description = $translate.instant(widget.description);\n                widget.category = $translate.instant(widget.category);\n\n                // push widget to category array\n                if (angular.isUndefined(categories[widget.category])) {\n                    categories[widget.category] = {\n                        widgets: {}\n                    };\n                }\n\n                categories[widget.category].widgets[key] = widget;\n            });\n            return categories;\n        }\n\n        function createCategoriesList(widgets) {\n            var categories = [];\n            angular.forEach(widgets, function(widget, key) {\n                if (!widget.category) {\n                    widget.category = 'ADF.CATEGORY.MISCELLANEOUS';\n                }\n\n                widget.title = $translate.instant(widget.title);\n                widget.description = $translate.instant(widget.description);\n                widget.category = $translate.instant(widget.category);\n\n                if (!widget.categoryTags) {\n                    widget.categoryTags = 'ADF.CATEGORY.TAG.MISCELLANEOUS';\n                }\n\n                var categoriesTmp = widget.categoryTags.split(',');\n\n                angular.forEach(categoriesTmp, function(category, idx) {\n                    // push widget to category array\n                    var translatedCat = $translate.instant(category);\n                    if (categories.indexOf(translatedCat) === -1)\n                        categories.push(translatedCat);\n                });\n\n            });\n            return categories;\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            scope: {\n                name: '@',\n                collapsible: '@',\n                editable: '@',\n                editMode: '@',\n                continuousEditMode: '=',\n                maximizable: '@',\n                adfModel: '=',\n                adfWidgetFilter: '=',\n                categories: '@',\n                hideButtons: '=',\n                extraData: '='\n            },\n            controller: function($scope) {\n                var model = {};\n                var widgetFilter = null;\n                var name = $scope.name;\n\n                var _getReloadWidgets = function(widget) {\n                    var reloadWidgets = {\n                        configChange: [],\n                        reload: []\n                    };\n                    if (widget) {\n                        var definition = angular.copy(widget.definition);\n                        var ftype = definition.Ftype;\n                        var id = definition.wid;\n                        var config = definition.config;\n                        if (config) {\n                            var filter = config.filter;\n                            model.grid.forEach(function(w) {\n                                var f = w.definition.config.filter;\n                                var ft = w.definition.Ftype;\n                                //solo recargamos y actualizamos los widgets:\n                                // - que tengan filtro\n                                // y que el id tenga filtro\n                                // y que el id del filtro coincida con el wid del widget que ha modificado el fitro\n                                if (f && f.id && f.id === id) {\n                                    w.definition.config.filter = filter;\n                                    w.definition.config.filter.id = id;\n                                    reloadWidgets.reload.push(w.definition.wid);\n                                } else if (ftype === ft) {\n                                    reloadWidgets.configChange.push(w.definition.wid);\n                                }\n                            });\n                        }\n                    }\n                    return reloadWidgets;\n                };\n\n                var updateWidgetFilters = function(model) {\n                    var widgetFilters = [];\n                    var grid = model.grid;\n                    if (grid && grid.length > 0) {\n                        grid.forEach(function(element) {\n                            var definition = element.definition;\n                            var config = definition.config;\n                            var filter = config.filter;\n                            widgetFilters.push({\n                                wid: definition.wid,\n                                title: definition.title,\n                                filter: filter,\n                                Ftype: definition.Ftype\n                            });\n                        });\n                    }\n                    if (!$scope.options) {\n                        $scope.options = {\n                            extraData: {}\n                        };\n                    }\n                    $scope.options.extraData.widgetFilters = widgetFilters;\n                };\n                // Watching for changes on adfModel\n                $scope.$watch('adfModel', function(oldVal, newVal) {\n                    // has model changed or is the model attribute not set\n                    if (newVal !== null || (oldVal === null && newVal === null)) {\n                        model = $scope.adfModel;\n                        widgetFilter = $scope.adfWidgetFilter;\n\n                        if (model) {\n                            updateWidgetFilters(model);\n                            if (!model.title) {\n                                model.title = $translate.instant('ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD');\n                            }\n                            if (!model.titleTemplateUrl) {\n                                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\n                            }\n                            $scope.model = model;\n                        } else {\n                            $log.error('could not find or create model');\n                        }\n                    }\n                }, true);\n\n                // edit mode\n                $scope.editMode = false;\n\n                function getNewModalScope() {\n                    var scope = $scope.$new();\n                    return scope;\n                }\n\n                $scope.toggleEditMode = function(openConfigWindow) {\n                    $scope.editMode = !$scope.editMode;\n                    if ($scope.editMode) {\n                        if (!$scope.continuousEditMode) {\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\n                            $rootScope.$broadcast('adfIsEditMode');\n                        }\n\n                        if (openConfigWindow) {\n                            $scope.editDashboardDialog();\n                        }\n                    }\n\n                    if (!$scope.editMode) {\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\n                    }\n                };\n\n                var adfToggleEditMode = $scope.$on('adfToggleEditMode', function(event, isNewDashboard) {\n                    if (isNewDashboard) {\n                        $scope.toggleEditMode(true);\n                    } else {\n                        $scope.toggleEditMode();\n                    }\n                });\n\n                var adfCancelEditMode = $scope.$on('adfCancelEditMode', function(event) {\n                    if ($scope.editMode) {\n                        $scope.cancelEditMode();\n                    }\n                });\n\n                var adfWidgetRemoved = $scope.$on('adfWidgetRemovedFromGrid', function(event, widget) {\n                    var index = null;\n                    angular.forEach($scope.adfModel.grid, function(widgetTmp, idx) {\n                        if (widgetTmp.definition.wid === widget.wid) {\n                            index = idx;\n                        }\n                    });\n\n                    if (index >= 0) {\n                        $scope.adfModel.grid.splice(index, 1);\n                    }\n                });\n\n                $scope.cancelEditMode = function() {\n                    $scope.editMode = false;\n                    if (!$scope.continuousEditMode && ($scope.modelCopy !== $scope.adfModel)) {\n                        $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\n                    }\n                    $rootScope.$broadcast('adfDashboardEditsCancelled');\n                };\n\n                var adfEditDashboardDialog = $scope.$on('adfEditDashboardDialog', function(event) {\n                    if ($scope.editMode) {\n                        $scope.editDashboardDialog();\n                    }\n                });\n\n\n                var adfLaunchSearchingFromWidget = $scope.$on('adfLaunchSearchingFromWidget', function(event, widget) {\n                    var reloadWidgets = _getReloadWidgets(widget);\n                    $rootScope.$broadcast('adfFilterChanged', name, model, reloadWidgets);\n                });\n                var adfWindowTimeChangedFromWidget = $scope.$on('adfWindowTimeChangedFromWidget', function(event) {\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\n                });\n\n                // edit dashboard settings\n                $scope.editDashboardDialog = function() {\n                    var editDashboardScope = getNewModalScope();\n                    // create a copy of the title, to avoid changing the title to\n                    // \"dashboard\" if the field is empty\n                    editDashboardScope.copy = {\n                        title: (model.title !== 'ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD' ? model.title : ''),\n                        description: model.description,\n                        backgroundColor: model.backgroundColor ? model.backgroundColor : undefined,\n                        time: new Date(),\n                        backgroundImage: model.backgroundImage ? model.backgroundImage : undefined,\n                        file: model.backgroundImage ? model.backgroundImage : undefined,\n                    };\n\n                    editDashboardScope.backgroundSize = {\n                        name: 'backgroundSize',\n                        model: model.backgroundImageSize ? model.backgroundImageSize : '100% 100%',\n                        options: {\n                            '100% 100%': {\n                                title: $translate.instant('SIZE_CONF.AUTO')\n                            },\n                            'contain': {\n                                title: $translate.instant('SIZE_CONF.CONTAIN')\n                            },\n                            'cover': {\n                                title: $translate.instant('SIZE_CONF.COVER')\n                            }\n                        }\n                    };\n\n                    editDashboardScope.iconConfiguration = {\n                        name: 'iconConfiguration',\n                        model: model.iconType ? model.iconType : 'icon',\n                        url: undefined,\n                        file: undefined,\n                        iconType: model.iconType ? model.iconType : 'icon',\n                        icon: model.iconType === 'icon' ? model.icon : 'fa-tachometer',\n                        options: {\n                            'icon': {\n                                title: $translate.instant('ICON.LIBRARY'),\n                            },\n                            'image': {\n                                title: $translate.instant('ICON.IMAGE')\n                            }\n                        }\n                    };\n                    if (editDashboardScope.iconConfiguration.iconType === 'image') {\n                        editDashboardScope.iconConfiguration.file = model.icon;\n                        editDashboardScope.iconConfiguration.url = model.icon;\n                    }\n                    editDashboardScope.imageSelected = function(file) {\n                        if (file) {\n                            editDashboardScope.iconConfiguration.file = file;\n                            Upload.base64DataUrl(file).then(\n                                function(url) {\n                                    editDashboardScope.iconConfiguration.url = url;\n                                    editDashboardScope.iconConfiguration.file = url;\n                                    editDashboardScope.iconConfiguration.iconType = 'image'\n\n                                });\n                        } else {\n                            editDashboardScope.removeDataFile();\n                        }\n                    };\n                    editDashboardScope.backgroundImageSelected = function(file) {\n                        if (file) {\n                            editDashboardScope.iconConfiguration.file = file;\n                            Upload.base64DataUrl(file).then(\n                                function(url) {\n                                    editDashboardScope.copy.backgroundImage = url;\n                                    editDashboardScope.copy.file = url;\n\n                                });\n                        } else {\n                            editDashboardScope.removeBackgroundFile();\n                        }\n                    };\n                    editDashboardScope.removeDataFile = function() {\n                        editDashboardScope.iconConfiguration.file = null;\n                        editDashboardScope.iconConfiguration.url = null;\n                    };\n                    editDashboardScope.removeBackgroundFile = function() {\n                        editDashboardScope.copy.backgroundImage = null;\n                        editDashboardScope.copy.file = null;\n\n                    };\n                    // pass icon list\n                    editDashboardScope.availableIcons = $faIcons.list();\n\n                    var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\n                    if (model.editTemplateUrl) {\n                        adfEditTemplatePath = model.editTemplateUrl;\n                    }\n                    var instance = $uibModal.open({\n                        scope: editDashboardScope,\n                        templateUrl: adfEditTemplatePath,\n                        backdrop: 'static',\n                        keyboard: false,\n                        size: 'lg'\n                    });\n\n\n                    editDashboardScope.closeDialog = function() {\n                        // copy the new title back to the model\n                        model.title = editDashboardScope.copy.title;\n                        model.description = editDashboardScope.copy.description;\n                        if (editDashboardScope.iconConfiguration.model === 'image') {\n                            model.icon = editDashboardScope.iconConfiguration.url;\n\n                        } else if (editDashboardScope.iconConfiguration.model === 'icon') {\n                            model.icon = editDashboardScope.iconConfiguration.icon;\n\n                        }\n                        model.iconType = editDashboardScope.iconConfiguration.model;\n                        model.backgroundColor = editDashboardScope.copy.backgroundColor ? editDashboardScope.copy.backgroundColor : undefined;\n                        model.backgroundImage = editDashboardScope.copy.backgroundImage ? editDashboardScope.copy.backgroundImage : undefined;\n                        model.backgroundImageSize = editDashboardScope.backgroundSize.model;\n                        // close modal and destroy the scope\n                        instance.close();\n                        editDashboardScope.$destroy();\n                    };\n                };\n\n                var adfOpenWidgetFromOther = $scope.$on('adfOpenWidgetFromOther', function(event, widget, config) {\n\n                    var internal_config = createConfiguration(widget);\n                    var _config = angular.merge({}, internal_config, config);\n                    var w = {\n                        type: widget,\n                        config: _config,\n                        title: _config.title\n                    };\n                    addNewWidgetToModel(model, w, name, !$scope.editMode);\n                });\n\n                var adfOpenModalWidgetFromOther = $scope.$on('adfOpenModalWidgetFromOther', function(event, widgetType, config) {\n                    var templateUrl = adfTemplatePath + 'widget-fullscreen.html';\n                    if (config.sendSelection) {\n                        templateUrl = adfTemplatePath + 'widget-fullscreen-selection.html';\n                    }\n                    var widget = createWidget(widgetType);\n                    widget.config = angular.merge({}, widget.config, config);\n                    widget.type = widgetType;\n                    if (widget.config.title) {\n                        widget.title = widget.config.title;\n                    }\n                    var fullScreenScope = $scope.$new();\n                    fullScreenScope.definition = fullScreenScope.widget = widget;\n                    var opts = {\n                        scope: fullScreenScope,\n                        templateUrl: templateUrl,\n                        size: fullScreenScope.definition.modalSize || 'el',\n                        backdrop: 'static',\n                        windowClass: (fullScreenScope.definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n                    };\n\n                    if ($scope.model && !$scope.model.temporal) {\n                        fullScreenScope.persistDashboard = function() {\n                            $rootScope.$broadcast('adfOpenWidgetFromOther', this.$parent.widget.type, this.$parent.widget.config);\n                            this.closeDialog();\n                        };\n                    }\n\n                    var instance = $uibModal.open(opts);\n                    fullScreenScope.closeDialog = function() {\n                        instance.close();\n                        fullScreenScope.$destroy();\n                    };\n\n\n                });\n\n                var adfAddWidgetDialog = $scope.$on('adfAddWidgetDialog', function(event) {\n                    if (!model.temporal && model.editable) {\n                        if (!$scope.editMode) {\n                            $scope.editMode = true;\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\n                            $rootScope.$broadcast('adfIsEditMode');\n                        }\n\n                        $scope.addWidgetDialog();\n                    }\n                });\n\n                // add widget dialog\n                $scope.addScopeCfg = {\n                    widgetFilter: {},\n                    widgetSortingDirection: '',\n                    widgetSorting: 'priority'\n                };\n\n                $scope.addWidgetDialog = function() {\n                    var addScope = getNewModalScope();\n                    var widgets;\n                    if (angular.isFunction(widgetFilter)) {\n                        widgets = {};\n                        angular.forEach(dashboard.widgets, function(widget, type) {\n                            if (widgetFilter(widget, type, model)) {\n                                widgets[type] = widget;\n                            }\n                        });\n                    } else {\n                        widgets = dashboard.widgets;\n                    }\n                    addScope.widgets = widgets;\n\n                    angular.forEach(addScope.widgets, function(widget, type) {\n                        widget.key = type;\n                        if (!widget.category) {\n                            widget.category = 'Miscellaneous';\n                        }\n                    });\n\n                    // pass createCategories function to scope, if categories option is enabled\n                    if ($scope.options.categories) {\n                        addScope.createCategories = createCategories;\n                    } else {\n                        addScope.availableCategories = createCategoriesList(widgets);\n                    }\n\n                    var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\n                    if (model.addTemplateUrl) {\n                        adfAddTemplatePath = model.addTemplateUrl;\n                    }\n\n                    var opts = {\n                        scope: addScope,\n                        templateUrl: adfAddTemplatePath,\n                        backdrop: 'static',\n                        size: 'lg'\n                    };\n\n                    var instance = $uibModal.open(opts);\n\n                    addScope.widgetFilterCfg = $scope.addScopeCfg;\n\n                    addScope.addWidget = function(widget) {\n                        var w = {\n                            type: widget,\n                            Ftype: dashboard.widgets[widget].Ftype || null,\n                            config: createConfiguration(widget)\n                        };\n                        addNewWidgetToModel(model, w, name);\n                        // close and destroy\n                        instance.close();\n                        addScope.$destroy();\n\n                        // check for open edit mode immediately\n                        if (isEditModeImmediate(widget)) {\n                            openEditMode($scope, w);\n                        }\n                    };\n\n                    addScope.changeThumbnail = function(widget) {\n                        if (widget.images) {\n                            if (angular.isUndefined(widget._currThumb)) {\n                                widget._currThumb = 1;\n                            } else {\n                                widget._currThumb += 1;\n                            }\n\n\n                            if (widget._currThumb >= widget.images.length) {\n                                widget._currThumb = 0;\n                            }\n\n                            widget._currImg = widget.images[widget._currThumb];\n                        }\n                    };\n\n                    addScope.closeDialog = function() {\n                        // close and destroy\n                        instance.close();\n                        addScope.$destroy();\n                    };\n                };\n\n                $scope.addNewWidgetToModel = addNewWidgetToModel;\n\n                $scope.$on('destroy', function() {\n                    adfLaunchSearchingFromWidget();\n                    adfWindowTimeChangedFromWidget();\n                    adfToggleEditMode();\n                    adfOpenWidgetFromOther();\n                    adfOpenModalWidgetFromOther();\n                    adfCancelEditMode();\n                    adfAddWidgetDialog();\n                    adfEditDashboardDialog();\n                    adfWidgetRemoved();\n                });\n            },\n            link: function($scope, $element, $attr) {\n                // pass options to scope\n                var options = {\n                    name: $attr.name,\n                    editable: true,\n                    enableConfirmDelete: stringToBoolean($attr.enableConfirmDelete),\n                    maximizable: stringToBoolean($attr.maximizable),\n                    collapsible: stringToBoolean($attr.collapsible),\n                    categories: stringToBoolean($attr.categories),\n                    extraData: {}\n                };\n\n                if (angular.isDefined($attr.editable)) {\n                    options.editable = stringToBoolean($attr.editable);\n                }\n\n                if (angular.isDefined($scope.extraData)) {\n                    options.extraData = $scope.extraData;\n                }\n\n                options.extraData.editing = $scope.editMode;\n\n                $scope.options = options;\n            },\n            templateUrl: adfTemplatePath + 'dashboard.html'\n        };\n    });","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the 'Software'), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/* global angular */\nangular.module('adf')\n    .directive('adfDashboardGrid', function(adfTemplatePath) {\n        'use strict';\n\n        function preLink($scope) {\n            $scope.gridOptions = {\n                cellHeight: 146,\n                verticalMargin: 10,\n                animate: true,\n                float: false,\n                alwaysShowResizeHandle: true,\n                minWidth: 768,\n                auto: true,\n                resizable: {\n                    handles: 'e, se, s, sw, w'\n                },\n                disableDrag: !$scope.editMode,\n                disableResize: !$scope.editMode\n            };\n\n            $scope.gsHandler = null;\n        }\n\n        return {\n            restrict: 'E',\n            scope: {\n                adfModel: '=',\n                editMode: '=',\n                continuousEditMode: '=',\n                options: '='\n            },\n            templateUrl: adfTemplatePath + 'dashboard-grid.html',\n            compile: function() {\n                return {\n                    pre: preLink,\n                };\n            },\n            controller: function($scope, $timeout) {\n                var dashEvents = [];\n                dashEvents.push($scope.$on('adfIsEditMode', function() {\n                    $timeout(function() {\n                        $scope.gsHandler.enable();\n                    }, 100);\n                }));\n\n                dashEvents.push($scope.$on('adfDashboardChanged', function() {\n                    $timeout(function() {\n                        $scope.gsHandler.disable();\n                    }, 100);\n                }));\n\n                dashEvents.push($scope.$on('adfDashboardEditsCancelled', function() {\n                    $timeout(function() {\n                        $scope.gsHandler.disable();\n                    }, 100);\n                }));\n\n                dashEvents.push($scope.$on('adfCancelEditMode', function() {\n                    $timeout(function() {\n                        $scope.gsHandler.disable();\n                    }, 100);\n                }));\n\n                dashEvents.push($scope.$on('adfWidgetAdded', function(event) {\n                    $timeout(function() {\n                        $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\n                        $scope.gsHandler.enable();\n                    }, 100);\n                }));\n\n                $scope.onChange = function(event, items) {\n                    //console.log('onChange event: ' + event + ' items:' + items);\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\n                };\n\n                $scope.onDragStart = function(event, ui) {\n                    console.log('onDragStart event: ' + event + ' ui:' + ui);\n                };\n\n                $scope.onDragStop = function(event, ui) {\n                    console.log('onDragStop event: ' + event + ' ui:' + ui);\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\n                };\n\n                $scope.onResizeStart = function(event, ui) {\n                    console.log('onResizeStart event: ' + event + ' ui:' + ui);\n                };\n\n                $scope.onResizeStop = function(event, ui) {\n                    console.log('onResizeStop event: ' + event + ' ui:' + ui);\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\n                    $scope.$broadcast('OnResizeWidget');\n                };\n\n                $scope.onItemAdded = function(item) {\n                    console.log('onItemAdded item: ' + item);\n                };\n\n                $scope.onItemRemoved = function(item) {\n                    console.log('onItemRemoved item: ' + item);\n                };\n\n                $scope.$on('destroy', function() {\n                    dashEvents.forEach(function(dashEvt) {\n                        dashEvt();\n                    });\n                });\n            }\n        };\n    });","/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .filter('adfOrderByObjectKey', function($filter) {\n    'use strict';\n\n    return function(item, key){\n      var array = [];\n      angular.forEach(item, function(value, objectKey){\n        value[key] = objectKey;\n        array.push(value);\n      });\n      return $filter('orderBy')(array, key);\n    };\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\n/**\n * @ngdoc object\n * @name adf.dashboardProvider\n * @description\n *\n * The dashboardProvider can be used to register widgets.\n */\nangular.module('adf.provider', [])\n    .provider('dashboard', function() {\n\n        var widgets = {};\n        var widgetsPath = '';\n        var messageTemplate = '<div class=\"alert alert-primary\">{}</div>';\n        var loadingTemplate = '\\\n      <div class=\"progress progress-striped active\">\\n\\\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\n          <span class=\"sr-only\" translate>FORM.MSG.LOADING ...</span>\\n\\\n        </div>\\n\\\n      </div>';\n        var customWidgetTemplatePath = null;\n\n        // default apply function of widget.edit.apply\n        var defaultApplyFunction = function() {\n            return true;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#widget\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Registers a new widget.\n         *\n         * @param {string} name of the widget\n         * @param {object} widget to be registered.\n         *\n         *   Object properties:\n         *\n         *   - `title` - `{string=}` - The title of the widget.\n         *   - `description` - `{string=}` - Description of the widget.\n         *   - `category` - `{string=}` - Category of the widget.\n         *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\n         *   - `config` - `{object}` - Predefined widget configuration.\n         *   - `controller` - `{string=|function()=}` - Controller fn that should be\n         *      associated with newly created scope of the widget or the name of a\n         *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\n         *      if passed as a string.\n         *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\n         *      published to scope under the `controllerAs` name.\n         *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\n         *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\n         *   - `template` - `{string=|function()=}` - html template as a string.\n         *   - `templateUrl` - `{string=}` - path to an html template.\n         *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\n         *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n         *      be injected into the controller. If any of these dependencies are promises, the widget\n         *      will wait for them all to be resolved or one to be rejected before the controller is\n         *      instantiated.\n         *      If all the promises are resolved successfully, the values of the resolved promises are\n         *      injected.\n         *\n         *      The map object is:\n         *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n         *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n         *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\n         *        and the return value is treated as the dependency. If the result is a promise, it is\n         *        resolved before its value is injected into the controller.\n         *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n         *      on the scope of the widget.\n         *   - `edit` - `{object}` - Edit modus of the widget.\n         *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n         *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\n         *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n         *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\n         *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\n         *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n         *        on the scope of the widget.\n         *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\n         *        Default is true.\n         *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\n         *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\n         *        The function have to return a boolean or an promise which can be resolved to a boolean.\n         *        The function can use injection.\n         *\n         * @returns {Object} self\n         */\n        this.widget = function(name, widget) {\n            var w = angular.extend({\n                reload: false,\n                frameless: false\n            }, widget);\n            if (w.edit) {\n                var edit = {\n                    reload: true,\n                    immediate: false,\n                    apply: defaultApplyFunction\n                };\n                angular.extend(edit, w.edit);\n                w.edit = edit;\n            }\n            widgets[name] = w;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#widgetsPath\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Sets the path to the directory which contains the widgets. The widgets\n         * path is used for widgets with a templateUrl which contains the\n         * placeholder {widgetsPath}. The placeholder is replaced with the\n         * configured value, before the template is loaded, but the template is\n         * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\n         * The default value of widgetPaths is ''.\n         *\n         *\n         * @param {string} path to the directory which contains the widgets\n         *\n         * @returns {Object} self\n         */\n        this.widgetsPath = function(path) {\n            widgetsPath = path;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#messageTemplate\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the template for messages.\n         *\n         * @param {string} template for messages.\n         *\n         * @returns {Object} self\n         */\n        this.messageTemplate = function(template) {\n            messageTemplate = template;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#loadingTemplate\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the template which is displayed as\n         * long as the widget resources are not resolved.\n         *\n         * @param {string} template loading template\n         *\n         * @returns {Object} self\n         */\n        this.loadingTemplate = function(template) {\n            loadingTemplate = template;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#customWidgetTemplatePath\n         * @propertyOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the container template for the widgets\n         *\n         * @param {string} path to the custom widget template\n         *\n         * @returns {Object} self\n         */\n        this.customWidgetTemplatePath = function(templatePath) {\n            customWidgetTemplatePath = templatePath;\n            return this;\n        };\n\n        /**\n         * @ngdoc service\n         * @name adf.dashboard\n         * @description\n         *\n         * The dashboard holds all options and  widgets.\n         *\n         * @property {Array.<Object>} widgets Array of registered widgets.\n         * @property {string} widgetsPath Default path for widgets.\n         * @property {string} messageTemplate Template for messages.\n         * @property {string} loadingTemplate Template for widget loading.\n         * * @property {string} customWidgetTemplatePath Changes the container template for the widgets\n         *\n         * @returns {Object} self\n         */\n        this.$get = function() {\n            var cid = 0;\n\n            return {\n                widgets: widgets,\n                widgetsPath: widgetsPath,\n                messageTemplate: messageTemplate,\n                loadingTemplate: loadingTemplate,\n                customWidgetTemplatePath: customWidgetTemplatePath,\n\n                /**\n                 * @ngdoc method\n                 * @name adf.dashboard#id\n                 * @methodOf adf.dashboard\n                 * @description\n                 *\n                 * Creates an ongoing numeric id. The method is used to create ids for\n                 * columns and widgets in the dashboard.\n                 */\n                id: function() {\n                    return new Date().getTime() + '-' + (++cid);\n                },\n\n                /**\n                 * @ngdoc method\n                 * @name adf.dashboard#idEqual\n                 * @methodOf adf.dashboard\n                 * @description\n                 *\n                 * Checks if the given ids are equal.\n                 *\n                 * @param {string} id widget or column id\n                 * @param {string} other widget or column id\n                 */\n                idEquals: function(id, other) {\n                    // use toString, because old ids are numbers\n                    return ((id) && (other)) && (id.toString() === other.toString());\n                }\n            };\n        };\n\n    });","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf')\n    .directive('adfWidgetContent', function($log, $q, widgetService,\n        $compile, $controller, $injector, dashboard, $translate) {\n\n        function renderError($element, msg) {\n            $log.warn(msg);\n            $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\n        }\n\n        function compileWidget($scope, $element, currentScope, configChanged) {\n            var model = $scope.model;\n            if (!model) {\n                $translate('ADF.ERROR.MODEL_IS_UNDEFINED').then(function(translateMessage) {\n                    renderError($element, translateMessage);\n                });\n                return currentScope;\n            }\n\n            var content = $scope.content;\n\n            if (!content) {\n                $translate('ADF.ERROR.WIDGET_FOR_DEPRECTATED', {\n                    title: model.title\n                }).then(function(translateMessage) {\n                    renderError($element, translateMessage);\n                });\n                return currentScope;\n            }\n\n            var extra = $scope.extra;\n            var newScope = currentScope;\n\n            if (newScope) {\n                var is_menu = newScope.menu !== undefined && newScope.menu !== null && (!newScope.isPaginationEnable || !newScope.isPaginationEnable());\n                if (is_menu || configChanged || !angular.isFunction(newScope.reloadData)) {\n                    if ($scope.navOptionsHandler) {\n                        $scope.navOptionsHandler.firstLoad = true;\n                    }\n                    newScope = renderWidget($scope, $element, currentScope, model, content, extra);\n                } else {\n                    var is_itemsPerPage = newScope.itemsPerPage !== undefined && newScope.itemsPerPage !== null;\n                    if (is_itemsPerPage || newScope.page) {\n                        newScope.page = 1;\n                    }\n                    newScope.reloadData();\n                }\n            } else {\n                if ($scope.navOptionsHandler) {\n                    $scope.navOptionsHandler.firstLoad = true;\n                }\n\n                newScope = renderWidget($scope, $element, currentScope, model, content, extra);\n            }\n\n            function _getWindowTime(type) {\n                if (type === 'custom') {\n                    return {\n                        from: newScope.config.windowFilter.from,\n                        to: newScope.config.windowFilter.to\n                    };\n                }\n                var from = window.moment().subtract(1, type);\n                return {\n                    from: from._d\n                };\n            }\n\n\n            if (newScope.config) {\n                newScope.config.getWindowTime = function() {\n                    var windowFilter = newScope.config.windowFilter;\n                    if (windowFilter && windowFilter.type) {\n                        var winTime = _getWindowTime(windowFilter.type);\n                        /* jshint ignore:start */\n                        if (!window.eval(newScope.config.windowFilter.rawdate)) {\n                            for (var key in winTime) {\n                                winTime[key] = window.moment(winTime[key]).format();\n                            }\n                            winTime['rawdate'] = true;\n                        }\n                        /* jshint ignore:end */\n                        return winTime;\n                    }\n                };\n            }\n\n            if (extra) {\n                newScope.editing = extra.editing ? true : false;\n                newScope.extraData = extra;\n            }\n\n            return newScope;\n        }\n\n        function renderWidget($scope, $element, currentScope, model, content, extra) {\n            // display loading template\n            $element.html(dashboard.loadingTemplate);\n\n            // create new scope\n            var templateScope = $scope.$new();\n\n            // pass config object to scope\n            if (!model.config) {\n                model.config = {};\n            }\n\n            templateScope.config = model.config;\n            templateScope.editing = extra && extra.editing;\n\n            if (extra) {\n                templateScope.extra = extra;\n            }\n\n            var _from = currentScope || templateScope.config;\n            templateScope.selectionManager = (_from) ? _from.selectionManager : undefined;\n\n            // local injections\n            var base = {\n                $scope: templateScope,\n                widget: model,\n                config: model.config\n            };\n\n            // get resolve promises from content object\n            var resolvers = {};\n            resolvers.$tpl = widgetService.getTemplate(content);\n            if (content.resolve) {\n                angular.forEach(content.resolve, function(promise, key) {\n                    if (angular.isString(promise)) {\n                        resolvers[key] = $injector.get(promise);\n                    } else {\n                        resolvers[key] = $injector.invoke(promise, promise, base);\n                    }\n                });\n            }\n\n            // resolve all resolvers\n            $q.all(resolvers).then(function(locals) {\n                angular.extend(locals, base);\n\n                // pass resolve map to template scope as defined in resolveAs\n                if (content.resolveAs) {\n                    templateScope[content.resolveAs] = locals;\n                }\n\n                // compile & render template\n                var template = locals.$tpl;\n                $element.html(template);\n                if (content.controller) {\n                    var templateCtrl = $controller(content.controller, locals);\n                    if (content.controllerAs) {\n                        templateScope[content.controllerAs] = templateCtrl;\n                    }\n                    $element.children().data('$ngControllerController', templateCtrl);\n                }\n                $compile($element.contents())(templateScope);\n            }, function(reason) {\n                // handle promise rejection\n                var msg = 'ADF.ERROR.COULD_NOT_RESOLVE_ALL_PROMISSES';\n                $translate(msg, {\n                    reason: (reason ? ': ' + reason : reason)\n                }).then(function(translateMessage) {\n                    renderError($element, translateMessage);\n                });\n            });\n\n            // destroy old scope\n            if (currentScope) {\n                currentScope.$destroy();\n            }\n\n            return templateScope;\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            require: '?^^adfWidgetGrid',\n            scope: {\n                model: '=',\n                content: '=',\n                extra: '=',\n                navOptionsHandler: '=?',\n                filterHandler: '=?',\n                widgetActionsHandler: '=?'\n            },\n            link: function($scope, $element, attrs, adfWidgetGridCtrl) {\n                var currentScope = compileWidget($scope, $element, null);\n                if (adfWidgetGridCtrl) {\n                    $scope.search = $scope.search || {};\n                    adfWidgetGridCtrl.updateWidgetFilters($scope.model.config.filter && $scope.model.config.filter.id);\n                }\n\n                var widgetConfigChangedEvt = $scope.$on('widgetConfigChanged', function(event, changeWidgets) {\n                    if (changeWidgets) {\n                        if (changeWidgets.indexOf($scope.model.wid) !== -1 && adfWidgetGridCtrl) {\n                            adfWidgetGridCtrl.updateWidgetFilters($scope.model.config.filter && $scope.model.config.filter.id, true);\n                        }\n                    } else {\n                        currentScope = compileWidget($scope, $element, currentScope, true);\n                    }\n                });\n\n                var widgetReloadEvt = $scope.$on('widgetReload', function(event, reloadWidgets) {\n                    var reloadWidget = true;\n                    if (reloadWidgets && reloadWidgets.length > 0) {\n                        reloadWidget = reloadWidgets.indexOf($scope.model.wid) !== -1;\n                    }\n                    if (reloadWidget) {\n                        currentScope = compileWidget($scope, $element, currentScope, false);\n                        if (adfWidgetGridCtrl && adfWidgetGridCtrl.updateWidgetFilters) {\n                            adfWidgetGridCtrl.updateWidgetFilters($scope.model.config.filter && $scope.model.config.filter.id);\n                        }\n                    }\n                });\n\n                $scope.$on('destroy', function() {\n                    widgetConfigChangedEvt();\n                    widgetReloadEvt();\n                });\n            }\n        };\n    });","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf')\n    .directive('adfWidgetGrid', function($injector, $q, $log, $uibModal, $rootScope, $interval, dashboard, adfTemplatePath, Filter, toastr, $translate) {\n        function preLink($scope) {\n            var definition = $scope.definition;\n\n            if (definition) {\n                var w = dashboard.widgets[definition.type];\n                if (w) {\n                    // pass title\n                    if (!definition.title) {\n                        definition.title = w.title;\n                    }\n\n                    definition.titleTemplateUrl = adfTemplatePath + 'widget-grid-title.html';\n\n                    if (!definition.editTemplateUrl) {\n                        definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\n                        if (w.editTemplateUrl) {\n                            definition.editTemplateUrl = w.editTemplateUrl;\n                        }\n                    }\n\n                    if (!definition.titleTemplateUrl) {\n                        definition.frameless = w.frameless;\n                    }\n\n                    if (!definition.styleClass) {\n                        definition.styleClass = w.styleClass;\n                    }\n\n                    // set id for sortable\n                    if (!definition.wid) {\n                        definition.wid = dashboard.id();\n                    }\n\n                    // pass copy of widget to scope\n                    $scope.widget = angular.copy(w);\n\n                    // create config object\n                    var config = definition.config;\n                    if (config) {\n                        if (angular.isString(config)) {\n                            config = angular.fromJson(config);\n                        }\n                    } else {\n                        config = {};\n                    }\n\n                    if (typeof $scope.widget.show_modal_footer === 'undefined') {\n                        $scope.widget.show_modal_footer = true;\n                    }\n\n                    if (typeof $scope.widget.show_reload_config === 'undefined') {\n                        $scope.widget.show_reload_config = true;\n                    }\n\n                    // pass config to scope\n                    $scope.config = config;\n\n                    // collapse exposed $scope.widgetState property\n                    if (!$scope.widgetState) {\n                        $scope.widgetState = {};\n                        $scope.widgetState.isCollapsed = (w.collapsed === true) ? w.collapsed : false;\n                    }\n\n                } else {\n                    $log.warn('could not find widget ' + definition.type);\n                }\n            } else {\n                $log.debug('definition not specified, widget was probably removed');\n            }\n        }\n\n        function postLink($scope, $element) {\n            var definition = $scope.definition;\n            if (!definition) {\n                $log.debug('widget not found');\n                return;\n            }\n            if (!$scope.config) {\n                $scope.config = {};\n            }\n\n            var config = $scope.config;\n\n            // bind close function\n            var deleteWidget = function() {\n                $element.remove();\n                $rootScope.$broadcast('adfWidgetRemovedFromGrid', definition);\n            };\n\n            $scope.remove = function() {\n                if ($scope.options.enableConfirmDelete) {\n                    var deleteScope = $scope.$new();\n\n                    var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\n                    if (definition.deleteTemplateUrl) {\n                        deleteTemplateUrl = definition.deleteTemplateUrl;\n                    }\n                    var opts = {\n                        scope: deleteScope,\n                        templateUrl: deleteTemplateUrl,\n                        backdrop: 'static'\n                    };\n                    var instance = $uibModal.open(opts);\n\n                    deleteScope.closeDialog = function() {\n                        instance.close();\n                        deleteScope.$destroy();\n                    };\n                    deleteScope.deleteDialog = function() {\n                        deleteWidget();\n                        deleteScope.closeDialog();\n                    };\n                } else {\n                    deleteWidget();\n                }\n            };\n\n\n            $scope.print = function() {\n                if (!$scope.editMode) {\n                    $scope.$broadcast('widgetPrint');\n                }\n            };\n\n            $scope.isExecuteOperationEnabled = function() {\n\n                if (config.entityKey)\n                    return true;\n                var filter = config.filter;\n\n                if (filter) {\n                    if (filter.headersFilter && filter.headersFilter.length > 0) {\n                        return true;\n                    } else {\n                        if (filter.type === \"basic\") {\n                            return filter.value.length > 0;\n                        }\n                        if (filter.type === \"advanced\") {\n                            return filter.value.length > 2 && filter.oql;\n                        }\n                    }\n                }\n\n                return false;\n            };\n\n            $scope.executeOperation = function() {\n                if (!$scope.editMode) {\n\n                    $scope.$parent.$broadcast('widgetExecuteOperation');\n                }\n            };\n\n            $scope.filter = {\n                typeFilter: 1,\n                showFilter: false,\n                showFinalFilter: false\n            };\n\n            $scope.launchSearching = function() {\n                var widget = {\n                    definition: definition,\n                    element: $element\n                };\n\n                $rootScope.$broadcast('adfLaunchSearchingFromWidget', widget, $scope.config.filter);\n                $scope.reload();\n            };\n\n\n            $scope.launchSearchingAdv = function() {\n                if (!$scope.filterApplied) {\n                    var executeSearch = true;\n                    $scope.search.quick = '';\n                    if ($scope.search.json === '' || $scope.search.json === '{}' || (!angular.isString($scope.search.json) && Object.keys($scope.search.json).length === 0)) {\n                        if ($scope.search.oql && $scope.search.oql.trim().length > 0) {\n                            toastr.error($translate.instant(\"TOASTR.FILTER_IS_MALFORMED\"));\n                            executeSearch = false;\n                        } else {\n                            $scope.config.filter = {\n                                type: 'advanced',\n                                oql: '',\n                                value: ''\n                            };\n                        }\n                    } else {\n                        $scope.config.filter = {\n                            type: 'advanced',\n                            oql: $scope.search.oql,\n                            value: $scope.search.json,\n                            headersFilter: $scope.config.filter.headersFilter\n                        };\n                    }\n\n                    if (executeSearch) {\n                        $scope.launchSearching();\n                        $scope.filterApplied = true;\n                    }\n                }\n            };\n\n            $scope.launchSearchingQuick = function() {\n                if (!$scope.filterApplied) {\n                    $scope.search.oql = $scope.search.json = '';\n                    $scope.config.filter = {\n                        type: 'basic',\n                        value: $scope.search.quick,\n                        headersFilter: $scope.config.filter.headersFilter\n                    };\n                    $scope.launchSearching();\n                    $scope.filterApplied = true;\n                }\n            };\n\n            $scope.launchSearchingShared = function() {\n                // if (!$scope.filterApplied) {\n                var shared = $scope.search.id;\n                if (shared) {\n                    shared.filter.id = shared.wid;\n                    $scope.config.filter = shared.filter;\n                } else {\n                    $scope.config.filter = {};\n                }\n                $scope.launchSearching();\n                $scope.filterApplied = true;\n                // }\n            };\n\n            $scope.filterSharedSelect = function($item, $model) {\n                $scope.filterApplied = false;\n                $scope.launchSearchingShared();\n            };\n            $scope.filterSharedRemove = function($item, $model) {\n                $scope.filterApplied = false;\n            };\n\n            var windowTimeChanged = $scope.$on('onWindowTimeChanged', function(event, timeObj) {\n                $scope.config.windowFilter = timeObj ? timeObj : (config.windowFilter ? {} : timeObj);\n                var widget = {\n                    definition: definition,\n                    element: $element\n                };\n                $rootScope.$broadcast('adfWindowTimeChangedFromWidget', widget, $scope.config.windowFilter);\n                $scope.reload();\n            });\n\n            $scope.enter = function(event) {\n                var keycode = (event.keyCode ? event.keyCode : event.which);\n                if (keycode === 13) {\n                    if ($scope.filter.typeFilter === 0)\n                        $scope.launchSearchingAdv();\n                    if ($scope.filter.typeFilter === 1)\n                        $scope.launchSearchingQuick();\n                    if ($scope.filter.typeFilter === 2)\n                        $scope.launchSearchingShared();\n                } else if (keycode === 19) {\n                    $scope.filter.showFinalFilter = !$scope.filter.showFinalFilter;\n                } else {\n                    $scope.filterApplied = false;\n                }\n            };\n\n\n            $scope.customSelectors = [];\n            $scope.getCustomSelectors = function() {\n                if ($scope.config.customSelectors) {\n                    $scope.customSelectors = $scope.config.customSelectors;\n                } else {\n                    config.widgetSelectors().findFields('').then(function(fields) {\n                        $scope.customSelectors = fields;\n                        $scope.$apply();\n                    }).catch(function(err) {\n                        $log.error(err);\n                    });\n                }\n            };\n\n            $scope.changeDirection = function() {\n                var direction = config.sort.direction;\n                if (direction === 'DESCENDING') {\n                    $scope.config.sort.direction = 'ASCENDING';\n                } else if (direction === 'ASCENDING') {\n                    $scope.config.sort.direction = 'DESCENDING';\n                }\n                $scope.reload();\n            };\n\n            $scope.debugQuery = function() {\n                Filter.parseQuery($scope.search.oql || '')\n                    .then(function(data) {\n                        //$scope.elementos = data;\n                        $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\n                        $scope.unknownWords = '';\n                        $scope.filter_error = null;\n                    })\n                    .catch(function(err) {\n                        $scope.filter_error = err;\n                        // Tratar el error\n                    });\n\n            };\n\n            $scope.autocomplete_options = function() {\n                var autocomplete_options = {\n                    suggest: Filter.suggest_field_delimited,\n                    customSelectors: config.widgetSelectors()\n                };\n\n                return autocomplete_options;\n\n            };\n\n            // Multiple selection\n            $scope.selectedItems = definition.selectedItems || {};\n\n            // Gestor de seleccion\n            $scope.selectionManager = {\n                currentSelection: $scope.selectedItems,\n                isSelected: function(key, obj) {\n                    if ($scope.selectedItems[key] && !angular.isUndefined(obj)) {\n                        $scope.selectedItems[key].data = obj;\n                    }\n\n                    return $scope.selectedItems[key] ? true : false;\n                },\n                totalSelected: function() {\n                    return Object.keys($scope.selectedItems).length;\n                }\n            };\n\n            if (definition.config.sendSelection) {\n\n                $scope.sendEntities = function() {\n                    definition.config.sendSelection($scope.selectedItems);\n                    $scope.$parent.closeDialog();\n                };\n\n                if (definition.config.selectedItems) {\n                    $scope.selectedItems = angular.copy(definition.config.selectedItems);\n                }\n\n                $scope.config.selectionManager = $scope.selectionManager;\n            }\n\n            $scope.manageSelectedItems = function() {\n                var selectionScope = $scope.$new();\n\n                if (definition.config.sendSelection) {\n                    delete config.selectionConfig.operationTypes;\n                    delete config.selectionConfig.filterTypes;\n                }\n\n                selectionScope.selectionConfig = config.selectionConfig;\n\n                selectionScope.selectedItems = [];\n                angular.forEach($scope.selectedItems, function(value, key) {\n                    selectionScope.selectedItems.push({\n                        key: key,\n                        value: value\n                    });\n                });\n\n                selectionScope.currentSelection = {\n                    selected: selectionScope.selectedItems\n                };\n\n                var manageItemsSelectedTemplate = adfTemplatePath + 'widget-selection.html';\n                var opts = {\n                    scope: selectionScope,\n                    templateUrl: manageItemsSelectedTemplate,\n                    backdrop: 'static',\n                    size: 'lg',\n                    animation: true\n                };\n\n                var instance = $uibModal.open(opts);\n\n                selectionScope.restoreSelection = function() {\n                    selectionScope.currentSelection = {\n                        selected: selectionScope.selectedItems\n                    };\n                };\n\n                selectionScope.clearSelection = function() {\n                    selectionScope.currentSelection.selected = [];\n                };\n\n                // Cierra sy guarda los datos de nueva selección\n                selectionScope.applyFilter = function(type) {\n                    var customOql = selectionScope.selectionConfig.filterAction(selectionScope.currentSelection.selected, type);\n\n                    if (!angular.isUndefined(customOql) && customOql !== null) {\n                        $scope.filter.typeFilter = 0;\n                        Filter.parseQuery(customOql).then(function(data) {\n                            $scope.search.oql = customOql;\n                            $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\n                            $scope.unknownWords = '';\n                            $scope.filter_error = null;\n\n                            $scope.launchSearchingAdv();\n                        }).catch(function(err) {\n                            $scope.filter_error = err;\n                        });\n                    }\n                };\n\n                selectionScope.executeOperation = function(operationType) {\n                    if (!$scope.editMode) {\n                        $scope.$parent.$broadcast('widgetExecuteOperation', {\n                            'selectedItems': selectionScope.currentSelection.selected,\n                            'type': operationType\n                        });\n                    }\n                };\n\n                // Cierra sy guarda los datos de nueva selección\n                selectionScope.saveChangesDialog = function() {\n                    var finalSelection = {};\n                    angular.forEach(selectionScope.currentSelection.selected, function(data, idx) {\n                        finalSelection[data.key] = {\n                            data: data.value.data,\n                            visible: data.value.visible\n                        };\n                    });\n\n                    $scope.selectedItems = angular.copy(finalSelection);\n                    $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n\n                    $scope.selectionManager.lastItem = {};\n                    $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n\n                    instance.close();\n                    selectionScope.$destroy();\n                };\n\n                // Cierra sin realizar ninguna acción\n                selectionScope.closeDialog = function() {\n                    instance.close();\n                    selectionScope.$destroy();\n                };\n            };\n\n\n            // bind edit function\n            $scope.edit = function() {\n                var editScope = $scope.$new();\n                editScope.definition = angular.copy(definition);\n\n                var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\n                if (definition.editTemplateUrl) {\n                    adfEditTemplatePath = definition.editTemplateUrl;\n                }\n\n                var opts = {\n                    scope: editScope,\n                    templateUrl: adfEditTemplatePath,\n                    backdrop: 'static',\n                    size: 'lg'\n                };\n\n                var instance = $uibModal.open(opts);\n\n                editScope.closeDialog = function() {\n                    instance.close();\n                    editScope.$destroy();\n                };\n\n                // TODO create util method\n                function createApplyPromise(result) {\n                    var promise;\n                    if (typeof result === 'boolean') {\n                        var deferred = $q.defer();\n                        if (result) {\n                            deferred.resolve();\n                        } else {\n                            deferred.reject();\n                        }\n                        promise = deferred.promise;\n                    } else {\n                        promise = $q.when(result);\n                    }\n                    return promise;\n                }\n\n                editScope.saveDialog = function() {\n                    // clear validation error\n                    editScope.validationError = null;\n\n                    // build injection locals\n                    var widget = $scope.widget;\n\n                    // create a default apply method for widgets\n                    // without edit mode\n                    // see issue https://goo.gl/KHPQLZ\n                    var applyFn;\n                    if (widget.edit) {\n                        applyFn = widget.edit.apply;\n                    } else {\n                        applyFn = function() {\n                            return true;\n                        };\n                    }\n\n                    // injection locals\n                    var locals = {\n                        widget: widget,\n                        definition: editScope.definition,\n                        config: editScope.definition.config\n                    };\n\n                    // invoke apply function and apply if success\n                    var result = $injector.invoke(applyFn, applyFn, locals);\n                    createApplyPromise(result).then(function() {\n                        definition.title = editScope.definition.title;\n                        if (editScope.definition.type === 'summaryChart') {\n                            editScope.definition.Ftype = editScope.definition.config.type.toLowerCase();\n                            definition.Ftype = editScope.definition.config.type.toLowerCase()\n                        }\n                        angular.extend(definition.config, editScope.definition.config);\n\n                        editScope.closeDialog();\n\n                        if (widget.edit && widget.edit.reload) {\n                            $scope.setReloadTimeout();\n                            // reload content after edit dialog is closed\n                            $scope.$broadcast('widgetConfigChanged');\n                        }\n                    }, function(err) {\n                        if (err) {\n                            editScope.validationError = err;\n                        } else {\n                            editScope.validationError = 'VALIDATION_DURING_APPLY_FAILED';\n                        }\n                    });\n                };\n\n            };\n\n\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            templateUrl: adfTemplatePath + 'widget-grid.html',\n            scope: {\n                definition: '=',\n                editMode: '=',\n                options: '=',\n                widgetState: '='\n            },\n            controller: function($scope) {\n                var _setFilterType = function(selectFilter) {\n                    var config = $scope.config;\n                    var filter = config.filter = config.filter ? config.filter : {};\n                    var id = filter.id = selectFilter && filter.id;\n                    filter.headersFilter = selectFilter && config.filter.headersFilter;\n                    switch (filter.type) {\n                        case 'advanced':\n                            $scope.filter.typeFilter = id ? 2 : 0;\n                            $scope.search = {\n                                oql: filter.oql,\n                                json: filter.value\n                            };\n                            break;\n                        case 'basic':\n                            $scope.filter.typeFilter = id ? 2 : 1;\n                            $scope.search = {\n                                quick: filter.value\n                            };\n\n                            break;\n                        default:\n                            $scope.filter.typeFilter = id ? 2 : 1;\n                            $scope.search = {\n                                quick: filter.value = ''\n                            };\n                            break;\n                    }\n                    $scope.search.id = selectFilter;\n                };\n\n                this.updateWidgetFilters = function(filterId, configChange) {\n                    if ($scope.options && $scope.options.extraData && $scope.options.extraData.widgetFilters) {\n                        var _widgetFilters = $scope.options.extraData.widgetFilters;\n                        var model = $scope.definition;\n                        var selectFilter;\n                        var sharedFilters = _widgetFilters.filter(function(widgetFilter) {\n                            // Recuperamos solos los filtros de widgets que cumplan las condiciones:\n                            // - No tenga un filtro heredado como filtro\n                            // - El tipo de filtro sea igual que el widget que pueda heredarlo (Ftype)\n                            // - No recuperamos el filtro propio del widget  \n                            var shared = (!widgetFilter.filter || !widgetFilter.filter.id) && (widgetFilter.Ftype === model.Ftype) && (widgetFilter.wid !== model.wid);\n                            if (shared && (filterId === widgetFilter.wid))\n                                selectFilter = widgetFilter;\n                            return shared;\n                        });\n\n                        $scope.sharedFilters = angular.copy(sharedFilters);\n                        if (!configChange || !selectFilter && !!filterId)\n                            _setFilterType(selectFilter);\n                    }\n\n                };\n\n                var definition = $scope.definition;\n\n\n                if (definition.config.selectedItems) {\n                    $scope.selectedItemsLength = Object.keys(definition.config.selectedItems).length;\n                }\n\n\n                // Controlador de la barra inferior de los widgets\n                $scope.navOptionsHandler = {\n                    firstLoad: true,\n                    loadingData: false,\n                    startLoading: function() {\n                        $scope.navOptionsHandler.loadingData = true;\n                    },\n                    stopLoading: function() {\n                        $scope.navOptionsHandler.firstLoad = false;\n                        $scope.navOptionsHandler.loadingData = false;\n                        $scope.navOptionsHandler.lastMessageTime = new Date();\n                    },\n                    setStatusMessage: function(message) {\n                        $scope.navOptionsHandler.statusMessage = message;\n                        $scope.navOptionsHandler.lastMessageTime = new Date();\n                    }\n                };\n\n                // Controlador de los parámetros del filtro\n                $scope.filterHandler = {\n                    changeFilter: function(filter, search, typeFilter) {\n                        $scope.search = search;\n                        $scope.filter.typeFilter = typeFilter;\n                    }\n                };\n\n                // Controlador de las custom actions del widget\n                $scope.widgetActionsHandler = {\n                    actions: [],\n                    setActions: function(actions) {\n                        $scope.widgetActionsHandler.actions = actions;\n                    }\n                };\n\n                var adfDashboardCollapseExpand = $scope.$on('adfDashboardCollapseExpand', function(event, args) {\n                    $scope.widgetState.isCollapsed = args.collapseExpandStatus;\n                });\n\n                var adfWidgetEnterEditMode = $scope.$on('adfWidgetEnterEditMode', function(event, widget) {\n                    if (dashboard.idEquals(definition.wid, widget.wid)) {\n                        $scope.edit();\n                    }\n                });\n\n                var adfIsEditMode = $scope.$on('adfIsEditMode', function(event, widget) {\n                    $scope.editing = true;\n                });\n\n                var adfDashboardChanged = $scope.$on('adfDashboardChanged', function(event, name, model) {\n                    //config.widgetSelectors = tiene filtro\n                    var widgetConfigChanged = [];\n                    var grid = model.grid;\n                    if (grid && grid.length > 0) {\n                        grid.forEach(function(element) {\n                            var definition = element.definition;\n                            widgetConfigChanged.push(definition.wid);\n                        });\n                        var widgetFilters = $scope.options.extraData && $scope.options.extraData.widgetFilters;\n                        var sharedFilters = widgetFilters.filter(function(widgetFilter) {\n                            var filter = widgetFilter.filter;\n                            return filter && !filter.id || widgetConfigChanged.indexOf(filter.id) !== -1;\n                        });\n                        $scope.sharedFilters = angular.copy(sharedFilters);\n                        $scope.editing = false;\n                        $scope.$broadcast('widgetConfigChanged', widgetConfigChanged);\n                    }\n                });\n\n                var adfDashboardEditsCancelled = $scope.$on('adfDashboardEditsCancelled', function(event, widget) {\n                    $scope.editing = false;\n                });\n\n                $scope.openFullScreen = function() {\n\n                    $scope.$emit('adfOpenModalWidgetFromOther', definition.type, $scope.config);\n                };\n\n                $scope.openAboutScreen = function(size) {\n                    size = 'md';\n                    var modalInstance = $uibModal.open({\n                        animation: true,\n                        templateUrl: 'widgetAboutModal.html',\n                        controller: function($scope, $uibModalInstance, information) {\n                            $scope.about = {};\n                            $scope.about.info = information;\n                            $scope.ok = function() {\n                                $uibModalInstance.close();\n                            };\n                        },\n                        'size': size,\n                        resolve: {\n                            information: function() {\n                                return $scope.config.about;\n                            }\n                        }\n                    });\n\n                    modalInstance.result.then(function(selectedItem) {\n                        $scope.selected = selectedItem;\n                    }, function() {\n                        $log.info('Modal dismissed at: ' + new Date());\n                    });\n                };\n\n                $scope.saveWidgetScreen = function(wId) {\n                    $scope.$emit('generateSnapshot', {\n                        'objectSelector': '.widget_' + wId,\n                        'fileName': 'capture_' + new Date().getTime()\n                    });\n                };\n\n                var createQuickFilter = function(fieldsQuickSearch) {\n                    var _filter = {\n                        or: []\n                    };\n                    var criteria;\n                    fieldsQuickSearch.forEach(function(field) {\n                        criteria = {};\n                        criteria[field.operator] = {};\n                        criteria[field.operator][field.name] = $scope.config.filter.value;\n                        _filter.or.push(criteria);\n                    });\n                    return _filter;\n                };\n\n                $scope.downloadCsv = function() {\n                    var columns = $scope.config.columns;\n                    var scope_filter = $scope.config.filter;\n                    var extra_filter;\n                    var final_filter = {};\n                    var order = $scope.config.sort ? $scope.config.sort : undefined;\n                    if ($scope.config.windowFilter) {\n                        var window_filter = $scope.config.onWindowTimeChanged($scope.config.windowFilter);\n                        if (window_filter && window_filter.and) {\n                            extra_filter = {\n                                and: window_filter.and\n                            };\n                        }\n                    }\n                    var filter;\n                    if (scope_filter.type && scope_filter.type === 'advanced' && scope_filter.value.length > 4) {\n                        filter = JSON.parse(scope_filter.value);\n                    } else if (scope_filter.type && scope_filter.type === 'basic' && scope_filter.value.trim() !== '') {\n                        filter = createQuickFilter($scope.config.fieldsQuickSearch, scope_filter.value);\n                    }\n                    if (extra_filter) {\n                        if (filter) {\n                            final_filter = {\n                                and: [extra_filter, filter]\n                            };\n                        } else {\n                            final_filter = extra_filter;\n                        }\n                    } else {\n                        final_filter = filter;\n                    }\n                    $scope.$broadcast('downloadCsv', {\n                        'columns': columns,\n                        'filter': final_filter,\n                        'order': order\n                    });\n                };\n\n                $scope.generateQR = function() {\n                    $scope.$broadcast('generateQR');\n                };\n\n                var addItemToSelection = $scope.$on('addItemToSelection', function(event, item) {\n                    if (!$scope.selectedItems[item.key]) {\n                        $scope.selectedItems[item.key] = {\n                            data: item.data,\n                            visible: item.visible\n                        };\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n                        item.isSelected = true;\n                        $scope.selectionManager.lastItem = item;\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n                    }\n\n                });\n\n                var removeItemFromSelection = $scope.$on('removeItemFromSelection', function(event, item) {\n                    if ($scope.selectedItems[item.key]) {\n                        delete $scope.selectedItems[item.key];\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n                        item.isSelected = false;\n                        $scope.selectionManager.lastItem = item;\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n                    }\n                });\n\n                // bind reload function\n                var stopReloadTimeout;\n\n                $scope.setReloadTimeout = function() {\n                    var config = $scope.config || $scope.definition.config;\n\n                    if (config) {\n                        var reloadPeriod = config.reloadPeriod;\n                        if (!isNaN(reloadPeriod) && (reloadPeriod * 1) !== 0) {\n                            if (angular.isDefined(stopReloadTimeout)) {\n                                $interval.cancel(stopReloadTimeout);\n                                stopReloadTimeout = undefined;\n                            }\n                            stopReloadTimeout = $interval($scope.reload, (reloadPeriod * 1000));\n                        } else if (stopReloadTimeout) {\n                            $interval.cancel(stopReloadTimeout);\n                        }\n                    }\n                };\n\n                $scope.reload = function() {\n                    $scope.$broadcast('widgetReload');\n\n                    $scope.setReloadTimeout();\n                };\n\n                // verificacion de periodo de refresco\n                $scope.setReloadTimeout();\n\n                $scope.$on('$destroy', function() {\n                    adfDashboardCollapseExpand();\n                    adfWidgetEnterEditMode();\n                    adfIsEditMode();\n                    adfDashboardChanged();\n                    adfDashboardEditsCancelled();\n                    addItemToSelection();\n                    removeItemFromSelection();\n                    $interval.cancel(stopReloadTimeout);\n                });\n            },\n            compile: function() {\n\n                /**\n                 * use pre link, because link of widget-content\n                 * is executed before post link widget\n                 */\n                return {\n                    pre: preLink,\n                    post: postLink\n                };\n            }\n        };\n\n    });","\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/**\n * The widget service provide helper functions to render widgets and their content.\n */\nangular.module('adf')\n  .factory('widgetService', function($http, $q, $sce, $templateCache, dashboard) {\n    'use strict';\n\n    function parseUrl(url) {\n      var parsedUrl = url;\n      if (url.indexOf('{widgetsPath}') >= 0) {\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\n                .replace('//', '/');\n        if (parsedUrl.indexOf('/') === 0) {\n          parsedUrl = parsedUrl.substring(1);\n        }\n      }\n      return parsedUrl;\n    }\n\n    var exposed = {};\n\n    exposed.getTemplate = function(widget){\n      var deferred = $q.defer();\n\n      if (widget.template) {\n        deferred.resolve(widget.template);\n      } else if (widget.templateUrl) {\n        // try to fetch template from cache\n        var tpl = $templateCache.get(widget.templateUrl);\n        if (tpl) {\n          deferred.resolve(tpl);\n        } else {\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\n          $http.get(url)\n               .success(function(response) {\n                 // put response to cache, with unmodified url as key\n                 $templateCache.put(widget.templateUrl, response);\n                 deferred.resolve(response);\n               })\n               .error(function() {\n                 deferred.reject('could not load template');\n               });\n        }\n      }\n\n      return deferred.promise;\n    };\n\n    return exposed;\n  });\n",null,"(function(window, undefined) {'use strict';\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf', ['adf.provider', 'ui.bootstrap', 'opengate-angular-js'])\n    .value('adfTemplatePath', '../src/templates/')\n    .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\n    .value('adfVersion', '7.1.1');\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @ngdoc directive\n * @name adf.directive:adfDashboard\n * @element div\n * @restrict EA\n * @scope\n * @description\n *\n * `adfDashboard` is a directive which renders the dashboard with all its\n * components. The directive requires a name attribute. The name of the\n * dashboard can be used to store the model.\n *\n * @param {string} name name of the dashboard. This attribute is required.\n * @param {boolean=} editable false to disable the editmode of the dashboard.\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\n * @param {object=} adfModel model object of the dashboard.\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\n *                   events during edit mode not reset it if edit mode is exited.\n * @param {boolean=} categories enable categories for the add widget dialog.\n */\n\nangular.module('adf')\n    .directive('adfDashboard', function($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath, $faIcons, $translate, Upload) {\n        \n\n        function stringToBoolean(string) {\n            switch (angular.isDefined(string) ? string.toLowerCase() : null) {\n                case 'true':\n                case 'yes':\n                case '1':\n                    return true;\n                case 'false':\n                case 'no':\n                case '0':\n                case null:\n                    return false;\n                default:\n                    return Boolean(string);\n            }\n        }\n\n        function createConfiguration(type) {\n            var cfg = {};\n            var config = dashboard.widgets[type].config;\n            if (config) {\n                cfg = angular.copy(config);\n            }\n            return cfg;\n        }\n\n        function createWidget(type) {\n            var wdgt = {};\n            var widget = dashboard.widgets[type];\n            if (widget) {\n                wdgt = angular.copy(widget);\n            }\n            return wdgt;\n        }\n\n        /**\n         * Adds the widget to first column of the model.\n         *\n         * @param dashboard model\n         * @param widget to add to model\n         * @param name name of the dashboard\n         */\n        function addNewWidgetToModel(model, widget, name, forceToSave) {\n            if (model) {\n                if (!model.grid) {\n                    model.grid = [];\n                }\n\n                var newWidget = {\n                    width: 3,\n                    height: 2,\n                    x: 0,\n                    y: 0,\n                    definition: widget\n                };\n                model.grid.push(newWidget);\n\n                $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\n\n                if (forceToSave) {\n                    $rootScope.$broadcast('adfDashboardChanged', name, model);\n                }\n            } else {\n                $log.error('model is undefined');\n            }\n        }\n\n        /**\n         * Checks if the edit mode of the widget should be opened immediately.\n         *\n         * @param widget type\n         */\n        function isEditModeImmediate(type) {\n            var widget = dashboard.widgets[type];\n            return widget && widget.edit && widget.edit.immediate;\n        }\n\n        /**\n         * Opens the edit mode of the specified widget.\n         *\n         * @param dashboard scope\n         * @param widget\n         */\n        function openEditMode($scope, widget) {\n            // wait some time before fire enter edit mode event\n            $timeout(function() {\n                $scope.$broadcast('adfWidgetEnterEditMode', widget);\n            }, 200);\n        }\n\n        /**\n         * Creates object with the category name as key and an array of widgets as value.\n         *\n         * @param widgets array of widgets\n         *\n         * @return array of categories\n         */\n        function createCategories(widgets) {\n            var categories = {};\n            angular.forEach(widgets, function(widget, key) {\n                var category = widget.category;\n                // if the widget has no category use a default one\n                if (!category) {\n                    category = 'ADF.CATEGORY.MISCELANOUS';\n                }\n\n                widget.title = $translate.instant(widget.title);\n                widget.description = $translate.instant(widget.description);\n                widget.category = $translate.instant(widget.category);\n\n                // push widget to category array\n                if (angular.isUndefined(categories[widget.category])) {\n                    categories[widget.category] = {\n                        widgets: {}\n                    };\n                }\n\n                categories[widget.category].widgets[key] = widget;\n            });\n            return categories;\n        }\n\n        function createCategoriesList(widgets) {\n            var categories = [];\n            angular.forEach(widgets, function(widget, key) {\n                if (!widget.category) {\n                    widget.category = 'ADF.CATEGORY.MISCELLANEOUS';\n                }\n\n                widget.title = $translate.instant(widget.title);\n                widget.description = $translate.instant(widget.description);\n                widget.category = $translate.instant(widget.category);\n\n                if (!widget.categoryTags) {\n                    widget.categoryTags = 'ADF.CATEGORY.TAG.MISCELLANEOUS';\n                }\n\n                var categoriesTmp = widget.categoryTags.split(',');\n\n                angular.forEach(categoriesTmp, function(category, idx) {\n                    // push widget to category array\n                    var translatedCat = $translate.instant(category);\n                    if (categories.indexOf(translatedCat) === -1)\n                        categories.push(translatedCat);\n                });\n\n            });\n            return categories;\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            scope: {\n                name: '@',\n                collapsible: '@',\n                editable: '@',\n                editMode: '@',\n                continuousEditMode: '=',\n                maximizable: '@',\n                adfModel: '=',\n                adfWidgetFilter: '=',\n                categories: '@',\n                hideButtons: '=',\n                extraData: '='\n            },\n            controller: function($scope) {\n                var model = {};\n                var widgetFilter = null;\n                var name = $scope.name;\n\n                var _getReloadWidgets = function(widget) {\n                    var reloadWidgets = {\n                        configChange: [],\n                        reload: []\n                    };\n                    if (widget) {\n                        var definition = angular.copy(widget.definition);\n                        var ftype = definition.Ftype;\n                        var id = definition.wid;\n                        var config = definition.config;\n                        if (config) {\n                            var filter = config.filter;\n                            model.grid.forEach(function(w) {\n                                var f = w.definition.config.filter;\n                                var ft = w.definition.Ftype;\n                                //solo recargamos y actualizamos los widgets:\n                                // - que tengan filtro\n                                // y que el id tenga filtro\n                                // y que el id del filtro coincida con el wid del widget que ha modificado el fitro\n                                if (f && f.id && f.id === id) {\n                                    w.definition.config.filter = filter;\n                                    w.definition.config.filter.id = id;\n                                    reloadWidgets.reload.push(w.definition.wid);\n                                } else if (ftype === ft) {\n                                    reloadWidgets.configChange.push(w.definition.wid);\n                                }\n                            });\n                        }\n                    }\n                    return reloadWidgets;\n                };\n\n                var updateWidgetFilters = function(model) {\n                    var widgetFilters = [];\n                    var grid = model.grid;\n                    if (grid && grid.length > 0) {\n                        grid.forEach(function(element) {\n                            var definition = element.definition;\n                            var config = definition.config;\n                            var filter = config.filter;\n                            widgetFilters.push({\n                                wid: definition.wid,\n                                title: definition.title,\n                                filter: filter,\n                                Ftype: definition.Ftype\n                            });\n                        });\n                    }\n                    if (!$scope.options) {\n                        $scope.options = {\n                            extraData: {}\n                        };\n                    }\n                    $scope.options.extraData.widgetFilters = widgetFilters;\n                };\n                // Watching for changes on adfModel\n                $scope.$watch('adfModel', function(oldVal, newVal) {\n                    // has model changed or is the model attribute not set\n                    if (newVal !== null || (oldVal === null && newVal === null)) {\n                        model = $scope.adfModel;\n                        widgetFilter = $scope.adfWidgetFilter;\n\n                        if (model) {\n                            updateWidgetFilters(model);\n                            if (!model.title) {\n                                model.title = $translate.instant('ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD');\n                            }\n                            if (!model.titleTemplateUrl) {\n                                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\n                            }\n                            $scope.model = model;\n                        } else {\n                            $log.error('could not find or create model');\n                        }\n                    }\n                }, true);\n\n                // edit mode\n                $scope.editMode = false;\n\n                function getNewModalScope() {\n                    var scope = $scope.$new();\n                    return scope;\n                }\n\n                $scope.toggleEditMode = function(openConfigWindow) {\n                    $scope.editMode = !$scope.editMode;\n                    if ($scope.editMode) {\n                        if (!$scope.continuousEditMode) {\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\n                            $rootScope.$broadcast('adfIsEditMode');\n                        }\n\n                        if (openConfigWindow) {\n                            $scope.editDashboardDialog();\n                        }\n                    }\n\n                    if (!$scope.editMode) {\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\n                    }\n                };\n\n                var adfToggleEditMode = $scope.$on('adfToggleEditMode', function(event, isNewDashboard) {\n                    if (isNewDashboard) {\n                        $scope.toggleEditMode(true);\n                    } else {\n                        $scope.toggleEditMode();\n                    }\n                });\n\n                var adfCancelEditMode = $scope.$on('adfCancelEditMode', function(event) {\n                    if ($scope.editMode) {\n                        $scope.cancelEditMode();\n                    }\n                });\n\n                var adfWidgetRemoved = $scope.$on('adfWidgetRemovedFromGrid', function(event, widget) {\n                    var index = null;\n                    angular.forEach($scope.adfModel.grid, function(widgetTmp, idx) {\n                        if (widgetTmp.definition.wid === widget.wid) {\n                            index = idx;\n                        }\n                    });\n\n                    if (index >= 0) {\n                        $scope.adfModel.grid.splice(index, 1);\n                    }\n                });\n\n                $scope.cancelEditMode = function() {\n                    $scope.editMode = false;\n                    if (!$scope.continuousEditMode && ($scope.modelCopy !== $scope.adfModel)) {\n                        $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\n                    }\n                    $rootScope.$broadcast('adfDashboardEditsCancelled');\n                };\n\n                var adfEditDashboardDialog = $scope.$on('adfEditDashboardDialog', function(event) {\n                    if ($scope.editMode) {\n                        $scope.editDashboardDialog();\n                    }\n                });\n\n\n                var adfLaunchSearchingFromWidget = $scope.$on('adfLaunchSearchingFromWidget', function(event, widget) {\n                    var reloadWidgets = _getReloadWidgets(widget);\n                    $rootScope.$broadcast('adfFilterChanged', name, model, reloadWidgets);\n                });\n                var adfWindowTimeChangedFromWidget = $scope.$on('adfWindowTimeChangedFromWidget', function(event) {\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\n                });\n\n                // edit dashboard settings\n                $scope.editDashboardDialog = function() {\n                    var editDashboardScope = getNewModalScope();\n                    // create a copy of the title, to avoid changing the title to\n                    // \"dashboard\" if the field is empty\n                    editDashboardScope.copy = {\n                        title: (model.title !== 'ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD' ? model.title : ''),\n                        description: model.description,\n                        backgroundColor: model.backgroundColor ? model.backgroundColor : undefined,\n                        time: new Date(),\n                        backgroundImage: model.backgroundImage ? model.backgroundImage : undefined,\n                        file: model.backgroundImage ? model.backgroundImage : undefined,\n                    };\n\n                    editDashboardScope.backgroundSize = {\n                        name: 'backgroundSize',\n                        model: model.backgroundImageSize ? model.backgroundImageSize : '100% 100%',\n                        options: {\n                            '100% 100%': {\n                                title: $translate.instant('SIZE_CONF.AUTO')\n                            },\n                            'contain': {\n                                title: $translate.instant('SIZE_CONF.CONTAIN')\n                            },\n                            'cover': {\n                                title: $translate.instant('SIZE_CONF.COVER')\n                            }\n                        }\n                    };\n\n                    editDashboardScope.iconConfiguration = {\n                        name: 'iconConfiguration',\n                        model: model.iconType ? model.iconType : 'icon',\n                        url: undefined,\n                        file: undefined,\n                        iconType: model.iconType ? model.iconType : 'icon',\n                        icon: model.iconType === 'icon' ? model.icon : 'fa-tachometer',\n                        options: {\n                            'icon': {\n                                title: $translate.instant('ICON.LIBRARY'),\n                            },\n                            'image': {\n                                title: $translate.instant('ICON.IMAGE')\n                            }\n                        }\n                    };\n                    if (editDashboardScope.iconConfiguration.iconType === 'image') {\n                        editDashboardScope.iconConfiguration.file = model.icon;\n                        editDashboardScope.iconConfiguration.url = model.icon;\n                    }\n                    editDashboardScope.imageSelected = function(file) {\n                        if (file) {\n                            editDashboardScope.iconConfiguration.file = file;\n                            Upload.base64DataUrl(file).then(\n                                function(url) {\n                                    editDashboardScope.iconConfiguration.url = url;\n                                    editDashboardScope.iconConfiguration.file = url;\n                                    editDashboardScope.iconConfiguration.iconType = 'image'\n\n                                });\n                        } else {\n                            editDashboardScope.removeDataFile();\n                        }\n                    };\n                    editDashboardScope.backgroundImageSelected = function(file) {\n                        if (file) {\n                            editDashboardScope.iconConfiguration.file = file;\n                            Upload.base64DataUrl(file).then(\n                                function(url) {\n                                    editDashboardScope.copy.backgroundImage = url;\n                                    editDashboardScope.copy.file = url;\n\n                                });\n                        } else {\n                            editDashboardScope.removeBackgroundFile();\n                        }\n                    };\n                    editDashboardScope.removeDataFile = function() {\n                        editDashboardScope.iconConfiguration.file = null;\n                        editDashboardScope.iconConfiguration.url = null;\n                    };\n                    editDashboardScope.removeBackgroundFile = function() {\n                        editDashboardScope.copy.backgroundImage = null;\n                        editDashboardScope.copy.file = null;\n\n                    };\n                    // pass icon list\n                    editDashboardScope.availableIcons = $faIcons.list();\n\n                    var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\n                    if (model.editTemplateUrl) {\n                        adfEditTemplatePath = model.editTemplateUrl;\n                    }\n                    var instance = $uibModal.open({\n                        scope: editDashboardScope,\n                        templateUrl: adfEditTemplatePath,\n                        backdrop: 'static',\n                        keyboard: false,\n                        size: 'lg'\n                    });\n\n\n                    editDashboardScope.closeDialog = function() {\n                        // copy the new title back to the model\n                        model.title = editDashboardScope.copy.title;\n                        model.description = editDashboardScope.copy.description;\n                        if (editDashboardScope.iconConfiguration.model === 'image') {\n                            model.icon = editDashboardScope.iconConfiguration.url;\n\n                        } else if (editDashboardScope.iconConfiguration.model === 'icon') {\n                            model.icon = editDashboardScope.iconConfiguration.icon;\n\n                        }\n                        model.iconType = editDashboardScope.iconConfiguration.model;\n                        model.backgroundColor = editDashboardScope.copy.backgroundColor ? editDashboardScope.copy.backgroundColor : undefined;\n                        model.backgroundImage = editDashboardScope.copy.backgroundImage ? editDashboardScope.copy.backgroundImage : undefined;\n                        model.backgroundImageSize = editDashboardScope.backgroundSize.model;\n                        // close modal and destroy the scope\n                        instance.close();\n                        editDashboardScope.$destroy();\n                    };\n                };\n\n                var adfOpenWidgetFromOther = $scope.$on('adfOpenWidgetFromOther', function(event, widget, config) {\n\n                    var internal_config = createConfiguration(widget);\n                    var _config = angular.merge({}, internal_config, config);\n                    var w = {\n                        type: widget,\n                        config: _config,\n                        title: _config.title\n                    };\n                    addNewWidgetToModel(model, w, name, !$scope.editMode);\n                });\n\n                var adfOpenModalWidgetFromOther = $scope.$on('adfOpenModalWidgetFromOther', function(event, widgetType, config) {\n                    var templateUrl = adfTemplatePath + 'widget-fullscreen.html';\n                    if (config.sendSelection) {\n                        templateUrl = adfTemplatePath + 'widget-fullscreen-selection.html';\n                    }\n                    var widget = createWidget(widgetType);\n                    widget.config = angular.merge({}, widget.config, config);\n                    widget.type = widgetType;\n                    if (widget.config.title) {\n                        widget.title = widget.config.title;\n                    }\n                    var fullScreenScope = $scope.$new();\n                    fullScreenScope.definition = fullScreenScope.widget = widget;\n                    var opts = {\n                        scope: fullScreenScope,\n                        templateUrl: templateUrl,\n                        size: fullScreenScope.definition.modalSize || 'el',\n                        backdrop: 'static',\n                        windowClass: (fullScreenScope.definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n                    };\n\n                    if ($scope.model && !$scope.model.temporal) {\n                        fullScreenScope.persistDashboard = function() {\n                            $rootScope.$broadcast('adfOpenWidgetFromOther', this.$parent.widget.type, this.$parent.widget.config);\n                            this.closeDialog();\n                        };\n                    }\n\n                    var instance = $uibModal.open(opts);\n                    fullScreenScope.closeDialog = function() {\n                        instance.close();\n                        fullScreenScope.$destroy();\n                    };\n\n\n                });\n\n                var adfAddWidgetDialog = $scope.$on('adfAddWidgetDialog', function(event) {\n                    if (!model.temporal && model.editable) {\n                        if (!$scope.editMode) {\n                            $scope.editMode = true;\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\n                            $rootScope.$broadcast('adfIsEditMode');\n                        }\n\n                        $scope.addWidgetDialog();\n                    }\n                });\n\n                // add widget dialog\n                $scope.addScopeCfg = {\n                    widgetFilter: {},\n                    widgetSortingDirection: '',\n                    widgetSorting: 'priority'\n                };\n\n                $scope.addWidgetDialog = function() {\n                    var addScope = getNewModalScope();\n                    var widgets;\n                    if (angular.isFunction(widgetFilter)) {\n                        widgets = {};\n                        angular.forEach(dashboard.widgets, function(widget, type) {\n                            if (widgetFilter(widget, type, model)) {\n                                widgets[type] = widget;\n                            }\n                        });\n                    } else {\n                        widgets = dashboard.widgets;\n                    }\n                    addScope.widgets = widgets;\n\n                    angular.forEach(addScope.widgets, function(widget, type) {\n                        widget.key = type;\n                        if (!widget.category) {\n                            widget.category = 'Miscellaneous';\n                        }\n                    });\n\n                    // pass createCategories function to scope, if categories option is enabled\n                    if ($scope.options.categories) {\n                        addScope.createCategories = createCategories;\n                    } else {\n                        addScope.availableCategories = createCategoriesList(widgets);\n                    }\n\n                    var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\n                    if (model.addTemplateUrl) {\n                        adfAddTemplatePath = model.addTemplateUrl;\n                    }\n\n                    var opts = {\n                        scope: addScope,\n                        templateUrl: adfAddTemplatePath,\n                        backdrop: 'static',\n                        size: 'lg'\n                    };\n\n                    var instance = $uibModal.open(opts);\n\n                    addScope.widgetFilterCfg = $scope.addScopeCfg;\n\n                    addScope.addWidget = function(widget) {\n                        var w = {\n                            type: widget,\n                            Ftype: dashboard.widgets[widget].Ftype || null,\n                            config: createConfiguration(widget)\n                        };\n                        addNewWidgetToModel(model, w, name);\n                        // close and destroy\n                        instance.close();\n                        addScope.$destroy();\n\n                        // check for open edit mode immediately\n                        if (isEditModeImmediate(widget)) {\n                            openEditMode($scope, w);\n                        }\n                    };\n\n                    addScope.changeThumbnail = function(widget) {\n                        if (widget.images) {\n                            if (angular.isUndefined(widget._currThumb)) {\n                                widget._currThumb = 1;\n                            } else {\n                                widget._currThumb += 1;\n                            }\n\n\n                            if (widget._currThumb >= widget.images.length) {\n                                widget._currThumb = 0;\n                            }\n\n                            widget._currImg = widget.images[widget._currThumb];\n                        }\n                    };\n\n                    addScope.closeDialog = function() {\n                        // close and destroy\n                        instance.close();\n                        addScope.$destroy();\n                    };\n                };\n\n                $scope.addNewWidgetToModel = addNewWidgetToModel;\n\n                $scope.$on('destroy', function() {\n                    adfLaunchSearchingFromWidget();\n                    adfWindowTimeChangedFromWidget();\n                    adfToggleEditMode();\n                    adfOpenWidgetFromOther();\n                    adfOpenModalWidgetFromOther();\n                    adfCancelEditMode();\n                    adfAddWidgetDialog();\n                    adfEditDashboardDialog();\n                    adfWidgetRemoved();\n                });\n            },\n            link: function($scope, $element, $attr) {\n                // pass options to scope\n                var options = {\n                    name: $attr.name,\n                    editable: true,\n                    enableConfirmDelete: stringToBoolean($attr.enableConfirmDelete),\n                    maximizable: stringToBoolean($attr.maximizable),\n                    collapsible: stringToBoolean($attr.collapsible),\n                    categories: stringToBoolean($attr.categories),\n                    extraData: {}\n                };\n\n                if (angular.isDefined($attr.editable)) {\n                    options.editable = stringToBoolean($attr.editable);\n                }\n\n                if (angular.isDefined($scope.extraData)) {\n                    options.extraData = $scope.extraData;\n                }\n\n                options.extraData.editing = $scope.editMode;\n\n                $scope.options = options;\n            },\n            templateUrl: adfTemplatePath + 'dashboard.html'\n        };\n    });\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the 'Software'), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/* global angular */\nangular.module('adf')\n    .directive('adfDashboardGrid', function(adfTemplatePath) {\n        \n\n        function preLink($scope) {\n            $scope.gridOptions = {\n                cellHeight: 146,\n                verticalMargin: 10,\n                animate: true,\n                float: false,\n                alwaysShowResizeHandle: true,\n                minWidth: 768,\n                auto: true,\n                resizable: {\n                    handles: 'e, se, s, sw, w'\n                },\n                disableDrag: !$scope.editMode,\n                disableResize: !$scope.editMode\n            };\n\n            $scope.gsHandler = null;\n        }\n\n        return {\n            restrict: 'E',\n            scope: {\n                adfModel: '=',\n                editMode: '=',\n                continuousEditMode: '=',\n                options: '='\n            },\n            templateUrl: adfTemplatePath + 'dashboard-grid.html',\n            compile: function() {\n                return {\n                    pre: preLink,\n                };\n            },\n            controller: function($scope, $timeout) {\n                var dashEvents = [];\n                dashEvents.push($scope.$on('adfIsEditMode', function() {\n                    $timeout(function() {\n                        $scope.gsHandler.enable();\n                    }, 100);\n                }));\n\n                dashEvents.push($scope.$on('adfDashboardChanged', function() {\n                    $timeout(function() {\n                        $scope.gsHandler.disable();\n                    }, 100);\n                }));\n\n                dashEvents.push($scope.$on('adfDashboardEditsCancelled', function() {\n                    $timeout(function() {\n                        $scope.gsHandler.disable();\n                    }, 100);\n                }));\n\n                dashEvents.push($scope.$on('adfCancelEditMode', function() {\n                    $timeout(function() {\n                        $scope.gsHandler.disable();\n                    }, 100);\n                }));\n\n                dashEvents.push($scope.$on('adfWidgetAdded', function(event) {\n                    $timeout(function() {\n                        $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\n                        $scope.gsHandler.enable();\n                    }, 100);\n                }));\n\n                $scope.onChange = function(event, items) {\n                    //console.log('onChange event: ' + event + ' items:' + items);\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\n                };\n\n                $scope.onDragStart = function(event, ui) {\n                    console.log('onDragStart event: ' + event + ' ui:' + ui);\n                };\n\n                $scope.onDragStop = function(event, ui) {\n                    console.log('onDragStop event: ' + event + ' ui:' + ui);\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\n                };\n\n                $scope.onResizeStart = function(event, ui) {\n                    console.log('onResizeStart event: ' + event + ' ui:' + ui);\n                };\n\n                $scope.onResizeStop = function(event, ui) {\n                    console.log('onResizeStop event: ' + event + ' ui:' + ui);\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\n                    $scope.$broadcast('OnResizeWidget');\n                };\n\n                $scope.onItemAdded = function(item) {\n                    console.log('onItemAdded item: ' + item);\n                };\n\n                $scope.onItemRemoved = function(item) {\n                    console.log('onItemRemoved item: ' + item);\n                };\n\n                $scope.$on('destroy', function() {\n                    dashEvents.forEach(function(dashEvt) {\n                        dashEvt();\n                    });\n                });\n            }\n        };\n    });\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .filter('adfOrderByObjectKey', function($filter) {\n    \n\n    return function(item, key){\n      var array = [];\n      angular.forEach(item, function(value, objectKey){\n        value[key] = objectKey;\n        array.push(value);\n      });\n      return $filter('orderBy')(array, key);\n    };\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\n/**\n * @ngdoc object\n * @name adf.dashboardProvider\n * @description\n *\n * The dashboardProvider can be used to register widgets.\n */\nangular.module('adf.provider', [])\n    .provider('dashboard', function() {\n\n        var widgets = {};\n        var widgetsPath = '';\n        var messageTemplate = '<div class=\"alert alert-primary\">{}</div>';\n        var loadingTemplate = '\\\n      <div class=\"progress progress-striped active\">\\n\\\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\n          <span class=\"sr-only\" translate>FORM.MSG.LOADING ...</span>\\n\\\n        </div>\\n\\\n      </div>';\n        var customWidgetTemplatePath = null;\n\n        // default apply function of widget.edit.apply\n        var defaultApplyFunction = function() {\n            return true;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#widget\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Registers a new widget.\n         *\n         * @param {string} name of the widget\n         * @param {object} widget to be registered.\n         *\n         *   Object properties:\n         *\n         *   - `title` - `{string=}` - The title of the widget.\n         *   - `description` - `{string=}` - Description of the widget.\n         *   - `category` - `{string=}` - Category of the widget.\n         *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\n         *   - `config` - `{object}` - Predefined widget configuration.\n         *   - `controller` - `{string=|function()=}` - Controller fn that should be\n         *      associated with newly created scope of the widget or the name of a\n         *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\n         *      if passed as a string.\n         *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\n         *      published to scope under the `controllerAs` name.\n         *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\n         *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\n         *   - `template` - `{string=|function()=}` - html template as a string.\n         *   - `templateUrl` - `{string=}` - path to an html template.\n         *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\n         *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n         *      be injected into the controller. If any of these dependencies are promises, the widget\n         *      will wait for them all to be resolved or one to be rejected before the controller is\n         *      instantiated.\n         *      If all the promises are resolved successfully, the values of the resolved promises are\n         *      injected.\n         *\n         *      The map object is:\n         *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n         *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n         *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\n         *        and the return value is treated as the dependency. If the result is a promise, it is\n         *        resolved before its value is injected into the controller.\n         *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n         *      on the scope of the widget.\n         *   - `edit` - `{object}` - Edit modus of the widget.\n         *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n         *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\n         *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n         *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\n         *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\n         *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n         *        on the scope of the widget.\n         *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\n         *        Default is true.\n         *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\n         *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\n         *        The function have to return a boolean or an promise which can be resolved to a boolean.\n         *        The function can use injection.\n         *\n         * @returns {Object} self\n         */\n        this.widget = function(name, widget) {\n            var w = angular.extend({\n                reload: false,\n                frameless: false\n            }, widget);\n            if (w.edit) {\n                var edit = {\n                    reload: true,\n                    immediate: false,\n                    apply: defaultApplyFunction\n                };\n                angular.extend(edit, w.edit);\n                w.edit = edit;\n            }\n            widgets[name] = w;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#widgetsPath\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Sets the path to the directory which contains the widgets. The widgets\n         * path is used for widgets with a templateUrl which contains the\n         * placeholder {widgetsPath}. The placeholder is replaced with the\n         * configured value, before the template is loaded, but the template is\n         * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\n         * The default value of widgetPaths is ''.\n         *\n         *\n         * @param {string} path to the directory which contains the widgets\n         *\n         * @returns {Object} self\n         */\n        this.widgetsPath = function(path) {\n            widgetsPath = path;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#messageTemplate\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the template for messages.\n         *\n         * @param {string} template for messages.\n         *\n         * @returns {Object} self\n         */\n        this.messageTemplate = function(template) {\n            messageTemplate = template;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#loadingTemplate\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the template which is displayed as\n         * long as the widget resources are not resolved.\n         *\n         * @param {string} template loading template\n         *\n         * @returns {Object} self\n         */\n        this.loadingTemplate = function(template) {\n            loadingTemplate = template;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#customWidgetTemplatePath\n         * @propertyOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the container template for the widgets\n         *\n         * @param {string} path to the custom widget template\n         *\n         * @returns {Object} self\n         */\n        this.customWidgetTemplatePath = function(templatePath) {\n            customWidgetTemplatePath = templatePath;\n            return this;\n        };\n\n        /**\n         * @ngdoc service\n         * @name adf.dashboard\n         * @description\n         *\n         * The dashboard holds all options and  widgets.\n         *\n         * @property {Array.<Object>} widgets Array of registered widgets.\n         * @property {string} widgetsPath Default path for widgets.\n         * @property {string} messageTemplate Template for messages.\n         * @property {string} loadingTemplate Template for widget loading.\n         * * @property {string} customWidgetTemplatePath Changes the container template for the widgets\n         *\n         * @returns {Object} self\n         */\n        this.$get = function() {\n            var cid = 0;\n\n            return {\n                widgets: widgets,\n                widgetsPath: widgetsPath,\n                messageTemplate: messageTemplate,\n                loadingTemplate: loadingTemplate,\n                customWidgetTemplatePath: customWidgetTemplatePath,\n\n                /**\n                 * @ngdoc method\n                 * @name adf.dashboard#id\n                 * @methodOf adf.dashboard\n                 * @description\n                 *\n                 * Creates an ongoing numeric id. The method is used to create ids for\n                 * columns and widgets in the dashboard.\n                 */\n                id: function() {\n                    return new Date().getTime() + '-' + (++cid);\n                },\n\n                /**\n                 * @ngdoc method\n                 * @name adf.dashboard#idEqual\n                 * @methodOf adf.dashboard\n                 * @description\n                 *\n                 * Checks if the given ids are equal.\n                 *\n                 * @param {string} id widget or column id\n                 * @param {string} other widget or column id\n                 */\n                idEquals: function(id, other) {\n                    // use toString, because old ids are numbers\n                    return ((id) && (other)) && (id.toString() === other.toString());\n                }\n            };\n        };\n\n    });\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf')\n    .directive('adfWidgetContent', function($log, $q, widgetService,\n        $compile, $controller, $injector, dashboard, $translate) {\n\n        function renderError($element, msg) {\n            $log.warn(msg);\n            $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\n        }\n\n        function compileWidget($scope, $element, currentScope, configChanged) {\n            var model = $scope.model;\n            if (!model) {\n                $translate('ADF.ERROR.MODEL_IS_UNDEFINED').then(function(translateMessage) {\n                    renderError($element, translateMessage);\n                });\n                return currentScope;\n            }\n\n            var content = $scope.content;\n\n            if (!content) {\n                $translate('ADF.ERROR.WIDGET_FOR_DEPRECTATED', {\n                    title: model.title\n                }).then(function(translateMessage) {\n                    renderError($element, translateMessage);\n                });\n                return currentScope;\n            }\n\n            var extra = $scope.extra;\n            var newScope = currentScope;\n\n            if (newScope) {\n                var is_menu = newScope.menu !== undefined && newScope.menu !== null && (!newScope.isPaginationEnable || !newScope.isPaginationEnable());\n                if (is_menu || configChanged || !angular.isFunction(newScope.reloadData)) {\n                    if ($scope.navOptionsHandler) {\n                        $scope.navOptionsHandler.firstLoad = true;\n                    }\n                    newScope = renderWidget($scope, $element, currentScope, model, content, extra);\n                } else {\n                    var is_itemsPerPage = newScope.itemsPerPage !== undefined && newScope.itemsPerPage !== null;\n                    if (is_itemsPerPage || newScope.page) {\n                        newScope.page = 1;\n                    }\n                    newScope.reloadData();\n                }\n            } else {\n                if ($scope.navOptionsHandler) {\n                    $scope.navOptionsHandler.firstLoad = true;\n                }\n\n                newScope = renderWidget($scope, $element, currentScope, model, content, extra);\n            }\n\n            function _getWindowTime(type) {\n                if (type === 'custom') {\n                    return {\n                        from: newScope.config.windowFilter.from,\n                        to: newScope.config.windowFilter.to\n                    };\n                }\n                var from = window.moment().subtract(1, type);\n                return {\n                    from: from._d\n                };\n            }\n\n\n            if (newScope.config) {\n                newScope.config.getWindowTime = function() {\n                    var windowFilter = newScope.config.windowFilter;\n                    if (windowFilter && windowFilter.type) {\n                        var winTime = _getWindowTime(windowFilter.type);\n                        /* jshint ignore:start */\n                        if (!window.eval(newScope.config.windowFilter.rawdate)) {\n                            for (var key in winTime) {\n                                winTime[key] = window.moment(winTime[key]).format();\n                            }\n                            winTime['rawdate'] = true;\n                        }\n                        /* jshint ignore:end */\n                        return winTime;\n                    }\n                };\n            }\n\n            if (extra) {\n                newScope.editing = extra.editing ? true : false;\n                newScope.extraData = extra;\n            }\n\n            return newScope;\n        }\n\n        function renderWidget($scope, $element, currentScope, model, content, extra) {\n            // display loading template\n            $element.html(dashboard.loadingTemplate);\n\n            // create new scope\n            var templateScope = $scope.$new();\n\n            // pass config object to scope\n            if (!model.config) {\n                model.config = {};\n            }\n\n            templateScope.config = model.config;\n            templateScope.editing = extra && extra.editing;\n\n            if (extra) {\n                templateScope.extra = extra;\n            }\n\n            var _from = currentScope || templateScope.config;\n            templateScope.selectionManager = (_from) ? _from.selectionManager : undefined;\n\n            // local injections\n            var base = {\n                $scope: templateScope,\n                widget: model,\n                config: model.config\n            };\n\n            // get resolve promises from content object\n            var resolvers = {};\n            resolvers.$tpl = widgetService.getTemplate(content);\n            if (content.resolve) {\n                angular.forEach(content.resolve, function(promise, key) {\n                    if (angular.isString(promise)) {\n                        resolvers[key] = $injector.get(promise);\n                    } else {\n                        resolvers[key] = $injector.invoke(promise, promise, base);\n                    }\n                });\n            }\n\n            // resolve all resolvers\n            $q.all(resolvers).then(function(locals) {\n                angular.extend(locals, base);\n\n                // pass resolve map to template scope as defined in resolveAs\n                if (content.resolveAs) {\n                    templateScope[content.resolveAs] = locals;\n                }\n\n                // compile & render template\n                var template = locals.$tpl;\n                $element.html(template);\n                if (content.controller) {\n                    var templateCtrl = $controller(content.controller, locals);\n                    if (content.controllerAs) {\n                        templateScope[content.controllerAs] = templateCtrl;\n                    }\n                    $element.children().data('$ngControllerController', templateCtrl);\n                }\n                $compile($element.contents())(templateScope);\n            }, function(reason) {\n                // handle promise rejection\n                var msg = 'ADF.ERROR.COULD_NOT_RESOLVE_ALL_PROMISSES';\n                $translate(msg, {\n                    reason: (reason ? ': ' + reason : reason)\n                }).then(function(translateMessage) {\n                    renderError($element, translateMessage);\n                });\n            });\n\n            // destroy old scope\n            if (currentScope) {\n                currentScope.$destroy();\n            }\n\n            return templateScope;\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            require: '?^^adfWidgetGrid',\n            scope: {\n                model: '=',\n                content: '=',\n                extra: '=',\n                navOptionsHandler: '=?',\n                filterHandler: '=?',\n                widgetActionsHandler: '=?'\n            },\n            link: function($scope, $element, attrs, adfWidgetGridCtrl) {\n                var currentScope = compileWidget($scope, $element, null);\n                if (adfWidgetGridCtrl) {\n                    $scope.search = $scope.search || {};\n                    adfWidgetGridCtrl.updateWidgetFilters($scope.model.config.filter && $scope.model.config.filter.id);\n                }\n\n                var widgetConfigChangedEvt = $scope.$on('widgetConfigChanged', function(event, changeWidgets) {\n                    if (changeWidgets) {\n                        if (changeWidgets.indexOf($scope.model.wid) !== -1 && adfWidgetGridCtrl) {\n                            adfWidgetGridCtrl.updateWidgetFilters($scope.model.config.filter && $scope.model.config.filter.id, true);\n                        }\n                    } else {\n                        currentScope = compileWidget($scope, $element, currentScope, true);\n                    }\n                });\n\n                var widgetReloadEvt = $scope.$on('widgetReload', function(event, reloadWidgets) {\n                    var reloadWidget = true;\n                    if (reloadWidgets && reloadWidgets.length > 0) {\n                        reloadWidget = reloadWidgets.indexOf($scope.model.wid) !== -1;\n                    }\n                    if (reloadWidget) {\n                        currentScope = compileWidget($scope, $element, currentScope, false);\n                        if (adfWidgetGridCtrl && adfWidgetGridCtrl.updateWidgetFilters) {\n                            adfWidgetGridCtrl.updateWidgetFilters($scope.model.config.filter && $scope.model.config.filter.id);\n                        }\n                    }\n                });\n\n                $scope.$on('destroy', function() {\n                    widgetConfigChangedEvt();\n                    widgetReloadEvt();\n                });\n            }\n        };\n    });\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf')\n    .directive('adfWidgetGrid', function($injector, $q, $log, $uibModal, $rootScope, $interval, dashboard, adfTemplatePath, Filter, toastr, $translate) {\n        function preLink($scope) {\n            var definition = $scope.definition;\n\n            if (definition) {\n                var w = dashboard.widgets[definition.type];\n                if (w) {\n                    // pass title\n                    if (!definition.title) {\n                        definition.title = w.title;\n                    }\n\n                    definition.titleTemplateUrl = adfTemplatePath + 'widget-grid-title.html';\n\n                    if (!definition.editTemplateUrl) {\n                        definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\n                        if (w.editTemplateUrl) {\n                            definition.editTemplateUrl = w.editTemplateUrl;\n                        }\n                    }\n\n                    if (!definition.titleTemplateUrl) {\n                        definition.frameless = w.frameless;\n                    }\n\n                    if (!definition.styleClass) {\n                        definition.styleClass = w.styleClass;\n                    }\n\n                    // set id for sortable\n                    if (!definition.wid) {\n                        definition.wid = dashboard.id();\n                    }\n\n                    // pass copy of widget to scope\n                    $scope.widget = angular.copy(w);\n\n                    // create config object\n                    var config = definition.config;\n                    if (config) {\n                        if (angular.isString(config)) {\n                            config = angular.fromJson(config);\n                        }\n                    } else {\n                        config = {};\n                    }\n\n                    if (typeof $scope.widget.show_modal_footer === 'undefined') {\n                        $scope.widget.show_modal_footer = true;\n                    }\n\n                    if (typeof $scope.widget.show_reload_config === 'undefined') {\n                        $scope.widget.show_reload_config = true;\n                    }\n\n                    // pass config to scope\n                    $scope.config = config;\n\n                    // collapse exposed $scope.widgetState property\n                    if (!$scope.widgetState) {\n                        $scope.widgetState = {};\n                        $scope.widgetState.isCollapsed = (w.collapsed === true) ? w.collapsed : false;\n                    }\n\n                } else {\n                    $log.warn('could not find widget ' + definition.type);\n                }\n            } else {\n                $log.debug('definition not specified, widget was probably removed');\n            }\n        }\n\n        function postLink($scope, $element) {\n            var definition = $scope.definition;\n            if (!definition) {\n                $log.debug('widget not found');\n                return;\n            }\n            if (!$scope.config) {\n                $scope.config = {};\n            }\n\n            var config = $scope.config;\n\n            // bind close function\n            var deleteWidget = function() {\n                $element.remove();\n                $rootScope.$broadcast('adfWidgetRemovedFromGrid', definition);\n            };\n\n            $scope.remove = function() {\n                if ($scope.options.enableConfirmDelete) {\n                    var deleteScope = $scope.$new();\n\n                    var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\n                    if (definition.deleteTemplateUrl) {\n                        deleteTemplateUrl = definition.deleteTemplateUrl;\n                    }\n                    var opts = {\n                        scope: deleteScope,\n                        templateUrl: deleteTemplateUrl,\n                        backdrop: 'static'\n                    };\n                    var instance = $uibModal.open(opts);\n\n                    deleteScope.closeDialog = function() {\n                        instance.close();\n                        deleteScope.$destroy();\n                    };\n                    deleteScope.deleteDialog = function() {\n                        deleteWidget();\n                        deleteScope.closeDialog();\n                    };\n                } else {\n                    deleteWidget();\n                }\n            };\n\n\n            $scope.print = function() {\n                if (!$scope.editMode) {\n                    $scope.$broadcast('widgetPrint');\n                }\n            };\n\n            $scope.isExecuteOperationEnabled = function() {\n\n                if (config.entityKey)\n                    return true;\n                var filter = config.filter;\n\n                if (filter) {\n                    if (filter.headersFilter && filter.headersFilter.length > 0) {\n                        return true;\n                    } else {\n                        if (filter.type === \"basic\") {\n                            return filter.value.length > 0;\n                        }\n                        if (filter.type === \"advanced\") {\n                            return filter.value.length > 2 && filter.oql;\n                        }\n                    }\n                }\n\n                return false;\n            };\n\n            $scope.executeOperation = function() {\n                if (!$scope.editMode) {\n\n                    $scope.$parent.$broadcast('widgetExecuteOperation');\n                }\n            };\n\n            $scope.filter = {\n                typeFilter: 1,\n                showFilter: false,\n                showFinalFilter: false\n            };\n\n            $scope.launchSearching = function() {\n                var widget = {\n                    definition: definition,\n                    element: $element\n                };\n\n                $rootScope.$broadcast('adfLaunchSearchingFromWidget', widget, $scope.config.filter);\n                $scope.reload();\n            };\n\n\n            $scope.launchSearchingAdv = function() {\n                if (!$scope.filterApplied) {\n                    var executeSearch = true;\n                    $scope.search.quick = '';\n                    if ($scope.search.json === '' || $scope.search.json === '{}' || (!angular.isString($scope.search.json) && Object.keys($scope.search.json).length === 0)) {\n                        if ($scope.search.oql && $scope.search.oql.trim().length > 0) {\n                            toastr.error($translate.instant(\"TOASTR.FILTER_IS_MALFORMED\"));\n                            executeSearch = false;\n                        } else {\n                            $scope.config.filter = {\n                                type: 'advanced',\n                                oql: '',\n                                value: ''\n                            };\n                        }\n                    } else {\n                        $scope.config.filter = {\n                            type: 'advanced',\n                            oql: $scope.search.oql,\n                            value: $scope.search.json,\n                            headersFilter: $scope.config.filter.headersFilter\n                        };\n                    }\n\n                    if (executeSearch) {\n                        $scope.launchSearching();\n                        $scope.filterApplied = true;\n                    }\n                }\n            };\n\n            $scope.launchSearchingQuick = function() {\n                if (!$scope.filterApplied) {\n                    $scope.search.oql = $scope.search.json = '';\n                    $scope.config.filter = {\n                        type: 'basic',\n                        value: $scope.search.quick,\n                        headersFilter: $scope.config.filter.headersFilter\n                    };\n                    $scope.launchSearching();\n                    $scope.filterApplied = true;\n                }\n            };\n\n            $scope.launchSearchingShared = function() {\n                // if (!$scope.filterApplied) {\n                var shared = $scope.search.id;\n                if (shared) {\n                    shared.filter.id = shared.wid;\n                    $scope.config.filter = shared.filter;\n                } else {\n                    $scope.config.filter = {};\n                }\n                $scope.launchSearching();\n                $scope.filterApplied = true;\n                // }\n            };\n\n            $scope.filterSharedSelect = function($item, $model) {\n                $scope.filterApplied = false;\n                $scope.launchSearchingShared();\n            };\n            $scope.filterSharedRemove = function($item, $model) {\n                $scope.filterApplied = false;\n            };\n\n            var windowTimeChanged = $scope.$on('onWindowTimeChanged', function(event, timeObj) {\n                $scope.config.windowFilter = timeObj ? timeObj : (config.windowFilter ? {} : timeObj);\n                var widget = {\n                    definition: definition,\n                    element: $element\n                };\n                $rootScope.$broadcast('adfWindowTimeChangedFromWidget', widget, $scope.config.windowFilter);\n                $scope.reload();\n            });\n\n            $scope.enter = function(event) {\n                var keycode = (event.keyCode ? event.keyCode : event.which);\n                if (keycode === 13) {\n                    if ($scope.filter.typeFilter === 0)\n                        $scope.launchSearchingAdv();\n                    if ($scope.filter.typeFilter === 1)\n                        $scope.launchSearchingQuick();\n                    if ($scope.filter.typeFilter === 2)\n                        $scope.launchSearchingShared();\n                } else if (keycode === 19) {\n                    $scope.filter.showFinalFilter = !$scope.filter.showFinalFilter;\n                } else {\n                    $scope.filterApplied = false;\n                }\n            };\n\n\n            $scope.customSelectors = [];\n            $scope.getCustomSelectors = function() {\n                if ($scope.config.customSelectors) {\n                    $scope.customSelectors = $scope.config.customSelectors;\n                } else {\n                    config.widgetSelectors().findFields('').then(function(fields) {\n                        $scope.customSelectors = fields;\n                        $scope.$apply();\n                    }).catch(function(err) {\n                        $log.error(err);\n                    });\n                }\n            };\n\n            $scope.changeDirection = function() {\n                var direction = config.sort.direction;\n                if (direction === 'DESCENDING') {\n                    $scope.config.sort.direction = 'ASCENDING';\n                } else if (direction === 'ASCENDING') {\n                    $scope.config.sort.direction = 'DESCENDING';\n                }\n                $scope.reload();\n            };\n\n            $scope.debugQuery = function() {\n                Filter.parseQuery($scope.search.oql || '')\n                    .then(function(data) {\n                        //$scope.elementos = data;\n                        $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\n                        $scope.unknownWords = '';\n                        $scope.filter_error = null;\n                    })\n                    .catch(function(err) {\n                        $scope.filter_error = err;\n                        // Tratar el error\n                    });\n\n            };\n\n            $scope.autocomplete_options = function() {\n                var autocomplete_options = {\n                    suggest: Filter.suggest_field_delimited,\n                    customSelectors: config.widgetSelectors()\n                };\n\n                return autocomplete_options;\n\n            };\n\n            // Multiple selection\n            $scope.selectedItems = definition.selectedItems || {};\n\n            // Gestor de seleccion\n            $scope.selectionManager = {\n                currentSelection: $scope.selectedItems,\n                isSelected: function(key, obj) {\n                    if ($scope.selectedItems[key] && !angular.isUndefined(obj)) {\n                        $scope.selectedItems[key].data = obj;\n                    }\n\n                    return $scope.selectedItems[key] ? true : false;\n                },\n                totalSelected: function() {\n                    return Object.keys($scope.selectedItems).length;\n                }\n            };\n\n            if (definition.config.sendSelection) {\n\n                $scope.sendEntities = function() {\n                    definition.config.sendSelection($scope.selectedItems);\n                    $scope.$parent.closeDialog();\n                };\n\n                if (definition.config.selectedItems) {\n                    $scope.selectedItems = angular.copy(definition.config.selectedItems);\n                }\n\n                $scope.config.selectionManager = $scope.selectionManager;\n            }\n\n            $scope.manageSelectedItems = function() {\n                var selectionScope = $scope.$new();\n\n                if (definition.config.sendSelection) {\n                    delete config.selectionConfig.operationTypes;\n                    delete config.selectionConfig.filterTypes;\n                }\n\n                selectionScope.selectionConfig = config.selectionConfig;\n\n                selectionScope.selectedItems = [];\n                angular.forEach($scope.selectedItems, function(value, key) {\n                    selectionScope.selectedItems.push({\n                        key: key,\n                        value: value\n                    });\n                });\n\n                selectionScope.currentSelection = {\n                    selected: selectionScope.selectedItems\n                };\n\n                var manageItemsSelectedTemplate = adfTemplatePath + 'widget-selection.html';\n                var opts = {\n                    scope: selectionScope,\n                    templateUrl: manageItemsSelectedTemplate,\n                    backdrop: 'static',\n                    size: 'lg',\n                    animation: true\n                };\n\n                var instance = $uibModal.open(opts);\n\n                selectionScope.restoreSelection = function() {\n                    selectionScope.currentSelection = {\n                        selected: selectionScope.selectedItems\n                    };\n                };\n\n                selectionScope.clearSelection = function() {\n                    selectionScope.currentSelection.selected = [];\n                };\n\n                // Cierra sy guarda los datos de nueva selección\n                selectionScope.applyFilter = function(type) {\n                    var customOql = selectionScope.selectionConfig.filterAction(selectionScope.currentSelection.selected, type);\n\n                    if (!angular.isUndefined(customOql) && customOql !== null) {\n                        $scope.filter.typeFilter = 0;\n                        Filter.parseQuery(customOql).then(function(data) {\n                            $scope.search.oql = customOql;\n                            $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\n                            $scope.unknownWords = '';\n                            $scope.filter_error = null;\n\n                            $scope.launchSearchingAdv();\n                        }).catch(function(err) {\n                            $scope.filter_error = err;\n                        });\n                    }\n                };\n\n                selectionScope.executeOperation = function(operationType) {\n                    if (!$scope.editMode) {\n                        $scope.$parent.$broadcast('widgetExecuteOperation', {\n                            'selectedItems': selectionScope.currentSelection.selected,\n                            'type': operationType\n                        });\n                    }\n                };\n\n                // Cierra sy guarda los datos de nueva selección\n                selectionScope.saveChangesDialog = function() {\n                    var finalSelection = {};\n                    angular.forEach(selectionScope.currentSelection.selected, function(data, idx) {\n                        finalSelection[data.key] = {\n                            data: data.value.data,\n                            visible: data.value.visible\n                        };\n                    });\n\n                    $scope.selectedItems = angular.copy(finalSelection);\n                    $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n\n                    $scope.selectionManager.lastItem = {};\n                    $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n\n                    instance.close();\n                    selectionScope.$destroy();\n                };\n\n                // Cierra sin realizar ninguna acción\n                selectionScope.closeDialog = function() {\n                    instance.close();\n                    selectionScope.$destroy();\n                };\n            };\n\n\n            // bind edit function\n            $scope.edit = function() {\n                var editScope = $scope.$new();\n                editScope.definition = angular.copy(definition);\n\n                var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\n                if (definition.editTemplateUrl) {\n                    adfEditTemplatePath = definition.editTemplateUrl;\n                }\n\n                var opts = {\n                    scope: editScope,\n                    templateUrl: adfEditTemplatePath,\n                    backdrop: 'static',\n                    size: 'lg'\n                };\n\n                var instance = $uibModal.open(opts);\n\n                editScope.closeDialog = function() {\n                    instance.close();\n                    editScope.$destroy();\n                };\n\n                // TODO create util method\n                function createApplyPromise(result) {\n                    var promise;\n                    if (typeof result === 'boolean') {\n                        var deferred = $q.defer();\n                        if (result) {\n                            deferred.resolve();\n                        } else {\n                            deferred.reject();\n                        }\n                        promise = deferred.promise;\n                    } else {\n                        promise = $q.when(result);\n                    }\n                    return promise;\n                }\n\n                editScope.saveDialog = function() {\n                    // clear validation error\n                    editScope.validationError = null;\n\n                    // build injection locals\n                    var widget = $scope.widget;\n\n                    // create a default apply method for widgets\n                    // without edit mode\n                    // see issue https://goo.gl/KHPQLZ\n                    var applyFn;\n                    if (widget.edit) {\n                        applyFn = widget.edit.apply;\n                    } else {\n                        applyFn = function() {\n                            return true;\n                        };\n                    }\n\n                    // injection locals\n                    var locals = {\n                        widget: widget,\n                        definition: editScope.definition,\n                        config: editScope.definition.config\n                    };\n\n                    // invoke apply function and apply if success\n                    var result = $injector.invoke(applyFn, applyFn, locals);\n                    createApplyPromise(result).then(function() {\n                        definition.title = editScope.definition.title;\n                        if (editScope.definition.type === 'summaryChart') {\n                            editScope.definition.Ftype = editScope.definition.config.type.toLowerCase();\n                            definition.Ftype = editScope.definition.config.type.toLowerCase()\n                        }\n                        angular.extend(definition.config, editScope.definition.config);\n\n                        editScope.closeDialog();\n\n                        if (widget.edit && widget.edit.reload) {\n                            $scope.setReloadTimeout();\n                            // reload content after edit dialog is closed\n                            $scope.$broadcast('widgetConfigChanged');\n                        }\n                    }, function(err) {\n                        if (err) {\n                            editScope.validationError = err;\n                        } else {\n                            editScope.validationError = 'VALIDATION_DURING_APPLY_FAILED';\n                        }\n                    });\n                };\n\n            };\n\n\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            templateUrl: adfTemplatePath + 'widget-grid.html',\n            scope: {\n                definition: '=',\n                editMode: '=',\n                options: '=',\n                widgetState: '='\n            },\n            controller: function($scope) {\n                var _setFilterType = function(selectFilter) {\n                    var config = $scope.config;\n                    var filter = config.filter = config.filter ? config.filter : {};\n                    var id = filter.id = selectFilter && filter.id;\n                    filter.headersFilter = selectFilter && config.filter.headersFilter;\n                    switch (filter.type) {\n                        case 'advanced':\n                            $scope.filter.typeFilter = id ? 2 : 0;\n                            $scope.search = {\n                                oql: filter.oql,\n                                json: filter.value\n                            };\n                            break;\n                        case 'basic':\n                            $scope.filter.typeFilter = id ? 2 : 1;\n                            $scope.search = {\n                                quick: filter.value\n                            };\n\n                            break;\n                        default:\n                            $scope.filter.typeFilter = id ? 2 : 1;\n                            $scope.search = {\n                                quick: filter.value = ''\n                            };\n                            break;\n                    }\n                    $scope.search.id = selectFilter;\n                };\n\n                this.updateWidgetFilters = function(filterId, configChange) {\n                    if ($scope.options && $scope.options.extraData && $scope.options.extraData.widgetFilters) {\n                        var _widgetFilters = $scope.options.extraData.widgetFilters;\n                        var model = $scope.definition;\n                        var selectFilter;\n                        var sharedFilters = _widgetFilters.filter(function(widgetFilter) {\n                            // Recuperamos solos los filtros de widgets que cumplan las condiciones:\n                            // - No tenga un filtro heredado como filtro\n                            // - El tipo de filtro sea igual que el widget que pueda heredarlo (Ftype)\n                            // - No recuperamos el filtro propio del widget  \n                            var shared = (!widgetFilter.filter || !widgetFilter.filter.id) && (widgetFilter.Ftype === model.Ftype) && (widgetFilter.wid !== model.wid);\n                            if (shared && (filterId === widgetFilter.wid))\n                                selectFilter = widgetFilter;\n                            return shared;\n                        });\n\n                        $scope.sharedFilters = angular.copy(sharedFilters);\n                        if (!configChange || !selectFilter && !!filterId)\n                            _setFilterType(selectFilter);\n                    }\n\n                };\n\n                var definition = $scope.definition;\n\n\n                if (definition.config.selectedItems) {\n                    $scope.selectedItemsLength = Object.keys(definition.config.selectedItems).length;\n                }\n\n\n                // Controlador de la barra inferior de los widgets\n                $scope.navOptionsHandler = {\n                    firstLoad: true,\n                    loadingData: false,\n                    startLoading: function() {\n                        $scope.navOptionsHandler.loadingData = true;\n                    },\n                    stopLoading: function() {\n                        $scope.navOptionsHandler.firstLoad = false;\n                        $scope.navOptionsHandler.loadingData = false;\n                        $scope.navOptionsHandler.lastMessageTime = new Date();\n                    },\n                    setStatusMessage: function(message) {\n                        $scope.navOptionsHandler.statusMessage = message;\n                        $scope.navOptionsHandler.lastMessageTime = new Date();\n                    }\n                };\n\n                // Controlador de los parámetros del filtro\n                $scope.filterHandler = {\n                    changeFilter: function(filter, search, typeFilter) {\n                        $scope.search = search;\n                        $scope.filter.typeFilter = typeFilter;\n                    }\n                };\n\n                // Controlador de las custom actions del widget\n                $scope.widgetActionsHandler = {\n                    actions: [],\n                    setActions: function(actions) {\n                        $scope.widgetActionsHandler.actions = actions;\n                    }\n                };\n\n                var adfDashboardCollapseExpand = $scope.$on('adfDashboardCollapseExpand', function(event, args) {\n                    $scope.widgetState.isCollapsed = args.collapseExpandStatus;\n                });\n\n                var adfWidgetEnterEditMode = $scope.$on('adfWidgetEnterEditMode', function(event, widget) {\n                    if (dashboard.idEquals(definition.wid, widget.wid)) {\n                        $scope.edit();\n                    }\n                });\n\n                var adfIsEditMode = $scope.$on('adfIsEditMode', function(event, widget) {\n                    $scope.editing = true;\n                });\n\n                var adfDashboardChanged = $scope.$on('adfDashboardChanged', function(event, name, model) {\n                    //config.widgetSelectors = tiene filtro\n                    var widgetConfigChanged = [];\n                    var grid = model.grid;\n                    if (grid && grid.length > 0) {\n                        grid.forEach(function(element) {\n                            var definition = element.definition;\n                            widgetConfigChanged.push(definition.wid);\n                        });\n                        var widgetFilters = $scope.options.extraData && $scope.options.extraData.widgetFilters;\n                        var sharedFilters = widgetFilters.filter(function(widgetFilter) {\n                            var filter = widgetFilter.filter;\n                            return filter && !filter.id || widgetConfigChanged.indexOf(filter.id) !== -1;\n                        });\n                        $scope.sharedFilters = angular.copy(sharedFilters);\n                        $scope.editing = false;\n                        $scope.$broadcast('widgetConfigChanged', widgetConfigChanged);\n                    }\n                });\n\n                var adfDashboardEditsCancelled = $scope.$on('adfDashboardEditsCancelled', function(event, widget) {\n                    $scope.editing = false;\n                });\n\n                $scope.openFullScreen = function() {\n\n                    $scope.$emit('adfOpenModalWidgetFromOther', definition.type, $scope.config);\n                };\n\n                $scope.openAboutScreen = function(size) {\n                    size = 'md';\n                    var modalInstance = $uibModal.open({\n                        animation: true,\n                        templateUrl: 'widgetAboutModal.html',\n                        controller: function($scope, $uibModalInstance, information) {\n                            $scope.about = {};\n                            $scope.about.info = information;\n                            $scope.ok = function() {\n                                $uibModalInstance.close();\n                            };\n                        },\n                        'size': size,\n                        resolve: {\n                            information: function() {\n                                return $scope.config.about;\n                            }\n                        }\n                    });\n\n                    modalInstance.result.then(function(selectedItem) {\n                        $scope.selected = selectedItem;\n                    }, function() {\n                        $log.info('Modal dismissed at: ' + new Date());\n                    });\n                };\n\n                $scope.saveWidgetScreen = function(wId) {\n                    $scope.$emit('generateSnapshot', {\n                        'objectSelector': '.widget_' + wId,\n                        'fileName': 'capture_' + new Date().getTime()\n                    });\n                };\n\n                var createQuickFilter = function(fieldsQuickSearch) {\n                    var _filter = {\n                        or: []\n                    };\n                    var criteria;\n                    fieldsQuickSearch.forEach(function(field) {\n                        criteria = {};\n                        criteria[field.operator] = {};\n                        criteria[field.operator][field.name] = $scope.config.filter.value;\n                        _filter.or.push(criteria);\n                    });\n                    return _filter;\n                };\n\n                $scope.downloadCsv = function() {\n                    var columns = $scope.config.columns;\n                    var scope_filter = $scope.config.filter;\n                    var extra_filter;\n                    var final_filter = {};\n                    var order = $scope.config.sort ? $scope.config.sort : undefined;\n                    if ($scope.config.windowFilter) {\n                        var window_filter = $scope.config.onWindowTimeChanged($scope.config.windowFilter);\n                        if (window_filter && window_filter.and) {\n                            extra_filter = {\n                                and: window_filter.and\n                            };\n                        }\n                    }\n                    var filter;\n                    if (scope_filter.type && scope_filter.type === 'advanced' && scope_filter.value.length > 4) {\n                        filter = JSON.parse(scope_filter.value);\n                    } else if (scope_filter.type && scope_filter.type === 'basic' && scope_filter.value.trim() !== '') {\n                        filter = createQuickFilter($scope.config.fieldsQuickSearch, scope_filter.value);\n                    }\n                    if (extra_filter) {\n                        if (filter) {\n                            final_filter = {\n                                and: [extra_filter, filter]\n                            };\n                        } else {\n                            final_filter = extra_filter;\n                        }\n                    } else {\n                        final_filter = filter;\n                    }\n                    $scope.$broadcast('downloadCsv', {\n                        'columns': columns,\n                        'filter': final_filter,\n                        'order': order\n                    });\n                };\n\n                $scope.generateQR = function() {\n                    $scope.$broadcast('generateQR');\n                };\n\n                var addItemToSelection = $scope.$on('addItemToSelection', function(event, item) {\n                    if (!$scope.selectedItems[item.key]) {\n                        $scope.selectedItems[item.key] = {\n                            data: item.data,\n                            visible: item.visible\n                        };\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n                        item.isSelected = true;\n                        $scope.selectionManager.lastItem = item;\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n                    }\n\n                });\n\n                var removeItemFromSelection = $scope.$on('removeItemFromSelection', function(event, item) {\n                    if ($scope.selectedItems[item.key]) {\n                        delete $scope.selectedItems[item.key];\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n                        item.isSelected = false;\n                        $scope.selectionManager.lastItem = item;\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n                    }\n                });\n\n                // bind reload function\n                var stopReloadTimeout;\n\n                $scope.setReloadTimeout = function() {\n                    var config = $scope.config || $scope.definition.config;\n\n                    if (config) {\n                        var reloadPeriod = config.reloadPeriod;\n                        if (!isNaN(reloadPeriod) && (reloadPeriod * 1) !== 0) {\n                            if (angular.isDefined(stopReloadTimeout)) {\n                                $interval.cancel(stopReloadTimeout);\n                                stopReloadTimeout = undefined;\n                            }\n                            stopReloadTimeout = $interval($scope.reload, (reloadPeriod * 1000));\n                        } else if (stopReloadTimeout) {\n                            $interval.cancel(stopReloadTimeout);\n                        }\n                    }\n                };\n\n                $scope.reload = function() {\n                    $scope.$broadcast('widgetReload');\n\n                    $scope.setReloadTimeout();\n                };\n\n                // verificacion de periodo de refresco\n                $scope.setReloadTimeout();\n\n                $scope.$on('$destroy', function() {\n                    adfDashboardCollapseExpand();\n                    adfWidgetEnterEditMode();\n                    adfIsEditMode();\n                    adfDashboardChanged();\n                    adfDashboardEditsCancelled();\n                    addItemToSelection();\n                    removeItemFromSelection();\n                    $interval.cancel(stopReloadTimeout);\n                });\n            },\n            compile: function() {\n\n                /**\n                 * use pre link, because link of widget-content\n                 * is executed before post link widget\n                 */\n                return {\n                    pre: preLink,\n                    post: postLink\n                };\n            }\n        };\n\n    });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/**\n * The widget service provide helper functions to render widgets and their content.\n */\nangular.module('adf')\n  .factory('widgetService', function($http, $q, $sce, $templateCache, dashboard) {\n    \n\n    function parseUrl(url) {\n      var parsedUrl = url;\n      if (url.indexOf('{widgetsPath}') >= 0) {\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\n                .replace('//', '/');\n        if (parsedUrl.indexOf('/') === 0) {\n          parsedUrl = parsedUrl.substring(1);\n        }\n      }\n      return parsedUrl;\n    }\n\n    var exposed = {};\n\n    exposed.getTemplate = function(widget){\n      var deferred = $q.defer();\n\n      if (widget.template) {\n        deferred.resolve(widget.template);\n      } else if (widget.templateUrl) {\n        // try to fetch template from cache\n        var tpl = $templateCache.get(widget.templateUrl);\n        if (tpl) {\n          deferred.resolve(tpl);\n        } else {\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\n          $http.get(url)\n               .success(function(response) {\n                 // put response to cache, with unmodified url as key\n                 $templateCache.put(widget.templateUrl, response);\n                 deferred.resolve(response);\n               })\n               .error(function() {\n                 deferred.reject('could not load template');\n               });\n        }\n      }\n\n      return deferred.promise;\n    };\n\n    return exposed;\n  });\n\nangular.module(\"adf\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"../src/templates/dashboard-edit.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h3 class=modal-title translate>ADF.DASHBOARD.TITLE.EDIT.DASHBOARD</h3> </div> <div class=modal-body> <form role=form name=form novalidate> <div class=\\\"form-group col-xs-12 col-md-4\\\"> <label for=dashboardTitle translate>ADF.COMMON.TITLE</label> <input type=text class=\\\"form-control text-primary\\\" id=dashboardTitle ng-model=copy.title required ng-init=\\\"copy.title=(copy.title | translate)\\\"> </div> <div class=\\\"form-group col-xs-12 col-md-8\\\"> <label for=dashboardDescription translate>ADF.DASHBOARD.LABEL.DESCRIPTION</label> <input type=text class=\\\"form-control text-primary\\\" id=dashboardDescription ng-init=\\\"copy.description=(copy.description | translate)\\\" ng-model=copy.description> </div> <div class=\\\"form-group col-xs-12 col-md-12\\\"> <label for=iconConfiguration.model class=text-primary>{{\\'ADF.DASHBOARD.LABEL.ICON\\' | translate }} </label> <div class=\\\"radio radio-primary radio-inline no-margin\\\"> <label id=icon_library> <input type=radio name=iconLibrary ng-model=iconConfiguration.model value=icon> <span class=circle></span> <span class=check></span> {{\\'ICON.LIBRARY\\' | translate }} </label> </div> <div class=\\\"radio radio-primary radio-inline\\\"> <label id=icon_image> <input type=radio name=iconImage ng-model=iconConfiguration.model value=image> <span class=circle></span> <span class=check></span> {{\\'ICON.IMAGE\\' | translate }} </label> </div> <div class=padding-5 ng-if=\\\"iconConfiguration.model === \\'icon\\'\\\"> <ui-select ng-disabled=\\\"iconConfiguration.model !== \\'icon\\'\\\" tagging=tagTransform id=icon ng-model=iconConfiguration.icon theme=bootstrap allow-clear=false on-select=selectIcon($select.selected) title=\\\"{{\\'ADF.WIDGET.TITLE.CHOOSE_ICON\\' | translate}}\\\"> <ui-select-match placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.ICON\\' | translate}}\\\" allow-clear=false> <i class=\\\"fa {{$select.selected}} fa-2x\\\"></i> <span>{{$select.selected}}</span> </ui-select-match> <ui-select-choices class=oux-icon-selector repeat=\\\"iconTmp in availableIcons | filter: $select.search\\\"> <i class=\\\"fa fa-4x\\\" ng-class=iconTmp title={{iconTmp}}></i> <br> <span ng-bind-html=\\\"iconTmp| highlight: $select.search\\\"></span> </ui-select-choices> </ui-select> <input type=hidden ng-model=iconConfiguration.icon required=\\\"iconConfiguration.model === \\'icon\\'\\\"> </div> <div class=padding-5 ng-if=\\\"iconConfiguration.model === \\'image\\'\\\"> <div class=col-xs-12 ng-disabled=\\\"iconConfiguration.model !== \\'image\\'\\\"> <div ng-disabled=\\\"iconConfiguration.model !== \\'image\\'\\\" ng-if=!iconConfiguration.url ngf-drop ng-model=iconConfiguration.file ngf-max-size=1MB ngf-select=imageSelected($file) class=\\\"drop-box pointer\\\" ngf-drag-over-class=\\\"\\'dragover\\'\\\" ngf-multiple=false ngf-accept=\\\"\\'image/*\\'\\\" ngf-pattern=\\\"\\'image/*\\'\\\">{{ \\'FORM.DRAG_DROP\\' | translate }}<br>{{ \\'FORM.MAX_SIZE\\' | translate }}</div> <img ng-if=iconConfiguration.url class=navbar-domain src=\\\"{{ iconConfiguration.url }}\\\" data-intro=\\\"{{ \\'HELP.HEADER.DOMAIN_LOGO\\' | translate }}\\\" data-position=fixed> <input ng-if=\\\"iconConfiguration.model === \\'image\\'\\\" type=hidden ng-model=iconConfiguration.url required> </div> <div class=col-xs-12 ng-if=iconConfiguration.url> <button id=idRemoveFileLink ng-click=removeDataFile() class=\\\"btn btn-warning ux-txt-warning btn-group-justified pointer\\\"><i class=\\\"fa fa-trash\\\" aria-hidden=true></i> {{ \\'BUTTON.TITLE.REMOVE\\' | translate }}</button> </div> </div> <input type=hidden ng-model=iconConfiguration.model required> </div> <div class=\\\"form-group col-xs-12 col-md-12\\\"> <label for=dashboardBackground translate>ADF.DASHBOARD.LABEL.BACKGROUND_COLOR</label> <input type=text placeholder=\\\"{{ \\'ADF.WIDGET.PLACEHOLDER.COLOR\\' | translate }}\\\" colorpicker=hex class=\\\"form-control {{stream.identifier}}_color\\\" ng-model=copy.backgroundColor> </div> <div class=\\\"form-group col-xs-12 col-md-6\\\"> <label for=dashboardBackground translate>ADF.DASHBOARD.LABEL.BACKGROUND_IMAGE</label> <div ng-if=!copy.backgroundImage ngf-drop ng-model=copy.file ngf-max-size=1MB ngf-select=backgroundImageSelected($file) class=\\\"drop-box pointer\\\" ngf-drag-over-class=\\\"\\'dragover\\'\\\" ngf-multiple=false ngf-accept=\\\"\\'image/*\\'\\\" ngf-pattern=\\\"\\'image/*\\'\\\">{{ \\'FORM.DRAG_DROP\\' | translate }}<br>{{ \\'FORM.MAX_SIZE\\' | translate }}</div>  <div class=col-xs-12 ng-if=copy.backgroundImage> <button id=idRemoveBackgroundImageFileLink ng-click=removeBackgroundFile() class=\\\"btn btn-warning ux-txt-warning btn-group-justified pointer\\\"><i class=\\\"fa fa-trash\\\" aria-hidden=true></i> {{ \\'BUTTON.TITLE.REMOVE\\' | translate }}</button> </div> </div> <div class=\\\"form-group col-xs-12 col-md-6\\\" ng-if=copy.backgroundImage> <label for=BACKGROUND_SIZE class=text-primary>{{\\'ADF.DASHBOARD.LABEL.BACKGROUND_SIZE\\' | translate }}</label> <wizard-radio info=backgroundSize></wizard-radio> </div> <div class=\\\"form-group col-xs-12 col-md-12\\\"> <b>{{\\'DIALOG.ICON.PREVIEW\\' | translate}}</b> </div> <div class=\\\"form-group col-xs-12 col-md-12 well padding-5 dashboardPanel\\\"> <div gridstack class=grid-stack> <div gridstack-item class=grid-stack-item gs-item-x=0 gs-item-y=0 gs-item-width=5 gs-item-height=2 gs-item-min-width=2 gs-item-min-height=1 gs-item-autopos=0 data-intro=\\\"{{ \\'HELP.WORKSPACES.DASHBOARD\\' | translate }}\\\" data-position=absolute> <div class=\\\"grid-stack-item-content panel well no-padding\\\" style=\\\"background-color: {{copy.backgroundColor}} !important; background-image: url( {{copy.backgroundImage }} ) !important; background-size : {{backgroundSize.model }} !important\\\" title=\\\"{{ copy.title | translate }}\\\"> <div class=\\\"col-xs-12 col-md-12 padding-5\\\"> <h4 class=\\\"text-primary no-margin\\\">{{ copy.title | translate }}</h4> <small ng-if=copy.description>{{ copy.description | translate }}</small> </div> <div class=dashboard-extra-info> <div class=\\\"padding-5 extra-info\\\"> <span><i class=\\\"fa fa-clock-o text-grey\\\"></i> <small am-time-ago=copy.time> {{copy.time}}</small></span> </div> <div class=\\\"padding-5 identity-icon-dashboard\\\"> <i ng-if=\\\"iconConfiguration.model === \\'icon\\'\\\" class=\\\"fa {{ iconConfiguration.icon}}\\\"></i> <img ng-if=\\\"iconConfiguration.model === \\'image\\'\\\" alt src=\\\"{{ iconConfiguration.url }}\\\" data-intro=\\\"{{ \\'HELP.HEADER.DOMAIN_LOGO\\' | translate }}\\\" data-position=fixed> </div> </div> </div> </div> </div> </div> </form> </div> <div class=modal-footer> <div class=col-xs-12> <button type=submit class=\\\"btn btn-primary\\\" ng-click=closeDialog() ng-disabled=form.$invalid translate>ADF.COMMON.CLOSE</button> </div> </div>\");\n$templateCache.put(\"../src/templates/dashboard-grid.html\",\"<div gridstack class=grid-stack options=gridOptions on-drag-start=onDragStart(event,ui) on-drag-stop=onDragStop(event,ui) on-resize-start=onResizeStart(event,ui) on-resize-stop=onResizeStop(event,ui) gridstack-handler=gsHandler on-change=onChange(event,items)> <div gridstack-item ng-repeat=\\\"w in adfModel.grid\\\" class=grid-stack-item gs-item-x=w.x gs-item-y=w.y gs-item-width=w.width gs-item-height=w.height gs-item-min-width=2 gs-item-min-height=2 gs-item-autopos=0> <adf-widget-grid ng-if=\\\"w && w.definition\\\" class=grid-stack-item-content options=options definition=w.definition edit-mode=editMode widget-state=widgetState></adf-widget-grid> </div> </div>\");\n$templateCache.put(\"../src/templates/dashboard-title.html\",\"<div class=row style=padding:0px;> <div class=\\\"col-xs-12 col-md-5\\\" ng-if=!hideButtons> <span ng-if=model.icon id=idDashboardIcon class=\\\"fa fa-2x\\\" ng-class=model.icon></span> <span id=idDashboardTitle class=\\\"fa-2x text-primary\\\">{{model.title | translate}}</span> <span ng-if=model.description id=idDashboardDescription>{{model.description | translate}}</span> </div> <div class=\\\"col-xs-12 col-md-7 text-right\\\" ng-if=!hideButtons> <a href ng-if=editMode title=\\\"{{ \\'ADF.DASHBOARD.TITLE.ADD\\' | translate }}\\\" ng-click=addWidgetDialog() class=\\\"btn btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-plus\\\" aria-hidden=true></i> {{\\'ADF.DASHBOARD.TITLE.ADD\\' | translate}} </a> <a href ng-if=editMode title=\\\"{{ \\'ADF.DASHBOARD.TITLE.CONFIGURATION\\' | translate }}\\\" ng-click=editDashboardDialog() class=\\\"btn btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-cog\\\"></i> {{\\'ADF.DASHBOARD.TITLE.CONFIGURATION\\' | translate}} </a> <a href ng-if=editMode title=\\\"{{ \\'ADF.DASHBOARD.TITLE.UNDO\\' | translate }}\\\" ng-click=cancelEditMode() class=\\\"btn btn-warning btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-close\\\"></i> {{\\'ADF.DASHBOARD.TITLE.UNDO\\' | translate}} </a> <a href ng-if=\\\"options.editable && !editMode && !model.temporal\\\" title=\\\"{{\\'ADF.DASHBOARD.TITLE.EDIT.MODE\\' | translate }}\\\" ng-click=toggleEditMode() class=\\\"btn btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-pencil-square-o\\\"></i> {{\\'ADF.DASHBOARD.TITLE.EDIT.MODE\\' | translate}} </a> <a href ng-if=\\\"options.editable && editMode\\\" title=\\\"{{\\'ADF.DASHBOARD.TITLE.SAVE\\' | translate)}}\\\" ng-click=toggleEditMode() class=\\\"btn btn-success btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-save\\\"></i> {{\\'ADF.DASHBOARD.TITLE.SAVE\\' | translate}} </a> </div> </div>\");\n$templateCache.put(\"../src/templates/dashboard.html\",\"<div class=dashboard-container x-ng-class=\\\"{\\'edit\\' : editMode}\\\"> <div ng-include src=model.titleTemplateUrl></div> <div class=dashboard x-ng-class=\\\"{\\'edit\\' : editMode}\\\" style=\\\"padding: 0px;margin: 0px;\\\"> <adf-dashboard-grid ng-if=model.grid adf-model=model options=options edit-mode=editMode> </adf-dashboard-grid></div> </div>\");\n$templateCache.put(\"../src/templates/widget-add.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title translate>ADF.WIDGET.TITLE.ADD_HEADER</h4> </div> <div class=modal-body>  <div ng-if=createCategories> <uib-accordion ng-init=\\\"categorized = createCategories(widgets)\\\"> <div uib-accordion-group heading=\\\"{{category.name | translate}}\\\" ng-repeat=\\\"category in categorized | adfOrderByObjectKey: \\'name\\'\\\"> <dl class=dl-horizontal> <dt ng-repeat-start=\\\"widget in category.widgets | adfOrderByObjectKey: \\'key\\'\\\"> <a href ng-click=addWidget(widget.key) ng-class={{widget.key}}> {{widget.title | translate}} </a> </dt> <dd ng-repeat-end ng-if=widget.description> {{widget.description | translate}} </dd> </dl> </div> </uib-accordion> </div>  <div ng-if=!createCategories> <div class=row> <div class=\\\"col-md-4 col-xs-12 form-group no-margin\\\"> <select ng-model=widgetFilterCfg.widgetFilter.categoryTags name=widgetsCategoryFilter class=form-control> <option value translate>ADF.WIDGET.LABEL.ALL_WIDGETS</option> <option ng-repeat=\\\"category in availableCategories | orderBy\\\" value={{category}}>{{ category | translate }}</option> </select> </div> <div class=\\\"col-md-4 col-xs-12 form-group no-margin\\\"> <select ng-model=widgetFilterCfg.widgetSorting name=widgetsSorting class=form-control> <option value=priority ng-selected=\\\"widgetFilterCfg.widgetSorting===\\'priority\\' || !widgetFilterCfg.widgetSorting\\\" translate=ADF.WIDGET.TITLE.SORTED_BY translate-values=\\\"{ item : (\\'ADF.WIDGET.LABEL.PRIORITY\\' | translate) }\\\"></option> <option value=name ng-selected=\\\"widgetFilterCfg.widgetSorting===\\'name\\'\\\" translate=ADF.WIDGET.TITLE.SORTED_BY translate-values=\\\"{ item : (\\'ADF.WIDGET.LABEL.NAME\\' | translate) }\\\"></option> <option value=category ng-selected=\\\"widgetFilterCfg.widgetSorting===\\'category\\'\\\" translate=ADF.WIDGET.TITLE.SORTED_BY translate-values=\\\"{ item : (\\'ADF.WIDGET.LABEL.CATEGORY\\' | translate) }\\\"></option> <option value=description ng-selected=\\\"widgetFilterCfg.widgetSorting===\\'description\\'\\\" translate=ADF.WIDGET.TITLE.SORTED_BY translate-values=\\\"{ item : (\\'ADF.WIDGET.LABEL.DESCRIPTION\\' | translate) }\\\"></option> </select> </div> <div class=\\\"col-md-4 col-xs-12 form-group no-margin\\\"> <select ng-model=widgetFilterCfg.widgetSortingDirection name=widgetSortingDirection class=form-control> <option value translate>BUTTON.TITLE.ASCENDING</option> <option value=1 translate>BUTTON.TITLE.DESCENDING</option> </select> </div> </div> <div class=row> <div class=\\\"col-xs-12 form-group no-margin\\\"> <input type=text class=form-control name=widgetsTitleFilter autofocus ng-model=widgetFilterCfg.widgetFilter.title placeholder=\\\"{{ \\'ADF.WIDGET.PLACEHOLDER.TYPE_WIDGET_FILTER\\'| translate }}\\\"> </div> </div> <div ng-repeat=\\\"widget in widgets | adfOrderByObjectKey: \\'key\\' | filter:widgetFilterCfg.widgetFilter:strict | orderBy:widgetFilterCfg.widgetSorting:widgetFilterCfg.widgetSortingDirection track by $index\\\" ng-class=\\\"{ \\'widgetPanelBig\\' : $index ===0 , \\'widgetPanelNormal\\' : $index > 0 }\\\"> <div class=\\\"pointer panel widgetInfoParent {{widget.key}}\\\" ng-click=addWidget(widget.key) title=\\\"{{widget.description | translate}}\\\"> <div class=\\\"widgetInfoImage pointer\\\"> <div ng-if=widget.svg class=widget-icon ng-include=widget.svg></div> <img ng-if=\\\"widget.images && !widget.svg\\\" ng-init=\\\"widget._currImg = widget.images[0]\\\" src=\\\"{{ widget._currImg }}\\\" ng-click=addWidget(widget.key) title=\\\"Click to change (if available)\\\"> <i ng-if=\\\"!widget.images && !widget.svg\\\" class=\\\"widgetInfoIcon fa\\\" ng-class=\\\"widget.icon ? widget.icon: \\'fa-plus-circle\\'\\\" ng-style=\\\"widget.color?{\\'color\\':widget.color}:\\'\\'\\\" aria-hidden=true></i> </div> <div class=widgetInfoContainer id=widgetKey_{{widget.key}} ng-class=\\\"{ \\'bg-contrast\\' : $index ===0, \\'bg-primary\\': $index !== 0}\\\">  <span class=widgetInfoTitle>{{widget.title }}</span><br> <span>({{widget.category}})</span> <span class=widgetInfoDescription>{{widget.description}}</span> </div> </div> </div> </div> </div> <div class=modal-footer style=clear:both;> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() translate>ADF.COMMON.CLOSE</button> </div>\");\n$templateCache.put(\"../src/templates/widget-delete.html\",\"<div class=modal-header> <h4 class=modal-title> <span translate>ADF.COMMON.DELETE</span> {{widget.title | translate}}</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=widgetTitle translate>ADF.WIDGET.LABEL.DELETE_CONFIRM_MESSAGE</label> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() translate>ADF.COMMON.CLOSE</button> <button type=button class=\\\"btn btn-primary\\\" ng-click=deleteDialog() translate>ADF.COMMON.DELETE</button> </div> \");\n$templateCache.put(\"../src/templates/widget-edit.html\",\"<form name=widgetEditForm novalidate role=form ng-submit=saveDialog()> <div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h3 class=modal-title>{{widget.title | translate}}</h3> </div> <div class=modal-body> <div class=row> <div class=col-xs-12> <div class=\\\"alert alert-danger\\\" role=alert ng-show=validationError> <strong translate>ADF.ERROR.APPLY_ERROR</strong> {{validationError | translate}} </div> </div> </div> <div class=row ng-if=widget.show_reload_config> <div class=\\\"col-xs-12 col-md-6\\\"> <div class=form-group> <label for=widgetTitle translate>ADF.COMMON.TITLE</label> <input type=text class=\\\"form-control text-primary\\\" id=widgetTitle ng-init=\\\"definition.title=(definition.title | translate)\\\" ng-model=definition.title placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.TITLE\\' | translate}}\\\"> </div> </div> <div class=\\\"col-xs-12 col-md-6\\\"> <div class=form-group> <label for=widgetReloadPeriod translate>ADF.WIDGET.TOOLTIP.REFRESH</label> <select class=form-control id=widgetReloadPeriod aria-label=\\\"ngSelected demo\\\" ng-model=definition.config.reloadPeriod required ng-init=\\\"definition.config.reloadPeriod ? definition.config.reloadPeriod : (definition.config.reloadPeriod = \\'0\\')\\\"> <option value=0 translate>ADF.WIDGET.OPTIONS.MANUAL</option> <option value=20 translate>ADF.WIDGET.OPTIONS.20_SECONDS</option> <option value=40 translate>ADF.WIDGET.OPTIONS.40_SECONDS</option> <option value=60 translate>ADF.WIDGET.OPTIONS.EVERY_MINUTE</option> </select> </div> </div> </div> <div class=row ng-if=!widget.show_reload_config> <div class=\\\"col-xs-12 col-md-12\\\"> <div class=form-group> <label for=widgetTitle translate>ADF.COMMON.TITLE</label> <input type=text class=\\\"form-control text-primary\\\" id=widgetTitle ng-init=\\\"definition.title=(definition.title | translate)\\\" ng-model=definition.title placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.TITLE\\' | translate}}\\\"> </div> </div> </div> <div ng-if=widget.edit class=row> <div class=col-xs-12> <adf-widget-content model=definition content=widget.edit> </adf-widget-content></div> </div> <div class=row> <div class=col-xs-12> <div class=form-group> <label for=widgetAbout translate>ADF.COMMON.ABOUT</label> <textarea class=\\\"form-control text-primary\\\" id=widgetAbout ng-model=definition.config.about placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.ENTER.DESCRIPTION\\'|translate}}\\\"></textarea> </div> </div> </div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() translate>ADF.WIDGET.BUTTON.CANCEL</button> <button type=submit class=\\\"btn btn-primary\\\" ng-disabled=widgetEditForm.$invalid value=\\\"{{\\'ADF.WIDGET.BUTTON.APPLY\\' | translate }}\\\" translate>ADF.WIDGET.BUTTON.APPLY</button> </div> </form>\");\n$templateCache.put(\"../src/templates/widget-fullscreen-selection.html\",\"<div class=modal-header> <div class=\\\"pull-right widget-icons\\\"> <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.CLOSE\\' |translate }}\\\" ng-click=closeDialog() class=\\\"btn btn-xs btn-danger oux-button-margin\\\"> <i class=\\\"glyphicon glyphicon-remove\\\"></i> {{ \\'ADF.WIDGET.TOOLTIP.CLOSE\\' |translate }} </a> </div> <h4 class=\\\"modal-title pull-left\\\" translate>&nbsp;{{ definition.title | translate}}</h4> </div> <div class=\\\"modal-body widget\\\" style=overflow:hidden;> <adf-widget-grid definition=definition edit-mode=false widget-state=widgetState></adf-widget-grid> </div> \");\n$templateCache.put(\"../src/templates/widget-fullscreen.html\",\"<div class=modal-header> <div class=\\\"pull-right widget-icons\\\"> <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.CLOSE\\' |translate }}\\\" ng-click=closeDialog() class=\\\"btn btn-xs btn-danger oux-button-margin\\\"> <i class=\\\"glyphicon glyphicon-remove\\\"></i> {{ \\'ADF.WIDGET.TOOLTIP.CLOSE\\' |translate }} </a> <a permission permission-only=\\\"\\'manageWorkspace\\'\\\" href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.INSERT\\' |translate }}\\\" ng-if=persistDashboard ng-click=persistDashboard() class=\\\"btn btn-xs btn-primary oux-button-margin\\\"> <i class=\\\"glyphicon glyphicon-save\\\"></i> {{ \\'ADF.WIDGET.TOOLTIP.INSERT\\' |translate }} </a> </div> <h4 class=\\\"modal-title pull-left\\\" translate>&nbsp;{{ definition.title | translate}}</h4> </div> <div class=\\\"modal-body widget\\\" style=overflow:hidden;>  <adf-widget-grid definition=definition edit-mode=false widget-state=widgetState></adf-widget-grid> </div> <div class=modal-footer ng-if=widget.show_modal_footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() translate>ADF.COMMON.CLOSE</button> </div>\");\n$templateCache.put(\"../src/templates/widget-grid-title.html\",\"<div class=panel-title style=margin:0px;> <div class=\\\"pull-right container-actions bg-primary\\\" data-intro=\\\"Widget actions\\\" data-position=bottom> <span ng-if=config.about> <a href uib-popover=\\\"{{ config.about }}\\\" popover-trigger=\\\"\\'mouseenter\\'\\\" popover-placement=top ng-click=openAboutScreen()> <i class=\\\"glyphicon glyphicon-info-sign\\\"></i> </a> <script type=text/ng-template id=widgetAboutModal.html> <div class=\\\"modal-header\\\"> <h4 class=\\\"modal-title\\\" translate>ADF.COMMON.ABOUT</h4> </div> <div class=\\\"modal-body\\\">{{ about.info }}</div> <div class=\\\"modal-footer\\\"> <button class=\\\"btn btn-primary\\\" type=\\\"button\\\" ng-click=\\\"ok()\\\" translate>ADF.WIDGET.BUTTON.OK</button> </div> </script> </span> <a ng-if=\\\"!editMode && widget.print\\\" href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.PRINT\\' | translate }}\\\" ng-click=print()> <i class=\\\"glyphicon glyphicon-print\\\"></i> </a> <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.REFRESH\\' | translate }}\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a>  <a permission permission-only=\\\"\\'viewFilter\\'\\\" href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.FILTER\\' | translate }}\\\" ng-if=\\\"config.widgetSelectors && !editMode\\\" ng-click=\\\"filter.showFilter = !filter.showFilter\\\"> <i class=\\\"glyphicon glyphicon-filter\\\" ng-class=\\\"{\\'active\\': search.json || search.oql|| search.quick}\\\"></i> </a>  <a permission permission-only=\\\"\\'viewFilter\\'\\\" href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.SORT\\' | translate }}\\\" ng-if=\\\"config.sort && !editMode\\\" ng-click=\\\"filter.showFilter = !filter.showFilter\\\"> <i class=\\\"glyphicon glyphicon-sort\\\" ng-class=\\\"{\\'active\\': (config.sort.value && config.sort.value !== \\'\\')}\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.EDIT\\' | translate }}\\\" ng-click=edit() ng-if=editMode> <i class=\\\"glyphicon glyphicon-cog\\\"></i> </a> <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.FULLSCREEN\\' | translate }}\\\" ng-click=openFullScreen() ng-show=\\\"options.maximizable && !widget.notMaximizable\\\"> <i class=\\\"glyphicon glyphicon-fullscreen\\\"></i> </a>  <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.REMOVE\\' | translate}}\\\" ng-click=remove() ng-if=editMode> <i class=\\\"glyphicon glyphicon-trash\\\"></i> </a> <div ng-if=!editMode class=pointer style=\\\"display: inline;\\\" uib-dropdown uib-dropdown-toggle> <i class=\\\"fa fa-ellipsis-h\\\" style=font-size:1.2em;></i> <ul uib-dropdown-menu class=dropdown-menu-right> <li role=menuitem> <a class=pointer href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.PICTURE\\' | translate}}\\\" ng-click=saveWidgetScreen(definition.wid)> <span class=\\\"glyphicon glyphicon-picture\\\"></span> {{ \\'ADF.WIDGET.TOOLTIP.PICTURE\\' | translate}} </a> </li> <li role=menuitem ng-if=widget.qr> <a class=pointer href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.QR\\' | translate }}\\\" ng-click=generateQR()> <span class=\\\"fa fa-qrcode\\\" style=\\\"font-size: 1.1em;\\\"></span> {{ \\'ADF.WIDGET.TOOLTIP.QR\\' | translate }} </a> </li> <li ng-if=widget.csv permission permission-only=\\\"\\'download\\'\\\" role=menuitem> <a class=pointer href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.CSV\\' | translate }}\\\" ng-click=downloadCsv()> <span class=\\\"glyphicon glyphicon-file\\\"></span> {{ \\'ADF.WIDGET.TOOLTIP.CSV\\' | translate }} </a> </li> <li role=menuitem permission permission-only=\\\"\\'executeOperation\\'\\\" ng-if=\\\"widget.executeOperation && isExecuteOperationEnabled()\\\"> <a class=pointer href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.OPERATION\\' | translate }}\\\" ng-click=executeOperation()> <span class=\\\"glyphicon glyphicon-flash\\\"></span> {{ \\'ADF.WIDGET.TOOLTIP.OPERATION\\' | translate }} </a> </li> <li role=menuitem ng-if=\\\"widgetActionsHandler && widgetActionsHandler.actions && widgetActionsHandler.actions.length > 0\\\" ng-repeat=\\\"customAction in widgetActionsHandler.actions\\\" permission permission-only=customAction.permissions> <a class=pointer title={{customAction.title}} ng-click=customAction.action(choice.value)> <span class=\\\"pointer {{customAction.icon}}\\\"></span> {{customAction.title}} </a> </li> </ul> </div> </div> <span class=pull-left>  <h4 ng-if=\\\"!widget.frameless && definition.title\\\" style=\\\"margin:4px 0px 0px 2px;float:left;\\\" translate class=text-primary>{{definition.title | translate}}</h4> </span> <div class=pull-right ng-if=\\\"navOptionsHandler.prevPage && navOptionsHandler.nextPage && navOptionsHandler.hasPrevPage && navOptionsHandler.hasNextPage && ( !navOptionsHandler.isPaginationEnable || navOptionsHandler.isPaginationEnable() ) && ( !navOptionsHandler.isNoContent || !navOptionsHandler.isNoContent() )\\\" style=margin-top:1px> <button class=\\\"btn btn-primary btn-sm pointer\\\" ng-click=navOptionsHandler.prevPage() ng-disabled=!navOptionsHandler.hasPrevPage()> <i class=\\\"glyphicon glyphicon-chevron-left browser-link\\\"></i>{{ \\'BUTTON.TITLE.PREVIOUS\\' | translate }} </button> <button class=\\\"btn btn-primary btn-sm pointer\\\" ng-click=navOptionsHandler.nextPage() ng-disabled=!navOptionsHandler.hasNextPage()> {{ \\'BUTTON.TITLE.NEXT\\' | translate }} <i class=\\\"glyphicon glyphicon-chevron-right browser-link\\\"></i> </button> </div> <div permission permission-only=\\\"[\\'viewFilter\\',\\'executeOperation\\']\\\" class=pull-right ng-if=\\\"selectedItemsLength > 0\\\" style=margin-top:1px> <a href title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.SELECTION\\' | translate }}\\\" ng-click=manageSelectedItems() class=\\\"btn btn-primary btn-sm pointer\\\"> <i class=\\\"glyphicon glyphicon-check\\\"></i> <small class=ogux-budget>{{ selectedItemsLength }}</small> </a> </div> </div> <script type=text/ng-template id=actionsMenuTpl.html> <ul class=\\\"dropdown-menu\\\" uib-dropdown-menu role=\\\"menu\\\"> <li> <a class=\\\"pointer\\\" href=\\\"\\\" title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.PICTURE\\' | translate}}\\\" ng-click=\\\"saveWidgetScreen(definition.wid)\\\"> <span class=\\\"glyphicon glyphicon-picture\\\"></span> {{ \\'ADF.WIDGET.TOOLTIP.PICTURE\\' | translate}} </a> </li> <li ng-if=\\\"widget.qr\\\"> <a class=\\\"pointer\\\" href=\\\"\\\" title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.QR\\' | translate }}\\\" ng-click=\\\"generateQR()\\\"> <span class=\\\"fa fa-qrcode\\\" style=\\\"font-size: 1.1em;\\\"></span> {{ \\'ADF.WIDGET.TOOLTIP.QR\\' | translate }} </a> </li> <li ng-if=\\\"widget.csv\\\" permission permission-only=\\\" \\'download\\' \\\"> <a class=\\\"pointer\\\" href=\\\"\\\" title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.CSV\\' | translate }}\\\" ng-click=\\\"downloadCsv()\\\"> <span class=\\\"glyphicon glyphicon-file\\\"></span> {{ \\'ADF.WIDGET.TOOLTIP.CSV\\' | translate }} </a> </li> <li permission permission-only=\\\" \\'executeOperation\\' \\\" ng-if=\\\"widget.executeOperation && isExecuteOperationEnabled()\\\"> <a class=\\\"pointer\\\" href=\\\"\\\" title=\\\"{{ \\'ADF.WIDGET.TOOLTIP.OPERATION\\' | translate }}\\\" ng-click=\\\"executeOperation()\\\"> <span class=\\\"glyphicon glyphicon-flash\\\"></span> {{ \\'ADF.WIDGET.TOOLTIP.OPERATION\\' | translate }} </a> </li> <li ng-if=\\\"widgetActionsHandler && widgetActionsHandler.actions && widgetActionsHandler.actions.length > 0\\\" ng-repeat=\\\"customAction in widgetActionsHandler.actions\\\" permission permission-only=\\\"customAction.permissions\\\"> <a class=\\\"pointer\\\" title=\\\"{{customAction.title}}\\\" ng-click=\\\"customAction.action(choice.value)\\\"> <span class=\\\"pointer {{customAction.icon}}\\\"></span> {{customAction.title}} </a> </li> </ul> </script>\");\n$templateCache.put(\"../src/templates/widget-grid.html\",\"<div adf-id={{definition.wid}} adf-widget-type={{definition.type}} ng-class=\\\"{\\'widget-move-mode\\': editMode}\\\" class=\\\"panel panel-default widget widget_{{definition.wid}}\\\"> <a name={{definition.wid}} id={{definition.wid}}></a> <div class=\\\"panel-heading clearfix\\\" ng-if=\\\"!widget.frameless || editMode\\\"> <div ng-include src=definition.titleTemplateUrl></div> </div> <div ng-class=\\\"{ \\'panel-body\\':!widget.frameless || editMode, \\'widget-blur-loading\\': (navOptionsHandler && navOptionsHandler.firstLoad && navOptionsHandler.loadingData) }\\\" uib-collapse=widgetState.isCollapsed> <div ng-if=\\\"!widgetState.isCollapsed && config.widgetSelectors && !editMode && filter.showFilter\\\" class=\\\"row form-group\\\" style=\\\"margin-top: 5px !important;\\\"> <div ng-if=\\\"filter.typeFilter === 0\\\" class=\\\"col-xs-12 col-md-8\\\"> <div class=filter mass-autocomplete> <input class=form-control style=padding-right:15px; name=filterValue ng-keydown=enter($event) ng-model=search.oql placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.ENTER.FILTER.ADVANCED\\' | translate }}\\\" mass-autocomplete-item=autocomplete_options() ng-change=debugQuery()> <label ng-click=launchSearchingAdv() style=\\\"position: absolute;font-size: 1.5em;cursor:pointer;right: 15px;\\\" class=glyphicon ng-class=\\\"{ \\'glyphicon-search\\' : !filterApplied, \\'glyphicon-ok\\': filterApplied}\\\"></label> </div> <div ng-if=\\\"!editMode && filter_error\\\" class=col-xs-12> <alert type=danger class=\\\"text-center text-danger\\\"> <span>{{filter_error}}</span> </alert> </div> <div ng-if=\\\"filter.showFinalFilter && search.json\\\" class=col-xs-12> <pre>{{ search.json }}</pre> </div> </div> <div ng-if=\\\"filter.typeFilter === 1\\\" class=\\\"col-xs-12 col-md-8\\\"> <div class=filter> <input class=form-control style=padding-right:15px; name=filterValue ng-keydown=enter($event) ng-blur=launchSearchingQuick() ng-model=search.quick placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.ENTER.FILTER.BASIC\\' | translate}}\\\"> <label ng-click=launchSearchingQuick() style=\\\"position: absolute;font-size: 1.5em;cursor:pointer;right: 15px;\\\" class=glyphicon ng-class=\\\"{ \\'glyphicon-search\\' : !filterApplied, \\'glyphicon-ok\\': filterApplied}\\\"></label> </div> </div> <div ng-if=\\\"filter.typeFilter === 2\\\" class=\\\"col-xs-12 col-md-8\\\"> <div class=filter> <ui-select id=sharedFilter ng-model=search.id theme=bootstrap title=\\\"{{ \\'FORM.TITLE.SHARED_FILTER\\' | translate }}\\\" on-select=\\\"filterSharedSelect($item, $model)\\\" on-remove=\\\"filterSharedRemove($item, $model)\\\"> <ui-select-match placeholder=\\\"{{ \\'FORM.PLACEHOLDER.SHARED_FILTER\\' | translate }}\\\" allow-clear=true>{{$select.selected.title | translate }} </ui-select-match> <ui-select-choices repeat=\\\"sharedFilter in sharedFilters | filter: $select.search\\\"> <div> <span ng-bind-html=\\\"sharedFilter.title | highlight: $select.search | translate\\\"> </span></div> <small> <div ng-if=\\\"sharedFilter.filter.type === \\'advanced\\'\\\">{{ \\'FORM.LABEL.ADVANCED\\' | translate }} <span ng-bind-html=\\\"\\'\\'+sharedFilter.filter.oql | highlight: $select.search\\\"></span> </div> <div ng-if=\\\"sharedFilter.filter.type === \\'basic\\'\\\">{{ \\'FORM.LABEL.BASIC\\' | translate }} <span ng-bind-html=\\\"\\'\\'+sharedFilter.filter.value | highlight: $select.search\\\"></span> </div> </small> </ui-select-choices> </ui-select> </div> </div> <div class=\\\"col-xs-12 col-md-4\\\" uib-dropdown> <button class=\\\"btn btn-sm\\\" uib-dropdown-toggle title=\\\"{{\\'ADF.WIDGET.TITLE.TOGGLE_AVANCED_BASIC_FILTER\\' | translate }}\\\"> <i class=\\\"advanced-filter glyphicon\\\" ng-class=\\\"{\\'glyphicon-font\\' : filter.typeFilter === 0, \\'glyphicon-bold\\' : filter.typeFilter ===1, \\'glyphicon-share\\' : filter.typeFilter ===2,}\\\"></i> <span class=caret></span> </button> <ul class=\\\"dropdown-menu panel\\\" style=\\\"border: 1px groove;\\\" uib-dropdown-menu aria-labelledby=simple-dropdown> <li ng-click=\\\"filter.typeFilter = 0\\\"> <a href> <i class=\\\"advanced-filter glyphicon glyphicon-font txt-primary\\\"></i> {{\\'ADF.WIDGET.TITLE.FILTER.ADVANCED\\' | translate}}</a> </li> <li ng-click=\\\"filter.typeFilter = 1\\\"> <a href> <i class=\\\"basic-filter glyphicon glyphicon-bold txt-primary\\\"></i> {{\\'ADF.WIDGET.TITLE.FILTER.BASIC\\' | translate}}</a> </li> <li ng-click=\\\"filter.typeFilter = 2\\\"> <a href> <i class=\\\"basic-filter glyphicon glyphicon-share txt-primary\\\"></i> {{\\'ADF.WIDGET.TITLE.FILTER.SHARED\\' | translate}}</a> </li> </ul> </div> </div> <div ng-if=\\\"customSelectors && config.sort && filter.showFilter\\\" class=\\\"row form-group\\\" style=\\\"margin-top: 5px !important;\\\"> <div class=\\\"sort col-xs-12 col-md-8\\\"> <ui-select ng-model=config.sort.value theme=bootstrap title=\\\"{{\\'ADF.WIDGET.TITLE.CHOOSE_ORDER\\' | translate}}\\\" allow-clear=true append-to-body=true ng-change=launchSearching() ng-click=getCustomSelectors()> <ui-select-match placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.SHORTED_BY\\' | translate}}\\\" allow-clear=true>{{ \\'ADF.WIDGET.TITLE.SORTED_BY\\' | translate:{item: $select.selected} }}</ui-select-match> <ui-select-choices repeat=\\\"selector in customSelectors | filter: $select.search track by $index\\\"> <small> <span ng-bind-html=\\\"selector | highlight: $select.search\\\"></span> </small> </ui-select-choices> </ui-select> </div> <div class=\\\"sortDirection col-xs-4 col-md-4\\\"> <button class=\\\"btn btn-sm pointer\\\" ng-click=changeDirection() ng-disabled=\\\"config.sort.value === \\'\\'\\\" title=\\\"{{\\'ADF.WIDGET.TITLE.TOGGLE_SORTING_DIRECTION\\' | translate}}\\\"> <i class=glyphicon style=font-size:1.3em; ng-class=\\\"config.sort.direction===\\'ASCENDING\\' ? \\'glyphicon-sort-by-attributes\\': \\'glyphicon-sort-by-attributes-alt\\'\\\"></i> </button> </div> </div> <adf-widget-content ng-if=definition model=definition content=widget extra=options.extraData nav-options-handler=navOptionsHandler filter-handler=filterHandler widget-actions-handler=widgetActionsHandler> </adf-widget-content></div> <div class=loaderContainer ng-if=\\\"navOptionsHandler && navOptionsHandler.firstLoad && navOptionsHandler.loadingData\\\"> <img class=loaderImage src={{widget.images[0]}}> </div> <div class=row ng-if=\\\"config.showSaveButton && sendEntities\\\"> <div class=col-xs-12> <button type=button class=\\\"btn btn-xs btn-primary pull-right oux-button-margin\\\" ng-click=sendEntities() translate>ADF.COMMON.SAVE</button> </div> </div> <div class=\\\"panel-footer row no-padding no-margin\\\"> <div class=\\\"col-xs-7 text-left\\\"> <span ng-if=\\\"navOptionsHandler && navOptionsHandler.statusMessage && !navOptionsHandler.loadingData && !navOptionsHandler.firstLoad\\\">{{navOptionsHandler.statusMessage | translate}}</span> </div> <div class=\\\"col-xs-5 spinner-container\\\" ng-if=\\\"navOptionsHandler && navOptionsHandler.loadingData && !navOptionsHandler.firstLoad\\\"> <div class=\\\"spinner pull-right\\\"></div> </div> <div class=\\\"col-xs-5 text-right no-padding no-margin\\\" ng-if=\\\"navOptionsHandler && navOptionsHandler.lastMessageTime && !navOptionsHandler.loadingData && !navOptionsHandler.firstLoad\\\"> <small class=label am-time-ago=navOptionsHandler.lastMessageTime></small> </div> </div> </div>\");\n$templateCache.put(\"../src/templates/widget-selection.html\",\"<style>\\n    .selected-entities-control .ui-select-container>div:first-child {\\n        max-height: 300px;\\n        overflow-y: scroll;\\n        overflow-x: hidden;\\n    }\\n\\n</style> <form name=widgetSelectionForm novalidate role=form ng-submit=saveChangesDialog()> <div class=modal-header> <div class=\\\"col-xs-12 col-md-12\\\"> <h3 class=\\\"modal-title text-left\\\"> <i class=\\\"fa fa-check-square-o\\\" aria-hidden=true></i> {{\\'ADF.WIDGET.TITLE.SELECTED_ITEMS\\' | translate}}</h3> </div> </div> <div class=modal-body> <div class=col-xs-12> <div class=\\\"form-group selected-entities-control\\\"> <label for=currentSelection translate>ADF.WIDGET.LABEL.CURRENT_SELECTION</label> <ui-select multiple tagging ng-model=currentSelection.selected theme=bootstrap sortable=false title=\\\"{{\\'ADF.WIDGET.TITLE.SELECTED_ITEMS\\' | translate}}\\\"> <ui-select-match placeholder=\\\"{{\\'ADF.WIDGET.PLACEHOLDER.NO_SELECTED\\' | translate}}\\\"> <div class=text-left style=\\\"margin-right: 15px;font-size: 0.9em;max-width:350px;\\\" ng-if=$item.value.visible> <span style=\\\"white-space: initial;word-break: break-word;\\\" ng-repeat=\\\"(k,v) in $item.value.visible track by $index\\\" ng-if=\\\"v !== undefined\\\"> <strong>{{k | translate}}:</strong> {{v}} <br> </span> </div> <div class=text-left style=\\\"margin-right: 15px;font-size: 0.9em;max-width:350px;\\\" ng-if=!$item.value.visible> <span style=\\\"white-space: initial;word-break: break-word;\\\">{{$item.key}}</span> </div> </ui-select-match> <ui-select-choices repeat=\\\"itemSel in currentSelection.selected | filter:$select.search\\\"> {{itemSel.key}} </ui-select-choices> </ui-select> </div> </div> <div class=\\\"col-xs-12 text-left\\\"> <button type=button class=\\\"btn btn-success btn-sm\\\" ng-click=restoreSelection() ng-disabled=\\\"currentSelection.selected.length === selectedItemsLength\\\" translate>ADF.WIDGET.BUTTON.RESTORE</button> <button type=button class=\\\"btn btn-danger btn-sm\\\" ng-click=clearSelection() ng-disabled=\\\"currentSelection.selected.length < 1\\\" translate>ADF.WIDGET.BUTTON.CLEAR</button> </div> </div> <div class=modal-footer> <div permission permission-only=\\\"\\'viewFilter\\'\\\" class=\\\"col-xs-12 col-md-2 text-left\\\"> <div uib-dropdown ng-if=\\\"selectionConfig && selectionConfig.filterTypes && currentSelection.selected.length > 0\\\"> <button id=applyFilterBy type=button class=\\\"btn btn-primary\\\" uib-dropdown-toggle> <i class=\\\"glyphicon glyphicon-filter pointer\\\"></i> {{\\'ADF.WIDGET.BUTTON.FILTER_BY\\' | translate}} <span class=caret></span> </button> <ul class=dropdown-menu uib-dropdown-menu role=menu aria-labelledby=applyFilterBy> <li role=menuitem ng-repeat=\\\"filterType in selectionConfig.filterTypes\\\"> <a href ng-click=applyFilter(filterType) title=\\\"{{\\'ADF.WIDGET.BUTTON.SELECTED\\' | translate:{filterType: filterType} }}\\\">{{\\'ADF.WIDGET.BUTTON.SELECTED\\' | translate:{filterType: filterType} }}</a> </li> </ul> </div> </div> <div permission permission-only=\\\"\\'executeOperation\\'\\\" class=\\\"col-xs-12 col-md-3 text-left\\\"> <div uib-dropdown ng-if=\\\"selectionConfig && selectionConfig.operationTypes && currentSelection.selected.length > 0\\\"> <button id=executeOperation type=button class=\\\"btn btn-primary\\\" uib-dropdown-toggle> <i class=\\\"glyphicon glyphicon-flash pointer\\\"></i> {{\\'ADF.WIDGET.BUTTON.EXECUTE_OPERATION\\' | translate}} <span class=caret></span> </button> <ul class=dropdown-menu uib-dropdown-menu role=menu aria-labelledby=executeOperation> <li role=menuitem ng-repeat=\\\"operationType in selectionConfig.operationTypes\\\"> <a href ng-click=executeOperation(operationType) title={{operationType|translate}}>{{operationType|translate}}</a> </li> </ul> </div> </div> <div class=\\\"col-xs-12 col-md-7 text-right\\\"> <button type=submit class=\\\"btn btn-primary\\\" ng-disabled=\\\"currentSelection.selected.length === selectedItemsLength\\\" translate value=\\\"{{\\'ADF.WIDGET.BUTTON.APPLY\\' | translate }}\\\">ADF.WIDGET.BUTTON.APPLY</button> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() translate>ADF.COMMON.CLOSE</button> </div> </div> </form> \");}]);\n})(window);"]}