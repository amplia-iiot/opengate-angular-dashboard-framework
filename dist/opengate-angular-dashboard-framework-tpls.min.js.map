{"version":3,"sources":["adf.js","adf.locale.js","column.js","dashboard.js","locale-constant.js","order-by-object-key.js","provider.js","opengate-angular-dashboard-framework-tpls.min.js","row.js","structure-preview.js","widget-content.js","widget-service.js","widget.js","opengate-angular-dashboard-framework.tpl.js","opengate-angular-dashboard-framework-tpls.js"],"names":["window","undefined","angular","module","value","directive","$log","$compile","$rootScope","adfTemplatePath","rowTemplate","dashboard","moveWidgetInColumn","$scope","column","evt","widgets","$apply","splice","newIndex","oldIndex","$broadcast","findWidget","index","widget","i","length","w","idEquals","wid","findColumn","model","rows","r","j","columns","c","cid","getId","el","id","getAttribute","addWidgetToColumn","targetColumn","from","sourceColumn","item","warn","removeWidgetFromColumn","applySortable","$element","sortable","Sortable","create","group","handle","ghostClass","animation","onAdd","onRemove","onUpdate","on","destroy","restrict","replace","scope","editMode","continuousEditMode","adfModel","options","templateUrl","link","col","isDefined","isArray","cloned","append","$timeout","$uibModal","$faIcons","stringToBoolean","string","toLowerCase","Boolean","copyWidgets","source","target","shift","push","fillStructure","root","counter","forEach","row","isUndefined","readColumns","changeStructure","structure","copy","createConfiguration","type","cfg","config","createWidget","wdgt","findFirstWidgetColumn","error","addNewWidgetToModel","name","forceToSave","unshift","isEditModeImmediate","edit","immediate","openEditMode","split","object","size","arr","key","createCategories","categories","category","transclude","collapsible","editable","maximizable","adfWidgetFilter","hideButtons","controller","getNewModalScope","$new","translate","widgetFilter","structureName","$watch","oldVal","newVal","structures","title","titleTemplateUrl","editClass","deleteDashboard","dashData","toggleEditMode","openConfigWindow","modelCopy","editDashboardDialog","saveTemporalDashboard","temporal","adfToggleEditMode","$on","event","isNewDashboard","adfCancelEditMode","cancelEditMode","collapseAll","collapseExpandStatus","adfEditDashboardDialog","adfLaunchSearchingFromWidget","configFilter","adfWindowTimeChangedFromWidget","windowFilter","editDashboardScope","description","icon","availableIcons","list","adfEditTemplatePath","editTemplateUrl","instance","open","backdrop","keyboard","info","closeDialog","close","$destroy","adfOpenWidgetFromOther","internal_config","_config","merge","adfOpenModalWidgetFromOther","widgetType","fullScreenScope","definition","opts","modalSize","windowClass","persistDashboard","this","$parent","adfAddWidgetDialog","addWidgetDialog","addScope","isFunction","adfAddTemplatePath","addTemplateUrl","addWidget","$attr","enableConfirmDelete","constant","defaultLocale","frameworkLocales","en-GB","ADF_COMMON_CLOSE","ADF_COMMON_DELETE","ADF_COMMON_TITLE","ADF_COMMON_DESCRIPTION","ADF_COMMON_CANCEL","ADF_COMMON_APPLY","ADF_COMMON_EDIT_DASHBOARD","ADF_EDIT_DASHBOARD_STRUCTURE_LABEL","ADF_DASHBOARD_TITLE_TOOLTIP_ADD","ADF_DASHBOARD_TITLE_TOOLTIP_SAVE","ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE","ADF_DASHBOARD_TITLE_TOOLTIP_UNDO","ADF_WIDGET_ADD_HEADER","ADF_WIDGET_DELETE_CONFIRM_MESSAGE","ADF_WIDGET_TOOLTIP_REFRESH","ADF_WIDGET_TOOLTIP_PRINT","ADF_WIDGET_TOOLTIP_FILTER","ADF_WIDGET_TOOLTIP_SORT","ADF_WIDGET_TOOLTIP_MOVE","ADF_WIDGET_TOOLTIP_COLLAPSE","ADF_WIDGET_TOOLTIP_EXPAND","ADF_WIDGET_TOOLTIP_EDIT","ADF_WIDGET_TOOLTIP_FULLSCREEN","ADF_WIDGET_TOOLTIP_REMOVE","ADF_WIDGET_TOOLTIP_OPERATION","ADF_WIDGET_TOOLTIP_SELECTION","ADF_WIDGET_CLEAR","ADF_WIDGET_RESTORE","ADF_WIDGET_FILTER","sv-SE","filter","$filter","array","objectKey","provider","adfLocale","getLocales","locales","getActiveLocale","activeLocale","label","translation","widgetsPath","messageTemplate","loadingTemplate","customWidgetTemplatePath","defaultApplyFunction","extend","reload","frameless","apply","path","template","templatePath","setLocale","locale","Error","addLocale","translations","isString","isObject","$get","Date","getTime","other","toString","columnTemplate","adjustRowHeight","container","height","style","prepareStructure","preview","selected","$q","widgetService","$controller","$injector","renderError","msg","html","compileWidget","currentScope","configChanged","_getWindowTime","newScope","to","moment","subtract","_d","content","editing","is_menu","menu","is_itemsPerPage","itemsPerPage","reloadData","renderWidget","getWindowTime","winTime","eval","rawdate","format","templateScope","selectionManager","base","resolvers","$tpl","getTemplate","resolve","promise","get","invoke","all","then","locals","resolveAs","templateCtrl","controllerAs","children","data","contents","reason","widgetConfigChangedEvt","widgetReloadEvt","factory","$http","$sce","$templateCache","parseUrl","url","parsedUrl","indexOf","substring","exposed","deferred","defer","tpl","getTrustedResourceUrl","success","response","put","reject","$interval","Filter","preLink","styleClass","fromJson","reloadPeriod","show_modal_footer","show_reload_config","widgetState","isCollapsed","collapsed","debug","postLink","_setReloadTimeout","stopReloadTimeout","cancel","deleteWidget","remove","deleteScope","deleteTemplateUrl","deleteDialog","print","isExecuteOperationEnabled","entityKey","oql","executeOperation","completeReload","sort","direction","toggleAdvanced","search","json","quick","fields","customFilter","v","toggleFilter","advanced","filterAvailable","showFilter","showFinalFilter","launchSearching","element","addCustomFilter","launchCustomFilter","and","like","JSON","stringify","deleteFilter","launchSearchingAdv","applyFilter","launchSearchingQuick","timeObj","enter","keycode","keyCode","which","customSelectors","getCustomSelectors","widgetSelectors","findFields","err","getcustomFilter","ifCustomFilter","showCustomFields","changeDirection","debugQuery","parseQuery","toJson","unknownWords","autocomplete_options","suggest","suggest_field_delimited","selectedItems","currentSelection","isSelected","obj","totalSelected","Object","keys","manageSelectedItems","selectionScope","selectionConfig","manageItemsSelectedTemplate","restoreSelection","clearSelection","customOql","filterAction","operationType","saveChangesDialog","finalSelection","idx","visible","selectedItemsLength","lastItem","createApplyPromise","result","when","editScope","saveDialog","validationError","applyFn","adfDashboardCollapseExpand","args","adfWidgetEnterEditMode","adfIsEditMode","adfDashboardChanged","adfDashboardEditsCancelled","widgetClasses","classes","openFullScreen","openFilter","openAboutScreen","modalInstance","$uibModalInstance","information","about","ok","selectedItem","saveWidgetScreen","wId","$emit","objectSelector","fileName","addItemToSelection","removeItemFromSelection","compile","pre","post","run"],"mappings":"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","file":"opengate-angular-dashboard-framework-tpls.min.js","sourcesContent":["/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('adf', ['adf.provider', 'adf.locale', 'ui.bootstrap', 'opengate-angular-js'])\r\n    .value('adfTemplatePath', '../src/templates/')\r\n    .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\r\n    .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\r\n    .value('adfVersion', '<<adfVersion>>');","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('adf.locale', [])\r\n","/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardColumn', function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\r\n    'use strict';\r\n\r\n    /**\r\n     * moves a widget in between a column\r\n     */\r\n    function moveWidgetInColumn($scope, column, evt){\r\n      var widgets = column.widgets;\r\n      // move widget and apply to scope\r\n      $scope.$apply(function(){\r\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\r\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * finds a widget by its id in the column\r\n     */\r\n    function findWidget(column, index){\r\n      var widget = null;\r\n      for (var i=0; i<column.widgets.length; i++){\r\n        var w = column.widgets[i];\r\n        if (dashboard.idEquals(w.wid,index)){\r\n          widget = w;\r\n          break;\r\n        }\r\n      }\r\n      return widget;\r\n    }\r\n\r\n    /**\r\n     * finds a column by its id in the model\r\n     */\r\n    function findColumn(model, index){\r\n      var column = null;\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var r = model.rows[i];\r\n        for (var j=0; j<r.columns.length; j++){\r\n          var c = r.columns[j];\r\n          if (dashboard.idEquals(c.cid, index)){\r\n            column = c;\r\n            break;\r\n          } else if (c.rows){\r\n            column = findColumn(c, index);\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    /**\r\n     * get the adf id from an html element\r\n     */\r\n    function getId(el){\r\n      var id = el.getAttribute('adf-id');\r\n      return id ? id : '-1';\r\n    }\r\n\r\n    /**\r\n     * adds a widget to a column\r\n     */\r\n    function addWidgetToColumn($scope, model, targetColumn, evt){\r\n      // find source column\r\n      var cid = getId(evt.from);\r\n      var sourceColumn = findColumn(model, cid);\r\n\r\n      if (sourceColumn){\r\n        // find moved widget\r\n        var wid = getId(evt.item);\r\n        var widget = findWidget(sourceColumn, wid);\r\n\r\n        if (widget){\r\n          // add new item and apply to scope\r\n          $scope.$apply(function(){\r\n            if (!targetColumn.widgets) {\r\n              targetColumn.widgets = [];\r\n            }\r\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\r\n\r\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\r\n          });\r\n        } else {\r\n          $log.warn('could not find widget with id ' + wid);\r\n        }\r\n      } else {\r\n        $log.warn('could not find column with id ' + cid);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * removes a widget from a column\r\n     */\r\n    function removeWidgetFromColumn($scope, column, evt){\r\n      // remove old item and apply to scope\r\n      $scope.$apply(function(){\r\n        column.widgets.splice(evt.oldIndex, 1);\r\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * enable sortable\r\n     */\r\n    function applySortable($scope, $element, model, column){\r\n      // enable drag and drop\r\n      var el = $element[0];\r\n      var sortable = Sortable.create(el, {\r\n        group: 'widgets',\r\n        handle: '.adf-move',\r\n        ghostClass: 'placeholder',\r\n        animation: 150,\r\n        onAdd: function(evt){\r\n          addWidgetToColumn($scope, model, column, evt);\r\n        },\r\n        onRemove: function(evt){\r\n          removeWidgetFromColumn($scope, column, evt);\r\n        },\r\n        onUpdate: function(evt){\r\n          moveWidgetInColumn($scope, column, evt);\r\n        }\r\n      });\r\n\r\n      // destroy sortable on column destroy event\r\n      $element.on('$destroy', function () {\r\n        // check sortable element, before calling destroy\r\n        // see https://github.com/sdorra/angular-dashboard-framework/issues/118\r\n        if (sortable.el){\r\n          sortable.destroy();\r\n        }\r\n      });\r\n    }\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        column: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        adfModel: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\r\n      link: function ($scope, $element) {\r\n        // set id\r\n        var col = $scope.column;\r\n        if (!col.cid){\r\n          col.cid = dashboard.id();\r\n        }\r\n\r\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\r\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\r\n          $compile(rowTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        } else {\r\n          // enable drag and drop for widget only columns\r\n          applySortable($scope, $element, $scope.adfModel, col);\r\n        }\r\n      }\r\n    };\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name adf.directive:adfDashboard\r\n * @element div\r\n * @restrict EA\r\n * @scope\r\n * @description\r\n *\r\n * `adfDashboard` is a directive which renders the dashboard with all its\r\n * components. The directive requires a name attribute. The name of the\r\n * dashboard can be used to store the model.\r\n *\r\n * @param {string} name name of the dashboard. This attribute is required.\r\n * @param {boolean=} editable false to disable the editmode of the dashboard.\r\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\r\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\r\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\r\n * @param {string=} structure the default structure of the dashboard.\r\n * @param {object=} adfModel model object of the dashboard.\r\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\r\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\r\n *                   events during edit mode not reset it if edit mode is exited.\r\n * @param {boolean=} categories enable categories for the add widget dialog.\r\n */\r\n\r\nangular.module('adf')\r\n    .directive('adfDashboard', function($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath, $faIcons) {\r\n        'use strict';\r\n\r\n        function stringToBoolean(string) {\r\n            switch (angular.isDefined(string) ? string.toLowerCase() : null) {\r\n                case 'true':\r\n                case 'yes':\r\n                case '1':\r\n                    return true;\r\n                case 'false':\r\n                case 'no':\r\n                case '0':\r\n                case null:\r\n                    return false;\r\n                default:\r\n                    return Boolean(string);\r\n            }\r\n        }\r\n\r\n        function copyWidgets(source, target) {\r\n            if (source.widgets && source.widgets.length > 0) {\r\n                var w = source.widgets.shift();\r\n                while (w) {\r\n                    target.widgets.push(w);\r\n                    w = source.widgets.shift();\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Copy widget from old columns to the new model\r\n         * @param object root the model\r\n         * @param array of columns\r\n         * @param counter\r\n         */\r\n        function fillStructure(root, columns, counter) {\r\n            counter = counter || 0;\r\n\r\n            if (angular.isDefined(root.rows)) {\r\n                angular.forEach(root.rows, function(row) {\r\n                    angular.forEach(row.columns, function(column) {\r\n                        // if the widgets prop doesn't exist, create a new array for it.\r\n                        // this allows ui.sortable to do it's thing without error\r\n                        if (!column.widgets) {\r\n                            column.widgets = [];\r\n                        }\r\n\r\n                        // if a column exist at the counter index, copy over the column\r\n                        if (angular.isDefined(columns[counter])) {\r\n                            // do not add widgets to a column, which uses nested rows\r\n                            if (angular.isUndefined(column.rows)) {\r\n                                copyWidgets(columns[counter], column);\r\n                                counter++;\r\n                            }\r\n                        }\r\n\r\n                        // run fillStructure again for any sub rows/columns\r\n                        counter = fillStructure(column, columns, counter);\r\n                    });\r\n                });\r\n            }\r\n            return counter;\r\n        }\r\n\r\n        /**\r\n         * Read Columns: recursively searches an object for the 'columns' property\r\n         * @param object model\r\n         * @param array  an array of existing columns; used when recursion happens\r\n         */\r\n        function readColumns(root, columns) {\r\n            columns = columns || [];\r\n\r\n            if (angular.isDefined(root.rows)) {\r\n                angular.forEach(root.rows, function(row) {\r\n                    angular.forEach(row.columns, function(col) {\r\n                        columns.push(col);\r\n                        // keep reading columns until we can't any more\r\n                        readColumns(col, columns);\r\n                    });\r\n                });\r\n            }\r\n\r\n            return columns;\r\n        }\r\n\r\n        function changeStructure(model, structure) {\r\n            var columns = readColumns(model);\r\n            var counter = 0;\r\n\r\n            model.rows = angular.copy(structure.rows);\r\n\r\n            while (counter < columns.length) {\r\n                counter = fillStructure(model, columns, counter);\r\n            }\r\n        }\r\n\r\n        function createConfiguration(type) {\r\n            var cfg = {};\r\n            var config = dashboard.widgets[type].config;\r\n            if (config) {\r\n                cfg = angular.copy(config);\r\n            }\r\n            return cfg;\r\n        }\r\n\r\n        function createWidget(type) {\r\n            var wdgt = {};\r\n            var widget = dashboard.widgets[type];\r\n            if (widget) {\r\n                wdgt = angular.copy(widget);\r\n            }\r\n            return wdgt;\r\n        }\r\n\r\n        /**\r\n         * Find first widget column in model.\r\n         *\r\n         * @param dashboard model\r\n         */\r\n        function findFirstWidgetColumn(model) {\r\n            var column = null;\r\n            if (!angular.isArray(model.rows)) {\r\n                $log.error('model does not have any rows');\r\n                return null;\r\n            }\r\n            for (var i = 0; i < model.rows.length; i++) {\r\n                var row = model.rows[i];\r\n                if (angular.isArray(row.columns)) {\r\n                    for (var j = 0; j < row.columns.length; j++) {\r\n                        var col = row.columns[j];\r\n                        if (!col.rows) {\r\n                            column = col;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if (column) {\r\n                    break;\r\n                }\r\n            }\r\n            return column;\r\n        }\r\n\r\n        /**\r\n         * Adds the widget to first column of the model.\r\n         *\r\n         * @param dashboard model\r\n         * @param widget to add to model\r\n         * @param name name of the dashboard\r\n         */\r\n        function addNewWidgetToModel(model, widget, name, forceToSave) {\r\n            if (model) {\r\n                var column = findFirstWidgetColumn(model);\r\n                if (column) {\r\n                    if (!column.widgets) {\r\n                        column.widgets = [];\r\n                    }\r\n                    column.widgets.unshift(widget);\r\n\r\n                    // broadcast added event\r\n                    $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\r\n\r\n                    if (forceToSave) {\r\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n                    }\r\n                } else {\r\n                    $log.error('could not find first widget column');\r\n                }\r\n            } else {\r\n                $log.error('model is undefined');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Checks if the edit mode of the widget should be opened immediately.\r\n         *\r\n         * @param widget type\r\n         */\r\n        function isEditModeImmediate(type) {\r\n            var widget = dashboard.widgets[type];\r\n            return widget && widget.edit && widget.edit.immediate;\r\n        }\r\n\r\n        /**\r\n         * Opens the edit mode of the specified widget.\r\n         *\r\n         * @param dashboard scope\r\n         * @param widget\r\n         */\r\n        function openEditMode($scope, widget) {\r\n            // wait some time before fire enter edit mode event\r\n            $timeout(function() {\r\n                $scope.$broadcast('adfWidgetEnterEditMode', widget);\r\n            }, 200);\r\n        }\r\n\r\n        /**\r\n         * Splits an object into an array multiple objects inside.\r\n         *\r\n         * @param object source object\r\n         * @param size size of array\r\n         *\r\n         * @return array of splitted objects\r\n         */\r\n        function split(object, size) {\r\n            var arr = [];\r\n            var i = 0;\r\n            angular.forEach(object, function(value, key) {\r\n                var index = i++ % size;\r\n                if (!arr[index]) {\r\n                    arr[index] = {};\r\n                }\r\n                arr[index][key] = value;\r\n            });\r\n            return arr;\r\n        }\r\n\r\n        /**\r\n         * Creates object with the category name as key and an array of widgets as value.\r\n         *\r\n         * @param widgets array of widgets\r\n         *\r\n         * @return array of categories\r\n         */\r\n        function createCategories(widgets) {\r\n            var categories = {};\r\n            angular.forEach(widgets, function(widget, key) {\r\n                var category = widget.category;\r\n                // if the widget has no category use a default one\r\n                if (!category) {\r\n                    category = 'Miscellaneous';\r\n                }\r\n                // push widget to category array\r\n                if (angular.isUndefined(categories[category])) {\r\n                    categories[category] = { widgets: {} };\r\n                }\r\n                categories[category].widgets[key] = widget;\r\n            });\r\n            return categories;\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            scope: {\r\n                structure: '@',\r\n                name: '@',\r\n                collapsible: '@',\r\n                editable: '@',\r\n                editMode: '@',\r\n                continuousEditMode: '=',\r\n                maximizable: '@',\r\n                adfModel: '=',\r\n                adfWidgetFilter: '=',\r\n                categories: '@',\r\n                hideButtons: '='\r\n            },\r\n            controller: function($scope) {\r\n                var model = {};\r\n                var structure = {};\r\n                var widgetFilter = null;\r\n                var structureName = {};\r\n                var name = $scope.name;\r\n\r\n                // Watching for changes on adfModel\r\n                $scope.$watch('adfModel', function(oldVal, newVal) {\r\n                    // has model changed or is the model attribute not set\r\n                    if (newVal !== null || (oldVal === null && newVal === null)) {\r\n                        model = $scope.adfModel;\r\n                        widgetFilter = $scope.adfWidgetFilter;\r\n                        if (!model || !model.rows) {\r\n                            structureName = $scope.structure;\r\n                            structure = dashboard.structures[structureName];\r\n                            if (structure) {\r\n                                if (model) {\r\n                                    model.rows = angular.copy(structure).rows;\r\n                                } else {\r\n                                    model = angular.copy(structure);\r\n                                }\r\n                                model.structure = structureName;\r\n                            } else {\r\n                                $log.error('could not find structure ' + structureName);\r\n                            }\r\n                        }\r\n\r\n                        if (model) {\r\n                            if (!model.title) {\r\n                                model.title = 'Empty Dashboard';\r\n                            }\r\n                            if (!model.titleTemplateUrl) {\r\n                                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\r\n                            }\r\n                            $scope.model = model;\r\n                        } else {\r\n                            $log.error('could not find or create model');\r\n                        }\r\n                    }\r\n                }, true);\r\n\r\n                // edit mode\r\n                $scope.editMode = false;\r\n                $scope.editClass = '';\r\n\r\n                //passs translate function from dashboard so we can translate labels inside html templates\r\n                $scope.translate = dashboard.translate;\r\n\r\n                function getNewModalScope() {\r\n                    var scope = $scope.$new();\r\n                    //pass translate function to the new scope so we can translate the labels inside the modal dialog\r\n                    scope.translate = dashboard.translate;\r\n                    return scope;\r\n                }\r\n\r\n                $scope.deleteDashboard = function() {\r\n                    var dashData = {\r\n                        id: model.id,\r\n                        name: model.title\r\n                    };\r\n\r\n                    $rootScope.$broadcast('dashboardDelete', dashData);\r\n                };\r\n\r\n                $scope.toggleEditMode = function(openConfigWindow) {\r\n                    $scope.editMode = !$scope.editMode;\r\n                    if ($scope.editMode) {\r\n                        if (!$scope.continuousEditMode) {\r\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n                            $rootScope.$broadcast('adfIsEditMode');\r\n                        }\r\n\r\n                        if (openConfigWindow) {\r\n                            $scope.editDashboardDialog();\r\n                        }\r\n                    }\r\n\r\n                    if (!$scope.editMode) {\r\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n                    }\r\n                };\r\n\r\n                $scope.saveTemporalDashboard = function() {\r\n                    delete model.temporal;\r\n                    $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n                };\r\n\r\n                var adfToggleEditMode = $scope.$on('adfToggleEditMode', function(event, isNewDashboard) {\r\n                    if (isNewDashboard) {\r\n                        $scope.toggleEditMode(true);\r\n                    } else {\r\n                        $scope.toggleEditMode();\r\n                    }\r\n                });\r\n\r\n                var adfCancelEditMode = $scope.$on('adfCancelEditMode', function(event, isNewDashboard) {\r\n                    if ($scope.editMode) {\r\n                        $scope.cancelEditMode();\r\n                    }\r\n                });\r\n\r\n                $scope.collapseAll = function(collapseExpandStatus) {\r\n                    $rootScope.$broadcast('adfDashboardCollapseExpand', { collapseExpandStatus: collapseExpandStatus });\r\n                };\r\n\r\n                $scope.cancelEditMode = function() {\r\n                    $scope.editMode = false;\r\n                    if (!$scope.continuousEditMode && ($scope.modelCopy !== $scope.adfModel)) {\r\n                        $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\r\n                    }\r\n                    $rootScope.$broadcast('adfDashboardEditsCancelled');\r\n                };\r\n\r\n                var adfEditDashboardDialog = $scope.$on('adfEditDashboardDialog', function(event, isNewDashboard) {\r\n                    if ($scope.editMode) {\r\n                        $scope.editDashboardDialog();\r\n                    }\r\n                });\r\n\r\n                var adfLaunchSearchingFromWidget = $scope.$on('adfLaunchSearchingFromWidget', function(event, widget, configFilter) {\r\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\r\n                });\r\n                var adfWindowTimeChangedFromWidget = $scope.$on('adfWindowTimeChangedFromWidget', function(event, widget, windowFilter) {\r\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\r\n                });\r\n\r\n                // edit dashboard settings\r\n                $scope.editDashboardDialog = function() {\r\n                    var editDashboardScope = getNewModalScope();\r\n                    // create a copy of the title, to avoid changing the title to\r\n                    // \"dashboard\" if the field is empty\r\n                    editDashboardScope.copy = {\r\n                        title: (model.title !== 'Empty Dashboard' ? model.title : ''),\r\n                        description: model.description,\r\n                        icon: model.icon ? model.icon : 'fa-tachometer'\r\n                    };\r\n\r\n                    // pass icon list\r\n                    editDashboardScope.availableIcons = $faIcons.list();\r\n\r\n                    // pass dashboard structure to scope\r\n                    editDashboardScope.structures = dashboard.structures;\r\n\r\n                    // pass split function to scope, to be able to display structures in multiple columns\r\n                    editDashboardScope.split = split;\r\n\r\n                    var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\r\n                    if (model.editTemplateUrl) {\r\n                        adfEditTemplatePath = model.editTemplateUrl;\r\n                    }\r\n                    var instance = $uibModal.open({\r\n                        scope: editDashboardScope,\r\n                        templateUrl: adfEditTemplatePath,\r\n                        backdrop: 'static',\r\n                        keyboard: false,\r\n                        size: 'lg'\r\n                    });\r\n\r\n                    editDashboardScope.changeStructure = function(name, structure) {\r\n                        $log.info('change structure to ' + name);\r\n                        changeStructure(model, structure);\r\n                        if (model.structure !== name) {\r\n                            model.structure = name;\r\n                        }\r\n                    };\r\n                    editDashboardScope.closeDialog = function() {\r\n                        // copy the new title back to the model\r\n                        model.title = editDashboardScope.copy.title;\r\n                        model.description = editDashboardScope.copy.description;\r\n                        model.icon = editDashboardScope.copy.icon;\r\n\r\n                        // close modal and destroy the scope\r\n                        instance.close();\r\n                        editDashboardScope.$destroy();\r\n                    };\r\n                };\r\n\r\n                var adfOpenWidgetFromOther = $scope.$on('adfOpenWidgetFromOther', function(event, widget, config) {\r\n                    var internal_config = createConfiguration(widget);\r\n                    var _config = angular.merge({}, internal_config, config);\r\n                    var w = {\r\n                        type: widget,\r\n                        config: _config,\r\n                        title: _config.title\r\n                    };\r\n                    addNewWidgetToModel(model, w, name, !$scope.editMode);\r\n                });\r\n\r\n                var adfOpenModalWidgetFromOther = $scope.$on('adfOpenModalWidgetFromOther', function(event, widgetType, config) {\r\n                    var widget = createWidget(widgetType);\r\n                    widget.config = angular.merge({}, widget.config, config);\r\n                    widget.type = widgetType;\r\n                    if (widget.config.title) {\r\n                        widget.title = widget.config.title;\r\n                    }\r\n                    var fullScreenScope = $scope.$new();\r\n                    fullScreenScope.definition = fullScreenScope.widget = widget;\r\n                    var opts = {\r\n                        scope: fullScreenScope,\r\n                        templateUrl: adfTemplatePath + 'widget-fullscreen.html',\r\n                        size: fullScreenScope.definition.modalSize || 'lg', // 'sm', 'lg'\r\n                        backdrop: 'static',\r\n                        windowClass: (fullScreenScope.definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\r\n                    };\r\n\r\n                    fullScreenScope.persistDashboard = function() {\r\n                        $rootScope.$broadcast('adfOpenWidgetFromOther', this.$parent.widget.type, this.$parent.widget.config);\r\n                        this.closeDialog();\r\n                    }\r\n\r\n                    var instance = $uibModal.open(opts);\r\n                    fullScreenScope.closeDialog = function() {\r\n                        instance.close();\r\n                        fullScreenScope.$destroy();\r\n                    };\r\n\r\n                });\r\n\r\n                var adfAddWidgetDialog = $scope.$on('adfAddWidgetDialog', function(event, isNewDashboard) {\r\n                    if (!model.temporal && model.editable) {\r\n                        if (!$scope.editMode) {\r\n                            $scope.editMode = true;\r\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n                            $rootScope.$broadcast('adfIsEditMode');\r\n                        }\r\n\r\n                        $scope.addWidgetDialog();\r\n                    }\r\n                });\r\n\r\n                // add widget dialog\r\n                $scope.addWidgetDialog = function() {\r\n                    var addScope = getNewModalScope();\r\n                    var widgets;\r\n                    if (angular.isFunction(widgetFilter)) {\r\n                        widgets = {};\r\n                        angular.forEach(dashboard.widgets, function(widget, type) {\r\n                            if (widgetFilter(widget, type, model)) {\r\n                                widgets[type] = widget;\r\n                            }\r\n                        });\r\n                    } else {\r\n                        widgets = dashboard.widgets;\r\n                    }\r\n                    addScope.widgets = widgets;\r\n\r\n                    //pass translate function to the new scope so we can translate the labels inside the modal dialog\r\n                    addScope.translate = $scope.translate;\r\n\r\n                    // pass createCategories function to scope, if categories option is enabled\r\n                    if ($scope.options.categories) {\r\n                        $scope.createCategories = createCategories;\r\n                    }\r\n\r\n                    var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\r\n                    if (model.addTemplateUrl) {\r\n                        adfAddTemplatePath = model.addTemplateUrl;\r\n                    }\r\n\r\n                    var opts = {\r\n                        scope: addScope,\r\n                        templateUrl: adfAddTemplatePath,\r\n                        backdrop: 'static'\r\n                    };\r\n\r\n                    var instance = $uibModal.open(opts);\r\n                    addScope.addWidget = function(widget) {\r\n                        var w = {\r\n                            type: widget,\r\n                            config: createConfiguration(widget)\r\n                        };\r\n                        addNewWidgetToModel(model, w, name);\r\n                        // close and destroy\r\n                        instance.close();\r\n                        addScope.$destroy();\r\n\r\n                        // check for open edit mode immediately\r\n                        if (isEditModeImmediate(widget)) {\r\n                            openEditMode($scope, w);\r\n                        }\r\n                    };\r\n                    addScope.closeDialog = function() {\r\n                        // close and destroy\r\n                        instance.close();\r\n                        addScope.$destroy();\r\n                    };\r\n                };\r\n\r\n                $scope.addNewWidgetToModel = addNewWidgetToModel;\r\n\r\n                $scope.$on('destroy', function() {\r\n                    adfLaunchSearchingFromWidget();\r\n                    adfWindowTimeChangedFromWidget();\r\n                    adfToggleEditMode();\r\n                    adfOpenWidgetFromOther();\r\n                    adfOpenModalWidgetFromOther();\r\n                    adfCancelEditMode();\r\n                    adfAddWidgetDialog();\r\n                    adfEditDashboardDialog();\r\n                });\r\n            },\r\n            link: function($scope, $element, $attr) {\r\n                // pass options to scope\r\n                var options = {\r\n                    name: $attr.name,\r\n                    editable: true,\r\n                    enableConfirmDelete: stringToBoolean($attr.enableConfirmDelete),\r\n                    maximizable: stringToBoolean($attr.maximizable),\r\n                    collapsible: stringToBoolean($attr.collapsible),\r\n                    categories: stringToBoolean($attr.categories)\r\n                };\r\n                if (angular.isDefined($attr.editable)) {\r\n                    options.editable = stringToBoolean($attr.editable);\r\n                }\r\n                $scope.options = options;\r\n            },\r\n            templateUrl: adfTemplatePath + 'dashboard.html'\r\n        };\r\n    });","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * @ngdoc object\r\n * @name adf.locale#adfLocale\r\n * @description\r\n *\r\n * Holds settings and values for framework supported locales\r\n */\r\nangular.module('adf.locale')\r\n    .constant('adfLocale', {\r\n        defaultLocale: 'en-GB',\r\n        frameworkLocales: {\r\n            'en-GB': {\r\n                ADF_COMMON_CLOSE: 'Close',\r\n                ADF_COMMON_DELETE: 'Delete',\r\n                ADF_COMMON_TITLE: 'Title',\r\n                ADF_COMMON_DESCRIPTION: 'Description',\r\n                ADF_COMMON_CANCEL: 'Cancel',\r\n                ADF_COMMON_APPLY: 'Apply',\r\n                ADF_COMMON_EDIT_DASHBOARD: 'Edit dashboard',\r\n                ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Structure',\r\n                ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Add new widget',\r\n                ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Save changes',\r\n                ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Enable edit mode',\r\n                ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Undo changes',\r\n                ADF_WIDGET_ADD_HEADER: 'Add new widget',\r\n                ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Are you sure you want to delete this widget ?',\r\n                ADF_WIDGET_TOOLTIP_REFRESH: 'Reload widget Content',\r\n                ADF_WIDGET_TOOLTIP_PRINT: 'Print widget Content',\r\n                ADF_WIDGET_TOOLTIP_FILTER: 'Show widget Filter',\r\n                ADF_WIDGET_TOOLTIP_SORT: 'Show widget Sort',\r\n                ADF_WIDGET_TOOLTIP_MOVE: 'Change widget location',\r\n                ADF_WIDGET_TOOLTIP_COLLAPSE: 'Collapse widget',\r\n                ADF_WIDGET_TOOLTIP_EXPAND: 'Expand widget',\r\n                ADF_WIDGET_TOOLTIP_EDIT: 'Edit widget configuration',\r\n                ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Fullscreen widget',\r\n                ADF_WIDGET_TOOLTIP_REMOVE: 'Remove widget',\r\n                ADF_WIDGET_TOOLTIP_OPERATION: 'Execute operation',\r\n                ADF_WIDGET_TOOLTIP_SELECTION: 'Items selected',\r\n                ADF_WIDGET_CLEAR: 'Clear',\r\n                ADF_WIDGET_RESTORE: 'Restore',\r\n                ADF_WIDGET_FILTER: 'Filter'\r\n            },\r\n            'sv-SE': {\r\n                ADF_COMMON_CLOSE: 'Stäng',\r\n                ADF_COMMON_DELETE: 'Ta bort',\r\n                ADF_COMMON_TITLE: 'Titel',\r\n                ADF_COMMON_DESCRIPTION: 'Description',\r\n                ADF_COMMON_CANCEL: 'Avbryt',\r\n                ADF_COMMON_APPLY: 'Använd',\r\n                ADF_COMMON_EDIT_DASHBOARD: 'Redigera dashboard',\r\n                ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Struktur',\r\n                ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Lägg till ny widget',\r\n                ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Spara förändringar',\r\n                ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Slå på redigeringsläge',\r\n                ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Ångra förändringar',\r\n                ADF_WIDGET_ADD_HEADER: 'Lägg till ny widget',\r\n                ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Är du säker på att du vill ta bort denna widget ?',\r\n                ADF_WIDGET_TOOLTIP_REFRESH: 'Ladda om widget',\r\n                ADF_WIDGET_TOOLTIP_FILTER: 'Show widget Filter',\r\n                ADF_WIDGET_TOOLTIP_SORT: 'Show widget Sort',\r\n                ADF_WIDGET_TOOLTIP_MOVE: 'Ändra widgets position',\r\n                ADF_WIDGET_TOOLTIP_COLLAPSE: 'Stäng widget',\r\n                ADF_WIDGET_TOOLTIP_EXPAND: 'Öppna widget',\r\n                ADF_WIDGET_TOOLTIP_EDIT: 'Ändra widget konfigurering',\r\n                ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Visa widget i fullskärm',\r\n                ADF_WIDGET_TOOLTIP_REMOVE: 'Ta bort widget',\r\n                ADF_WIDGET_TOOLTIP_OPERATION: 'Execute operation',\r\n                ADF_WIDGET_TOOLTIP_SELECTION: 'Items selected',\r\n                ADF_WIDGET_CLEAR: 'Clear',\r\n                ADF_WIDGET_RESTORE: 'Restore',\r\n                ADF_WIDGET_FILTER: 'Filter'\r\n            }\r\n        }\r\n    });","/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .filter('adfOrderByObjectKey', function($filter) {\r\n    'use strict';\r\n\r\n    return function(item, key){\r\n      var array = [];\r\n      angular.forEach(item, function(value, objectKey){\r\n        value[key] = objectKey;\r\n        array.push(value);\r\n      });\r\n      return $filter('orderBy')(array, key);\r\n    };\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * @ngdoc object\r\n * @name adf.dashboardProvider\r\n * @description\r\n *\r\n * The dashboardProvider can be used to register structures and widgets.\r\n */\r\nangular.module('adf.provider', ['adf.locale'])\r\n    .provider('dashboard', function(adfLocale) {\r\n\r\n        var widgets = {};\r\n        var widgetsPath = '';\r\n        var structures = {};\r\n        var messageTemplate = '<div class=\"alert alert-primary\">{}</div>';\r\n        var loadingTemplate = '\\\r\n      <div class=\"progress progress-striped active\">\\n\\\r\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\r\n          <span class=\"sr-only\">loading ...</span>\\n\\\r\n        </div>\\n\\\r\n      </div>';\r\n        var customWidgetTemplatePath = null;\r\n\r\n        // default apply function of widget.edit.apply\r\n        var defaultApplyFunction = function() {\r\n            return true;\r\n        };\r\n\r\n        var activeLocale = adfLocale.defaultLocale;\r\n        var locales = adfLocale.frameworkLocales;\r\n\r\n        function getLocales() {\r\n            return locales;\r\n        }\r\n\r\n        function getActiveLocale() {\r\n            return activeLocale;\r\n        }\r\n\r\n        function translate(label) {\r\n            var translation = locales[activeLocale][label];\r\n            return translation ? translation : label;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#widget\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Registers a new widget.\r\n         *\r\n         * @param {string} name of the widget\r\n         * @param {object} widget to be registered.\r\n         *\r\n         *   Object properties:\r\n         *\r\n         *   - `title` - `{string=}` - The title of the widget.\r\n         *   - `description` - `{string=}` - Description of the widget.\r\n         *   - `category` - `{string=}` - Category of the widget.\r\n         *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\r\n         *   - `config` - `{object}` - Predefined widget configuration.\r\n         *   - `controller` - `{string=|function()=}` - Controller fn that should be\r\n         *      associated with newly created scope of the widget or the name of a\r\n         *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\r\n         *      if passed as a string.\r\n         *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\r\n         *      published to scope under the `controllerAs` name.\r\n         *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\r\n         *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\r\n         *   - `template` - `{string=|function()=}` - html template as a string.\r\n         *   - `templateUrl` - `{string=}` - path to an html template.\r\n         *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\r\n         *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n         *      be injected into the controller. If any of these dependencies are promises, the widget\r\n         *      will wait for them all to be resolved or one to be rejected before the controller is\r\n         *      instantiated.\r\n         *      If all the promises are resolved successfully, the values of the resolved promises are\r\n         *      injected.\r\n         *\r\n         *      The map object is:\r\n         *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\r\n         *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n         *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\r\n         *        and the return value is treated as the dependency. If the result is a promise, it is\r\n         *        resolved before its value is injected into the controller.\r\n         *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n         *      on the scope of the widget.\r\n         *   - `edit` - `{object}` - Edit modus of the widget.\r\n         *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n         *        on the scope of the widget.\r\n         *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\r\n         *        Default is true.\r\n         *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\r\n         *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\r\n         *        The function have to return a boolean or an promise which can be resolved to a boolean.\r\n         *        The function can use injection.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.widget = function(name, widget) {\r\n            var w = angular.extend({ reload: false, frameless: false }, widget);\r\n            if (w.edit) {\r\n                var edit = {\r\n                    reload: true,\r\n                    immediate: false,\r\n                    apply: defaultApplyFunction\r\n                };\r\n                angular.extend(edit, w.edit);\r\n                w.edit = edit;\r\n            }\r\n            widgets[name] = w;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#widgetsPath\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Sets the path to the directory which contains the widgets. The widgets\r\n         * path is used for widgets with a templateUrl which contains the\r\n         * placeholder {widgetsPath}. The placeholder is replaced with the\r\n         * configured value, before the template is loaded, but the template is\r\n         * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\r\n         * The default value of widgetPaths is ''.\r\n         *\r\n         *\r\n         * @param {string} path to the directory which contains the widgets\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.widgetsPath = function(path) {\r\n            widgetsPath = path;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#structure\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Registers a new structure.\r\n         *\r\n         * @param {string} name of the structure\r\n         * @param {object} structure to be registered.\r\n         *\r\n         *   Object properties:\r\n         *\r\n         *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\r\n         *     - `styleClass` - `{string}` - CSS Class of the row.\r\n         *     - `columns` - `{Array.<Object>}` - Columns of the row.\r\n         *       - `styleClass` - `{string}` - CSS Class of the column.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.structure = function(name, structure) {\r\n            structures[name] = structure;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#messageTemplate\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the template for messages.\r\n         *\r\n         * @param {string} template for messages.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.messageTemplate = function(template) {\r\n            messageTemplate = template;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#loadingTemplate\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the template which is displayed as\r\n         * long as the widget resources are not resolved.\r\n         *\r\n         * @param {string} template loading template\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.loadingTemplate = function(template) {\r\n            loadingTemplate = template;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#customWidgetTemplatePath\r\n         * @propertyOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the container template for the widgets\r\n         *\r\n         * @param {string} path to the custom widget template\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.customWidgetTemplatePath = function(templatePath) {\r\n            customWidgetTemplatePath = templatePath;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#setLocale\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the locale setting of adf\r\n         *\r\n         * @param {string} ISO Language Code\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.setLocale = function(locale) {\r\n            if (locales[locale]) {\r\n                activeLocale = locale;\r\n            } else {\r\n                throw new Error('Cannot set locale: ' + locale + '. Locale is not defined.');\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#addLocale\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Adds a new locale to adf\r\n         *\r\n         * @param {string} ISO Language Code for the new locale\r\n         * @param {object} translations for the locale.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.addLocale = function(locale, translations) {\r\n            if (!angular.isString(locale)) {\r\n                throw new Error('locale must be an string');\r\n            }\r\n\r\n            if (!angular.isObject(translations)) {\r\n                throw new Error('translations must be an object');\r\n            }\r\n\r\n            locales[locale] = translations;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc service\r\n         * @name adf.dashboard\r\n         * @description\r\n         *\r\n         * The dashboard holds all options, structures and widgets.\r\n         *\r\n         * @property {Array.<Object>} widgets Array of registered widgets.\r\n         * @property {string} widgetsPath Default path for widgets.\r\n         * @property {Array.<Object>} structures Array of registered structures.\r\n         * @property {string} messageTemplate Template for messages.\r\n         * @property {string} loadingTemplate Template for widget loading.\r\n         * @property {method} sets locale of adf.\r\n         * @property {Array.<Object>} hold all of the locale translations.\r\n         * @property {string} the active locale setting.\r\n         * @property {method} translation function passed to templates.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.$get = function() {\r\n            var cid = 0;\r\n\r\n            return {\r\n                widgets: widgets,\r\n                widgetsPath: widgetsPath,\r\n                structures: structures,\r\n                messageTemplate: messageTemplate,\r\n                loadingTemplate: loadingTemplate,\r\n                setLocale: this.setLocale,\r\n                locales: getLocales,\r\n                activeLocale: getActiveLocale,\r\n                translate: translate,\r\n                customWidgetTemplatePath: customWidgetTemplatePath,\r\n\r\n                /**\r\n                 * @ngdoc method\r\n                 * @name adf.dashboard#id\r\n                 * @methodOf adf.dashboard\r\n                 * @description\r\n                 *\r\n                 * Creates an ongoing numeric id. The method is used to create ids for\r\n                 * columns and widgets in the dashboard.\r\n                 */\r\n                id: function() {\r\n                    return new Date().getTime() + '-' + (++cid);\r\n                },\r\n\r\n                /**\r\n                 * @ngdoc method\r\n                 * @name adf.dashboard#idEqual\r\n                 * @methodOf adf.dashboard\r\n                 * @description\r\n                 *\r\n                 * Checks if the given ids are equal.\r\n                 *\r\n                 * @param {string} id widget or column id\r\n                 * @param {string} other widget or column id\r\n                 */\r\n                idEquals: function(id, other) {\r\n                    // use toString, because old ids are numbers\r\n                    return ((id) && (other)) && (id.toString() === other.toString());\r\n                }\r\n            };\r\n        };\r\n\r\n    });","(function(window, undefined) {'use strict';\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf', ['adf.provider', 'adf.locale', 'ui.bootstrap', 'opengate-angular-js'])\r\n    .value('adfTemplatePath', '../src/templates/')\r\n    .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\r\n    .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\r\n    .value('adfVersion', '2.5.0');\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf.locale', [])\r\n\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardColumn', [\"$log\", \"$compile\", \"$rootScope\", \"adfTemplatePath\", \"rowTemplate\", \"dashboard\", function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\r\n    \r\n\r\n    /**\r\n     * moves a widget in between a column\r\n     */\r\n    function moveWidgetInColumn($scope, column, evt){\r\n      var widgets = column.widgets;\r\n      // move widget and apply to scope\r\n      $scope.$apply(function(){\r\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\r\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * finds a widget by its id in the column\r\n     */\r\n    function findWidget(column, index){\r\n      var widget = null;\r\n      for (var i=0; i<column.widgets.length; i++){\r\n        var w = column.widgets[i];\r\n        if (dashboard.idEquals(w.wid,index)){\r\n          widget = w;\r\n          break;\r\n        }\r\n      }\r\n      return widget;\r\n    }\r\n\r\n    /**\r\n     * finds a column by its id in the model\r\n     */\r\n    function findColumn(model, index){\r\n      var column = null;\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var r = model.rows[i];\r\n        for (var j=0; j<r.columns.length; j++){\r\n          var c = r.columns[j];\r\n          if (dashboard.idEquals(c.cid, index)){\r\n            column = c;\r\n            break;\r\n          } else if (c.rows){\r\n            column = findColumn(c, index);\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    /**\r\n     * get the adf id from an html element\r\n     */\r\n    function getId(el){\r\n      var id = el.getAttribute('adf-id');\r\n      return id ? id : '-1';\r\n    }\r\n\r\n    /**\r\n     * adds a widget to a column\r\n     */\r\n    function addWidgetToColumn($scope, model, targetColumn, evt){\r\n      // find source column\r\n      var cid = getId(evt.from);\r\n      var sourceColumn = findColumn(model, cid);\r\n\r\n      if (sourceColumn){\r\n        // find moved widget\r\n        var wid = getId(evt.item);\r\n        var widget = findWidget(sourceColumn, wid);\r\n\r\n        if (widget){\r\n          // add new item and apply to scope\r\n          $scope.$apply(function(){\r\n            if (!targetColumn.widgets) {\r\n              targetColumn.widgets = [];\r\n            }\r\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\r\n\r\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\r\n          });\r\n        } else {\r\n          $log.warn('could not find widget with id ' + wid);\r\n        }\r\n      } else {\r\n        $log.warn('could not find column with id ' + cid);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * removes a widget from a column\r\n     */\r\n    function removeWidgetFromColumn($scope, column, evt){\r\n      // remove old item and apply to scope\r\n      $scope.$apply(function(){\r\n        column.widgets.splice(evt.oldIndex, 1);\r\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * enable sortable\r\n     */\r\n    function applySortable($scope, $element, model, column){\r\n      // enable drag and drop\r\n      var el = $element[0];\r\n      var sortable = Sortable.create(el, {\r\n        group: 'widgets',\r\n        handle: '.adf-move',\r\n        ghostClass: 'placeholder',\r\n        animation: 150,\r\n        onAdd: function(evt){\r\n          addWidgetToColumn($scope, model, column, evt);\r\n        },\r\n        onRemove: function(evt){\r\n          removeWidgetFromColumn($scope, column, evt);\r\n        },\r\n        onUpdate: function(evt){\r\n          moveWidgetInColumn($scope, column, evt);\r\n        }\r\n      });\r\n\r\n      // destroy sortable on column destroy event\r\n      $element.on('$destroy', function () {\r\n        // check sortable element, before calling destroy\r\n        // see https://github.com/sdorra/angular-dashboard-framework/issues/118\r\n        if (sortable.el){\r\n          sortable.destroy();\r\n        }\r\n      });\r\n    }\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        column: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        adfModel: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\r\n      link: function ($scope, $element) {\r\n        // set id\r\n        var col = $scope.column;\r\n        if (!col.cid){\r\n          col.cid = dashboard.id();\r\n        }\r\n\r\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\r\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\r\n          $compile(rowTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        } else {\r\n          // enable drag and drop for widget only columns\r\n          applySortable($scope, $element, $scope.adfModel, col);\r\n        }\r\n      }\r\n    };\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name adf.directive:adfDashboard\r\n * @element div\r\n * @restrict EA\r\n * @scope\r\n * @description\r\n *\r\n * `adfDashboard` is a directive which renders the dashboard with all its\r\n * components. The directive requires a name attribute. The name of the\r\n * dashboard can be used to store the model.\r\n *\r\n * @param {string} name name of the dashboard. This attribute is required.\r\n * @param {boolean=} editable false to disable the editmode of the dashboard.\r\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\r\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\r\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\r\n * @param {string=} structure the default structure of the dashboard.\r\n * @param {object=} adfModel model object of the dashboard.\r\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\r\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\r\n *                   events during edit mode not reset it if edit mode is exited.\r\n * @param {boolean=} categories enable categories for the add widget dialog.\r\n */\r\n\r\nangular.module('adf')\r\n    .directive('adfDashboard', [\"$rootScope\", \"$log\", \"$timeout\", \"$uibModal\", \"dashboard\", \"adfTemplatePath\", \"$faIcons\", function($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath, $faIcons) {\r\n        \r\n\r\n        function stringToBoolean(string) {\r\n            switch (angular.isDefined(string) ? string.toLowerCase() : null) {\r\n                case 'true':\r\n                case 'yes':\r\n                case '1':\r\n                    return true;\r\n                case 'false':\r\n                case 'no':\r\n                case '0':\r\n                case null:\r\n                    return false;\r\n                default:\r\n                    return Boolean(string);\r\n            }\r\n        }\r\n\r\n        function copyWidgets(source, target) {\r\n            if (source.widgets && source.widgets.length > 0) {\r\n                var w = source.widgets.shift();\r\n                while (w) {\r\n                    target.widgets.push(w);\r\n                    w = source.widgets.shift();\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Copy widget from old columns to the new model\r\n         * @param object root the model\r\n         * @param array of columns\r\n         * @param counter\r\n         */\r\n        function fillStructure(root, columns, counter) {\r\n            counter = counter || 0;\r\n\r\n            if (angular.isDefined(root.rows)) {\r\n                angular.forEach(root.rows, function(row) {\r\n                    angular.forEach(row.columns, function(column) {\r\n                        // if the widgets prop doesn't exist, create a new array for it.\r\n                        // this allows ui.sortable to do it's thing without error\r\n                        if (!column.widgets) {\r\n                            column.widgets = [];\r\n                        }\r\n\r\n                        // if a column exist at the counter index, copy over the column\r\n                        if (angular.isDefined(columns[counter])) {\r\n                            // do not add widgets to a column, which uses nested rows\r\n                            if (angular.isUndefined(column.rows)) {\r\n                                copyWidgets(columns[counter], column);\r\n                                counter++;\r\n                            }\r\n                        }\r\n\r\n                        // run fillStructure again for any sub rows/columns\r\n                        counter = fillStructure(column, columns, counter);\r\n                    });\r\n                });\r\n            }\r\n            return counter;\r\n        }\r\n\r\n        /**\r\n         * Read Columns: recursively searches an object for the 'columns' property\r\n         * @param object model\r\n         * @param array  an array of existing columns; used when recursion happens\r\n         */\r\n        function readColumns(root, columns) {\r\n            columns = columns || [];\r\n\r\n            if (angular.isDefined(root.rows)) {\r\n                angular.forEach(root.rows, function(row) {\r\n                    angular.forEach(row.columns, function(col) {\r\n                        columns.push(col);\r\n                        // keep reading columns until we can't any more\r\n                        readColumns(col, columns);\r\n                    });\r\n                });\r\n            }\r\n\r\n            return columns;\r\n        }\r\n\r\n        function changeStructure(model, structure) {\r\n            var columns = readColumns(model);\r\n            var counter = 0;\r\n\r\n            model.rows = angular.copy(structure.rows);\r\n\r\n            while (counter < columns.length) {\r\n                counter = fillStructure(model, columns, counter);\r\n            }\r\n        }\r\n\r\n        function createConfiguration(type) {\r\n            var cfg = {};\r\n            var config = dashboard.widgets[type].config;\r\n            if (config) {\r\n                cfg = angular.copy(config);\r\n            }\r\n            return cfg;\r\n        }\r\n\r\n        function createWidget(type) {\r\n            var wdgt = {};\r\n            var widget = dashboard.widgets[type];\r\n            if (widget) {\r\n                wdgt = angular.copy(widget);\r\n            }\r\n            return wdgt;\r\n        }\r\n\r\n        /**\r\n         * Find first widget column in model.\r\n         *\r\n         * @param dashboard model\r\n         */\r\n        function findFirstWidgetColumn(model) {\r\n            var column = null;\r\n            if (!angular.isArray(model.rows)) {\r\n                $log.error('model does not have any rows');\r\n                return null;\r\n            }\r\n            for (var i = 0; i < model.rows.length; i++) {\r\n                var row = model.rows[i];\r\n                if (angular.isArray(row.columns)) {\r\n                    for (var j = 0; j < row.columns.length; j++) {\r\n                        var col = row.columns[j];\r\n                        if (!col.rows) {\r\n                            column = col;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if (column) {\r\n                    break;\r\n                }\r\n            }\r\n            return column;\r\n        }\r\n\r\n        /**\r\n         * Adds the widget to first column of the model.\r\n         *\r\n         * @param dashboard model\r\n         * @param widget to add to model\r\n         * @param name name of the dashboard\r\n         */\r\n        function addNewWidgetToModel(model, widget, name, forceToSave) {\r\n            if (model) {\r\n                var column = findFirstWidgetColumn(model);\r\n                if (column) {\r\n                    if (!column.widgets) {\r\n                        column.widgets = [];\r\n                    }\r\n                    column.widgets.unshift(widget);\r\n\r\n                    // broadcast added event\r\n                    $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\r\n\r\n                    if (forceToSave) {\r\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n                    }\r\n                } else {\r\n                    $log.error('could not find first widget column');\r\n                }\r\n            } else {\r\n                $log.error('model is undefined');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Checks if the edit mode of the widget should be opened immediately.\r\n         *\r\n         * @param widget type\r\n         */\r\n        function isEditModeImmediate(type) {\r\n            var widget = dashboard.widgets[type];\r\n            return widget && widget.edit && widget.edit.immediate;\r\n        }\r\n\r\n        /**\r\n         * Opens the edit mode of the specified widget.\r\n         *\r\n         * @param dashboard scope\r\n         * @param widget\r\n         */\r\n        function openEditMode($scope, widget) {\r\n            // wait some time before fire enter edit mode event\r\n            $timeout(function() {\r\n                $scope.$broadcast('adfWidgetEnterEditMode', widget);\r\n            }, 200);\r\n        }\r\n\r\n        /**\r\n         * Splits an object into an array multiple objects inside.\r\n         *\r\n         * @param object source object\r\n         * @param size size of array\r\n         *\r\n         * @return array of splitted objects\r\n         */\r\n        function split(object, size) {\r\n            var arr = [];\r\n            var i = 0;\r\n            angular.forEach(object, function(value, key) {\r\n                var index = i++ % size;\r\n                if (!arr[index]) {\r\n                    arr[index] = {};\r\n                }\r\n                arr[index][key] = value;\r\n            });\r\n            return arr;\r\n        }\r\n\r\n        /**\r\n         * Creates object with the category name as key and an array of widgets as value.\r\n         *\r\n         * @param widgets array of widgets\r\n         *\r\n         * @return array of categories\r\n         */\r\n        function createCategories(widgets) {\r\n            var categories = {};\r\n            angular.forEach(widgets, function(widget, key) {\r\n                var category = widget.category;\r\n                // if the widget has no category use a default one\r\n                if (!category) {\r\n                    category = 'Miscellaneous';\r\n                }\r\n                // push widget to category array\r\n                if (angular.isUndefined(categories[category])) {\r\n                    categories[category] = { widgets: {} };\r\n                }\r\n                categories[category].widgets[key] = widget;\r\n            });\r\n            return categories;\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            scope: {\r\n                structure: '@',\r\n                name: '@',\r\n                collapsible: '@',\r\n                editable: '@',\r\n                editMode: '@',\r\n                continuousEditMode: '=',\r\n                maximizable: '@',\r\n                adfModel: '=',\r\n                adfWidgetFilter: '=',\r\n                categories: '@',\r\n                hideButtons: '='\r\n            },\r\n            controller: [\"$scope\", function($scope) {\r\n                var model = {};\r\n                var structure = {};\r\n                var widgetFilter = null;\r\n                var structureName = {};\r\n                var name = $scope.name;\r\n\r\n                // Watching for changes on adfModel\r\n                $scope.$watch('adfModel', function(oldVal, newVal) {\r\n                    // has model changed or is the model attribute not set\r\n                    if (newVal !== null || (oldVal === null && newVal === null)) {\r\n                        model = $scope.adfModel;\r\n                        widgetFilter = $scope.adfWidgetFilter;\r\n                        if (!model || !model.rows) {\r\n                            structureName = $scope.structure;\r\n                            structure = dashboard.structures[structureName];\r\n                            if (structure) {\r\n                                if (model) {\r\n                                    model.rows = angular.copy(structure).rows;\r\n                                } else {\r\n                                    model = angular.copy(structure);\r\n                                }\r\n                                model.structure = structureName;\r\n                            } else {\r\n                                $log.error('could not find structure ' + structureName);\r\n                            }\r\n                        }\r\n\r\n                        if (model) {\r\n                            if (!model.title) {\r\n                                model.title = 'Empty Dashboard';\r\n                            }\r\n                            if (!model.titleTemplateUrl) {\r\n                                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\r\n                            }\r\n                            $scope.model = model;\r\n                        } else {\r\n                            $log.error('could not find or create model');\r\n                        }\r\n                    }\r\n                }, true);\r\n\r\n                // edit mode\r\n                $scope.editMode = false;\r\n                $scope.editClass = '';\r\n\r\n                //passs translate function from dashboard so we can translate labels inside html templates\r\n                $scope.translate = dashboard.translate;\r\n\r\n                function getNewModalScope() {\r\n                    var scope = $scope.$new();\r\n                    //pass translate function to the new scope so we can translate the labels inside the modal dialog\r\n                    scope.translate = dashboard.translate;\r\n                    return scope;\r\n                }\r\n\r\n                $scope.deleteDashboard = function() {\r\n                    var dashData = {\r\n                        id: model.id,\r\n                        name: model.title\r\n                    };\r\n\r\n                    $rootScope.$broadcast('dashboardDelete', dashData);\r\n                };\r\n\r\n                $scope.toggleEditMode = function(openConfigWindow) {\r\n                    $scope.editMode = !$scope.editMode;\r\n                    if ($scope.editMode) {\r\n                        if (!$scope.continuousEditMode) {\r\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n                            $rootScope.$broadcast('adfIsEditMode');\r\n                        }\r\n\r\n                        if (openConfigWindow) {\r\n                            $scope.editDashboardDialog();\r\n                        }\r\n                    }\r\n\r\n                    if (!$scope.editMode) {\r\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n                    }\r\n                };\r\n\r\n                $scope.saveTemporalDashboard = function() {\r\n                    delete model.temporal;\r\n                    $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n                };\r\n\r\n                var adfToggleEditMode = $scope.$on('adfToggleEditMode', function(event, isNewDashboard) {\r\n                    if (isNewDashboard) {\r\n                        $scope.toggleEditMode(true);\r\n                    } else {\r\n                        $scope.toggleEditMode();\r\n                    }\r\n                });\r\n\r\n                var adfCancelEditMode = $scope.$on('adfCancelEditMode', function(event, isNewDashboard) {\r\n                    if ($scope.editMode) {\r\n                        $scope.cancelEditMode();\r\n                    }\r\n                });\r\n\r\n                $scope.collapseAll = function(collapseExpandStatus) {\r\n                    $rootScope.$broadcast('adfDashboardCollapseExpand', { collapseExpandStatus: collapseExpandStatus });\r\n                };\r\n\r\n                $scope.cancelEditMode = function() {\r\n                    $scope.editMode = false;\r\n                    if (!$scope.continuousEditMode && ($scope.modelCopy !== $scope.adfModel)) {\r\n                        $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\r\n                    }\r\n                    $rootScope.$broadcast('adfDashboardEditsCancelled');\r\n                };\r\n\r\n                var adfEditDashboardDialog = $scope.$on('adfEditDashboardDialog', function(event, isNewDashboard) {\r\n                    if ($scope.editMode) {\r\n                        $scope.editDashboardDialog();\r\n                    }\r\n                });\r\n\r\n                var adfLaunchSearchingFromWidget = $scope.$on('adfLaunchSearchingFromWidget', function(event, widget, configFilter) {\r\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\r\n                });\r\n                var adfWindowTimeChangedFromWidget = $scope.$on('adfWindowTimeChangedFromWidget', function(event, widget, windowFilter) {\r\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\r\n                });\r\n\r\n                // edit dashboard settings\r\n                $scope.editDashboardDialog = function() {\r\n                    var editDashboardScope = getNewModalScope();\r\n                    // create a copy of the title, to avoid changing the title to\r\n                    // \"dashboard\" if the field is empty\r\n                    editDashboardScope.copy = {\r\n                        title: (model.title !== 'Empty Dashboard' ? model.title : ''),\r\n                        description: model.description,\r\n                        icon: model.icon ? model.icon : 'fa-tachometer'\r\n                    };\r\n\r\n                    // pass icon list\r\n                    editDashboardScope.availableIcons = $faIcons.list();\r\n\r\n                    // pass dashboard structure to scope\r\n                    editDashboardScope.structures = dashboard.structures;\r\n\r\n                    // pass split function to scope, to be able to display structures in multiple columns\r\n                    editDashboardScope.split = split;\r\n\r\n                    var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\r\n                    if (model.editTemplateUrl) {\r\n                        adfEditTemplatePath = model.editTemplateUrl;\r\n                    }\r\n                    var instance = $uibModal.open({\r\n                        scope: editDashboardScope,\r\n                        templateUrl: adfEditTemplatePath,\r\n                        backdrop: 'static',\r\n                        keyboard: false,\r\n                        size: 'lg'\r\n                    });\r\n\r\n                    editDashboardScope.changeStructure = function(name, structure) {\r\n                        $log.info('change structure to ' + name);\r\n                        changeStructure(model, structure);\r\n                        if (model.structure !== name) {\r\n                            model.structure = name;\r\n                        }\r\n                    };\r\n                    editDashboardScope.closeDialog = function() {\r\n                        // copy the new title back to the model\r\n                        model.title = editDashboardScope.copy.title;\r\n                        model.description = editDashboardScope.copy.description;\r\n                        model.icon = editDashboardScope.copy.icon;\r\n\r\n                        // close modal and destroy the scope\r\n                        instance.close();\r\n                        editDashboardScope.$destroy();\r\n                    };\r\n                };\r\n\r\n                var adfOpenWidgetFromOther = $scope.$on('adfOpenWidgetFromOther', function(event, widget, config) {\r\n                    var internal_config = createConfiguration(widget);\r\n                    var _config = angular.merge({}, internal_config, config);\r\n                    var w = {\r\n                        type: widget,\r\n                        config: _config,\r\n                        title: _config.title\r\n                    };\r\n                    addNewWidgetToModel(model, w, name, !$scope.editMode);\r\n                });\r\n\r\n                var adfOpenModalWidgetFromOther = $scope.$on('adfOpenModalWidgetFromOther', function(event, widgetType, config) {\r\n                    var widget = createWidget(widgetType);\r\n                    widget.config = angular.merge({}, widget.config, config);\r\n                    widget.type = widgetType;\r\n                    if (widget.config.title) {\r\n                        widget.title = widget.config.title;\r\n                    }\r\n                    var fullScreenScope = $scope.$new();\r\n                    fullScreenScope.definition = fullScreenScope.widget = widget;\r\n                    var opts = {\r\n                        scope: fullScreenScope,\r\n                        templateUrl: adfTemplatePath + 'widget-fullscreen.html',\r\n                        size: fullScreenScope.definition.modalSize || 'lg', // 'sm', 'lg'\r\n                        backdrop: 'static',\r\n                        windowClass: (fullScreenScope.definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\r\n                    };\r\n\r\n                    fullScreenScope.persistDashboard = function() {\r\n                        $rootScope.$broadcast('adfOpenWidgetFromOther', this.$parent.widget.type, this.$parent.widget.config);\r\n                        this.closeDialog();\r\n                    }\r\n\r\n                    var instance = $uibModal.open(opts);\r\n                    fullScreenScope.closeDialog = function() {\r\n                        instance.close();\r\n                        fullScreenScope.$destroy();\r\n                    };\r\n\r\n                });\r\n\r\n                var adfAddWidgetDialog = $scope.$on('adfAddWidgetDialog', function(event, isNewDashboard) {\r\n                    if (!model.temporal && model.editable) {\r\n                        if (!$scope.editMode) {\r\n                            $scope.editMode = true;\r\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n                            $rootScope.$broadcast('adfIsEditMode');\r\n                        }\r\n\r\n                        $scope.addWidgetDialog();\r\n                    }\r\n                });\r\n\r\n                // add widget dialog\r\n                $scope.addWidgetDialog = function() {\r\n                    var addScope = getNewModalScope();\r\n                    var widgets;\r\n                    if (angular.isFunction(widgetFilter)) {\r\n                        widgets = {};\r\n                        angular.forEach(dashboard.widgets, function(widget, type) {\r\n                            if (widgetFilter(widget, type, model)) {\r\n                                widgets[type] = widget;\r\n                            }\r\n                        });\r\n                    } else {\r\n                        widgets = dashboard.widgets;\r\n                    }\r\n                    addScope.widgets = widgets;\r\n\r\n                    //pass translate function to the new scope so we can translate the labels inside the modal dialog\r\n                    addScope.translate = $scope.translate;\r\n\r\n                    // pass createCategories function to scope, if categories option is enabled\r\n                    if ($scope.options.categories) {\r\n                        $scope.createCategories = createCategories;\r\n                    }\r\n\r\n                    var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\r\n                    if (model.addTemplateUrl) {\r\n                        adfAddTemplatePath = model.addTemplateUrl;\r\n                    }\r\n\r\n                    var opts = {\r\n                        scope: addScope,\r\n                        templateUrl: adfAddTemplatePath,\r\n                        backdrop: 'static'\r\n                    };\r\n\r\n                    var instance = $uibModal.open(opts);\r\n                    addScope.addWidget = function(widget) {\r\n                        var w = {\r\n                            type: widget,\r\n                            config: createConfiguration(widget)\r\n                        };\r\n                        addNewWidgetToModel(model, w, name);\r\n                        // close and destroy\r\n                        instance.close();\r\n                        addScope.$destroy();\r\n\r\n                        // check for open edit mode immediately\r\n                        if (isEditModeImmediate(widget)) {\r\n                            openEditMode($scope, w);\r\n                        }\r\n                    };\r\n                    addScope.closeDialog = function() {\r\n                        // close and destroy\r\n                        instance.close();\r\n                        addScope.$destroy();\r\n                    };\r\n                };\r\n\r\n                $scope.addNewWidgetToModel = addNewWidgetToModel;\r\n\r\n                $scope.$on('destroy', function() {\r\n                    adfLaunchSearchingFromWidget();\r\n                    adfWindowTimeChangedFromWidget();\r\n                    adfToggleEditMode();\r\n                    adfOpenWidgetFromOther();\r\n                    adfOpenModalWidgetFromOther();\r\n                    adfCancelEditMode();\r\n                    adfAddWidgetDialog();\r\n                    adfEditDashboardDialog();\r\n                });\r\n            }],\r\n            link: function($scope, $element, $attr) {\r\n                // pass options to scope\r\n                var options = {\r\n                    name: $attr.name,\r\n                    editable: true,\r\n                    enableConfirmDelete: stringToBoolean($attr.enableConfirmDelete),\r\n                    maximizable: stringToBoolean($attr.maximizable),\r\n                    collapsible: stringToBoolean($attr.collapsible),\r\n                    categories: stringToBoolean($attr.categories)\r\n                };\r\n                if (angular.isDefined($attr.editable)) {\r\n                    options.editable = stringToBoolean($attr.editable);\r\n                }\r\n                $scope.options = options;\r\n            },\r\n            templateUrl: adfTemplatePath + 'dashboard.html'\r\n        };\r\n    }]);\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\n/**\r\n * @ngdoc object\r\n * @name adf.locale#adfLocale\r\n * @description\r\n *\r\n * Holds settings and values for framework supported locales\r\n */\r\nangular.module('adf.locale')\r\n    .constant('adfLocale', {\r\n        defaultLocale: 'en-GB',\r\n        frameworkLocales: {\r\n            'en-GB': {\r\n                ADF_COMMON_CLOSE: 'Close',\r\n                ADF_COMMON_DELETE: 'Delete',\r\n                ADF_COMMON_TITLE: 'Title',\r\n                ADF_COMMON_DESCRIPTION: 'Description',\r\n                ADF_COMMON_CANCEL: 'Cancel',\r\n                ADF_COMMON_APPLY: 'Apply',\r\n                ADF_COMMON_EDIT_DASHBOARD: 'Edit dashboard',\r\n                ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Structure',\r\n                ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Add new widget',\r\n                ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Save changes',\r\n                ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Enable edit mode',\r\n                ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Undo changes',\r\n                ADF_WIDGET_ADD_HEADER: 'Add new widget',\r\n                ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Are you sure you want to delete this widget ?',\r\n                ADF_WIDGET_TOOLTIP_REFRESH: 'Reload widget Content',\r\n                ADF_WIDGET_TOOLTIP_PRINT: 'Print widget Content',\r\n                ADF_WIDGET_TOOLTIP_FILTER: 'Show widget Filter',\r\n                ADF_WIDGET_TOOLTIP_SORT: 'Show widget Sort',\r\n                ADF_WIDGET_TOOLTIP_MOVE: 'Change widget location',\r\n                ADF_WIDGET_TOOLTIP_COLLAPSE: 'Collapse widget',\r\n                ADF_WIDGET_TOOLTIP_EXPAND: 'Expand widget',\r\n                ADF_WIDGET_TOOLTIP_EDIT: 'Edit widget configuration',\r\n                ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Fullscreen widget',\r\n                ADF_WIDGET_TOOLTIP_REMOVE: 'Remove widget',\r\n                ADF_WIDGET_TOOLTIP_OPERATION: 'Execute operation',\r\n                ADF_WIDGET_TOOLTIP_SELECTION: 'Items selected',\r\n                ADF_WIDGET_CLEAR: 'Clear',\r\n                ADF_WIDGET_RESTORE: 'Restore',\r\n                ADF_WIDGET_FILTER: 'Filter'\r\n            },\r\n            'sv-SE': {\r\n                ADF_COMMON_CLOSE: 'Stäng',\r\n                ADF_COMMON_DELETE: 'Ta bort',\r\n                ADF_COMMON_TITLE: 'Titel',\r\n                ADF_COMMON_DESCRIPTION: 'Description',\r\n                ADF_COMMON_CANCEL: 'Avbryt',\r\n                ADF_COMMON_APPLY: 'Använd',\r\n                ADF_COMMON_EDIT_DASHBOARD: 'Redigera dashboard',\r\n                ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Struktur',\r\n                ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Lägg till ny widget',\r\n                ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Spara förändringar',\r\n                ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Slå på redigeringsläge',\r\n                ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Ångra förändringar',\r\n                ADF_WIDGET_ADD_HEADER: 'Lägg till ny widget',\r\n                ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Är du säker på att du vill ta bort denna widget ?',\r\n                ADF_WIDGET_TOOLTIP_REFRESH: 'Ladda om widget',\r\n                ADF_WIDGET_TOOLTIP_FILTER: 'Show widget Filter',\r\n                ADF_WIDGET_TOOLTIP_SORT: 'Show widget Sort',\r\n                ADF_WIDGET_TOOLTIP_MOVE: 'Ändra widgets position',\r\n                ADF_WIDGET_TOOLTIP_COLLAPSE: 'Stäng widget',\r\n                ADF_WIDGET_TOOLTIP_EXPAND: 'Öppna widget',\r\n                ADF_WIDGET_TOOLTIP_EDIT: 'Ändra widget konfigurering',\r\n                ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Visa widget i fullskärm',\r\n                ADF_WIDGET_TOOLTIP_REMOVE: 'Ta bort widget',\r\n                ADF_WIDGET_TOOLTIP_OPERATION: 'Execute operation',\r\n                ADF_WIDGET_TOOLTIP_SELECTION: 'Items selected',\r\n                ADF_WIDGET_CLEAR: 'Clear',\r\n                ADF_WIDGET_RESTORE: 'Restore',\r\n                ADF_WIDGET_FILTER: 'Filter'\r\n            }\r\n        }\r\n    });\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .filter('adfOrderByObjectKey', [\"$filter\", function($filter) {\r\n    \r\n\r\n    return function(item, key){\r\n      var array = [];\r\n      angular.forEach(item, function(value, objectKey){\r\n        value[key] = objectKey;\r\n        array.push(value);\r\n      });\r\n      return $filter('orderBy')(array, key);\r\n    };\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\n/**\r\n * @ngdoc object\r\n * @name adf.dashboardProvider\r\n * @description\r\n *\r\n * The dashboardProvider can be used to register structures and widgets.\r\n */\r\nangular.module('adf.provider', ['adf.locale'])\r\n    .provider('dashboard', [\"adfLocale\", function(adfLocale) {\r\n\r\n        var widgets = {};\r\n        var widgetsPath = '';\r\n        var structures = {};\r\n        var messageTemplate = '<div class=\"alert alert-primary\">{}</div>';\r\n        var loadingTemplate = '\\\r\n      <div class=\"progress progress-striped active\">\\n\\\r\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\r\n          <span class=\"sr-only\">loading ...</span>\\n\\\r\n        </div>\\n\\\r\n      </div>';\r\n        var customWidgetTemplatePath = null;\r\n\r\n        // default apply function of widget.edit.apply\r\n        var defaultApplyFunction = function() {\r\n            return true;\r\n        };\r\n\r\n        var activeLocale = adfLocale.defaultLocale;\r\n        var locales = adfLocale.frameworkLocales;\r\n\r\n        function getLocales() {\r\n            return locales;\r\n        }\r\n\r\n        function getActiveLocale() {\r\n            return activeLocale;\r\n        }\r\n\r\n        function translate(label) {\r\n            var translation = locales[activeLocale][label];\r\n            return translation ? translation : label;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#widget\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Registers a new widget.\r\n         *\r\n         * @param {string} name of the widget\r\n         * @param {object} widget to be registered.\r\n         *\r\n         *   Object properties:\r\n         *\r\n         *   - `title` - `{string=}` - The title of the widget.\r\n         *   - `description` - `{string=}` - Description of the widget.\r\n         *   - `category` - `{string=}` - Category of the widget.\r\n         *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\r\n         *   - `config` - `{object}` - Predefined widget configuration.\r\n         *   - `controller` - `{string=|function()=}` - Controller fn that should be\r\n         *      associated with newly created scope of the widget or the name of a\r\n         *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\r\n         *      if passed as a string.\r\n         *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\r\n         *      published to scope under the `controllerAs` name.\r\n         *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\r\n         *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\r\n         *   - `template` - `{string=|function()=}` - html template as a string.\r\n         *   - `templateUrl` - `{string=}` - path to an html template.\r\n         *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\r\n         *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n         *      be injected into the controller. If any of these dependencies are promises, the widget\r\n         *      will wait for them all to be resolved or one to be rejected before the controller is\r\n         *      instantiated.\r\n         *      If all the promises are resolved successfully, the values of the resolved promises are\r\n         *      injected.\r\n         *\r\n         *      The map object is:\r\n         *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\r\n         *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n         *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\r\n         *        and the return value is treated as the dependency. If the result is a promise, it is\r\n         *        resolved before its value is injected into the controller.\r\n         *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n         *      on the scope of the widget.\r\n         *   - `edit` - `{object}` - Edit modus of the widget.\r\n         *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n         *        on the scope of the widget.\r\n         *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\r\n         *        Default is true.\r\n         *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\r\n         *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\r\n         *        The function have to return a boolean or an promise which can be resolved to a boolean.\r\n         *        The function can use injection.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.widget = function(name, widget) {\r\n            var w = angular.extend({ reload: false, frameless: false }, widget);\r\n            if (w.edit) {\r\n                var edit = {\r\n                    reload: true,\r\n                    immediate: false,\r\n                    apply: defaultApplyFunction\r\n                };\r\n                angular.extend(edit, w.edit);\r\n                w.edit = edit;\r\n            }\r\n            widgets[name] = w;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#widgetsPath\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Sets the path to the directory which contains the widgets. The widgets\r\n         * path is used for widgets with a templateUrl which contains the\r\n         * placeholder {widgetsPath}. The placeholder is replaced with the\r\n         * configured value, before the template is loaded, but the template is\r\n         * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\r\n         * The default value of widgetPaths is ''.\r\n         *\r\n         *\r\n         * @param {string} path to the directory which contains the widgets\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.widgetsPath = function(path) {\r\n            widgetsPath = path;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#structure\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Registers a new structure.\r\n         *\r\n         * @param {string} name of the structure\r\n         * @param {object} structure to be registered.\r\n         *\r\n         *   Object properties:\r\n         *\r\n         *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\r\n         *     - `styleClass` - `{string}` - CSS Class of the row.\r\n         *     - `columns` - `{Array.<Object>}` - Columns of the row.\r\n         *       - `styleClass` - `{string}` - CSS Class of the column.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.structure = function(name, structure) {\r\n            structures[name] = structure;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#messageTemplate\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the template for messages.\r\n         *\r\n         * @param {string} template for messages.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.messageTemplate = function(template) {\r\n            messageTemplate = template;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#loadingTemplate\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the template which is displayed as\r\n         * long as the widget resources are not resolved.\r\n         *\r\n         * @param {string} template loading template\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.loadingTemplate = function(template) {\r\n            loadingTemplate = template;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#customWidgetTemplatePath\r\n         * @propertyOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the container template for the widgets\r\n         *\r\n         * @param {string} path to the custom widget template\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.customWidgetTemplatePath = function(templatePath) {\r\n            customWidgetTemplatePath = templatePath;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#setLocale\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the locale setting of adf\r\n         *\r\n         * @param {string} ISO Language Code\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.setLocale = function(locale) {\r\n            if (locales[locale]) {\r\n                activeLocale = locale;\r\n            } else {\r\n                throw new Error('Cannot set locale: ' + locale + '. Locale is not defined.');\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#addLocale\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Adds a new locale to adf\r\n         *\r\n         * @param {string} ISO Language Code for the new locale\r\n         * @param {object} translations for the locale.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.addLocale = function(locale, translations) {\r\n            if (!angular.isString(locale)) {\r\n                throw new Error('locale must be an string');\r\n            }\r\n\r\n            if (!angular.isObject(translations)) {\r\n                throw new Error('translations must be an object');\r\n            }\r\n\r\n            locales[locale] = translations;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc service\r\n         * @name adf.dashboard\r\n         * @description\r\n         *\r\n         * The dashboard holds all options, structures and widgets.\r\n         *\r\n         * @property {Array.<Object>} widgets Array of registered widgets.\r\n         * @property {string} widgetsPath Default path for widgets.\r\n         * @property {Array.<Object>} structures Array of registered structures.\r\n         * @property {string} messageTemplate Template for messages.\r\n         * @property {string} loadingTemplate Template for widget loading.\r\n         * @property {method} sets locale of adf.\r\n         * @property {Array.<Object>} hold all of the locale translations.\r\n         * @property {string} the active locale setting.\r\n         * @property {method} translation function passed to templates.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.$get = function() {\r\n            var cid = 0;\r\n\r\n            return {\r\n                widgets: widgets,\r\n                widgetsPath: widgetsPath,\r\n                structures: structures,\r\n                messageTemplate: messageTemplate,\r\n                loadingTemplate: loadingTemplate,\r\n                setLocale: this.setLocale,\r\n                locales: getLocales,\r\n                activeLocale: getActiveLocale,\r\n                translate: translate,\r\n                customWidgetTemplatePath: customWidgetTemplatePath,\r\n\r\n                /**\r\n                 * @ngdoc method\r\n                 * @name adf.dashboard#id\r\n                 * @methodOf adf.dashboard\r\n                 * @description\r\n                 *\r\n                 * Creates an ongoing numeric id. The method is used to create ids for\r\n                 * columns and widgets in the dashboard.\r\n                 */\r\n                id: function() {\r\n                    return new Date().getTime() + '-' + (++cid);\r\n                },\r\n\r\n                /**\r\n                 * @ngdoc method\r\n                 * @name adf.dashboard#idEqual\r\n                 * @methodOf adf.dashboard\r\n                 * @description\r\n                 *\r\n                 * Checks if the given ids are equal.\r\n                 *\r\n                 * @param {string} id widget or column id\r\n                 * @param {string} other widget or column id\r\n                 */\r\n                idEquals: function(id, other) {\r\n                    // use toString, because old ids are numbers\r\n                    return ((id) && (other)) && (id.toString() === other.toString());\r\n                }\r\n            };\r\n        };\r\n\r\n    }]);\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardRow', [\"$compile\", \"adfTemplatePath\", \"columnTemplate\", function ($compile, adfTemplatePath, columnTemplate) {\r\n    \r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        row: '=',\r\n        adfModel: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\r\n      link: function($scope, $element) {\r\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\r\n          $compile(columnTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        }\r\n      }\r\n    };\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfStructurePreview', [\"adfTemplatePath\", function(adfTemplatePath) {\r\n\r\n    function adjustRowHeight(container){\r\n      if (container.rows && container.rows.length > 0){\r\n        var height = 100 / container.rows.length;\r\n        angular.forEach(container.rows, function(row){\r\n          row.style = {\r\n            height: height + '%'\r\n          }\r\n\r\n          if (row.columns){\r\n            angular.forEach(row.columns, function(column){\r\n              adjustRowHeight(column);\r\n            });\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    function prepareStructure($scope){\r\n      var structure = angular.copy($scope.structure);\r\n      adjustRowHeight(structure);\r\n      $scope.preview = structure;\r\n    }\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        name: '=',\r\n        structure: '=',\r\n        selected: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'structure-preview.html',\r\n      link: prepareStructure\r\n    };\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf')\r\n    .directive('adfWidgetContent', [\"$log\", \"$q\", \"widgetService\", \"$compile\", \"$controller\", \"$injector\", \"dashboard\", function ($log, $q, widgetService,\r\n        $compile, $controller, $injector, dashboard) {\r\n\r\n        function renderError($element, msg) {\r\n            $log.warn(msg);\r\n            $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\r\n        }\r\n\r\n        function compileWidget($scope, $element, currentScope, configChanged) {\r\n            var model = $scope.model;\r\n            var content = $scope.content;\r\n            var editing = $scope.editing;\r\n\r\n            var newScope = currentScope;\r\n            if (!model) {\r\n                renderError($element, 'model is undefined');\r\n            } else if (!content) {\r\n                //var msg = 'widget content is undefined, please have a look at your browser log';\r\n                var msg = 'Widget ' + (model.title ? 'for \"' + model.title + '\"' : '') + ' has been deprecated. In order to continue you have to delete this one and look for the equivalent one.';\r\n                renderError($element, msg);\r\n            } else {\r\n                if (newScope) {\r\n                    var is_menu = newScope.menu !== undefined && newScope.menu !== null;\r\n                    var is_itemsPerPage = newScope.itemsPerPage !== undefined && newScope.itemsPerPage !== null;\r\n                    if (is_menu || is_itemsPerPage || configChanged || !angular.isFunction(newScope.reloadData)) {\r\n                        newScope = renderWidget($scope, $element, currentScope, model, content);\r\n                    } else {\r\n                        newScope.reloadData();\r\n                    }\r\n                } else {\r\n                    newScope = renderWidget($scope, $element, currentScope, model, content);\r\n                }\r\n            }\r\n\r\n            function _getWindowTime(type) {\r\n                if (type === \"custom\") {\r\n                    return {\r\n                        from: newScope.config.windowFilter.from,\r\n                        to: newScope.config.windowFilter.to\r\n                    }\r\n                }\r\n                var from = window.moment().subtract(1, type);\r\n                return {\r\n                    from: from._d\r\n                };\r\n            }\r\n\r\n            if (newScope) {\r\n                if (newScope.config) {\r\n                    newScope.config.getWindowTime = function () {\r\n                        var windowFilter = newScope.config.windowFilter;\r\n                        if (windowFilter && windowFilter.type) {\r\n                            var winTime = _getWindowTime(windowFilter.type);\r\n                            /* jshint ignore:start */\r\n                            if (!window.eval(newScope.config.windowFilter.rawdate)) {\r\n                                for (var key in winTime) {\r\n                                    winTime[key] = window.moment(winTime[key]).format();\r\n                                }\r\n                                winTime['rawdate'] = true;\r\n                            }\r\n                            /* jshint ignore:end */\r\n                            return winTime;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                newScope.editing = editing ? editing : false;\r\n            }\r\n            return newScope;\r\n        }\r\n\r\n        function renderWidget($scope, $element, currentScope, model, content, editing) {\r\n            // display loading template\r\n            $element.html(dashboard.loadingTemplate);\r\n\r\n            // create new scope\r\n            var templateScope = $scope.$new();\r\n\r\n            // pass config object to scope\r\n            if (!model.config) {\r\n                model.config = {};\r\n            }\r\n\r\n            templateScope.config = model.config;\r\n            templateScope.editing = editing;\r\n            templateScope.selectionManager = (currentScope && currentScope.selectionManager) ? currentScope.selectionManager : undefined;\r\n\r\n            // local injections\r\n            var base = {\r\n                $scope: templateScope,\r\n                widget: model,\r\n                config: model.config\r\n            };\r\n\r\n            // get resolve promises from content object\r\n            var resolvers = {};\r\n            resolvers.$tpl = widgetService.getTemplate(content);\r\n            if (content.resolve) {\r\n                angular.forEach(content.resolve, function (promise, key) {\r\n                    if (angular.isString(promise)) {\r\n                        resolvers[key] = $injector.get(promise);\r\n                    } else {\r\n                        resolvers[key] = $injector.invoke(promise, promise, base);\r\n                    }\r\n                });\r\n            }\r\n\r\n            // resolve all resolvers\r\n            $q.all(resolvers).then(function (locals) {\r\n                angular.extend(locals, base);\r\n\r\n                // pass resolve map to template scope as defined in resolveAs\r\n                if (content.resolveAs) {\r\n                    templateScope[content.resolveAs] = locals;\r\n                }\r\n\r\n                // compile & render template\r\n                var template = locals.$tpl;\r\n                $element.html(template);\r\n                if (content.controller) {\r\n                    var templateCtrl = $controller(content.controller, locals);\r\n                    if (content.controllerAs) {\r\n                        templateScope[content.controllerAs] = templateCtrl;\r\n                    }\r\n                    $element.children().data('$ngControllerController', templateCtrl);\r\n                }\r\n                $compile($element.contents())(templateScope);\r\n            }, function (reason) {\r\n                // handle promise rejection\r\n                var msg = 'Could not resolve all promises';\r\n                if (reason) {\r\n                    msg += ': ' + reason;\r\n                }\r\n                renderError($element, msg);\r\n            });\r\n\r\n            // destroy old scope\r\n            if (currentScope) {\r\n                currentScope.$destroy();\r\n            }\r\n\r\n            return templateScope;\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            scope: {\r\n                model: '=',\r\n                content: '=',\r\n                editing: '='\r\n            },\r\n            link: function ($scope, $element) {\r\n                var currentScope = compileWidget($scope, $element, null);\r\n                var widgetConfigChangedEvt = $scope.$on('widgetConfigChanged', function () {\r\n                    currentScope = compileWidget($scope, $element, currentScope, true);\r\n                });\r\n\r\n                var widgetReloadEvt = $scope.$on('widgetReload', function () {\r\n                    currentScope = compileWidget($scope, $element, currentScope, false);\r\n                });\r\n\r\n                $scope.$on('destroy', function () {\r\n                    widgetConfigChangedEvt();\r\n                    widgetReloadEvt();\r\n                });\r\n            }\r\n        };\r\n    }]);\n\r\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n/**\r\n * The widget service provide helper functions to render widgets and their content.\r\n */\r\nangular.module('adf')\r\n  .factory('widgetService', [\"$http\", \"$q\", \"$sce\", \"$templateCache\", \"dashboard\", function($http, $q, $sce, $templateCache, dashboard) {\r\n    \r\n\r\n    function parseUrl(url) {\r\n      var parsedUrl = url;\r\n      if (url.indexOf('{widgetsPath}') >= 0) {\r\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\r\n                .replace('//', '/');\r\n        if (parsedUrl.indexOf('/') === 0) {\r\n          parsedUrl = parsedUrl.substring(1);\r\n        }\r\n      }\r\n      return parsedUrl;\r\n    }\r\n\r\n    var exposed = {};\r\n\r\n    exposed.getTemplate = function(widget){\r\n      var deferred = $q.defer();\r\n\r\n      if (widget.template) {\r\n        deferred.resolve(widget.template);\r\n      } else if (widget.templateUrl) {\r\n        // try to fetch template from cache\r\n        var tpl = $templateCache.get(widget.templateUrl);\r\n        if (tpl) {\r\n          deferred.resolve(tpl);\r\n        } else {\r\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\r\n          $http.get(url)\r\n               .success(function(response) {\r\n                 // put response to cache, with unmodified url as key\r\n                 $templateCache.put(widget.templateUrl, response);\r\n                 deferred.resolve(response);\r\n               })\r\n               .error(function() {\r\n                 deferred.reject('could not load template');\r\n               });\r\n        }\r\n      }\r\n\r\n      return deferred.promise;\r\n    };\r\n\r\n    return exposed;\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf')\r\n    .directive('adfWidget', [\"$injector\", \"$q\", \"$log\", \"$uibModal\", \"$rootScope\", \"$interval\", \"dashboard\", \"adfTemplatePath\", \"Filter\", function ($injector, $q, $log, $uibModal, $rootScope, $interval, dashboard, adfTemplatePath, Filter) {\r\n        function preLink($scope) {\r\n            var definition = $scope.definition;\r\n\r\n            //passs translate function from dashboard so we can translate labels inside html templates\r\n            $scope.translate = dashboard.translate;\r\n\r\n            if (definition) {\r\n                var w = dashboard.widgets[definition.type];\r\n                if (w) {\r\n                    // pass title\r\n                    if (!definition.title) {\r\n                        definition.title = w.title;\r\n                    }\r\n\r\n                    if (!definition.titleTemplateUrl) {\r\n                        definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\r\n                        if (w.titleTemplateUrl) {\r\n                            definition.titleTemplateUrl = w.titleTemplateUrl;\r\n                        }\r\n                    }\r\n\r\n                    if (!definition.editTemplateUrl) {\r\n                        definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\r\n                        if (w.editTemplateUrl) {\r\n                            definition.editTemplateUrl = w.editTemplateUrl;\r\n                        }\r\n                    }\r\n\r\n                    if (!definition.titleTemplateUrl) {\r\n                        definition.frameless = w.frameless;\r\n                    }\r\n\r\n                    if (!definition.styleClass) {\r\n                        definition.styleClass = w.styleClass;\r\n                    }\r\n\r\n                    // set id for sortable\r\n                    if (!definition.wid) {\r\n                        definition.wid = dashboard.id();\r\n                    }\r\n\r\n                    // pass copy of widget to scope\r\n                    $scope.widget = angular.copy(w);\r\n\r\n                    // create config object\r\n                    var config = definition.config;\r\n                    if (config) {\r\n                        if (angular.isString(config)) {\r\n                            config = angular.fromJson(config);\r\n                        }\r\n                    } else {\r\n                        config = {};\r\n                    }\r\n\r\n                    if (!config.reloadPeriod) {\r\n                        config.reloadPeriod = \"0\";\r\n                    }\r\n\r\n                    if (typeof $scope.widget.show_modal_footer === \"undefined\") {\r\n                        $scope.widget.show_modal_footer = true;\r\n                    }\r\n\r\n                    if (typeof $scope.widget.show_reload_config === \"undefined\") {\r\n                        $scope.widget.show_reload_config = true;\r\n                    }\r\n\r\n                    // pass config to scope\r\n                    $scope.config = config;\r\n\r\n                    // collapse exposed $scope.widgetState property\r\n                    if (!$scope.widgetState) {\r\n                        $scope.widgetState = {};\r\n                        $scope.widgetState.isCollapsed = (w.collapsed === true) ? w.collapsed : false;\r\n                    }\r\n\r\n                } else {\r\n                    $log.warn('could not find widget ' + definition.type);\r\n                }\r\n            } else {\r\n                $log.debug('definition not specified, widget was probably removed');\r\n            }\r\n        }\r\n\r\n        function postLink($scope, $element) {\r\n            var definition = $scope.definition;\r\n            if (!definition) {\r\n                $log.debug('widget not found');\r\n                return;\r\n            }\r\n            if (!$scope.config) {\r\n                $scope.config = {};\r\n            }\r\n\r\n            var config = $scope.config;\r\n\r\n            // bind close function\r\n            var deleteWidget = function () {\r\n                var column = $scope.col;\r\n                if (column) {\r\n                    var index = column.widgets.indexOf(definition);\r\n                    if (index >= 0) {\r\n                        column.widgets.splice(index, 1);\r\n                    }\r\n                }\r\n                $element.remove();\r\n                $rootScope.$broadcast('adfWidgetRemovedFromColumn');\r\n            };\r\n\r\n            $scope.remove = function () {\r\n                if ($scope.options.enableConfirmDelete) {\r\n                    var deleteScope = $scope.$new();\r\n                    deleteScope.translate = dashboard.translate;\r\n\r\n                    var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\r\n                    if (definition.deleteTemplateUrl) {\r\n                        deleteTemplateUrl = definition.deleteTemplateUrl;\r\n                    }\r\n                    var opts = {\r\n                        scope: deleteScope,\r\n                        templateUrl: deleteTemplateUrl,\r\n                        backdrop: 'static'\r\n                    };\r\n                    var instance = $uibModal.open(opts);\r\n\r\n                    deleteScope.closeDialog = function () {\r\n                        instance.close();\r\n                        deleteScope.$destroy();\r\n                    };\r\n                    deleteScope.deleteDialog = function () {\r\n                        deleteWidget();\r\n                        deleteScope.closeDialog();\r\n                    };\r\n                } else {\r\n                    deleteWidget();\r\n                }\r\n            };\r\n\r\n\r\n            $scope.print = function () {\r\n                if (!$scope.editMode) {\r\n                    $scope.$broadcast('widgetPrint');\r\n                }\r\n            }\r\n\r\n            $scope.isExecuteOperationEnabled = function () {\r\n                // if ($scope.selectionManager.totalSelected() > 0)\r\n                //     return true;\r\n                if (config.entityKey)\r\n                    return true;\r\n                var filter = config.filter;\r\n                if (typeof filter === \"string\") {\r\n                    return filter.length > 0;\r\n                }\r\n                if (typeof filter === \"object\") {\r\n                    return filter.value.length > 2 && filter.oql;\r\n                }\r\n                return false;\r\n            }\r\n\r\n            $scope.executeOperation = function () {\r\n                if (!$scope.editMode) {\r\n                    // if ($scope.selectionManager.totalSelected() > 0) {\r\n                    //     var selectedItems = [];\r\n                    //     angular.forEach($scope.selectionManager.currentSelection, function(data, key) {\r\n                    //         selectedItems.push({ key: key, value: data });\r\n                    //     });\r\n                    //     $scope.$parent.$broadcast('widgetExecuteOperation', { 'selectedItems': selectedItems });\r\n                    // } else {\r\n                    $scope.$parent.$broadcast('widgetExecuteOperation');\r\n                    // }\r\n                }\r\n            };\r\n\r\n            // bind reload function\r\n            var stopReloadTimeout;\r\n\r\n            function _setReloadTimeout() {\r\n                if (config && config.reloadPeriod && config.reloadPeriod !== \"0\") {\r\n                    if (angular.isDefined(stopReloadTimeout)) {\r\n                        $interval.cancel(stopReloadTimeout)\r\n                        stopReloadTimeout = undefined;\r\n                    };\r\n                    stopReloadTimeout = $interval($scope.reload, (config.reloadPeriod * 1000));\r\n                }\r\n            }\r\n\r\n            $scope.reload = function (completeReload) {\r\n                if (completeReload) {\r\n                    $scope.$broadcast('widgetReload', completeReload);\r\n                } else {\r\n                    $scope.$broadcast('widgetReload');\r\n                }\r\n\r\n                _setReloadTimeout();\r\n            };\r\n\r\n            // verificacion de periodo de refresco\r\n            _setReloadTimeout();\r\n\r\n            $element.on('$destroy', function () {\r\n                $interval.cancel(stopReloadTimeout);\r\n            });\r\n\r\n            $scope.filter = {\r\n                value: \"\"\r\n            };\r\n            $scope.sort = {\r\n                value: \"\",\r\n                direction: \"\"\r\n            };\r\n\r\n            $scope.toggleAdvanced = 1;\r\n            var filter = config.filter;\r\n            if (typeof filter === \"object\" && filter.oql && filter.oql.length > 2) {\r\n                $scope.search = {\r\n                    oql: filter.oql,\r\n                    json: filter.value\r\n                };\r\n                $scope.toggleAdvanced = 0;\r\n            } else if (typeof filter === \"string\") {\r\n                $scope.search = {\r\n                    quick: filter\r\n                };\r\n                $scope.toggleAdvanced = 1;\r\n            } else if (typeof filter === \"object\" && filter.fields) {\r\n                $scope.search = {\r\n                    customFilter: filter.fields\r\n                };\r\n                $scope.search.fields = [];\r\n                angular.forEach(filter.fields, function (v, key) {\r\n                    $scope.search.fields.push(v.name);\r\n                });\r\n                $scope.toggleAdvanced = 2;\r\n            } else {\r\n                $scope.search = {\r\n                    quick: filter = \"\"\r\n                };\r\n            }\r\n\r\n            $scope.toggleFilter = function (advanced) {\r\n                $scope.toggleAdvanced = advanced;\r\n            };\r\n            $scope.filterAvailable = false;\r\n            $scope.showFilter = function () {\r\n                $scope.filterAvailable = $scope.filterAvailable === true ? false : true;\r\n            };\r\n\r\n            $scope.showFinalFilter = false;\r\n\r\n            $scope.launchSearching = function () {\r\n                var widget = {\r\n                    definition: definition,\r\n                    element: $element\r\n                };\r\n\r\n                $rootScope.$broadcast('adfLaunchSearchingFromWidget', widget, $scope.config.filter);\r\n                $scope.reload(true);\r\n            }\r\n            $scope.addCustomFilter = function (key) {\r\n                $scope.search.customFilter = $scope.search.customFilter ? $scope.search.customFilter : [];\r\n                $scope.search.customFilter.push({ name: key, value: '' });\r\n            }\r\n\r\n            $scope.launchCustomFilter = function () {\r\n                if ($scope.search.customFilter && $scope.search.customFilter.length > 0) {\r\n                    $scope.search.oql = $scope.search.json = '';\r\n\r\n                    $scope.config.filter = {\r\n                        value: {\r\n                            and: []\r\n                        },\r\n                        fields: $scope.search.customFilter\r\n                    }\r\n                    angular.forEach($scope.search.customFilter, function (v, key) {\r\n                        if (v.value) {\r\n                            var like = {};\r\n                            like[v.name] = v.value;\r\n                            $scope.config.filter.value.and.push({ 'like': like });\r\n                        }\r\n\r\n                    });\r\n                    $scope.config.filter.value = JSON.stringify($scope.config.filter.value);\r\n                }\r\n\r\n                $scope.launchSearching();\r\n            }\r\n\r\n\r\n\r\n            $scope.deleteFilter = function (value, model) {\r\n                angular.forEach($scope.search.customFilter, function (v, key) {\r\n                    if (v.name === value) {\r\n                        $scope.search.customFilter.splice(key, 1);\r\n                    }\r\n                });\r\n                if ($scope.search.customFilter.length === 0) {\r\n                    $scope.config.filter = {};\r\n                }\r\n            };\r\n\r\n\r\n            $scope.launchSearchingAdv = function () {\r\n                $scope.search.quick = '';\r\n                $scope.config.filter = {\r\n                    oql: $scope.search.oql,\r\n                    value: $scope.search.json\r\n                };\r\n                if ($scope.search.json === '')\r\n                    $scope.config.filter = {\r\n                        oql: '',\r\n                        value: ''\r\n                    };\r\n                $scope.launchSearching();\r\n\r\n            }\r\n\r\n            $scope.applyFilter = function (event) {\r\n                $scope.launchSearching();\r\n            }\r\n\r\n            $scope.launchSearchingQuick = function () {\r\n                $scope.search.oql = $scope.search.json = '';\r\n                $scope.config.filter = $scope.search.quick;\r\n                $scope.launchSearching();\r\n            }\r\n\r\n            var windowTimeChanged = $scope.$on('onWindowTimeChanged', function (event, timeObj) {\r\n                $scope.config.windowFilter = timeObj ? timeObj : (config.windowFilter ? {} : timeObj);\r\n                var widget = {\r\n                    definition: definition,\r\n                    element: $element\r\n                }\r\n                $rootScope.$broadcast('adfWindowTimeChangedFromWidget', widget, $scope.config.windowFilter);\r\n                $scope.reload();\r\n            });\r\n\r\n            $scope.enter = function (event) {\r\n                var keycode = (event.keyCode ? event.keyCode : event.which);\r\n                if (keycode === 13) {\r\n                    if ($scope.toggleAdvanced === 0)\r\n                        $scope.launchSearchingAdv();\r\n                    if ($scope.toggleAdvanced === 1)\r\n                        $scope.launchSearchingQuick();\r\n                    if ($scope.toggleAdvanced === 2)\r\n                        $scope.launchCustomFilter();\r\n\r\n                }\r\n                if (keycode === 19) {\r\n                    $scope.showFinalFilter = $scope.showFinalFilter === false ? true : false;\r\n                }\r\n            }\r\n\r\n\r\n            $scope.customSelectors = [];\r\n            $scope.getCustomSelectors = function () {\r\n                config.widgetSelectors().findFields(\"\").then(function (fields) {\r\n                    $scope.customSelectors = fields;\r\n                    $scope.$apply();\r\n                }).catch(function (err) {\r\n                    $log.error(err);\r\n                });\r\n\r\n            }\r\n\r\n            $scope.customFilter = [];\r\n            $scope.getcustomFilter = function () {\r\n                config.widgetSelectors().findFields(\"\").then(function (fields) {\r\n                    $scope.customFilter = fields;\r\n                    $scope.$apply();\r\n                }).catch(function (err) {\r\n                    $log.error(err);\r\n                });\r\n\r\n            }\r\n\r\n            $scope.ifCustomFilter = function () {\r\n                return $scope.customSelectors && config.sort && $scope.definition.type === 'FullDevicesList' && $scope.toggleAdvanced === 2;\r\n            }\r\n\r\n            $scope.showCustomFields = function () {\r\n                return $scope.definition.type === 'FullDevicesList' && $scope.toggleAdvanced === 2 && $scope.search.customFilter && $scope.filterAvailable && !$scope.editMode;\r\n            }\r\n\r\n            $scope.changeDirection = function () {\r\n                var direction = config.sort.direction;\r\n                if (direction === 'DESCENDING') {\r\n                    $scope.config.sort.direction = 'ASCENDING'\r\n                } else if (direction === 'ASCENDING') {\r\n                    $scope.config.sort.direction = 'DESCENDING'\r\n                }\r\n                $scope.reload();\r\n            }\r\n\r\n            $scope.debugQuery = function () {\r\n                Filter.parseQuery($scope.search.oql || '')\r\n                    .then(function (data) {\r\n                        //$scope.elementos = data;\r\n                        $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\r\n                        $scope.unknownWords = '';\r\n                        $scope.filter.error = null;\r\n                    })\r\n                    .catch(function (err) {\r\n                        $scope.filter.error = err;\r\n                        // Tratar el error\r\n                    });\r\n\r\n            }\r\n\r\n            $scope.autocomplete_options = function () {\r\n                var autocomplete_options = {\r\n                    suggest: Filter.suggest_field_delimited,\r\n                    customSelectors: config.widgetSelectors()\r\n                };\r\n\r\n                return autocomplete_options;\r\n\r\n            };\r\n\r\n            // Multiple selection\r\n            $scope.selectedItems = {};\r\n\r\n            // Gestor de seleccion\r\n            $scope.selectionManager = {\r\n                currentSelection: $scope.selectedItems,\r\n                isSelected: function (key, obj) {\r\n                    if ($scope.selectedItems[key] && !angular.isUndefined(obj)) {\r\n                        $scope.selectedItems[key].data = obj;\r\n                    }\r\n\r\n                    return $scope.selectedItems[key] ? true : false;\r\n                },\r\n                totalSelected: function () {\r\n                    return Object.keys($scope.selectedItems).length;\r\n                }\r\n            };\r\n\r\n            $scope.manageSelectedItems = function () {\r\n                var selectionScope = $scope.$new();\r\n\r\n                selectionScope.selectionConfig = config.selectionConfig;\r\n\r\n                selectionScope.selectedItems = [];\r\n                angular.forEach($scope.selectedItems, function (value, key) {\r\n                    selectionScope.selectedItems.push({ key: key, value: value });\r\n                });\r\n\r\n                selectionScope.currentSelection = {\r\n                    selected: selectionScope.selectedItems\r\n                };\r\n\r\n                var manageItemsSelectedTemplate = adfTemplatePath + 'widget-selection.html';\r\n                var opts = {\r\n                    scope: selectionScope,\r\n                    templateUrl: manageItemsSelectedTemplate,\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    animation: true\r\n                };\r\n\r\n                var instance = $uibModal.open(opts);\r\n\r\n                selectionScope.restoreSelection = function () {\r\n                    selectionScope.currentSelection = {\r\n                        selected: selectionScope.selectedItems\r\n                    };\r\n                };\r\n\r\n                selectionScope.clearSelection = function () {\r\n                    selectionScope.currentSelection.selected = [];\r\n                };\r\n\r\n                // Cierra sy guarda los datos de nueva selección\r\n                selectionScope.applyFilter = function (type) {\r\n                    var customOql = selectionScope.selectionConfig.filterAction(selectionScope.currentSelection.selected, type);\r\n\r\n                    if (!angular.isUndefined(customOql) && customOql !== null) {\r\n                        $scope.toggleAdvanced = 0;\r\n                        Filter.parseQuery(customOql).then(function (data) {\r\n                            $scope.search.oql = customOql;\r\n                            $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\r\n                            $scope.unknownWords = '';\r\n                            $scope.filter.error = null;\r\n\r\n                            $scope.launchSearchingAdv();\r\n                        }).catch(function (err) {\r\n                            $scope.filter.error = err;\r\n                        });\r\n                    }\r\n                };\r\n\r\n                selectionScope.executeOperation = function (operationType) {\r\n                    if (!$scope.editMode) {\r\n                        $scope.$parent.$broadcast('widgetExecuteOperation', { 'selectedItems': selectionScope.currentSelection.selected, 'type': operationType });\r\n                    }\r\n                };\r\n\r\n                // Cierra sy guarda los datos de nueva selección\r\n                selectionScope.saveChangesDialog = function () {\r\n                    var finalSelection = {};\r\n                    angular.forEach(selectionScope.currentSelection.selected, function (data, idx) {\r\n                        finalSelection[data.key] = { data: data.value.data, visible: data.value.visible };\r\n                    });\r\n\r\n                    $scope.selectedItems = angular.copy(finalSelection);\r\n                    $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n\r\n                    $scope.selectionManager.lastItem = {};\r\n                    $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n\r\n                    instance.close();\r\n                    selectionScope.$destroy();\r\n                };\r\n\r\n                // Cierra sin realizar ninguna acción\r\n                selectionScope.closeDialog = function () {\r\n                    instance.close();\r\n                    selectionScope.$destroy();\r\n                };\r\n            };\r\n\r\n\r\n            // bind edit function\r\n            $scope.edit = function () {\r\n                var editScope = $scope.$new();\r\n                editScope.translate = dashboard.translate;\r\n                editScope.definition = angular.copy(definition);\r\n\r\n                var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\r\n                if (definition.editTemplateUrl) {\r\n                    adfEditTemplatePath = definition.editTemplateUrl;\r\n                }\r\n\r\n                var opts = {\r\n                    scope: editScope,\r\n                    templateUrl: adfEditTemplatePath,\r\n                    backdrop: 'static',\r\n                    size: 'lg'\r\n                };\r\n\r\n                var instance = $uibModal.open(opts);\r\n\r\n                editScope.closeDialog = function () {\r\n                    instance.close();\r\n                    editScope.$destroy();\r\n                };\r\n\r\n                // TODO create util method\r\n                function createApplyPromise(result) {\r\n                    var promise;\r\n                    if (typeof result === 'boolean') {\r\n                        var deferred = $q.defer();\r\n                        if (result) {\r\n                            deferred.resolve();\r\n                        } else {\r\n                            deferred.reject();\r\n                        }\r\n                        promise = deferred.promise;\r\n                    } else {\r\n                        promise = $q.when(result);\r\n                    }\r\n                    return promise;\r\n                }\r\n\r\n                editScope.saveDialog = function () {\r\n                    // clear validation error\r\n                    editScope.validationError = null;\r\n\r\n                    // build injection locals\r\n                    var widget = $scope.widget;\r\n\r\n                    // create a default apply method for widgets\r\n                    // without edit mode\r\n                    // see issue https://goo.gl/KHPQLZ\r\n                    var applyFn;\r\n                    if (widget.edit) {\r\n                        applyFn = widget.edit.apply;\r\n                    } else {\r\n                        applyFn = function () {\r\n                            return true;\r\n                        };\r\n                    }\r\n\r\n                    // injection locals\r\n                    var locals = {\r\n                        widget: widget,\r\n                        definition: editScope.definition,\r\n                        config: editScope.definition.config\r\n                    };\r\n\r\n                    // invoke apply function and apply if success\r\n                    var result = $injector.invoke(applyFn, applyFn, locals);\r\n                    createApplyPromise(result).then(function () {\r\n                        definition.title = editScope.definition.title;\r\n                        angular.extend(definition.config, editScope.definition.config);\r\n\r\n                        editScope.closeDialog();\r\n\r\n                        if (widget.edit && widget.edit.reload) {\r\n                            // reload content after edit dialog is closed\r\n                            $scope.$broadcast('widgetConfigChanged');\r\n                        }\r\n                    }, function (err) {\r\n                        if (err) {\r\n                            editScope.validationError = err;\r\n                        } else {\r\n                            editScope.validationError = 'Validation durring apply failed';\r\n                        }\r\n                    });\r\n                };\r\n\r\n            };\r\n\r\n\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            templateUrl: dashboard.customWidgetTemplatePath ? dashboard.customWidgetTemplatePath : adfTemplatePath + 'widget.html',\r\n            scope: {\r\n                definition: '=',\r\n                col: '=column',\r\n                editMode: '=',\r\n                options: '=',\r\n                widgetState: '='\r\n            },\r\n            controller: [\"$scope\", function ($scope) {\r\n                var adfDashboardCollapseExpand = $scope.$on('adfDashboardCollapseExpand', function (event, args) {\r\n                    $scope.widgetState.isCollapsed = args.collapseExpandStatus;\r\n                });\r\n\r\n                var adfWidgetEnterEditMode = $scope.$on('adfWidgetEnterEditMode', function (event, widget) {\r\n                    if (dashboard.idEquals($scope.definition.wid, widget.wid)) {\r\n                        $scope.edit();\r\n                    }\r\n                });\r\n\r\n                var adfIsEditMode = $scope.$on('adfIsEditMode', function (event, widget) {\r\n                    $scope.editing = true;\r\n                });\r\n\r\n                var adfDashboardChanged = $scope.$on('adfDashboardChanged', function (event, widget) {\r\n                    $scope.editing = false;\r\n                });\r\n\r\n                var adfDashboardEditsCancelled = $scope.$on('adfDashboardEditsCancelled', function (event, widget) {\r\n                    $scope.editing = false;\r\n                });\r\n\r\n                $scope.widgetClasses = function (w, definition) {\r\n                    var classes = definition.styleClass || '';\r\n                    // w is undefined, if the type of the widget is unknown\r\n                    // see issue #216\r\n                    if (!w || !w.frameless || $scope.editMode) {\r\n                        classes += ' panel panel-default';\r\n                    }\r\n                    return classes;\r\n                };\r\n\r\n                $scope.openFullScreen = function () {\r\n                    var definition = $scope.definition;\r\n                    var fullScreenScope = $scope.$new();\r\n                    var opts = {\r\n                        scope: fullScreenScope,\r\n                        templateUrl: adfTemplatePath + 'widget-fullscreen.html',\r\n                        size: definition.modalSize || 'lg', // 'sm', 'lg'\r\n                        backdrop: 'static',\r\n                        windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\r\n                    };\r\n\r\n                    var instance = $uibModal.open(opts);\r\n                    fullScreenScope.closeDialog = function () {\r\n                        instance.close();\r\n                        fullScreenScope.$destroy();\r\n                    };\r\n                };\r\n\r\n                $scope.openFilter = function () {\r\n\r\n                }\r\n\r\n                $scope.openAboutScreen = function (size) {\r\n                    size = 'md';\r\n                    var modalInstance = $uibModal.open({\r\n                        animation: true,\r\n                        templateUrl: 'widgetAboutModal.html',\r\n                        controller: [\"$scope\", \"$uibModalInstance\", \"information\", function ($scope, $uibModalInstance, information) {\r\n                            $scope.about = {};\r\n                            $scope.about.info = information;\r\n                            $scope.ok = function () {\r\n                                $uibModalInstance.close();\r\n                            };\r\n                        }],\r\n                        'size': size,\r\n                        resolve: {\r\n                            information: function () {\r\n                                return $scope.config.about;\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    modalInstance.result.then(function (selectedItem) {\r\n                        $scope.selected = selectedItem;\r\n                    }, function () {\r\n                        $log.info('Modal dismissed at: ' + new Date());\r\n                    });\r\n                };\r\n\r\n                $scope.saveWidgetScreen = function (wId) {\r\n                    $scope.$emit('generateSnapshot', {\r\n                        'objectSelector': '.widget_' + wId,\r\n                        'fileName': 'capture_' + new Date().getTime()\r\n                    });\r\n                };\r\n\r\n\r\n                var addItemToSelection = $scope.$on('addItemToSelection', function (event, item) {\r\n                    if (!$scope.selectedItems[item.key]) {\r\n                        $scope.selectedItems[item.key] = {\r\n                            data: item.data,\r\n                            visible: item.visible\r\n                        };\r\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n                        item.isSelected = true;\r\n                        $scope.selectionManager.lastItem = item;\r\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n                    }\r\n\r\n                });\r\n\r\n                var removeItemFromSelection = $scope.$on('removeItemFromSelection', function (event, item) {\r\n                    if ($scope.selectedItems[item.key]) {\r\n                        delete $scope.selectedItems[item.key];\r\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n                        item.isSelected = false;\r\n                        $scope.selectionManager.lastItem = item;\r\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n                    }\r\n                });\r\n\r\n                $scope.$on('$destroy', function () {\r\n                    adfDashboardCollapseExpand();\r\n                    adfWidgetEnterEditMode();\r\n                    adfIsEditMode();\r\n                    adfDashboardChanged();\r\n                    adfDashboardEditsCancelled();\r\n                    addItemToSelection();\r\n                    removeItemFromSelection();\r\n                });\r\n            }],\r\n            compile: function () {\r\n\r\n                /**\r\n                 * use pre link, because link of widget-content\r\n                 * is executed before post link widget\r\n                 */\r\n                return {\r\n                    pre: preLink,\r\n                    post: postLink\r\n                };\r\n            }\r\n        };\r\n\r\n    }]);\nangular.module(\"adf\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"../src/templates/dashboard-column.html\",\"<div adf-id={{column.cid}} class=column ng-class=column.styleClass ng-model=column.widgets> <adf-widget ng-repeat=\\\"definition in column.widgets\\\" definition=definition column=column edit-mode=editMode options=options widget-state=widgetState>  </adf-widget></div> \");\n$templateCache.put(\"../src/templates/dashboard-edit.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h3 class=modal-title ng-bind=\\\"translate(\\'ADF_COMMON_EDIT_DASHBOARD\\')\\\">Edit Dashboard</h3> </div> <div class=modal-body> <form role=form name=form novalidate> <div class=\\\"form-group col-xs-12 col-md-6\\\"> <label for=dashboardTitle ng-bind=\\\"translate(\\'ADF_COMMON_TITLE\\')\\\">Title</label> <input type=text class=\\\"form-control text-primary\\\" id=dashboardTitle ng-model=copy.title required> </div> <div class=\\\"form-group col-xs-12 col-md-6\\\"> <label for=dashboardDescription ng-bind=\\\"translate(\\'ADF_COMMON_DESCRIPTION\\')\\\">Description</label> <input type=text class=\\\"form-control text-primary\\\" id=dashboardDescription ng-model=copy.description> </div> <div class=\\\"form-group col-xs-12 col-md-6\\\"> <label for=icon>Icon</label> <ui-select tagging=tagTransform id=icon ng-model=copy.icon theme=bootstrap allow-clear=false required=true on-select=selectIcon($select.selected) title=\\\"Choose icon\\\"> <ui-select-match placeholder=\\\"Choose icon\\\" allow-clear=false> <i class=\\\"fa {{$select.selected}} fa-2x\\\"></i> <span>{{$select.selected}}</span> </ui-select-match> <ui-select-choices class=oux-icon-selector repeat=\\\"iconTmp in availableIcons | filter: $select.search\\\"> <i class=\\\"fa fa-4x\\\" ng-class=iconTmp title={{iconTmp}}></i><br> <span ng-bind-html=\\\"iconTmp| highlight: $select.search\\\"></span> </ui-select-choices> </ui-select> </div> <div class=\\\"form-group col-xs-12\\\"> <label ng-bind=\\\"translate(\\'ADF_EDIT_DASHBOARD_STRUCTURE_LABEL\\')\\\">Structure</label> <div class=row ng-init=\\\"splitted = split(structures, 3)\\\"> <div class=col-lg-4 ng-repeat=\\\"structureColumn in splitted\\\"> <div class=radio ng-repeat=\\\"(key, structure) in structureColumn\\\"> <div class=row> <div class=col-sm-2> <label> <input type=radio value={{key}} ng-model=model.structure ng-change=\\\"changeStructure(key, structure)\\\"> </label> </div> <div class=col-sm-9 ng-click=\\\"changeStructure(key, structure)\\\"> <adf-structure-preview name=key structure=structure selected=\\\"model.structure == key\\\"> </adf-structure-preview> </div> </div> </div> </div> </div> </div> </form> </div> <div class=modal-footer> <div class=col-xs-12> <button type=submit class=\\\"btn btn-primary\\\" ng-click=closeDialog() ng-disabled=form.$invalid ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> </div> </div>\");\n$templateCache.put(\"../src/templates/dashboard-row.html\",\"<div class=row ng-class=row.styleClass ng-style=row.style>  </div> \");\n$templateCache.put(\"../src/templates/dashboard-title.html\",\"<div class=row style=padding:0px;> <div class=col-xs-12 ng-class=\\\"hideButtons?\\'col-md-12\\':\\'col-md-5\\'\\\"> <span ng-if=model.icon id=idDashboardIcon class=\\\"fa fa-2x\\\" ng-class=model.icon></span> <span id=idDashboardTitle class=\\\"fa-2x text-primary\\\">{{model.title}}</span> <span ng-if=model.description id=idDashboardDescription>{{model.description}}</span> </div> <div class=\\\"col-xs-12 col-md-7 text-right\\\" ng-if=!hideButtons> <a href ng-if=editMode title=\\\"{{ translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_ADD\\') }}\\\" ng-click=addWidgetDialog() class=\\\"btn btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-plus\\\" aria-hidden=true></i> Add widget </a> <a href ng-if=editMode title=\\\"{{ translate(\\'ADF_COMMON_EDIT_DASHBOARD\\') }}\\\" ng-click=editDashboardDialog() class=\\\"btn btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-cog\\\"></i> Configuration </a> <a href ng-if=editMode title=\\\"{{ translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_UNDO\\') }}\\\" ng-click=cancelEditMode() class=\\\"btn btn-warning btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-close\\\"></i> Cancel </a> <a href ng-if=\\\"options.editable && !editMode && !model.temporal\\\" title=\\\"{{translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE\\') }}\\\" ng-click=toggleEditMode() class=\\\"btn btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-pencil-square-o\\\"></i> Edit </a> <a href ng-if=\\\"options.editable && editMode\\\" title=\\\"{{translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_SAVE\\')}}\\\" ng-click=toggleEditMode() class=\\\"btn btn-success btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-save\\\"></i> Save/Update </a> </div> </div>\");\n$templateCache.put(\"../src/templates/dashboard.html\",\"<div class=dashboard-container> <div ng-include src=model.titleTemplateUrl></div> <div class=\\\"row col-xs-12 dashboard\\\" x-ng-class=\\\"{\\'edit\\' : editMode}\\\" style=\\\"padding: 0px;margin: 0px;\\\"> <adf-dashboard-row row=row adf-model=model options=options ng-repeat=\\\"row in model.rows\\\" edit-mode=editMode continuous-edit-mode=continuousEditMode> </adf-dashboard-row></div> </div>\");\n$templateCache.put(\"../src/templates/structure-preview.html\",\"<div class=structure-preview ng-class=\\\"{selected: selected}\\\"> <h4>{{name}}</h4> <adf-dashboard-row ng-repeat=\\\"row in preview.rows\\\" row=row> </adf-dashboard-row></div> \");\n$templateCache.put(\"../src/templates/widget-add.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title ng-bind=\\\"translate(\\'ADF_WIDGET_ADD_HEADER\\')\\\">Add new widget</h4> </div> <div class=modal-body>  <div ng-if=createCategories> <uib-accordion ng-init=\\\"categorized = createCategories(widgets)\\\"> <div uib-accordion-group heading={{category.name}} ng-repeat=\\\"category in categorized | adfOrderByObjectKey: \\'name\\'\\\"> <dl class=dl-horizontal> <dt ng-repeat-start=\\\"widget in category.widgets | adfOrderByObjectKey: \\'key\\'\\\"> <a href ng-click=addWidget(widget.key) ng-class={{widget.key}}> {{widget.title}} </a> </dt> <dd ng-repeat-end ng-if=widget.description> {{widget.description}} </dd> </dl> </div> </uib-accordion> </div>  <div style=\\\"display: inline-block;\\\" ng-if=!createCategories> <dl class=dl-horizontal> <dt ng-repeat-start=\\\"widget in widgets | adfOrderByObjectKey: \\'key\\'\\\"> <a href ng-click=addWidget(widget.key) ng-class={{widget.key}}> {{widget.title}} </a> </dt> <dd ng-repeat-end ng-if=widget.description> {{widget.description}} </dd> </dl> </div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> </div> \");\n$templateCache.put(\"../src/templates/widget-delete.html\",\"<div class=modal-header> <h4 class=modal-title><span ng-bind=\\\"translate(\\'ADF_COMMON_DELETE\\')\\\">Delete</span> {{widget.title}}</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=widgetTitle ng-bind=\\\"translate(\\'ADF_WIDGET_DELETE_CONFIRM_MESSAGE\\')\\\">Are you sure you want to delete this widget ?</label> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> <button type=button class=\\\"btn btn-primary\\\" ng-click=deleteDialog() ng-bind=\\\"translate(\\'ADF_COMMON_DELETE\\')\\\">Delete</button> </div> \");\n$templateCache.put(\"../src/templates/widget-edit.html\",\"<form name=widgetEditForm novalidate role=form ng-submit=saveDialog()> <div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h3 class=modal-title>{{widget.title}}</h3> </div> <div class=modal-body> <div class=row> <div class=col-xs-12> <div class=\\\"alert alert-danger\\\" role=alert ng-show=validationError> <strong>Apply error:</strong> {{validationError}} </div> </div> </div> <div class=row ng-if=widget.show_reload_config> <div class=\\\"col-xs-12 col-md-6\\\"> <div class=form-group> <label for=widgetTitle ng-bind=\\\"translate(\\'ADF_COMMON_TITLE\\')\\\">Title</label> <input type=text class=\\\"form-control text-primary\\\" id=widgetTitle ng-model=definition.title placeholder=\\\"Enter title\\\"> </div> </div> <div class=\\\"col-xs-12 col-md-6\\\"> <div class=form-group> <label for=widgetReloadPeriod ng-bind=\\\"translate(\\'ADF_WIDGET_TOOLTIP_REFRESH\\')\\\">Refresh</label> <select class=form-control id=widgetReloadPeriod aria-label=\\\"ngSelected demo\\\" ng-model=definition.config.reloadPeriod required> <option ng-selected=selected value=0>MANUAL</option> <option value=20>20 SECONDS</option> <option value=40>40 SECONDS</option> <option value=60>EVERY MINUTE</option> </select> </div> </div> </div> <div class=row ng-if=!widget.show_reload_config> <div class=\\\"col-xs-12 col-md-12\\\"> <div class=form-group> <label for=widgetTitle ng-bind=\\\"translate(\\'ADF_COMMON_TITLE\\')\\\">Title</label> <input type=text class=\\\"form-control text-primary\\\" id=widgetTitle ng-model=definition.title placeholder=\\\"Enter title\\\"> </div> </div> </div> <div ng-if=widget.edit class=row> <div class=col-xs-12> <adf-widget-content model=definition content=widget.edit> </adf-widget-content></div> </div> <div class=row> <div class=col-xs-12> <div class=form-group> <label for=widgetAbout>About</label> <textarea class=\\\"form-control text-primary\\\" id=widgetAbout ng-model=definition.config.about placeholder=\\\"Enter widget description\\\"></textarea> </div> </div> </div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CANCEL\\')\\\">Cancel</button> <button type=submit class=\\\"btn btn-primary\\\" ng-disabled=widgetEditForm.$invalid ng-value=\\\"translate(\\'ADF_COMMON_APPLY\\')\\\">Apply</button> </div> </form>\");\n$templateCache.put(\"../src/templates/widget-fullscreen.html\",\"<div class=modal-header> <div class=\\\"pull-right widget-icons\\\"> <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_REFRESH\\') }}\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a> <a href title=close ng-click=closeDialog()> <i class=\\\"glyphicon glyphicon-remove\\\"></i> </a> <a href title=\\\"insert into dashboard\\\" ng-if=persistDashboard ng-click=persistDashboard()> <i class=\\\"glyphicon glyphicon-save\\\"></i> </a> </div> <h4 class=modal-title>&nbsp;{{ definition.title }}</h4> </div> <div class=\\\"modal-body widget\\\" style=overflow:hidden;> <adf-widget-content model=definition content=widget> </adf-widget-content></div> <div class=modal-footer ng-if=widget.show_modal_footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> </div>\");\n$templateCache.put(\"../src/templates/widget-selection.html\",\"<style>\\r\\n    .selected-entities-control .ui-select-container>div:first-child {\\r\\n        max-height: 300px;\\r\\n        overflow-y: scroll;\\r\\n        overflow-x: hidden;\\r\\n    }\\r\\n</style> <form name=widgetSelectionForm novalidate role=form ng-submit=saveChangesDialog()> <div class=modal-header> <div class=\\\"col-xs-12 col-md-12\\\"> <h3 class=\\\"modal-title text-left\\\"><i class=\\\"fa fa-check-square-o\\\" aria-hidden=true></i> Selected items...</h3> </div> </div> <div class=modal-body> <div class=col-xs-12> <div class=\\\"form-group selected-entities-control\\\"> <label for=currentSelection>Current selection</label> <ui-select multiple tagging ng-model=currentSelection.selected theme=bootstrap sortable=false title=\\\"Selected items\\\"> <ui-select-match placeholder=\\\"No items selected\\\"> <div class=text-left style=\\\"margin-right: 15px;font-size: 0.9em;max-width:350px;\\\" ng-if=$item.value.visible> <span style=\\\"white-space: initial;word-break: break-word;\\\" ng-repeat=\\\"(k,v) in $item.value.visible track by $index\\\" ng-if=\\\"v !== undefined\\\"><strong>{{k}}:</strong> {{v}}<br></span> </div> <div class=text-left style=\\\"margin-right: 15px;font-size: 0.9em;max-width:350px;\\\" ng-if=!$item.value.visible> <span style=\\\"white-space: initial;word-break: break-word;\\\">{{$item.key}}</span> </div> </ui-select-match> <ui-select-choices repeat=\\\"itemSel in currentSelection.selected | filter:$select.search\\\"> {{itemSel.key}} </ui-select-choices> </ui-select> </div> </div> <div class=\\\"col-xs-12 text-left\\\"> <button type=button class=\\\"btn btn-success btn-sm\\\" ng-click=restoreSelection() ng-disabled=\\\"currentSelection.selected.length === selectedItemsLength\\\" ng-bind=\\\"translate(\\'ADF_WIDGET_RESTORE\\')\\\">Restore</button> <button type=button class=\\\"btn btn-danger btn-sm\\\" ng-click=clearSelection() ng-disabled=\\\"currentSelection.selected.length < 1\\\" ng-bind=\\\"translate(\\'ADF_WIDGET_CLEAR\\')\\\">Clear</button> </div> </div> <div class=modal-footer> <div class=\\\"col-xs-12 col-md-2 text-left\\\"> <div uib-dropdown ng-if=\\\"selectionConfig && selectionConfig.filterTypes && currentSelection.selected.length > 0\\\"> <button id=applyFilterBy type=button class=\\\"btn btn-primary\\\" uib-dropdown-toggle> <i class=\\\"glyphicon glyphicon-filter pointer\\\"></i> Filter by <span class=caret></span> </button> <ul class=dropdown-menu uib-dropdown-menu role=menu aria-labelledby=applyFilterBy> <li role=menuitem ng-repeat=\\\"filterType in selectionConfig.filterTypes\\\"><a href ng-click=applyFilter(filterType) title=\\\"Selected {{filterType}}\\\">Selected {{filterType}}</a></li> </ul> </div> </div> <div class=\\\"col-xs-12 col-md-3 text-left\\\"> <div uib-dropdown ng-if=\\\"selectionConfig && selectionConfig.operationTypes && currentSelection.selected.length > 0\\\"> <button id=executeOperation type=button class=\\\"btn btn-primary\\\" uib-dropdown-toggle> <i class=\\\"glyphicon glyphicon-flash pointer\\\"></i> Exec. Operation <span class=caret></span> </button> <ul class=dropdown-menu uib-dropdown-menu role=menu aria-labelledby=executeOperation> <li role=menuitem ng-repeat=\\\"operationType in selectionConfig.operationTypes\\\"><a href ng-click=executeOperation(operationType) title={{operationType}}>{{operationType|humanize}}</a></li> </ul> </div> </div> <div class=\\\"col-xs-12 col-md-7 text-right\\\"> <button type=submit class=\\\"btn btn-primary\\\" ng-disabled=\\\"currentSelection.selected.length === selectedItemsLength\\\" ng-value=\\\"translate(\\'ADF_COMMON_APPLY\\')\\\">Apply</button> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> </div> </div> </form>\");\n$templateCache.put(\"../src/templates/widget-title.html\",\"<div class=panel-title style=margin:0px;> <span class=pull-left>  <a href ng-if=\\\"selectedItemsLength > 0\\\" title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_SELECTION\\') }}\\\" ng-click=manageSelectedItems() style=float:left;> <i class=\\\"glyphicon glyphicon-check\\\"></i><small class=ogux-budget>{{ selectedItemsLength }}</small> </a> <h4 ng-if=\\\"!widget.frameless && definition.title\\\" style=\\\"margin:0px 0px 0px 2px;float:left;\\\">{{definition.title}}</h4> </span> <div class=pull-right> <span ng-if=config.about> <a href uib-popover=\\\"{{ config.about }}\\\" popover-trigger=\\\"\\'mouseenter\\'\\\" popover-placement=top ng-click=openAboutScreen()> <i class=\\\"glyphicon glyphicon-info-sign\\\"></i></a> <script type=text/ng-template id=widgetAboutModal.html> <div class=\\\"modal-header\\\"> <h4 class=\\\"modal-title\\\">About</h4> </div> <div class=\\\"modal-body\\\">{{ about.info }}</div> <div class=\\\"modal-footer\\\"><button class=\\\"btn btn-primary\\\" type=\\\"button\\\" ng-click=\\\"ok()\\\">OK</button></div> </script> </span> <a ng-if=\\\"!editMode && widget.print\\\" href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_PRINT\\') }}\\\" ng-click=print()> <i class=\\\"glyphicon glyphicon-print\\\"></i> </a> <span ng-if=\\\"!editMode && config.widgetOnToggleView && config.widgetViews\\\" uib-popover=\\\"Change view\\\" popover-trigger=\\\"\\'mouseenter\\'\\\" popover-placement=top uib-dropdown> <a href id=toggle_{{definition.wid}} uib-dropdown-toggle> <i class=\\\"glyphicon glyphicon-eye-close\\\"></i> </a> <ul class=dropdown-menu uib-dropdown-menu aria-labelledby=\\\"Change view\\\"> <li ng-repeat=\\\"choice in config.widgetViews\\\"> <a ng-click=config.widgetOnToggleView(choice.value)>{{choice.name}}</a> </li> </ul> </span> <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_REFRESH\\') }}\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_OPERATION\\') }}\\\" ng-if=\\\"widget.executeOperation && !editMode && isExecuteOperationEnabled()\\\" ng-click=executeOperation()> <i class=\\\"glyphicon glyphicon-flash\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_FILTER\\') }}\\\" ng-if=\\\"config.widgetSelectors && !editMode\\\" ng-click=showFilter()> <i class=\\\"glyphicon glyphicon-filter\\\" ng-class=\\\"{\\'active\\': search.json || search.quick ||search.customFilter}\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_SORT\\') }}\\\" ng-if=\\\"config.sort && !editMode\\\" ng-click=showFilter()> <i class=\\\"glyphicon glyphicon-sort\\\" ng-class=\\\"{\\'active\\': (config.sort.value && config.sort.value !== \\'\\')}\\\"></i> </a>  <a href title=\\\"Save picture\\\" ng-if=\\\"!editMode && !widgetState.isCollapsed\\\" ng-click=saveWidgetScreen(definition.wid)> <i class=\\\"glyphicon glyphicon-picture\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_MOVE\\') }}\\\" class=adf-move ng-if=editMode> <i class=\\\"glyphicon glyphicon-move\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_COLLAPSE\\') }}\\\" ng-show=\\\"options.collapsible && !widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-minus\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_EXPAND\\') }}\\\" ng-show=\\\"options.collapsible && widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-plus\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_EDIT\\') }}\\\" ng-click=edit() ng-if=editMode> <i class=\\\"glyphicon glyphicon-cog\\\"></i> </a> <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_FULLSCREEN\\') }}\\\" ng-click=openFullScreen() ng-show=options.maximizable> <i class=\\\"glyphicon glyphicon-fullscreen\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_REMOVE\\') }}\\\" ng-click=remove() ng-if=editMode> <i class=\\\"glyphicon glyphicon-trash\\\"></i> </a> </div> </div>\");\n$templateCache.put(\"../src/templates/widget.html\",\"<div adf-id={{definition.wid}} adf-widget-type={{definition.type}} ng-class=\\\"widgetClasses(widget, definition)\\\" class=\\\"widget widget_{{definition.wid}}\\\"> <a name={{definition.wid}} id={{definition.wid}}></a> <div class=\\\"panel-heading clearfix bg-primary\\\" ng-if=\\\"!widget.frameless || editMode\\\"> <div ng-include src=definition.titleTemplateUrl></div> </div> <div ng-if=\\\"!widgetState.isCollapsed && config.widgetSelectors && !editMode && filterAvailable\\\" class=\\\"row form-group\\\" style=\\\"margin-top: 5px !important;\\\"> <div ng-if=\\\"toggleAdvanced === 0\\\" class=\\\"col-xs-12 col-md-8\\\"> <div class=filter mass-autocomplete> <input class=form-control style=padding-right:15px; name=filterValue ng-keypress=enter($event) ng-model=search.oql placeholder=\\\"Enter your advanced filter\\\" mass-autocomplete-item=autocomplete_options() ng-change=debugQuery()> <label ng-click=launchSearchingAdv() style=\\\"position: absolute;font-size: 1.5em;cursor:pointer;right: 15px;\\\" class=\\\"glyphicon glyphicon-search\\\"></label> </div> <div ng-if=\\\"!editMode && filter.error\\\" class=col-xs-12> <alert type=danger class=\\\"text-center text-danger\\\"> <span>{{filter.error}}</span> </alert> </div> <div ng-if=\\\"showFinalFilter && search.json\\\" class=col-xs-12> <pre>{{ search.json }}</pre> </div> </div> <div ng-if=ifCustomFilter() class=\\\"col-xs-12 col-md-8\\\"> <div class=\\\"filter form-group\\\"> <a href class=text-danger ng-click=\\\"options.customFilter.open = !options.customFilter.open\\\"> <i class=glyphicon ng-class=\\\"{\\'glyphicon-chevron-up\\': options.customFilter.open, \\'glyphicon-chevron-down\\': !options.customFilter.open}\\\"></i> Pick filter fields </a> <label ng-click=launchCustomFilter() style=\\\"position: absolute;font-size: 1.5em;cursor:pointer;right: 15px;\\\" class=\\\"glyphicon glyphicon-search\\\"></label> <div class=row ng-if=options.customFilter.open> <ui-select multiple=true ng-model=search.fields theme=bootstrap title=\\\"Choose a filter\\\" on-select=addCustomFilter($item) on-remove=deleteFilter($item) ng-click=getcustomFilter()> <ui-select-match placeholder=\\\"Pick filter fields ...\\\" allow-clear=true> {{$item}} </ui-select-match> <ui-select-choices repeat=\\\"selector in (customFilter | filter: $select.search) track by $index\\\"> <small ng-bind-html=\\\"selector | highlight: $select.search\\\"></small> </ui-select-choices> </ui-select> </div> </div> </div> <div ng-if=\\\"toggleAdvanced === 1\\\" class=\\\"col-xs-12 col-md-8\\\"> <div class=filter> <input class=form-control style=padding-right:15px; name=filterValue ng-keypress=enter($event) ng-model=search.quick placeholder=\\\"Enter your basic filter here\\\"> <label ng-click=launchSearchingQuick() style=\\\"position: absolute;font-size: 1.5em;cursor:pointer;right: 15px;\\\" class=\\\"glyphicon glyphicon-search\\\"></label> </div> </div> <div class=\\\"col-xs-12 col-md-4\\\" uib-dropdown> <button class=\\\"btn btn-sm\\\" uib-dropdown-toggle title=\\\"Toggle Advanced/Basic filter\\\"> <i class=\\\"advanced-filter glyphicon\\\" ng-class=\\\"{\\'glyphicon-font\\' : toggleAdvanced === 0, \\'glyphicon-bold\\' : toggleAdvanced ===1 , \\'glyphicon-filter\\' : toggleAdvanced === 2, }\\\"></i> <span class=caret></span> </button> <ul class=\\\"dropdown-menu panel\\\" style=\\\"border: 1px groove;\\\" uib-dropdown-menu aria-labelledby=simple-dropdown> <li ng-click=toggleFilter(0)> <a href> <i class=\\\"advanced-filter glyphicon glyphicon-font txt-primary\\\"></i> Advanced filter</a> </li> <li ng-click=toggleFilter(1)> <a href> <i class=\\\"basic-filter glyphicon glyphicon-bold txt-primary\\\"></i> Basic filter</a> </li> <li ng-if=\\\"definition.type === \\'FullDevicesList\\'\\\" ng-click=toggleFilter(2)> <a href> <i class=\\\"custom-filter glyphicon glyphicon-filter txt-primary\\\"></i> Custom filter</a> </li> </ul> </div> </div> <div ng-if=\\\"customSelectors && config.sort && filterAvailable && toggleAdvanced != 2\\\" class=\\\"row form-group\\\" style=\\\"margin-top: 5px !important;\\\"> <div class=\\\"sort col-xs-12 col-md-8\\\"> <ui-select ng-model=config.sort.value theme=bootstrap title=\\\"Choose a filter\\\" allow-clear=true append-to-body=true ng-change=launchSearching() ng-click=getCustomSelectors()> <ui-select-match placeholder=\\\"Sorted by ...\\\" allow-clear=true>Sort by: {{$select.selected}}</ui-select-match> <ui-select-choices repeat=\\\"selector in customSelectors | filter: $select.search track by $index\\\"> <small> <span ng-bind-html=\\\"selector | highlight: $select.search\\\"></span> </small> </ui-select-choices> </ui-select> </div> <div class=\\\"sortDirection col-xs-4 col-md-4\\\"> <button class=\\\"btn btn-sm pointer\\\" ng-click=changeDirection() ng-disabled=\\\"config.sort.value === \\'\\'\\\" title=\\\"Toggle sorting direction\\\"> <i class=glyphicon style=font-size:1.3em; ng-class=\\\"config.sort.direction===\\'ASCENDING\\' ? \\'glyphicon-sort-by-attributes\\': \\'glyphicon-sort-by-attributes-alt\\'\\\"></i> </button> </div> </div> <div ng-if=showCustomFields() class=\\\"col-xs-12 col-md-12\\\"> <div class=\\\"col-xs-12 col-md-4\\\" ng-repeat=\\\"model in search.customFilter\\\"> <label>{{model.name}}</label> <input class=form-control id={{model.name}} name={{model.name}} type=text ng-model=search.customFilter[$index].value ng-keypress=enter($event)> </div> </div> <div ng-class=\\\"{ \\'panel-body\\':!widget.frameless || editMode}\\\" uib-collapse=widgetState.isCollapsed style=overflow:hidden;> <adf-widget-content model=definition content=widget editing=editMode> </adf-widget-content></div> </div> \");}]);\n})(window);","/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardRow', function ($compile, adfTemplatePath, columnTemplate) {\r\n    'use strict';\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        row: '=',\r\n        adfModel: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\r\n      link: function($scope, $element) {\r\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\r\n          $compile(columnTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        }\r\n      }\r\n    };\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfStructurePreview', function(adfTemplatePath) {\r\n\r\n    function adjustRowHeight(container){\r\n      if (container.rows && container.rows.length > 0){\r\n        var height = 100 / container.rows.length;\r\n        angular.forEach(container.rows, function(row){\r\n          row.style = {\r\n            height: height + '%'\r\n          }\r\n\r\n          if (row.columns){\r\n            angular.forEach(row.columns, function(column){\r\n              adjustRowHeight(column);\r\n            });\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    function prepareStructure($scope){\r\n      var structure = angular.copy($scope.structure);\r\n      adjustRowHeight(structure);\r\n      $scope.preview = structure;\r\n    }\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        name: '=',\r\n        structure: '=',\r\n        selected: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'structure-preview.html',\r\n      link: prepareStructure\r\n    };\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('adf')\r\n    .directive('adfWidgetContent', function ($log, $q, widgetService,\r\n        $compile, $controller, $injector, dashboard) {\r\n\r\n        function renderError($element, msg) {\r\n            $log.warn(msg);\r\n            $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\r\n        }\r\n\r\n        function compileWidget($scope, $element, currentScope, configChanged) {\r\n            var model = $scope.model;\r\n            var content = $scope.content;\r\n            var editing = $scope.editing;\r\n\r\n            var newScope = currentScope;\r\n            if (!model) {\r\n                renderError($element, 'model is undefined');\r\n            } else if (!content) {\r\n                //var msg = 'widget content is undefined, please have a look at your browser log';\r\n                var msg = 'Widget ' + (model.title ? 'for \"' + model.title + '\"' : '') + ' has been deprecated. In order to continue you have to delete this one and look for the equivalent one.';\r\n                renderError($element, msg);\r\n            } else {\r\n                if (newScope) {\r\n                    var is_menu = newScope.menu !== undefined && newScope.menu !== null;\r\n                    var is_itemsPerPage = newScope.itemsPerPage !== undefined && newScope.itemsPerPage !== null;\r\n                    if (is_menu || is_itemsPerPage || configChanged || !angular.isFunction(newScope.reloadData)) {\r\n                        newScope = renderWidget($scope, $element, currentScope, model, content);\r\n                    } else {\r\n                        newScope.reloadData();\r\n                    }\r\n                } else {\r\n                    newScope = renderWidget($scope, $element, currentScope, model, content);\r\n                }\r\n            }\r\n\r\n            function _getWindowTime(type) {\r\n                if (type === \"custom\") {\r\n                    return {\r\n                        from: newScope.config.windowFilter.from,\r\n                        to: newScope.config.windowFilter.to\r\n                    }\r\n                }\r\n                var from = window.moment().subtract(1, type);\r\n                return {\r\n                    from: from._d\r\n                };\r\n            }\r\n\r\n            if (newScope) {\r\n                if (newScope.config) {\r\n                    newScope.config.getWindowTime = function () {\r\n                        var windowFilter = newScope.config.windowFilter;\r\n                        if (windowFilter && windowFilter.type) {\r\n                            var winTime = _getWindowTime(windowFilter.type);\r\n                            /* jshint ignore:start */\r\n                            if (!window.eval(newScope.config.windowFilter.rawdate)) {\r\n                                for (var key in winTime) {\r\n                                    winTime[key] = window.moment(winTime[key]).format();\r\n                                }\r\n                                winTime['rawdate'] = true;\r\n                            }\r\n                            /* jshint ignore:end */\r\n                            return winTime;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                newScope.editing = editing ? editing : false;\r\n            }\r\n            return newScope;\r\n        }\r\n\r\n        function renderWidget($scope, $element, currentScope, model, content, editing) {\r\n            // display loading template\r\n            $element.html(dashboard.loadingTemplate);\r\n\r\n            // create new scope\r\n            var templateScope = $scope.$new();\r\n\r\n            // pass config object to scope\r\n            if (!model.config) {\r\n                model.config = {};\r\n            }\r\n\r\n            templateScope.config = model.config;\r\n            templateScope.editing = editing;\r\n            templateScope.selectionManager = (currentScope && currentScope.selectionManager) ? currentScope.selectionManager : undefined;\r\n\r\n            // local injections\r\n            var base = {\r\n                $scope: templateScope,\r\n                widget: model,\r\n                config: model.config\r\n            };\r\n\r\n            // get resolve promises from content object\r\n            var resolvers = {};\r\n            resolvers.$tpl = widgetService.getTemplate(content);\r\n            if (content.resolve) {\r\n                angular.forEach(content.resolve, function (promise, key) {\r\n                    if (angular.isString(promise)) {\r\n                        resolvers[key] = $injector.get(promise);\r\n                    } else {\r\n                        resolvers[key] = $injector.invoke(promise, promise, base);\r\n                    }\r\n                });\r\n            }\r\n\r\n            // resolve all resolvers\r\n            $q.all(resolvers).then(function (locals) {\r\n                angular.extend(locals, base);\r\n\r\n                // pass resolve map to template scope as defined in resolveAs\r\n                if (content.resolveAs) {\r\n                    templateScope[content.resolveAs] = locals;\r\n                }\r\n\r\n                // compile & render template\r\n                var template = locals.$tpl;\r\n                $element.html(template);\r\n                if (content.controller) {\r\n                    var templateCtrl = $controller(content.controller, locals);\r\n                    if (content.controllerAs) {\r\n                        templateScope[content.controllerAs] = templateCtrl;\r\n                    }\r\n                    $element.children().data('$ngControllerController', templateCtrl);\r\n                }\r\n                $compile($element.contents())(templateScope);\r\n            }, function (reason) {\r\n                // handle promise rejection\r\n                var msg = 'Could not resolve all promises';\r\n                if (reason) {\r\n                    msg += ': ' + reason;\r\n                }\r\n                renderError($element, msg);\r\n            });\r\n\r\n            // destroy old scope\r\n            if (currentScope) {\r\n                currentScope.$destroy();\r\n            }\r\n\r\n            return templateScope;\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            scope: {\r\n                model: '=',\r\n                content: '=',\r\n                editing: '='\r\n            },\r\n            link: function ($scope, $element) {\r\n                var currentScope = compileWidget($scope, $element, null);\r\n                var widgetConfigChangedEvt = $scope.$on('widgetConfigChanged', function () {\r\n                    currentScope = compileWidget($scope, $element, currentScope, true);\r\n                });\r\n\r\n                var widgetReloadEvt = $scope.$on('widgetReload', function () {\r\n                    currentScope = compileWidget($scope, $element, currentScope, false);\r\n                });\r\n\r\n                $scope.$on('destroy', function () {\r\n                    widgetConfigChangedEvt();\r\n                    widgetReloadEvt();\r\n                });\r\n            }\r\n        };\r\n    });","\r\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n/**\r\n * The widget service provide helper functions to render widgets and their content.\r\n */\r\nangular.module('adf')\r\n  .factory('widgetService', function($http, $q, $sce, $templateCache, dashboard) {\r\n    'use strict';\r\n\r\n    function parseUrl(url) {\r\n      var parsedUrl = url;\r\n      if (url.indexOf('{widgetsPath}') >= 0) {\r\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\r\n                .replace('//', '/');\r\n        if (parsedUrl.indexOf('/') === 0) {\r\n          parsedUrl = parsedUrl.substring(1);\r\n        }\r\n      }\r\n      return parsedUrl;\r\n    }\r\n\r\n    var exposed = {};\r\n\r\n    exposed.getTemplate = function(widget){\r\n      var deferred = $q.defer();\r\n\r\n      if (widget.template) {\r\n        deferred.resolve(widget.template);\r\n      } else if (widget.templateUrl) {\r\n        // try to fetch template from cache\r\n        var tpl = $templateCache.get(widget.templateUrl);\r\n        if (tpl) {\r\n          deferred.resolve(tpl);\r\n        } else {\r\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\r\n          $http.get(url)\r\n               .success(function(response) {\r\n                 // put response to cache, with unmodified url as key\r\n                 $templateCache.put(widget.templateUrl, response);\r\n                 deferred.resolve(response);\r\n               })\r\n               .error(function() {\r\n                 deferred.reject('could not load template');\r\n               });\r\n        }\r\n      }\r\n\r\n      return deferred.promise;\r\n    };\r\n\r\n    return exposed;\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('adf')\r\n    .directive('adfWidget', function ($injector, $q, $log, $uibModal, $rootScope, $interval, dashboard, adfTemplatePath, Filter) {\r\n        function preLink($scope) {\r\n            var definition = $scope.definition;\r\n\r\n            //passs translate function from dashboard so we can translate labels inside html templates\r\n            $scope.translate = dashboard.translate;\r\n\r\n            if (definition) {\r\n                var w = dashboard.widgets[definition.type];\r\n                if (w) {\r\n                    // pass title\r\n                    if (!definition.title) {\r\n                        definition.title = w.title;\r\n                    }\r\n\r\n                    if (!definition.titleTemplateUrl) {\r\n                        definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\r\n                        if (w.titleTemplateUrl) {\r\n                            definition.titleTemplateUrl = w.titleTemplateUrl;\r\n                        }\r\n                    }\r\n\r\n                    if (!definition.editTemplateUrl) {\r\n                        definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\r\n                        if (w.editTemplateUrl) {\r\n                            definition.editTemplateUrl = w.editTemplateUrl;\r\n                        }\r\n                    }\r\n\r\n                    if (!definition.titleTemplateUrl) {\r\n                        definition.frameless = w.frameless;\r\n                    }\r\n\r\n                    if (!definition.styleClass) {\r\n                        definition.styleClass = w.styleClass;\r\n                    }\r\n\r\n                    // set id for sortable\r\n                    if (!definition.wid) {\r\n                        definition.wid = dashboard.id();\r\n                    }\r\n\r\n                    // pass copy of widget to scope\r\n                    $scope.widget = angular.copy(w);\r\n\r\n                    // create config object\r\n                    var config = definition.config;\r\n                    if (config) {\r\n                        if (angular.isString(config)) {\r\n                            config = angular.fromJson(config);\r\n                        }\r\n                    } else {\r\n                        config = {};\r\n                    }\r\n\r\n                    if (!config.reloadPeriod) {\r\n                        config.reloadPeriod = \"0\";\r\n                    }\r\n\r\n                    if (typeof $scope.widget.show_modal_footer === \"undefined\") {\r\n                        $scope.widget.show_modal_footer = true;\r\n                    }\r\n\r\n                    if (typeof $scope.widget.show_reload_config === \"undefined\") {\r\n                        $scope.widget.show_reload_config = true;\r\n                    }\r\n\r\n                    // pass config to scope\r\n                    $scope.config = config;\r\n\r\n                    // collapse exposed $scope.widgetState property\r\n                    if (!$scope.widgetState) {\r\n                        $scope.widgetState = {};\r\n                        $scope.widgetState.isCollapsed = (w.collapsed === true) ? w.collapsed : false;\r\n                    }\r\n\r\n                } else {\r\n                    $log.warn('could not find widget ' + definition.type);\r\n                }\r\n            } else {\r\n                $log.debug('definition not specified, widget was probably removed');\r\n            }\r\n        }\r\n\r\n        function postLink($scope, $element) {\r\n            var definition = $scope.definition;\r\n            if (!definition) {\r\n                $log.debug('widget not found');\r\n                return;\r\n            }\r\n            if (!$scope.config) {\r\n                $scope.config = {};\r\n            }\r\n\r\n            var config = $scope.config;\r\n\r\n            // bind close function\r\n            var deleteWidget = function () {\r\n                var column = $scope.col;\r\n                if (column) {\r\n                    var index = column.widgets.indexOf(definition);\r\n                    if (index >= 0) {\r\n                        column.widgets.splice(index, 1);\r\n                    }\r\n                }\r\n                $element.remove();\r\n                $rootScope.$broadcast('adfWidgetRemovedFromColumn');\r\n            };\r\n\r\n            $scope.remove = function () {\r\n                if ($scope.options.enableConfirmDelete) {\r\n                    var deleteScope = $scope.$new();\r\n                    deleteScope.translate = dashboard.translate;\r\n\r\n                    var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\r\n                    if (definition.deleteTemplateUrl) {\r\n                        deleteTemplateUrl = definition.deleteTemplateUrl;\r\n                    }\r\n                    var opts = {\r\n                        scope: deleteScope,\r\n                        templateUrl: deleteTemplateUrl,\r\n                        backdrop: 'static'\r\n                    };\r\n                    var instance = $uibModal.open(opts);\r\n\r\n                    deleteScope.closeDialog = function () {\r\n                        instance.close();\r\n                        deleteScope.$destroy();\r\n                    };\r\n                    deleteScope.deleteDialog = function () {\r\n                        deleteWidget();\r\n                        deleteScope.closeDialog();\r\n                    };\r\n                } else {\r\n                    deleteWidget();\r\n                }\r\n            };\r\n\r\n\r\n            $scope.print = function () {\r\n                if (!$scope.editMode) {\r\n                    $scope.$broadcast('widgetPrint');\r\n                }\r\n            }\r\n\r\n            $scope.isExecuteOperationEnabled = function () {\r\n                // if ($scope.selectionManager.totalSelected() > 0)\r\n                //     return true;\r\n                if (config.entityKey)\r\n                    return true;\r\n                var filter = config.filter;\r\n                if (typeof filter === \"string\") {\r\n                    return filter.length > 0;\r\n                }\r\n                if (typeof filter === \"object\") {\r\n                    return filter.value.length > 2 && filter.oql;\r\n                }\r\n                return false;\r\n            }\r\n\r\n            $scope.executeOperation = function () {\r\n                if (!$scope.editMode) {\r\n                    // if ($scope.selectionManager.totalSelected() > 0) {\r\n                    //     var selectedItems = [];\r\n                    //     angular.forEach($scope.selectionManager.currentSelection, function(data, key) {\r\n                    //         selectedItems.push({ key: key, value: data });\r\n                    //     });\r\n                    //     $scope.$parent.$broadcast('widgetExecuteOperation', { 'selectedItems': selectedItems });\r\n                    // } else {\r\n                    $scope.$parent.$broadcast('widgetExecuteOperation');\r\n                    // }\r\n                }\r\n            };\r\n\r\n            // bind reload function\r\n            var stopReloadTimeout;\r\n\r\n            function _setReloadTimeout() {\r\n                if (config && config.reloadPeriod && config.reloadPeriod !== \"0\") {\r\n                    if (angular.isDefined(stopReloadTimeout)) {\r\n                        $interval.cancel(stopReloadTimeout)\r\n                        stopReloadTimeout = undefined;\r\n                    };\r\n                    stopReloadTimeout = $interval($scope.reload, (config.reloadPeriod * 1000));\r\n                }\r\n            }\r\n\r\n            $scope.reload = function (completeReload) {\r\n                if (completeReload) {\r\n                    $scope.$broadcast('widgetReload', completeReload);\r\n                } else {\r\n                    $scope.$broadcast('widgetReload');\r\n                }\r\n\r\n                _setReloadTimeout();\r\n            };\r\n\r\n            // verificacion de periodo de refresco\r\n            _setReloadTimeout();\r\n\r\n            $element.on('$destroy', function () {\r\n                $interval.cancel(stopReloadTimeout);\r\n            });\r\n\r\n            $scope.filter = {\r\n                value: \"\"\r\n            };\r\n            $scope.sort = {\r\n                value: \"\",\r\n                direction: \"\"\r\n            };\r\n\r\n            $scope.toggleAdvanced = 1;\r\n            var filter = config.filter;\r\n            if (typeof filter === \"object\" && filter.oql && filter.oql.length > 2) {\r\n                $scope.search = {\r\n                    oql: filter.oql,\r\n                    json: filter.value\r\n                };\r\n                $scope.toggleAdvanced = 0;\r\n            } else if (typeof filter === \"string\") {\r\n                $scope.search = {\r\n                    quick: filter\r\n                };\r\n                $scope.toggleAdvanced = 1;\r\n            } else if (typeof filter === \"object\" && filter.fields) {\r\n                $scope.search = {\r\n                    customFilter: filter.fields\r\n                };\r\n                $scope.search.fields = [];\r\n                angular.forEach(filter.fields, function (v, key) {\r\n                    $scope.search.fields.push(v.name);\r\n                });\r\n                $scope.toggleAdvanced = 2;\r\n            } else {\r\n                $scope.search = {\r\n                    quick: filter = \"\"\r\n                };\r\n            }\r\n\r\n            $scope.toggleFilter = function (advanced) {\r\n                $scope.toggleAdvanced = advanced;\r\n            };\r\n            $scope.filterAvailable = false;\r\n            $scope.showFilter = function () {\r\n                $scope.filterAvailable = $scope.filterAvailable === true ? false : true;\r\n            };\r\n\r\n            $scope.showFinalFilter = false;\r\n\r\n            $scope.launchSearching = function () {\r\n                var widget = {\r\n                    definition: definition,\r\n                    element: $element\r\n                };\r\n\r\n                $rootScope.$broadcast('adfLaunchSearchingFromWidget', widget, $scope.config.filter);\r\n                $scope.reload(true);\r\n            }\r\n            $scope.addCustomFilter = function (key) {\r\n                $scope.search.customFilter = $scope.search.customFilter ? $scope.search.customFilter : [];\r\n                $scope.search.customFilter.push({ name: key, value: '' });\r\n            }\r\n\r\n            $scope.launchCustomFilter = function () {\r\n                if ($scope.search.customFilter && $scope.search.customFilter.length > 0) {\r\n                    $scope.search.oql = $scope.search.json = '';\r\n\r\n                    $scope.config.filter = {\r\n                        value: {\r\n                            and: []\r\n                        },\r\n                        fields: $scope.search.customFilter\r\n                    }\r\n                    angular.forEach($scope.search.customFilter, function (v, key) {\r\n                        if (v.value) {\r\n                            var like = {};\r\n                            like[v.name] = v.value;\r\n                            $scope.config.filter.value.and.push({ 'like': like });\r\n                        }\r\n\r\n                    });\r\n                    $scope.config.filter.value = JSON.stringify($scope.config.filter.value);\r\n                }\r\n\r\n                $scope.launchSearching();\r\n            }\r\n\r\n\r\n\r\n            $scope.deleteFilter = function (value, model) {\r\n                angular.forEach($scope.search.customFilter, function (v, key) {\r\n                    if (v.name === value) {\r\n                        $scope.search.customFilter.splice(key, 1);\r\n                    }\r\n                });\r\n                if ($scope.search.customFilter.length === 0) {\r\n                    $scope.config.filter = {};\r\n                }\r\n            };\r\n\r\n\r\n            $scope.launchSearchingAdv = function () {\r\n                $scope.search.quick = '';\r\n                $scope.config.filter = {\r\n                    oql: $scope.search.oql,\r\n                    value: $scope.search.json\r\n                };\r\n                if ($scope.search.json === '')\r\n                    $scope.config.filter = {\r\n                        oql: '',\r\n                        value: ''\r\n                    };\r\n                $scope.launchSearching();\r\n\r\n            }\r\n\r\n            $scope.applyFilter = function (event) {\r\n                $scope.launchSearching();\r\n            }\r\n\r\n            $scope.launchSearchingQuick = function () {\r\n                $scope.search.oql = $scope.search.json = '';\r\n                $scope.config.filter = $scope.search.quick;\r\n                $scope.launchSearching();\r\n            }\r\n\r\n            var windowTimeChanged = $scope.$on('onWindowTimeChanged', function (event, timeObj) {\r\n                $scope.config.windowFilter = timeObj ? timeObj : (config.windowFilter ? {} : timeObj);\r\n                var widget = {\r\n                    definition: definition,\r\n                    element: $element\r\n                }\r\n                $rootScope.$broadcast('adfWindowTimeChangedFromWidget', widget, $scope.config.windowFilter);\r\n                $scope.reload();\r\n            });\r\n\r\n            $scope.enter = function (event) {\r\n                var keycode = (event.keyCode ? event.keyCode : event.which);\r\n                if (keycode === 13) {\r\n                    if ($scope.toggleAdvanced === 0)\r\n                        $scope.launchSearchingAdv();\r\n                    if ($scope.toggleAdvanced === 1)\r\n                        $scope.launchSearchingQuick();\r\n                    if ($scope.toggleAdvanced === 2)\r\n                        $scope.launchCustomFilter();\r\n\r\n                }\r\n                if (keycode === 19) {\r\n                    $scope.showFinalFilter = $scope.showFinalFilter === false ? true : false;\r\n                }\r\n            }\r\n\r\n\r\n            $scope.customSelectors = [];\r\n            $scope.getCustomSelectors = function () {\r\n                config.widgetSelectors().findFields(\"\").then(function (fields) {\r\n                    $scope.customSelectors = fields;\r\n                    $scope.$apply();\r\n                }).catch(function (err) {\r\n                    $log.error(err);\r\n                });\r\n\r\n            }\r\n\r\n            $scope.customFilter = [];\r\n            $scope.getcustomFilter = function () {\r\n                config.widgetSelectors().findFields(\"\").then(function (fields) {\r\n                    $scope.customFilter = fields;\r\n                    $scope.$apply();\r\n                }).catch(function (err) {\r\n                    $log.error(err);\r\n                });\r\n\r\n            }\r\n\r\n            $scope.ifCustomFilter = function () {\r\n                return $scope.customSelectors && config.sort && $scope.definition.type === 'FullDevicesList' && $scope.toggleAdvanced === 2;\r\n            }\r\n\r\n            $scope.showCustomFields = function () {\r\n                return $scope.definition.type === 'FullDevicesList' && $scope.toggleAdvanced === 2 && $scope.search.customFilter && $scope.filterAvailable && !$scope.editMode;\r\n            }\r\n\r\n            $scope.changeDirection = function () {\r\n                var direction = config.sort.direction;\r\n                if (direction === 'DESCENDING') {\r\n                    $scope.config.sort.direction = 'ASCENDING'\r\n                } else if (direction === 'ASCENDING') {\r\n                    $scope.config.sort.direction = 'DESCENDING'\r\n                }\r\n                $scope.reload();\r\n            }\r\n\r\n            $scope.debugQuery = function () {\r\n                Filter.parseQuery($scope.search.oql || '')\r\n                    .then(function (data) {\r\n                        //$scope.elementos = data;\r\n                        $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\r\n                        $scope.unknownWords = '';\r\n                        $scope.filter.error = null;\r\n                    })\r\n                    .catch(function (err) {\r\n                        $scope.filter.error = err;\r\n                        // Tratar el error\r\n                    });\r\n\r\n            }\r\n\r\n            $scope.autocomplete_options = function () {\r\n                var autocomplete_options = {\r\n                    suggest: Filter.suggest_field_delimited,\r\n                    customSelectors: config.widgetSelectors()\r\n                };\r\n\r\n                return autocomplete_options;\r\n\r\n            };\r\n\r\n            // Multiple selection\r\n            $scope.selectedItems = {};\r\n\r\n            // Gestor de seleccion\r\n            $scope.selectionManager = {\r\n                currentSelection: $scope.selectedItems,\r\n                isSelected: function (key, obj) {\r\n                    if ($scope.selectedItems[key] && !angular.isUndefined(obj)) {\r\n                        $scope.selectedItems[key].data = obj;\r\n                    }\r\n\r\n                    return $scope.selectedItems[key] ? true : false;\r\n                },\r\n                totalSelected: function () {\r\n                    return Object.keys($scope.selectedItems).length;\r\n                }\r\n            };\r\n\r\n            $scope.manageSelectedItems = function () {\r\n                var selectionScope = $scope.$new();\r\n\r\n                selectionScope.selectionConfig = config.selectionConfig;\r\n\r\n                selectionScope.selectedItems = [];\r\n                angular.forEach($scope.selectedItems, function (value, key) {\r\n                    selectionScope.selectedItems.push({ key: key, value: value });\r\n                });\r\n\r\n                selectionScope.currentSelection = {\r\n                    selected: selectionScope.selectedItems\r\n                };\r\n\r\n                var manageItemsSelectedTemplate = adfTemplatePath + 'widget-selection.html';\r\n                var opts = {\r\n                    scope: selectionScope,\r\n                    templateUrl: manageItemsSelectedTemplate,\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    animation: true\r\n                };\r\n\r\n                var instance = $uibModal.open(opts);\r\n\r\n                selectionScope.restoreSelection = function () {\r\n                    selectionScope.currentSelection = {\r\n                        selected: selectionScope.selectedItems\r\n                    };\r\n                };\r\n\r\n                selectionScope.clearSelection = function () {\r\n                    selectionScope.currentSelection.selected = [];\r\n                };\r\n\r\n                // Cierra sy guarda los datos de nueva selección\r\n                selectionScope.applyFilter = function (type) {\r\n                    var customOql = selectionScope.selectionConfig.filterAction(selectionScope.currentSelection.selected, type);\r\n\r\n                    if (!angular.isUndefined(customOql) && customOql !== null) {\r\n                        $scope.toggleAdvanced = 0;\r\n                        Filter.parseQuery(customOql).then(function (data) {\r\n                            $scope.search.oql = customOql;\r\n                            $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\r\n                            $scope.unknownWords = '';\r\n                            $scope.filter.error = null;\r\n\r\n                            $scope.launchSearchingAdv();\r\n                        }).catch(function (err) {\r\n                            $scope.filter.error = err;\r\n                        });\r\n                    }\r\n                };\r\n\r\n                selectionScope.executeOperation = function (operationType) {\r\n                    if (!$scope.editMode) {\r\n                        $scope.$parent.$broadcast('widgetExecuteOperation', { 'selectedItems': selectionScope.currentSelection.selected, 'type': operationType });\r\n                    }\r\n                };\r\n\r\n                // Cierra sy guarda los datos de nueva selección\r\n                selectionScope.saveChangesDialog = function () {\r\n                    var finalSelection = {};\r\n                    angular.forEach(selectionScope.currentSelection.selected, function (data, idx) {\r\n                        finalSelection[data.key] = { data: data.value.data, visible: data.value.visible };\r\n                    });\r\n\r\n                    $scope.selectedItems = angular.copy(finalSelection);\r\n                    $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n\r\n                    $scope.selectionManager.lastItem = {};\r\n                    $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n\r\n                    instance.close();\r\n                    selectionScope.$destroy();\r\n                };\r\n\r\n                // Cierra sin realizar ninguna acción\r\n                selectionScope.closeDialog = function () {\r\n                    instance.close();\r\n                    selectionScope.$destroy();\r\n                };\r\n            };\r\n\r\n\r\n            // bind edit function\r\n            $scope.edit = function () {\r\n                var editScope = $scope.$new();\r\n                editScope.translate = dashboard.translate;\r\n                editScope.definition = angular.copy(definition);\r\n\r\n                var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\r\n                if (definition.editTemplateUrl) {\r\n                    adfEditTemplatePath = definition.editTemplateUrl;\r\n                }\r\n\r\n                var opts = {\r\n                    scope: editScope,\r\n                    templateUrl: adfEditTemplatePath,\r\n                    backdrop: 'static',\r\n                    size: 'lg'\r\n                };\r\n\r\n                var instance = $uibModal.open(opts);\r\n\r\n                editScope.closeDialog = function () {\r\n                    instance.close();\r\n                    editScope.$destroy();\r\n                };\r\n\r\n                // TODO create util method\r\n                function createApplyPromise(result) {\r\n                    var promise;\r\n                    if (typeof result === 'boolean') {\r\n                        var deferred = $q.defer();\r\n                        if (result) {\r\n                            deferred.resolve();\r\n                        } else {\r\n                            deferred.reject();\r\n                        }\r\n                        promise = deferred.promise;\r\n                    } else {\r\n                        promise = $q.when(result);\r\n                    }\r\n                    return promise;\r\n                }\r\n\r\n                editScope.saveDialog = function () {\r\n                    // clear validation error\r\n                    editScope.validationError = null;\r\n\r\n                    // build injection locals\r\n                    var widget = $scope.widget;\r\n\r\n                    // create a default apply method for widgets\r\n                    // without edit mode\r\n                    // see issue https://goo.gl/KHPQLZ\r\n                    var applyFn;\r\n                    if (widget.edit) {\r\n                        applyFn = widget.edit.apply;\r\n                    } else {\r\n                        applyFn = function () {\r\n                            return true;\r\n                        };\r\n                    }\r\n\r\n                    // injection locals\r\n                    var locals = {\r\n                        widget: widget,\r\n                        definition: editScope.definition,\r\n                        config: editScope.definition.config\r\n                    };\r\n\r\n                    // invoke apply function and apply if success\r\n                    var result = $injector.invoke(applyFn, applyFn, locals);\r\n                    createApplyPromise(result).then(function () {\r\n                        definition.title = editScope.definition.title;\r\n                        angular.extend(definition.config, editScope.definition.config);\r\n\r\n                        editScope.closeDialog();\r\n\r\n                        if (widget.edit && widget.edit.reload) {\r\n                            // reload content after edit dialog is closed\r\n                            $scope.$broadcast('widgetConfigChanged');\r\n                        }\r\n                    }, function (err) {\r\n                        if (err) {\r\n                            editScope.validationError = err;\r\n                        } else {\r\n                            editScope.validationError = 'Validation durring apply failed';\r\n                        }\r\n                    });\r\n                };\r\n\r\n            };\r\n\r\n\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            templateUrl: dashboard.customWidgetTemplatePath ? dashboard.customWidgetTemplatePath : adfTemplatePath + 'widget.html',\r\n            scope: {\r\n                definition: '=',\r\n                col: '=column',\r\n                editMode: '=',\r\n                options: '=',\r\n                widgetState: '='\r\n            },\r\n            controller: function ($scope) {\r\n                var adfDashboardCollapseExpand = $scope.$on('adfDashboardCollapseExpand', function (event, args) {\r\n                    $scope.widgetState.isCollapsed = args.collapseExpandStatus;\r\n                });\r\n\r\n                var adfWidgetEnterEditMode = $scope.$on('adfWidgetEnterEditMode', function (event, widget) {\r\n                    if (dashboard.idEquals($scope.definition.wid, widget.wid)) {\r\n                        $scope.edit();\r\n                    }\r\n                });\r\n\r\n                var adfIsEditMode = $scope.$on('adfIsEditMode', function (event, widget) {\r\n                    $scope.editing = true;\r\n                });\r\n\r\n                var adfDashboardChanged = $scope.$on('adfDashboardChanged', function (event, widget) {\r\n                    $scope.editing = false;\r\n                });\r\n\r\n                var adfDashboardEditsCancelled = $scope.$on('adfDashboardEditsCancelled', function (event, widget) {\r\n                    $scope.editing = false;\r\n                });\r\n\r\n                $scope.widgetClasses = function (w, definition) {\r\n                    var classes = definition.styleClass || '';\r\n                    // w is undefined, if the type of the widget is unknown\r\n                    // see issue #216\r\n                    if (!w || !w.frameless || $scope.editMode) {\r\n                        classes += ' panel panel-default';\r\n                    }\r\n                    return classes;\r\n                };\r\n\r\n                $scope.openFullScreen = function () {\r\n                    var definition = $scope.definition;\r\n                    var fullScreenScope = $scope.$new();\r\n                    var opts = {\r\n                        scope: fullScreenScope,\r\n                        templateUrl: adfTemplatePath + 'widget-fullscreen.html',\r\n                        size: definition.modalSize || 'lg', // 'sm', 'lg'\r\n                        backdrop: 'static',\r\n                        windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\r\n                    };\r\n\r\n                    var instance = $uibModal.open(opts);\r\n                    fullScreenScope.closeDialog = function () {\r\n                        instance.close();\r\n                        fullScreenScope.$destroy();\r\n                    };\r\n                };\r\n\r\n                $scope.openFilter = function () {\r\n\r\n                }\r\n\r\n                $scope.openAboutScreen = function (size) {\r\n                    size = 'md';\r\n                    var modalInstance = $uibModal.open({\r\n                        animation: true,\r\n                        templateUrl: 'widgetAboutModal.html',\r\n                        controller: function ($scope, $uibModalInstance, information) {\r\n                            $scope.about = {};\r\n                            $scope.about.info = information;\r\n                            $scope.ok = function () {\r\n                                $uibModalInstance.close();\r\n                            };\r\n                        },\r\n                        'size': size,\r\n                        resolve: {\r\n                            information: function () {\r\n                                return $scope.config.about;\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    modalInstance.result.then(function (selectedItem) {\r\n                        $scope.selected = selectedItem;\r\n                    }, function () {\r\n                        $log.info('Modal dismissed at: ' + new Date());\r\n                    });\r\n                };\r\n\r\n                $scope.saveWidgetScreen = function (wId) {\r\n                    $scope.$emit('generateSnapshot', {\r\n                        'objectSelector': '.widget_' + wId,\r\n                        'fileName': 'capture_' + new Date().getTime()\r\n                    });\r\n                };\r\n\r\n\r\n                var addItemToSelection = $scope.$on('addItemToSelection', function (event, item) {\r\n                    if (!$scope.selectedItems[item.key]) {\r\n                        $scope.selectedItems[item.key] = {\r\n                            data: item.data,\r\n                            visible: item.visible\r\n                        };\r\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n                        item.isSelected = true;\r\n                        $scope.selectionManager.lastItem = item;\r\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n                    }\r\n\r\n                });\r\n\r\n                var removeItemFromSelection = $scope.$on('removeItemFromSelection', function (event, item) {\r\n                    if ($scope.selectedItems[item.key]) {\r\n                        delete $scope.selectedItems[item.key];\r\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n                        item.isSelected = false;\r\n                        $scope.selectionManager.lastItem = item;\r\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n                    }\r\n                });\r\n\r\n                $scope.$on('$destroy', function () {\r\n                    adfDashboardCollapseExpand();\r\n                    adfWidgetEnterEditMode();\r\n                    adfIsEditMode();\r\n                    adfDashboardChanged();\r\n                    adfDashboardEditsCancelled();\r\n                    addItemToSelection();\r\n                    removeItemFromSelection();\r\n                });\r\n            },\r\n            compile: function () {\r\n\r\n                /**\r\n                 * use pre link, because link of widget-content\r\n                 * is executed before post link widget\r\n                 */\r\n                return {\r\n                    pre: preLink,\r\n                    post: postLink\r\n                };\r\n            }\r\n        };\r\n\r\n    });",null,"(function(window, undefined) {'use strict';\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf', ['adf.provider', 'adf.locale', 'ui.bootstrap', 'opengate-angular-js'])\r\n    .value('adfTemplatePath', '../src/templates/')\r\n    .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\r\n    .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\r\n    .value('adfVersion', '2.5.0');\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf.locale', [])\r\n\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardColumn', function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\r\n    \r\n\r\n    /**\r\n     * moves a widget in between a column\r\n     */\r\n    function moveWidgetInColumn($scope, column, evt){\r\n      var widgets = column.widgets;\r\n      // move widget and apply to scope\r\n      $scope.$apply(function(){\r\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\r\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * finds a widget by its id in the column\r\n     */\r\n    function findWidget(column, index){\r\n      var widget = null;\r\n      for (var i=0; i<column.widgets.length; i++){\r\n        var w = column.widgets[i];\r\n        if (dashboard.idEquals(w.wid,index)){\r\n          widget = w;\r\n          break;\r\n        }\r\n      }\r\n      return widget;\r\n    }\r\n\r\n    /**\r\n     * finds a column by its id in the model\r\n     */\r\n    function findColumn(model, index){\r\n      var column = null;\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var r = model.rows[i];\r\n        for (var j=0; j<r.columns.length; j++){\r\n          var c = r.columns[j];\r\n          if (dashboard.idEquals(c.cid, index)){\r\n            column = c;\r\n            break;\r\n          } else if (c.rows){\r\n            column = findColumn(c, index);\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    /**\r\n     * get the adf id from an html element\r\n     */\r\n    function getId(el){\r\n      var id = el.getAttribute('adf-id');\r\n      return id ? id : '-1';\r\n    }\r\n\r\n    /**\r\n     * adds a widget to a column\r\n     */\r\n    function addWidgetToColumn($scope, model, targetColumn, evt){\r\n      // find source column\r\n      var cid = getId(evt.from);\r\n      var sourceColumn = findColumn(model, cid);\r\n\r\n      if (sourceColumn){\r\n        // find moved widget\r\n        var wid = getId(evt.item);\r\n        var widget = findWidget(sourceColumn, wid);\r\n\r\n        if (widget){\r\n          // add new item and apply to scope\r\n          $scope.$apply(function(){\r\n            if (!targetColumn.widgets) {\r\n              targetColumn.widgets = [];\r\n            }\r\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\r\n\r\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\r\n          });\r\n        } else {\r\n          $log.warn('could not find widget with id ' + wid);\r\n        }\r\n      } else {\r\n        $log.warn('could not find column with id ' + cid);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * removes a widget from a column\r\n     */\r\n    function removeWidgetFromColumn($scope, column, evt){\r\n      // remove old item and apply to scope\r\n      $scope.$apply(function(){\r\n        column.widgets.splice(evt.oldIndex, 1);\r\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * enable sortable\r\n     */\r\n    function applySortable($scope, $element, model, column){\r\n      // enable drag and drop\r\n      var el = $element[0];\r\n      var sortable = Sortable.create(el, {\r\n        group: 'widgets',\r\n        handle: '.adf-move',\r\n        ghostClass: 'placeholder',\r\n        animation: 150,\r\n        onAdd: function(evt){\r\n          addWidgetToColumn($scope, model, column, evt);\r\n        },\r\n        onRemove: function(evt){\r\n          removeWidgetFromColumn($scope, column, evt);\r\n        },\r\n        onUpdate: function(evt){\r\n          moveWidgetInColumn($scope, column, evt);\r\n        }\r\n      });\r\n\r\n      // destroy sortable on column destroy event\r\n      $element.on('$destroy', function () {\r\n        // check sortable element, before calling destroy\r\n        // see https://github.com/sdorra/angular-dashboard-framework/issues/118\r\n        if (sortable.el){\r\n          sortable.destroy();\r\n        }\r\n      });\r\n    }\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        column: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        adfModel: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\r\n      link: function ($scope, $element) {\r\n        // set id\r\n        var col = $scope.column;\r\n        if (!col.cid){\r\n          col.cid = dashboard.id();\r\n        }\r\n\r\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\r\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\r\n          $compile(rowTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        } else {\r\n          // enable drag and drop for widget only columns\r\n          applySortable($scope, $element, $scope.adfModel, col);\r\n        }\r\n      }\r\n    };\r\n  });\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name adf.directive:adfDashboard\r\n * @element div\r\n * @restrict EA\r\n * @scope\r\n * @description\r\n *\r\n * `adfDashboard` is a directive which renders the dashboard with all its\r\n * components. The directive requires a name attribute. The name of the\r\n * dashboard can be used to store the model.\r\n *\r\n * @param {string} name name of the dashboard. This attribute is required.\r\n * @param {boolean=} editable false to disable the editmode of the dashboard.\r\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\r\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\r\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\r\n * @param {string=} structure the default structure of the dashboard.\r\n * @param {object=} adfModel model object of the dashboard.\r\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\r\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\r\n *                   events during edit mode not reset it if edit mode is exited.\r\n * @param {boolean=} categories enable categories for the add widget dialog.\r\n */\r\n\r\nangular.module('adf')\r\n    .directive('adfDashboard', function($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath, $faIcons) {\r\n        \r\n\r\n        function stringToBoolean(string) {\r\n            switch (angular.isDefined(string) ? string.toLowerCase() : null) {\r\n                case 'true':\r\n                case 'yes':\r\n                case '1':\r\n                    return true;\r\n                case 'false':\r\n                case 'no':\r\n                case '0':\r\n                case null:\r\n                    return false;\r\n                default:\r\n                    return Boolean(string);\r\n            }\r\n        }\r\n\r\n        function copyWidgets(source, target) {\r\n            if (source.widgets && source.widgets.length > 0) {\r\n                var w = source.widgets.shift();\r\n                while (w) {\r\n                    target.widgets.push(w);\r\n                    w = source.widgets.shift();\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Copy widget from old columns to the new model\r\n         * @param object root the model\r\n         * @param array of columns\r\n         * @param counter\r\n         */\r\n        function fillStructure(root, columns, counter) {\r\n            counter = counter || 0;\r\n\r\n            if (angular.isDefined(root.rows)) {\r\n                angular.forEach(root.rows, function(row) {\r\n                    angular.forEach(row.columns, function(column) {\r\n                        // if the widgets prop doesn't exist, create a new array for it.\r\n                        // this allows ui.sortable to do it's thing without error\r\n                        if (!column.widgets) {\r\n                            column.widgets = [];\r\n                        }\r\n\r\n                        // if a column exist at the counter index, copy over the column\r\n                        if (angular.isDefined(columns[counter])) {\r\n                            // do not add widgets to a column, which uses nested rows\r\n                            if (angular.isUndefined(column.rows)) {\r\n                                copyWidgets(columns[counter], column);\r\n                                counter++;\r\n                            }\r\n                        }\r\n\r\n                        // run fillStructure again for any sub rows/columns\r\n                        counter = fillStructure(column, columns, counter);\r\n                    });\r\n                });\r\n            }\r\n            return counter;\r\n        }\r\n\r\n        /**\r\n         * Read Columns: recursively searches an object for the 'columns' property\r\n         * @param object model\r\n         * @param array  an array of existing columns; used when recursion happens\r\n         */\r\n        function readColumns(root, columns) {\r\n            columns = columns || [];\r\n\r\n            if (angular.isDefined(root.rows)) {\r\n                angular.forEach(root.rows, function(row) {\r\n                    angular.forEach(row.columns, function(col) {\r\n                        columns.push(col);\r\n                        // keep reading columns until we can't any more\r\n                        readColumns(col, columns);\r\n                    });\r\n                });\r\n            }\r\n\r\n            return columns;\r\n        }\r\n\r\n        function changeStructure(model, structure) {\r\n            var columns = readColumns(model);\r\n            var counter = 0;\r\n\r\n            model.rows = angular.copy(structure.rows);\r\n\r\n            while (counter < columns.length) {\r\n                counter = fillStructure(model, columns, counter);\r\n            }\r\n        }\r\n\r\n        function createConfiguration(type) {\r\n            var cfg = {};\r\n            var config = dashboard.widgets[type].config;\r\n            if (config) {\r\n                cfg = angular.copy(config);\r\n            }\r\n            return cfg;\r\n        }\r\n\r\n        function createWidget(type) {\r\n            var wdgt = {};\r\n            var widget = dashboard.widgets[type];\r\n            if (widget) {\r\n                wdgt = angular.copy(widget);\r\n            }\r\n            return wdgt;\r\n        }\r\n\r\n        /**\r\n         * Find first widget column in model.\r\n         *\r\n         * @param dashboard model\r\n         */\r\n        function findFirstWidgetColumn(model) {\r\n            var column = null;\r\n            if (!angular.isArray(model.rows)) {\r\n                $log.error('model does not have any rows');\r\n                return null;\r\n            }\r\n            for (var i = 0; i < model.rows.length; i++) {\r\n                var row = model.rows[i];\r\n                if (angular.isArray(row.columns)) {\r\n                    for (var j = 0; j < row.columns.length; j++) {\r\n                        var col = row.columns[j];\r\n                        if (!col.rows) {\r\n                            column = col;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if (column) {\r\n                    break;\r\n                }\r\n            }\r\n            return column;\r\n        }\r\n\r\n        /**\r\n         * Adds the widget to first column of the model.\r\n         *\r\n         * @param dashboard model\r\n         * @param widget to add to model\r\n         * @param name name of the dashboard\r\n         */\r\n        function addNewWidgetToModel(model, widget, name, forceToSave) {\r\n            if (model) {\r\n                var column = findFirstWidgetColumn(model);\r\n                if (column) {\r\n                    if (!column.widgets) {\r\n                        column.widgets = [];\r\n                    }\r\n                    column.widgets.unshift(widget);\r\n\r\n                    // broadcast added event\r\n                    $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\r\n\r\n                    if (forceToSave) {\r\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n                    }\r\n                } else {\r\n                    $log.error('could not find first widget column');\r\n                }\r\n            } else {\r\n                $log.error('model is undefined');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Checks if the edit mode of the widget should be opened immediately.\r\n         *\r\n         * @param widget type\r\n         */\r\n        function isEditModeImmediate(type) {\r\n            var widget = dashboard.widgets[type];\r\n            return widget && widget.edit && widget.edit.immediate;\r\n        }\r\n\r\n        /**\r\n         * Opens the edit mode of the specified widget.\r\n         *\r\n         * @param dashboard scope\r\n         * @param widget\r\n         */\r\n        function openEditMode($scope, widget) {\r\n            // wait some time before fire enter edit mode event\r\n            $timeout(function() {\r\n                $scope.$broadcast('adfWidgetEnterEditMode', widget);\r\n            }, 200);\r\n        }\r\n\r\n        /**\r\n         * Splits an object into an array multiple objects inside.\r\n         *\r\n         * @param object source object\r\n         * @param size size of array\r\n         *\r\n         * @return array of splitted objects\r\n         */\r\n        function split(object, size) {\r\n            var arr = [];\r\n            var i = 0;\r\n            angular.forEach(object, function(value, key) {\r\n                var index = i++ % size;\r\n                if (!arr[index]) {\r\n                    arr[index] = {};\r\n                }\r\n                arr[index][key] = value;\r\n            });\r\n            return arr;\r\n        }\r\n\r\n        /**\r\n         * Creates object with the category name as key and an array of widgets as value.\r\n         *\r\n         * @param widgets array of widgets\r\n         *\r\n         * @return array of categories\r\n         */\r\n        function createCategories(widgets) {\r\n            var categories = {};\r\n            angular.forEach(widgets, function(widget, key) {\r\n                var category = widget.category;\r\n                // if the widget has no category use a default one\r\n                if (!category) {\r\n                    category = 'Miscellaneous';\r\n                }\r\n                // push widget to category array\r\n                if (angular.isUndefined(categories[category])) {\r\n                    categories[category] = { widgets: {} };\r\n                }\r\n                categories[category].widgets[key] = widget;\r\n            });\r\n            return categories;\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            scope: {\r\n                structure: '@',\r\n                name: '@',\r\n                collapsible: '@',\r\n                editable: '@',\r\n                editMode: '@',\r\n                continuousEditMode: '=',\r\n                maximizable: '@',\r\n                adfModel: '=',\r\n                adfWidgetFilter: '=',\r\n                categories: '@',\r\n                hideButtons: '='\r\n            },\r\n            controller: function($scope) {\r\n                var model = {};\r\n                var structure = {};\r\n                var widgetFilter = null;\r\n                var structureName = {};\r\n                var name = $scope.name;\r\n\r\n                // Watching for changes on adfModel\r\n                $scope.$watch('adfModel', function(oldVal, newVal) {\r\n                    // has model changed or is the model attribute not set\r\n                    if (newVal !== null || (oldVal === null && newVal === null)) {\r\n                        model = $scope.adfModel;\r\n                        widgetFilter = $scope.adfWidgetFilter;\r\n                        if (!model || !model.rows) {\r\n                            structureName = $scope.structure;\r\n                            structure = dashboard.structures[structureName];\r\n                            if (structure) {\r\n                                if (model) {\r\n                                    model.rows = angular.copy(structure).rows;\r\n                                } else {\r\n                                    model = angular.copy(structure);\r\n                                }\r\n                                model.structure = structureName;\r\n                            } else {\r\n                                $log.error('could not find structure ' + structureName);\r\n                            }\r\n                        }\r\n\r\n                        if (model) {\r\n                            if (!model.title) {\r\n                                model.title = 'Empty Dashboard';\r\n                            }\r\n                            if (!model.titleTemplateUrl) {\r\n                                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\r\n                            }\r\n                            $scope.model = model;\r\n                        } else {\r\n                            $log.error('could not find or create model');\r\n                        }\r\n                    }\r\n                }, true);\r\n\r\n                // edit mode\r\n                $scope.editMode = false;\r\n                $scope.editClass = '';\r\n\r\n                //passs translate function from dashboard so we can translate labels inside html templates\r\n                $scope.translate = dashboard.translate;\r\n\r\n                function getNewModalScope() {\r\n                    var scope = $scope.$new();\r\n                    //pass translate function to the new scope so we can translate the labels inside the modal dialog\r\n                    scope.translate = dashboard.translate;\r\n                    return scope;\r\n                }\r\n\r\n                $scope.deleteDashboard = function() {\r\n                    var dashData = {\r\n                        id: model.id,\r\n                        name: model.title\r\n                    };\r\n\r\n                    $rootScope.$broadcast('dashboardDelete', dashData);\r\n                };\r\n\r\n                $scope.toggleEditMode = function(openConfigWindow) {\r\n                    $scope.editMode = !$scope.editMode;\r\n                    if ($scope.editMode) {\r\n                        if (!$scope.continuousEditMode) {\r\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n                            $rootScope.$broadcast('adfIsEditMode');\r\n                        }\r\n\r\n                        if (openConfigWindow) {\r\n                            $scope.editDashboardDialog();\r\n                        }\r\n                    }\r\n\r\n                    if (!$scope.editMode) {\r\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n                    }\r\n                };\r\n\r\n                $scope.saveTemporalDashboard = function() {\r\n                    delete model.temporal;\r\n                    $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n                };\r\n\r\n                var adfToggleEditMode = $scope.$on('adfToggleEditMode', function(event, isNewDashboard) {\r\n                    if (isNewDashboard) {\r\n                        $scope.toggleEditMode(true);\r\n                    } else {\r\n                        $scope.toggleEditMode();\r\n                    }\r\n                });\r\n\r\n                var adfCancelEditMode = $scope.$on('adfCancelEditMode', function(event, isNewDashboard) {\r\n                    if ($scope.editMode) {\r\n                        $scope.cancelEditMode();\r\n                    }\r\n                });\r\n\r\n                $scope.collapseAll = function(collapseExpandStatus) {\r\n                    $rootScope.$broadcast('adfDashboardCollapseExpand', { collapseExpandStatus: collapseExpandStatus });\r\n                };\r\n\r\n                $scope.cancelEditMode = function() {\r\n                    $scope.editMode = false;\r\n                    if (!$scope.continuousEditMode && ($scope.modelCopy !== $scope.adfModel)) {\r\n                        $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\r\n                    }\r\n                    $rootScope.$broadcast('adfDashboardEditsCancelled');\r\n                };\r\n\r\n                var adfEditDashboardDialog = $scope.$on('adfEditDashboardDialog', function(event, isNewDashboard) {\r\n                    if ($scope.editMode) {\r\n                        $scope.editDashboardDialog();\r\n                    }\r\n                });\r\n\r\n                var adfLaunchSearchingFromWidget = $scope.$on('adfLaunchSearchingFromWidget', function(event, widget, configFilter) {\r\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\r\n                });\r\n                var adfWindowTimeChangedFromWidget = $scope.$on('adfWindowTimeChangedFromWidget', function(event, widget, windowFilter) {\r\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\r\n                });\r\n\r\n                // edit dashboard settings\r\n                $scope.editDashboardDialog = function() {\r\n                    var editDashboardScope = getNewModalScope();\r\n                    // create a copy of the title, to avoid changing the title to\r\n                    // \"dashboard\" if the field is empty\r\n                    editDashboardScope.copy = {\r\n                        title: (model.title !== 'Empty Dashboard' ? model.title : ''),\r\n                        description: model.description,\r\n                        icon: model.icon ? model.icon : 'fa-tachometer'\r\n                    };\r\n\r\n                    // pass icon list\r\n                    editDashboardScope.availableIcons = $faIcons.list();\r\n\r\n                    // pass dashboard structure to scope\r\n                    editDashboardScope.structures = dashboard.structures;\r\n\r\n                    // pass split function to scope, to be able to display structures in multiple columns\r\n                    editDashboardScope.split = split;\r\n\r\n                    var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\r\n                    if (model.editTemplateUrl) {\r\n                        adfEditTemplatePath = model.editTemplateUrl;\r\n                    }\r\n                    var instance = $uibModal.open({\r\n                        scope: editDashboardScope,\r\n                        templateUrl: adfEditTemplatePath,\r\n                        backdrop: 'static',\r\n                        keyboard: false,\r\n                        size: 'lg'\r\n                    });\r\n\r\n                    editDashboardScope.changeStructure = function(name, structure) {\r\n                        $log.info('change structure to ' + name);\r\n                        changeStructure(model, structure);\r\n                        if (model.structure !== name) {\r\n                            model.structure = name;\r\n                        }\r\n                    };\r\n                    editDashboardScope.closeDialog = function() {\r\n                        // copy the new title back to the model\r\n                        model.title = editDashboardScope.copy.title;\r\n                        model.description = editDashboardScope.copy.description;\r\n                        model.icon = editDashboardScope.copy.icon;\r\n\r\n                        // close modal and destroy the scope\r\n                        instance.close();\r\n                        editDashboardScope.$destroy();\r\n                    };\r\n                };\r\n\r\n                var adfOpenWidgetFromOther = $scope.$on('adfOpenWidgetFromOther', function(event, widget, config) {\r\n                    var internal_config = createConfiguration(widget);\r\n                    var _config = angular.merge({}, internal_config, config);\r\n                    var w = {\r\n                        type: widget,\r\n                        config: _config,\r\n                        title: _config.title\r\n                    };\r\n                    addNewWidgetToModel(model, w, name, !$scope.editMode);\r\n                });\r\n\r\n                var adfOpenModalWidgetFromOther = $scope.$on('adfOpenModalWidgetFromOther', function(event, widgetType, config) {\r\n                    var widget = createWidget(widgetType);\r\n                    widget.config = angular.merge({}, widget.config, config);\r\n                    widget.type = widgetType;\r\n                    if (widget.config.title) {\r\n                        widget.title = widget.config.title;\r\n                    }\r\n                    var fullScreenScope = $scope.$new();\r\n                    fullScreenScope.definition = fullScreenScope.widget = widget;\r\n                    var opts = {\r\n                        scope: fullScreenScope,\r\n                        templateUrl: adfTemplatePath + 'widget-fullscreen.html',\r\n                        size: fullScreenScope.definition.modalSize || 'lg', // 'sm', 'lg'\r\n                        backdrop: 'static',\r\n                        windowClass: (fullScreenScope.definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\r\n                    };\r\n\r\n                    fullScreenScope.persistDashboard = function() {\r\n                        $rootScope.$broadcast('adfOpenWidgetFromOther', this.$parent.widget.type, this.$parent.widget.config);\r\n                        this.closeDialog();\r\n                    }\r\n\r\n                    var instance = $uibModal.open(opts);\r\n                    fullScreenScope.closeDialog = function() {\r\n                        instance.close();\r\n                        fullScreenScope.$destroy();\r\n                    };\r\n\r\n                });\r\n\r\n                var adfAddWidgetDialog = $scope.$on('adfAddWidgetDialog', function(event, isNewDashboard) {\r\n                    if (!model.temporal && model.editable) {\r\n                        if (!$scope.editMode) {\r\n                            $scope.editMode = true;\r\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n                            $rootScope.$broadcast('adfIsEditMode');\r\n                        }\r\n\r\n                        $scope.addWidgetDialog();\r\n                    }\r\n                });\r\n\r\n                // add widget dialog\r\n                $scope.addWidgetDialog = function() {\r\n                    var addScope = getNewModalScope();\r\n                    var widgets;\r\n                    if (angular.isFunction(widgetFilter)) {\r\n                        widgets = {};\r\n                        angular.forEach(dashboard.widgets, function(widget, type) {\r\n                            if (widgetFilter(widget, type, model)) {\r\n                                widgets[type] = widget;\r\n                            }\r\n                        });\r\n                    } else {\r\n                        widgets = dashboard.widgets;\r\n                    }\r\n                    addScope.widgets = widgets;\r\n\r\n                    //pass translate function to the new scope so we can translate the labels inside the modal dialog\r\n                    addScope.translate = $scope.translate;\r\n\r\n                    // pass createCategories function to scope, if categories option is enabled\r\n                    if ($scope.options.categories) {\r\n                        $scope.createCategories = createCategories;\r\n                    }\r\n\r\n                    var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\r\n                    if (model.addTemplateUrl) {\r\n                        adfAddTemplatePath = model.addTemplateUrl;\r\n                    }\r\n\r\n                    var opts = {\r\n                        scope: addScope,\r\n                        templateUrl: adfAddTemplatePath,\r\n                        backdrop: 'static'\r\n                    };\r\n\r\n                    var instance = $uibModal.open(opts);\r\n                    addScope.addWidget = function(widget) {\r\n                        var w = {\r\n                            type: widget,\r\n                            config: createConfiguration(widget)\r\n                        };\r\n                        addNewWidgetToModel(model, w, name);\r\n                        // close and destroy\r\n                        instance.close();\r\n                        addScope.$destroy();\r\n\r\n                        // check for open edit mode immediately\r\n                        if (isEditModeImmediate(widget)) {\r\n                            openEditMode($scope, w);\r\n                        }\r\n                    };\r\n                    addScope.closeDialog = function() {\r\n                        // close and destroy\r\n                        instance.close();\r\n                        addScope.$destroy();\r\n                    };\r\n                };\r\n\r\n                $scope.addNewWidgetToModel = addNewWidgetToModel;\r\n\r\n                $scope.$on('destroy', function() {\r\n                    adfLaunchSearchingFromWidget();\r\n                    adfWindowTimeChangedFromWidget();\r\n                    adfToggleEditMode();\r\n                    adfOpenWidgetFromOther();\r\n                    adfOpenModalWidgetFromOther();\r\n                    adfCancelEditMode();\r\n                    adfAddWidgetDialog();\r\n                    adfEditDashboardDialog();\r\n                });\r\n            },\r\n            link: function($scope, $element, $attr) {\r\n                // pass options to scope\r\n                var options = {\r\n                    name: $attr.name,\r\n                    editable: true,\r\n                    enableConfirmDelete: stringToBoolean($attr.enableConfirmDelete),\r\n                    maximizable: stringToBoolean($attr.maximizable),\r\n                    collapsible: stringToBoolean($attr.collapsible),\r\n                    categories: stringToBoolean($attr.categories)\r\n                };\r\n                if (angular.isDefined($attr.editable)) {\r\n                    options.editable = stringToBoolean($attr.editable);\r\n                }\r\n                $scope.options = options;\r\n            },\r\n            templateUrl: adfTemplatePath + 'dashboard.html'\r\n        };\r\n    });\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\n/**\r\n * @ngdoc object\r\n * @name adf.locale#adfLocale\r\n * @description\r\n *\r\n * Holds settings and values for framework supported locales\r\n */\r\nangular.module('adf.locale')\r\n    .constant('adfLocale', {\r\n        defaultLocale: 'en-GB',\r\n        frameworkLocales: {\r\n            'en-GB': {\r\n                ADF_COMMON_CLOSE: 'Close',\r\n                ADF_COMMON_DELETE: 'Delete',\r\n                ADF_COMMON_TITLE: 'Title',\r\n                ADF_COMMON_DESCRIPTION: 'Description',\r\n                ADF_COMMON_CANCEL: 'Cancel',\r\n                ADF_COMMON_APPLY: 'Apply',\r\n                ADF_COMMON_EDIT_DASHBOARD: 'Edit dashboard',\r\n                ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Structure',\r\n                ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Add new widget',\r\n                ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Save changes',\r\n                ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Enable edit mode',\r\n                ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Undo changes',\r\n                ADF_WIDGET_ADD_HEADER: 'Add new widget',\r\n                ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Are you sure you want to delete this widget ?',\r\n                ADF_WIDGET_TOOLTIP_REFRESH: 'Reload widget Content',\r\n                ADF_WIDGET_TOOLTIP_PRINT: 'Print widget Content',\r\n                ADF_WIDGET_TOOLTIP_FILTER: 'Show widget Filter',\r\n                ADF_WIDGET_TOOLTIP_SORT: 'Show widget Sort',\r\n                ADF_WIDGET_TOOLTIP_MOVE: 'Change widget location',\r\n                ADF_WIDGET_TOOLTIP_COLLAPSE: 'Collapse widget',\r\n                ADF_WIDGET_TOOLTIP_EXPAND: 'Expand widget',\r\n                ADF_WIDGET_TOOLTIP_EDIT: 'Edit widget configuration',\r\n                ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Fullscreen widget',\r\n                ADF_WIDGET_TOOLTIP_REMOVE: 'Remove widget',\r\n                ADF_WIDGET_TOOLTIP_OPERATION: 'Execute operation',\r\n                ADF_WIDGET_TOOLTIP_SELECTION: 'Items selected',\r\n                ADF_WIDGET_CLEAR: 'Clear',\r\n                ADF_WIDGET_RESTORE: 'Restore',\r\n                ADF_WIDGET_FILTER: 'Filter'\r\n            },\r\n            'sv-SE': {\r\n                ADF_COMMON_CLOSE: 'Stäng',\r\n                ADF_COMMON_DELETE: 'Ta bort',\r\n                ADF_COMMON_TITLE: 'Titel',\r\n                ADF_COMMON_DESCRIPTION: 'Description',\r\n                ADF_COMMON_CANCEL: 'Avbryt',\r\n                ADF_COMMON_APPLY: 'Använd',\r\n                ADF_COMMON_EDIT_DASHBOARD: 'Redigera dashboard',\r\n                ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Struktur',\r\n                ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Lägg till ny widget',\r\n                ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Spara förändringar',\r\n                ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Slå på redigeringsläge',\r\n                ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Ångra förändringar',\r\n                ADF_WIDGET_ADD_HEADER: 'Lägg till ny widget',\r\n                ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Är du säker på att du vill ta bort denna widget ?',\r\n                ADF_WIDGET_TOOLTIP_REFRESH: 'Ladda om widget',\r\n                ADF_WIDGET_TOOLTIP_FILTER: 'Show widget Filter',\r\n                ADF_WIDGET_TOOLTIP_SORT: 'Show widget Sort',\r\n                ADF_WIDGET_TOOLTIP_MOVE: 'Ändra widgets position',\r\n                ADF_WIDGET_TOOLTIP_COLLAPSE: 'Stäng widget',\r\n                ADF_WIDGET_TOOLTIP_EXPAND: 'Öppna widget',\r\n                ADF_WIDGET_TOOLTIP_EDIT: 'Ändra widget konfigurering',\r\n                ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Visa widget i fullskärm',\r\n                ADF_WIDGET_TOOLTIP_REMOVE: 'Ta bort widget',\r\n                ADF_WIDGET_TOOLTIP_OPERATION: 'Execute operation',\r\n                ADF_WIDGET_TOOLTIP_SELECTION: 'Items selected',\r\n                ADF_WIDGET_CLEAR: 'Clear',\r\n                ADF_WIDGET_RESTORE: 'Restore',\r\n                ADF_WIDGET_FILTER: 'Filter'\r\n            }\r\n        }\r\n    });\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .filter('adfOrderByObjectKey', function($filter) {\r\n    \r\n\r\n    return function(item, key){\r\n      var array = [];\r\n      angular.forEach(item, function(value, objectKey){\r\n        value[key] = objectKey;\r\n        array.push(value);\r\n      });\r\n      return $filter('orderBy')(array, key);\r\n    };\r\n  });\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\n/**\r\n * @ngdoc object\r\n * @name adf.dashboardProvider\r\n * @description\r\n *\r\n * The dashboardProvider can be used to register structures and widgets.\r\n */\r\nangular.module('adf.provider', ['adf.locale'])\r\n    .provider('dashboard', function(adfLocale) {\r\n\r\n        var widgets = {};\r\n        var widgetsPath = '';\r\n        var structures = {};\r\n        var messageTemplate = '<div class=\"alert alert-primary\">{}</div>';\r\n        var loadingTemplate = '\\\r\n      <div class=\"progress progress-striped active\">\\n\\\r\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\r\n          <span class=\"sr-only\">loading ...</span>\\n\\\r\n        </div>\\n\\\r\n      </div>';\r\n        var customWidgetTemplatePath = null;\r\n\r\n        // default apply function of widget.edit.apply\r\n        var defaultApplyFunction = function() {\r\n            return true;\r\n        };\r\n\r\n        var activeLocale = adfLocale.defaultLocale;\r\n        var locales = adfLocale.frameworkLocales;\r\n\r\n        function getLocales() {\r\n            return locales;\r\n        }\r\n\r\n        function getActiveLocale() {\r\n            return activeLocale;\r\n        }\r\n\r\n        function translate(label) {\r\n            var translation = locales[activeLocale][label];\r\n            return translation ? translation : label;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#widget\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Registers a new widget.\r\n         *\r\n         * @param {string} name of the widget\r\n         * @param {object} widget to be registered.\r\n         *\r\n         *   Object properties:\r\n         *\r\n         *   - `title` - `{string=}` - The title of the widget.\r\n         *   - `description` - `{string=}` - Description of the widget.\r\n         *   - `category` - `{string=}` - Category of the widget.\r\n         *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\r\n         *   - `config` - `{object}` - Predefined widget configuration.\r\n         *   - `controller` - `{string=|function()=}` - Controller fn that should be\r\n         *      associated with newly created scope of the widget or the name of a\r\n         *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\r\n         *      if passed as a string.\r\n         *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\r\n         *      published to scope under the `controllerAs` name.\r\n         *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\r\n         *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\r\n         *   - `template` - `{string=|function()=}` - html template as a string.\r\n         *   - `templateUrl` - `{string=}` - path to an html template.\r\n         *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\r\n         *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n         *      be injected into the controller. If any of these dependencies are promises, the widget\r\n         *      will wait for them all to be resolved or one to be rejected before the controller is\r\n         *      instantiated.\r\n         *      If all the promises are resolved successfully, the values of the resolved promises are\r\n         *      injected.\r\n         *\r\n         *      The map object is:\r\n         *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\r\n         *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n         *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\r\n         *        and the return value is treated as the dependency. If the result is a promise, it is\r\n         *        resolved before its value is injected into the controller.\r\n         *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n         *      on the scope of the widget.\r\n         *   - `edit` - `{object}` - Edit modus of the widget.\r\n         *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n         *        on the scope of the widget.\r\n         *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\r\n         *        Default is true.\r\n         *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\r\n         *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\r\n         *        The function have to return a boolean or an promise which can be resolved to a boolean.\r\n         *        The function can use injection.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.widget = function(name, widget) {\r\n            var w = angular.extend({ reload: false, frameless: false }, widget);\r\n            if (w.edit) {\r\n                var edit = {\r\n                    reload: true,\r\n                    immediate: false,\r\n                    apply: defaultApplyFunction\r\n                };\r\n                angular.extend(edit, w.edit);\r\n                w.edit = edit;\r\n            }\r\n            widgets[name] = w;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#widgetsPath\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Sets the path to the directory which contains the widgets. The widgets\r\n         * path is used for widgets with a templateUrl which contains the\r\n         * placeholder {widgetsPath}. The placeholder is replaced with the\r\n         * configured value, before the template is loaded, but the template is\r\n         * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\r\n         * The default value of widgetPaths is ''.\r\n         *\r\n         *\r\n         * @param {string} path to the directory which contains the widgets\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.widgetsPath = function(path) {\r\n            widgetsPath = path;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#structure\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Registers a new structure.\r\n         *\r\n         * @param {string} name of the structure\r\n         * @param {object} structure to be registered.\r\n         *\r\n         *   Object properties:\r\n         *\r\n         *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\r\n         *     - `styleClass` - `{string}` - CSS Class of the row.\r\n         *     - `columns` - `{Array.<Object>}` - Columns of the row.\r\n         *       - `styleClass` - `{string}` - CSS Class of the column.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.structure = function(name, structure) {\r\n            structures[name] = structure;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#messageTemplate\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the template for messages.\r\n         *\r\n         * @param {string} template for messages.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.messageTemplate = function(template) {\r\n            messageTemplate = template;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#loadingTemplate\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the template which is displayed as\r\n         * long as the widget resources are not resolved.\r\n         *\r\n         * @param {string} template loading template\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.loadingTemplate = function(template) {\r\n            loadingTemplate = template;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#customWidgetTemplatePath\r\n         * @propertyOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the container template for the widgets\r\n         *\r\n         * @param {string} path to the custom widget template\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.customWidgetTemplatePath = function(templatePath) {\r\n            customWidgetTemplatePath = templatePath;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#setLocale\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the locale setting of adf\r\n         *\r\n         * @param {string} ISO Language Code\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.setLocale = function(locale) {\r\n            if (locales[locale]) {\r\n                activeLocale = locale;\r\n            } else {\r\n                throw new Error('Cannot set locale: ' + locale + '. Locale is not defined.');\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#addLocale\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Adds a new locale to adf\r\n         *\r\n         * @param {string} ISO Language Code for the new locale\r\n         * @param {object} translations for the locale.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.addLocale = function(locale, translations) {\r\n            if (!angular.isString(locale)) {\r\n                throw new Error('locale must be an string');\r\n            }\r\n\r\n            if (!angular.isObject(translations)) {\r\n                throw new Error('translations must be an object');\r\n            }\r\n\r\n            locales[locale] = translations;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc service\r\n         * @name adf.dashboard\r\n         * @description\r\n         *\r\n         * The dashboard holds all options, structures and widgets.\r\n         *\r\n         * @property {Array.<Object>} widgets Array of registered widgets.\r\n         * @property {string} widgetsPath Default path for widgets.\r\n         * @property {Array.<Object>} structures Array of registered structures.\r\n         * @property {string} messageTemplate Template for messages.\r\n         * @property {string} loadingTemplate Template for widget loading.\r\n         * @property {method} sets locale of adf.\r\n         * @property {Array.<Object>} hold all of the locale translations.\r\n         * @property {string} the active locale setting.\r\n         * @property {method} translation function passed to templates.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.$get = function() {\r\n            var cid = 0;\r\n\r\n            return {\r\n                widgets: widgets,\r\n                widgetsPath: widgetsPath,\r\n                structures: structures,\r\n                messageTemplate: messageTemplate,\r\n                loadingTemplate: loadingTemplate,\r\n                setLocale: this.setLocale,\r\n                locales: getLocales,\r\n                activeLocale: getActiveLocale,\r\n                translate: translate,\r\n                customWidgetTemplatePath: customWidgetTemplatePath,\r\n\r\n                /**\r\n                 * @ngdoc method\r\n                 * @name adf.dashboard#id\r\n                 * @methodOf adf.dashboard\r\n                 * @description\r\n                 *\r\n                 * Creates an ongoing numeric id. The method is used to create ids for\r\n                 * columns and widgets in the dashboard.\r\n                 */\r\n                id: function() {\r\n                    return new Date().getTime() + '-' + (++cid);\r\n                },\r\n\r\n                /**\r\n                 * @ngdoc method\r\n                 * @name adf.dashboard#idEqual\r\n                 * @methodOf adf.dashboard\r\n                 * @description\r\n                 *\r\n                 * Checks if the given ids are equal.\r\n                 *\r\n                 * @param {string} id widget or column id\r\n                 * @param {string} other widget or column id\r\n                 */\r\n                idEquals: function(id, other) {\r\n                    // use toString, because old ids are numbers\r\n                    return ((id) && (other)) && (id.toString() === other.toString());\r\n                }\r\n            };\r\n        };\r\n\r\n    });\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardRow', function ($compile, adfTemplatePath, columnTemplate) {\r\n    \r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        row: '=',\r\n        adfModel: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\r\n      link: function($scope, $element) {\r\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\r\n          $compile(columnTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        }\r\n      }\r\n    };\r\n  });\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfStructurePreview', function(adfTemplatePath) {\r\n\r\n    function adjustRowHeight(container){\r\n      if (container.rows && container.rows.length > 0){\r\n        var height = 100 / container.rows.length;\r\n        angular.forEach(container.rows, function(row){\r\n          row.style = {\r\n            height: height + '%'\r\n          }\r\n\r\n          if (row.columns){\r\n            angular.forEach(row.columns, function(column){\r\n              adjustRowHeight(column);\r\n            });\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    function prepareStructure($scope){\r\n      var structure = angular.copy($scope.structure);\r\n      adjustRowHeight(structure);\r\n      $scope.preview = structure;\r\n    }\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        name: '=',\r\n        structure: '=',\r\n        selected: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'structure-preview.html',\r\n      link: prepareStructure\r\n    };\r\n  });\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf')\r\n    .directive('adfWidgetContent', function ($log, $q, widgetService,\r\n        $compile, $controller, $injector, dashboard) {\r\n\r\n        function renderError($element, msg) {\r\n            $log.warn(msg);\r\n            $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\r\n        }\r\n\r\n        function compileWidget($scope, $element, currentScope, configChanged) {\r\n            var model = $scope.model;\r\n            var content = $scope.content;\r\n            var editing = $scope.editing;\r\n\r\n            var newScope = currentScope;\r\n            if (!model) {\r\n                renderError($element, 'model is undefined');\r\n            } else if (!content) {\r\n                //var msg = 'widget content is undefined, please have a look at your browser log';\r\n                var msg = 'Widget ' + (model.title ? 'for \"' + model.title + '\"' : '') + ' has been deprecated. In order to continue you have to delete this one and look for the equivalent one.';\r\n                renderError($element, msg);\r\n            } else {\r\n                if (newScope) {\r\n                    var is_menu = newScope.menu !== undefined && newScope.menu !== null;\r\n                    var is_itemsPerPage = newScope.itemsPerPage !== undefined && newScope.itemsPerPage !== null;\r\n                    if (is_menu || is_itemsPerPage || configChanged || !angular.isFunction(newScope.reloadData)) {\r\n                        newScope = renderWidget($scope, $element, currentScope, model, content);\r\n                    } else {\r\n                        newScope.reloadData();\r\n                    }\r\n                } else {\r\n                    newScope = renderWidget($scope, $element, currentScope, model, content);\r\n                }\r\n            }\r\n\r\n            function _getWindowTime(type) {\r\n                if (type === \"custom\") {\r\n                    return {\r\n                        from: newScope.config.windowFilter.from,\r\n                        to: newScope.config.windowFilter.to\r\n                    }\r\n                }\r\n                var from = window.moment().subtract(1, type);\r\n                return {\r\n                    from: from._d\r\n                };\r\n            }\r\n\r\n            if (newScope) {\r\n                if (newScope.config) {\r\n                    newScope.config.getWindowTime = function () {\r\n                        var windowFilter = newScope.config.windowFilter;\r\n                        if (windowFilter && windowFilter.type) {\r\n                            var winTime = _getWindowTime(windowFilter.type);\r\n                            /* jshint ignore:start */\r\n                            if (!window.eval(newScope.config.windowFilter.rawdate)) {\r\n                                for (var key in winTime) {\r\n                                    winTime[key] = window.moment(winTime[key]).format();\r\n                                }\r\n                                winTime['rawdate'] = true;\r\n                            }\r\n                            /* jshint ignore:end */\r\n                            return winTime;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                newScope.editing = editing ? editing : false;\r\n            }\r\n            return newScope;\r\n        }\r\n\r\n        function renderWidget($scope, $element, currentScope, model, content, editing) {\r\n            // display loading template\r\n            $element.html(dashboard.loadingTemplate);\r\n\r\n            // create new scope\r\n            var templateScope = $scope.$new();\r\n\r\n            // pass config object to scope\r\n            if (!model.config) {\r\n                model.config = {};\r\n            }\r\n\r\n            templateScope.config = model.config;\r\n            templateScope.editing = editing;\r\n            templateScope.selectionManager = (currentScope && currentScope.selectionManager) ? currentScope.selectionManager : undefined;\r\n\r\n            // local injections\r\n            var base = {\r\n                $scope: templateScope,\r\n                widget: model,\r\n                config: model.config\r\n            };\r\n\r\n            // get resolve promises from content object\r\n            var resolvers = {};\r\n            resolvers.$tpl = widgetService.getTemplate(content);\r\n            if (content.resolve) {\r\n                angular.forEach(content.resolve, function (promise, key) {\r\n                    if (angular.isString(promise)) {\r\n                        resolvers[key] = $injector.get(promise);\r\n                    } else {\r\n                        resolvers[key] = $injector.invoke(promise, promise, base);\r\n                    }\r\n                });\r\n            }\r\n\r\n            // resolve all resolvers\r\n            $q.all(resolvers).then(function (locals) {\r\n                angular.extend(locals, base);\r\n\r\n                // pass resolve map to template scope as defined in resolveAs\r\n                if (content.resolveAs) {\r\n                    templateScope[content.resolveAs] = locals;\r\n                }\r\n\r\n                // compile & render template\r\n                var template = locals.$tpl;\r\n                $element.html(template);\r\n                if (content.controller) {\r\n                    var templateCtrl = $controller(content.controller, locals);\r\n                    if (content.controllerAs) {\r\n                        templateScope[content.controllerAs] = templateCtrl;\r\n                    }\r\n                    $element.children().data('$ngControllerController', templateCtrl);\r\n                }\r\n                $compile($element.contents())(templateScope);\r\n            }, function (reason) {\r\n                // handle promise rejection\r\n                var msg = 'Could not resolve all promises';\r\n                if (reason) {\r\n                    msg += ': ' + reason;\r\n                }\r\n                renderError($element, msg);\r\n            });\r\n\r\n            // destroy old scope\r\n            if (currentScope) {\r\n                currentScope.$destroy();\r\n            }\r\n\r\n            return templateScope;\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            scope: {\r\n                model: '=',\r\n                content: '=',\r\n                editing: '='\r\n            },\r\n            link: function ($scope, $element) {\r\n                var currentScope = compileWidget($scope, $element, null);\r\n                var widgetConfigChangedEvt = $scope.$on('widgetConfigChanged', function () {\r\n                    currentScope = compileWidget($scope, $element, currentScope, true);\r\n                });\r\n\r\n                var widgetReloadEvt = $scope.$on('widgetReload', function () {\r\n                    currentScope = compileWidget($scope, $element, currentScope, false);\r\n                });\r\n\r\n                $scope.$on('destroy', function () {\r\n                    widgetConfigChangedEvt();\r\n                    widgetReloadEvt();\r\n                });\r\n            }\r\n        };\r\n    });\n\r\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n/**\r\n * The widget service provide helper functions to render widgets and their content.\r\n */\r\nangular.module('adf')\r\n  .factory('widgetService', function($http, $q, $sce, $templateCache, dashboard) {\r\n    \r\n\r\n    function parseUrl(url) {\r\n      var parsedUrl = url;\r\n      if (url.indexOf('{widgetsPath}') >= 0) {\r\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\r\n                .replace('//', '/');\r\n        if (parsedUrl.indexOf('/') === 0) {\r\n          parsedUrl = parsedUrl.substring(1);\r\n        }\r\n      }\r\n      return parsedUrl;\r\n    }\r\n\r\n    var exposed = {};\r\n\r\n    exposed.getTemplate = function(widget){\r\n      var deferred = $q.defer();\r\n\r\n      if (widget.template) {\r\n        deferred.resolve(widget.template);\r\n      } else if (widget.templateUrl) {\r\n        // try to fetch template from cache\r\n        var tpl = $templateCache.get(widget.templateUrl);\r\n        if (tpl) {\r\n          deferred.resolve(tpl);\r\n        } else {\r\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\r\n          $http.get(url)\r\n               .success(function(response) {\r\n                 // put response to cache, with unmodified url as key\r\n                 $templateCache.put(widget.templateUrl, response);\r\n                 deferred.resolve(response);\r\n               })\r\n               .error(function() {\r\n                 deferred.reject('could not load template');\r\n               });\r\n        }\r\n      }\r\n\r\n      return deferred.promise;\r\n    };\r\n\r\n    return exposed;\r\n  });\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf')\r\n    .directive('adfWidget', function ($injector, $q, $log, $uibModal, $rootScope, $interval, dashboard, adfTemplatePath, Filter) {\r\n        function preLink($scope) {\r\n            var definition = $scope.definition;\r\n\r\n            //passs translate function from dashboard so we can translate labels inside html templates\r\n            $scope.translate = dashboard.translate;\r\n\r\n            if (definition) {\r\n                var w = dashboard.widgets[definition.type];\r\n                if (w) {\r\n                    // pass title\r\n                    if (!definition.title) {\r\n                        definition.title = w.title;\r\n                    }\r\n\r\n                    if (!definition.titleTemplateUrl) {\r\n                        definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\r\n                        if (w.titleTemplateUrl) {\r\n                            definition.titleTemplateUrl = w.titleTemplateUrl;\r\n                        }\r\n                    }\r\n\r\n                    if (!definition.editTemplateUrl) {\r\n                        definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\r\n                        if (w.editTemplateUrl) {\r\n                            definition.editTemplateUrl = w.editTemplateUrl;\r\n                        }\r\n                    }\r\n\r\n                    if (!definition.titleTemplateUrl) {\r\n                        definition.frameless = w.frameless;\r\n                    }\r\n\r\n                    if (!definition.styleClass) {\r\n                        definition.styleClass = w.styleClass;\r\n                    }\r\n\r\n                    // set id for sortable\r\n                    if (!definition.wid) {\r\n                        definition.wid = dashboard.id();\r\n                    }\r\n\r\n                    // pass copy of widget to scope\r\n                    $scope.widget = angular.copy(w);\r\n\r\n                    // create config object\r\n                    var config = definition.config;\r\n                    if (config) {\r\n                        if (angular.isString(config)) {\r\n                            config = angular.fromJson(config);\r\n                        }\r\n                    } else {\r\n                        config = {};\r\n                    }\r\n\r\n                    if (!config.reloadPeriod) {\r\n                        config.reloadPeriod = \"0\";\r\n                    }\r\n\r\n                    if (typeof $scope.widget.show_modal_footer === \"undefined\") {\r\n                        $scope.widget.show_modal_footer = true;\r\n                    }\r\n\r\n                    if (typeof $scope.widget.show_reload_config === \"undefined\") {\r\n                        $scope.widget.show_reload_config = true;\r\n                    }\r\n\r\n                    // pass config to scope\r\n                    $scope.config = config;\r\n\r\n                    // collapse exposed $scope.widgetState property\r\n                    if (!$scope.widgetState) {\r\n                        $scope.widgetState = {};\r\n                        $scope.widgetState.isCollapsed = (w.collapsed === true) ? w.collapsed : false;\r\n                    }\r\n\r\n                } else {\r\n                    $log.warn('could not find widget ' + definition.type);\r\n                }\r\n            } else {\r\n                $log.debug('definition not specified, widget was probably removed');\r\n            }\r\n        }\r\n\r\n        function postLink($scope, $element) {\r\n            var definition = $scope.definition;\r\n            if (!definition) {\r\n                $log.debug('widget not found');\r\n                return;\r\n            }\r\n            if (!$scope.config) {\r\n                $scope.config = {};\r\n            }\r\n\r\n            var config = $scope.config;\r\n\r\n            // bind close function\r\n            var deleteWidget = function () {\r\n                var column = $scope.col;\r\n                if (column) {\r\n                    var index = column.widgets.indexOf(definition);\r\n                    if (index >= 0) {\r\n                        column.widgets.splice(index, 1);\r\n                    }\r\n                }\r\n                $element.remove();\r\n                $rootScope.$broadcast('adfWidgetRemovedFromColumn');\r\n            };\r\n\r\n            $scope.remove = function () {\r\n                if ($scope.options.enableConfirmDelete) {\r\n                    var deleteScope = $scope.$new();\r\n                    deleteScope.translate = dashboard.translate;\r\n\r\n                    var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\r\n                    if (definition.deleteTemplateUrl) {\r\n                        deleteTemplateUrl = definition.deleteTemplateUrl;\r\n                    }\r\n                    var opts = {\r\n                        scope: deleteScope,\r\n                        templateUrl: deleteTemplateUrl,\r\n                        backdrop: 'static'\r\n                    };\r\n                    var instance = $uibModal.open(opts);\r\n\r\n                    deleteScope.closeDialog = function () {\r\n                        instance.close();\r\n                        deleteScope.$destroy();\r\n                    };\r\n                    deleteScope.deleteDialog = function () {\r\n                        deleteWidget();\r\n                        deleteScope.closeDialog();\r\n                    };\r\n                } else {\r\n                    deleteWidget();\r\n                }\r\n            };\r\n\r\n\r\n            $scope.print = function () {\r\n                if (!$scope.editMode) {\r\n                    $scope.$broadcast('widgetPrint');\r\n                }\r\n            }\r\n\r\n            $scope.isExecuteOperationEnabled = function () {\r\n                // if ($scope.selectionManager.totalSelected() > 0)\r\n                //     return true;\r\n                if (config.entityKey)\r\n                    return true;\r\n                var filter = config.filter;\r\n                if (typeof filter === \"string\") {\r\n                    return filter.length > 0;\r\n                }\r\n                if (typeof filter === \"object\") {\r\n                    return filter.value.length > 2 && filter.oql;\r\n                }\r\n                return false;\r\n            }\r\n\r\n            $scope.executeOperation = function () {\r\n                if (!$scope.editMode) {\r\n                    // if ($scope.selectionManager.totalSelected() > 0) {\r\n                    //     var selectedItems = [];\r\n                    //     angular.forEach($scope.selectionManager.currentSelection, function(data, key) {\r\n                    //         selectedItems.push({ key: key, value: data });\r\n                    //     });\r\n                    //     $scope.$parent.$broadcast('widgetExecuteOperation', { 'selectedItems': selectedItems });\r\n                    // } else {\r\n                    $scope.$parent.$broadcast('widgetExecuteOperation');\r\n                    // }\r\n                }\r\n            };\r\n\r\n            // bind reload function\r\n            var stopReloadTimeout;\r\n\r\n            function _setReloadTimeout() {\r\n                if (config && config.reloadPeriod && config.reloadPeriod !== \"0\") {\r\n                    if (angular.isDefined(stopReloadTimeout)) {\r\n                        $interval.cancel(stopReloadTimeout)\r\n                        stopReloadTimeout = undefined;\r\n                    };\r\n                    stopReloadTimeout = $interval($scope.reload, (config.reloadPeriod * 1000));\r\n                }\r\n            }\r\n\r\n            $scope.reload = function (completeReload) {\r\n                if (completeReload) {\r\n                    $scope.$broadcast('widgetReload', completeReload);\r\n                } else {\r\n                    $scope.$broadcast('widgetReload');\r\n                }\r\n\r\n                _setReloadTimeout();\r\n            };\r\n\r\n            // verificacion de periodo de refresco\r\n            _setReloadTimeout();\r\n\r\n            $element.on('$destroy', function () {\r\n                $interval.cancel(stopReloadTimeout);\r\n            });\r\n\r\n            $scope.filter = {\r\n                value: \"\"\r\n            };\r\n            $scope.sort = {\r\n                value: \"\",\r\n                direction: \"\"\r\n            };\r\n\r\n            $scope.toggleAdvanced = 1;\r\n            var filter = config.filter;\r\n            if (typeof filter === \"object\" && filter.oql && filter.oql.length > 2) {\r\n                $scope.search = {\r\n                    oql: filter.oql,\r\n                    json: filter.value\r\n                };\r\n                $scope.toggleAdvanced = 0;\r\n            } else if (typeof filter === \"string\") {\r\n                $scope.search = {\r\n                    quick: filter\r\n                };\r\n                $scope.toggleAdvanced = 1;\r\n            } else if (typeof filter === \"object\" && filter.fields) {\r\n                $scope.search = {\r\n                    customFilter: filter.fields\r\n                };\r\n                $scope.search.fields = [];\r\n                angular.forEach(filter.fields, function (v, key) {\r\n                    $scope.search.fields.push(v.name);\r\n                });\r\n                $scope.toggleAdvanced = 2;\r\n            } else {\r\n                $scope.search = {\r\n                    quick: filter = \"\"\r\n                };\r\n            }\r\n\r\n            $scope.toggleFilter = function (advanced) {\r\n                $scope.toggleAdvanced = advanced;\r\n            };\r\n            $scope.filterAvailable = false;\r\n            $scope.showFilter = function () {\r\n                $scope.filterAvailable = $scope.filterAvailable === true ? false : true;\r\n            };\r\n\r\n            $scope.showFinalFilter = false;\r\n\r\n            $scope.launchSearching = function () {\r\n                var widget = {\r\n                    definition: definition,\r\n                    element: $element\r\n                };\r\n\r\n                $rootScope.$broadcast('adfLaunchSearchingFromWidget', widget, $scope.config.filter);\r\n                $scope.reload(true);\r\n            }\r\n            $scope.addCustomFilter = function (key) {\r\n                $scope.search.customFilter = $scope.search.customFilter ? $scope.search.customFilter : [];\r\n                $scope.search.customFilter.push({ name: key, value: '' });\r\n            }\r\n\r\n            $scope.launchCustomFilter = function () {\r\n                if ($scope.search.customFilter && $scope.search.customFilter.length > 0) {\r\n                    $scope.search.oql = $scope.search.json = '';\r\n\r\n                    $scope.config.filter = {\r\n                        value: {\r\n                            and: []\r\n                        },\r\n                        fields: $scope.search.customFilter\r\n                    }\r\n                    angular.forEach($scope.search.customFilter, function (v, key) {\r\n                        if (v.value) {\r\n                            var like = {};\r\n                            like[v.name] = v.value;\r\n                            $scope.config.filter.value.and.push({ 'like': like });\r\n                        }\r\n\r\n                    });\r\n                    $scope.config.filter.value = JSON.stringify($scope.config.filter.value);\r\n                }\r\n\r\n                $scope.launchSearching();\r\n            }\r\n\r\n\r\n\r\n            $scope.deleteFilter = function (value, model) {\r\n                angular.forEach($scope.search.customFilter, function (v, key) {\r\n                    if (v.name === value) {\r\n                        $scope.search.customFilter.splice(key, 1);\r\n                    }\r\n                });\r\n                if ($scope.search.customFilter.length === 0) {\r\n                    $scope.config.filter = {};\r\n                }\r\n            };\r\n\r\n\r\n            $scope.launchSearchingAdv = function () {\r\n                $scope.search.quick = '';\r\n                $scope.config.filter = {\r\n                    oql: $scope.search.oql,\r\n                    value: $scope.search.json\r\n                };\r\n                if ($scope.search.json === '')\r\n                    $scope.config.filter = {\r\n                        oql: '',\r\n                        value: ''\r\n                    };\r\n                $scope.launchSearching();\r\n\r\n            }\r\n\r\n            $scope.applyFilter = function (event) {\r\n                $scope.launchSearching();\r\n            }\r\n\r\n            $scope.launchSearchingQuick = function () {\r\n                $scope.search.oql = $scope.search.json = '';\r\n                $scope.config.filter = $scope.search.quick;\r\n                $scope.launchSearching();\r\n            }\r\n\r\n            var windowTimeChanged = $scope.$on('onWindowTimeChanged', function (event, timeObj) {\r\n                $scope.config.windowFilter = timeObj ? timeObj : (config.windowFilter ? {} : timeObj);\r\n                var widget = {\r\n                    definition: definition,\r\n                    element: $element\r\n                }\r\n                $rootScope.$broadcast('adfWindowTimeChangedFromWidget', widget, $scope.config.windowFilter);\r\n                $scope.reload();\r\n            });\r\n\r\n            $scope.enter = function (event) {\r\n                var keycode = (event.keyCode ? event.keyCode : event.which);\r\n                if (keycode === 13) {\r\n                    if ($scope.toggleAdvanced === 0)\r\n                        $scope.launchSearchingAdv();\r\n                    if ($scope.toggleAdvanced === 1)\r\n                        $scope.launchSearchingQuick();\r\n                    if ($scope.toggleAdvanced === 2)\r\n                        $scope.launchCustomFilter();\r\n\r\n                }\r\n                if (keycode === 19) {\r\n                    $scope.showFinalFilter = $scope.showFinalFilter === false ? true : false;\r\n                }\r\n            }\r\n\r\n\r\n            $scope.customSelectors = [];\r\n            $scope.getCustomSelectors = function () {\r\n                config.widgetSelectors().findFields(\"\").then(function (fields) {\r\n                    $scope.customSelectors = fields;\r\n                    $scope.$apply();\r\n                }).catch(function (err) {\r\n                    $log.error(err);\r\n                });\r\n\r\n            }\r\n\r\n            $scope.customFilter = [];\r\n            $scope.getcustomFilter = function () {\r\n                config.widgetSelectors().findFields(\"\").then(function (fields) {\r\n                    $scope.customFilter = fields;\r\n                    $scope.$apply();\r\n                }).catch(function (err) {\r\n                    $log.error(err);\r\n                });\r\n\r\n            }\r\n\r\n            $scope.ifCustomFilter = function () {\r\n                return $scope.customSelectors && config.sort && $scope.definition.type === 'FullDevicesList' && $scope.toggleAdvanced === 2;\r\n            }\r\n\r\n            $scope.showCustomFields = function () {\r\n                return $scope.definition.type === 'FullDevicesList' && $scope.toggleAdvanced === 2 && $scope.search.customFilter && $scope.filterAvailable && !$scope.editMode;\r\n            }\r\n\r\n            $scope.changeDirection = function () {\r\n                var direction = config.sort.direction;\r\n                if (direction === 'DESCENDING') {\r\n                    $scope.config.sort.direction = 'ASCENDING'\r\n                } else if (direction === 'ASCENDING') {\r\n                    $scope.config.sort.direction = 'DESCENDING'\r\n                }\r\n                $scope.reload();\r\n            }\r\n\r\n            $scope.debugQuery = function () {\r\n                Filter.parseQuery($scope.search.oql || '')\r\n                    .then(function (data) {\r\n                        //$scope.elementos = data;\r\n                        $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\r\n                        $scope.unknownWords = '';\r\n                        $scope.filter.error = null;\r\n                    })\r\n                    .catch(function (err) {\r\n                        $scope.filter.error = err;\r\n                        // Tratar el error\r\n                    });\r\n\r\n            }\r\n\r\n            $scope.autocomplete_options = function () {\r\n                var autocomplete_options = {\r\n                    suggest: Filter.suggest_field_delimited,\r\n                    customSelectors: config.widgetSelectors()\r\n                };\r\n\r\n                return autocomplete_options;\r\n\r\n            };\r\n\r\n            // Multiple selection\r\n            $scope.selectedItems = {};\r\n\r\n            // Gestor de seleccion\r\n            $scope.selectionManager = {\r\n                currentSelection: $scope.selectedItems,\r\n                isSelected: function (key, obj) {\r\n                    if ($scope.selectedItems[key] && !angular.isUndefined(obj)) {\r\n                        $scope.selectedItems[key].data = obj;\r\n                    }\r\n\r\n                    return $scope.selectedItems[key] ? true : false;\r\n                },\r\n                totalSelected: function () {\r\n                    return Object.keys($scope.selectedItems).length;\r\n                }\r\n            };\r\n\r\n            $scope.manageSelectedItems = function () {\r\n                var selectionScope = $scope.$new();\r\n\r\n                selectionScope.selectionConfig = config.selectionConfig;\r\n\r\n                selectionScope.selectedItems = [];\r\n                angular.forEach($scope.selectedItems, function (value, key) {\r\n                    selectionScope.selectedItems.push({ key: key, value: value });\r\n                });\r\n\r\n                selectionScope.currentSelection = {\r\n                    selected: selectionScope.selectedItems\r\n                };\r\n\r\n                var manageItemsSelectedTemplate = adfTemplatePath + 'widget-selection.html';\r\n                var opts = {\r\n                    scope: selectionScope,\r\n                    templateUrl: manageItemsSelectedTemplate,\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    animation: true\r\n                };\r\n\r\n                var instance = $uibModal.open(opts);\r\n\r\n                selectionScope.restoreSelection = function () {\r\n                    selectionScope.currentSelection = {\r\n                        selected: selectionScope.selectedItems\r\n                    };\r\n                };\r\n\r\n                selectionScope.clearSelection = function () {\r\n                    selectionScope.currentSelection.selected = [];\r\n                };\r\n\r\n                // Cierra sy guarda los datos de nueva selección\r\n                selectionScope.applyFilter = function (type) {\r\n                    var customOql = selectionScope.selectionConfig.filterAction(selectionScope.currentSelection.selected, type);\r\n\r\n                    if (!angular.isUndefined(customOql) && customOql !== null) {\r\n                        $scope.toggleAdvanced = 0;\r\n                        Filter.parseQuery(customOql).then(function (data) {\r\n                            $scope.search.oql = customOql;\r\n                            $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\r\n                            $scope.unknownWords = '';\r\n                            $scope.filter.error = null;\r\n\r\n                            $scope.launchSearchingAdv();\r\n                        }).catch(function (err) {\r\n                            $scope.filter.error = err;\r\n                        });\r\n                    }\r\n                };\r\n\r\n                selectionScope.executeOperation = function (operationType) {\r\n                    if (!$scope.editMode) {\r\n                        $scope.$parent.$broadcast('widgetExecuteOperation', { 'selectedItems': selectionScope.currentSelection.selected, 'type': operationType });\r\n                    }\r\n                };\r\n\r\n                // Cierra sy guarda los datos de nueva selección\r\n                selectionScope.saveChangesDialog = function () {\r\n                    var finalSelection = {};\r\n                    angular.forEach(selectionScope.currentSelection.selected, function (data, idx) {\r\n                        finalSelection[data.key] = { data: data.value.data, visible: data.value.visible };\r\n                    });\r\n\r\n                    $scope.selectedItems = angular.copy(finalSelection);\r\n                    $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n\r\n                    $scope.selectionManager.lastItem = {};\r\n                    $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n\r\n                    instance.close();\r\n                    selectionScope.$destroy();\r\n                };\r\n\r\n                // Cierra sin realizar ninguna acción\r\n                selectionScope.closeDialog = function () {\r\n                    instance.close();\r\n                    selectionScope.$destroy();\r\n                };\r\n            };\r\n\r\n\r\n            // bind edit function\r\n            $scope.edit = function () {\r\n                var editScope = $scope.$new();\r\n                editScope.translate = dashboard.translate;\r\n                editScope.definition = angular.copy(definition);\r\n\r\n                var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\r\n                if (definition.editTemplateUrl) {\r\n                    adfEditTemplatePath = definition.editTemplateUrl;\r\n                }\r\n\r\n                var opts = {\r\n                    scope: editScope,\r\n                    templateUrl: adfEditTemplatePath,\r\n                    backdrop: 'static',\r\n                    size: 'lg'\r\n                };\r\n\r\n                var instance = $uibModal.open(opts);\r\n\r\n                editScope.closeDialog = function () {\r\n                    instance.close();\r\n                    editScope.$destroy();\r\n                };\r\n\r\n                // TODO create util method\r\n                function createApplyPromise(result) {\r\n                    var promise;\r\n                    if (typeof result === 'boolean') {\r\n                        var deferred = $q.defer();\r\n                        if (result) {\r\n                            deferred.resolve();\r\n                        } else {\r\n                            deferred.reject();\r\n                        }\r\n                        promise = deferred.promise;\r\n                    } else {\r\n                        promise = $q.when(result);\r\n                    }\r\n                    return promise;\r\n                }\r\n\r\n                editScope.saveDialog = function () {\r\n                    // clear validation error\r\n                    editScope.validationError = null;\r\n\r\n                    // build injection locals\r\n                    var widget = $scope.widget;\r\n\r\n                    // create a default apply method for widgets\r\n                    // without edit mode\r\n                    // see issue https://goo.gl/KHPQLZ\r\n                    var applyFn;\r\n                    if (widget.edit) {\r\n                        applyFn = widget.edit.apply;\r\n                    } else {\r\n                        applyFn = function () {\r\n                            return true;\r\n                        };\r\n                    }\r\n\r\n                    // injection locals\r\n                    var locals = {\r\n                        widget: widget,\r\n                        definition: editScope.definition,\r\n                        config: editScope.definition.config\r\n                    };\r\n\r\n                    // invoke apply function and apply if success\r\n                    var result = $injector.invoke(applyFn, applyFn, locals);\r\n                    createApplyPromise(result).then(function () {\r\n                        definition.title = editScope.definition.title;\r\n                        angular.extend(definition.config, editScope.definition.config);\r\n\r\n                        editScope.closeDialog();\r\n\r\n                        if (widget.edit && widget.edit.reload) {\r\n                            // reload content after edit dialog is closed\r\n                            $scope.$broadcast('widgetConfigChanged');\r\n                        }\r\n                    }, function (err) {\r\n                        if (err) {\r\n                            editScope.validationError = err;\r\n                        } else {\r\n                            editScope.validationError = 'Validation durring apply failed';\r\n                        }\r\n                    });\r\n                };\r\n\r\n            };\r\n\r\n\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            templateUrl: dashboard.customWidgetTemplatePath ? dashboard.customWidgetTemplatePath : adfTemplatePath + 'widget.html',\r\n            scope: {\r\n                definition: '=',\r\n                col: '=column',\r\n                editMode: '=',\r\n                options: '=',\r\n                widgetState: '='\r\n            },\r\n            controller: function ($scope) {\r\n                var adfDashboardCollapseExpand = $scope.$on('adfDashboardCollapseExpand', function (event, args) {\r\n                    $scope.widgetState.isCollapsed = args.collapseExpandStatus;\r\n                });\r\n\r\n                var adfWidgetEnterEditMode = $scope.$on('adfWidgetEnterEditMode', function (event, widget) {\r\n                    if (dashboard.idEquals($scope.definition.wid, widget.wid)) {\r\n                        $scope.edit();\r\n                    }\r\n                });\r\n\r\n                var adfIsEditMode = $scope.$on('adfIsEditMode', function (event, widget) {\r\n                    $scope.editing = true;\r\n                });\r\n\r\n                var adfDashboardChanged = $scope.$on('adfDashboardChanged', function (event, widget) {\r\n                    $scope.editing = false;\r\n                });\r\n\r\n                var adfDashboardEditsCancelled = $scope.$on('adfDashboardEditsCancelled', function (event, widget) {\r\n                    $scope.editing = false;\r\n                });\r\n\r\n                $scope.widgetClasses = function (w, definition) {\r\n                    var classes = definition.styleClass || '';\r\n                    // w is undefined, if the type of the widget is unknown\r\n                    // see issue #216\r\n                    if (!w || !w.frameless || $scope.editMode) {\r\n                        classes += ' panel panel-default';\r\n                    }\r\n                    return classes;\r\n                };\r\n\r\n                $scope.openFullScreen = function () {\r\n                    var definition = $scope.definition;\r\n                    var fullScreenScope = $scope.$new();\r\n                    var opts = {\r\n                        scope: fullScreenScope,\r\n                        templateUrl: adfTemplatePath + 'widget-fullscreen.html',\r\n                        size: definition.modalSize || 'lg', // 'sm', 'lg'\r\n                        backdrop: 'static',\r\n                        windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\r\n                    };\r\n\r\n                    var instance = $uibModal.open(opts);\r\n                    fullScreenScope.closeDialog = function () {\r\n                        instance.close();\r\n                        fullScreenScope.$destroy();\r\n                    };\r\n                };\r\n\r\n                $scope.openFilter = function () {\r\n\r\n                }\r\n\r\n                $scope.openAboutScreen = function (size) {\r\n                    size = 'md';\r\n                    var modalInstance = $uibModal.open({\r\n                        animation: true,\r\n                        templateUrl: 'widgetAboutModal.html',\r\n                        controller: function ($scope, $uibModalInstance, information) {\r\n                            $scope.about = {};\r\n                            $scope.about.info = information;\r\n                            $scope.ok = function () {\r\n                                $uibModalInstance.close();\r\n                            };\r\n                        },\r\n                        'size': size,\r\n                        resolve: {\r\n                            information: function () {\r\n                                return $scope.config.about;\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    modalInstance.result.then(function (selectedItem) {\r\n                        $scope.selected = selectedItem;\r\n                    }, function () {\r\n                        $log.info('Modal dismissed at: ' + new Date());\r\n                    });\r\n                };\r\n\r\n                $scope.saveWidgetScreen = function (wId) {\r\n                    $scope.$emit('generateSnapshot', {\r\n                        'objectSelector': '.widget_' + wId,\r\n                        'fileName': 'capture_' + new Date().getTime()\r\n                    });\r\n                };\r\n\r\n\r\n                var addItemToSelection = $scope.$on('addItemToSelection', function (event, item) {\r\n                    if (!$scope.selectedItems[item.key]) {\r\n                        $scope.selectedItems[item.key] = {\r\n                            data: item.data,\r\n                            visible: item.visible\r\n                        };\r\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n                        item.isSelected = true;\r\n                        $scope.selectionManager.lastItem = item;\r\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n                    }\r\n\r\n                });\r\n\r\n                var removeItemFromSelection = $scope.$on('removeItemFromSelection', function (event, item) {\r\n                    if ($scope.selectedItems[item.key]) {\r\n                        delete $scope.selectedItems[item.key];\r\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n                        item.isSelected = false;\r\n                        $scope.selectionManager.lastItem = item;\r\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n                    }\r\n                });\r\n\r\n                $scope.$on('$destroy', function () {\r\n                    adfDashboardCollapseExpand();\r\n                    adfWidgetEnterEditMode();\r\n                    adfIsEditMode();\r\n                    adfDashboardChanged();\r\n                    adfDashboardEditsCancelled();\r\n                    addItemToSelection();\r\n                    removeItemFromSelection();\r\n                });\r\n            },\r\n            compile: function () {\r\n\r\n                /**\r\n                 * use pre link, because link of widget-content\r\n                 * is executed before post link widget\r\n                 */\r\n                return {\r\n                    pre: preLink,\r\n                    post: postLink\r\n                };\r\n            }\r\n        };\r\n\r\n    });\nangular.module(\"adf\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"../src/templates/dashboard-column.html\",\"<div adf-id={{column.cid}} class=column ng-class=column.styleClass ng-model=column.widgets> <adf-widget ng-repeat=\\\"definition in column.widgets\\\" definition=definition column=column edit-mode=editMode options=options widget-state=widgetState>  </adf-widget></div> \");\n$templateCache.put(\"../src/templates/dashboard-edit.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h3 class=modal-title ng-bind=\\\"translate(\\'ADF_COMMON_EDIT_DASHBOARD\\')\\\">Edit Dashboard</h3> </div> <div class=modal-body> <form role=form name=form novalidate> <div class=\\\"form-group col-xs-12 col-md-6\\\"> <label for=dashboardTitle ng-bind=\\\"translate(\\'ADF_COMMON_TITLE\\')\\\">Title</label> <input type=text class=\\\"form-control text-primary\\\" id=dashboardTitle ng-model=copy.title required> </div> <div class=\\\"form-group col-xs-12 col-md-6\\\"> <label for=dashboardDescription ng-bind=\\\"translate(\\'ADF_COMMON_DESCRIPTION\\')\\\">Description</label> <input type=text class=\\\"form-control text-primary\\\" id=dashboardDescription ng-model=copy.description> </div> <div class=\\\"form-group col-xs-12 col-md-6\\\"> <label for=icon>Icon</label> <ui-select tagging=tagTransform id=icon ng-model=copy.icon theme=bootstrap allow-clear=false required=true on-select=selectIcon($select.selected) title=\\\"Choose icon\\\"> <ui-select-match placeholder=\\\"Choose icon\\\" allow-clear=false> <i class=\\\"fa {{$select.selected}} fa-2x\\\"></i> <span>{{$select.selected}}</span> </ui-select-match> <ui-select-choices class=oux-icon-selector repeat=\\\"iconTmp in availableIcons | filter: $select.search\\\"> <i class=\\\"fa fa-4x\\\" ng-class=iconTmp title={{iconTmp}}></i><br> <span ng-bind-html=\\\"iconTmp| highlight: $select.search\\\"></span> </ui-select-choices> </ui-select> </div> <div class=\\\"form-group col-xs-12\\\"> <label ng-bind=\\\"translate(\\'ADF_EDIT_DASHBOARD_STRUCTURE_LABEL\\')\\\">Structure</label> <div class=row ng-init=\\\"splitted = split(structures, 3)\\\"> <div class=col-lg-4 ng-repeat=\\\"structureColumn in splitted\\\"> <div class=radio ng-repeat=\\\"(key, structure) in structureColumn\\\"> <div class=row> <div class=col-sm-2> <label> <input type=radio value={{key}} ng-model=model.structure ng-change=\\\"changeStructure(key, structure)\\\"> </label> </div> <div class=col-sm-9 ng-click=\\\"changeStructure(key, structure)\\\"> <adf-structure-preview name=key structure=structure selected=\\\"model.structure == key\\\"> </adf-structure-preview> </div> </div> </div> </div> </div> </div> </form> </div> <div class=modal-footer> <div class=col-xs-12> <button type=submit class=\\\"btn btn-primary\\\" ng-click=closeDialog() ng-disabled=form.$invalid ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> </div> </div>\");\n$templateCache.put(\"../src/templates/dashboard-row.html\",\"<div class=row ng-class=row.styleClass ng-style=row.style>  </div> \");\n$templateCache.put(\"../src/templates/dashboard-title.html\",\"<div class=row style=padding:0px;> <div class=col-xs-12 ng-class=\\\"hideButtons?\\'col-md-12\\':\\'col-md-5\\'\\\"> <span ng-if=model.icon id=idDashboardIcon class=\\\"fa fa-2x\\\" ng-class=model.icon></span> <span id=idDashboardTitle class=\\\"fa-2x text-primary\\\">{{model.title}}</span> <span ng-if=model.description id=idDashboardDescription>{{model.description}}</span> </div> <div class=\\\"col-xs-12 col-md-7 text-right\\\" ng-if=!hideButtons> <a href ng-if=editMode title=\\\"{{ translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_ADD\\') }}\\\" ng-click=addWidgetDialog() class=\\\"btn btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-plus\\\" aria-hidden=true></i> Add widget </a> <a href ng-if=editMode title=\\\"{{ translate(\\'ADF_COMMON_EDIT_DASHBOARD\\') }}\\\" ng-click=editDashboardDialog() class=\\\"btn btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-cog\\\"></i> Configuration </a> <a href ng-if=editMode title=\\\"{{ translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_UNDO\\') }}\\\" ng-click=cancelEditMode() class=\\\"btn btn-warning btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-close\\\"></i> Cancel </a> <a href ng-if=\\\"options.editable && !editMode && !model.temporal\\\" title=\\\"{{translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE\\') }}\\\" ng-click=toggleEditMode() class=\\\"btn btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-pencil-square-o\\\"></i> Edit </a> <a href ng-if=\\\"options.editable && editMode\\\" title=\\\"{{translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_SAVE\\')}}\\\" ng-click=toggleEditMode() class=\\\"btn btn-success btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-save\\\"></i> Save/Update </a> </div> </div>\");\n$templateCache.put(\"../src/templates/dashboard.html\",\"<div class=dashboard-container> <div ng-include src=model.titleTemplateUrl></div> <div class=\\\"row col-xs-12 dashboard\\\" x-ng-class=\\\"{\\'edit\\' : editMode}\\\" style=\\\"padding: 0px;margin: 0px;\\\"> <adf-dashboard-row row=row adf-model=model options=options ng-repeat=\\\"row in model.rows\\\" edit-mode=editMode continuous-edit-mode=continuousEditMode> </adf-dashboard-row></div> </div>\");\n$templateCache.put(\"../src/templates/structure-preview.html\",\"<div class=structure-preview ng-class=\\\"{selected: selected}\\\"> <h4>{{name}}</h4> <adf-dashboard-row ng-repeat=\\\"row in preview.rows\\\" row=row> </adf-dashboard-row></div> \");\n$templateCache.put(\"../src/templates/widget-add.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title ng-bind=\\\"translate(\\'ADF_WIDGET_ADD_HEADER\\')\\\">Add new widget</h4> </div> <div class=modal-body>  <div ng-if=createCategories> <uib-accordion ng-init=\\\"categorized = createCategories(widgets)\\\"> <div uib-accordion-group heading={{category.name}} ng-repeat=\\\"category in categorized | adfOrderByObjectKey: \\'name\\'\\\"> <dl class=dl-horizontal> <dt ng-repeat-start=\\\"widget in category.widgets | adfOrderByObjectKey: \\'key\\'\\\"> <a href ng-click=addWidget(widget.key) ng-class={{widget.key}}> {{widget.title}} </a> </dt> <dd ng-repeat-end ng-if=widget.description> {{widget.description}} </dd> </dl> </div> </uib-accordion> </div>  <div style=\\\"display: inline-block;\\\" ng-if=!createCategories> <dl class=dl-horizontal> <dt ng-repeat-start=\\\"widget in widgets | adfOrderByObjectKey: \\'key\\'\\\"> <a href ng-click=addWidget(widget.key) ng-class={{widget.key}}> {{widget.title}} </a> </dt> <dd ng-repeat-end ng-if=widget.description> {{widget.description}} </dd> </dl> </div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> </div> \");\n$templateCache.put(\"../src/templates/widget-delete.html\",\"<div class=modal-header> <h4 class=modal-title><span ng-bind=\\\"translate(\\'ADF_COMMON_DELETE\\')\\\">Delete</span> {{widget.title}}</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=widgetTitle ng-bind=\\\"translate(\\'ADF_WIDGET_DELETE_CONFIRM_MESSAGE\\')\\\">Are you sure you want to delete this widget ?</label> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> <button type=button class=\\\"btn btn-primary\\\" ng-click=deleteDialog() ng-bind=\\\"translate(\\'ADF_COMMON_DELETE\\')\\\">Delete</button> </div> \");\n$templateCache.put(\"../src/templates/widget-edit.html\",\"<form name=widgetEditForm novalidate role=form ng-submit=saveDialog()> <div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h3 class=modal-title>{{widget.title}}</h3> </div> <div class=modal-body> <div class=row> <div class=col-xs-12> <div class=\\\"alert alert-danger\\\" role=alert ng-show=validationError> <strong>Apply error:</strong> {{validationError}} </div> </div> </div> <div class=row ng-if=widget.show_reload_config> <div class=\\\"col-xs-12 col-md-6\\\"> <div class=form-group> <label for=widgetTitle ng-bind=\\\"translate(\\'ADF_COMMON_TITLE\\')\\\">Title</label> <input type=text class=\\\"form-control text-primary\\\" id=widgetTitle ng-model=definition.title placeholder=\\\"Enter title\\\"> </div> </div> <div class=\\\"col-xs-12 col-md-6\\\"> <div class=form-group> <label for=widgetReloadPeriod ng-bind=\\\"translate(\\'ADF_WIDGET_TOOLTIP_REFRESH\\')\\\">Refresh</label> <select class=form-control id=widgetReloadPeriod aria-label=\\\"ngSelected demo\\\" ng-model=definition.config.reloadPeriod required> <option ng-selected=selected value=0>MANUAL</option> <option value=20>20 SECONDS</option> <option value=40>40 SECONDS</option> <option value=60>EVERY MINUTE</option> </select> </div> </div> </div> <div class=row ng-if=!widget.show_reload_config> <div class=\\\"col-xs-12 col-md-12\\\"> <div class=form-group> <label for=widgetTitle ng-bind=\\\"translate(\\'ADF_COMMON_TITLE\\')\\\">Title</label> <input type=text class=\\\"form-control text-primary\\\" id=widgetTitle ng-model=definition.title placeholder=\\\"Enter title\\\"> </div> </div> </div> <div ng-if=widget.edit class=row> <div class=col-xs-12> <adf-widget-content model=definition content=widget.edit> </adf-widget-content></div> </div> <div class=row> <div class=col-xs-12> <div class=form-group> <label for=widgetAbout>About</label> <textarea class=\\\"form-control text-primary\\\" id=widgetAbout ng-model=definition.config.about placeholder=\\\"Enter widget description\\\"></textarea> </div> </div> </div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CANCEL\\')\\\">Cancel</button> <button type=submit class=\\\"btn btn-primary\\\" ng-disabled=widgetEditForm.$invalid ng-value=\\\"translate(\\'ADF_COMMON_APPLY\\')\\\">Apply</button> </div> </form>\");\n$templateCache.put(\"../src/templates/widget-fullscreen.html\",\"<div class=modal-header> <div class=\\\"pull-right widget-icons\\\"> <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_REFRESH\\') }}\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a> <a href title=close ng-click=closeDialog()> <i class=\\\"glyphicon glyphicon-remove\\\"></i> </a> <a href title=\\\"insert into dashboard\\\" ng-if=persistDashboard ng-click=persistDashboard()> <i class=\\\"glyphicon glyphicon-save\\\"></i> </a> </div> <h4 class=modal-title>&nbsp;{{ definition.title }}</h4> </div> <div class=\\\"modal-body widget\\\" style=overflow:hidden;> <adf-widget-content model=definition content=widget> </adf-widget-content></div> <div class=modal-footer ng-if=widget.show_modal_footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> </div>\");\n$templateCache.put(\"../src/templates/widget-selection.html\",\"<style>\\r\\n    .selected-entities-control .ui-select-container>div:first-child {\\r\\n        max-height: 300px;\\r\\n        overflow-y: scroll;\\r\\n        overflow-x: hidden;\\r\\n    }\\r\\n</style> <form name=widgetSelectionForm novalidate role=form ng-submit=saveChangesDialog()> <div class=modal-header> <div class=\\\"col-xs-12 col-md-12\\\"> <h3 class=\\\"modal-title text-left\\\"><i class=\\\"fa fa-check-square-o\\\" aria-hidden=true></i> Selected items...</h3> </div> </div> <div class=modal-body> <div class=col-xs-12> <div class=\\\"form-group selected-entities-control\\\"> <label for=currentSelection>Current selection</label> <ui-select multiple tagging ng-model=currentSelection.selected theme=bootstrap sortable=false title=\\\"Selected items\\\"> <ui-select-match placeholder=\\\"No items selected\\\"> <div class=text-left style=\\\"margin-right: 15px;font-size: 0.9em;max-width:350px;\\\" ng-if=$item.value.visible> <span style=\\\"white-space: initial;word-break: break-word;\\\" ng-repeat=\\\"(k,v) in $item.value.visible track by $index\\\" ng-if=\\\"v !== undefined\\\"><strong>{{k}}:</strong> {{v}}<br></span> </div> <div class=text-left style=\\\"margin-right: 15px;font-size: 0.9em;max-width:350px;\\\" ng-if=!$item.value.visible> <span style=\\\"white-space: initial;word-break: break-word;\\\">{{$item.key}}</span> </div> </ui-select-match> <ui-select-choices repeat=\\\"itemSel in currentSelection.selected | filter:$select.search\\\"> {{itemSel.key}} </ui-select-choices> </ui-select> </div> </div> <div class=\\\"col-xs-12 text-left\\\"> <button type=button class=\\\"btn btn-success btn-sm\\\" ng-click=restoreSelection() ng-disabled=\\\"currentSelection.selected.length === selectedItemsLength\\\" ng-bind=\\\"translate(\\'ADF_WIDGET_RESTORE\\')\\\">Restore</button> <button type=button class=\\\"btn btn-danger btn-sm\\\" ng-click=clearSelection() ng-disabled=\\\"currentSelection.selected.length < 1\\\" ng-bind=\\\"translate(\\'ADF_WIDGET_CLEAR\\')\\\">Clear</button> </div> </div> <div class=modal-footer> <div class=\\\"col-xs-12 col-md-2 text-left\\\"> <div uib-dropdown ng-if=\\\"selectionConfig && selectionConfig.filterTypes && currentSelection.selected.length > 0\\\"> <button id=applyFilterBy type=button class=\\\"btn btn-primary\\\" uib-dropdown-toggle> <i class=\\\"glyphicon glyphicon-filter pointer\\\"></i> Filter by <span class=caret></span> </button> <ul class=dropdown-menu uib-dropdown-menu role=menu aria-labelledby=applyFilterBy> <li role=menuitem ng-repeat=\\\"filterType in selectionConfig.filterTypes\\\"><a href ng-click=applyFilter(filterType) title=\\\"Selected {{filterType}}\\\">Selected {{filterType}}</a></li> </ul> </div> </div> <div class=\\\"col-xs-12 col-md-3 text-left\\\"> <div uib-dropdown ng-if=\\\"selectionConfig && selectionConfig.operationTypes && currentSelection.selected.length > 0\\\"> <button id=executeOperation type=button class=\\\"btn btn-primary\\\" uib-dropdown-toggle> <i class=\\\"glyphicon glyphicon-flash pointer\\\"></i> Exec. Operation <span class=caret></span> </button> <ul class=dropdown-menu uib-dropdown-menu role=menu aria-labelledby=executeOperation> <li role=menuitem ng-repeat=\\\"operationType in selectionConfig.operationTypes\\\"><a href ng-click=executeOperation(operationType) title={{operationType}}>{{operationType|humanize}}</a></li> </ul> </div> </div> <div class=\\\"col-xs-12 col-md-7 text-right\\\"> <button type=submit class=\\\"btn btn-primary\\\" ng-disabled=\\\"currentSelection.selected.length === selectedItemsLength\\\" ng-value=\\\"translate(\\'ADF_COMMON_APPLY\\')\\\">Apply</button> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> </div> </div> </form>\");\n$templateCache.put(\"../src/templates/widget-title.html\",\"<div class=panel-title style=margin:0px;> <span class=pull-left>  <a href ng-if=\\\"selectedItemsLength > 0\\\" title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_SELECTION\\') }}\\\" ng-click=manageSelectedItems() style=float:left;> <i class=\\\"glyphicon glyphicon-check\\\"></i><small class=ogux-budget>{{ selectedItemsLength }}</small> </a> <h4 ng-if=\\\"!widget.frameless && definition.title\\\" style=\\\"margin:0px 0px 0px 2px;float:left;\\\">{{definition.title}}</h4> </span> <div class=pull-right> <span ng-if=config.about> <a href uib-popover=\\\"{{ config.about }}\\\" popover-trigger=\\\"\\'mouseenter\\'\\\" popover-placement=top ng-click=openAboutScreen()> <i class=\\\"glyphicon glyphicon-info-sign\\\"></i></a> <script type=text/ng-template id=widgetAboutModal.html> <div class=\\\"modal-header\\\"> <h4 class=\\\"modal-title\\\">About</h4> </div> <div class=\\\"modal-body\\\">{{ about.info }}</div> <div class=\\\"modal-footer\\\"><button class=\\\"btn btn-primary\\\" type=\\\"button\\\" ng-click=\\\"ok()\\\">OK</button></div> </script> </span> <a ng-if=\\\"!editMode && widget.print\\\" href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_PRINT\\') }}\\\" ng-click=print()> <i class=\\\"glyphicon glyphicon-print\\\"></i> </a> <span ng-if=\\\"!editMode && config.widgetOnToggleView && config.widgetViews\\\" uib-popover=\\\"Change view\\\" popover-trigger=\\\"\\'mouseenter\\'\\\" popover-placement=top uib-dropdown> <a href id=toggle_{{definition.wid}} uib-dropdown-toggle> <i class=\\\"glyphicon glyphicon-eye-close\\\"></i> </a> <ul class=dropdown-menu uib-dropdown-menu aria-labelledby=\\\"Change view\\\"> <li ng-repeat=\\\"choice in config.widgetViews\\\"> <a ng-click=config.widgetOnToggleView(choice.value)>{{choice.name}}</a> </li> </ul> </span> <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_REFRESH\\') }}\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_OPERATION\\') }}\\\" ng-if=\\\"widget.executeOperation && !editMode && isExecuteOperationEnabled()\\\" ng-click=executeOperation()> <i class=\\\"glyphicon glyphicon-flash\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_FILTER\\') }}\\\" ng-if=\\\"config.widgetSelectors && !editMode\\\" ng-click=showFilter()> <i class=\\\"glyphicon glyphicon-filter\\\" ng-class=\\\"{\\'active\\': search.json || search.quick ||search.customFilter}\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_SORT\\') }}\\\" ng-if=\\\"config.sort && !editMode\\\" ng-click=showFilter()> <i class=\\\"glyphicon glyphicon-sort\\\" ng-class=\\\"{\\'active\\': (config.sort.value && config.sort.value !== \\'\\')}\\\"></i> </a>  <a href title=\\\"Save picture\\\" ng-if=\\\"!editMode && !widgetState.isCollapsed\\\" ng-click=saveWidgetScreen(definition.wid)> <i class=\\\"glyphicon glyphicon-picture\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_MOVE\\') }}\\\" class=adf-move ng-if=editMode> <i class=\\\"glyphicon glyphicon-move\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_COLLAPSE\\') }}\\\" ng-show=\\\"options.collapsible && !widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-minus\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_EXPAND\\') }}\\\" ng-show=\\\"options.collapsible && widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-plus\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_EDIT\\') }}\\\" ng-click=edit() ng-if=editMode> <i class=\\\"glyphicon glyphicon-cog\\\"></i> </a> <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_FULLSCREEN\\') }}\\\" ng-click=openFullScreen() ng-show=options.maximizable> <i class=\\\"glyphicon glyphicon-fullscreen\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_REMOVE\\') }}\\\" ng-click=remove() ng-if=editMode> <i class=\\\"glyphicon glyphicon-trash\\\"></i> </a> </div> </div>\");\n$templateCache.put(\"../src/templates/widget.html\",\"<div adf-id={{definition.wid}} adf-widget-type={{definition.type}} ng-class=\\\"widgetClasses(widget, definition)\\\" class=\\\"widget widget_{{definition.wid}}\\\"> <a name={{definition.wid}} id={{definition.wid}}></a> <div class=\\\"panel-heading clearfix bg-primary\\\" ng-if=\\\"!widget.frameless || editMode\\\"> <div ng-include src=definition.titleTemplateUrl></div> </div> <div ng-if=\\\"!widgetState.isCollapsed && config.widgetSelectors && !editMode && filterAvailable\\\" class=\\\"row form-group\\\" style=\\\"margin-top: 5px !important;\\\"> <div ng-if=\\\"toggleAdvanced === 0\\\" class=\\\"col-xs-12 col-md-8\\\"> <div class=filter mass-autocomplete> <input class=form-control style=padding-right:15px; name=filterValue ng-keypress=enter($event) ng-model=search.oql placeholder=\\\"Enter your advanced filter\\\" mass-autocomplete-item=autocomplete_options() ng-change=debugQuery()> <label ng-click=launchSearchingAdv() style=\\\"position: absolute;font-size: 1.5em;cursor:pointer;right: 15px;\\\" class=\\\"glyphicon glyphicon-search\\\"></label> </div> <div ng-if=\\\"!editMode && filter.error\\\" class=col-xs-12> <alert type=danger class=\\\"text-center text-danger\\\"> <span>{{filter.error}}</span> </alert> </div> <div ng-if=\\\"showFinalFilter && search.json\\\" class=col-xs-12> <pre>{{ search.json }}</pre> </div> </div> <div ng-if=ifCustomFilter() class=\\\"col-xs-12 col-md-8\\\"> <div class=\\\"filter form-group\\\"> <a href class=text-danger ng-click=\\\"options.customFilter.open = !options.customFilter.open\\\"> <i class=glyphicon ng-class=\\\"{\\'glyphicon-chevron-up\\': options.customFilter.open, \\'glyphicon-chevron-down\\': !options.customFilter.open}\\\"></i> Pick filter fields </a> <label ng-click=launchCustomFilter() style=\\\"position: absolute;font-size: 1.5em;cursor:pointer;right: 15px;\\\" class=\\\"glyphicon glyphicon-search\\\"></label> <div class=row ng-if=options.customFilter.open> <ui-select multiple=true ng-model=search.fields theme=bootstrap title=\\\"Choose a filter\\\" on-select=addCustomFilter($item) on-remove=deleteFilter($item) ng-click=getcustomFilter()> <ui-select-match placeholder=\\\"Pick filter fields ...\\\" allow-clear=true> {{$item}} </ui-select-match> <ui-select-choices repeat=\\\"selector in (customFilter | filter: $select.search) track by $index\\\"> <small ng-bind-html=\\\"selector | highlight: $select.search\\\"></small> </ui-select-choices> </ui-select> </div> </div> </div> <div ng-if=\\\"toggleAdvanced === 1\\\" class=\\\"col-xs-12 col-md-8\\\"> <div class=filter> <input class=form-control style=padding-right:15px; name=filterValue ng-keypress=enter($event) ng-model=search.quick placeholder=\\\"Enter your basic filter here\\\"> <label ng-click=launchSearchingQuick() style=\\\"position: absolute;font-size: 1.5em;cursor:pointer;right: 15px;\\\" class=\\\"glyphicon glyphicon-search\\\"></label> </div> </div> <div class=\\\"col-xs-12 col-md-4\\\" uib-dropdown> <button class=\\\"btn btn-sm\\\" uib-dropdown-toggle title=\\\"Toggle Advanced/Basic filter\\\"> <i class=\\\"advanced-filter glyphicon\\\" ng-class=\\\"{\\'glyphicon-font\\' : toggleAdvanced === 0, \\'glyphicon-bold\\' : toggleAdvanced ===1 , \\'glyphicon-filter\\' : toggleAdvanced === 2, }\\\"></i> <span class=caret></span> </button> <ul class=\\\"dropdown-menu panel\\\" style=\\\"border: 1px groove;\\\" uib-dropdown-menu aria-labelledby=simple-dropdown> <li ng-click=toggleFilter(0)> <a href> <i class=\\\"advanced-filter glyphicon glyphicon-font txt-primary\\\"></i> Advanced filter</a> </li> <li ng-click=toggleFilter(1)> <a href> <i class=\\\"basic-filter glyphicon glyphicon-bold txt-primary\\\"></i> Basic filter</a> </li> <li ng-if=\\\"definition.type === \\'FullDevicesList\\'\\\" ng-click=toggleFilter(2)> <a href> <i class=\\\"custom-filter glyphicon glyphicon-filter txt-primary\\\"></i> Custom filter</a> </li> </ul> </div> </div> <div ng-if=\\\"customSelectors && config.sort && filterAvailable && toggleAdvanced != 2\\\" class=\\\"row form-group\\\" style=\\\"margin-top: 5px !important;\\\"> <div class=\\\"sort col-xs-12 col-md-8\\\"> <ui-select ng-model=config.sort.value theme=bootstrap title=\\\"Choose a filter\\\" allow-clear=true append-to-body=true ng-change=launchSearching() ng-click=getCustomSelectors()> <ui-select-match placeholder=\\\"Sorted by ...\\\" allow-clear=true>Sort by: {{$select.selected}}</ui-select-match> <ui-select-choices repeat=\\\"selector in customSelectors | filter: $select.search track by $index\\\"> <small> <span ng-bind-html=\\\"selector | highlight: $select.search\\\"></span> </small> </ui-select-choices> </ui-select> </div> <div class=\\\"sortDirection col-xs-4 col-md-4\\\"> <button class=\\\"btn btn-sm pointer\\\" ng-click=changeDirection() ng-disabled=\\\"config.sort.value === \\'\\'\\\" title=\\\"Toggle sorting direction\\\"> <i class=glyphicon style=font-size:1.3em; ng-class=\\\"config.sort.direction===\\'ASCENDING\\' ? \\'glyphicon-sort-by-attributes\\': \\'glyphicon-sort-by-attributes-alt\\'\\\"></i> </button> </div> </div> <div ng-if=showCustomFields() class=\\\"col-xs-12 col-md-12\\\"> <div class=\\\"col-xs-12 col-md-4\\\" ng-repeat=\\\"model in search.customFilter\\\"> <label>{{model.name}}</label> <input class=form-control id={{model.name}} name={{model.name}} type=text ng-model=search.customFilter[$index].value ng-keypress=enter($event)> </div> </div> <div ng-class=\\\"{ \\'panel-body\\':!widget.frameless || editMode}\\\" uib-collapse=widgetState.isCollapsed style=overflow:hidden;> <adf-widget-content model=definition content=widget editing=editMode> </adf-widget-content></div> </div> \");}]);\n})(window);"]}