{"version":3,"sources":["adf.js","adf.locale.js","column.js","dashboard.js","locale-constant.js","order-by-object-key.js","provider.js","row.js","structure-preview.js","widget-content.js","widget-service.js","widget.js","opengate-angular-dashboard-framework.tpl.js","opengate-angular-dashboard-framework-tpls.js"],"names":["window","undefined","angular","module","value","directive","$log","$compile","$rootScope","adfTemplatePath","rowTemplate","dashboard","moveWidgetInColumn","$scope","column","evt","widgets","$apply","splice","newIndex","oldIndex","$broadcast","findWidget","index","widget","i","length","w","idEquals","wid","findColumn","model","rows","r","j","columns","c","cid","getId","el","id","getAttribute","addWidgetToColumn","targetColumn","from","sourceColumn","item","warn","removeWidgetFromColumn","applySortable","$element","sortable","Sortable","create","group","handle","ghostClass","animation","onAdd","onRemove","onUpdate","on","destroy","restrict","replace","scope","editMode","continuousEditMode","adfModel","options","templateUrl","link","col","isDefined","isArray","cloned","append","$timeout","$uibModal","$faIcons","stringToBoolean","string","toLowerCase","Boolean","copyWidgets","source","target","shift","push","fillStructure","root","counter","forEach","row","isUndefined","readColumns","changeStructure","structure","copy","createConfiguration","type","cfg","config","createWidget","wdgt","findFirstWidgetColumn","error","addNewWidgetToModel","name","forceToSave","unshift","isEditModeImmediate","edit","immediate","openEditMode","split","object","size","arr","key","createCategories","categories","category","transclude","collapsible","editable","maximizable","adfWidgetFilter","hideButtons","controller","getNewModalScope","$new","translate","widgetFilter","structureName","$watch","oldVal","newVal","structures","title","titleTemplateUrl","editClass","deleteDashboard","dashData","toggleEditMode","openConfigWindow","modelCopy","editDashboardDialog","saveTemporalDashboard","temporal","adfToggleEditMode","$on","event","isNewDashboard","adfCancelEditMode","cancelEditMode","collapseAll","collapseExpandStatus","adfEditDashboardDialog","adfLaunchSearchingFromWidget","configFilter","adfWindowTimeChangedFromWidget","windowFilter","editDashboardScope","description","icon","availableIcons","list","tempIcon","selected","adfEditTemplatePath","editTemplateUrl","instance","open","backdrop","keyboard","selectIcon","info","closeDialog","close","$destroy","adfOpenWidgetFromOther","internal_config","_config","merge","adfOpenModalWidgetFromOther","widgetType","fullScreenScope","definition","opts","modalSize","windowClass","persistDashboard","this","$parent","adfAddWidgetDialog","addWidgetDialog","addScope","isFunction","adfAddTemplatePath","addTemplateUrl","addWidget","$attr","enableConfirmDelete","constant","defaultLocale","frameworkLocales","en-GB","ADF_COMMON_CLOSE","ADF_COMMON_DELETE","ADF_COMMON_TITLE","ADF_COMMON_DESCRIPTION","ADF_COMMON_CANCEL","ADF_COMMON_APPLY","ADF_COMMON_EDIT_DASHBOARD","ADF_EDIT_DASHBOARD_STRUCTURE_LABEL","ADF_DASHBOARD_TITLE_TOOLTIP_ADD","ADF_DASHBOARD_TITLE_TOOLTIP_SAVE","ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE","ADF_DASHBOARD_TITLE_TOOLTIP_UNDO","ADF_WIDGET_ADD_HEADER","ADF_WIDGET_DELETE_CONFIRM_MESSAGE","ADF_WIDGET_TOOLTIP_REFRESH","ADF_WIDGET_TOOLTIP_PRINT","ADF_WIDGET_TOOLTIP_FILTER","ADF_WIDGET_TOOLTIP_SORT","ADF_WIDGET_TOOLTIP_MOVE","ADF_WIDGET_TOOLTIP_COLLAPSE","ADF_WIDGET_TOOLTIP_EXPAND","ADF_WIDGET_TOOLTIP_EDIT","ADF_WIDGET_TOOLTIP_FULLSCREEN","ADF_WIDGET_TOOLTIP_REMOVE","ADF_WIDGET_TOOLTIP_OPERATION","sv-SE","filter","$filter","array","objectKey","provider","adfLocale","getLocales","locales","getActiveLocale","activeLocale","label","translation","widgetsPath","messageTemplate","loadingTemplate","customWidgetTemplatePath","defaultApplyFunction","extend","reload","frameless","apply","path","template","templatePath","setLocale","locale","Error","addLocale","translations","isString","isObject","$get","Date","getTime","other","toString","columnTemplate","adjustRowHeight","container","height","style","prepareStructure","preview","$q","widgetService","$controller","$injector","renderError","msg","html","compileWidget","currentScope","configChanged","content","editing","newScope","menu","renderWidget","reloadData","itemsPerPage","isNaN","needConfiguration","templateScope","base","resolvers","$tpl","getTemplate","resolve","promise","get","invoke","all","then","locals","resolveAs","templateCtrl","controllerAs","children","data","contents","reason","factory","$http","$sce","$templateCache","parseUrl","url","parsedUrl","indexOf","substring","exposed","deferred","defer","tpl","getTrustedResourceUrl","success","response","put","reject","Filter","preLink","styleClass","fromJson","reloadPeriod","widgetState","isCollapsed","collapsed","debug","postLink","_getWindowTime","to","moment","subtract","_d","deleteWidget","remove","deleteScope","deleteTemplateUrl","deleteDialog","widgetTimeout","print","isExecuteOperationEnabled","entityKey","oql","executeOperation","clearTimeout","sort","direction","toggleAdvanced","search","json","quick","toggleFilter","advanced","filterAvailable","showFilter","showFinalFilter","launchSearching","element","launchSearchingAdv","applyFilter","launchSearchingQuick","timeObj","getWindowTime","winTime","eval","rawdate","format","enter","keycode","keyCode","which","customSelectors","getCustomSelectors","widgetSelectors","findFields","fields","err","changeDirection","debugQuery","parseQuery","toJson","unknownWords","autocomplete_options","suggest","suggest_field_delimited","createApplyPromise","result","when","editScope","saveDialog","validationError","applyFn","adfDashboardCollapseExpand","args","adfWidgetEnterEditMode","adfIsEditMode","adfDashboardChanged","adfDashboardEditsCancelled","widgetClasses","classes","openFullScreen","openFilter","openAboutScreen","modalInstance","$uibModalInstance","information","about","ok","selectedItem","saveWidgetScreen","wId","$emit","objectSelector","fileName","compile","pre","post","run"],"mappings":"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","file":"opengate-angular-dashboard-framework-tpls.min.js","sourcesContent":["/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf', ['adf.provider', 'adf.locale', 'ui.bootstrap', 'opengate-angular-js'])\n    .value('adfTemplatePath', '../src/templates/')\n    .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\n    .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\n    .value('adfVersion', '<<adfVersion>>');","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf.locale', [])\n","/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardColumn', function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\n    'use strict';\n\n    /**\n     * moves a widget in between a column\n     */\n    function moveWidgetInColumn($scope, column, evt){\n      var widgets = column.widgets;\n      // move widget and apply to scope\n      $scope.$apply(function(){\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\n      });\n    }\n\n    /**\n     * finds a widget by its id in the column\n     */\n    function findWidget(column, index){\n      var widget = null;\n      for (var i=0; i<column.widgets.length; i++){\n        var w = column.widgets[i];\n        if (dashboard.idEquals(w.wid,index)){\n          widget = w;\n          break;\n        }\n      }\n      return widget;\n    }\n\n    /**\n     * finds a column by its id in the model\n     */\n    function findColumn(model, index){\n      var column = null;\n      for (var i=0; i<model.rows.length; i++){\n        var r = model.rows[i];\n        for (var j=0; j<r.columns.length; j++){\n          var c = r.columns[j];\n          if (dashboard.idEquals(c.cid, index)){\n            column = c;\n            break;\n          } else if (c.rows){\n            column = findColumn(c, index);\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * get the adf id from an html element\n     */\n    function getId(el){\n      var id = el.getAttribute('adf-id');\n      return id ? id : '-1';\n    }\n\n    /**\n     * adds a widget to a column\n     */\n    function addWidgetToColumn($scope, model, targetColumn, evt){\n      // find source column\n      var cid = getId(evt.from);\n      var sourceColumn = findColumn(model, cid);\n\n      if (sourceColumn){\n        // find moved widget\n        var wid = getId(evt.item);\n        var widget = findWidget(sourceColumn, wid);\n\n        if (widget){\n          // add new item and apply to scope\n          $scope.$apply(function(){\n            if (!targetColumn.widgets) {\n              targetColumn.widgets = [];\n            }\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\n\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\n          });\n        } else {\n          $log.warn('could not find widget with id ' + wid);\n        }\n      } else {\n        $log.warn('could not find column with id ' + cid);\n      }\n    }\n\n    /**\n     * removes a widget from a column\n     */\n    function removeWidgetFromColumn($scope, column, evt){\n      // remove old item and apply to scope\n      $scope.$apply(function(){\n        column.widgets.splice(evt.oldIndex, 1);\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n      });\n    }\n\n    /**\n     * enable sortable\n     */\n    function applySortable($scope, $element, model, column){\n      // enable drag and drop\n      var el = $element[0];\n      var sortable = Sortable.create(el, {\n        group: 'widgets',\n        handle: '.adf-move',\n        ghostClass: 'placeholder',\n        animation: 150,\n        onAdd: function(evt){\n          addWidgetToColumn($scope, model, column, evt);\n        },\n        onRemove: function(evt){\n          removeWidgetFromColumn($scope, column, evt);\n        },\n        onUpdate: function(evt){\n          moveWidgetInColumn($scope, column, evt);\n        }\n      });\n\n      // destroy sortable on column destroy event\n      $element.on('$destroy', function () {\n        // check sortable element, before calling destroy\n        // see https://github.com/sdorra/angular-dashboard-framework/issues/118\n        if (sortable.el){\n          sortable.destroy();\n        }\n      });\n    }\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        column: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        adfModel: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\n      link: function ($scope, $element) {\n        // set id\n        var col = $scope.column;\n        if (!col.cid){\n          col.cid = dashboard.id();\n        }\n\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\n          $compile(rowTemplate)($scope, function(cloned) {\n            $element.append(cloned);\n          });\n        } else {\n          // enable drag and drop for widget only columns\n          applySortable($scope, $element, $scope.adfModel, col);\n        }\n      }\n    };\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @ngdoc directive\n * @name adf.directive:adfDashboard\n * @element div\n * @restrict EA\n * @scope\n * @description\n *\n * `adfDashboard` is a directive which renders the dashboard with all its\n * components. The directive requires a name attribute. The name of the\n * dashboard can be used to store the model.\n *\n * @param {string} name name of the dashboard. This attribute is required.\n * @param {boolean=} editable false to disable the editmode of the dashboard.\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\n * @param {string=} structure the default structure of the dashboard.\n * @param {object=} adfModel model object of the dashboard.\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\n *                   events during edit mode not reset it if edit mode is exited.\n * @param {boolean=} categories enable categories for the add widget dialog.\n */\n\nangular.module('adf')\n    .directive('adfDashboard', function($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath, $faIcons) {\n        'use strict';\n\n        function stringToBoolean(string) {\n            switch (angular.isDefined(string) ? string.toLowerCase() : null) {\n                case 'true':\n                case 'yes':\n                case '1':\n                    return true;\n                case 'false':\n                case 'no':\n                case '0':\n                case null:\n                    return false;\n                default:\n                    return Boolean(string);\n            }\n        }\n\n        function copyWidgets(source, target) {\n            if (source.widgets && source.widgets.length > 0) {\n                var w = source.widgets.shift();\n                while (w) {\n                    target.widgets.push(w);\n                    w = source.widgets.shift();\n                }\n            }\n        }\n\n        /**\n         * Copy widget from old columns to the new model\n         * @param object root the model\n         * @param array of columns\n         * @param counter\n         */\n        function fillStructure(root, columns, counter) {\n            counter = counter || 0;\n\n            if (angular.isDefined(root.rows)) {\n                angular.forEach(root.rows, function(row) {\n                    angular.forEach(row.columns, function(column) {\n                        // if the widgets prop doesn't exist, create a new array for it.\n                        // this allows ui.sortable to do it's thing without error\n                        if (!column.widgets) {\n                            column.widgets = [];\n                        }\n\n                        // if a column exist at the counter index, copy over the column\n                        if (angular.isDefined(columns[counter])) {\n                            // do not add widgets to a column, which uses nested rows\n                            if (angular.isUndefined(column.rows)) {\n                                copyWidgets(columns[counter], column);\n                                counter++;\n                            }\n                        }\n\n                        // run fillStructure again for any sub rows/columns\n                        counter = fillStructure(column, columns, counter);\n                    });\n                });\n            }\n            return counter;\n        }\n\n        /**\n         * Read Columns: recursively searches an object for the 'columns' property\n         * @param object model\n         * @param array  an array of existing columns; used when recursion happens\n         */\n        function readColumns(root, columns) {\n            columns = columns || [];\n\n            if (angular.isDefined(root.rows)) {\n                angular.forEach(root.rows, function(row) {\n                    angular.forEach(row.columns, function(col) {\n                        columns.push(col);\n                        // keep reading columns until we can't any more\n                        readColumns(col, columns);\n                    });\n                });\n            }\n\n            return columns;\n        }\n\n        function changeStructure(model, structure) {\n            var columns = readColumns(model);\n            var counter = 0;\n\n            model.rows = angular.copy(structure.rows);\n\n            while (counter < columns.length) {\n                counter = fillStructure(model, columns, counter);\n            }\n        }\n\n        function createConfiguration(type) {\n            var cfg = {};\n            var config = dashboard.widgets[type].config;\n            if (config) {\n                cfg = angular.copy(config);\n            }\n            return cfg;\n        }\n\n        function createWidget(type) {\n            var wdgt = {};\n            var widget = dashboard.widgets[type];\n            if (widget) {\n                wdgt = angular.copy(widget);\n            }\n            return wdgt;\n        }\n\n        /**\n         * Find first widget column in model.\n         *\n         * @param dashboard model\n         */\n        function findFirstWidgetColumn(model) {\n            var column = null;\n            if (!angular.isArray(model.rows)) {\n                $log.error('model does not have any rows');\n                return null;\n            }\n            for (var i = 0; i < model.rows.length; i++) {\n                var row = model.rows[i];\n                if (angular.isArray(row.columns)) {\n                    for (var j = 0; j < row.columns.length; j++) {\n                        var col = row.columns[j];\n                        if (!col.rows) {\n                            column = col;\n                            break;\n                        }\n                    }\n                }\n                if (column) {\n                    break;\n                }\n            }\n            return column;\n        }\n\n        /**\n         * Adds the widget to first column of the model.\n         *\n         * @param dashboard model\n         * @param widget to add to model\n         * @param name name of the dashboard\n         */\n        function addNewWidgetToModel(model, widget, name, forceToSave) {\n            if (model) {\n                var column = findFirstWidgetColumn(model);\n                if (column) {\n                    if (!column.widgets) {\n                        column.widgets = [];\n                    }\n                    column.widgets.unshift(widget);\n\n                    // broadcast added event\n                    $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\n\n                    if (forceToSave) {\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\n                    }\n                } else {\n                    $log.error('could not find first widget column');\n                }\n            } else {\n                $log.error('model is undefined');\n            }\n        }\n\n        /**\n         * Checks if the edit mode of the widget should be opened immediately.\n         *\n         * @param widget type\n         */\n        function isEditModeImmediate(type) {\n            var widget = dashboard.widgets[type];\n            return widget && widget.edit && widget.edit.immediate;\n        }\n\n        /**\n         * Opens the edit mode of the specified widget.\n         *\n         * @param dashboard scope\n         * @param widget\n         */\n        function openEditMode($scope, widget) {\n            // wait some time before fire enter edit mode event\n            $timeout(function() {\n                $scope.$broadcast('adfWidgetEnterEditMode', widget);\n            }, 200);\n        }\n\n        /**\n         * Splits an object into an array multiple objects inside.\n         *\n         * @param object source object\n         * @param size size of array\n         *\n         * @return array of splitted objects\n         */\n        function split(object, size) {\n            var arr = [];\n            var i = 0;\n            angular.forEach(object, function(value, key) {\n                var index = i++ % size;\n                if (!arr[index]) {\n                    arr[index] = {};\n                }\n                arr[index][key] = value;\n            });\n            return arr;\n        }\n\n        /**\n         * Creates object with the category name as key and an array of widgets as value.\n         *\n         * @param widgets array of widgets\n         *\n         * @return array of categories\n         */\n        function createCategories(widgets) {\n            var categories = {};\n            angular.forEach(widgets, function(widget, key) {\n                var category = widget.category;\n                // if the widget has no category use a default one\n                if (!category) {\n                    category = 'Miscellaneous';\n                }\n                // push widget to category array\n                if (angular.isUndefined(categories[category])) {\n                    categories[category] = { widgets: {} };\n                }\n                categories[category].widgets[key] = widget;\n            });\n            return categories;\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            scope: {\n                structure: '@',\n                name: '@',\n                collapsible: '@',\n                editable: '@',\n                editMode: '@',\n                continuousEditMode: '=',\n                maximizable: '@',\n                adfModel: '=',\n                adfWidgetFilter: '=',\n                categories: '@',\n                hideButtons: '='\n            },\n            controller: function($scope) {\n                var model = {};\n                var structure = {};\n                var widgetFilter = null;\n                var structureName = {};\n                var name = $scope.name;\n\n                // Watching for changes on adfModel\n                $scope.$watch('adfModel', function(oldVal, newVal) {\n                    // has model changed or is the model attribute not set\n                    if (newVal !== null || (oldVal === null && newVal === null)) {\n                        model = $scope.adfModel;\n                        widgetFilter = $scope.adfWidgetFilter;\n                        if (!model || !model.rows) {\n                            structureName = $scope.structure;\n                            structure = dashboard.structures[structureName];\n                            if (structure) {\n                                if (model) {\n                                    model.rows = angular.copy(structure).rows;\n                                } else {\n                                    model = angular.copy(structure);\n                                }\n                                model.structure = structureName;\n                            } else {\n                                $log.error('could not find structure ' + structureName);\n                            }\n                        }\n\n                        if (model) {\n                            if (!model.title) {\n                                model.title = 'Empty Dashboard';\n                            }\n                            if (!model.titleTemplateUrl) {\n                                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\n                            }\n                            $scope.model = model;\n                        } else {\n                            $log.error('could not find or create model');\n                        }\n                    }\n                }, true);\n\n                // edit mode\n                $scope.editMode = false;\n                $scope.editClass = '';\n\n                //passs translate function from dashboard so we can translate labels inside html templates\n                $scope.translate = dashboard.translate;\n\n                function getNewModalScope() {\n                    var scope = $scope.$new();\n                    //pass translate function to the new scope so we can translate the labels inside the modal dialog\n                    scope.translate = dashboard.translate;\n                    return scope;\n                }\n\n                $scope.deleteDashboard = function() {\n                    var dashData = {\n                        id: model.id,\n                        name: model.title\n                    };\n\n                    $rootScope.$broadcast('dashboardDelete', dashData);\n                };\n\n                $scope.toggleEditMode = function(openConfigWindow) {\n                    $scope.editMode = !$scope.editMode;\n                    if ($scope.editMode) {\n                        if (!$scope.continuousEditMode) {\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\n                            $rootScope.$broadcast('adfIsEditMode');\n                        }\n\n                        if (openConfigWindow) {\n                            $scope.editDashboardDialog();\n                        }\n                    }\n\n                    if (!$scope.editMode) {\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\n                    }\n                };\n\n                $scope.saveTemporalDashboard = function() {\n                    delete model.temporal;\n                    $rootScope.$broadcast('adfDashboardChanged', name, model);\n                };\n\n                var adfToggleEditMode = $scope.$on('adfToggleEditMode', function(event, isNewDashboard) {\n                    if (isNewDashboard) {\n                        $scope.toggleEditMode(true);\n                    } else {\n                        $scope.toggleEditMode();\n                    }\n                });\n\n                var adfCancelEditMode = $scope.$on('adfCancelEditMode', function(event, isNewDashboard) {\n                    if ($scope.editMode) {\n                        $scope.cancelEditMode();\n                    }\n                });\n\n                $scope.collapseAll = function(collapseExpandStatus) {\n                    $rootScope.$broadcast('adfDashboardCollapseExpand', { collapseExpandStatus: collapseExpandStatus });\n                };\n\n                $scope.cancelEditMode = function() {\n                    $scope.editMode = false;\n                    if (!$scope.continuousEditMode && ($scope.modelCopy !== $scope.adfModel)) {\n                        $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\n                    }\n                    $rootScope.$broadcast('adfDashboardEditsCancelled');\n                };\n\n                var adfEditDashboardDialog = $scope.$on('adfEditDashboardDialog', function(event, isNewDashboard) {\n                    if ($scope.editMode) {\n                        $scope.editDashboardDialog();\n                    }\n                });\n\n                var adfLaunchSearchingFromWidget = $scope.$on('adfLaunchSearchingFromWidget', function(event, widget, configFilter) {\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\n                });\n                var adfWindowTimeChangedFromWidget = $scope.$on('adfWindowTimeChangedFromWidget', function(event, widget, windowFilter) {\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\n                });\n\n                // edit dashboard settings\n                $scope.editDashboardDialog = function() {\n                    var editDashboardScope = getNewModalScope();\n                    // create a copy of the title, to avoid changing the title to\n                    // \"dashboard\" if the field is empty\n                    editDashboardScope.copy = {\n                        title: (model.title !== 'Empty Dashboard' ? model.title : ''),\n                        description: model.description,\n                        icon: 'fa-tachometer'\n                    };\n\n                    // pass icon list\n                    editDashboardScope.availableIcons = $faIcons.list();\n                    editDashboardScope.tempIcon = {\n                        selected: editDashboardScope.copy.icon\n                    };\n                    // pass dashboard structure to scope\n                    editDashboardScope.structures = dashboard.structures;\n\n                    // pass split function to scope, to be able to display structures in multiple columns\n                    editDashboardScope.split = split;\n\n                    var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\n                    if (model.editTemplateUrl) {\n                        adfEditTemplatePath = model.editTemplateUrl;\n                    }\n                    var instance = $uibModal.open({\n                        scope: editDashboardScope,\n                        templateUrl: adfEditTemplatePath,\n                        backdrop: 'static',\n                        keyboard: false,\n                        size: 'lg'\n                    });\n\n                    editDashboardScope.selectIcon = function(icon) {\n                        if (icon) {\n                            editDashboardScope.copy.icon = icon;\n                        } else {\n                            editDashboardScope.copy.icon = undefined;\n                        }\n                    };\n\n                    editDashboardScope.changeStructure = function(name, structure) {\n                        $log.info('change structure to ' + name);\n                        changeStructure(model, structure);\n                        if (model.structure !== name) {\n                            model.structure = name;\n                        }\n                    };\n                    editDashboardScope.closeDialog = function() {\n                        // copy the new title back to the model\n                        model.title = editDashboardScope.copy.title;\n                        model.description = editDashboardScope.copy.description;\n                        model.icon = editDashboardScope.copy.icon;\n\n                        // close modal and destroy the scope\n                        instance.close();\n                        editDashboardScope.$destroy();\n                    };\n                };\n\n                var adfOpenWidgetFromOther = $scope.$on('adfOpenWidgetFromOther', function(event, widget, config) {\n                    var internal_config = createConfiguration(widget);\n                    var _config = angular.merge({}, internal_config, config);\n                    var w = {\n                        type: widget,\n                        config: _config,\n                        title: _config.title\n                    };\n                    addNewWidgetToModel(model, w, name, !$scope.editMode);\n                });\n\n                var adfOpenModalWidgetFromOther = $scope.$on('adfOpenModalWidgetFromOther', function(event, widgetType, config) {\n                    var widget = createWidget(widgetType);\n                    widget.config = angular.merge({}, widget.config, config);\n                    widget.type = widgetType;\n                    if (widget.config.title) {\n                        widget.title = widget.config.title;\n                    }\n                    var fullScreenScope = $scope.$new();\n                    fullScreenScope.definition = fullScreenScope.widget = widget;\n                    var opts = {\n                        scope: fullScreenScope,\n                        templateUrl: adfTemplatePath + 'widget-fullscreen.html',\n                        size: fullScreenScope.definition.modalSize || 'lg', // 'sm', 'lg'\n                        backdrop: 'static',\n                        windowClass: (fullScreenScope.definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n                    };\n\n                    fullScreenScope.persistDashboard = function() {\n                        $rootScope.$broadcast('adfOpenWidgetFromOther', this.$parent.widget.type, this.$parent.widget.config);\n                        this.closeDialog();\n                    }\n\n                    var instance = $uibModal.open(opts);\n                    fullScreenScope.closeDialog = function() {\n                        instance.close();\n                        fullScreenScope.$destroy();\n                    };\n\n                });\n\n                var adfAddWidgetDialog = $scope.$on('adfAddWidgetDialog', function(event, isNewDashboard) {\n                    if (!model.temporal && model.editable) {\n                        if (!$scope.editMode) {\n                            $scope.editMode = true;\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\n                            $rootScope.$broadcast('adfIsEditMode');\n                        }\n\n                        $scope.addWidgetDialog();\n                    }\n                });\n\n                // add widget dialog\n                $scope.addWidgetDialog = function() {\n                    var addScope = getNewModalScope();\n                    var widgets;\n                    if (angular.isFunction(widgetFilter)) {\n                        widgets = {};\n                        angular.forEach(dashboard.widgets, function(widget, type) {\n                            if (widgetFilter(widget, type, model)) {\n                                widgets[type] = widget;\n                            }\n                        });\n                    } else {\n                        widgets = dashboard.widgets;\n                    }\n                    addScope.widgets = widgets;\n\n                    //pass translate function to the new scope so we can translate the labels inside the modal dialog\n                    addScope.translate = $scope.translate;\n\n                    // pass createCategories function to scope, if categories option is enabled\n                    if ($scope.options.categories) {\n                        $scope.createCategories = createCategories;\n                    }\n\n                    var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\n                    if (model.addTemplateUrl) {\n                        adfAddTemplatePath = model.addTemplateUrl;\n                    }\n\n                    var opts = {\n                        scope: addScope,\n                        templateUrl: adfAddTemplatePath,\n                        backdrop: 'static'\n                    };\n\n                    var instance = $uibModal.open(opts);\n                    addScope.addWidget = function(widget) {\n                        var w = {\n                            type: widget,\n                            config: createConfiguration(widget)\n                        };\n                        addNewWidgetToModel(model, w, name);\n                        // close and destroy\n                        instance.close();\n                        addScope.$destroy();\n\n                        // check for open edit mode immediately\n                        if (isEditModeImmediate(widget)) {\n                            openEditMode($scope, w);\n                        }\n                    };\n                    addScope.closeDialog = function() {\n                        // close and destroy\n                        instance.close();\n                        addScope.$destroy();\n                    };\n                };\n\n                $scope.addNewWidgetToModel = addNewWidgetToModel;\n\n                $scope.$on('destroy', function() {\n                    adfLaunchSearchingFromWidget();\n                    adfWindowTimeChangedFromWidget();\n                    adfToggleEditMode();\n                    adfOpenWidgetFromOther();\n                    adfOpenModalWidgetFromOther();\n                    adfCancelEditMode();\n                    adfAddWidgetDialog();\n                    adfEditDashboardDialog();\n                });\n            },\n            link: function($scope, $element, $attr) {\n                // pass options to scope\n                var options = {\n                    name: $attr.name,\n                    editable: true,\n                    enableConfirmDelete: stringToBoolean($attr.enableConfirmDelete),\n                    maximizable: stringToBoolean($attr.maximizable),\n                    collapsible: stringToBoolean($attr.collapsible),\n                    categories: stringToBoolean($attr.categories)\n                };\n                if (angular.isDefined($attr.editable)) {\n                    options.editable = stringToBoolean($attr.editable);\n                }\n                $scope.options = options;\n            },\n            templateUrl: adfTemplatePath + 'dashboard.html'\n        };\n    });","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\n/**\n * @ngdoc object\n * @name adf.locale#adfLocale\n * @description\n *\n * Holds settings and values for framework supported locales\n */\nangular.module('adf.locale')\n    .constant('adfLocale', {\n        defaultLocale: 'en-GB',\n        frameworkLocales: {\n            'en-GB': {\n                ADF_COMMON_CLOSE: 'Close',\n                ADF_COMMON_DELETE: 'Delete',\n                ADF_COMMON_TITLE: 'Title',\n                ADF_COMMON_DESCRIPTION: 'Description',\n                ADF_COMMON_CANCEL: 'Cancel',\n                ADF_COMMON_APPLY: 'Apply',\n                ADF_COMMON_EDIT_DASHBOARD: 'Edit dashboard',\n                ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Structure',\n                ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Add new widget',\n                ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Save changes',\n                ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Enable edit mode',\n                ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Undo changes',\n                ADF_WIDGET_ADD_HEADER: 'Add new widget',\n                ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Are you sure you want to delete this widget ?',\n                ADF_WIDGET_TOOLTIP_REFRESH: 'Reload widget Content',\n                ADF_WIDGET_TOOLTIP_PRINT: 'Print widget Content',\n                ADF_WIDGET_TOOLTIP_FILTER: 'Show widget Filter',\n                ADF_WIDGET_TOOLTIP_SORT: 'Show widget Sort',\n                ADF_WIDGET_TOOLTIP_MOVE: 'Change widget location',\n                ADF_WIDGET_TOOLTIP_COLLAPSE: 'Collapse widget',\n                ADF_WIDGET_TOOLTIP_EXPAND: 'Expand widget',\n                ADF_WIDGET_TOOLTIP_EDIT: 'Edit widget configuration',\n                ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Fullscreen widget',\n                ADF_WIDGET_TOOLTIP_REMOVE: 'Remove widget',\n                ADF_WIDGET_TOOLTIP_OPERATION: 'Execute operation'\n            },\n            'sv-SE': {\n                ADF_COMMON_CLOSE: 'Stäng',\n                ADF_COMMON_DELETE: 'Ta bort',\n                ADF_COMMON_TITLE: 'Titel',\n                ADF_COMMON_DESCRIPTION: 'Description',\n                ADF_COMMON_CANCEL: 'Avbryt',\n                ADF_COMMON_APPLY: 'Använd',\n                ADF_COMMON_EDIT_DASHBOARD: 'Redigera dashboard',\n                ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Struktur',\n                ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Lägg till ny widget',\n                ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Spara förändringar',\n                ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Slå på redigeringsläge',\n                ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Ångra förändringar',\n                ADF_WIDGET_ADD_HEADER: 'Lägg till ny widget',\n                ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Är du säker på att du vill ta bort denna widget ?',\n                ADF_WIDGET_TOOLTIP_REFRESH: 'Ladda om widget',\n                ADF_WIDGET_TOOLTIP_FILTER: 'Show widget Filter',\n                ADF_WIDGET_TOOLTIP_SORT: 'Show widget Sort',\n                ADF_WIDGET_TOOLTIP_MOVE: 'Ändra widgets position',\n                ADF_WIDGET_TOOLTIP_COLLAPSE: 'Stäng widget',\n                ADF_WIDGET_TOOLTIP_EXPAND: 'Öppna widget',\n                ADF_WIDGET_TOOLTIP_EDIT: 'Ändra widget konfigurering',\n                ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Visa widget i fullskärm',\n                ADF_WIDGET_TOOLTIP_REMOVE: 'Ta bort widget',\n                ADF_WIDGET_TOOLTIP_OPERATION: 'Execute operation'\n            }\n        }\n    });","/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .filter('adfOrderByObjectKey', function($filter) {\n    'use strict';\n\n    return function(item, key){\n      var array = [];\n      angular.forEach(item, function(value, objectKey){\n        value[key] = objectKey;\n        array.push(value);\n      });\n      return $filter('orderBy')(array, key);\n    };\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\n/**\n * @ngdoc object\n * @name adf.dashboardProvider\n * @description\n *\n * The dashboardProvider can be used to register structures and widgets.\n */\nangular.module('adf.provider', ['adf.locale'])\n  .provider('dashboard', function(adfLocale){\n\n    var widgets = {};\n    var widgetsPath = '';\n    var structures = {};\n    var messageTemplate = '<div class=\"alert alert-danger\">{}</div>';\n    var loadingTemplate = '\\\n      <div class=\"progress progress-striped active\">\\n\\\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\n          <span class=\"sr-only\">loading ...</span>\\n\\\n        </div>\\n\\\n      </div>';\n    var customWidgetTemplatePath = null;\n\n    // default apply function of widget.edit.apply\n    var defaultApplyFunction = function(){\n      return true;\n    };\n\n    var activeLocale = adfLocale.defaultLocale;\n    var locales = adfLocale.frameworkLocales;\n\n    function getLocales() {\n      return locales;\n    }\n\n    function getActiveLocale() {\n      return activeLocale;\n    }\n\n    function translate(label) {\n      var translation = locales[activeLocale][label];\n      return translation ? translation : label;\n    }\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#widget\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new widget.\n    *\n    * @param {string} name of the widget\n    * @param {object} widget to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `title` - `{string=}` - The title of the widget.\n    *   - `description` - `{string=}` - Description of the widget.\n    *   - `category` - `{string=}` - Category of the widget.\n    *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\n    *   - `config` - `{object}` - Predefined widget configuration.\n    *   - `controller` - `{string=|function()=}` - Controller fn that should be\n    *      associated with newly created scope of the widget or the name of a\n    *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\n    *      if passed as a string.\n    *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\n    *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\n    *   - `template` - `{string=|function()=}` - html template as a string.\n    *   - `templateUrl` - `{string=}` - path to an html template.\n    *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\n    *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the widget\n    *      will wait for them all to be resolved or one to be rejected before the controller is\n    *      instantiated.\n    *      If all the promises are resolved successfully, the values of the resolved promises are\n    *      injected.\n    *\n    *      The map object is:\n    *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n    *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\n    *        and the return value is treated as the dependency. If the result is a promise, it is\n    *        resolved before its value is injected into the controller.\n    *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n    *      on the scope of the widget.\n    *   - `edit` - `{object}` - Edit modus of the widget.\n    *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\n    *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\n    *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\n    *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n    *        on the scope of the widget.\n    *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\n    *        Default is true.\n    *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\n    *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\n    *        The function have to return a boolean or an promise which can be resolved to a boolean.\n    *        The function can use injection.\n    *\n    * @returns {Object} self\n    */\n    this.widget = function(name, widget){\n      var w = angular.extend({reload: false, frameless: false}, widget);\n      if ( w.edit ){\n        var edit = {\n          reload: true,\n          immediate: false,\n          apply: defaultApplyFunction\n        };\n        angular.extend(edit, w.edit);\n        w.edit = edit;\n      }\n      widgets[name] = w;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#widgetsPath\n     * @methodOf adf.dashboardProvider\n     * @description\n     *\n     * Sets the path to the directory which contains the widgets. The widgets\n     * path is used for widgets with a templateUrl which contains the\n     * placeholder {widgetsPath}. The placeholder is replaced with the\n     * configured value, before the template is loaded, but the template is\n     * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\n     * The default value of widgetPaths is ''.\n     *\n     *\n     * @param {string} path to the directory which contains the widgets\n     *\n     * @returns {Object} self\n     */\n    this.widgetsPath = function(path){\n      widgetsPath = path;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#structure\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new structure.\n    *\n    * @param {string} name of the structure\n    * @param {object} structure to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\n    *     - `styleClass` - `{string}` - CSS Class of the row.\n    *     - `columns` - `{Array.<Object>}` - Columns of the row.\n    *       - `styleClass` - `{string}` - CSS Class of the column.\n    *\n    * @returns {Object} self\n    */\n    this.structure = function(name, structure){\n      structures[name] = structure;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#messageTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template for messages.\n    *\n    * @param {string} template for messages.\n    *\n    * @returns {Object} self\n    */\n    this.messageTemplate = function(template){\n      messageTemplate = template;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#loadingTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template which is displayed as\n    * long as the widget resources are not resolved.\n    *\n    * @param {string} template loading template\n    *\n    * @returns {Object} self\n    */\n    this.loadingTemplate = function(template){\n      loadingTemplate = template;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#customWidgetTemplatePath\n     * @propertyOf adf.dashboardProvider\n     * @description\n     *\n     * Changes the container template for the widgets\n     *\n     * @param {string} path to the custom widget template\n     *\n     * @returns {Object} self\n     */\n    this.customWidgetTemplatePath = function(templatePath) {\n      customWidgetTemplatePath = templatePath;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#setLocale\n     * @methodOf adf.dashboardProvider\n     * @description\n     *\n     * Changes the locale setting of adf\n     *\n     * @param {string} ISO Language Code\n     *\n     * @returns {Object} self\n     */\n     this.setLocale = function(locale){\n       if(locales[locale]) {\n         activeLocale = locale;\n       } else {\n         throw new Error('Cannot set locale: ' + locale + '. Locale is not defined.');\n       }\n       return this;\n     };\n\n     /**\n      * @ngdoc method\n      * @name adf.dashboardProvider#addLocale\n      * @methodOf adf.dashboardProvider\n      * @description\n      *\n      * Adds a new locale to adf\n      *\n      * @param {string} ISO Language Code for the new locale\n      * @param {object} translations for the locale.\n      *\n      * @returns {Object} self\n      */\n      this.addLocale = function(locale, translations){\n        if(!angular.isString(locale)) {\n          throw new Error('locale must be an string');\n        }\n\n        if(!angular.isObject(translations)) {\n          throw new Error('translations must be an object');\n        }\n\n        locales[locale] = translations;\n        return this;\n      };\n\n   /**\n    * @ngdoc service\n    * @name adf.dashboard\n    * @description\n    *\n    * The dashboard holds all options, structures and widgets.\n    *\n    * @property {Array.<Object>} widgets Array of registered widgets.\n    * @property {string} widgetsPath Default path for widgets.\n    * @property {Array.<Object>} structures Array of registered structures.\n    * @property {string} messageTemplate Template for messages.\n    * @property {string} loadingTemplate Template for widget loading.\n    * @property {method} sets locale of adf.\n    * @property {Array.<Object>} hold all of the locale translations.\n    * @property {string} the active locale setting.\n    * @property {method} translation function passed to templates.\n    *\n    * @returns {Object} self\n    */\n    this.$get = function(){\n      var cid = 0;\n\n      return {\n        widgets: widgets,\n        widgetsPath: widgetsPath,\n        structures: structures,\n        messageTemplate: messageTemplate,\n        loadingTemplate: loadingTemplate,\n        setLocale: this.setLocale,\n        locales: getLocales,\n        activeLocale: getActiveLocale,\n        translate: translate,\n        customWidgetTemplatePath: customWidgetTemplatePath,\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboard#id\n         * @methodOf adf.dashboard\n         * @description\n         *\n         * Creates an ongoing numeric id. The method is used to create ids for\n         * columns and widgets in the dashboard.\n         */\n        id: function(){\n          return new Date().getTime() + '-' + (++cid);\n        },\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboard#idEqual\n         * @methodOf adf.dashboard\n         * @description\n         *\n         * Checks if the given ids are equal.\n         *\n         * @param {string} id widget or column id\n         * @param {string} other widget or column id\n         */\n         idEquals: function(id, other){\n           // use toString, because old ids are numbers\n           return ((id) && (other)) && (id.toString() === other.toString());\n         }\n      };\n    };\n\n  });\n","/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardRow', function ($compile, adfTemplatePath, columnTemplate) {\n    'use strict';\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        row: '=',\n        adfModel: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\n      link: function($scope, $element) {\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\n          $compile(columnTemplate)($scope, function(cloned) {\n            $element.append(cloned);\n          });\n        }\n      }\n    };\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\n/* global angular */\nangular.module('adf')\n  .directive('adfStructurePreview', function(adfTemplatePath) {\n\n    function adjustRowHeight(container){\n      if (container.rows && container.rows.length > 0){\n        var height = 100 / container.rows.length;\n        angular.forEach(container.rows, function(row){\n          row.style = {\n            height: height + '%'\n          }\n\n          if (row.columns){\n            angular.forEach(row.columns, function(column){\n              adjustRowHeight(column);\n            });\n          }\n        });\n      }\n    }\n\n    function prepareStructure($scope){\n      var structure = angular.copy($scope.structure);\n      adjustRowHeight(structure);\n      $scope.preview = structure;\n    }\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        name: '=',\n        structure: '=',\n        selected: '='\n      },\n      templateUrl: adfTemplatePath + 'structure-preview.html',\n      link: prepareStructure\n    };\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf')\n    .directive('adfWidgetContent', function($log, $q, widgetService,\n        $compile, $controller, $injector, dashboard) {\n\n        function renderError($element, msg) {\n            $log.warn(msg);\n            $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\n        }\n\n        function compileWidget($scope, $element, currentScope, configChanged) {\n            var model = $scope.model;\n            var content = $scope.content;\n            var editing = $scope.editing;\n\n            var newScope = currentScope;\n            if (!model) {\n                renderError($element, 'model is undefined')\n            } else if (!content) {\n                var msg = 'widget content is undefined, please have a look at your browser log';\n                renderError($element, msg);\n            } else {\n                if (newScope && newScope.menu !== undefined) { //adf-widget-browser\n                    newScope = renderWidget($scope, $element, currentScope, model, content);\n                } else {\n                    if (newScope && newScope.reloadData && !configChanged) {\n                        if (newScope.itemsPerPage !== undefined && isNaN(newScope.itemsPerPage)) {\n                            newScope = renderWidget($scope, $element, currentScope, model, content);\n                        } else {\n                            newScope.reloadData();\n                        }\n                    } else if (newScope && newScope.reloadData && newScope.needConfiguration !== undefined && !newScope.needConfiguration) {\n                        newScope.reloadData();\n                    } else {\n                        newScope = renderWidget($scope, $element, currentScope, model, content, editing);\n                    }\n                }\n            }\n\n            newScope.editing = editing ? editing : false;\n            return newScope;\n        }\n\n        function renderWidget($scope, $element, currentScope, model, content, editing) {\n            // display loading template\n            $element.html(dashboard.loadingTemplate);\n\n            // create new scope\n            var templateScope = $scope.$new();\n\n            // pass config object to scope\n            if (!model.config) {\n                model.config = {};\n            }\n\n            templateScope.config = model.config;\n            templateScope.editing = editing;\n\n            // local injections\n            var base = {\n                $scope: templateScope,\n                widget: model,\n                config: model.config\n            };\n\n            // get resolve promises from content object\n            var resolvers = {};\n            resolvers.$tpl = widgetService.getTemplate(content);\n            if (content.resolve) {\n                angular.forEach(content.resolve, function(promise, key) {\n                    if (angular.isString(promise)) {\n                        resolvers[key] = $injector.get(promise);\n                    } else {\n                        resolvers[key] = $injector.invoke(promise, promise, base);\n                    }\n                });\n            }\n\n            // resolve all resolvers\n            $q.all(resolvers).then(function(locals) {\n                angular.extend(locals, base);\n\n                // pass resolve map to template scope as defined in resolveAs\n                if (content.resolveAs) {\n                    templateScope[content.resolveAs] = locals;\n                }\n\n                // compile & render template\n                var template = locals.$tpl;\n                $element.html(template);\n                if (content.controller) {\n                    var templateCtrl = $controller(content.controller, locals);\n                    if (content.controllerAs) {\n                        templateScope[content.controllerAs] = templateCtrl;\n                    }\n                    $element.children().data('$ngControllerController', templateCtrl);\n                }\n                $compile($element.contents())(templateScope);\n            }, function(reason) {\n                // handle promise rejection\n                var msg = 'Could not resolve all promises';\n                if (reason) {\n                    msg += ': ' + reason;\n                }\n                renderError($element, msg);\n            });\n\n            // destroy old scope\n            if (currentScope) {\n                currentScope.$destroy();\n            }\n\n            return templateScope;\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            scope: {\n                model: '=',\n                content: '=',\n                editing: '='\n            },\n            link: function($scope, $element) {\n                var currentScope = compileWidget($scope, $element, null);\n                $scope.$on('widgetConfigChanged', function() {\n                    currentScope = compileWidget($scope, $element, currentScope, true);\n                });\n                $scope.$on('widgetReload', function() {\n                    currentScope = compileWidget($scope, $element, currentScope, false);\n                });\n            }\n        };\n\n    });","\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/**\n * The widget service provide helper functions to render widgets and their content.\n */\nangular.module('adf')\n  .factory('widgetService', function($http, $q, $sce, $templateCache, dashboard) {\n    'use strict';\n\n    function parseUrl(url) {\n      var parsedUrl = url;\n      if (url.indexOf('{widgetsPath}') >= 0) {\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\n                .replace('//', '/');\n        if (parsedUrl.indexOf('/') === 0) {\n          parsedUrl = parsedUrl.substring(1);\n        }\n      }\n      return parsedUrl;\n    }\n\n    var exposed = {};\n\n    exposed.getTemplate = function(widget){\n      var deferred = $q.defer();\n\n      if (widget.template) {\n        deferred.resolve(widget.template);\n      } else if (widget.templateUrl) {\n        // try to fetch template from cache\n        var tpl = $templateCache.get(widget.templateUrl);\n        if (tpl) {\n          deferred.resolve(tpl);\n        } else {\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\n          $http.get(url)\n               .success(function(response) {\n                 // put response to cache, with unmodified url as key\n                 $templateCache.put(widget.templateUrl, response);\n                 deferred.resolve(response);\n               })\n               .error(function() {\n                 deferred.reject('could not load template');\n               });\n        }\n      }\n\n      return deferred.promise;\n    };\n\n    return exposed;\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf')\n    .directive('adfWidget', function($injector, $q, $log, $uibModal, $rootScope, $timeout, dashboard, adfTemplatePath, Filter) {\n\n        function preLink($scope) {\n            var definition = $scope.definition;\n\n            //passs translate function from dashboard so we can translate labels inside html templates\n            $scope.translate = dashboard.translate;\n\n            if (definition) {\n                var w = dashboard.widgets[definition.type];\n                if (w) {\n                    // pass title\n                    if (!definition.title) {\n                        definition.title = w.title;\n                    }\n\n                    if (!definition.titleTemplateUrl) {\n                        definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\n                        if (w.titleTemplateUrl) {\n                            definition.titleTemplateUrl = w.titleTemplateUrl;\n                        }\n                    }\n\n                    if (!definition.editTemplateUrl) {\n                        definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\n                        if (w.editTemplateUrl) {\n                            definition.editTemplateUrl = w.editTemplateUrl;\n                        }\n                    }\n\n                    if (!definition.titleTemplateUrl) {\n                        definition.frameless = w.frameless;\n                    }\n\n                    if (!definition.styleClass) {\n                        definition.styleClass = w.styleClass;\n                    }\n\n                    // set id for sortable\n                    if (!definition.wid) {\n                        definition.wid = dashboard.id();\n                    }\n\n                    // pass copy of widget to scope\n                    $scope.widget = angular.copy(w);\n\n                    // create config object\n                    var config = definition.config;\n                    if (config) {\n                        if (angular.isString(config)) {\n                            config = angular.fromJson(config);\n                        }\n                    } else {\n                        config = {};\n                    }\n\n                    if (!config.reloadPeriod) {\n                        config.reloadPeriod = \"0\";\n                    }\n\n                    // pass config to scope\n                    $scope.config = config;\n\n                    // collapse exposed $scope.widgetState property\n                    if (!$scope.widgetState) {\n                        $scope.widgetState = {};\n                        $scope.widgetState.isCollapsed = (w.collapsed === true) ? w.collapsed : false;\n                    }\n\n                } else {\n                    $log.warn('could not find widget ' + definition.type);\n                }\n            } else {\n                $log.debug('definition not specified, widget was probably removed');\n            }\n        }\n\n        function postLink($scope, $element) {\n            var definition = $scope.definition;\n            if (definition) {\n                if (!$scope.config.reloadPeriod) {\n                    $scope.config.reloadPeriod = \"0\";\n                }\n\n                // bind close function\n                var deleteWidget = function() {\n                    var column = $scope.col;\n                    if (column) {\n                        var index = column.widgets.indexOf(definition);\n                        if (index >= 0) {\n                            column.widgets.splice(index, 1);\n                        }\n                    }\n                    $element.remove();\n                    $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n                };\n\n                $scope.remove = function() {\n                    if ($scope.options.enableConfirmDelete) {\n                        var deleteScope = $scope.$new();\n                        deleteScope.translate = dashboard.translate;\n\n                        var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\n                        if (definition.deleteTemplateUrl) {\n                            deleteTemplateUrl = definition.deleteTemplateUrl;\n                        }\n                        var opts = {\n                            scope: deleteScope,\n                            templateUrl: deleteTemplateUrl,\n                            backdrop: 'static'\n                        };\n                        var instance = $uibModal.open(opts);\n\n                        deleteScope.closeDialog = function() {\n                            instance.close();\n                            deleteScope.$destroy();\n                        };\n                        deleteScope.deleteDialog = function() {\n                            deleteWidget();\n                            deleteScope.closeDialog();\n                        };\n                    } else {\n                        deleteWidget();\n                    }\n                };\n\n                var widgetTimeout = undefined;\n\n                $scope.print = function() {\n                    if (!$scope.editMode) {\n                        $scope.$broadcast('widgetPrint');\n                    }\n                }\n\n                $scope.isExecuteOperationEnabled = function() {\n                    if ($scope.config.entityKey)\n                        return true;\n                    if (typeof $scope.config.filter === \"string\") {\n                        return $scope.config.filter.length > 0;\n                    }\n                    if (typeof $scope.config.filter === \"object\") {\n                        return $scope.config.filter.value.length > 2 && $scope.config.filter.oql;\n                    }\n                    return false;\n                }\n\n                $scope.executeOperation = function() {\n                    if (!$scope.editMode) {\n                        $scope.$parent.$broadcast('widgetExecuteOperation');\n                    }\n                };\n\n                // bind reload function\n                $scope.reload = function() {\n                    $scope.$broadcast('widgetReload');\n                    if ($scope.config && $scope.config && $scope.config.reloadPeriod && $scope.config.reloadPeriod !== \"0\") {\n                        if (widgetTimeout) clearTimeout(widgetTimeout);\n                        widgetTimeout = $timeout($scope.reload, ($scope.config.reloadPeriod * 1000));\n                    }\n                };\n\n                // verificacion de periodo de refresco\n                if ($scope.config && $scope.config && $scope.config.reloadPeriod && $scope.config.reloadPeriod !== \"0\") {\n                    widgetTimeout = $timeout($scope.reload, ($scope.config.reloadPeriod * 1000));\n                }\n\n                $scope.filter = {\n                    value: \"\"\n                };\n                $scope.sort = {\n                    value: \"\",\n                    direction: \"\"\n                };\n\n                $scope.toggleAdvanced = false;\n                if (typeof $scope.config.filter === \"object\" && $scope.config.filter.oql.length > 2) {\n                    $scope.search = {\n                        oql: $scope.config.filter.oql,\n                        json: $scope.config.filter.value\n                    };\n                    $scope.toggleAdvanced = true;\n                } else if (typeof $scope.config.filter === \"string\") {\n                    $scope.search = {\n                        quick: $scope.config.filter\n                    };\n                } else {\n                    $scope.search = {\n                        quick: $scope.config.filter = \"\"\n                    };\n                }\n\n                $scope.toggleFilter = function(advanced) {\n                    $scope.toggleAdvanced = advanced;\n                };\n                $scope.filterAvailable = false;\n                $scope.showFilter = function() {\n                    $scope.filterAvailable = $scope.filterAvailable === true ? false : true;\n                };\n\n                $scope.showFinalFilter = false;\n\n                $scope.launchSearching = function() {\n                    var widget = {\n                        definition: definition,\n                        element: $element\n                    };\n\n                    $rootScope.$broadcast('adfLaunchSearchingFromWidget', widget, $scope.config.filter);\n                    $scope.reload();\n                }\n\n                $scope.launchSearchingAdv = function() {\n                    $scope.search.quick = '';\n                    $scope.config.filter = {\n                        oql: $scope.search.oql,\n                        value: $scope.search.json\n                    };\n                    if ($scope.search.json === '')\n                        $scope.config.filter = {\n                            oql: '',\n                            value: ''\n                        };\n                    $scope.launchSearching();\n\n                }\n\n                $scope.applyFilter = function(event) {\n                    $scope.launchSearching();\n                }\n\n                $scope.launchSearchingQuick = function() {\n                    $scope.search.oql = $scope.search.json = '';\n                    $scope.config.filter = $scope.search.quick;\n                    $scope.launchSearching();\n                }\n\n                var windowTimeChanged = $scope.$on('onWindowTimeChanged', function(event, timeObj) {\n                    $scope.config.windowFilter = timeObj ? timeObj : ($scope.config.windowFilter ? {} : timeObj);\n                    var widget = {\n                        definition: definition,\n                        element: $element\n                    }\n                    $rootScope.$broadcast('adfWindowTimeChangedFromWidget', widget, $scope.config.windowFilter);\n                    $scope.reload();\n                });\n\n                function _getWindowTime(type) {\n                    if (type === \"custom\") {\n                        return {\n                            from: $scope.config.windowFilter.from,\n                            to: $scope.config.windowFilter.to\n                        }\n                    }\n                    var from = window.moment().subtract(1, type);\n                    return {\n                        from: from._d\n                    };\n                }\n\n                $scope.config.getWindowTime = function() {\n                    var windowFilter = $scope.config.windowFilter;\n                    if (windowFilter && windowFilter.type) {\n                        var winTime = _getWindowTime(windowFilter.type);\n                        /* jshint ignore:start */\n                        if (!window.eval($scope.config.windowFilter.rawdate)) {\n                            for (var key in winTime) {\n                                winTime[key] = window.moment(winTime[key]).format();\n                            }\n                            winTime['rawdate'] = true;\n                        }\n                        /* jshint ignore:end */\n                        return winTime;\n                    }\n                }\n\n                $scope.enter = function(event) {\n                    var keycode = (event.keyCode ? event.keyCode : event.which);\n                    if (keycode === 13) {\n                        if ($scope.toggleAdvanced)\n                            $scope.launchSearchingAdv();\n                        else\n                            $scope.launchSearchingQuick();\n                    }\n                    if (keycode === 19) {\n                        $scope.showFinalFilter = $scope.showFinalFilter === false ? true : false;\n                    }\n                }\n\n\n                $scope.customSelectors = [];\n                $scope.getCustomSelectors = function() {\n                    $scope.config.widgetSelectors().findFields(\"\").then(function(fields) {\n                        $scope.customSelectors = fields;\n                        $scope.$apply();\n                    }).catch(function(err) {\n                        $log.error(err);\n                    });\n\n                }\n\n                $scope.changeDirection = function() {\n                    if ($scope.config.sort.direction === 'DESCENDING') {\n                        $scope.config.sort.direction = 'ASCENDING'\n                    } else if ($scope.config.sort.direction === 'ASCENDING') {\n                        $scope.config.sort.direction = 'DESCENDING'\n                    }\n                    $scope.reload();\n                }\n\n\n                $scope.debugQuery = function() {\n\n\n                    Filter.parseQuery($scope.search.oql || '')\n                        .then(function(data) {\n                            //$scope.elementos = data;\n                            $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\n                            $scope.unknownWords = '';\n                            $scope.filter.error = null;\n                        })\n                        .catch(function(err) {\n                            $scope.filter.error = err;\n                            // Tratar el error\n                        });\n\n                }\n\n                $scope.autocomplete_options = function() {\n                    var autocomplete_options = {\n                        suggest: Filter.suggest_field_delimited,\n                        customSelectors: $scope.config.widgetSelectors()\n                    };\n\n                    return autocomplete_options;\n\n                };\n\n                // bind edit function\n                $scope.edit = function() {\n                    var editScope = $scope.$new();\n                    editScope.translate = dashboard.translate;\n                    editScope.definition = angular.copy(definition);\n\n                    var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\n                    if (definition.editTemplateUrl) {\n                        adfEditTemplatePath = definition.editTemplateUrl;\n                    }\n\n                    var opts = {\n                        scope: editScope,\n                        templateUrl: adfEditTemplatePath,\n                        backdrop: 'static',\n                        size: 'lg'\n                    };\n\n                    var instance = $uibModal.open(opts);\n\n                    editScope.closeDialog = function() {\n                        instance.close();\n                        editScope.$destroy();\n                    };\n\n                    // TODO create util method\n                    function createApplyPromise(result) {\n                        var promise;\n                        if (typeof result === 'boolean') {\n                            var deferred = $q.defer();\n                            if (result) {\n                                deferred.resolve();\n                            } else {\n                                deferred.reject();\n                            }\n                            promise = deferred.promise;\n                        } else {\n                            promise = $q.when(result);\n                        }\n                        return promise;\n                    }\n\n                    editScope.saveDialog = function() {\n                        // clear validation error\n                        editScope.validationError = null;\n\n                        // build injection locals\n                        var widget = $scope.widget;\n\n                        // create a default apply method for widgets\n                        // without edit mode\n                        // see issue https://goo.gl/KHPQLZ\n                        var applyFn;\n                        if (widget.edit) {\n                            applyFn = widget.edit.apply;\n                        } else {\n                            applyFn = function() {\n                                return true;\n                            };\n                        }\n\n                        // injection locals\n                        var locals = {\n                            widget: widget,\n                            definition: editScope.definition,\n                            config: editScope.definition.config\n                        };\n\n                        // invoke apply function and apply if success\n                        var result = $injector.invoke(applyFn, applyFn, locals);\n                        createApplyPromise(result).then(function() {\n                            definition.title = editScope.definition.title;\n                            angular.extend(definition.config, editScope.definition.config);\n                            if (widget.edit && widget.edit.reload) {\n                                // reload content after edit dialog is closed\n                                $scope.$broadcast('widgetConfigChanged');\n                            }\n                            editScope.closeDialog();\n                        }, function(err) {\n                            if (err) {\n                                editScope.validationError = err;\n                            } else {\n                                editScope.validationError = 'Validation durring apply failed';\n                            }\n                        });\n                    };\n\n                };\n\n            } else {\n                $log.debug('widget not found');\n            }\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            templateUrl: dashboard.customWidgetTemplatePath ? dashboard.customWidgetTemplatePath : adfTemplatePath + 'widget.html',\n            scope: {\n                definition: '=',\n                col: '=column',\n                editMode: '=',\n                options: '=',\n                widgetState: '='\n            },\n            controller: function($scope) {\n\n                var adfDashboardCollapseExpand = $scope.$on('adfDashboardCollapseExpand', function(event, args) {\n                    $scope.widgetState.isCollapsed = args.collapseExpandStatus;\n                });\n\n                var adfWidgetEnterEditMode = $scope.$on('adfWidgetEnterEditMode', function(event, widget) {\n                    if (dashboard.idEquals($scope.definition.wid, widget.wid)) {\n                        $scope.edit();\n                    }\n                });\n\n                var adfIsEditMode = $scope.$on('adfIsEditMode', function(event, widget) {\n                    $scope.editing = true;\n                });\n\n                var adfDashboardChanged = $scope.$on('adfDashboardChanged', function(event, widget) {\n                    $scope.editing = false;\n                });\n\n                var adfDashboardEditsCancelled = $scope.$on('adfDashboardEditsCancelled', function(event, widget) {\n                    $scope.editing = false;\n                });\n\n                $scope.$on('$destroy', function() {\n                    adfDashboardCollapseExpand();\n                    adfWidgetEnterEditMode();\n                    adfIsEditMode();\n                    adfDashboardChanged();\n                    adfDashboardEditsCancelled();\n                });\n\n                $scope.widgetClasses = function(w, definition) {\n                    var classes = definition.styleClass || '';\n                    // w is undefined, if the type of the widget is unknown\n                    // see issue #216\n                    if (!w || !w.frameless || $scope.editMode) {\n                        classes += ' panel panel-default';\n                    }\n                    return classes;\n                };\n\n                $scope.openFullScreen = function() {\n                    var definition = $scope.definition;\n                    var fullScreenScope = $scope.$new();\n                    var opts = {\n                        scope: fullScreenScope,\n                        templateUrl: adfTemplatePath + 'widget-fullscreen.html',\n                        size: definition.modalSize || 'lg', // 'sm', 'lg'\n                        backdrop: 'static',\n                        windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n                    };\n\n                    var instance = $uibModal.open(opts);\n                    fullScreenScope.closeDialog = function() {\n                        instance.close();\n                        fullScreenScope.$destroy();\n                    };\n                };\n\n                $scope.openFilter = function() {\n\n                }\n\n                $scope.openAboutScreen = function(size) {\n                    size = 'md';\n                    var modalInstance = $uibModal.open({\n                        animation: true,\n                        templateUrl: 'widgetAboutModal.html',\n                        controller: function($scope, $uibModalInstance, information) {\n                            $scope.about = {};\n                            $scope.about.info = information;\n                            $scope.ok = function() {\n                                $uibModalInstance.close();\n                            };\n                        },\n                        'size': size,\n                        resolve: {\n                            information: function() {\n                                return $scope.config.about;\n                            }\n                        }\n                    });\n\n                    modalInstance.result.then(function(selectedItem) {\n                        $scope.selected = selectedItem;\n                    }, function() {\n                        $log.info('Modal dismissed at: ' + new Date());\n                    });\n                };\n\n                $scope.saveWidgetScreen = function(wId) {\n                    $scope.$emit('generateSnapshot', {\n                        'objectSelector': '.widget_' + wId,\n                        'fileName': 'capture_' + new Date().getTime()\n                    });\n                };\n            },\n            compile: function() {\n\n                /**\n                 * use pre link, because link of widget-content\n                 * is executed before post link widget\n                 */\n                return {\n                    pre: preLink,\n                    post: postLink\n                };\n            }\n        };\n\n    });",null,"(function(window, undefined) {'use strict';\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf', ['adf.provider', 'adf.locale', 'ui.bootstrap', 'opengate-angular-js'])\n    .value('adfTemplatePath', '../src/templates/')\n    .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\n    .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\n    .value('adfVersion', '2.4.0');\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf.locale', [])\n\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardColumn', function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\n    \n\n    /**\n     * moves a widget in between a column\n     */\n    function moveWidgetInColumn($scope, column, evt){\n      var widgets = column.widgets;\n      // move widget and apply to scope\n      $scope.$apply(function(){\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\n      });\n    }\n\n    /**\n     * finds a widget by its id in the column\n     */\n    function findWidget(column, index){\n      var widget = null;\n      for (var i=0; i<column.widgets.length; i++){\n        var w = column.widgets[i];\n        if (dashboard.idEquals(w.wid,index)){\n          widget = w;\n          break;\n        }\n      }\n      return widget;\n    }\n\n    /**\n     * finds a column by its id in the model\n     */\n    function findColumn(model, index){\n      var column = null;\n      for (var i=0; i<model.rows.length; i++){\n        var r = model.rows[i];\n        for (var j=0; j<r.columns.length; j++){\n          var c = r.columns[j];\n          if (dashboard.idEquals(c.cid, index)){\n            column = c;\n            break;\n          } else if (c.rows){\n            column = findColumn(c, index);\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * get the adf id from an html element\n     */\n    function getId(el){\n      var id = el.getAttribute('adf-id');\n      return id ? id : '-1';\n    }\n\n    /**\n     * adds a widget to a column\n     */\n    function addWidgetToColumn($scope, model, targetColumn, evt){\n      // find source column\n      var cid = getId(evt.from);\n      var sourceColumn = findColumn(model, cid);\n\n      if (sourceColumn){\n        // find moved widget\n        var wid = getId(evt.item);\n        var widget = findWidget(sourceColumn, wid);\n\n        if (widget){\n          // add new item and apply to scope\n          $scope.$apply(function(){\n            if (!targetColumn.widgets) {\n              targetColumn.widgets = [];\n            }\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\n\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\n          });\n        } else {\n          $log.warn('could not find widget with id ' + wid);\n        }\n      } else {\n        $log.warn('could not find column with id ' + cid);\n      }\n    }\n\n    /**\n     * removes a widget from a column\n     */\n    function removeWidgetFromColumn($scope, column, evt){\n      // remove old item and apply to scope\n      $scope.$apply(function(){\n        column.widgets.splice(evt.oldIndex, 1);\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n      });\n    }\n\n    /**\n     * enable sortable\n     */\n    function applySortable($scope, $element, model, column){\n      // enable drag and drop\n      var el = $element[0];\n      var sortable = Sortable.create(el, {\n        group: 'widgets',\n        handle: '.adf-move',\n        ghostClass: 'placeholder',\n        animation: 150,\n        onAdd: function(evt){\n          addWidgetToColumn($scope, model, column, evt);\n        },\n        onRemove: function(evt){\n          removeWidgetFromColumn($scope, column, evt);\n        },\n        onUpdate: function(evt){\n          moveWidgetInColumn($scope, column, evt);\n        }\n      });\n\n      // destroy sortable on column destroy event\n      $element.on('$destroy', function () {\n        // check sortable element, before calling destroy\n        // see https://github.com/sdorra/angular-dashboard-framework/issues/118\n        if (sortable.el){\n          sortable.destroy();\n        }\n      });\n    }\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        column: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        adfModel: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\n      link: function ($scope, $element) {\n        // set id\n        var col = $scope.column;\n        if (!col.cid){\n          col.cid = dashboard.id();\n        }\n\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\n          $compile(rowTemplate)($scope, function(cloned) {\n            $element.append(cloned);\n          });\n        } else {\n          // enable drag and drop for widget only columns\n          applySortable($scope, $element, $scope.adfModel, col);\n        }\n      }\n    };\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @ngdoc directive\n * @name adf.directive:adfDashboard\n * @element div\n * @restrict EA\n * @scope\n * @description\n *\n * `adfDashboard` is a directive which renders the dashboard with all its\n * components. The directive requires a name attribute. The name of the\n * dashboard can be used to store the model.\n *\n * @param {string} name name of the dashboard. This attribute is required.\n * @param {boolean=} editable false to disable the editmode of the dashboard.\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\n * @param {string=} structure the default structure of the dashboard.\n * @param {object=} adfModel model object of the dashboard.\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\n *                   events during edit mode not reset it if edit mode is exited.\n * @param {boolean=} categories enable categories for the add widget dialog.\n */\n\nangular.module('adf')\n    .directive('adfDashboard', function($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath, $faIcons) {\n        \n\n        function stringToBoolean(string) {\n            switch (angular.isDefined(string) ? string.toLowerCase() : null) {\n                case 'true':\n                case 'yes':\n                case '1':\n                    return true;\n                case 'false':\n                case 'no':\n                case '0':\n                case null:\n                    return false;\n                default:\n                    return Boolean(string);\n            }\n        }\n\n        function copyWidgets(source, target) {\n            if (source.widgets && source.widgets.length > 0) {\n                var w = source.widgets.shift();\n                while (w) {\n                    target.widgets.push(w);\n                    w = source.widgets.shift();\n                }\n            }\n        }\n\n        /**\n         * Copy widget from old columns to the new model\n         * @param object root the model\n         * @param array of columns\n         * @param counter\n         */\n        function fillStructure(root, columns, counter) {\n            counter = counter || 0;\n\n            if (angular.isDefined(root.rows)) {\n                angular.forEach(root.rows, function(row) {\n                    angular.forEach(row.columns, function(column) {\n                        // if the widgets prop doesn't exist, create a new array for it.\n                        // this allows ui.sortable to do it's thing without error\n                        if (!column.widgets) {\n                            column.widgets = [];\n                        }\n\n                        // if a column exist at the counter index, copy over the column\n                        if (angular.isDefined(columns[counter])) {\n                            // do not add widgets to a column, which uses nested rows\n                            if (angular.isUndefined(column.rows)) {\n                                copyWidgets(columns[counter], column);\n                                counter++;\n                            }\n                        }\n\n                        // run fillStructure again for any sub rows/columns\n                        counter = fillStructure(column, columns, counter);\n                    });\n                });\n            }\n            return counter;\n        }\n\n        /**\n         * Read Columns: recursively searches an object for the 'columns' property\n         * @param object model\n         * @param array  an array of existing columns; used when recursion happens\n         */\n        function readColumns(root, columns) {\n            columns = columns || [];\n\n            if (angular.isDefined(root.rows)) {\n                angular.forEach(root.rows, function(row) {\n                    angular.forEach(row.columns, function(col) {\n                        columns.push(col);\n                        // keep reading columns until we can't any more\n                        readColumns(col, columns);\n                    });\n                });\n            }\n\n            return columns;\n        }\n\n        function changeStructure(model, structure) {\n            var columns = readColumns(model);\n            var counter = 0;\n\n            model.rows = angular.copy(structure.rows);\n\n            while (counter < columns.length) {\n                counter = fillStructure(model, columns, counter);\n            }\n        }\n\n        function createConfiguration(type) {\n            var cfg = {};\n            var config = dashboard.widgets[type].config;\n            if (config) {\n                cfg = angular.copy(config);\n            }\n            return cfg;\n        }\n\n        function createWidget(type) {\n            var wdgt = {};\n            var widget = dashboard.widgets[type];\n            if (widget) {\n                wdgt = angular.copy(widget);\n            }\n            return wdgt;\n        }\n\n        /**\n         * Find first widget column in model.\n         *\n         * @param dashboard model\n         */\n        function findFirstWidgetColumn(model) {\n            var column = null;\n            if (!angular.isArray(model.rows)) {\n                $log.error('model does not have any rows');\n                return null;\n            }\n            for (var i = 0; i < model.rows.length; i++) {\n                var row = model.rows[i];\n                if (angular.isArray(row.columns)) {\n                    for (var j = 0; j < row.columns.length; j++) {\n                        var col = row.columns[j];\n                        if (!col.rows) {\n                            column = col;\n                            break;\n                        }\n                    }\n                }\n                if (column) {\n                    break;\n                }\n            }\n            return column;\n        }\n\n        /**\n         * Adds the widget to first column of the model.\n         *\n         * @param dashboard model\n         * @param widget to add to model\n         * @param name name of the dashboard\n         */\n        function addNewWidgetToModel(model, widget, name, forceToSave) {\n            if (model) {\n                var column = findFirstWidgetColumn(model);\n                if (column) {\n                    if (!column.widgets) {\n                        column.widgets = [];\n                    }\n                    column.widgets.unshift(widget);\n\n                    // broadcast added event\n                    $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\n\n                    if (forceToSave) {\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\n                    }\n                } else {\n                    $log.error('could not find first widget column');\n                }\n            } else {\n                $log.error('model is undefined');\n            }\n        }\n\n        /**\n         * Checks if the edit mode of the widget should be opened immediately.\n         *\n         * @param widget type\n         */\n        function isEditModeImmediate(type) {\n            var widget = dashboard.widgets[type];\n            return widget && widget.edit && widget.edit.immediate;\n        }\n\n        /**\n         * Opens the edit mode of the specified widget.\n         *\n         * @param dashboard scope\n         * @param widget\n         */\n        function openEditMode($scope, widget) {\n            // wait some time before fire enter edit mode event\n            $timeout(function() {\n                $scope.$broadcast('adfWidgetEnterEditMode', widget);\n            }, 200);\n        }\n\n        /**\n         * Splits an object into an array multiple objects inside.\n         *\n         * @param object source object\n         * @param size size of array\n         *\n         * @return array of splitted objects\n         */\n        function split(object, size) {\n            var arr = [];\n            var i = 0;\n            angular.forEach(object, function(value, key) {\n                var index = i++ % size;\n                if (!arr[index]) {\n                    arr[index] = {};\n                }\n                arr[index][key] = value;\n            });\n            return arr;\n        }\n\n        /**\n         * Creates object with the category name as key and an array of widgets as value.\n         *\n         * @param widgets array of widgets\n         *\n         * @return array of categories\n         */\n        function createCategories(widgets) {\n            var categories = {};\n            angular.forEach(widgets, function(widget, key) {\n                var category = widget.category;\n                // if the widget has no category use a default one\n                if (!category) {\n                    category = 'Miscellaneous';\n                }\n                // push widget to category array\n                if (angular.isUndefined(categories[category])) {\n                    categories[category] = { widgets: {} };\n                }\n                categories[category].widgets[key] = widget;\n            });\n            return categories;\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            scope: {\n                structure: '@',\n                name: '@',\n                collapsible: '@',\n                editable: '@',\n                editMode: '@',\n                continuousEditMode: '=',\n                maximizable: '@',\n                adfModel: '=',\n                adfWidgetFilter: '=',\n                categories: '@',\n                hideButtons: '='\n            },\n            controller: function($scope) {\n                var model = {};\n                var structure = {};\n                var widgetFilter = null;\n                var structureName = {};\n                var name = $scope.name;\n\n                // Watching for changes on adfModel\n                $scope.$watch('adfModel', function(oldVal, newVal) {\n                    // has model changed or is the model attribute not set\n                    if (newVal !== null || (oldVal === null && newVal === null)) {\n                        model = $scope.adfModel;\n                        widgetFilter = $scope.adfWidgetFilter;\n                        if (!model || !model.rows) {\n                            structureName = $scope.structure;\n                            structure = dashboard.structures[structureName];\n                            if (structure) {\n                                if (model) {\n                                    model.rows = angular.copy(structure).rows;\n                                } else {\n                                    model = angular.copy(structure);\n                                }\n                                model.structure = structureName;\n                            } else {\n                                $log.error('could not find structure ' + structureName);\n                            }\n                        }\n\n                        if (model) {\n                            if (!model.title) {\n                                model.title = 'Empty Dashboard';\n                            }\n                            if (!model.titleTemplateUrl) {\n                                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\n                            }\n                            $scope.model = model;\n                        } else {\n                            $log.error('could not find or create model');\n                        }\n                    }\n                }, true);\n\n                // edit mode\n                $scope.editMode = false;\n                $scope.editClass = '';\n\n                //passs translate function from dashboard so we can translate labels inside html templates\n                $scope.translate = dashboard.translate;\n\n                function getNewModalScope() {\n                    var scope = $scope.$new();\n                    //pass translate function to the new scope so we can translate the labels inside the modal dialog\n                    scope.translate = dashboard.translate;\n                    return scope;\n                }\n\n                $scope.deleteDashboard = function() {\n                    var dashData = {\n                        id: model.id,\n                        name: model.title\n                    };\n\n                    $rootScope.$broadcast('dashboardDelete', dashData);\n                };\n\n                $scope.toggleEditMode = function(openConfigWindow) {\n                    $scope.editMode = !$scope.editMode;\n                    if ($scope.editMode) {\n                        if (!$scope.continuousEditMode) {\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\n                            $rootScope.$broadcast('adfIsEditMode');\n                        }\n\n                        if (openConfigWindow) {\n                            $scope.editDashboardDialog();\n                        }\n                    }\n\n                    if (!$scope.editMode) {\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\n                    }\n                };\n\n                $scope.saveTemporalDashboard = function() {\n                    delete model.temporal;\n                    $rootScope.$broadcast('adfDashboardChanged', name, model);\n                };\n\n                var adfToggleEditMode = $scope.$on('adfToggleEditMode', function(event, isNewDashboard) {\n                    if (isNewDashboard) {\n                        $scope.toggleEditMode(true);\n                    } else {\n                        $scope.toggleEditMode();\n                    }\n                });\n\n                var adfCancelEditMode = $scope.$on('adfCancelEditMode', function(event, isNewDashboard) {\n                    if ($scope.editMode) {\n                        $scope.cancelEditMode();\n                    }\n                });\n\n                $scope.collapseAll = function(collapseExpandStatus) {\n                    $rootScope.$broadcast('adfDashboardCollapseExpand', { collapseExpandStatus: collapseExpandStatus });\n                };\n\n                $scope.cancelEditMode = function() {\n                    $scope.editMode = false;\n                    if (!$scope.continuousEditMode && ($scope.modelCopy !== $scope.adfModel)) {\n                        $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\n                    }\n                    $rootScope.$broadcast('adfDashboardEditsCancelled');\n                };\n\n                var adfEditDashboardDialog = $scope.$on('adfEditDashboardDialog', function(event, isNewDashboard) {\n                    if ($scope.editMode) {\n                        $scope.editDashboardDialog();\n                    }\n                });\n\n                var adfLaunchSearchingFromWidget = $scope.$on('adfLaunchSearchingFromWidget', function(event, widget, configFilter) {\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\n                });\n                var adfWindowTimeChangedFromWidget = $scope.$on('adfWindowTimeChangedFromWidget', function(event, widget, windowFilter) {\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\n                });\n\n                // edit dashboard settings\n                $scope.editDashboardDialog = function() {\n                    var editDashboardScope = getNewModalScope();\n                    // create a copy of the title, to avoid changing the title to\n                    // \"dashboard\" if the field is empty\n                    editDashboardScope.copy = {\n                        title: (model.title !== 'Empty Dashboard' ? model.title : ''),\n                        description: model.description,\n                        icon: 'fa-tachometer'\n                    };\n\n                    // pass icon list\n                    editDashboardScope.availableIcons = $faIcons.list();\n                    editDashboardScope.tempIcon = {\n                        selected: editDashboardScope.copy.icon\n                    };\n                    // pass dashboard structure to scope\n                    editDashboardScope.structures = dashboard.structures;\n\n                    // pass split function to scope, to be able to display structures in multiple columns\n                    editDashboardScope.split = split;\n\n                    var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\n                    if (model.editTemplateUrl) {\n                        adfEditTemplatePath = model.editTemplateUrl;\n                    }\n                    var instance = $uibModal.open({\n                        scope: editDashboardScope,\n                        templateUrl: adfEditTemplatePath,\n                        backdrop: 'static',\n                        keyboard: false,\n                        size: 'lg'\n                    });\n\n                    editDashboardScope.selectIcon = function(icon) {\n                        if (icon) {\n                            editDashboardScope.copy.icon = icon;\n                        } else {\n                            editDashboardScope.copy.icon = undefined;\n                        }\n                    };\n\n                    editDashboardScope.changeStructure = function(name, structure) {\n                        $log.info('change structure to ' + name);\n                        changeStructure(model, structure);\n                        if (model.structure !== name) {\n                            model.structure = name;\n                        }\n                    };\n                    editDashboardScope.closeDialog = function() {\n                        // copy the new title back to the model\n                        model.title = editDashboardScope.copy.title;\n                        model.description = editDashboardScope.copy.description;\n                        model.icon = editDashboardScope.copy.icon;\n\n                        // close modal and destroy the scope\n                        instance.close();\n                        editDashboardScope.$destroy();\n                    };\n                };\n\n                var adfOpenWidgetFromOther = $scope.$on('adfOpenWidgetFromOther', function(event, widget, config) {\n                    var internal_config = createConfiguration(widget);\n                    var _config = angular.merge({}, internal_config, config);\n                    var w = {\n                        type: widget,\n                        config: _config,\n                        title: _config.title\n                    };\n                    addNewWidgetToModel(model, w, name, !$scope.editMode);\n                });\n\n                var adfOpenModalWidgetFromOther = $scope.$on('adfOpenModalWidgetFromOther', function(event, widgetType, config) {\n                    var widget = createWidget(widgetType);\n                    widget.config = angular.merge({}, widget.config, config);\n                    widget.type = widgetType;\n                    if (widget.config.title) {\n                        widget.title = widget.config.title;\n                    }\n                    var fullScreenScope = $scope.$new();\n                    fullScreenScope.definition = fullScreenScope.widget = widget;\n                    var opts = {\n                        scope: fullScreenScope,\n                        templateUrl: adfTemplatePath + 'widget-fullscreen.html',\n                        size: fullScreenScope.definition.modalSize || 'lg', // 'sm', 'lg'\n                        backdrop: 'static',\n                        windowClass: (fullScreenScope.definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n                    };\n\n                    fullScreenScope.persistDashboard = function() {\n                        $rootScope.$broadcast('adfOpenWidgetFromOther', this.$parent.widget.type, this.$parent.widget.config);\n                        this.closeDialog();\n                    }\n\n                    var instance = $uibModal.open(opts);\n                    fullScreenScope.closeDialog = function() {\n                        instance.close();\n                        fullScreenScope.$destroy();\n                    };\n\n                });\n\n                var adfAddWidgetDialog = $scope.$on('adfAddWidgetDialog', function(event, isNewDashboard) {\n                    if (!model.temporal && model.editable) {\n                        if (!$scope.editMode) {\n                            $scope.editMode = true;\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\n                            $rootScope.$broadcast('adfIsEditMode');\n                        }\n\n                        $scope.addWidgetDialog();\n                    }\n                });\n\n                // add widget dialog\n                $scope.addWidgetDialog = function() {\n                    var addScope = getNewModalScope();\n                    var widgets;\n                    if (angular.isFunction(widgetFilter)) {\n                        widgets = {};\n                        angular.forEach(dashboard.widgets, function(widget, type) {\n                            if (widgetFilter(widget, type, model)) {\n                                widgets[type] = widget;\n                            }\n                        });\n                    } else {\n                        widgets = dashboard.widgets;\n                    }\n                    addScope.widgets = widgets;\n\n                    //pass translate function to the new scope so we can translate the labels inside the modal dialog\n                    addScope.translate = $scope.translate;\n\n                    // pass createCategories function to scope, if categories option is enabled\n                    if ($scope.options.categories) {\n                        $scope.createCategories = createCategories;\n                    }\n\n                    var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\n                    if (model.addTemplateUrl) {\n                        adfAddTemplatePath = model.addTemplateUrl;\n                    }\n\n                    var opts = {\n                        scope: addScope,\n                        templateUrl: adfAddTemplatePath,\n                        backdrop: 'static'\n                    };\n\n                    var instance = $uibModal.open(opts);\n                    addScope.addWidget = function(widget) {\n                        var w = {\n                            type: widget,\n                            config: createConfiguration(widget)\n                        };\n                        addNewWidgetToModel(model, w, name);\n                        // close and destroy\n                        instance.close();\n                        addScope.$destroy();\n\n                        // check for open edit mode immediately\n                        if (isEditModeImmediate(widget)) {\n                            openEditMode($scope, w);\n                        }\n                    };\n                    addScope.closeDialog = function() {\n                        // close and destroy\n                        instance.close();\n                        addScope.$destroy();\n                    };\n                };\n\n                $scope.addNewWidgetToModel = addNewWidgetToModel;\n\n                $scope.$on('destroy', function() {\n                    adfLaunchSearchingFromWidget();\n                    adfWindowTimeChangedFromWidget();\n                    adfToggleEditMode();\n                    adfOpenWidgetFromOther();\n                    adfOpenModalWidgetFromOther();\n                    adfCancelEditMode();\n                    adfAddWidgetDialog();\n                    adfEditDashboardDialog();\n                });\n            },\n            link: function($scope, $element, $attr) {\n                // pass options to scope\n                var options = {\n                    name: $attr.name,\n                    editable: true,\n                    enableConfirmDelete: stringToBoolean($attr.enableConfirmDelete),\n                    maximizable: stringToBoolean($attr.maximizable),\n                    collapsible: stringToBoolean($attr.collapsible),\n                    categories: stringToBoolean($attr.categories)\n                };\n                if (angular.isDefined($attr.editable)) {\n                    options.editable = stringToBoolean($attr.editable);\n                }\n                $scope.options = options;\n            },\n            templateUrl: adfTemplatePath + 'dashboard.html'\n        };\n    });\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\n/**\n * @ngdoc object\n * @name adf.locale#adfLocale\n * @description\n *\n * Holds settings and values for framework supported locales\n */\nangular.module('adf.locale')\n    .constant('adfLocale', {\n        defaultLocale: 'en-GB',\n        frameworkLocales: {\n            'en-GB': {\n                ADF_COMMON_CLOSE: 'Close',\n                ADF_COMMON_DELETE: 'Delete',\n                ADF_COMMON_TITLE: 'Title',\n                ADF_COMMON_DESCRIPTION: 'Description',\n                ADF_COMMON_CANCEL: 'Cancel',\n                ADF_COMMON_APPLY: 'Apply',\n                ADF_COMMON_EDIT_DASHBOARD: 'Edit dashboard',\n                ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Structure',\n                ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Add new widget',\n                ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Save changes',\n                ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Enable edit mode',\n                ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Undo changes',\n                ADF_WIDGET_ADD_HEADER: 'Add new widget',\n                ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Are you sure you want to delete this widget ?',\n                ADF_WIDGET_TOOLTIP_REFRESH: 'Reload widget Content',\n                ADF_WIDGET_TOOLTIP_PRINT: 'Print widget Content',\n                ADF_WIDGET_TOOLTIP_FILTER: 'Show widget Filter',\n                ADF_WIDGET_TOOLTIP_SORT: 'Show widget Sort',\n                ADF_WIDGET_TOOLTIP_MOVE: 'Change widget location',\n                ADF_WIDGET_TOOLTIP_COLLAPSE: 'Collapse widget',\n                ADF_WIDGET_TOOLTIP_EXPAND: 'Expand widget',\n                ADF_WIDGET_TOOLTIP_EDIT: 'Edit widget configuration',\n                ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Fullscreen widget',\n                ADF_WIDGET_TOOLTIP_REMOVE: 'Remove widget',\n                ADF_WIDGET_TOOLTIP_OPERATION: 'Execute operation'\n            },\n            'sv-SE': {\n                ADF_COMMON_CLOSE: 'Stäng',\n                ADF_COMMON_DELETE: 'Ta bort',\n                ADF_COMMON_TITLE: 'Titel',\n                ADF_COMMON_DESCRIPTION: 'Description',\n                ADF_COMMON_CANCEL: 'Avbryt',\n                ADF_COMMON_APPLY: 'Använd',\n                ADF_COMMON_EDIT_DASHBOARD: 'Redigera dashboard',\n                ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Struktur',\n                ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Lägg till ny widget',\n                ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Spara förändringar',\n                ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Slå på redigeringsläge',\n                ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Ångra förändringar',\n                ADF_WIDGET_ADD_HEADER: 'Lägg till ny widget',\n                ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Är du säker på att du vill ta bort denna widget ?',\n                ADF_WIDGET_TOOLTIP_REFRESH: 'Ladda om widget',\n                ADF_WIDGET_TOOLTIP_FILTER: 'Show widget Filter',\n                ADF_WIDGET_TOOLTIP_SORT: 'Show widget Sort',\n                ADF_WIDGET_TOOLTIP_MOVE: 'Ändra widgets position',\n                ADF_WIDGET_TOOLTIP_COLLAPSE: 'Stäng widget',\n                ADF_WIDGET_TOOLTIP_EXPAND: 'Öppna widget',\n                ADF_WIDGET_TOOLTIP_EDIT: 'Ändra widget konfigurering',\n                ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Visa widget i fullskärm',\n                ADF_WIDGET_TOOLTIP_REMOVE: 'Ta bort widget',\n                ADF_WIDGET_TOOLTIP_OPERATION: 'Execute operation'\n            }\n        }\n    });\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .filter('adfOrderByObjectKey', function($filter) {\n    \n\n    return function(item, key){\n      var array = [];\n      angular.forEach(item, function(value, objectKey){\n        value[key] = objectKey;\n        array.push(value);\n      });\n      return $filter('orderBy')(array, key);\n    };\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\n/**\n * @ngdoc object\n * @name adf.dashboardProvider\n * @description\n *\n * The dashboardProvider can be used to register structures and widgets.\n */\nangular.module('adf.provider', ['adf.locale'])\n  .provider('dashboard', function(adfLocale){\n\n    var widgets = {};\n    var widgetsPath = '';\n    var structures = {};\n    var messageTemplate = '<div class=\"alert alert-danger\">{}</div>';\n    var loadingTemplate = '\\\n      <div class=\"progress progress-striped active\">\\n\\\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\n          <span class=\"sr-only\">loading ...</span>\\n\\\n        </div>\\n\\\n      </div>';\n    var customWidgetTemplatePath = null;\n\n    // default apply function of widget.edit.apply\n    var defaultApplyFunction = function(){\n      return true;\n    };\n\n    var activeLocale = adfLocale.defaultLocale;\n    var locales = adfLocale.frameworkLocales;\n\n    function getLocales() {\n      return locales;\n    }\n\n    function getActiveLocale() {\n      return activeLocale;\n    }\n\n    function translate(label) {\n      var translation = locales[activeLocale][label];\n      return translation ? translation : label;\n    }\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#widget\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new widget.\n    *\n    * @param {string} name of the widget\n    * @param {object} widget to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `title` - `{string=}` - The title of the widget.\n    *   - `description` - `{string=}` - Description of the widget.\n    *   - `category` - `{string=}` - Category of the widget.\n    *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\n    *   - `config` - `{object}` - Predefined widget configuration.\n    *   - `controller` - `{string=|function()=}` - Controller fn that should be\n    *      associated with newly created scope of the widget or the name of a\n    *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\n    *      if passed as a string.\n    *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\n    *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\n    *   - `template` - `{string=|function()=}` - html template as a string.\n    *   - `templateUrl` - `{string=}` - path to an html template.\n    *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\n    *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the widget\n    *      will wait for them all to be resolved or one to be rejected before the controller is\n    *      instantiated.\n    *      If all the promises are resolved successfully, the values of the resolved promises are\n    *      injected.\n    *\n    *      The map object is:\n    *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n    *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\n    *        and the return value is treated as the dependency. If the result is a promise, it is\n    *        resolved before its value is injected into the controller.\n    *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n    *      on the scope of the widget.\n    *   - `edit` - `{object}` - Edit modus of the widget.\n    *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\n    *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\n    *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\n    *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n    *        on the scope of the widget.\n    *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\n    *        Default is true.\n    *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\n    *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\n    *        The function have to return a boolean or an promise which can be resolved to a boolean.\n    *        The function can use injection.\n    *\n    * @returns {Object} self\n    */\n    this.widget = function(name, widget){\n      var w = angular.extend({reload: false, frameless: false}, widget);\n      if ( w.edit ){\n        var edit = {\n          reload: true,\n          immediate: false,\n          apply: defaultApplyFunction\n        };\n        angular.extend(edit, w.edit);\n        w.edit = edit;\n      }\n      widgets[name] = w;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#widgetsPath\n     * @methodOf adf.dashboardProvider\n     * @description\n     *\n     * Sets the path to the directory which contains the widgets. The widgets\n     * path is used for widgets with a templateUrl which contains the\n     * placeholder {widgetsPath}. The placeholder is replaced with the\n     * configured value, before the template is loaded, but the template is\n     * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\n     * The default value of widgetPaths is ''.\n     *\n     *\n     * @param {string} path to the directory which contains the widgets\n     *\n     * @returns {Object} self\n     */\n    this.widgetsPath = function(path){\n      widgetsPath = path;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#structure\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new structure.\n    *\n    * @param {string} name of the structure\n    * @param {object} structure to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\n    *     - `styleClass` - `{string}` - CSS Class of the row.\n    *     - `columns` - `{Array.<Object>}` - Columns of the row.\n    *       - `styleClass` - `{string}` - CSS Class of the column.\n    *\n    * @returns {Object} self\n    */\n    this.structure = function(name, structure){\n      structures[name] = structure;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#messageTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template for messages.\n    *\n    * @param {string} template for messages.\n    *\n    * @returns {Object} self\n    */\n    this.messageTemplate = function(template){\n      messageTemplate = template;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#loadingTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template which is displayed as\n    * long as the widget resources are not resolved.\n    *\n    * @param {string} template loading template\n    *\n    * @returns {Object} self\n    */\n    this.loadingTemplate = function(template){\n      loadingTemplate = template;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#customWidgetTemplatePath\n     * @propertyOf adf.dashboardProvider\n     * @description\n     *\n     * Changes the container template for the widgets\n     *\n     * @param {string} path to the custom widget template\n     *\n     * @returns {Object} self\n     */\n    this.customWidgetTemplatePath = function(templatePath) {\n      customWidgetTemplatePath = templatePath;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#setLocale\n     * @methodOf adf.dashboardProvider\n     * @description\n     *\n     * Changes the locale setting of adf\n     *\n     * @param {string} ISO Language Code\n     *\n     * @returns {Object} self\n     */\n     this.setLocale = function(locale){\n       if(locales[locale]) {\n         activeLocale = locale;\n       } else {\n         throw new Error('Cannot set locale: ' + locale + '. Locale is not defined.');\n       }\n       return this;\n     };\n\n     /**\n      * @ngdoc method\n      * @name adf.dashboardProvider#addLocale\n      * @methodOf adf.dashboardProvider\n      * @description\n      *\n      * Adds a new locale to adf\n      *\n      * @param {string} ISO Language Code for the new locale\n      * @param {object} translations for the locale.\n      *\n      * @returns {Object} self\n      */\n      this.addLocale = function(locale, translations){\n        if(!angular.isString(locale)) {\n          throw new Error('locale must be an string');\n        }\n\n        if(!angular.isObject(translations)) {\n          throw new Error('translations must be an object');\n        }\n\n        locales[locale] = translations;\n        return this;\n      };\n\n   /**\n    * @ngdoc service\n    * @name adf.dashboard\n    * @description\n    *\n    * The dashboard holds all options, structures and widgets.\n    *\n    * @property {Array.<Object>} widgets Array of registered widgets.\n    * @property {string} widgetsPath Default path for widgets.\n    * @property {Array.<Object>} structures Array of registered structures.\n    * @property {string} messageTemplate Template for messages.\n    * @property {string} loadingTemplate Template for widget loading.\n    * @property {method} sets locale of adf.\n    * @property {Array.<Object>} hold all of the locale translations.\n    * @property {string} the active locale setting.\n    * @property {method} translation function passed to templates.\n    *\n    * @returns {Object} self\n    */\n    this.$get = function(){\n      var cid = 0;\n\n      return {\n        widgets: widgets,\n        widgetsPath: widgetsPath,\n        structures: structures,\n        messageTemplate: messageTemplate,\n        loadingTemplate: loadingTemplate,\n        setLocale: this.setLocale,\n        locales: getLocales,\n        activeLocale: getActiveLocale,\n        translate: translate,\n        customWidgetTemplatePath: customWidgetTemplatePath,\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboard#id\n         * @methodOf adf.dashboard\n         * @description\n         *\n         * Creates an ongoing numeric id. The method is used to create ids for\n         * columns and widgets in the dashboard.\n         */\n        id: function(){\n          return new Date().getTime() + '-' + (++cid);\n        },\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboard#idEqual\n         * @methodOf adf.dashboard\n         * @description\n         *\n         * Checks if the given ids are equal.\n         *\n         * @param {string} id widget or column id\n         * @param {string} other widget or column id\n         */\n         idEquals: function(id, other){\n           // use toString, because old ids are numbers\n           return ((id) && (other)) && (id.toString() === other.toString());\n         }\n      };\n    };\n\n  });\n\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardRow', function ($compile, adfTemplatePath, columnTemplate) {\n    \n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        row: '=',\n        adfModel: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\n      link: function($scope, $element) {\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\n          $compile(columnTemplate)($scope, function(cloned) {\n            $element.append(cloned);\n          });\n        }\n      }\n    };\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfStructurePreview', function(adfTemplatePath) {\n\n    function adjustRowHeight(container){\n      if (container.rows && container.rows.length > 0){\n        var height = 100 / container.rows.length;\n        angular.forEach(container.rows, function(row){\n          row.style = {\n            height: height + '%'\n          }\n\n          if (row.columns){\n            angular.forEach(row.columns, function(column){\n              adjustRowHeight(column);\n            });\n          }\n        });\n      }\n    }\n\n    function prepareStructure($scope){\n      var structure = angular.copy($scope.structure);\n      adjustRowHeight(structure);\n      $scope.preview = structure;\n    }\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        name: '=',\n        structure: '=',\n        selected: '='\n      },\n      templateUrl: adfTemplatePath + 'structure-preview.html',\n      link: prepareStructure\n    };\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf')\n    .directive('adfWidgetContent', function($log, $q, widgetService,\n        $compile, $controller, $injector, dashboard) {\n\n        function renderError($element, msg) {\n            $log.warn(msg);\n            $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\n        }\n\n        function compileWidget($scope, $element, currentScope, configChanged) {\n            var model = $scope.model;\n            var content = $scope.content;\n            var editing = $scope.editing;\n\n            var newScope = currentScope;\n            if (!model) {\n                renderError($element, 'model is undefined')\n            } else if (!content) {\n                var msg = 'widget content is undefined, please have a look at your browser log';\n                renderError($element, msg);\n            } else {\n                if (newScope && newScope.menu !== undefined) { //adf-widget-browser\n                    newScope = renderWidget($scope, $element, currentScope, model, content);\n                } else {\n                    if (newScope && newScope.reloadData && !configChanged) {\n                        if (newScope.itemsPerPage !== undefined && isNaN(newScope.itemsPerPage)) {\n                            newScope = renderWidget($scope, $element, currentScope, model, content);\n                        } else {\n                            newScope.reloadData();\n                        }\n                    } else if (newScope && newScope.reloadData && newScope.needConfiguration !== undefined && !newScope.needConfiguration) {\n                        newScope.reloadData();\n                    } else {\n                        newScope = renderWidget($scope, $element, currentScope, model, content, editing);\n                    }\n                }\n            }\n\n            newScope.editing = editing ? editing : false;\n            return newScope;\n        }\n\n        function renderWidget($scope, $element, currentScope, model, content, editing) {\n            // display loading template\n            $element.html(dashboard.loadingTemplate);\n\n            // create new scope\n            var templateScope = $scope.$new();\n\n            // pass config object to scope\n            if (!model.config) {\n                model.config = {};\n            }\n\n            templateScope.config = model.config;\n            templateScope.editing = editing;\n\n            // local injections\n            var base = {\n                $scope: templateScope,\n                widget: model,\n                config: model.config\n            };\n\n            // get resolve promises from content object\n            var resolvers = {};\n            resolvers.$tpl = widgetService.getTemplate(content);\n            if (content.resolve) {\n                angular.forEach(content.resolve, function(promise, key) {\n                    if (angular.isString(promise)) {\n                        resolvers[key] = $injector.get(promise);\n                    } else {\n                        resolvers[key] = $injector.invoke(promise, promise, base);\n                    }\n                });\n            }\n\n            // resolve all resolvers\n            $q.all(resolvers).then(function(locals) {\n                angular.extend(locals, base);\n\n                // pass resolve map to template scope as defined in resolveAs\n                if (content.resolveAs) {\n                    templateScope[content.resolveAs] = locals;\n                }\n\n                // compile & render template\n                var template = locals.$tpl;\n                $element.html(template);\n                if (content.controller) {\n                    var templateCtrl = $controller(content.controller, locals);\n                    if (content.controllerAs) {\n                        templateScope[content.controllerAs] = templateCtrl;\n                    }\n                    $element.children().data('$ngControllerController', templateCtrl);\n                }\n                $compile($element.contents())(templateScope);\n            }, function(reason) {\n                // handle promise rejection\n                var msg = 'Could not resolve all promises';\n                if (reason) {\n                    msg += ': ' + reason;\n                }\n                renderError($element, msg);\n            });\n\n            // destroy old scope\n            if (currentScope) {\n                currentScope.$destroy();\n            }\n\n            return templateScope;\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            scope: {\n                model: '=',\n                content: '=',\n                editing: '='\n            },\n            link: function($scope, $element) {\n                var currentScope = compileWidget($scope, $element, null);\n                $scope.$on('widgetConfigChanged', function() {\n                    currentScope = compileWidget($scope, $element, currentScope, true);\n                });\n                $scope.$on('widgetReload', function() {\n                    currentScope = compileWidget($scope, $element, currentScope, false);\n                });\n            }\n        };\n\n    });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/**\n * The widget service provide helper functions to render widgets and their content.\n */\nangular.module('adf')\n  .factory('widgetService', function($http, $q, $sce, $templateCache, dashboard) {\n    \n\n    function parseUrl(url) {\n      var parsedUrl = url;\n      if (url.indexOf('{widgetsPath}') >= 0) {\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\n                .replace('//', '/');\n        if (parsedUrl.indexOf('/') === 0) {\n          parsedUrl = parsedUrl.substring(1);\n        }\n      }\n      return parsedUrl;\n    }\n\n    var exposed = {};\n\n    exposed.getTemplate = function(widget){\n      var deferred = $q.defer();\n\n      if (widget.template) {\n        deferred.resolve(widget.template);\n      } else if (widget.templateUrl) {\n        // try to fetch template from cache\n        var tpl = $templateCache.get(widget.templateUrl);\n        if (tpl) {\n          deferred.resolve(tpl);\n        } else {\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\n          $http.get(url)\n               .success(function(response) {\n                 // put response to cache, with unmodified url as key\n                 $templateCache.put(widget.templateUrl, response);\n                 deferred.resolve(response);\n               })\n               .error(function() {\n                 deferred.reject('could not load template');\n               });\n        }\n      }\n\n      return deferred.promise;\n    };\n\n    return exposed;\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf')\n    .directive('adfWidget', function($injector, $q, $log, $uibModal, $rootScope, $timeout, dashboard, adfTemplatePath, Filter) {\n\n        function preLink($scope) {\n            var definition = $scope.definition;\n\n            //passs translate function from dashboard so we can translate labels inside html templates\n            $scope.translate = dashboard.translate;\n\n            if (definition) {\n                var w = dashboard.widgets[definition.type];\n                if (w) {\n                    // pass title\n                    if (!definition.title) {\n                        definition.title = w.title;\n                    }\n\n                    if (!definition.titleTemplateUrl) {\n                        definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\n                        if (w.titleTemplateUrl) {\n                            definition.titleTemplateUrl = w.titleTemplateUrl;\n                        }\n                    }\n\n                    if (!definition.editTemplateUrl) {\n                        definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\n                        if (w.editTemplateUrl) {\n                            definition.editTemplateUrl = w.editTemplateUrl;\n                        }\n                    }\n\n                    if (!definition.titleTemplateUrl) {\n                        definition.frameless = w.frameless;\n                    }\n\n                    if (!definition.styleClass) {\n                        definition.styleClass = w.styleClass;\n                    }\n\n                    // set id for sortable\n                    if (!definition.wid) {\n                        definition.wid = dashboard.id();\n                    }\n\n                    // pass copy of widget to scope\n                    $scope.widget = angular.copy(w);\n\n                    // create config object\n                    var config = definition.config;\n                    if (config) {\n                        if (angular.isString(config)) {\n                            config = angular.fromJson(config);\n                        }\n                    } else {\n                        config = {};\n                    }\n\n                    if (!config.reloadPeriod) {\n                        config.reloadPeriod = \"0\";\n                    }\n\n                    // pass config to scope\n                    $scope.config = config;\n\n                    // collapse exposed $scope.widgetState property\n                    if (!$scope.widgetState) {\n                        $scope.widgetState = {};\n                        $scope.widgetState.isCollapsed = (w.collapsed === true) ? w.collapsed : false;\n                    }\n\n                } else {\n                    $log.warn('could not find widget ' + definition.type);\n                }\n            } else {\n                $log.debug('definition not specified, widget was probably removed');\n            }\n        }\n\n        function postLink($scope, $element) {\n            var definition = $scope.definition;\n            if (definition) {\n                if (!$scope.config.reloadPeriod) {\n                    $scope.config.reloadPeriod = \"0\";\n                }\n\n                // bind close function\n                var deleteWidget = function() {\n                    var column = $scope.col;\n                    if (column) {\n                        var index = column.widgets.indexOf(definition);\n                        if (index >= 0) {\n                            column.widgets.splice(index, 1);\n                        }\n                    }\n                    $element.remove();\n                    $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n                };\n\n                $scope.remove = function() {\n                    if ($scope.options.enableConfirmDelete) {\n                        var deleteScope = $scope.$new();\n                        deleteScope.translate = dashboard.translate;\n\n                        var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\n                        if (definition.deleteTemplateUrl) {\n                            deleteTemplateUrl = definition.deleteTemplateUrl;\n                        }\n                        var opts = {\n                            scope: deleteScope,\n                            templateUrl: deleteTemplateUrl,\n                            backdrop: 'static'\n                        };\n                        var instance = $uibModal.open(opts);\n\n                        deleteScope.closeDialog = function() {\n                            instance.close();\n                            deleteScope.$destroy();\n                        };\n                        deleteScope.deleteDialog = function() {\n                            deleteWidget();\n                            deleteScope.closeDialog();\n                        };\n                    } else {\n                        deleteWidget();\n                    }\n                };\n\n                var widgetTimeout = undefined;\n\n                $scope.print = function() {\n                    if (!$scope.editMode) {\n                        $scope.$broadcast('widgetPrint');\n                    }\n                }\n\n                $scope.isExecuteOperationEnabled = function() {\n                    if ($scope.config.entityKey)\n                        return true;\n                    if (typeof $scope.config.filter === \"string\") {\n                        return $scope.config.filter.length > 0;\n                    }\n                    if (typeof $scope.config.filter === \"object\") {\n                        return $scope.config.filter.value.length > 2 && $scope.config.filter.oql;\n                    }\n                    return false;\n                }\n\n                $scope.executeOperation = function() {\n                    if (!$scope.editMode) {\n                        $scope.$parent.$broadcast('widgetExecuteOperation');\n                    }\n                };\n\n                // bind reload function\n                $scope.reload = function() {\n                    $scope.$broadcast('widgetReload');\n                    if ($scope.config && $scope.config && $scope.config.reloadPeriod && $scope.config.reloadPeriod !== \"0\") {\n                        if (widgetTimeout) clearTimeout(widgetTimeout);\n                        widgetTimeout = $timeout($scope.reload, ($scope.config.reloadPeriod * 1000));\n                    }\n                };\n\n                // verificacion de periodo de refresco\n                if ($scope.config && $scope.config && $scope.config.reloadPeriod && $scope.config.reloadPeriod !== \"0\") {\n                    widgetTimeout = $timeout($scope.reload, ($scope.config.reloadPeriod * 1000));\n                }\n\n                $scope.filter = {\n                    value: \"\"\n                };\n                $scope.sort = {\n                    value: \"\",\n                    direction: \"\"\n                };\n\n                $scope.toggleAdvanced = false;\n                if (typeof $scope.config.filter === \"object\" && $scope.config.filter.oql.length > 2) {\n                    $scope.search = {\n                        oql: $scope.config.filter.oql,\n                        json: $scope.config.filter.value\n                    };\n                    $scope.toggleAdvanced = true;\n                } else if (typeof $scope.config.filter === \"string\") {\n                    $scope.search = {\n                        quick: $scope.config.filter\n                    };\n                } else {\n                    $scope.search = {\n                        quick: $scope.config.filter = \"\"\n                    };\n                }\n\n                $scope.toggleFilter = function(advanced) {\n                    $scope.toggleAdvanced = advanced;\n                };\n                $scope.filterAvailable = false;\n                $scope.showFilter = function() {\n                    $scope.filterAvailable = $scope.filterAvailable === true ? false : true;\n                };\n\n                $scope.showFinalFilter = false;\n\n                $scope.launchSearching = function() {\n                    var widget = {\n                        definition: definition,\n                        element: $element\n                    };\n\n                    $rootScope.$broadcast('adfLaunchSearchingFromWidget', widget, $scope.config.filter);\n                    $scope.reload();\n                }\n\n                $scope.launchSearchingAdv = function() {\n                    $scope.search.quick = '';\n                    $scope.config.filter = {\n                        oql: $scope.search.oql,\n                        value: $scope.search.json\n                    };\n                    if ($scope.search.json === '')\n                        $scope.config.filter = {\n                            oql: '',\n                            value: ''\n                        };\n                    $scope.launchSearching();\n\n                }\n\n                $scope.applyFilter = function(event) {\n                    $scope.launchSearching();\n                }\n\n                $scope.launchSearchingQuick = function() {\n                    $scope.search.oql = $scope.search.json = '';\n                    $scope.config.filter = $scope.search.quick;\n                    $scope.launchSearching();\n                }\n\n                var windowTimeChanged = $scope.$on('onWindowTimeChanged', function(event, timeObj) {\n                    $scope.config.windowFilter = timeObj ? timeObj : ($scope.config.windowFilter ? {} : timeObj);\n                    var widget = {\n                        definition: definition,\n                        element: $element\n                    }\n                    $rootScope.$broadcast('adfWindowTimeChangedFromWidget', widget, $scope.config.windowFilter);\n                    $scope.reload();\n                });\n\n                function _getWindowTime(type) {\n                    if (type === \"custom\") {\n                        return {\n                            from: $scope.config.windowFilter.from,\n                            to: $scope.config.windowFilter.to\n                        }\n                    }\n                    var from = window.moment().subtract(1, type);\n                    return {\n                        from: from._d\n                    };\n                }\n\n                $scope.config.getWindowTime = function() {\n                    var windowFilter = $scope.config.windowFilter;\n                    if (windowFilter && windowFilter.type) {\n                        var winTime = _getWindowTime(windowFilter.type);\n                        /* jshint ignore:start */\n                        if (!window.eval($scope.config.windowFilter.rawdate)) {\n                            for (var key in winTime) {\n                                winTime[key] = window.moment(winTime[key]).format();\n                            }\n                            winTime['rawdate'] = true;\n                        }\n                        /* jshint ignore:end */\n                        return winTime;\n                    }\n                }\n\n                $scope.enter = function(event) {\n                    var keycode = (event.keyCode ? event.keyCode : event.which);\n                    if (keycode === 13) {\n                        if ($scope.toggleAdvanced)\n                            $scope.launchSearchingAdv();\n                        else\n                            $scope.launchSearchingQuick();\n                    }\n                    if (keycode === 19) {\n                        $scope.showFinalFilter = $scope.showFinalFilter === false ? true : false;\n                    }\n                }\n\n\n                $scope.customSelectors = [];\n                $scope.getCustomSelectors = function() {\n                    $scope.config.widgetSelectors().findFields(\"\").then(function(fields) {\n                        $scope.customSelectors = fields;\n                        $scope.$apply();\n                    }).catch(function(err) {\n                        $log.error(err);\n                    });\n\n                }\n\n                $scope.changeDirection = function() {\n                    if ($scope.config.sort.direction === 'DESCENDING') {\n                        $scope.config.sort.direction = 'ASCENDING'\n                    } else if ($scope.config.sort.direction === 'ASCENDING') {\n                        $scope.config.sort.direction = 'DESCENDING'\n                    }\n                    $scope.reload();\n                }\n\n\n                $scope.debugQuery = function() {\n\n\n                    Filter.parseQuery($scope.search.oql || '')\n                        .then(function(data) {\n                            //$scope.elementos = data;\n                            $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\n                            $scope.unknownWords = '';\n                            $scope.filter.error = null;\n                        })\n                        .catch(function(err) {\n                            $scope.filter.error = err;\n                            // Tratar el error\n                        });\n\n                }\n\n                $scope.autocomplete_options = function() {\n                    var autocomplete_options = {\n                        suggest: Filter.suggest_field_delimited,\n                        customSelectors: $scope.config.widgetSelectors()\n                    };\n\n                    return autocomplete_options;\n\n                };\n\n                // bind edit function\n                $scope.edit = function() {\n                    var editScope = $scope.$new();\n                    editScope.translate = dashboard.translate;\n                    editScope.definition = angular.copy(definition);\n\n                    var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\n                    if (definition.editTemplateUrl) {\n                        adfEditTemplatePath = definition.editTemplateUrl;\n                    }\n\n                    var opts = {\n                        scope: editScope,\n                        templateUrl: adfEditTemplatePath,\n                        backdrop: 'static',\n                        size: 'lg'\n                    };\n\n                    var instance = $uibModal.open(opts);\n\n                    editScope.closeDialog = function() {\n                        instance.close();\n                        editScope.$destroy();\n                    };\n\n                    // TODO create util method\n                    function createApplyPromise(result) {\n                        var promise;\n                        if (typeof result === 'boolean') {\n                            var deferred = $q.defer();\n                            if (result) {\n                                deferred.resolve();\n                            } else {\n                                deferred.reject();\n                            }\n                            promise = deferred.promise;\n                        } else {\n                            promise = $q.when(result);\n                        }\n                        return promise;\n                    }\n\n                    editScope.saveDialog = function() {\n                        // clear validation error\n                        editScope.validationError = null;\n\n                        // build injection locals\n                        var widget = $scope.widget;\n\n                        // create a default apply method for widgets\n                        // without edit mode\n                        // see issue https://goo.gl/KHPQLZ\n                        var applyFn;\n                        if (widget.edit) {\n                            applyFn = widget.edit.apply;\n                        } else {\n                            applyFn = function() {\n                                return true;\n                            };\n                        }\n\n                        // injection locals\n                        var locals = {\n                            widget: widget,\n                            definition: editScope.definition,\n                            config: editScope.definition.config\n                        };\n\n                        // invoke apply function and apply if success\n                        var result = $injector.invoke(applyFn, applyFn, locals);\n                        createApplyPromise(result).then(function() {\n                            definition.title = editScope.definition.title;\n                            angular.extend(definition.config, editScope.definition.config);\n                            if (widget.edit && widget.edit.reload) {\n                                // reload content after edit dialog is closed\n                                $scope.$broadcast('widgetConfigChanged');\n                            }\n                            editScope.closeDialog();\n                        }, function(err) {\n                            if (err) {\n                                editScope.validationError = err;\n                            } else {\n                                editScope.validationError = 'Validation durring apply failed';\n                            }\n                        });\n                    };\n\n                };\n\n            } else {\n                $log.debug('widget not found');\n            }\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            templateUrl: dashboard.customWidgetTemplatePath ? dashboard.customWidgetTemplatePath : adfTemplatePath + 'widget.html',\n            scope: {\n                definition: '=',\n                col: '=column',\n                editMode: '=',\n                options: '=',\n                widgetState: '='\n            },\n            controller: function($scope) {\n\n                var adfDashboardCollapseExpand = $scope.$on('adfDashboardCollapseExpand', function(event, args) {\n                    $scope.widgetState.isCollapsed = args.collapseExpandStatus;\n                });\n\n                var adfWidgetEnterEditMode = $scope.$on('adfWidgetEnterEditMode', function(event, widget) {\n                    if (dashboard.idEquals($scope.definition.wid, widget.wid)) {\n                        $scope.edit();\n                    }\n                });\n\n                var adfIsEditMode = $scope.$on('adfIsEditMode', function(event, widget) {\n                    $scope.editing = true;\n                });\n\n                var adfDashboardChanged = $scope.$on('adfDashboardChanged', function(event, widget) {\n                    $scope.editing = false;\n                });\n\n                var adfDashboardEditsCancelled = $scope.$on('adfDashboardEditsCancelled', function(event, widget) {\n                    $scope.editing = false;\n                });\n\n                $scope.$on('$destroy', function() {\n                    adfDashboardCollapseExpand();\n                    adfWidgetEnterEditMode();\n                    adfIsEditMode();\n                    adfDashboardChanged();\n                    adfDashboardEditsCancelled();\n                });\n\n                $scope.widgetClasses = function(w, definition) {\n                    var classes = definition.styleClass || '';\n                    // w is undefined, if the type of the widget is unknown\n                    // see issue #216\n                    if (!w || !w.frameless || $scope.editMode) {\n                        classes += ' panel panel-default';\n                    }\n                    return classes;\n                };\n\n                $scope.openFullScreen = function() {\n                    var definition = $scope.definition;\n                    var fullScreenScope = $scope.$new();\n                    var opts = {\n                        scope: fullScreenScope,\n                        templateUrl: adfTemplatePath + 'widget-fullscreen.html',\n                        size: definition.modalSize || 'lg', // 'sm', 'lg'\n                        backdrop: 'static',\n                        windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n                    };\n\n                    var instance = $uibModal.open(opts);\n                    fullScreenScope.closeDialog = function() {\n                        instance.close();\n                        fullScreenScope.$destroy();\n                    };\n                };\n\n                $scope.openFilter = function() {\n\n                }\n\n                $scope.openAboutScreen = function(size) {\n                    size = 'md';\n                    var modalInstance = $uibModal.open({\n                        animation: true,\n                        templateUrl: 'widgetAboutModal.html',\n                        controller: function($scope, $uibModalInstance, information) {\n                            $scope.about = {};\n                            $scope.about.info = information;\n                            $scope.ok = function() {\n                                $uibModalInstance.close();\n                            };\n                        },\n                        'size': size,\n                        resolve: {\n                            information: function() {\n                                return $scope.config.about;\n                            }\n                        }\n                    });\n\n                    modalInstance.result.then(function(selectedItem) {\n                        $scope.selected = selectedItem;\n                    }, function() {\n                        $log.info('Modal dismissed at: ' + new Date());\n                    });\n                };\n\n                $scope.saveWidgetScreen = function(wId) {\n                    $scope.$emit('generateSnapshot', {\n                        'objectSelector': '.widget_' + wId,\n                        'fileName': 'capture_' + new Date().getTime()\n                    });\n                };\n            },\n            compile: function() {\n\n                /**\n                 * use pre link, because link of widget-content\n                 * is executed before post link widget\n                 */\n                return {\n                    pre: preLink,\n                    post: postLink\n                };\n            }\n        };\n\n    });\nangular.module(\"adf\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"../src/templates/dashboard-column.html\",\"<div adf-id={{column.cid}} class=column ng-class=column.styleClass ng-model=column.widgets> <adf-widget ng-repeat=\\\"definition in column.widgets\\\" definition=definition column=column edit-mode=editMode options=options widget-state=widgetState>  </adf-widget></div> \");\n$templateCache.put(\"../src/templates/dashboard-edit.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h3 class=modal-title ng-bind=\\\"translate(\\'ADF_COMMON_EDIT_DASHBOARD\\')\\\">Edit Dashboard</h3> </div> <div class=modal-body> <form role=form name=form novalidate> <div class=\\\"form-group col-xs-12 col-md-6\\\"> <label for=dashboardTitle ng-bind=\\\"translate(\\'ADF_COMMON_TITLE\\')\\\">Title</label> <input type=text class=\\\"form-control text-primary\\\" id=dashboardTitle ng-model=copy.title required> </div> <div class=\\\"form-group col-xs-12 col-md-6\\\"> <label for=dashboardDescription ng-bind=\\\"translate(\\'ADF_COMMON_DESCRIPTION\\')\\\">Description</label> <input type=text class=\\\"form-control text-primary\\\" id=dashboardDescription ng-model=copy.description> </div> <div class=\\\"form-group col-xs-12 col-md-6\\\"> <label for=icon>Icon</label> <ui-select tagging=tagTransform id=icon ng-model=tempIcon.selected theme=bootstrap allow-clear=false required=true on-select=selectIcon($select.selected) title=\\\"Choose icon\\\"> <ui-select-match placeholder=\\\"Choose icon\\\" allow-clear=false> <i class=\\\"fa {{$select.selected}} fa-2x\\\"></i> <span>{{$select.selected}}</span> </ui-select-match> <ui-select-choices class=oux-icon-selector repeat=\\\"iconTmp in availableIcons | filter: $select.search\\\"> <i class=\\\"fa {{ iconTmp}}\\\" title={{iconTmp}}></i> </ui-select-choices> </ui-select> </div> <div class=\\\"form-group col-xs-12\\\"> <label ng-bind=\\\"translate(\\'ADF_EDIT_DASHBOARD_STRUCTURE_LABEL\\')\\\">Structure</label> <div class=row ng-init=\\\"splitted = split(structures, 3)\\\"> <div class=col-lg-4 ng-repeat=\\\"structureColumn in splitted\\\"> <div class=radio ng-repeat=\\\"(key, structure) in structureColumn\\\"> <div class=row> <div class=col-sm-2> <label> <input type=radio value={{key}} ng-model=model.structure ng-change=\\\"changeStructure(key, structure)\\\"> </label> </div> <div class=col-sm-9 ng-click=\\\"changeStructure(key, structure)\\\"> <adf-structure-preview name=key structure=structure selected=\\\"model.structure == key\\\"> </adf-structure-preview> </div> </div> </div> </div> </div> </div> </form> </div> <div class=modal-footer> <div class=col-xs-12> <button type=submit class=\\\"btn btn-primary\\\" ng-click=closeDialog() ng-disabled=form.$invalid ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> </div> </div>\");\n$templateCache.put(\"../src/templates/dashboard-row.html\",\"<div class=row ng-class=row.styleClass ng-style=row.style>  </div> \");\n$templateCache.put(\"../src/templates/dashboard-title.html\",\"<div class=row style=padding:0px;> <div class=col-xs-12 ng-class=\\\"hideButtons?\\'col-md-12\\':\\'col-md-5\\'\\\"> <span ng-if=model.icon id=idDashboardIdcon class=\\\"fa fa-2x {{model.icon}}\\\"></span> <span id=idDashboardTitle class=\\\"fa-2x text-primary\\\">{{model.title}}</span> <span ng-if=model.description id=idDashboardDescription>{{model.description}}</span> </div> <div class=\\\"col-xs-12 col-md-7 text-right\\\" ng-if=!hideButtons> <a href ng-if=editMode title=\\\"{{ translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_ADD\\') }}\\\" ng-click=addWidgetDialog() class=\\\"btn btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-plus\\\" aria-hidden=true></i> Add widget </a> <a href ng-if=editMode title=\\\"{{ translate(\\'ADF_COMMON_EDIT_DASHBOARD\\') }}\\\" ng-click=editDashboardDialog() class=\\\"btn btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-cog\\\"></i> Configuration </a> <a href ng-if=editMode title=\\\"{{ translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_UNDO\\') }}\\\" ng-click=cancelEditMode() class=\\\"btn btn-warning btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-close\\\"></i> Cancel </a> <a href ng-if=\\\"options.editable && !editMode && !model.temporal\\\" title=\\\"{{translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE\\') }}\\\" ng-click=toggleEditMode() class=\\\"btn btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-pencil-square-o\\\"></i> Edit </a> <a href ng-if=\\\"options.editable && editMode\\\" title=\\\"{{translate(\\'ADF_DASHBOARD_TITLE_TOOLTIP_SAVE\\')}}\\\" ng-click=toggleEditMode() class=\\\"btn btn-success btn-sm pointer no-transition\\\"> <i class=\\\"fa fa-save\\\"></i> Save/Update </a> </div> </div>\");\n$templateCache.put(\"../src/templates/dashboard.html\",\"<div class=dashboard-container> <div ng-include src=model.titleTemplateUrl></div> <div class=\\\"row col-xs-12 dashboard\\\" x-ng-class=\\\"{\\'edit\\' : editMode}\\\" style=\\\"padding: 0px;margin: 0px;\\\"> <adf-dashboard-row row=row adf-model=model options=options ng-repeat=\\\"row in model.rows\\\" edit-mode=editMode continuous-edit-mode=continuousEditMode> </adf-dashboard-row></div> </div>\");\n$templateCache.put(\"../src/templates/structure-preview.html\",\"<div class=structure-preview ng-class=\\\"{selected: selected}\\\"> <h4>{{name}}</h4> <adf-dashboard-row ng-repeat=\\\"row in preview.rows\\\" row=row> </adf-dashboard-row></div> \");\n$templateCache.put(\"../src/templates/widget-add.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title ng-bind=\\\"translate(\\'ADF_WIDGET_ADD_HEADER\\')\\\">Add new widget</h4> </div> <div class=modal-body>  <div ng-if=createCategories> <uib-accordion ng-init=\\\"categorized = createCategories(widgets)\\\"> <div uib-accordion-group heading={{category.name}} ng-repeat=\\\"category in categorized | adfOrderByObjectKey: \\'name\\'\\\"> <dl class=dl-horizontal> <dt ng-repeat-start=\\\"widget in category.widgets | adfOrderByObjectKey: \\'key\\'\\\"> <a href ng-click=addWidget(widget.key) ng-class={{widget.key}}> {{widget.title}} </a> </dt> <dd ng-repeat-end ng-if=widget.description> {{widget.description}} </dd> </dl> </div> </uib-accordion> </div>  <div style=\\\"display: inline-block;\\\" ng-if=!createCategories> <dl class=dl-horizontal> <dt ng-repeat-start=\\\"widget in widgets | adfOrderByObjectKey: \\'key\\'\\\"> <a href ng-click=addWidget(widget.key) ng-class={{widget.key}}> {{widget.title}} </a> </dt> <dd ng-repeat-end ng-if=widget.description> {{widget.description}} </dd> </dl> </div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> </div> \");\n$templateCache.put(\"../src/templates/widget-delete.html\",\"<div class=modal-header> <h4 class=modal-title><span ng-bind=\\\"translate(\\'ADF_COMMON_DELETE\\')\\\">Delete</span> {{widget.title}}</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=widgetTitle ng-bind=\\\"translate(\\'ADF_WIDGET_DELETE_CONFIRM_MESSAGE\\')\\\">Are you sure you want to delete this widget ?</label> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> <button type=button class=\\\"btn btn-primary\\\" ng-click=deleteDialog() ng-bind=\\\"translate(\\'ADF_COMMON_DELETE\\')\\\">Delete</button> </div> \");\n$templateCache.put(\"../src/templates/widget-edit.html\",\"<form name=widgetEditForm novalidate role=form ng-submit=saveDialog()> <div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h3 class=modal-title>{{widget.title}}</h3> </div> <div class=modal-body> <div class=row> <div class=col-xs-12> <div class=\\\"alert alert-danger\\\" role=alert ng-show=validationError> <strong>Apply error:</strong> {{validationError}} </div> </div> </div> <div class=row> <div class=\\\"col-xs-12 col-md-6\\\"> <div class=form-group> <label for=widgetTitle ng-bind=\\\"translate(\\'ADF_COMMON_TITLE\\')\\\">Title</label> <input type=text class=\\\"form-control text-primary\\\" id=widgetTitle ng-model=definition.title placeholder=\\\"Enter title\\\"> </div> </div> <div class=\\\"col-xs-12 col-md-6\\\"> <div class=form-group> <label for=widgetReloadPeriod ng-bind=\\\"translate(\\'ADF_WIDGET_TOOLTIP_REFRESH\\')\\\">Refresh</label> <select class=form-control id=widgetReloadPeriod aria-label=\\\"ngSelected demo\\\" ng-model=definition.config.reloadPeriod required> <option ng-selected=selected value=0>MANUAL</option> <option value=20>20 SECONDS</option> <option value=40>40 SECONDS</option> <option value=60>EVERY MINUTE</option> </select> </div> </div> </div> <div ng-if=widget.edit class=row> <div class=col-xs-12> <adf-widget-content model=definition content=widget.edit> </adf-widget-content></div> </div> <div class=row> <div class=col-xs-12> <div class=form-group> <label for=widgetAbout>About</label> <textarea class=\\\"form-control text-primary\\\" id=widgetAbout ng-model=definition.config.about placeholder=\\\"Enter widget description\\\"></textarea> </div> </div> </div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CANCEL\\')\\\">Cancel</button> <button type=submit class=\\\"btn btn-primary\\\" ng-disabled=widgetEditForm.$invalid ng-value=\\\"translate(\\'ADF_COMMON_APPLY\\')\\\">Apply</button> </div> </form>\");\n$templateCache.put(\"../src/templates/widget-fullscreen.html\",\"<div class=modal-header> <div class=\\\"pull-right widget-icons\\\"> <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_REFRESH\\') }}\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a> <a href title=close ng-click=closeDialog()> <i class=\\\"glyphicon glyphicon-remove\\\"></i> </a> <a href title=\\\"insert into dashboard\\\" ng-if=persistDashboard ng-click=persistDashboard()> <i class=\\\"glyphicon glyphicon-save\\\"></i> </a> </div> <h4 class=modal-title>&nbsp;{{ definition.title }}</h4> </div> <div class=\\\"modal-body widget\\\" style=overflow:hidden;> <adf-widget-content model=definition content=widget> </adf-widget-content></div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog() ng-bind=\\\"translate(\\'ADF_COMMON_CLOSE\\')\\\">Close</button> </div>\");\n$templateCache.put(\"../src/templates/widget-title.html\",\"<div class=panel-title style=margin:0px;> <span class=pull-left> <h4 ng-if=\\\"!widget.frameless && definition.title\\\" style=margin:0px;>{{definition.title}}</h4> </span> <div class=pull-right> <span ng-if=config.about> <a href uib-popover=\\\"{{ config.about }}\\\" popover-trigger=\\\"\\'mouseenter\\'\\\" popover-placement=top ng-click=openAboutScreen()> <i class=\\\"glyphicon glyphicon-info-sign\\\"></i></a> <script type=text/ng-template id=widgetAboutModal.html> <div class=\\\"modal-header\\\"> <h4 class=\\\"modal-title\\\">About</h4> </div> <div class=\\\"modal-body\\\">{{ about.info }}</div> <div class=\\\"modal-footer\\\"><button class=\\\"btn btn-primary\\\" type=\\\"button\\\" ng-click=\\\"ok()\\\">OK</button></div> </script> </span> <a ng-if=\\\"!editMode && widget.print\\\" href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_PRINT\\') }}\\\" ng-click=print()> <i class=\\\"glyphicon glyphicon-print\\\"></i> </a> <span ng-if=\\\"!editMode && config.widgetOnToggleView && config.widgetViews\\\" uib-popover=\\\"Change view\\\" popover-trigger=\\\"\\'mouseenter\\'\\\" popover-placement=top uib-dropdown> <a href id=toggle_{{definition.wid}} uib-dropdown-toggle> <i class=\\\"glyphicon glyphicon-eye-close\\\"></i> </a> <ul class=dropdown-menu uib-dropdown-menu aria-labelledby=\\\"Change view\\\"> <li ng-repeat=\\\"choice in config.widgetViews\\\"> <a ng-click=config.widgetOnToggleView(choice.value)>{{choice.name}}</a> </li> </ul> </span> <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_REFRESH\\') }}\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_OPERATION\\') }}\\\" ng-if=\\\"widget.executeOperation && !editMode && isExecuteOperationEnabled()\\\" ng-click=executeOperation()> <i class=\\\"glyphicon glyphicon-flash\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_FILTER\\') }}\\\" ng-if=\\\"config.widgetSelectors && !editMode\\\" ng-click=showFilter()> <i class=\\\"glyphicon glyphicon-filter\\\" ng-class=\\\"{\\'active\\': search.json || search.quick}\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_SORT\\') }}\\\" ng-if=\\\"config.sort && !editMode\\\" ng-click=showFilter()> <i class=\\\"glyphicon glyphicon-sort\\\" ng-class=\\\"{\\'active\\': (config.sort.value && config.sort.value !== \\'\\')}\\\"></i> </a>  <a href title=\\\"Save picture\\\" ng-if=\\\"!editMode && !widgetState.isCollapsed\\\" ng-click=saveWidgetScreen(definition.wid)> <i class=\\\"glyphicon glyphicon-picture\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_MOVE\\') }}\\\" class=adf-move ng-if=editMode> <i class=\\\"glyphicon glyphicon-move\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_COLLAPSE\\') }}\\\" ng-show=\\\"options.collapsible && !widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-minus\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_EXPAND\\') }}\\\" ng-show=\\\"options.collapsible && widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-plus\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_EDIT\\') }}\\\" ng-click=edit() ng-if=editMode> <i class=\\\"glyphicon glyphicon-cog\\\"></i> </a> <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_FULLSCREEN\\') }}\\\" ng-click=openFullScreen() ng-show=options.maximizable> <i class=\\\"glyphicon glyphicon-fullscreen\\\"></i> </a>  <a href title=\\\"{{ translate(\\'ADF_WIDGET_TOOLTIP_REMOVE\\') }}\\\" ng-click=remove() ng-if=editMode> <i class=\\\"glyphicon glyphicon-trash\\\"></i> </a> </div> </div>\");\n$templateCache.put(\"../src/templates/widget.html\",\"<div adf-id={{definition.wid}} adf-widget-type={{definition.type}} ng-class=\\\"widgetClasses(widget, definition)\\\" class=\\\"widget widget_{{definition.wid}}\\\"> <a name={{definition.wid}} id={{definition.wid}}></a> <div class=\\\"panel-heading clearfix bg-primary\\\" ng-if=\\\"!widget.frameless || editMode\\\"> <div ng-include src=definition.titleTemplateUrl></div> </div> <div ng-if=\\\"!widgetState.isCollapsed && config.widgetSelectors && !editMode && filterAvailable\\\" class=\\\"row form-group\\\" style=\\\"margin-top: 5px !important;\\\"> <div ng-if=toggleAdvanced class=\\\"col-xs-12 col-md-8\\\"> <div class=filter mass-autocomplete> <input class=form-control style=padding-right:15px; name=filterValue ng-keypress=enter($event) ng-model=search.oql placeholder=\\\"Enter your advanced filter\\\" mass-autocomplete-item=autocomplete_options() ng-change=debugQuery()> <label ng-click=launchSearchingAdv() style=\\\"position: absolute;font-size: 1.5em;cursor:pointer;right: 15px;\\\" class=\\\"glyphicon glyphicon-search\\\"></label> </div> <div ng-if=\\\"!editMode && filter.error\\\" class=col-xs-12> <alert type=danger class=\\\"text-center text-danger\\\"> <span>{{filter.error}}</span> </alert> </div> <div ng-if=\\\"showFinalFilter && search.json\\\" class=col-xs-12> <pre>{{ search.json }}</pre> </div> </div> <div ng-if=!toggleAdvanced class=\\\"col-xs-12 col-md-8\\\"> <div class=filter> <input class=form-control style=padding-right:15px; name=filterValue ng-keypress=enter($event) ng-model=search.quick placeholder=\\\"Enter your basic filter here\\\"> <label ng-click=launchSearchingQuick() style=\\\"position: absolute;font-size: 1.5em;cursor:pointer;right: 15px;\\\" class=\\\"glyphicon glyphicon-search\\\"></label> </div> </div> <div class=\\\"col-xs-12 col-md-4\\\" uib-dropdown> <button class=\\\"btn btn-sm\\\" uib-dropdown-toggle title=\\\"Toggle Advanced/Basic filter\\\"> <i class=\\\"advanced-filter glyphicon\\\" ng-class=\\\"{\\'glyphicon-font\\' : toggleAdvanced, \\'glyphicon-bold\\' : !toggleAdvanced }\\\"></i> <span class=caret></span> </button> <ul class=\\\"dropdown-menu panel\\\" style=\\\"border: 1px groove;\\\" uib-dropdown-menu aria-labelledby=simple-dropdown> <li ng-click=toggleFilter(true)><a href><i class=\\\"advanced-filter glyphicon glyphicon-font txt-primary\\\"></i> Advanced filter</a></li> <li ng-click=toggleFilter(false)><a href><i class=\\\"basic-filter glyphicon glyphicon-bold txt-primary\\\"></i> Basic filter</a></li> </ul> </div> </div> <div ng-if=\\\"customSelectors && config.sort && filterAvailable\\\" class=\\\"row form-group\\\" style=\\\"margin-top: 5px !important;\\\"> <div class=\\\"sort col-xs-12 col-md-8\\\"> <ui-select ng-model=config.sort.value theme=bootstrap title=\\\"Choose a filter\\\" allow-clear=true append-to-body=true ng-change=launchSearching() ng-click=getCustomSelectors()> <ui-select-match placeholder=\\\"Sorted by ...\\\" allow-clear=true>Sort by: {{$select.selected}}</ui-select-match> <ui-select-choices repeat=\\\"selector in customSelectors | filter: $select.search\\\"> <small ng-bind-html=\\\"selector | highlight: $select.search\\\"></small> </ui-select-choices> </ui-select> </div> <div class=\\\"sortDirection col-xs-4 col-md-4\\\"> <button class=\\\"btn btn-sm pointer\\\" ng-click=changeDirection() ng-disabled=\\\"config.sort.value === \\'\\'\\\" title=\\\"Toggle sorting direction\\\"> <i class=glyphicon style=font-size:1.3em; ng-class=\\\"config.sort.direction===\\'ASCENDING\\' ? \\'glyphicon-sort-by-attributes\\': \\'glyphicon-sort-by-attributes-alt\\'\\\"></i> </button> </div> </div> <div ng-class=\\\"{\\'panel-body\\':!widget.frameless || editMode}\\\" uib-collapse=widgetState.isCollapsed style=overflow:hidden;> <adf-widget-content model=definition content=widget editing=editMode> </adf-widget-content></div> </div>\");}]);\n})(window);"]}