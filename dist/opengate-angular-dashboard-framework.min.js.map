{"version":3,"sources":["adf.js","column.js","dashboard.js","order-by-object-key.js","provider.js","opengate-angular-dashboard-framework.min.js","row.js","structure-preview.js","widget-content.js","widget-service.js","widget.js"],"names":["window","undefined","angular","module","value","directive","$log","$compile","$rootScope","adfTemplatePath","rowTemplate","dashboard","moveWidgetInColumn","$scope","column","evt","widgets","$apply","splice","newIndex","oldIndex","$broadcast","findWidget","index","widget","i","length","w","idEquals","wid","findColumn","model","rows","r","j","columns","c","cid","getId","el","id","getAttribute","addWidgetToColumn","targetColumn","from","sourceColumn","item","warn","removeWidgetFromColumn","applySortable","$element","sortable","Sortable","create","group","handle","ghostClass","animation","onAdd","onRemove","onUpdate","on","destroy","restrict","replace","scope","editMode","continuousEditMode","adfModel","options","templateUrl","link","col","isDefined","isArray","cloned","append","$timeout","$uibModal","$faIcons","$translate","stringToBoolean","string","toLowerCase","Boolean","copyWidgets","source","target","shift","push","fillStructure","root","counter","forEach","row","isUndefined","readColumns","changeStructure","structure","copy","createConfiguration","type","cfg","config","createWidget","wdgt","findFirstWidgetColumn","error","addNewWidgetToModel","name","forceToSave","unshift","isEditModeImmediate","edit","immediate","openEditMode","split","object","size","arr","key","createCategories","categories","category","title","instant","description","createCategoriesList","categoryTags","categoriesTmp","idx","translatedCat","indexOf","transclude","collapsible","editable","maximizable","adfWidgetFilter","hideButtons","extraData","controller","getNewModalScope","$new","widgetFilter","structureName","$watch","oldVal","newVal","structures","titleTemplateUrl","editClass","deleteDashboard","dashData","toggleEditMode","openConfigWindow","modelCopy","editDashboardDialog","saveTemporalDashboard","temporal","adfToggleEditMode","$on","event","isNewDashboard","adfCancelEditMode","cancelEditMode","collapseAll","collapseExpandStatus","adfEditDashboardDialog","adfLaunchSearchingFromWidget","configFilter","adfWindowTimeChangedFromWidget","windowFilter","editDashboardScope","icon","availableIcons","list","adfEditTemplatePath","editTemplateUrl","instance","open","backdrop","keyboard","info","closeDialog","close","$destroy","adfOpenWidgetFromOther","internal_config","_config","merge","adfOpenModalWidgetFromOther","widgetType","fullScreenScope","definition","opts","modalSize","windowClass","persistDashboard","this","$parent","adfAddWidgetDialog","addWidgetDialog","addScopeCfg","widgetSortingDirection","widgetSorting","addScope","isFunction","availableCategories","adfAddTemplatePath","addTemplateUrl","widgetFilterCfg","addWidget","changeThumbnail","images","_currThumb","_currImg","$attr","enableConfirmDelete","editing","filter","$filter","array","objectKey","provider","widgetsPath","messageTemplate","loadingTemplate","customWidgetTemplatePath","defaultApplyFunction","extend","reload","frameless","apply","path","template","templatePath","$get","Date","getTime","other","toString","columnTemplate","adjustRowHeight","container","height","style","prepareStructure","preview","selected","$q","widgetService","$controller","$injector","renderError","msg","html","compileWidget","currentScope","configChanged","_getWindowTime","newScope","to","moment","subtract","_d","content","extra","is_menu","menu","isPaginationEnable","is_itemsPerPage","itemsPerPage","reloadData","renderWidget","then","translateMessage","getWindowTime","winTime","eval","rawdate","format","templateScope","selectionManager","base","resolvers","$tpl","getTemplate","resolve","promise","isString","get","invoke","all","locals","resolveAs","templateCtrl","controllerAs","children","data","contents","reason","widgetConfigChangedEvt","widgetReloadEvt","factory","$http","$sce","$templateCache","parseUrl","url","parsedUrl","substring","exposed","deferred","defer","tpl","getTrustedResourceUrl","success","response","put","reject","$interval","Filter","preLink","styleClass","fromJson","show_modal_footer","show_reload_config","widgetState","isCollapsed","collapsed","debug","postLink","deleteWidget","remove","deleteScope","deleteTemplateUrl","deleteDialog","print","isExecuteOperationEnabled","entityKey","oql","executeOperation","sort","direction","toggleAdvanced","search","json","quick","fields","customFilter","v","toggleFilter","advanced","filterAvailable","showFilter","showFinalFilter","launchSearching","element","addCustomFilter","launchCustomFilter","and","like","JSON","stringify","deleteFilter","launchSearchingAdv","filterApplied","Object","keys","applyFilter","launchSearchingQuick","timeObj","enter","keycode","keyCode","which","customSelectors","getCustomSelectors","widgetSelectors","findFields","err","getcustomFilter","ifCustomFilter","showCustomFields","changeDirection","changeDefaultTab","debugQuery","parseQuery","toJson","unknownWords","autocomplete_options","suggest","suggest_field_delimited","selectedItems","currentSelection","isSelected","obj","totalSelected","manageSelectedItems","selectionScope","selectionConfig","manageItemsSelectedTemplate","restoreSelection","clearSelection","customOql","filterAction","operationType","saveChangesDialog","finalSelection","visible","selectedItemsLength","lastItem","createApplyPromise","result","when","editScope","saveDialog","validationError","applyFn","setReloadTimeout","adfDashboardCollapseExpand","args","adfWidgetEnterEditMode","adfIsEditMode","adfDashboardChanged","adfDashboardEditsCancelled","widgetClasses","classes","openFullScreen","$emit","openFilter","openAboutScreen","modalInstance","$uibModalInstance","information","about","ok","selectedItem","saveWidgetScreen","wId","objectSelector","fileName","createQuickFilter","fieldsQuickSearch","criteria","_filter","or","field","operator","downloadCsv","extra_filter","scope_filter","final_filter","order","window_filter","onWindowTimeChanged","parse","trim","generateQR","stopReloadTimeout","addItemToSelection","removeItemFromSelection","reloadPeriod","isNaN","cancel","completeReload","compile","pre","post"],"mappings":"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","file":"opengate-angular-dashboard-framework.min.js","sourcesContent":["/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('adf', ['adf.provider', 'ui.bootstrap', 'opengate-angular-js'])\r\n    .value('adfTemplatePath', '../src/templates/')\r\n    .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\r\n    .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\r\n    .value('adfVersion', '<<adfVersion>>');","/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardColumn', function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\r\n    'use strict';\r\n\r\n    /**\r\n     * moves a widget in between a column\r\n     */\r\n    function moveWidgetInColumn($scope, column, evt){\r\n      var widgets = column.widgets;\r\n      // move widget and apply to scope\r\n      $scope.$apply(function(){\r\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\r\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * finds a widget by its id in the column\r\n     */\r\n    function findWidget(column, index){\r\n      var widget = null;\r\n      for (var i=0; i<column.widgets.length; i++){\r\n        var w = column.widgets[i];\r\n        if (dashboard.idEquals(w.wid,index)){\r\n          widget = w;\r\n          break;\r\n        }\r\n      }\r\n      return widget;\r\n    }\r\n\r\n    /**\r\n     * finds a column by its id in the model\r\n     */\r\n    function findColumn(model, index){\r\n      var column = null;\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var r = model.rows[i];\r\n        for (var j=0; j<r.columns.length; j++){\r\n          var c = r.columns[j];\r\n          if (dashboard.idEquals(c.cid, index)){\r\n            column = c;\r\n            break;\r\n          } else if (c.rows){\r\n            column = findColumn(c, index);\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    /**\r\n     * get the adf id from an html element\r\n     */\r\n    function getId(el){\r\n      var id = el.getAttribute('adf-id');\r\n      return id ? id : '-1';\r\n    }\r\n\r\n    /**\r\n     * adds a widget to a column\r\n     */\r\n    function addWidgetToColumn($scope, model, targetColumn, evt){\r\n      // find source column\r\n      var cid = getId(evt.from);\r\n      var sourceColumn = findColumn(model, cid);\r\n\r\n      if (sourceColumn){\r\n        // find moved widget\r\n        var wid = getId(evt.item);\r\n        var widget = findWidget(sourceColumn, wid);\r\n\r\n        if (widget){\r\n          // add new item and apply to scope\r\n          $scope.$apply(function(){\r\n            if (!targetColumn.widgets) {\r\n              targetColumn.widgets = [];\r\n            }\r\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\r\n\r\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\r\n          });\r\n        } else {\r\n          $log.warn('could not find widget with id ' + wid);\r\n        }\r\n      } else {\r\n        $log.warn('could not find column with id ' + cid);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * removes a widget from a column\r\n     */\r\n    function removeWidgetFromColumn($scope, column, evt){\r\n      // remove old item and apply to scope\r\n      $scope.$apply(function(){\r\n        column.widgets.splice(evt.oldIndex, 1);\r\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * enable sortable\r\n     */\r\n    function applySortable($scope, $element, model, column){\r\n      // enable drag and drop\r\n      var el = $element[0];\r\n      var sortable = Sortable.create(el, {\r\n        group: 'widgets',\r\n        handle: '.adf-move',\r\n        ghostClass: 'placeholder',\r\n        animation: 150,\r\n        onAdd: function(evt){\r\n          addWidgetToColumn($scope, model, column, evt);\r\n        },\r\n        onRemove: function(evt){\r\n          removeWidgetFromColumn($scope, column, evt);\r\n        },\r\n        onUpdate: function(evt){\r\n          moveWidgetInColumn($scope, column, evt);\r\n        }\r\n      });\r\n\r\n      // destroy sortable on column destroy event\r\n      $element.on('$destroy', function () {\r\n        // check sortable element, before calling destroy\r\n        // see https://github.com/sdorra/angular-dashboard-framework/issues/118\r\n        if (sortable.el){\r\n          sortable.destroy();\r\n        }\r\n      });\r\n    }\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        column: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        adfModel: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\r\n      link: function ($scope, $element) {\r\n        // set id\r\n        var col = $scope.column;\r\n        if (!col.cid){\r\n          col.cid = dashboard.id();\r\n        }\r\n\r\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\r\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\r\n          $compile(rowTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        } else {\r\n          // enable drag and drop for widget only columns\r\n          applySortable($scope, $element, $scope.adfModel, col);\r\n        }\r\n      }\r\n    };\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name adf.directive:adfDashboard\r\n * @element div\r\n * @restrict EA\r\n * @scope\r\n * @description\r\n *\r\n * `adfDashboard` is a directive which renders the dashboard with all its\r\n * components. The directive requires a name attribute. The name of the\r\n * dashboard can be used to store the model.\r\n *\r\n * @param {string} name name of the dashboard. This attribute is required.\r\n * @param {boolean=} editable false to disable the editmode of the dashboard.\r\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\r\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\r\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\r\n * @param {string=} structure the default structure of the dashboard.\r\n * @param {object=} adfModel model object of the dashboard.\r\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\r\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\r\n *                   events during edit mode not reset it if edit mode is exited.\r\n * @param {boolean=} categories enable categories for the add widget dialog.\r\n */\r\n\r\nangular.module('adf')\r\n    .directive('adfDashboard', function($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath, $faIcons, $translate) {\r\n        'use strict';\r\n\r\n        function stringToBoolean(string) {\r\n            switch (angular.isDefined(string) ? string.toLowerCase() : null) {\r\n                case 'true':\r\n                case 'yes':\r\n                case '1':\r\n                    return true;\r\n                case 'false':\r\n                case 'no':\r\n                case '0':\r\n                case null:\r\n                    return false;\r\n                default:\r\n                    return Boolean(string);\r\n            }\r\n        }\r\n\r\n        function copyWidgets(source, target) {\r\n            if (source.widgets && source.widgets.length > 0) {\r\n                var w = source.widgets.shift();\r\n                while (w) {\r\n                    target.widgets.push(w);\r\n                    w = source.widgets.shift();\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Copy widget from old columns to the new model\r\n         * @param object root the model\r\n         * @param array of columns\r\n         * @param counter\r\n         */\r\n        function fillStructure(root, columns, counter) {\r\n            counter = counter || 0;\r\n\r\n            if (angular.isDefined(root.rows)) {\r\n                angular.forEach(root.rows, function(row) {\r\n                    angular.forEach(row.columns, function(column) {\r\n                        // if the widgets prop doesn't exist, create a new array for it.\r\n                        // this allows ui.sortable to do it's thing without error\r\n                        if (!column.widgets) {\r\n                            column.widgets = [];\r\n                        }\r\n\r\n                        // if a column exist at the counter index, copy over the column\r\n                        if (angular.isDefined(columns[counter])) {\r\n                            // do not add widgets to a column, which uses nested rows\r\n                            if (angular.isUndefined(column.rows)) {\r\n                                copyWidgets(columns[counter], column);\r\n                                counter++;\r\n                            }\r\n                        }\r\n\r\n                        // run fillStructure again for any sub rows/columns\r\n                        counter = fillStructure(column, columns, counter);\r\n                    });\r\n                });\r\n            }\r\n            return counter;\r\n        }\r\n\r\n        /**\r\n         * Read Columns: recursively searches an object for the 'columns' property\r\n         * @param object model\r\n         * @param array  an array of existing columns; used when recursion happens\r\n         */\r\n        function readColumns(root, columns) {\r\n            columns = columns || [];\r\n\r\n            if (angular.isDefined(root.rows)) {\r\n                angular.forEach(root.rows, function(row) {\r\n                    angular.forEach(row.columns, function(col) {\r\n                        columns.push(col);\r\n                        // keep reading columns until we can't any more\r\n                        readColumns(col, columns);\r\n                    });\r\n                });\r\n            }\r\n\r\n            return columns;\r\n        }\r\n\r\n        function changeStructure(model, structure) {\r\n            var columns = readColumns(model);\r\n            var counter = 0;\r\n\r\n            model.rows = angular.copy(structure.rows);\r\n\r\n            while (counter < columns.length) {\r\n                counter = fillStructure(model, columns, counter);\r\n            }\r\n        }\r\n\r\n        function createConfiguration(type) {\r\n            var cfg = {};\r\n            var config = dashboard.widgets[type].config;\r\n            if (config) {\r\n                cfg = angular.copy(config);\r\n            }\r\n            return cfg;\r\n        }\r\n\r\n        function createWidget(type) {\r\n            var wdgt = {};\r\n            var widget = dashboard.widgets[type];\r\n            if (widget) {\r\n                wdgt = angular.copy(widget);\r\n            }\r\n            return wdgt;\r\n        }\r\n\r\n        /**\r\n         * Find first widget column in model.\r\n         *\r\n         * @param dashboard model\r\n         */\r\n        function findFirstWidgetColumn(model) {\r\n            var column = null;\r\n            if (!angular.isArray(model.rows)) {\r\n                $log.error('model does not have any rows');\r\n                return null;\r\n            }\r\n            for (var i = 0; i < model.rows.length; i++) {\r\n                var row = model.rows[i];\r\n                if (angular.isArray(row.columns)) {\r\n                    for (var j = 0; j < row.columns.length; j++) {\r\n                        var col = row.columns[j];\r\n                        if (!col.rows) {\r\n                            column = col;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if (column) {\r\n                    break;\r\n                }\r\n            }\r\n            return column;\r\n        }\r\n\r\n        /**\r\n         * Adds the widget to first column of the model.\r\n         *\r\n         * @param dashboard model\r\n         * @param widget to add to model\r\n         * @param name name of the dashboard\r\n         */\r\n        function addNewWidgetToModel(model, widget, name, forceToSave) {\r\n            if (model) {\r\n                var column = findFirstWidgetColumn(model);\r\n                if (column) {\r\n                    if (!column.widgets) {\r\n                        column.widgets = [];\r\n                    }\r\n                    column.widgets.unshift(widget);\r\n\r\n                    // broadcast added event\r\n                    $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\r\n\r\n                    if (forceToSave) {\r\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n                    }\r\n                } else {\r\n                    $log.error('could not find first widget column');\r\n                }\r\n            } else {\r\n                $log.error('model is undefined');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Checks if the edit mode of the widget should be opened immediately.\r\n         *\r\n         * @param widget type\r\n         */\r\n        function isEditModeImmediate(type) {\r\n            var widget = dashboard.widgets[type];\r\n            return widget && widget.edit && widget.edit.immediate;\r\n        }\r\n\r\n        /**\r\n         * Opens the edit mode of the specified widget.\r\n         *\r\n         * @param dashboard scope\r\n         * @param widget\r\n         */\r\n        function openEditMode($scope, widget) {\r\n            // wait some time before fire enter edit mode event\r\n            $timeout(function() {\r\n                $scope.$broadcast('adfWidgetEnterEditMode', widget);\r\n            }, 200);\r\n        }\r\n\r\n        /**\r\n         * Splits an object into an array multiple objects inside.\r\n         *\r\n         * @param object source object\r\n         * @param size size of array\r\n         *\r\n         * @return array of splitted objects\r\n         */\r\n        function split(object, size) {\r\n            var arr = [];\r\n            var i = 0;\r\n            angular.forEach(object, function(value, key) {\r\n                var index = i++ % size;\r\n                if (!arr[index]) {\r\n                    arr[index] = {};\r\n                }\r\n                arr[index][key] = value;\r\n            });\r\n            return arr;\r\n        }\r\n\r\n        /**\r\n         * Creates object with the category name as key and an array of widgets as value.\r\n         *\r\n         * @param widgets array of widgets\r\n         *\r\n         * @return array of categories\r\n         */\r\n        function createCategories(widgets) {\r\n            var categories = {};\r\n            angular.forEach(widgets, function(widget, key) {\r\n                var category = widget.category;\r\n                // if the widget has no category use a default one\r\n                if (!category) {\r\n                    category = 'ADF.CATEGORY.MISCELANOUS';\r\n                }\r\n\r\n                widget.title = $translate.instant(widget.title);\r\n                widget.description = $translate.instant(widget.description);\r\n                widget.category = $translate.instant(widget.category);\r\n\r\n                // push widget to category array\r\n                if (angular.isUndefined(categories[widget.category])) {\r\n                    categories[widget.category] = {\r\n                        widgets: {}\r\n                    };\r\n                }\r\n\r\n                categories[widget.category].widgets[key] = widget;\r\n            });\r\n            return categories;\r\n        }\r\n\r\n        function createCategoriesList(widgets) {\r\n            var categories = [];\r\n            angular.forEach(widgets, function(widget, key) {\r\n                if (!widget.category) {\r\n                    widget.category = 'ADF.CATEGORY.MISCELLANEOUS';\r\n                }\r\n\r\n                widget.title = $translate.instant(widget.title);\r\n                widget.description = $translate.instant(widget.description);\r\n                widget.category = $translate.instant(widget.category);\r\n\r\n                if (!widget.categoryTags) {\r\n                    widget.categoryTags = 'ADF.CATEGORY.TAG.MISCELLANEOUS';\r\n                }\r\n\r\n                var categoriesTmp = widget.categoryTags.split(',');\r\n\r\n                angular.forEach(categoriesTmp, function(category, idx) {\r\n                    // push widget to category array\r\n                    var translatedCat = $translate.instant(category);\r\n                    if (categories.indexOf(translatedCat) === -1)\r\n                        categories.push(translatedCat);\r\n                });\r\n\r\n            });\r\n            return categories;\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            scope: {\r\n                structure: '@',\r\n                name: '@',\r\n                collapsible: '@',\r\n                editable: '@',\r\n                editMode: '@',\r\n                continuousEditMode: '=',\r\n                maximizable: '@',\r\n                adfModel: '=',\r\n                adfWidgetFilter: '=',\r\n                categories: '@',\r\n                hideButtons: '=',\r\n                extraData: '='\r\n            },\r\n            controller: function($scope) {\r\n                var model = {};\r\n                var structure = {};\r\n                var widgetFilter = null;\r\n                var structureName = {};\r\n                var name = $scope.name;\r\n\r\n                // Watching for changes on adfModel\r\n                $scope.$watch('adfModel', function(oldVal, newVal) {\r\n                    // has model changed or is the model attribute not set\r\n                    if (newVal !== null || (oldVal === null && newVal === null)) {\r\n                        model = $scope.adfModel;\r\n                        widgetFilter = $scope.adfWidgetFilter;\r\n                        if (!model || !model.rows) {\r\n                            structureName = $scope.structure;\r\n                            structure = dashboard.structures[structureName];\r\n                            if (structure) {\r\n                                if (model) {\r\n                                    model.rows = angular.copy(structure).rows;\r\n                                } else {\r\n                                    model = angular.copy(structure);\r\n                                }\r\n                                model.structure = structureName;\r\n                            } else {\r\n                                $log.error('could not find structure ' + structureName);\r\n                            }\r\n                        }\r\n\r\n                        if (model) {\r\n                            if (!model.title) {\r\n                                model.title = $translate.instant('ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD');\r\n                            }\r\n                            if (!model.titleTemplateUrl) {\r\n                                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\r\n                            }\r\n                            $scope.model = model;\r\n                        } else {\r\n                            $log.error('could not find or create model');\r\n                        }\r\n                    }\r\n                }, true);\r\n\r\n                // edit mode\r\n                $scope.editMode = false;\r\n                $scope.editClass = '';\r\n\r\n                function getNewModalScope() {\r\n                    var scope = $scope.$new();\r\n                    return scope;\r\n                }\r\n\r\n                $scope.deleteDashboard = function() {\r\n                    var dashData = {\r\n                        id: model.id,\r\n                        name: model.title\r\n                    };\r\n\r\n                    $rootScope.$broadcast('dashboardDelete', dashData);\r\n                };\r\n\r\n                $scope.toggleEditMode = function(openConfigWindow) {\r\n                    $scope.editMode = !$scope.editMode;\r\n                    if ($scope.editMode) {\r\n                        if (!$scope.continuousEditMode) {\r\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n                            $rootScope.$broadcast('adfIsEditMode');\r\n                        }\r\n\r\n                        if (openConfigWindow) {\r\n                            $scope.editDashboardDialog();\r\n                        }\r\n                    }\r\n\r\n                    if (!$scope.editMode) {\r\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n                    }\r\n                };\r\n\r\n                $scope.saveTemporalDashboard = function() {\r\n                    delete model.temporal;\r\n                    $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n                };\r\n\r\n                var adfToggleEditMode = $scope.$on('adfToggleEditMode', function(event, isNewDashboard) {\r\n                    if (isNewDashboard) {\r\n                        $scope.toggleEditMode(true);\r\n                    } else {\r\n                        $scope.toggleEditMode();\r\n                    }\r\n                });\r\n\r\n                var adfCancelEditMode = $scope.$on('adfCancelEditMode', function(event, isNewDashboard) {\r\n                    if ($scope.editMode) {\r\n                        $scope.cancelEditMode();\r\n                    }\r\n                });\r\n\r\n                $scope.collapseAll = function(collapseExpandStatus) {\r\n                    $rootScope.$broadcast('adfDashboardCollapseExpand', {\r\n                        collapseExpandStatus: collapseExpandStatus\r\n                    });\r\n                };\r\n\r\n                $scope.cancelEditMode = function() {\r\n                    $scope.editMode = false;\r\n                    if (!$scope.continuousEditMode && ($scope.modelCopy !== $scope.adfModel)) {\r\n                        $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\r\n                    }\r\n                    $rootScope.$broadcast('adfDashboardEditsCancelled');\r\n                };\r\n\r\n                var adfEditDashboardDialog = $scope.$on('adfEditDashboardDialog', function(event, isNewDashboard) {\r\n                    if ($scope.editMode) {\r\n                        $scope.editDashboardDialog();\r\n                    }\r\n                });\r\n\r\n                var adfLaunchSearchingFromWidget = $scope.$on('adfLaunchSearchingFromWidget', function(event, widget, configFilter) {\r\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\r\n                });\r\n                var adfWindowTimeChangedFromWidget = $scope.$on('adfWindowTimeChangedFromWidget', function(event, widget, windowFilter) {\r\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\r\n                });\r\n\r\n                // edit dashboard settings\r\n                $scope.editDashboardDialog = function() {\r\n                    var editDashboardScope = getNewModalScope();\r\n                    // create a copy of the title, to avoid changing the title to\r\n                    // \"dashboard\" if the field is empty\r\n                    editDashboardScope.copy = {\r\n                        title: (model.title !== 'ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD' ? model.title : ''),\r\n                        description: model.description,\r\n                        icon: model.icon ? model.icon : 'fa-tachometer'\r\n                    };\r\n\r\n                    // pass icon list\r\n                    editDashboardScope.availableIcons = $faIcons.list();\r\n\r\n                    // pass dashboard structure to scope\r\n                    editDashboardScope.structures = dashboard.structures;\r\n\r\n                    // pass split function to scope, to be able to display structures in multiple columns\r\n                    editDashboardScope.split = split;\r\n\r\n                    var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\r\n                    if (model.editTemplateUrl) {\r\n                        adfEditTemplatePath = model.editTemplateUrl;\r\n                    }\r\n                    var instance = $uibModal.open({\r\n                        scope: editDashboardScope,\r\n                        templateUrl: adfEditTemplatePath,\r\n                        backdrop: 'static',\r\n                        keyboard: false,\r\n                        size: 'lg'\r\n                    });\r\n\r\n                    editDashboardScope.changeStructure = function(name, structure) {\r\n                        $log.info('change structure to ' + name);\r\n                        changeStructure(model, structure);\r\n                        if (model.structure !== name) {\r\n                            model.structure = name;\r\n                        }\r\n                    };\r\n                    editDashboardScope.closeDialog = function() {\r\n                        // copy the new title back to the model\r\n                        model.title = editDashboardScope.copy.title;\r\n                        model.description = editDashboardScope.copy.description;\r\n                        model.icon = editDashboardScope.copy.icon;\r\n\r\n                        // close modal and destroy the scope\r\n                        instance.close();\r\n                        editDashboardScope.$destroy();\r\n                    };\r\n                };\r\n\r\n                var adfOpenWidgetFromOther = $scope.$on('adfOpenWidgetFromOther', function(event, widget, config) {\r\n                    var internal_config = createConfiguration(widget);\r\n                    var _config = angular.merge({}, internal_config, config);\r\n                    var w = {\r\n                        type: widget,\r\n                        config: _config,\r\n                        title: _config.title\r\n                    };\r\n                    addNewWidgetToModel(model, w, name, !$scope.editMode);\r\n                });\r\n\r\n                var adfOpenModalWidgetFromOther = $scope.$on('adfOpenModalWidgetFromOther', function(event, widgetType, config) {\r\n                    var widget = createWidget(widgetType);\r\n                    widget.config = angular.merge({}, widget.config, config);\r\n                    widget.type = widgetType;\r\n                    if (widget.config.title) {\r\n                        widget.title = widget.config.title;\r\n                    }\r\n                    var fullScreenScope = $scope.$new();\r\n                    fullScreenScope.definition = fullScreenScope.widget = widget;\r\n                    var opts = {\r\n                        scope: fullScreenScope,\r\n                        templateUrl: adfTemplatePath + 'widget-fullscreen.html',\r\n                        size: fullScreenScope.definition.modalSize || 'ticket', // 'sm', 'lg'\r\n                        backdrop: 'static',\r\n                        windowClass: (fullScreenScope.definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\r\n                    };\r\n\r\n                    fullScreenScope.persistDashboard = function() {\r\n                        $rootScope.$broadcast('adfOpenWidgetFromOther', this.$parent.widget.type, this.$parent.widget.config);\r\n                        this.closeDialog();\r\n                    }\r\n\r\n                    var instance = $uibModal.open(opts);\r\n                    fullScreenScope.closeDialog = function() {\r\n                        instance.close();\r\n                        fullScreenScope.$destroy();\r\n                    };\r\n\r\n                });\r\n\r\n                var adfAddWidgetDialog = $scope.$on('adfAddWidgetDialog', function(event, isNewDashboard) {\r\n                    if (!model.temporal && model.editable) {\r\n                        if (!$scope.editMode) {\r\n                            $scope.editMode = true;\r\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n                            $rootScope.$broadcast('adfIsEditMode');\r\n                        }\r\n\r\n                        $scope.addWidgetDialog();\r\n                    }\r\n                });\r\n\r\n                // add widget dialog\r\n                $scope.addScopeCfg = {\r\n                    widgetFilter: {},\r\n                    widgetSortingDirection: '',\r\n                    widgetSorting: 'priority'\r\n                };\r\n\r\n                $scope.addWidgetDialog = function() {\r\n                    var addScope = getNewModalScope();\r\n                    var widgets;\r\n                    if (angular.isFunction(widgetFilter)) {\r\n                        widgets = {};\r\n                        angular.forEach(dashboard.widgets, function(widget, type) {\r\n                            if (widgetFilter(widget, type, model)) {\r\n                                widgets[type] = widget;\r\n                            }\r\n                        });\r\n                    } else {\r\n                        widgets = dashboard.widgets;\r\n                    }\r\n                    addScope.widgets = widgets;\r\n\r\n                    angular.forEach(addScope.widgets, function(widget, type) {\r\n                        widget.key = type;\r\n                        if (!widget.category) {\r\n                            widget.category = 'Miscellaneous';\r\n                        }\r\n                    });\r\n\r\n                    // pass createCategories function to scope, if categories option is enabled\r\n                    if ($scope.options.categories) {\r\n                        addScope.createCategories = createCategories;\r\n                    } else {\r\n                        addScope.availableCategories = createCategoriesList(widgets);\r\n                    }\r\n\r\n                    var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\r\n                    if (model.addTemplateUrl) {\r\n                        adfAddTemplatePath = model.addTemplateUrl;\r\n                    }\r\n\r\n                    var opts = {\r\n                        scope: addScope,\r\n                        templateUrl: adfAddTemplatePath,\r\n                        backdrop: 'static',\r\n                        size: 'lg'\r\n                    };\r\n\r\n                    var instance = $uibModal.open(opts);\r\n\r\n                    addScope.widgetFilterCfg = $scope.addScopeCfg;\r\n\r\n                    addScope.addWidget = function(widget) {\r\n                        var w = {\r\n                            type: widget,\r\n                            config: createConfiguration(widget)\r\n                        };\r\n                        addNewWidgetToModel(model, w, name);\r\n                        // close and destroy\r\n                        instance.close();\r\n                        addScope.$destroy();\r\n\r\n                        // check for open edit mode immediately\r\n                        if (isEditModeImmediate(widget)) {\r\n                            openEditMode($scope, w);\r\n                        }\r\n                    };\r\n\r\n                    addScope.changeThumbnail = function(widget) {\r\n                        if (widget.images) {\r\n                            if (angular.isUndefined(widget._currThumb)) {\r\n                                widget._currThumb = 1;\r\n                            } else {\r\n                                widget._currThumb += 1;\r\n                            }\r\n\r\n\r\n                            if (widget._currThumb >= widget.images.length) {\r\n                                widget._currThumb = 0;\r\n                            }\r\n\r\n                            widget._currImg = widget.images[widget._currThumb];\r\n                        }\r\n                    };\r\n\r\n                    addScope.closeDialog = function() {\r\n                        // close and destroy\r\n                        instance.close();\r\n                        addScope.$destroy();\r\n                    };\r\n                };\r\n\r\n                $scope.addNewWidgetToModel = addNewWidgetToModel;\r\n\r\n                $scope.$on('destroy', function() {\r\n                    adfLaunchSearchingFromWidget();\r\n                    adfWindowTimeChangedFromWidget();\r\n                    adfToggleEditMode();\r\n                    adfOpenWidgetFromOther();\r\n                    adfOpenModalWidgetFromOther();\r\n                    adfCancelEditMode();\r\n                    adfAddWidgetDialog();\r\n                    adfEditDashboardDialog();\r\n                });\r\n            },\r\n            link: function($scope, $element, $attr) {\r\n                // pass options to scope\r\n                var options = {\r\n                    name: $attr.name,\r\n                    editable: true,\r\n                    enableConfirmDelete: stringToBoolean($attr.enableConfirmDelete),\r\n                    maximizable: stringToBoolean($attr.maximizable),\r\n                    collapsible: stringToBoolean($attr.collapsible),\r\n                    categories: stringToBoolean($attr.categories),\r\n                    extraData: {}\r\n                };\r\n\r\n                if (angular.isDefined($attr.editable)) {\r\n                    options.editable = stringToBoolean($attr.editable);\r\n                }\r\n\r\n                if (angular.isDefined($scope.extraData)) {\r\n                    options.extraData = $scope.extraData;\r\n                }\r\n\r\n                options.extraData.editing = $scope.editMode;\r\n\r\n                $scope.options = options;\r\n            },\r\n            templateUrl: adfTemplatePath + 'dashboard.html'\r\n        };\r\n    });","/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .filter('adfOrderByObjectKey', function($filter) {\r\n    'use strict';\r\n\r\n    return function(item, key){\r\n      var array = [];\r\n      angular.forEach(item, function(value, objectKey){\r\n        value[key] = objectKey;\r\n        array.push(value);\r\n      });\r\n      return $filter('orderBy')(array, key);\r\n    };\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * @ngdoc object\r\n * @name adf.dashboardProvider\r\n * @description\r\n *\r\n * The dashboardProvider can be used to register structures and widgets.\r\n */\r\nangular.module('adf.provider', [])\r\n    .provider('dashboard', function () {\r\n\r\n        var widgets = {};\r\n        var widgetsPath = '';\r\n        var structures = {};\r\n        var messageTemplate = '<div class=\"alert alert-primary\">{}</div>';\r\n        var loadingTemplate = '\\\r\n      <div class=\"progress progress-striped active\">\\n\\\r\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\r\n          <span class=\"sr-only\" translate>FORM.MSG.LOADING ...</span>\\n\\\r\n        </div>\\n\\\r\n      </div>';\r\n        var customWidgetTemplatePath = null;\r\n\r\n        // default apply function of widget.edit.apply\r\n        var defaultApplyFunction = function () {\r\n            return true;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#widget\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Registers a new widget.\r\n         *\r\n         * @param {string} name of the widget\r\n         * @param {object} widget to be registered.\r\n         *\r\n         *   Object properties:\r\n         *\r\n         *   - `title` - `{string=}` - The title of the widget.\r\n         *   - `description` - `{string=}` - Description of the widget.\r\n         *   - `category` - `{string=}` - Category of the widget.\r\n         *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\r\n         *   - `config` - `{object}` - Predefined widget configuration.\r\n         *   - `controller` - `{string=|function()=}` - Controller fn that should be\r\n         *      associated with newly created scope of the widget or the name of a\r\n         *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\r\n         *      if passed as a string.\r\n         *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\r\n         *      published to scope under the `controllerAs` name.\r\n         *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\r\n         *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\r\n         *   - `template` - `{string=|function()=}` - html template as a string.\r\n         *   - `templateUrl` - `{string=}` - path to an html template.\r\n         *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\r\n         *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n         *      be injected into the controller. If any of these dependencies are promises, the widget\r\n         *      will wait for them all to be resolved or one to be rejected before the controller is\r\n         *      instantiated.\r\n         *      If all the promises are resolved successfully, the values of the resolved promises are\r\n         *      injected.\r\n         *\r\n         *      The map object is:\r\n         *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\r\n         *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n         *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\r\n         *        and the return value is treated as the dependency. If the result is a promise, it is\r\n         *        resolved before its value is injected into the controller.\r\n         *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n         *      on the scope of the widget.\r\n         *   - `edit` - `{object}` - Edit modus of the widget.\r\n         *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n         *        on the scope of the widget.\r\n         *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\r\n         *        Default is true.\r\n         *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\r\n         *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\r\n         *        The function have to return a boolean or an promise which can be resolved to a boolean.\r\n         *        The function can use injection.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.widget = function (name, widget) {\r\n            var w = angular.extend({\r\n                reload: false,\r\n                frameless: false\r\n            }, widget);\r\n            if (w.edit) {\r\n                var edit = {\r\n                    reload: true,\r\n                    immediate: false,\r\n                    apply: defaultApplyFunction\r\n                };\r\n                angular.extend(edit, w.edit);\r\n                w.edit = edit;\r\n            }\r\n            widgets[name] = w;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#widgetsPath\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Sets the path to the directory which contains the widgets. The widgets\r\n         * path is used for widgets with a templateUrl which contains the\r\n         * placeholder {widgetsPath}. The placeholder is replaced with the\r\n         * configured value, before the template is loaded, but the template is\r\n         * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\r\n         * The default value of widgetPaths is ''.\r\n         *\r\n         *\r\n         * @param {string} path to the directory which contains the widgets\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.widgetsPath = function (path) {\r\n            widgetsPath = path;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#structure\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Registers a new structure.\r\n         *\r\n         * @param {string} name of the structure\r\n         * @param {object} structure to be registered.\r\n         *\r\n         *   Object properties:\r\n         *\r\n         *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\r\n         *     - `styleClass` - `{string}` - CSS Class of the row.\r\n         *     - `columns` - `{Array.<Object>}` - Columns of the row.\r\n         *       - `styleClass` - `{string}` - CSS Class of the column.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.structure = function (name, structure) {\r\n            structures[name] = structure;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#messageTemplate\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the template for messages.\r\n         *\r\n         * @param {string} template for messages.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.messageTemplate = function (template) {\r\n            messageTemplate = template;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#loadingTemplate\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the template which is displayed as\r\n         * long as the widget resources are not resolved.\r\n         *\r\n         * @param {string} template loading template\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.loadingTemplate = function (template) {\r\n            loadingTemplate = template;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#customWidgetTemplatePath\r\n         * @propertyOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the container template for the widgets\r\n         *\r\n         * @param {string} path to the custom widget template\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.customWidgetTemplatePath = function (templatePath) {\r\n            customWidgetTemplatePath = templatePath;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc service\r\n         * @name adf.dashboard\r\n         * @description\r\n         *\r\n         * The dashboard holds all options, structures and widgets.\r\n         *\r\n         * @property {Array.<Object>} widgets Array of registered widgets.\r\n         * @property {string} widgetsPath Default path for widgets.\r\n         * @property {Array.<Object>} structures Array of registered structures.\r\n         * @property {string} messageTemplate Template for messages.\r\n         * @property {string} loadingTemplate Template for widget loading.\r\n         * * @property {string} customWidgetTemplatePath Changes the container template for the widgets\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.$get = function () {\r\n            var cid = 0;\r\n\r\n            return {\r\n                widgets: widgets,\r\n                widgetsPath: widgetsPath,\r\n                structures: structures,\r\n                messageTemplate: messageTemplate,\r\n                loadingTemplate: loadingTemplate,\r\n                customWidgetTemplatePath: customWidgetTemplatePath,\r\n\r\n                /**\r\n                 * @ngdoc method\r\n                 * @name adf.dashboard#id\r\n                 * @methodOf adf.dashboard\r\n                 * @description\r\n                 *\r\n                 * Creates an ongoing numeric id. The method is used to create ids for\r\n                 * columns and widgets in the dashboard.\r\n                 */\r\n                id: function () {\r\n                    return new Date().getTime() + '-' + (++cid);\r\n                },\r\n\r\n                /**\r\n                 * @ngdoc method\r\n                 * @name adf.dashboard#idEqual\r\n                 * @methodOf adf.dashboard\r\n                 * @description\r\n                 *\r\n                 * Checks if the given ids are equal.\r\n                 *\r\n                 * @param {string} id widget or column id\r\n                 * @param {string} other widget or column id\r\n                 */\r\n                idEquals: function (id, other) {\r\n                    // use toString, because old ids are numbers\r\n                    return ((id) && (other)) && (id.toString() === other.toString());\r\n                }\r\n            };\r\n        };\r\n\r\n    });","(function(window, undefined) {'use strict';\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf', ['adf.provider', 'ui.bootstrap', 'opengate-angular-js'])\r\n    .value('adfTemplatePath', '../src/templates/')\r\n    .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\r\n    .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\r\n    .value('adfVersion', '4.7.0');\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardColumn', [\"$log\", \"$compile\", \"$rootScope\", \"adfTemplatePath\", \"rowTemplate\", \"dashboard\", function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\r\n    \r\n\r\n    /**\r\n     * moves a widget in between a column\r\n     */\r\n    function moveWidgetInColumn($scope, column, evt){\r\n      var widgets = column.widgets;\r\n      // move widget and apply to scope\r\n      $scope.$apply(function(){\r\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\r\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * finds a widget by its id in the column\r\n     */\r\n    function findWidget(column, index){\r\n      var widget = null;\r\n      for (var i=0; i<column.widgets.length; i++){\r\n        var w = column.widgets[i];\r\n        if (dashboard.idEquals(w.wid,index)){\r\n          widget = w;\r\n          break;\r\n        }\r\n      }\r\n      return widget;\r\n    }\r\n\r\n    /**\r\n     * finds a column by its id in the model\r\n     */\r\n    function findColumn(model, index){\r\n      var column = null;\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var r = model.rows[i];\r\n        for (var j=0; j<r.columns.length; j++){\r\n          var c = r.columns[j];\r\n          if (dashboard.idEquals(c.cid, index)){\r\n            column = c;\r\n            break;\r\n          } else if (c.rows){\r\n            column = findColumn(c, index);\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    /**\r\n     * get the adf id from an html element\r\n     */\r\n    function getId(el){\r\n      var id = el.getAttribute('adf-id');\r\n      return id ? id : '-1';\r\n    }\r\n\r\n    /**\r\n     * adds a widget to a column\r\n     */\r\n    function addWidgetToColumn($scope, model, targetColumn, evt){\r\n      // find source column\r\n      var cid = getId(evt.from);\r\n      var sourceColumn = findColumn(model, cid);\r\n\r\n      if (sourceColumn){\r\n        // find moved widget\r\n        var wid = getId(evt.item);\r\n        var widget = findWidget(sourceColumn, wid);\r\n\r\n        if (widget){\r\n          // add new item and apply to scope\r\n          $scope.$apply(function(){\r\n            if (!targetColumn.widgets) {\r\n              targetColumn.widgets = [];\r\n            }\r\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\r\n\r\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\r\n          });\r\n        } else {\r\n          $log.warn('could not find widget with id ' + wid);\r\n        }\r\n      } else {\r\n        $log.warn('could not find column with id ' + cid);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * removes a widget from a column\r\n     */\r\n    function removeWidgetFromColumn($scope, column, evt){\r\n      // remove old item and apply to scope\r\n      $scope.$apply(function(){\r\n        column.widgets.splice(evt.oldIndex, 1);\r\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * enable sortable\r\n     */\r\n    function applySortable($scope, $element, model, column){\r\n      // enable drag and drop\r\n      var el = $element[0];\r\n      var sortable = Sortable.create(el, {\r\n        group: 'widgets',\r\n        handle: '.adf-move',\r\n        ghostClass: 'placeholder',\r\n        animation: 150,\r\n        onAdd: function(evt){\r\n          addWidgetToColumn($scope, model, column, evt);\r\n        },\r\n        onRemove: function(evt){\r\n          removeWidgetFromColumn($scope, column, evt);\r\n        },\r\n        onUpdate: function(evt){\r\n          moveWidgetInColumn($scope, column, evt);\r\n        }\r\n      });\r\n\r\n      // destroy sortable on column destroy event\r\n      $element.on('$destroy', function () {\r\n        // check sortable element, before calling destroy\r\n        // see https://github.com/sdorra/angular-dashboard-framework/issues/118\r\n        if (sortable.el){\r\n          sortable.destroy();\r\n        }\r\n      });\r\n    }\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        column: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        adfModel: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\r\n      link: function ($scope, $element) {\r\n        // set id\r\n        var col = $scope.column;\r\n        if (!col.cid){\r\n          col.cid = dashboard.id();\r\n        }\r\n\r\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\r\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\r\n          $compile(rowTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        } else {\r\n          // enable drag and drop for widget only columns\r\n          applySortable($scope, $element, $scope.adfModel, col);\r\n        }\r\n      }\r\n    };\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name adf.directive:adfDashboard\r\n * @element div\r\n * @restrict EA\r\n * @scope\r\n * @description\r\n *\r\n * `adfDashboard` is a directive which renders the dashboard with all its\r\n * components. The directive requires a name attribute. The name of the\r\n * dashboard can be used to store the model.\r\n *\r\n * @param {string} name name of the dashboard. This attribute is required.\r\n * @param {boolean=} editable false to disable the editmode of the dashboard.\r\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\r\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\r\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\r\n * @param {string=} structure the default structure of the dashboard.\r\n * @param {object=} adfModel model object of the dashboard.\r\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\r\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\r\n *                   events during edit mode not reset it if edit mode is exited.\r\n * @param {boolean=} categories enable categories for the add widget dialog.\r\n */\r\n\r\nangular.module('adf')\r\n    .directive('adfDashboard', [\"$rootScope\", \"$log\", \"$timeout\", \"$uibModal\", \"dashboard\", \"adfTemplatePath\", \"$faIcons\", \"$translate\", function($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath, $faIcons, $translate) {\r\n        \r\n\r\n        function stringToBoolean(string) {\r\n            switch (angular.isDefined(string) ? string.toLowerCase() : null) {\r\n                case 'true':\r\n                case 'yes':\r\n                case '1':\r\n                    return true;\r\n                case 'false':\r\n                case 'no':\r\n                case '0':\r\n                case null:\r\n                    return false;\r\n                default:\r\n                    return Boolean(string);\r\n            }\r\n        }\r\n\r\n        function copyWidgets(source, target) {\r\n            if (source.widgets && source.widgets.length > 0) {\r\n                var w = source.widgets.shift();\r\n                while (w) {\r\n                    target.widgets.push(w);\r\n                    w = source.widgets.shift();\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Copy widget from old columns to the new model\r\n         * @param object root the model\r\n         * @param array of columns\r\n         * @param counter\r\n         */\r\n        function fillStructure(root, columns, counter) {\r\n            counter = counter || 0;\r\n\r\n            if (angular.isDefined(root.rows)) {\r\n                angular.forEach(root.rows, function(row) {\r\n                    angular.forEach(row.columns, function(column) {\r\n                        // if the widgets prop doesn't exist, create a new array for it.\r\n                        // this allows ui.sortable to do it's thing without error\r\n                        if (!column.widgets) {\r\n                            column.widgets = [];\r\n                        }\r\n\r\n                        // if a column exist at the counter index, copy over the column\r\n                        if (angular.isDefined(columns[counter])) {\r\n                            // do not add widgets to a column, which uses nested rows\r\n                            if (angular.isUndefined(column.rows)) {\r\n                                copyWidgets(columns[counter], column);\r\n                                counter++;\r\n                            }\r\n                        }\r\n\r\n                        // run fillStructure again for any sub rows/columns\r\n                        counter = fillStructure(column, columns, counter);\r\n                    });\r\n                });\r\n            }\r\n            return counter;\r\n        }\r\n\r\n        /**\r\n         * Read Columns: recursively searches an object for the 'columns' property\r\n         * @param object model\r\n         * @param array  an array of existing columns; used when recursion happens\r\n         */\r\n        function readColumns(root, columns) {\r\n            columns = columns || [];\r\n\r\n            if (angular.isDefined(root.rows)) {\r\n                angular.forEach(root.rows, function(row) {\r\n                    angular.forEach(row.columns, function(col) {\r\n                        columns.push(col);\r\n                        // keep reading columns until we can't any more\r\n                        readColumns(col, columns);\r\n                    });\r\n                });\r\n            }\r\n\r\n            return columns;\r\n        }\r\n\r\n        function changeStructure(model, structure) {\r\n            var columns = readColumns(model);\r\n            var counter = 0;\r\n\r\n            model.rows = angular.copy(structure.rows);\r\n\r\n            while (counter < columns.length) {\r\n                counter = fillStructure(model, columns, counter);\r\n            }\r\n        }\r\n\r\n        function createConfiguration(type) {\r\n            var cfg = {};\r\n            var config = dashboard.widgets[type].config;\r\n            if (config) {\r\n                cfg = angular.copy(config);\r\n            }\r\n            return cfg;\r\n        }\r\n\r\n        function createWidget(type) {\r\n            var wdgt = {};\r\n            var widget = dashboard.widgets[type];\r\n            if (widget) {\r\n                wdgt = angular.copy(widget);\r\n            }\r\n            return wdgt;\r\n        }\r\n\r\n        /**\r\n         * Find first widget column in model.\r\n         *\r\n         * @param dashboard model\r\n         */\r\n        function findFirstWidgetColumn(model) {\r\n            var column = null;\r\n            if (!angular.isArray(model.rows)) {\r\n                $log.error('model does not have any rows');\r\n                return null;\r\n            }\r\n            for (var i = 0; i < model.rows.length; i++) {\r\n                var row = model.rows[i];\r\n                if (angular.isArray(row.columns)) {\r\n                    for (var j = 0; j < row.columns.length; j++) {\r\n                        var col = row.columns[j];\r\n                        if (!col.rows) {\r\n                            column = col;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if (column) {\r\n                    break;\r\n                }\r\n            }\r\n            return column;\r\n        }\r\n\r\n        /**\r\n         * Adds the widget to first column of the model.\r\n         *\r\n         * @param dashboard model\r\n         * @param widget to add to model\r\n         * @param name name of the dashboard\r\n         */\r\n        function addNewWidgetToModel(model, widget, name, forceToSave) {\r\n            if (model) {\r\n                var column = findFirstWidgetColumn(model);\r\n                if (column) {\r\n                    if (!column.widgets) {\r\n                        column.widgets = [];\r\n                    }\r\n                    column.widgets.unshift(widget);\r\n\r\n                    // broadcast added event\r\n                    $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\r\n\r\n                    if (forceToSave) {\r\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n                    }\r\n                } else {\r\n                    $log.error('could not find first widget column');\r\n                }\r\n            } else {\r\n                $log.error('model is undefined');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Checks if the edit mode of the widget should be opened immediately.\r\n         *\r\n         * @param widget type\r\n         */\r\n        function isEditModeImmediate(type) {\r\n            var widget = dashboard.widgets[type];\r\n            return widget && widget.edit && widget.edit.immediate;\r\n        }\r\n\r\n        /**\r\n         * Opens the edit mode of the specified widget.\r\n         *\r\n         * @param dashboard scope\r\n         * @param widget\r\n         */\r\n        function openEditMode($scope, widget) {\r\n            // wait some time before fire enter edit mode event\r\n            $timeout(function() {\r\n                $scope.$broadcast('adfWidgetEnterEditMode', widget);\r\n            }, 200);\r\n        }\r\n\r\n        /**\r\n         * Splits an object into an array multiple objects inside.\r\n         *\r\n         * @param object source object\r\n         * @param size size of array\r\n         *\r\n         * @return array of splitted objects\r\n         */\r\n        function split(object, size) {\r\n            var arr = [];\r\n            var i = 0;\r\n            angular.forEach(object, function(value, key) {\r\n                var index = i++ % size;\r\n                if (!arr[index]) {\r\n                    arr[index] = {};\r\n                }\r\n                arr[index][key] = value;\r\n            });\r\n            return arr;\r\n        }\r\n\r\n        /**\r\n         * Creates object with the category name as key and an array of widgets as value.\r\n         *\r\n         * @param widgets array of widgets\r\n         *\r\n         * @return array of categories\r\n         */\r\n        function createCategories(widgets) {\r\n            var categories = {};\r\n            angular.forEach(widgets, function(widget, key) {\r\n                var category = widget.category;\r\n                // if the widget has no category use a default one\r\n                if (!category) {\r\n                    category = 'ADF.CATEGORY.MISCELANOUS';\r\n                }\r\n\r\n                widget.title = $translate.instant(widget.title);\r\n                widget.description = $translate.instant(widget.description);\r\n                widget.category = $translate.instant(widget.category);\r\n\r\n                // push widget to category array\r\n                if (angular.isUndefined(categories[widget.category])) {\r\n                    categories[widget.category] = {\r\n                        widgets: {}\r\n                    };\r\n                }\r\n\r\n                categories[widget.category].widgets[key] = widget;\r\n            });\r\n            return categories;\r\n        }\r\n\r\n        function createCategoriesList(widgets) {\r\n            var categories = [];\r\n            angular.forEach(widgets, function(widget, key) {\r\n                if (!widget.category) {\r\n                    widget.category = 'ADF.CATEGORY.MISCELLANEOUS';\r\n                }\r\n\r\n                widget.title = $translate.instant(widget.title);\r\n                widget.description = $translate.instant(widget.description);\r\n                widget.category = $translate.instant(widget.category);\r\n\r\n                if (!widget.categoryTags) {\r\n                    widget.categoryTags = 'ADF.CATEGORY.TAG.MISCELLANEOUS';\r\n                }\r\n\r\n                var categoriesTmp = widget.categoryTags.split(',');\r\n\r\n                angular.forEach(categoriesTmp, function(category, idx) {\r\n                    // push widget to category array\r\n                    var translatedCat = $translate.instant(category);\r\n                    if (categories.indexOf(translatedCat) === -1)\r\n                        categories.push(translatedCat);\r\n                });\r\n\r\n            });\r\n            return categories;\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            scope: {\r\n                structure: '@',\r\n                name: '@',\r\n                collapsible: '@',\r\n                editable: '@',\r\n                editMode: '@',\r\n                continuousEditMode: '=',\r\n                maximizable: '@',\r\n                adfModel: '=',\r\n                adfWidgetFilter: '=',\r\n                categories: '@',\r\n                hideButtons: '=',\r\n                extraData: '='\r\n            },\r\n            controller: [\"$scope\", function($scope) {\r\n                var model = {};\r\n                var structure = {};\r\n                var widgetFilter = null;\r\n                var structureName = {};\r\n                var name = $scope.name;\r\n\r\n                // Watching for changes on adfModel\r\n                $scope.$watch('adfModel', function(oldVal, newVal) {\r\n                    // has model changed or is the model attribute not set\r\n                    if (newVal !== null || (oldVal === null && newVal === null)) {\r\n                        model = $scope.adfModel;\r\n                        widgetFilter = $scope.adfWidgetFilter;\r\n                        if (!model || !model.rows) {\r\n                            structureName = $scope.structure;\r\n                            structure = dashboard.structures[structureName];\r\n                            if (structure) {\r\n                                if (model) {\r\n                                    model.rows = angular.copy(structure).rows;\r\n                                } else {\r\n                                    model = angular.copy(structure);\r\n                                }\r\n                                model.structure = structureName;\r\n                            } else {\r\n                                $log.error('could not find structure ' + structureName);\r\n                            }\r\n                        }\r\n\r\n                        if (model) {\r\n                            if (!model.title) {\r\n                                model.title = $translate.instant('ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD');\r\n                            }\r\n                            if (!model.titleTemplateUrl) {\r\n                                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\r\n                            }\r\n                            $scope.model = model;\r\n                        } else {\r\n                            $log.error('could not find or create model');\r\n                        }\r\n                    }\r\n                }, true);\r\n\r\n                // edit mode\r\n                $scope.editMode = false;\r\n                $scope.editClass = '';\r\n\r\n                function getNewModalScope() {\r\n                    var scope = $scope.$new();\r\n                    return scope;\r\n                }\r\n\r\n                $scope.deleteDashboard = function() {\r\n                    var dashData = {\r\n                        id: model.id,\r\n                        name: model.title\r\n                    };\r\n\r\n                    $rootScope.$broadcast('dashboardDelete', dashData);\r\n                };\r\n\r\n                $scope.toggleEditMode = function(openConfigWindow) {\r\n                    $scope.editMode = !$scope.editMode;\r\n                    if ($scope.editMode) {\r\n                        if (!$scope.continuousEditMode) {\r\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n                            $rootScope.$broadcast('adfIsEditMode');\r\n                        }\r\n\r\n                        if (openConfigWindow) {\r\n                            $scope.editDashboardDialog();\r\n                        }\r\n                    }\r\n\r\n                    if (!$scope.editMode) {\r\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n                    }\r\n                };\r\n\r\n                $scope.saveTemporalDashboard = function() {\r\n                    delete model.temporal;\r\n                    $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n                };\r\n\r\n                var adfToggleEditMode = $scope.$on('adfToggleEditMode', function(event, isNewDashboard) {\r\n                    if (isNewDashboard) {\r\n                        $scope.toggleEditMode(true);\r\n                    } else {\r\n                        $scope.toggleEditMode();\r\n                    }\r\n                });\r\n\r\n                var adfCancelEditMode = $scope.$on('adfCancelEditMode', function(event, isNewDashboard) {\r\n                    if ($scope.editMode) {\r\n                        $scope.cancelEditMode();\r\n                    }\r\n                });\r\n\r\n                $scope.collapseAll = function(collapseExpandStatus) {\r\n                    $rootScope.$broadcast('adfDashboardCollapseExpand', {\r\n                        collapseExpandStatus: collapseExpandStatus\r\n                    });\r\n                };\r\n\r\n                $scope.cancelEditMode = function() {\r\n                    $scope.editMode = false;\r\n                    if (!$scope.continuousEditMode && ($scope.modelCopy !== $scope.adfModel)) {\r\n                        $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\r\n                    }\r\n                    $rootScope.$broadcast('adfDashboardEditsCancelled');\r\n                };\r\n\r\n                var adfEditDashboardDialog = $scope.$on('adfEditDashboardDialog', function(event, isNewDashboard) {\r\n                    if ($scope.editMode) {\r\n                        $scope.editDashboardDialog();\r\n                    }\r\n                });\r\n\r\n                var adfLaunchSearchingFromWidget = $scope.$on('adfLaunchSearchingFromWidget', function(event, widget, configFilter) {\r\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\r\n                });\r\n                var adfWindowTimeChangedFromWidget = $scope.$on('adfWindowTimeChangedFromWidget', function(event, widget, windowFilter) {\r\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\r\n                });\r\n\r\n                // edit dashboard settings\r\n                $scope.editDashboardDialog = function() {\r\n                    var editDashboardScope = getNewModalScope();\r\n                    // create a copy of the title, to avoid changing the title to\r\n                    // \"dashboard\" if the field is empty\r\n                    editDashboardScope.copy = {\r\n                        title: (model.title !== 'ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD' ? model.title : ''),\r\n                        description: model.description,\r\n                        icon: model.icon ? model.icon : 'fa-tachometer'\r\n                    };\r\n\r\n                    // pass icon list\r\n                    editDashboardScope.availableIcons = $faIcons.list();\r\n\r\n                    // pass dashboard structure to scope\r\n                    editDashboardScope.structures = dashboard.structures;\r\n\r\n                    // pass split function to scope, to be able to display structures in multiple columns\r\n                    editDashboardScope.split = split;\r\n\r\n                    var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\r\n                    if (model.editTemplateUrl) {\r\n                        adfEditTemplatePath = model.editTemplateUrl;\r\n                    }\r\n                    var instance = $uibModal.open({\r\n                        scope: editDashboardScope,\r\n                        templateUrl: adfEditTemplatePath,\r\n                        backdrop: 'static',\r\n                        keyboard: false,\r\n                        size: 'lg'\r\n                    });\r\n\r\n                    editDashboardScope.changeStructure = function(name, structure) {\r\n                        $log.info('change structure to ' + name);\r\n                        changeStructure(model, structure);\r\n                        if (model.structure !== name) {\r\n                            model.structure = name;\r\n                        }\r\n                    };\r\n                    editDashboardScope.closeDialog = function() {\r\n                        // copy the new title back to the model\r\n                        model.title = editDashboardScope.copy.title;\r\n                        model.description = editDashboardScope.copy.description;\r\n                        model.icon = editDashboardScope.copy.icon;\r\n\r\n                        // close modal and destroy the scope\r\n                        instance.close();\r\n                        editDashboardScope.$destroy();\r\n                    };\r\n                };\r\n\r\n                var adfOpenWidgetFromOther = $scope.$on('adfOpenWidgetFromOther', function(event, widget, config) {\r\n                    var internal_config = createConfiguration(widget);\r\n                    var _config = angular.merge({}, internal_config, config);\r\n                    var w = {\r\n                        type: widget,\r\n                        config: _config,\r\n                        title: _config.title\r\n                    };\r\n                    addNewWidgetToModel(model, w, name, !$scope.editMode);\r\n                });\r\n\r\n                var adfOpenModalWidgetFromOther = $scope.$on('adfOpenModalWidgetFromOther', function(event, widgetType, config) {\r\n                    var widget = createWidget(widgetType);\r\n                    widget.config = angular.merge({}, widget.config, config);\r\n                    widget.type = widgetType;\r\n                    if (widget.config.title) {\r\n                        widget.title = widget.config.title;\r\n                    }\r\n                    var fullScreenScope = $scope.$new();\r\n                    fullScreenScope.definition = fullScreenScope.widget = widget;\r\n                    var opts = {\r\n                        scope: fullScreenScope,\r\n                        templateUrl: adfTemplatePath + 'widget-fullscreen.html',\r\n                        size: fullScreenScope.definition.modalSize || 'ticket', // 'sm', 'lg'\r\n                        backdrop: 'static',\r\n                        windowClass: (fullScreenScope.definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\r\n                    };\r\n\r\n                    fullScreenScope.persistDashboard = function() {\r\n                        $rootScope.$broadcast('adfOpenWidgetFromOther', this.$parent.widget.type, this.$parent.widget.config);\r\n                        this.closeDialog();\r\n                    }\r\n\r\n                    var instance = $uibModal.open(opts);\r\n                    fullScreenScope.closeDialog = function() {\r\n                        instance.close();\r\n                        fullScreenScope.$destroy();\r\n                    };\r\n\r\n                });\r\n\r\n                var adfAddWidgetDialog = $scope.$on('adfAddWidgetDialog', function(event, isNewDashboard) {\r\n                    if (!model.temporal && model.editable) {\r\n                        if (!$scope.editMode) {\r\n                            $scope.editMode = true;\r\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n                            $rootScope.$broadcast('adfIsEditMode');\r\n                        }\r\n\r\n                        $scope.addWidgetDialog();\r\n                    }\r\n                });\r\n\r\n                // add widget dialog\r\n                $scope.addScopeCfg = {\r\n                    widgetFilter: {},\r\n                    widgetSortingDirection: '',\r\n                    widgetSorting: 'priority'\r\n                };\r\n\r\n                $scope.addWidgetDialog = function() {\r\n                    var addScope = getNewModalScope();\r\n                    var widgets;\r\n                    if (angular.isFunction(widgetFilter)) {\r\n                        widgets = {};\r\n                        angular.forEach(dashboard.widgets, function(widget, type) {\r\n                            if (widgetFilter(widget, type, model)) {\r\n                                widgets[type] = widget;\r\n                            }\r\n                        });\r\n                    } else {\r\n                        widgets = dashboard.widgets;\r\n                    }\r\n                    addScope.widgets = widgets;\r\n\r\n                    angular.forEach(addScope.widgets, function(widget, type) {\r\n                        widget.key = type;\r\n                        if (!widget.category) {\r\n                            widget.category = 'Miscellaneous';\r\n                        }\r\n                    });\r\n\r\n                    // pass createCategories function to scope, if categories option is enabled\r\n                    if ($scope.options.categories) {\r\n                        addScope.createCategories = createCategories;\r\n                    } else {\r\n                        addScope.availableCategories = createCategoriesList(widgets);\r\n                    }\r\n\r\n                    var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\r\n                    if (model.addTemplateUrl) {\r\n                        adfAddTemplatePath = model.addTemplateUrl;\r\n                    }\r\n\r\n                    var opts = {\r\n                        scope: addScope,\r\n                        templateUrl: adfAddTemplatePath,\r\n                        backdrop: 'static',\r\n                        size: 'lg'\r\n                    };\r\n\r\n                    var instance = $uibModal.open(opts);\r\n\r\n                    addScope.widgetFilterCfg = $scope.addScopeCfg;\r\n\r\n                    addScope.addWidget = function(widget) {\r\n                        var w = {\r\n                            type: widget,\r\n                            config: createConfiguration(widget)\r\n                        };\r\n                        addNewWidgetToModel(model, w, name);\r\n                        // close and destroy\r\n                        instance.close();\r\n                        addScope.$destroy();\r\n\r\n                        // check for open edit mode immediately\r\n                        if (isEditModeImmediate(widget)) {\r\n                            openEditMode($scope, w);\r\n                        }\r\n                    };\r\n\r\n                    addScope.changeThumbnail = function(widget) {\r\n                        if (widget.images) {\r\n                            if (angular.isUndefined(widget._currThumb)) {\r\n                                widget._currThumb = 1;\r\n                            } else {\r\n                                widget._currThumb += 1;\r\n                            }\r\n\r\n\r\n                            if (widget._currThumb >= widget.images.length) {\r\n                                widget._currThumb = 0;\r\n                            }\r\n\r\n                            widget._currImg = widget.images[widget._currThumb];\r\n                        }\r\n                    };\r\n\r\n                    addScope.closeDialog = function() {\r\n                        // close and destroy\r\n                        instance.close();\r\n                        addScope.$destroy();\r\n                    };\r\n                };\r\n\r\n                $scope.addNewWidgetToModel = addNewWidgetToModel;\r\n\r\n                $scope.$on('destroy', function() {\r\n                    adfLaunchSearchingFromWidget();\r\n                    adfWindowTimeChangedFromWidget();\r\n                    adfToggleEditMode();\r\n                    adfOpenWidgetFromOther();\r\n                    adfOpenModalWidgetFromOther();\r\n                    adfCancelEditMode();\r\n                    adfAddWidgetDialog();\r\n                    adfEditDashboardDialog();\r\n                });\r\n            }],\r\n            link: function($scope, $element, $attr) {\r\n                // pass options to scope\r\n                var options = {\r\n                    name: $attr.name,\r\n                    editable: true,\r\n                    enableConfirmDelete: stringToBoolean($attr.enableConfirmDelete),\r\n                    maximizable: stringToBoolean($attr.maximizable),\r\n                    collapsible: stringToBoolean($attr.collapsible),\r\n                    categories: stringToBoolean($attr.categories),\r\n                    extraData: {}\r\n                };\r\n\r\n                if (angular.isDefined($attr.editable)) {\r\n                    options.editable = stringToBoolean($attr.editable);\r\n                }\r\n\r\n                if (angular.isDefined($scope.extraData)) {\r\n                    options.extraData = $scope.extraData;\r\n                }\r\n\r\n                options.extraData.editing = $scope.editMode;\r\n\r\n                $scope.options = options;\r\n            },\r\n            templateUrl: adfTemplatePath + 'dashboard.html'\r\n        };\r\n    }]);\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .filter('adfOrderByObjectKey', [\"$filter\", function($filter) {\r\n    \r\n\r\n    return function(item, key){\r\n      var array = [];\r\n      angular.forEach(item, function(value, objectKey){\r\n        value[key] = objectKey;\r\n        array.push(value);\r\n      });\r\n      return $filter('orderBy')(array, key);\r\n    };\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\n/**\r\n * @ngdoc object\r\n * @name adf.dashboardProvider\r\n * @description\r\n *\r\n * The dashboardProvider can be used to register structures and widgets.\r\n */\r\nangular.module('adf.provider', [])\r\n    .provider('dashboard', function () {\r\n\r\n        var widgets = {};\r\n        var widgetsPath = '';\r\n        var structures = {};\r\n        var messageTemplate = '<div class=\"alert alert-primary\">{}</div>';\r\n        var loadingTemplate = '\\\r\n      <div class=\"progress progress-striped active\">\\n\\\r\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\r\n          <span class=\"sr-only\" translate>FORM.MSG.LOADING ...</span>\\n\\\r\n        </div>\\n\\\r\n      </div>';\r\n        var customWidgetTemplatePath = null;\r\n\r\n        // default apply function of widget.edit.apply\r\n        var defaultApplyFunction = function () {\r\n            return true;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#widget\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Registers a new widget.\r\n         *\r\n         * @param {string} name of the widget\r\n         * @param {object} widget to be registered.\r\n         *\r\n         *   Object properties:\r\n         *\r\n         *   - `title` - `{string=}` - The title of the widget.\r\n         *   - `description` - `{string=}` - Description of the widget.\r\n         *   - `category` - `{string=}` - Category of the widget.\r\n         *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\r\n         *   - `config` - `{object}` - Predefined widget configuration.\r\n         *   - `controller` - `{string=|function()=}` - Controller fn that should be\r\n         *      associated with newly created scope of the widget or the name of a\r\n         *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\r\n         *      if passed as a string.\r\n         *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\r\n         *      published to scope under the `controllerAs` name.\r\n         *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\r\n         *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\r\n         *   - `template` - `{string=|function()=}` - html template as a string.\r\n         *   - `templateUrl` - `{string=}` - path to an html template.\r\n         *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\r\n         *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n         *      be injected into the controller. If any of these dependencies are promises, the widget\r\n         *      will wait for them all to be resolved or one to be rejected before the controller is\r\n         *      instantiated.\r\n         *      If all the promises are resolved successfully, the values of the resolved promises are\r\n         *      injected.\r\n         *\r\n         *      The map object is:\r\n         *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\r\n         *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n         *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\r\n         *        and the return value is treated as the dependency. If the result is a promise, it is\r\n         *        resolved before its value is injected into the controller.\r\n         *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n         *      on the scope of the widget.\r\n         *   - `edit` - `{object}` - Edit modus of the widget.\r\n         *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n         *        on the scope of the widget.\r\n         *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\r\n         *        Default is true.\r\n         *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\r\n         *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\r\n         *        The function have to return a boolean or an promise which can be resolved to a boolean.\r\n         *        The function can use injection.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.widget = function (name, widget) {\r\n            var w = angular.extend({\r\n                reload: false,\r\n                frameless: false\r\n            }, widget);\r\n            if (w.edit) {\r\n                var edit = {\r\n                    reload: true,\r\n                    immediate: false,\r\n                    apply: defaultApplyFunction\r\n                };\r\n                angular.extend(edit, w.edit);\r\n                w.edit = edit;\r\n            }\r\n            widgets[name] = w;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#widgetsPath\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Sets the path to the directory which contains the widgets. The widgets\r\n         * path is used for widgets with a templateUrl which contains the\r\n         * placeholder {widgetsPath}. The placeholder is replaced with the\r\n         * configured value, before the template is loaded, but the template is\r\n         * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\r\n         * The default value of widgetPaths is ''.\r\n         *\r\n         *\r\n         * @param {string} path to the directory which contains the widgets\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.widgetsPath = function (path) {\r\n            widgetsPath = path;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#structure\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Registers a new structure.\r\n         *\r\n         * @param {string} name of the structure\r\n         * @param {object} structure to be registered.\r\n         *\r\n         *   Object properties:\r\n         *\r\n         *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\r\n         *     - `styleClass` - `{string}` - CSS Class of the row.\r\n         *     - `columns` - `{Array.<Object>}` - Columns of the row.\r\n         *       - `styleClass` - `{string}` - CSS Class of the column.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.structure = function (name, structure) {\r\n            structures[name] = structure;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#messageTemplate\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the template for messages.\r\n         *\r\n         * @param {string} template for messages.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.messageTemplate = function (template) {\r\n            messageTemplate = template;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#loadingTemplate\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the template which is displayed as\r\n         * long as the widget resources are not resolved.\r\n         *\r\n         * @param {string} template loading template\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.loadingTemplate = function (template) {\r\n            loadingTemplate = template;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#customWidgetTemplatePath\r\n         * @propertyOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the container template for the widgets\r\n         *\r\n         * @param {string} path to the custom widget template\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.customWidgetTemplatePath = function (templatePath) {\r\n            customWidgetTemplatePath = templatePath;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc service\r\n         * @name adf.dashboard\r\n         * @description\r\n         *\r\n         * The dashboard holds all options, structures and widgets.\r\n         *\r\n         * @property {Array.<Object>} widgets Array of registered widgets.\r\n         * @property {string} widgetsPath Default path for widgets.\r\n         * @property {Array.<Object>} structures Array of registered structures.\r\n         * @property {string} messageTemplate Template for messages.\r\n         * @property {string} loadingTemplate Template for widget loading.\r\n         * * @property {string} customWidgetTemplatePath Changes the container template for the widgets\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.$get = function () {\r\n            var cid = 0;\r\n\r\n            return {\r\n                widgets: widgets,\r\n                widgetsPath: widgetsPath,\r\n                structures: structures,\r\n                messageTemplate: messageTemplate,\r\n                loadingTemplate: loadingTemplate,\r\n                customWidgetTemplatePath: customWidgetTemplatePath,\r\n\r\n                /**\r\n                 * @ngdoc method\r\n                 * @name adf.dashboard#id\r\n                 * @methodOf adf.dashboard\r\n                 * @description\r\n                 *\r\n                 * Creates an ongoing numeric id. The method is used to create ids for\r\n                 * columns and widgets in the dashboard.\r\n                 */\r\n                id: function () {\r\n                    return new Date().getTime() + '-' + (++cid);\r\n                },\r\n\r\n                /**\r\n                 * @ngdoc method\r\n                 * @name adf.dashboard#idEqual\r\n                 * @methodOf adf.dashboard\r\n                 * @description\r\n                 *\r\n                 * Checks if the given ids are equal.\r\n                 *\r\n                 * @param {string} id widget or column id\r\n                 * @param {string} other widget or column id\r\n                 */\r\n                idEquals: function (id, other) {\r\n                    // use toString, because old ids are numbers\r\n                    return ((id) && (other)) && (id.toString() === other.toString());\r\n                }\r\n            };\r\n        };\r\n\r\n    });\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardRow', [\"$compile\", \"adfTemplatePath\", \"columnTemplate\", function ($compile, adfTemplatePath, columnTemplate) {\r\n    \r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        row: '=',\r\n        adfModel: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\r\n      link: function($scope, $element) {\r\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\r\n          $compile(columnTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        }\r\n      }\r\n    };\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfStructurePreview', [\"adfTemplatePath\", function(adfTemplatePath) {\r\n\r\n    function adjustRowHeight(container){\r\n      if (container.rows && container.rows.length > 0){\r\n        var height = 100 / container.rows.length;\r\n        angular.forEach(container.rows, function(row){\r\n          row.style = {\r\n            height: height + '%'\r\n          }\r\n\r\n          if (row.columns){\r\n            angular.forEach(row.columns, function(column){\r\n              adjustRowHeight(column);\r\n            });\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    function prepareStructure($scope){\r\n      var structure = angular.copy($scope.structure);\r\n      adjustRowHeight(structure);\r\n      $scope.preview = structure;\r\n    }\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        name: '=',\r\n        structure: '=',\r\n        selected: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'structure-preview.html',\r\n      link: prepareStructure\r\n    };\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf')\r\n    .directive('adfWidgetContent', [\"$log\", \"$q\", \"widgetService\", \"$compile\", \"$controller\", \"$injector\", \"dashboard\", \"$translate\", function($log, $q, widgetService,\r\n        $compile, $controller, $injector, dashboard, $translate) {\r\n\r\n        function renderError($element, msg) {\r\n            $log.warn(msg);\r\n            $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\r\n        }\r\n\r\n        function compileWidget($scope, $element, currentScope, configChanged) {\r\n            var model = $scope.model;\r\n            var content = $scope.content;\r\n\r\n            var extra = $scope.extra;\r\n\r\n            var newScope = currentScope;\r\n            if (!model) {\r\n                $translate('ADF.ERROR.MODEL_IS_UNDEFINED').then(function(translateMessage) {\r\n                    renderError($element, translateMessage);\r\n                });\r\n            } else if (!content) {\r\n                if (model.title) {\r\n                    $translate('ADF.ERROR.WIDGET_FOR_DEPRECTATED', {\r\n                        title: model.title\r\n                    }).then(function(translateMessage) {\r\n                        renderError($element, translateMessage);\r\n                    });\r\n                } else {\r\n                    $translate('ADF.ERROR.WIDGET_DEPRECTATED').then(function(translateMessage) {\r\n                        renderError($element, translateMessage);\r\n                    });\r\n                }\r\n            } else {\r\n                if (newScope) {\r\n                    var is_menu = newScope.menu !== undefined && newScope.menu !== null && (!newScope.isPaginationEnable || !newScope.isPaginationEnable());\r\n                    var is_itemsPerPage = newScope.itemsPerPage !== undefined && newScope.itemsPerPage !== null;\r\n                    if (is_menu || is_itemsPerPage || configChanged || !angular.isFunction(newScope.reloadData)) {\r\n                        newScope = renderWidget($scope, $element, currentScope, model, content, extra);\r\n                    } else {\r\n                        newScope.reloadData();\r\n                    }\r\n                } else {\r\n                    newScope = renderWidget($scope, $element, currentScope, model, content, extra);\r\n                }\r\n            }\r\n\r\n            function _getWindowTime(type) {\r\n                if (type === \"custom\") {\r\n                    return {\r\n                        from: newScope.config.windowFilter.from,\r\n                        to: newScope.config.windowFilter.to\r\n                    }\r\n                }\r\n                var from = window.moment().subtract(1, type);\r\n                return {\r\n                    from: from._d\r\n                };\r\n            }\r\n\r\n            if (newScope) {\r\n                if (newScope.config) {\r\n                    newScope.config.getWindowTime = function() {\r\n                        var windowFilter = newScope.config.windowFilter;\r\n                        if (windowFilter && windowFilter.type) {\r\n                            var winTime = _getWindowTime(windowFilter.type);\r\n                            /* jshint ignore:start */\r\n                            if (!window.eval(newScope.config.windowFilter.rawdate)) {\r\n                                for (var key in winTime) {\r\n                                    winTime[key] = window.moment(winTime[key]).format();\r\n                                }\r\n                                winTime['rawdate'] = true;\r\n                            }\r\n                            /* jshint ignore:end */\r\n                            return winTime;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (extra) {\r\n                    newScope.editing = extra.editing ? true : false;\r\n                    newScope.extraData = extra;\r\n                }\r\n            }\r\n            return newScope;\r\n        }\r\n\r\n        function renderWidget($scope, $element, currentScope, model, content, extra) {\r\n            // display loading template\r\n            $element.html(dashboard.loadingTemplate);\r\n\r\n            // create new scope\r\n            var templateScope = $scope.$new();\r\n\r\n            // pass config object to scope\r\n            if (!model.config) {\r\n                model.config = {};\r\n            }\r\n\r\n            templateScope.config = model.config;\r\n            templateScope.editing = extra && extra.editing;\r\n\r\n            if (extra) {\r\n                templateScope.extra = extra;\r\n            }\r\n\r\n            templateScope.selectionManager = (currentScope && currentScope.selectionManager) ? currentScope.selectionManager : undefined;\r\n\r\n            // local injections\r\n            var base = {\r\n                $scope: templateScope,\r\n                widget: model,\r\n                config: model.config\r\n            };\r\n\r\n            // get resolve promises from content object\r\n            var resolvers = {};\r\n            resolvers.$tpl = widgetService.getTemplate(content);\r\n            if (content.resolve) {\r\n                angular.forEach(content.resolve, function(promise, key) {\r\n                    if (angular.isString(promise)) {\r\n                        resolvers[key] = $injector.get(promise);\r\n                    } else {\r\n                        resolvers[key] = $injector.invoke(promise, promise, base);\r\n                    }\r\n                });\r\n            }\r\n\r\n            // resolve all resolvers\r\n            $q.all(resolvers).then(function(locals) {\r\n                angular.extend(locals, base);\r\n\r\n                // pass resolve map to template scope as defined in resolveAs\r\n                if (content.resolveAs) {\r\n                    templateScope[content.resolveAs] = locals;\r\n                }\r\n\r\n                // compile & render template\r\n                var template = locals.$tpl;\r\n                $element.html(template);\r\n                if (content.controller) {\r\n                    var templateCtrl = $controller(content.controller, locals);\r\n                    if (content.controllerAs) {\r\n                        templateScope[content.controllerAs] = templateCtrl;\r\n                    }\r\n                    $element.children().data('$ngControllerController', templateCtrl);\r\n                }\r\n                $compile($element.contents())(templateScope);\r\n            }, function(reason) {\r\n                // handle promise rejection\r\n                var msg = 'ADF.ERROR.COULD_NOT_RESOLVE_ALL_PROMISSES';\r\n                $translate(msg, {\r\n                    reason: (reason ? \": \" + reason : reason)\r\n                }).then(function(translateMessage) {\r\n                    renderError($element, translateMessage);\r\n                });\r\n            });\r\n\r\n            // destroy old scope\r\n            if (currentScope) {\r\n                currentScope.$destroy();\r\n            }\r\n\r\n            return templateScope;\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            scope: {\r\n                model: '=',\r\n                content: '=',\r\n                extra: '='\r\n            },\r\n            link: function($scope, $element) {\r\n                var currentScope = compileWidget($scope, $element, null);\r\n                var widgetConfigChangedEvt = $scope.$on('widgetConfigChanged', function() {\r\n                    currentScope = compileWidget($scope, $element, currentScope, true);\r\n                });\r\n\r\n                var widgetReloadEvt = $scope.$on('widgetReload', function() {\r\n                    currentScope = compileWidget($scope, $element, currentScope, false);\r\n                });\r\n\r\n                $scope.$on('destroy', function() {\r\n                    widgetConfigChangedEvt();\r\n                    widgetReloadEvt();\r\n                });\r\n            }\r\n        };\r\n    }]);\n\r\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n/**\r\n * The widget service provide helper functions to render widgets and their content.\r\n */\r\nangular.module('adf')\r\n  .factory('widgetService', [\"$http\", \"$q\", \"$sce\", \"$templateCache\", \"dashboard\", function($http, $q, $sce, $templateCache, dashboard) {\r\n    \r\n\r\n    function parseUrl(url) {\r\n      var parsedUrl = url;\r\n      if (url.indexOf('{widgetsPath}') >= 0) {\r\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\r\n                .replace('//', '/');\r\n        if (parsedUrl.indexOf('/') === 0) {\r\n          parsedUrl = parsedUrl.substring(1);\r\n        }\r\n      }\r\n      return parsedUrl;\r\n    }\r\n\r\n    var exposed = {};\r\n\r\n    exposed.getTemplate = function(widget){\r\n      var deferred = $q.defer();\r\n\r\n      if (widget.template) {\r\n        deferred.resolve(widget.template);\r\n      } else if (widget.templateUrl) {\r\n        // try to fetch template from cache\r\n        var tpl = $templateCache.get(widget.templateUrl);\r\n        if (tpl) {\r\n          deferred.resolve(tpl);\r\n        } else {\r\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\r\n          $http.get(url)\r\n               .success(function(response) {\r\n                 // put response to cache, with unmodified url as key\r\n                 $templateCache.put(widget.templateUrl, response);\r\n                 deferred.resolve(response);\r\n               })\r\n               .error(function() {\r\n                 deferred.reject('could not load template');\r\n               });\r\n        }\r\n      }\r\n\r\n      return deferred.promise;\r\n    };\r\n\r\n    return exposed;\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf')\r\n    .directive('adfWidget', [\"$injector\", \"$q\", \"$log\", \"$uibModal\", \"$rootScope\", \"$interval\", \"dashboard\", \"adfTemplatePath\", \"Filter\", function($injector, $q, $log, $uibModal, $rootScope, $interval, dashboard, adfTemplatePath, Filter) {\r\n        function preLink($scope) {\r\n            var definition = $scope.definition;\r\n\r\n            if (definition) {\r\n                var w = dashboard.widgets[definition.type];\r\n                if (w) {\r\n                    // pass title\r\n                    if (!definition.title) {\r\n                        definition.title = w.title;\r\n                    }\r\n\r\n                    if (!definition.titleTemplateUrl) {\r\n                        definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\r\n                        if (w.titleTemplateUrl) {\r\n                            definition.titleTemplateUrl = w.titleTemplateUrl;\r\n                        }\r\n                    }\r\n\r\n                    if (!definition.editTemplateUrl) {\r\n                        definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\r\n                        if (w.editTemplateUrl) {\r\n                            definition.editTemplateUrl = w.editTemplateUrl;\r\n                        }\r\n                    }\r\n\r\n                    if (!definition.titleTemplateUrl) {\r\n                        definition.frameless = w.frameless;\r\n                    }\r\n\r\n                    if (!definition.styleClass) {\r\n                        definition.styleClass = w.styleClass;\r\n                    }\r\n\r\n                    // set id for sortable\r\n                    if (!definition.wid) {\r\n                        definition.wid = dashboard.id();\r\n                    }\r\n\r\n                    // pass copy of widget to scope\r\n                    $scope.widget = angular.copy(w);\r\n\r\n                    // create config object\r\n                    var config = definition.config;\r\n                    if (config) {\r\n                        if (angular.isString(config)) {\r\n                            config = angular.fromJson(config);\r\n                        }\r\n                    } else {\r\n                        config = {};\r\n                    }\r\n\r\n                    if (typeof $scope.widget.show_modal_footer === \"undefined\") {\r\n                        $scope.widget.show_modal_footer = true;\r\n                    }\r\n\r\n                    if (typeof $scope.widget.show_reload_config === \"undefined\") {\r\n                        $scope.widget.show_reload_config = true;\r\n                    }\r\n\r\n                    // pass config to scope\r\n                    $scope.config = config;\r\n\r\n                    // collapse exposed $scope.widgetState property\r\n                    if (!$scope.widgetState) {\r\n                        $scope.widgetState = {};\r\n                        $scope.widgetState.isCollapsed = (w.collapsed === true) ? w.collapsed : false;\r\n                    }\r\n\r\n                } else {\r\n                    $log.warn('could not find widget ' + definition.type);\r\n                }\r\n            } else {\r\n                $log.debug('definition not specified, widget was probably removed');\r\n            }\r\n        }\r\n\r\n        function postLink($scope, $element) {\r\n            var definition = $scope.definition;\r\n            if (!definition) {\r\n                $log.debug('widget not found');\r\n                return;\r\n            }\r\n            if (!$scope.config) {\r\n                $scope.config = {};\r\n            }\r\n\r\n            var config = $scope.config;\r\n\r\n            // bind close function\r\n            var deleteWidget = function() {\r\n                var column = $scope.col;\r\n                if (column) {\r\n                    var index = column.widgets.indexOf(definition);\r\n                    if (index >= 0) {\r\n                        column.widgets.splice(index, 1);\r\n                    }\r\n                }\r\n                $element.remove();\r\n                $rootScope.$broadcast('adfWidgetRemovedFromColumn');\r\n            };\r\n\r\n            $scope.remove = function() {\r\n                if ($scope.options.enableConfirmDelete) {\r\n                    var deleteScope = $scope.$new();\r\n\r\n                    var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\r\n                    if (definition.deleteTemplateUrl) {\r\n                        deleteTemplateUrl = definition.deleteTemplateUrl;\r\n                    }\r\n                    var opts = {\r\n                        scope: deleteScope,\r\n                        templateUrl: deleteTemplateUrl,\r\n                        backdrop: 'static'\r\n                    };\r\n                    var instance = $uibModal.open(opts);\r\n\r\n                    deleteScope.closeDialog = function() {\r\n                        instance.close();\r\n                        deleteScope.$destroy();\r\n                    };\r\n                    deleteScope.deleteDialog = function() {\r\n                        deleteWidget();\r\n                        deleteScope.closeDialog();\r\n                    };\r\n                } else {\r\n                    deleteWidget();\r\n                }\r\n            };\r\n\r\n\r\n            $scope.print = function() {\r\n                if (!$scope.editMode) {\r\n                    $scope.$broadcast('widgetPrint');\r\n                }\r\n            }\r\n\r\n            $scope.isExecuteOperationEnabled = function() {\r\n\r\n                if (config.entityKey)\r\n                    return true;\r\n                var filter = config.filter;\r\n                if (typeof filter === \"string\") {\r\n                    return filter.length > 0;\r\n                }\r\n                if (typeof filter === \"object\") {\r\n                    return filter.value.length > 2 && filter.oql;\r\n                }\r\n                return false;\r\n            }\r\n\r\n            $scope.executeOperation = function() {\r\n                if (!$scope.editMode) {\r\n\r\n                    $scope.$parent.$broadcast('widgetExecuteOperation');\r\n                }\r\n            };\r\n\r\n            $scope.filter = {\r\n                value: \"\"\r\n            };\r\n            $scope.sort = {\r\n                value: \"\",\r\n                direction: \"\"\r\n            };\r\n\r\n            $scope.toggleAdvanced = 1;\r\n            var filter = config.filter;\r\n            if (typeof filter === \"object\" && filter.oql && filter.oql.length > 2) {\r\n                $scope.search = {\r\n                    oql: filter.oql,\r\n                    json: filter.value\r\n                };\r\n                $scope.toggleAdvanced = 0;\r\n            } else if (typeof filter === \"string\") {\r\n                $scope.search = {\r\n                    quick: filter\r\n                };\r\n                $scope.toggleAdvanced = 1;\r\n            } else if (typeof filter === \"object\" && filter.fields) {\r\n                $scope.search = {\r\n                    customFilter: filter.fields\r\n                };\r\n                $scope.search.fields = [];\r\n                angular.forEach(filter.fields, function(v, key) {\r\n                    $scope.search.fields.push(v.name);\r\n                });\r\n                $scope.toggleAdvanced = 2;\r\n            } else {\r\n                $scope.search = {\r\n                    quick: filter = \"\"\r\n                };\r\n            }\r\n\r\n            $scope.toggleFilter = function(advanced) {\r\n                $scope.toggleAdvanced = advanced;\r\n            };\r\n            $scope.filterAvailable = false;\r\n            $scope.showFilter = function() {\r\n                $scope.filterAvailable = $scope.filterAvailable === true ? false : true;\r\n            };\r\n\r\n            $scope.showFinalFilter = false;\r\n\r\n            $scope.launchSearching = function() {\r\n                var widget = {\r\n                    definition: definition,\r\n                    element: $element\r\n                };\r\n\r\n                $rootScope.$broadcast('adfLaunchSearchingFromWidget', widget, $scope.config.filter);\r\n                $scope.reload(true);\r\n            }\r\n            $scope.addCustomFilter = function(key) {\r\n                $scope.search.customFilter = $scope.search.customFilter ? $scope.search.customFilter : [];\r\n                $scope.search.customFilter.push({\r\n                    name: key,\r\n                    value: ''\r\n                });\r\n            }\r\n\r\n            $scope.launchCustomFilter = function() {\r\n                if ($scope.search.customFilter && $scope.search.customFilter.length > 0) {\r\n                    $scope.search.oql = $scope.search.json = '';\r\n\r\n                    $scope.config.filter = {\r\n                        value: {\r\n                            and: []\r\n                        },\r\n                        fields: $scope.search.customFilter\r\n                    }\r\n                    angular.forEach($scope.search.customFilter, function(v, key) {\r\n                        if (v.value) {\r\n                            var like = {};\r\n                            like[v.name] = v.value;\r\n                            $scope.config.filter.value.and.push({\r\n                                'like': like\r\n                            });\r\n                        }\r\n\r\n                    });\r\n                    $scope.config.filter.value = JSON.stringify($scope.config.filter.value);\r\n                }\r\n\r\n                $scope.launchSearching();\r\n            }\r\n\r\n\r\n\r\n            $scope.deleteFilter = function(value, model) {\r\n                angular.forEach($scope.search.customFilter, function(v, key) {\r\n                    if (v.name === value) {\r\n                        $scope.search.customFilter.splice(key, 1);\r\n                    }\r\n                });\r\n                if ($scope.search.customFilter.length === 0) {\r\n                    $scope.config.filter = {};\r\n                }\r\n            };\r\n\r\n            $scope.launchSearchingAdv = function() {\r\n                if (!$scope.filterApplied) {\r\n                    $scope.search.quick = '';\r\n                    if ($scope.search.json === '' || $scope.search.json === '{}' || (!angular.isString($scope.search.json) && Object.keys($scope.search.json).length === 0)) {\r\n                        $scope.config.filter = {\r\n                            oql: '',\r\n                            value: ''\r\n                        };\r\n                    } else {\r\n                        $scope.config.filter = {\r\n                            oql: $scope.search.oql,\r\n                            value: $scope.search.json\r\n                        };\r\n                    }\r\n                    $scope.launchSearching();\r\n                    $scope.filterApplied = true;\r\n                }\r\n            }\r\n\r\n            $scope.applyFilter = function(event) {\r\n                $scope.launchSearching();\r\n            }\r\n\r\n            $scope.launchSearchingQuick = function() {\r\n                if (!$scope.filterApplied) {\r\n                    $scope.search.oql = $scope.search.json = '';\r\n                    $scope.config.filter = $scope.search.quick;\r\n                    $scope.launchSearching();\r\n                    $scope.filterApplied = true;\r\n                }\r\n            }\r\n\r\n            var windowTimeChanged = $scope.$on('onWindowTimeChanged', function(event, timeObj) {\r\n                $scope.config.windowFilter = timeObj ? timeObj : (config.windowFilter ? {} : timeObj);\r\n                var widget = {\r\n                    definition: definition,\r\n                    element: $element\r\n                }\r\n                $rootScope.$broadcast('adfWindowTimeChangedFromWidget', widget, $scope.config.windowFilter);\r\n                $scope.reload();\r\n            });\r\n\r\n            $scope.enter = function(event) {\r\n                var keycode = (event.keyCode ? event.keyCode : event.which);\r\n                if (keycode === 13) {\r\n                    if ($scope.toggleAdvanced === 0)\r\n                        $scope.launchSearchingAdv();\r\n                    if ($scope.toggleAdvanced === 1)\r\n                        $scope.launchSearchingQuick();\r\n                    if ($scope.toggleAdvanced === 2)\r\n                        $scope.launchCustomFilter();\r\n\r\n                } else if (keycode === 19) {\r\n                    $scope.showFinalFilter = $scope.showFinalFilter === false ? true : false;\r\n                } else {\r\n                    $scope.filterApplied = false;\r\n                }\r\n            }\r\n\r\n\r\n            $scope.customSelectors = [];\r\n            $scope.getCustomSelectors = function() {\r\n                if ($scope.config.customSelectors) {\r\n                    $scope.customSelectors = $scope.config.customSelectors;\r\n                } else {\r\n                    config.widgetSelectors().findFields(\"\").then(function(fields) {\r\n                        $scope.customSelectors = fields;\r\n                        $scope.$apply();\r\n                    }).catch(function(err) {\r\n                        $log.error(err);\r\n                    });\r\n                }\r\n            }\r\n\r\n            $scope.customFilter = [];\r\n            $scope.getcustomFilter = function() {\r\n                config.widgetSelectors().findFields(\"\").then(function(fields) {\r\n                    $scope.customFilter = fields;\r\n                    $scope.$apply();\r\n                }).catch(function(err) {\r\n                    $log.error(err);\r\n                });\r\n\r\n            }\r\n\r\n            $scope.ifCustomFilter = function() {\r\n                return $scope.customSelectors && config.sort && $scope.definition.type === 'FullDevicesList' && $scope.toggleAdvanced === 2;\r\n            }\r\n\r\n            $scope.showCustomFields = function() {\r\n                return $scope.definition.type === 'FullDevicesList' && $scope.toggleAdvanced === 2 && $scope.search.customFilter && $scope.filterAvailable && !$scope.editMode;\r\n            }\r\n\r\n            $scope.changeDirection = function() {\r\n                var direction = config.sort.direction;\r\n                if (direction === 'DESCENDING') {\r\n                    $scope.config.sort.direction = 'ASCENDING'\r\n                } else if (direction === 'ASCENDING') {\r\n                    $scope.config.sort.direction = 'DESCENDING'\r\n                }\r\n                $scope.reload();\r\n            }\r\n\r\n            $scope.changeDefaultTab = function() {\r\n\r\n\r\n                $scope.reload();\r\n            }\r\n\r\n            $scope.debugQuery = function() {\r\n                Filter.parseQuery($scope.search.oql || '')\r\n                    .then(function(data) {\r\n                        //$scope.elementos = data;\r\n                        $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\r\n                        $scope.unknownWords = '';\r\n                        $scope.filter.error = null;\r\n                    })\r\n                    .catch(function(err) {\r\n                        $scope.filter.error = err;\r\n                        // Tratar el error\r\n                    });\r\n\r\n            }\r\n\r\n            $scope.autocomplete_options = function() {\r\n                var autocomplete_options = {\r\n                    suggest: Filter.suggest_field_delimited,\r\n                    customSelectors: config.widgetSelectors()\r\n                };\r\n\r\n                return autocomplete_options;\r\n\r\n            };\r\n\r\n            // Multiple selection\r\n            $scope.selectedItems = {};\r\n\r\n            // Gestor de seleccion\r\n            $scope.selectionManager = {\r\n                currentSelection: $scope.selectedItems,\r\n                isSelected: function(key, obj) {\r\n                    if ($scope.selectedItems[key] && !angular.isUndefined(obj)) {\r\n                        $scope.selectedItems[key].data = obj;\r\n                    }\r\n\r\n                    return $scope.selectedItems[key] ? true : false;\r\n                },\r\n                totalSelected: function() {\r\n                    return Object.keys($scope.selectedItems).length;\r\n                }\r\n            };\r\n\r\n            $scope.manageSelectedItems = function() {\r\n                var selectionScope = $scope.$new();\r\n\r\n                selectionScope.selectionConfig = config.selectionConfig;\r\n\r\n                selectionScope.selectedItems = [];\r\n                angular.forEach($scope.selectedItems, function(value, key) {\r\n                    selectionScope.selectedItems.push({\r\n                        key: key,\r\n                        value: value\r\n                    });\r\n                });\r\n\r\n                selectionScope.currentSelection = {\r\n                    selected: selectionScope.selectedItems\r\n                };\r\n\r\n                var manageItemsSelectedTemplate = adfTemplatePath + 'widget-selection.html';\r\n                var opts = {\r\n                    scope: selectionScope,\r\n                    templateUrl: manageItemsSelectedTemplate,\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    animation: true\r\n                };\r\n\r\n                var instance = $uibModal.open(opts);\r\n\r\n                selectionScope.restoreSelection = function() {\r\n                    selectionScope.currentSelection = {\r\n                        selected: selectionScope.selectedItems\r\n                    };\r\n                };\r\n\r\n                selectionScope.clearSelection = function() {\r\n                    selectionScope.currentSelection.selected = [];\r\n                };\r\n\r\n                // Cierra sy guarda los datos de nueva selección\r\n                selectionScope.applyFilter = function(type) {\r\n                    var customOql = selectionScope.selectionConfig.filterAction(selectionScope.currentSelection.selected, type);\r\n\r\n                    if (!angular.isUndefined(customOql) && customOql !== null) {\r\n                        $scope.toggleAdvanced = 0;\r\n                        Filter.parseQuery(customOql).then(function(data) {\r\n                            $scope.search.oql = customOql;\r\n                            $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\r\n                            $scope.unknownWords = '';\r\n                            $scope.filter.error = null;\r\n\r\n                            $scope.launchSearchingAdv();\r\n                        }).catch(function(err) {\r\n                            $scope.filter.error = err;\r\n                        });\r\n                    }\r\n                };\r\n\r\n                selectionScope.executeOperation = function(operationType) {\r\n                    if (!$scope.editMode) {\r\n                        $scope.$parent.$broadcast('widgetExecuteOperation', {\r\n                            'selectedItems': selectionScope.currentSelection.selected,\r\n                            'type': operationType\r\n                        });\r\n                    }\r\n                };\r\n\r\n                // Cierra sy guarda los datos de nueva selección\r\n                selectionScope.saveChangesDialog = function() {\r\n                    var finalSelection = {};\r\n                    angular.forEach(selectionScope.currentSelection.selected, function(data, idx) {\r\n                        finalSelection[data.key] = {\r\n                            data: data.value.data,\r\n                            visible: data.value.visible\r\n                        };\r\n                    });\r\n\r\n                    $scope.selectedItems = angular.copy(finalSelection);\r\n                    $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n\r\n                    $scope.selectionManager.lastItem = {};\r\n                    $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n\r\n                    instance.close();\r\n                    selectionScope.$destroy();\r\n                };\r\n\r\n                // Cierra sin realizar ninguna acción\r\n                selectionScope.closeDialog = function() {\r\n                    instance.close();\r\n                    selectionScope.$destroy();\r\n                };\r\n            };\r\n\r\n\r\n            // bind edit function\r\n            $scope.edit = function() {\r\n                var editScope = $scope.$new();\r\n                editScope.definition = angular.copy(definition);\r\n\r\n                var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\r\n                if (definition.editTemplateUrl) {\r\n                    adfEditTemplatePath = definition.editTemplateUrl;\r\n                }\r\n\r\n                var opts = {\r\n                    scope: editScope,\r\n                    templateUrl: adfEditTemplatePath,\r\n                    backdrop: 'static',\r\n                    size: 'lg'\r\n                };\r\n\r\n                var instance = $uibModal.open(opts);\r\n\r\n                editScope.closeDialog = function() {\r\n                    instance.close();\r\n                    editScope.$destroy();\r\n                };\r\n\r\n                // TODO create util method\r\n                function createApplyPromise(result) {\r\n                    var promise;\r\n                    if (typeof result === 'boolean') {\r\n                        var deferred = $q.defer();\r\n                        if (result) {\r\n                            deferred.resolve();\r\n                        } else {\r\n                            deferred.reject();\r\n                        }\r\n                        promise = deferred.promise;\r\n                    } else {\r\n                        promise = $q.when(result);\r\n                    }\r\n                    return promise;\r\n                }\r\n\r\n                editScope.saveDialog = function() {\r\n                    // clear validation error\r\n                    editScope.validationError = null;\r\n\r\n                    // build injection locals\r\n                    var widget = $scope.widget;\r\n\r\n                    // create a default apply method for widgets\r\n                    // without edit mode\r\n                    // see issue https://goo.gl/KHPQLZ\r\n                    var applyFn;\r\n                    if (widget.edit) {\r\n                        applyFn = widget.edit.apply;\r\n                    } else {\r\n                        applyFn = function() {\r\n                            return true;\r\n                        };\r\n                    }\r\n\r\n                    // injection locals\r\n                    var locals = {\r\n                        widget: widget,\r\n                        definition: editScope.definition,\r\n                        config: editScope.definition.config\r\n                    };\r\n\r\n                    // invoke apply function and apply if success\r\n                    var result = $injector.invoke(applyFn, applyFn, locals);\r\n                    createApplyPromise(result).then(function() {\r\n                        definition.title = editScope.definition.title;\r\n                        angular.extend(definition.config, editScope.definition.config);\r\n\r\n                        editScope.closeDialog();\r\n\r\n                        if (widget.edit && widget.edit.reload) {\r\n                            $scope.setReloadTimeout();\r\n                            // reload content after edit dialog is closed\r\n                            $scope.$broadcast('widgetConfigChanged');\r\n                        }\r\n                    }, function(err) {\r\n                        if (err) {\r\n                            editScope.validationError = err;\r\n                        } else {\r\n                            editScope.validationError = 'VALIDATION_DURING_APPLY_FAILED';\r\n                        }\r\n                    });\r\n                };\r\n\r\n            };\r\n\r\n\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            templateUrl: dashboard.customWidgetTemplatePath ? dashboard.customWidgetTemplatePath : adfTemplatePath + 'widget.html',\r\n            scope: {\r\n                definition: '=',\r\n                col: '=column',\r\n                editMode: '=',\r\n                options: '=',\r\n                widgetState: '='\r\n            },\r\n            controller: [\"$scope\", function($scope) {\r\n                var adfDashboardCollapseExpand = $scope.$on('adfDashboardCollapseExpand', function(event, args) {\r\n                    $scope.widgetState.isCollapsed = args.collapseExpandStatus;\r\n                });\r\n\r\n                var adfWidgetEnterEditMode = $scope.$on('adfWidgetEnterEditMode', function(event, widget) {\r\n                    if (dashboard.idEquals($scope.definition.wid, widget.wid)) {\r\n                        $scope.edit();\r\n                    }\r\n                });\r\n\r\n                var adfIsEditMode = $scope.$on('adfIsEditMode', function(event, widget) {\r\n                    $scope.editing = true;\r\n                });\r\n\r\n                var adfDashboardChanged = $scope.$on('adfDashboardChanged', function(event, widget) {\r\n                    $scope.editing = false;\r\n                });\r\n\r\n                var adfDashboardEditsCancelled = $scope.$on('adfDashboardEditsCancelled', function(event, widget) {\r\n                    $scope.editing = false;\r\n                });\r\n\r\n                $scope.widgetClasses = function(w, definition) {\r\n                    var classes = definition.styleClass || '';\r\n                    // w is undefined, if the type of the widget is unknown\r\n                    // see issue #216\r\n                    if (!w || !w.frameless || $scope.editMode) {\r\n                        classes += ' panel panel-default';\r\n                    }\r\n                    return classes;\r\n                };\r\n\r\n                $scope.openFullScreen = function() {\r\n\r\n                    $scope.$emit('adfOpenModalWidgetFromOther', $scope.definition.type, $scope.config);\r\n\r\n                    // var definition = $scope.definition;\r\n                    // var fullScreenScope = $scope.$new();\r\n                    // var opts = {\r\n                    //     scope: fullScreenScope,\r\n                    //     templateUrl: adfTemplatePath + 'widget-fullscreen.html',\r\n                    //     size: definition.modalSize || 'lg', // 'sm', 'lg'\r\n                    //     backdrop: 'static',\r\n                    //     windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\r\n                    // };\r\n\r\n                    // var instance = $uibModal.open(opts);\r\n\r\n                    // fullScreenScope.reload = function() {\r\n                    //     fullScreenScope.$broadcast('widgetReload');\r\n                    // };\r\n\r\n                    // fullScreenScope.closeDialog = function() {\r\n                    //     instance.close();\r\n                    //     fullScreenScope.$destroy();\r\n                    // };\r\n                };\r\n\r\n                $scope.openFilter = function() {\r\n\r\n                }\r\n\r\n                $scope.openAboutScreen = function(size) {\r\n                    size = 'md';\r\n                    var modalInstance = $uibModal.open({\r\n                        animation: true,\r\n                        templateUrl: 'widgetAboutModal.html',\r\n                        controller: [\"$scope\", \"$uibModalInstance\", \"information\", function($scope, $uibModalInstance, information) {\r\n                            $scope.about = {};\r\n                            $scope.about.info = information;\r\n                            $scope.ok = function() {\r\n                                $uibModalInstance.close();\r\n                            };\r\n                        }],\r\n                        'size': size,\r\n                        resolve: {\r\n                            information: function() {\r\n                                return $scope.config.about;\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    modalInstance.result.then(function(selectedItem) {\r\n                        $scope.selected = selectedItem;\r\n                    }, function() {\r\n                        $log.info('Modal dismissed at: ' + new Date());\r\n                    });\r\n                };\r\n\r\n                $scope.saveWidgetScreen = function(wId) {\r\n                    $scope.$emit('generateSnapshot', {\r\n                        'objectSelector': '.widget_' + wId,\r\n                        'fileName': 'capture_' + new Date().getTime()\r\n                    });\r\n                };\r\n\r\n                var onWindowTimeChanged = function(timeObj) {\r\n                    var filter = {\r\n                        and: []\r\n                    };\r\n                    if (timeObj && timeObj.from) {\r\n                        filter.and.push({\r\n                            gt: {\r\n                                operationDate: timeObj.from\r\n                            }\r\n                        });\r\n\r\n                        if (timeObj.to) {\r\n                            filter.and.push({\r\n                                lt: {\r\n                                    operationDate: timeObj.to\r\n                                }\r\n                            });\r\n                        }\r\n                    } else {\r\n                        filter = null;\r\n                    }\r\n                    return filter;\r\n                }\r\n\r\n                var createQuickFilter = function(fieldsQuickSearch, filter) {\r\n                    var _filter = {\r\n                        or: []\r\n                    };\r\n                    var criteria;\r\n                    fieldsQuickSearch.forEach(function(field) {\r\n                        criteria = {};\r\n                        criteria[field.operator] = {};\r\n                        criteria[field.operator][field.name] = $scope.config.filter;\r\n                        _filter.or.push(criteria);\r\n                    });\r\n                    return _filter;\r\n                }\r\n\r\n                $scope.downloadCsv = function() {\r\n                    var columns = $scope.config.columns;\r\n                    var scope_filter = $scope.config.filter;\r\n                    var extra_filter;\r\n                    var final_filter = {};\r\n                    var order = $scope.config.sort ? $scope.config.sort : undefined;\r\n                    if ($scope.config.windowFilter) {\r\n                        var window_filter = $scope.config.onWindowTimeChanged($scope.config.windowFilter);\r\n                        if (window_filter && window_filter.and) {\r\n                            extra_filter = {\r\n                                and: window_filter.and\r\n                            };\r\n                        }\r\n                    }\r\n                    var filter;\r\n                    if (scope_filter.value && scope_filter.value.length > 4) {\r\n                        filter = JSON.parse(scope_filter.value);\r\n                    } else if (typeof scope_filter === 'string' && scope_filter.trim() !== '') {\r\n                        filter = createQuickFilter($scope.config.fieldsQuickSearch, scope_filter);\r\n                    }\r\n                    if (extra_filter) {\r\n                        if (filter) {\r\n                            final_filter = {\r\n                                and: [extra_filter, filter]\r\n                            };\r\n                        } else {\r\n                            final_filter = extra_filter;\r\n                        }\r\n                    } else {\r\n                        final_filter = filter;\r\n                    }\r\n                    $scope.$broadcast('downloadCsv', {\r\n                        'columns': columns,\r\n                        'filter': final_filter,\r\n                        'order': order\r\n                    });\r\n                };\r\n\r\n                $scope.generateQR = function() {\r\n                    $scope.$broadcast('generateQR');\r\n                };\r\n\r\n                var addItemToSelection = $scope.$on('addItemToSelection', function(event, item) {\r\n                    if (!$scope.selectedItems[item.key]) {\r\n                        $scope.selectedItems[item.key] = {\r\n                            data: item.data,\r\n                            visible: item.visible\r\n                        };\r\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n                        item.isSelected = true;\r\n                        $scope.selectionManager.lastItem = item;\r\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n                    }\r\n\r\n                });\r\n\r\n                var removeItemFromSelection = $scope.$on('removeItemFromSelection', function(event, item) {\r\n                    if ($scope.selectedItems[item.key]) {\r\n                        delete $scope.selectedItems[item.key];\r\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n                        item.isSelected = false;\r\n                        $scope.selectionManager.lastItem = item;\r\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n                    }\r\n                });\r\n\r\n                // bind reload function\r\n                var stopReloadTimeout;\r\n\r\n                $scope.setReloadTimeout = function() {\r\n                    var config = $scope.config || $scope.definition.config;\r\n                    var reloadPeriod = config.reloadPeriod;\r\n                    if (!isNaN(reloadPeriod) && (reloadPeriod * 1) !== 0) {\r\n                        if (angular.isDefined(stopReloadTimeout)) {\r\n                            $interval.cancel(stopReloadTimeout)\r\n                            stopReloadTimeout = undefined;\r\n                        };\r\n                        stopReloadTimeout = $interval($scope.reload, (reloadPeriod * 1000));\r\n                    } else if (stopReloadTimeout) {\r\n                        $interval.cancel(stopReloadTimeout);\r\n                    }\r\n                }\r\n\r\n                $scope.reload = function(completeReload) {\r\n                    if (completeReload) {\r\n                        $scope.$broadcast('widgetReload', completeReload);\r\n                    } else {\r\n                        $scope.$broadcast('widgetReload');\r\n                    }\r\n\r\n                    $scope.setReloadTimeout();\r\n                };\r\n\r\n                // verificacion de periodo de refresco\r\n                $scope.setReloadTimeout();\r\n\r\n                $scope.$on('$destroy', function() {\r\n                    adfDashboardCollapseExpand();\r\n                    adfWidgetEnterEditMode();\r\n                    adfIsEditMode();\r\n                    adfDashboardChanged();\r\n                    adfDashboardEditsCancelled();\r\n                    addItemToSelection();\r\n                    removeItemFromSelection();\r\n                    $interval.cancel(stopReloadTimeout);\r\n                });\r\n            }],\r\n            compile: function() {\r\n\r\n                /**\r\n                 * use pre link, because link of widget-content\r\n                 * is executed before post link widget\r\n                 */\r\n                return {\r\n                    pre: preLink,\r\n                    post: postLink\r\n                };\r\n            }\r\n        };\r\n\r\n    }]);\n})(window);","/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardRow', function ($compile, adfTemplatePath, columnTemplate) {\r\n    'use strict';\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        row: '=',\r\n        adfModel: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\r\n      link: function($scope, $element) {\r\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\r\n          $compile(columnTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        }\r\n      }\r\n    };\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfStructurePreview', function(adfTemplatePath) {\r\n\r\n    function adjustRowHeight(container){\r\n      if (container.rows && container.rows.length > 0){\r\n        var height = 100 / container.rows.length;\r\n        angular.forEach(container.rows, function(row){\r\n          row.style = {\r\n            height: height + '%'\r\n          }\r\n\r\n          if (row.columns){\r\n            angular.forEach(row.columns, function(column){\r\n              adjustRowHeight(column);\r\n            });\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    function prepareStructure($scope){\r\n      var structure = angular.copy($scope.structure);\r\n      adjustRowHeight(structure);\r\n      $scope.preview = structure;\r\n    }\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        name: '=',\r\n        structure: '=',\r\n        selected: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'structure-preview.html',\r\n      link: prepareStructure\r\n    };\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('adf')\r\n    .directive('adfWidgetContent', function($log, $q, widgetService,\r\n        $compile, $controller, $injector, dashboard, $translate) {\r\n\r\n        function renderError($element, msg) {\r\n            $log.warn(msg);\r\n            $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\r\n        }\r\n\r\n        function compileWidget($scope, $element, currentScope, configChanged) {\r\n            var model = $scope.model;\r\n            var content = $scope.content;\r\n\r\n            var extra = $scope.extra;\r\n\r\n            var newScope = currentScope;\r\n            if (!model) {\r\n                $translate('ADF.ERROR.MODEL_IS_UNDEFINED').then(function(translateMessage) {\r\n                    renderError($element, translateMessage);\r\n                });\r\n            } else if (!content) {\r\n                if (model.title) {\r\n                    $translate('ADF.ERROR.WIDGET_FOR_DEPRECTATED', {\r\n                        title: model.title\r\n                    }).then(function(translateMessage) {\r\n                        renderError($element, translateMessage);\r\n                    });\r\n                } else {\r\n                    $translate('ADF.ERROR.WIDGET_DEPRECTATED').then(function(translateMessage) {\r\n                        renderError($element, translateMessage);\r\n                    });\r\n                }\r\n            } else {\r\n                if (newScope) {\r\n                    var is_menu = newScope.menu !== undefined && newScope.menu !== null && (!newScope.isPaginationEnable || !newScope.isPaginationEnable());\r\n                    var is_itemsPerPage = newScope.itemsPerPage !== undefined && newScope.itemsPerPage !== null;\r\n                    if (is_menu || is_itemsPerPage || configChanged || !angular.isFunction(newScope.reloadData)) {\r\n                        newScope = renderWidget($scope, $element, currentScope, model, content, extra);\r\n                    } else {\r\n                        newScope.reloadData();\r\n                    }\r\n                } else {\r\n                    newScope = renderWidget($scope, $element, currentScope, model, content, extra);\r\n                }\r\n            }\r\n\r\n            function _getWindowTime(type) {\r\n                if (type === \"custom\") {\r\n                    return {\r\n                        from: newScope.config.windowFilter.from,\r\n                        to: newScope.config.windowFilter.to\r\n                    }\r\n                }\r\n                var from = window.moment().subtract(1, type);\r\n                return {\r\n                    from: from._d\r\n                };\r\n            }\r\n\r\n            if (newScope) {\r\n                if (newScope.config) {\r\n                    newScope.config.getWindowTime = function() {\r\n                        var windowFilter = newScope.config.windowFilter;\r\n                        if (windowFilter && windowFilter.type) {\r\n                            var winTime = _getWindowTime(windowFilter.type);\r\n                            /* jshint ignore:start */\r\n                            if (!window.eval(newScope.config.windowFilter.rawdate)) {\r\n                                for (var key in winTime) {\r\n                                    winTime[key] = window.moment(winTime[key]).format();\r\n                                }\r\n                                winTime['rawdate'] = true;\r\n                            }\r\n                            /* jshint ignore:end */\r\n                            return winTime;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (extra) {\r\n                    newScope.editing = extra.editing ? true : false;\r\n                    newScope.extraData = extra;\r\n                }\r\n            }\r\n            return newScope;\r\n        }\r\n\r\n        function renderWidget($scope, $element, currentScope, model, content, extra) {\r\n            // display loading template\r\n            $element.html(dashboard.loadingTemplate);\r\n\r\n            // create new scope\r\n            var templateScope = $scope.$new();\r\n\r\n            // pass config object to scope\r\n            if (!model.config) {\r\n                model.config = {};\r\n            }\r\n\r\n            templateScope.config = model.config;\r\n            templateScope.editing = extra && extra.editing;\r\n\r\n            if (extra) {\r\n                templateScope.extra = extra;\r\n            }\r\n\r\n            templateScope.selectionManager = (currentScope && currentScope.selectionManager) ? currentScope.selectionManager : undefined;\r\n\r\n            // local injections\r\n            var base = {\r\n                $scope: templateScope,\r\n                widget: model,\r\n                config: model.config\r\n            };\r\n\r\n            // get resolve promises from content object\r\n            var resolvers = {};\r\n            resolvers.$tpl = widgetService.getTemplate(content);\r\n            if (content.resolve) {\r\n                angular.forEach(content.resolve, function(promise, key) {\r\n                    if (angular.isString(promise)) {\r\n                        resolvers[key] = $injector.get(promise);\r\n                    } else {\r\n                        resolvers[key] = $injector.invoke(promise, promise, base);\r\n                    }\r\n                });\r\n            }\r\n\r\n            // resolve all resolvers\r\n            $q.all(resolvers).then(function(locals) {\r\n                angular.extend(locals, base);\r\n\r\n                // pass resolve map to template scope as defined in resolveAs\r\n                if (content.resolveAs) {\r\n                    templateScope[content.resolveAs] = locals;\r\n                }\r\n\r\n                // compile & render template\r\n                var template = locals.$tpl;\r\n                $element.html(template);\r\n                if (content.controller) {\r\n                    var templateCtrl = $controller(content.controller, locals);\r\n                    if (content.controllerAs) {\r\n                        templateScope[content.controllerAs] = templateCtrl;\r\n                    }\r\n                    $element.children().data('$ngControllerController', templateCtrl);\r\n                }\r\n                $compile($element.contents())(templateScope);\r\n            }, function(reason) {\r\n                // handle promise rejection\r\n                var msg = 'ADF.ERROR.COULD_NOT_RESOLVE_ALL_PROMISSES';\r\n                $translate(msg, {\r\n                    reason: (reason ? \": \" + reason : reason)\r\n                }).then(function(translateMessage) {\r\n                    renderError($element, translateMessage);\r\n                });\r\n            });\r\n\r\n            // destroy old scope\r\n            if (currentScope) {\r\n                currentScope.$destroy();\r\n            }\r\n\r\n            return templateScope;\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            scope: {\r\n                model: '=',\r\n                content: '=',\r\n                extra: '='\r\n            },\r\n            link: function($scope, $element) {\r\n                var currentScope = compileWidget($scope, $element, null);\r\n                var widgetConfigChangedEvt = $scope.$on('widgetConfigChanged', function() {\r\n                    currentScope = compileWidget($scope, $element, currentScope, true);\r\n                });\r\n\r\n                var widgetReloadEvt = $scope.$on('widgetReload', function() {\r\n                    currentScope = compileWidget($scope, $element, currentScope, false);\r\n                });\r\n\r\n                $scope.$on('destroy', function() {\r\n                    widgetConfigChangedEvt();\r\n                    widgetReloadEvt();\r\n                });\r\n            }\r\n        };\r\n    });","\r\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n/**\r\n * The widget service provide helper functions to render widgets and their content.\r\n */\r\nangular.module('adf')\r\n  .factory('widgetService', function($http, $q, $sce, $templateCache, dashboard) {\r\n    'use strict';\r\n\r\n    function parseUrl(url) {\r\n      var parsedUrl = url;\r\n      if (url.indexOf('{widgetsPath}') >= 0) {\r\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\r\n                .replace('//', '/');\r\n        if (parsedUrl.indexOf('/') === 0) {\r\n          parsedUrl = parsedUrl.substring(1);\r\n        }\r\n      }\r\n      return parsedUrl;\r\n    }\r\n\r\n    var exposed = {};\r\n\r\n    exposed.getTemplate = function(widget){\r\n      var deferred = $q.defer();\r\n\r\n      if (widget.template) {\r\n        deferred.resolve(widget.template);\r\n      } else if (widget.templateUrl) {\r\n        // try to fetch template from cache\r\n        var tpl = $templateCache.get(widget.templateUrl);\r\n        if (tpl) {\r\n          deferred.resolve(tpl);\r\n        } else {\r\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\r\n          $http.get(url)\r\n               .success(function(response) {\r\n                 // put response to cache, with unmodified url as key\r\n                 $templateCache.put(widget.templateUrl, response);\r\n                 deferred.resolve(response);\r\n               })\r\n               .error(function() {\r\n                 deferred.reject('could not load template');\r\n               });\r\n        }\r\n      }\r\n\r\n      return deferred.promise;\r\n    };\r\n\r\n    return exposed;\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('adf')\r\n    .directive('adfWidget', function($injector, $q, $log, $uibModal, $rootScope, $interval, dashboard, adfTemplatePath, Filter) {\r\n        function preLink($scope) {\r\n            var definition = $scope.definition;\r\n\r\n            if (definition) {\r\n                var w = dashboard.widgets[definition.type];\r\n                if (w) {\r\n                    // pass title\r\n                    if (!definition.title) {\r\n                        definition.title = w.title;\r\n                    }\r\n\r\n                    if (!definition.titleTemplateUrl) {\r\n                        definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\r\n                        if (w.titleTemplateUrl) {\r\n                            definition.titleTemplateUrl = w.titleTemplateUrl;\r\n                        }\r\n                    }\r\n\r\n                    if (!definition.editTemplateUrl) {\r\n                        definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\r\n                        if (w.editTemplateUrl) {\r\n                            definition.editTemplateUrl = w.editTemplateUrl;\r\n                        }\r\n                    }\r\n\r\n                    if (!definition.titleTemplateUrl) {\r\n                        definition.frameless = w.frameless;\r\n                    }\r\n\r\n                    if (!definition.styleClass) {\r\n                        definition.styleClass = w.styleClass;\r\n                    }\r\n\r\n                    // set id for sortable\r\n                    if (!definition.wid) {\r\n                        definition.wid = dashboard.id();\r\n                    }\r\n\r\n                    // pass copy of widget to scope\r\n                    $scope.widget = angular.copy(w);\r\n\r\n                    // create config object\r\n                    var config = definition.config;\r\n                    if (config) {\r\n                        if (angular.isString(config)) {\r\n                            config = angular.fromJson(config);\r\n                        }\r\n                    } else {\r\n                        config = {};\r\n                    }\r\n\r\n                    if (typeof $scope.widget.show_modal_footer === \"undefined\") {\r\n                        $scope.widget.show_modal_footer = true;\r\n                    }\r\n\r\n                    if (typeof $scope.widget.show_reload_config === \"undefined\") {\r\n                        $scope.widget.show_reload_config = true;\r\n                    }\r\n\r\n                    // pass config to scope\r\n                    $scope.config = config;\r\n\r\n                    // collapse exposed $scope.widgetState property\r\n                    if (!$scope.widgetState) {\r\n                        $scope.widgetState = {};\r\n                        $scope.widgetState.isCollapsed = (w.collapsed === true) ? w.collapsed : false;\r\n                    }\r\n\r\n                } else {\r\n                    $log.warn('could not find widget ' + definition.type);\r\n                }\r\n            } else {\r\n                $log.debug('definition not specified, widget was probably removed');\r\n            }\r\n        }\r\n\r\n        function postLink($scope, $element) {\r\n            var definition = $scope.definition;\r\n            if (!definition) {\r\n                $log.debug('widget not found');\r\n                return;\r\n            }\r\n            if (!$scope.config) {\r\n                $scope.config = {};\r\n            }\r\n\r\n            var config = $scope.config;\r\n\r\n            // bind close function\r\n            var deleteWidget = function() {\r\n                var column = $scope.col;\r\n                if (column) {\r\n                    var index = column.widgets.indexOf(definition);\r\n                    if (index >= 0) {\r\n                        column.widgets.splice(index, 1);\r\n                    }\r\n                }\r\n                $element.remove();\r\n                $rootScope.$broadcast('adfWidgetRemovedFromColumn');\r\n            };\r\n\r\n            $scope.remove = function() {\r\n                if ($scope.options.enableConfirmDelete) {\r\n                    var deleteScope = $scope.$new();\r\n\r\n                    var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\r\n                    if (definition.deleteTemplateUrl) {\r\n                        deleteTemplateUrl = definition.deleteTemplateUrl;\r\n                    }\r\n                    var opts = {\r\n                        scope: deleteScope,\r\n                        templateUrl: deleteTemplateUrl,\r\n                        backdrop: 'static'\r\n                    };\r\n                    var instance = $uibModal.open(opts);\r\n\r\n                    deleteScope.closeDialog = function() {\r\n                        instance.close();\r\n                        deleteScope.$destroy();\r\n                    };\r\n                    deleteScope.deleteDialog = function() {\r\n                        deleteWidget();\r\n                        deleteScope.closeDialog();\r\n                    };\r\n                } else {\r\n                    deleteWidget();\r\n                }\r\n            };\r\n\r\n\r\n            $scope.print = function() {\r\n                if (!$scope.editMode) {\r\n                    $scope.$broadcast('widgetPrint');\r\n                }\r\n            }\r\n\r\n            $scope.isExecuteOperationEnabled = function() {\r\n\r\n                if (config.entityKey)\r\n                    return true;\r\n                var filter = config.filter;\r\n                if (typeof filter === \"string\") {\r\n                    return filter.length > 0;\r\n                }\r\n                if (typeof filter === \"object\") {\r\n                    return filter.value.length > 2 && filter.oql;\r\n                }\r\n                return false;\r\n            }\r\n\r\n            $scope.executeOperation = function() {\r\n                if (!$scope.editMode) {\r\n\r\n                    $scope.$parent.$broadcast('widgetExecuteOperation');\r\n                }\r\n            };\r\n\r\n            $scope.filter = {\r\n                value: \"\"\r\n            };\r\n            $scope.sort = {\r\n                value: \"\",\r\n                direction: \"\"\r\n            };\r\n\r\n            $scope.toggleAdvanced = 1;\r\n            var filter = config.filter;\r\n            if (typeof filter === \"object\" && filter.oql && filter.oql.length > 2) {\r\n                $scope.search = {\r\n                    oql: filter.oql,\r\n                    json: filter.value\r\n                };\r\n                $scope.toggleAdvanced = 0;\r\n            } else if (typeof filter === \"string\") {\r\n                $scope.search = {\r\n                    quick: filter\r\n                };\r\n                $scope.toggleAdvanced = 1;\r\n            } else if (typeof filter === \"object\" && filter.fields) {\r\n                $scope.search = {\r\n                    customFilter: filter.fields\r\n                };\r\n                $scope.search.fields = [];\r\n                angular.forEach(filter.fields, function(v, key) {\r\n                    $scope.search.fields.push(v.name);\r\n                });\r\n                $scope.toggleAdvanced = 2;\r\n            } else {\r\n                $scope.search = {\r\n                    quick: filter = \"\"\r\n                };\r\n            }\r\n\r\n            $scope.toggleFilter = function(advanced) {\r\n                $scope.toggleAdvanced = advanced;\r\n            };\r\n            $scope.filterAvailable = false;\r\n            $scope.showFilter = function() {\r\n                $scope.filterAvailable = $scope.filterAvailable === true ? false : true;\r\n            };\r\n\r\n            $scope.showFinalFilter = false;\r\n\r\n            $scope.launchSearching = function() {\r\n                var widget = {\r\n                    definition: definition,\r\n                    element: $element\r\n                };\r\n\r\n                $rootScope.$broadcast('adfLaunchSearchingFromWidget', widget, $scope.config.filter);\r\n                $scope.reload(true);\r\n            }\r\n            $scope.addCustomFilter = function(key) {\r\n                $scope.search.customFilter = $scope.search.customFilter ? $scope.search.customFilter : [];\r\n                $scope.search.customFilter.push({\r\n                    name: key,\r\n                    value: ''\r\n                });\r\n            }\r\n\r\n            $scope.launchCustomFilter = function() {\r\n                if ($scope.search.customFilter && $scope.search.customFilter.length > 0) {\r\n                    $scope.search.oql = $scope.search.json = '';\r\n\r\n                    $scope.config.filter = {\r\n                        value: {\r\n                            and: []\r\n                        },\r\n                        fields: $scope.search.customFilter\r\n                    }\r\n                    angular.forEach($scope.search.customFilter, function(v, key) {\r\n                        if (v.value) {\r\n                            var like = {};\r\n                            like[v.name] = v.value;\r\n                            $scope.config.filter.value.and.push({\r\n                                'like': like\r\n                            });\r\n                        }\r\n\r\n                    });\r\n                    $scope.config.filter.value = JSON.stringify($scope.config.filter.value);\r\n                }\r\n\r\n                $scope.launchSearching();\r\n            }\r\n\r\n\r\n\r\n            $scope.deleteFilter = function(value, model) {\r\n                angular.forEach($scope.search.customFilter, function(v, key) {\r\n                    if (v.name === value) {\r\n                        $scope.search.customFilter.splice(key, 1);\r\n                    }\r\n                });\r\n                if ($scope.search.customFilter.length === 0) {\r\n                    $scope.config.filter = {};\r\n                }\r\n            };\r\n\r\n            $scope.launchSearchingAdv = function() {\r\n                if (!$scope.filterApplied) {\r\n                    $scope.search.quick = '';\r\n                    if ($scope.search.json === '' || $scope.search.json === '{}' || (!angular.isString($scope.search.json) && Object.keys($scope.search.json).length === 0)) {\r\n                        $scope.config.filter = {\r\n                            oql: '',\r\n                            value: ''\r\n                        };\r\n                    } else {\r\n                        $scope.config.filter = {\r\n                            oql: $scope.search.oql,\r\n                            value: $scope.search.json\r\n                        };\r\n                    }\r\n                    $scope.launchSearching();\r\n                    $scope.filterApplied = true;\r\n                }\r\n            }\r\n\r\n            $scope.applyFilter = function(event) {\r\n                $scope.launchSearching();\r\n            }\r\n\r\n            $scope.launchSearchingQuick = function() {\r\n                if (!$scope.filterApplied) {\r\n                    $scope.search.oql = $scope.search.json = '';\r\n                    $scope.config.filter = $scope.search.quick;\r\n                    $scope.launchSearching();\r\n                    $scope.filterApplied = true;\r\n                }\r\n            }\r\n\r\n            var windowTimeChanged = $scope.$on('onWindowTimeChanged', function(event, timeObj) {\r\n                $scope.config.windowFilter = timeObj ? timeObj : (config.windowFilter ? {} : timeObj);\r\n                var widget = {\r\n                    definition: definition,\r\n                    element: $element\r\n                }\r\n                $rootScope.$broadcast('adfWindowTimeChangedFromWidget', widget, $scope.config.windowFilter);\r\n                $scope.reload();\r\n            });\r\n\r\n            $scope.enter = function(event) {\r\n                var keycode = (event.keyCode ? event.keyCode : event.which);\r\n                if (keycode === 13) {\r\n                    if ($scope.toggleAdvanced === 0)\r\n                        $scope.launchSearchingAdv();\r\n                    if ($scope.toggleAdvanced === 1)\r\n                        $scope.launchSearchingQuick();\r\n                    if ($scope.toggleAdvanced === 2)\r\n                        $scope.launchCustomFilter();\r\n\r\n                } else if (keycode === 19) {\r\n                    $scope.showFinalFilter = $scope.showFinalFilter === false ? true : false;\r\n                } else {\r\n                    $scope.filterApplied = false;\r\n                }\r\n            }\r\n\r\n\r\n            $scope.customSelectors = [];\r\n            $scope.getCustomSelectors = function() {\r\n                if ($scope.config.customSelectors) {\r\n                    $scope.customSelectors = $scope.config.customSelectors;\r\n                } else {\r\n                    config.widgetSelectors().findFields(\"\").then(function(fields) {\r\n                        $scope.customSelectors = fields;\r\n                        $scope.$apply();\r\n                    }).catch(function(err) {\r\n                        $log.error(err);\r\n                    });\r\n                }\r\n            }\r\n\r\n            $scope.customFilter = [];\r\n            $scope.getcustomFilter = function() {\r\n                config.widgetSelectors().findFields(\"\").then(function(fields) {\r\n                    $scope.customFilter = fields;\r\n                    $scope.$apply();\r\n                }).catch(function(err) {\r\n                    $log.error(err);\r\n                });\r\n\r\n            }\r\n\r\n            $scope.ifCustomFilter = function() {\r\n                return $scope.customSelectors && config.sort && $scope.definition.type === 'FullDevicesList' && $scope.toggleAdvanced === 2;\r\n            }\r\n\r\n            $scope.showCustomFields = function() {\r\n                return $scope.definition.type === 'FullDevicesList' && $scope.toggleAdvanced === 2 && $scope.search.customFilter && $scope.filterAvailable && !$scope.editMode;\r\n            }\r\n\r\n            $scope.changeDirection = function() {\r\n                var direction = config.sort.direction;\r\n                if (direction === 'DESCENDING') {\r\n                    $scope.config.sort.direction = 'ASCENDING'\r\n                } else if (direction === 'ASCENDING') {\r\n                    $scope.config.sort.direction = 'DESCENDING'\r\n                }\r\n                $scope.reload();\r\n            }\r\n\r\n            $scope.changeDefaultTab = function() {\r\n\r\n\r\n                $scope.reload();\r\n            }\r\n\r\n            $scope.debugQuery = function() {\r\n                Filter.parseQuery($scope.search.oql || '')\r\n                    .then(function(data) {\r\n                        //$scope.elementos = data;\r\n                        $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\r\n                        $scope.unknownWords = '';\r\n                        $scope.filter.error = null;\r\n                    })\r\n                    .catch(function(err) {\r\n                        $scope.filter.error = err;\r\n                        // Tratar el error\r\n                    });\r\n\r\n            }\r\n\r\n            $scope.autocomplete_options = function() {\r\n                var autocomplete_options = {\r\n                    suggest: Filter.suggest_field_delimited,\r\n                    customSelectors: config.widgetSelectors()\r\n                };\r\n\r\n                return autocomplete_options;\r\n\r\n            };\r\n\r\n            // Multiple selection\r\n            $scope.selectedItems = {};\r\n\r\n            // Gestor de seleccion\r\n            $scope.selectionManager = {\r\n                currentSelection: $scope.selectedItems,\r\n                isSelected: function(key, obj) {\r\n                    if ($scope.selectedItems[key] && !angular.isUndefined(obj)) {\r\n                        $scope.selectedItems[key].data = obj;\r\n                    }\r\n\r\n                    return $scope.selectedItems[key] ? true : false;\r\n                },\r\n                totalSelected: function() {\r\n                    return Object.keys($scope.selectedItems).length;\r\n                }\r\n            };\r\n\r\n            $scope.manageSelectedItems = function() {\r\n                var selectionScope = $scope.$new();\r\n\r\n                selectionScope.selectionConfig = config.selectionConfig;\r\n\r\n                selectionScope.selectedItems = [];\r\n                angular.forEach($scope.selectedItems, function(value, key) {\r\n                    selectionScope.selectedItems.push({\r\n                        key: key,\r\n                        value: value\r\n                    });\r\n                });\r\n\r\n                selectionScope.currentSelection = {\r\n                    selected: selectionScope.selectedItems\r\n                };\r\n\r\n                var manageItemsSelectedTemplate = adfTemplatePath + 'widget-selection.html';\r\n                var opts = {\r\n                    scope: selectionScope,\r\n                    templateUrl: manageItemsSelectedTemplate,\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    animation: true\r\n                };\r\n\r\n                var instance = $uibModal.open(opts);\r\n\r\n                selectionScope.restoreSelection = function() {\r\n                    selectionScope.currentSelection = {\r\n                        selected: selectionScope.selectedItems\r\n                    };\r\n                };\r\n\r\n                selectionScope.clearSelection = function() {\r\n                    selectionScope.currentSelection.selected = [];\r\n                };\r\n\r\n                // Cierra sy guarda los datos de nueva selección\r\n                selectionScope.applyFilter = function(type) {\r\n                    var customOql = selectionScope.selectionConfig.filterAction(selectionScope.currentSelection.selected, type);\r\n\r\n                    if (!angular.isUndefined(customOql) && customOql !== null) {\r\n                        $scope.toggleAdvanced = 0;\r\n                        Filter.parseQuery(customOql).then(function(data) {\r\n                            $scope.search.oql = customOql;\r\n                            $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\r\n                            $scope.unknownWords = '';\r\n                            $scope.filter.error = null;\r\n\r\n                            $scope.launchSearchingAdv();\r\n                        }).catch(function(err) {\r\n                            $scope.filter.error = err;\r\n                        });\r\n                    }\r\n                };\r\n\r\n                selectionScope.executeOperation = function(operationType) {\r\n                    if (!$scope.editMode) {\r\n                        $scope.$parent.$broadcast('widgetExecuteOperation', {\r\n                            'selectedItems': selectionScope.currentSelection.selected,\r\n                            'type': operationType\r\n                        });\r\n                    }\r\n                };\r\n\r\n                // Cierra sy guarda los datos de nueva selección\r\n                selectionScope.saveChangesDialog = function() {\r\n                    var finalSelection = {};\r\n                    angular.forEach(selectionScope.currentSelection.selected, function(data, idx) {\r\n                        finalSelection[data.key] = {\r\n                            data: data.value.data,\r\n                            visible: data.value.visible\r\n                        };\r\n                    });\r\n\r\n                    $scope.selectedItems = angular.copy(finalSelection);\r\n                    $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n\r\n                    $scope.selectionManager.lastItem = {};\r\n                    $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n\r\n                    instance.close();\r\n                    selectionScope.$destroy();\r\n                };\r\n\r\n                // Cierra sin realizar ninguna acción\r\n                selectionScope.closeDialog = function() {\r\n                    instance.close();\r\n                    selectionScope.$destroy();\r\n                };\r\n            };\r\n\r\n\r\n            // bind edit function\r\n            $scope.edit = function() {\r\n                var editScope = $scope.$new();\r\n                editScope.definition = angular.copy(definition);\r\n\r\n                var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\r\n                if (definition.editTemplateUrl) {\r\n                    adfEditTemplatePath = definition.editTemplateUrl;\r\n                }\r\n\r\n                var opts = {\r\n                    scope: editScope,\r\n                    templateUrl: adfEditTemplatePath,\r\n                    backdrop: 'static',\r\n                    size: 'lg'\r\n                };\r\n\r\n                var instance = $uibModal.open(opts);\r\n\r\n                editScope.closeDialog = function() {\r\n                    instance.close();\r\n                    editScope.$destroy();\r\n                };\r\n\r\n                // TODO create util method\r\n                function createApplyPromise(result) {\r\n                    var promise;\r\n                    if (typeof result === 'boolean') {\r\n                        var deferred = $q.defer();\r\n                        if (result) {\r\n                            deferred.resolve();\r\n                        } else {\r\n                            deferred.reject();\r\n                        }\r\n                        promise = deferred.promise;\r\n                    } else {\r\n                        promise = $q.when(result);\r\n                    }\r\n                    return promise;\r\n                }\r\n\r\n                editScope.saveDialog = function() {\r\n                    // clear validation error\r\n                    editScope.validationError = null;\r\n\r\n                    // build injection locals\r\n                    var widget = $scope.widget;\r\n\r\n                    // create a default apply method for widgets\r\n                    // without edit mode\r\n                    // see issue https://goo.gl/KHPQLZ\r\n                    var applyFn;\r\n                    if (widget.edit) {\r\n                        applyFn = widget.edit.apply;\r\n                    } else {\r\n                        applyFn = function() {\r\n                            return true;\r\n                        };\r\n                    }\r\n\r\n                    // injection locals\r\n                    var locals = {\r\n                        widget: widget,\r\n                        definition: editScope.definition,\r\n                        config: editScope.definition.config\r\n                    };\r\n\r\n                    // invoke apply function and apply if success\r\n                    var result = $injector.invoke(applyFn, applyFn, locals);\r\n                    createApplyPromise(result).then(function() {\r\n                        definition.title = editScope.definition.title;\r\n                        angular.extend(definition.config, editScope.definition.config);\r\n\r\n                        editScope.closeDialog();\r\n\r\n                        if (widget.edit && widget.edit.reload) {\r\n                            $scope.setReloadTimeout();\r\n                            // reload content after edit dialog is closed\r\n                            $scope.$broadcast('widgetConfigChanged');\r\n                        }\r\n                    }, function(err) {\r\n                        if (err) {\r\n                            editScope.validationError = err;\r\n                        } else {\r\n                            editScope.validationError = 'VALIDATION_DURING_APPLY_FAILED';\r\n                        }\r\n                    });\r\n                };\r\n\r\n            };\r\n\r\n\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            templateUrl: dashboard.customWidgetTemplatePath ? dashboard.customWidgetTemplatePath : adfTemplatePath + 'widget.html',\r\n            scope: {\r\n                definition: '=',\r\n                col: '=column',\r\n                editMode: '=',\r\n                options: '=',\r\n                widgetState: '='\r\n            },\r\n            controller: function($scope) {\r\n                var adfDashboardCollapseExpand = $scope.$on('adfDashboardCollapseExpand', function(event, args) {\r\n                    $scope.widgetState.isCollapsed = args.collapseExpandStatus;\r\n                });\r\n\r\n                var adfWidgetEnterEditMode = $scope.$on('adfWidgetEnterEditMode', function(event, widget) {\r\n                    if (dashboard.idEquals($scope.definition.wid, widget.wid)) {\r\n                        $scope.edit();\r\n                    }\r\n                });\r\n\r\n                var adfIsEditMode = $scope.$on('adfIsEditMode', function(event, widget) {\r\n                    $scope.editing = true;\r\n                });\r\n\r\n                var adfDashboardChanged = $scope.$on('adfDashboardChanged', function(event, widget) {\r\n                    $scope.editing = false;\r\n                });\r\n\r\n                var adfDashboardEditsCancelled = $scope.$on('adfDashboardEditsCancelled', function(event, widget) {\r\n                    $scope.editing = false;\r\n                });\r\n\r\n                $scope.widgetClasses = function(w, definition) {\r\n                    var classes = definition.styleClass || '';\r\n                    // w is undefined, if the type of the widget is unknown\r\n                    // see issue #216\r\n                    if (!w || !w.frameless || $scope.editMode) {\r\n                        classes += ' panel panel-default';\r\n                    }\r\n                    return classes;\r\n                };\r\n\r\n                $scope.openFullScreen = function() {\r\n\r\n                    $scope.$emit('adfOpenModalWidgetFromOther', $scope.definition.type, $scope.config);\r\n\r\n                    // var definition = $scope.definition;\r\n                    // var fullScreenScope = $scope.$new();\r\n                    // var opts = {\r\n                    //     scope: fullScreenScope,\r\n                    //     templateUrl: adfTemplatePath + 'widget-fullscreen.html',\r\n                    //     size: definition.modalSize || 'lg', // 'sm', 'lg'\r\n                    //     backdrop: 'static',\r\n                    //     windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\r\n                    // };\r\n\r\n                    // var instance = $uibModal.open(opts);\r\n\r\n                    // fullScreenScope.reload = function() {\r\n                    //     fullScreenScope.$broadcast('widgetReload');\r\n                    // };\r\n\r\n                    // fullScreenScope.closeDialog = function() {\r\n                    //     instance.close();\r\n                    //     fullScreenScope.$destroy();\r\n                    // };\r\n                };\r\n\r\n                $scope.openFilter = function() {\r\n\r\n                }\r\n\r\n                $scope.openAboutScreen = function(size) {\r\n                    size = 'md';\r\n                    var modalInstance = $uibModal.open({\r\n                        animation: true,\r\n                        templateUrl: 'widgetAboutModal.html',\r\n                        controller: function($scope, $uibModalInstance, information) {\r\n                            $scope.about = {};\r\n                            $scope.about.info = information;\r\n                            $scope.ok = function() {\r\n                                $uibModalInstance.close();\r\n                            };\r\n                        },\r\n                        'size': size,\r\n                        resolve: {\r\n                            information: function() {\r\n                                return $scope.config.about;\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    modalInstance.result.then(function(selectedItem) {\r\n                        $scope.selected = selectedItem;\r\n                    }, function() {\r\n                        $log.info('Modal dismissed at: ' + new Date());\r\n                    });\r\n                };\r\n\r\n                $scope.saveWidgetScreen = function(wId) {\r\n                    $scope.$emit('generateSnapshot', {\r\n                        'objectSelector': '.widget_' + wId,\r\n                        'fileName': 'capture_' + new Date().getTime()\r\n                    });\r\n                };\r\n\r\n                var onWindowTimeChanged = function(timeObj) {\r\n                    var filter = {\r\n                        and: []\r\n                    };\r\n                    if (timeObj && timeObj.from) {\r\n                        filter.and.push({\r\n                            gt: {\r\n                                operationDate: timeObj.from\r\n                            }\r\n                        });\r\n\r\n                        if (timeObj.to) {\r\n                            filter.and.push({\r\n                                lt: {\r\n                                    operationDate: timeObj.to\r\n                                }\r\n                            });\r\n                        }\r\n                    } else {\r\n                        filter = null;\r\n                    }\r\n                    return filter;\r\n                }\r\n\r\n                var createQuickFilter = function(fieldsQuickSearch, filter) {\r\n                    var _filter = {\r\n                        or: []\r\n                    };\r\n                    var criteria;\r\n                    fieldsQuickSearch.forEach(function(field) {\r\n                        criteria = {};\r\n                        criteria[field.operator] = {};\r\n                        criteria[field.operator][field.name] = $scope.config.filter;\r\n                        _filter.or.push(criteria);\r\n                    });\r\n                    return _filter;\r\n                }\r\n\r\n                $scope.downloadCsv = function() {\r\n                    var columns = $scope.config.columns;\r\n                    var scope_filter = $scope.config.filter;\r\n                    var extra_filter;\r\n                    var final_filter = {};\r\n                    var order = $scope.config.sort ? $scope.config.sort : undefined;\r\n                    if ($scope.config.windowFilter) {\r\n                        var window_filter = $scope.config.onWindowTimeChanged($scope.config.windowFilter);\r\n                        if (window_filter && window_filter.and) {\r\n                            extra_filter = {\r\n                                and: window_filter.and\r\n                            };\r\n                        }\r\n                    }\r\n                    var filter;\r\n                    if (scope_filter.value && scope_filter.value.length > 4) {\r\n                        filter = JSON.parse(scope_filter.value);\r\n                    } else if (typeof scope_filter === 'string' && scope_filter.trim() !== '') {\r\n                        filter = createQuickFilter($scope.config.fieldsQuickSearch, scope_filter);\r\n                    }\r\n                    if (extra_filter) {\r\n                        if (filter) {\r\n                            final_filter = {\r\n                                and: [extra_filter, filter]\r\n                            };\r\n                        } else {\r\n                            final_filter = extra_filter;\r\n                        }\r\n                    } else {\r\n                        final_filter = filter;\r\n                    }\r\n                    $scope.$broadcast('downloadCsv', {\r\n                        'columns': columns,\r\n                        'filter': final_filter,\r\n                        'order': order\r\n                    });\r\n                };\r\n\r\n                $scope.generateQR = function() {\r\n                    $scope.$broadcast('generateQR');\r\n                };\r\n\r\n                var addItemToSelection = $scope.$on('addItemToSelection', function(event, item) {\r\n                    if (!$scope.selectedItems[item.key]) {\r\n                        $scope.selectedItems[item.key] = {\r\n                            data: item.data,\r\n                            visible: item.visible\r\n                        };\r\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n                        item.isSelected = true;\r\n                        $scope.selectionManager.lastItem = item;\r\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n                    }\r\n\r\n                });\r\n\r\n                var removeItemFromSelection = $scope.$on('removeItemFromSelection', function(event, item) {\r\n                    if ($scope.selectedItems[item.key]) {\r\n                        delete $scope.selectedItems[item.key];\r\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n                        item.isSelected = false;\r\n                        $scope.selectionManager.lastItem = item;\r\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n                    }\r\n                });\r\n\r\n                // bind reload function\r\n                var stopReloadTimeout;\r\n\r\n                $scope.setReloadTimeout = function() {\r\n                    var config = $scope.config || $scope.definition.config;\r\n                    var reloadPeriod = config.reloadPeriod;\r\n                    if (!isNaN(reloadPeriod) && (reloadPeriod * 1) !== 0) {\r\n                        if (angular.isDefined(stopReloadTimeout)) {\r\n                            $interval.cancel(stopReloadTimeout)\r\n                            stopReloadTimeout = undefined;\r\n                        };\r\n                        stopReloadTimeout = $interval($scope.reload, (reloadPeriod * 1000));\r\n                    } else if (stopReloadTimeout) {\r\n                        $interval.cancel(stopReloadTimeout);\r\n                    }\r\n                }\r\n\r\n                $scope.reload = function(completeReload) {\r\n                    if (completeReload) {\r\n                        $scope.$broadcast('widgetReload', completeReload);\r\n                    } else {\r\n                        $scope.$broadcast('widgetReload');\r\n                    }\r\n\r\n                    $scope.setReloadTimeout();\r\n                };\r\n\r\n                // verificacion de periodo de refresco\r\n                $scope.setReloadTimeout();\r\n\r\n                $scope.$on('$destroy', function() {\r\n                    adfDashboardCollapseExpand();\r\n                    adfWidgetEnterEditMode();\r\n                    adfIsEditMode();\r\n                    adfDashboardChanged();\r\n                    adfDashboardEditsCancelled();\r\n                    addItemToSelection();\r\n                    removeItemFromSelection();\r\n                    $interval.cancel(stopReloadTimeout);\r\n                });\r\n            },\r\n            compile: function() {\r\n\r\n                /**\r\n                 * use pre link, because link of widget-content\r\n                 * is executed before post link widget\r\n                 */\r\n                return {\r\n                    pre: preLink,\r\n                    post: postLink\r\n                };\r\n            }\r\n        };\r\n\r\n    });"]}