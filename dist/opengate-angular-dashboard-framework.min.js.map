{"version":3,"sources":["adf.js","dashboard.js","grid.js","order-by-object-key.js","provider.js","opengate-angular-dashboard-framework.min.js","widget-content.js","widget-grid.js","widget-service.js"],"names":["window","undefined","angular","module","value","directive","$rootScope","$log","$timeout","$uibModal","dashboard","adfTemplatePath","$faIcons","$translate","Upload","stringToBoolean","string","isDefined","toLowerCase","Boolean","createConfiguration","type","cfg","config","widgets","copy","createWidget","wdgt","widget","addNewWidgetToModel","model","name","forceToSave","grid","newWidget","width","height","x","y","definition","push","$broadcast","error","isEditModeImmediate","edit","immediate","openEditMode","$scope","createCategories","categories","forEach","key","category","title","instant","description","isUndefined","createCategoriesList","categoryTags","categoriesTmp","split","idx","translatedCat","indexOf","replace","restrict","transclude","scope","collapsible","editable","editMode","continuousEditMode","maximizable","adfModel","adfWidgetFilter","hideButtons","extraData","controller","getNewModalScope","$new","widgetFilter","_getReloadWidgets","reloadWidgets","configChange","reload","ftype","Ftype","id","wid","filter","w","f","ft","updateWidgetFilters","widgetFilters","length","element","options","$watch","oldVal","newVal","titleTemplateUrl","toggleEditMode","openConfigWindow","modelCopy","editDashboardDialog","adfToggleEditMode","$on","event","isNewDashboard","adfCancelEditMode","cancelEditMode","adfWidgetRemoved","index","widgetTmp","splice","adfEditDashboardDialog","adfLaunchSearchingFromWidget","adfWindowTimeChangedFromWidget","editDashboardScope","backgroundColor","time","Date","backgroundImage","file","backgroundSize","backgroundImageSize","100% 100%","contain","cover","iconConfiguration","iconType","url","icon","image","imageSelected","base64DataUrl","then","removeDataFile","backgroundImageSelected","removeBackgroundFile","availableIcons","list","adfEditTemplatePath","editTemplateUrl","instance","open","templateUrl","backdrop","keyboard","size","closeDialog","close","$destroy","adfOpenWidgetFromOther","internal_config","_config","merge","adfOpenModalWidgetFromOther","widgetType","sendSelection","fullScreenScope","opts","modalSize","windowClass","temporal","persistDashboard","this","$parent","adfAddWidgetDialog","addWidgetDialog","addScopeCfg","widgetSortingDirection","widgetSorting","addScope","isFunction","availableCategories","adfAddTemplatePath","addTemplateUrl","widgetFilterCfg","addWidget","changeThumbnail","images","_currThumb","_currImg","link","$element","$attr","enableConfirmDelete","editing","preLink","gridOptions","cellHeight","verticalMargin","animate","float","alwaysShowResizeHandle","minWidth","auto","resizable","handles","disableDrag","disableResize","gsHandler","compile","pre","dashEvents","enable","disable","GridStackUI","Utils","sort","onChange","items","onDragStart","ui","console","log","onDragStop","onResizeStart","onResizeStop","onItemAdded","item","onItemRemoved","dashEvt","$filter","array","objectKey","provider","widgetsPath","messageTemplate","loadingTemplate","customWidgetTemplatePath","defaultApplyFunction","extend","frameless","apply","path","template","templatePath","$get","cid","getTime","idEquals","other","toString","$q","widgetService","$compile","$controller","$injector","renderError","msg","warn","html","compileWidget","currentScope","configChanged","_getWindowTime","from","newScope","windowFilter","to","moment","subtract","_d","translateMessage","content","extra","is_menu","menu","isPaginationEnable","reloadData","navOptionsHandler","firstLoad","renderWidget","is_itemsPerPage","itemsPerPage","page","getWindowTime","winTime","eval","rawdate","format","templateScope","_from","selectionManager","base","resolvers","$tpl","getTemplate","resolve","promise","isString","get","invoke","all","locals","resolveAs","templateCtrl","controllerAs","children","data","contents","reason","require","filterHandler","widgetActionsHandler","attrs","adfWidgetGridCtrl","search","widgetConfigChangedEvt","changeWidgets","widgetReloadEvt","reloadWidget","$interval","Filter","toastr","styleClass","fromJson","show_modal_footer","show_reload_config","widgetState","isCollapsed","collapsed","debug","postLink","deleteWidget","remove","deleteScope","deleteTemplateUrl","deleteDialog","print","isExecuteOperationEnabled","entityKey","headersFilter","oql","executeOperation","typeFilter","showFilter","showFinalFilter","launchSearching","launchSearchingAdv","filterApplied","executeSearch","quick","json","Object","keys","trim","launchSearchingQuick","launchSearchingShared","shared","filterSharedSelect","$item","$model","filterSharedRemove","timeObj","enter","keycode","keyCode","which","customSelectors","getCustomSelectors","widgetSelectors","findFields","fields","$apply","err","changeDirection","direction","debugQuery","parseQuery","toJson","unknownWords","filter_error","autocomplete_options","suggest","suggest_field_delimited","selectedItems","currentSelection","isSelected","obj","totalSelected","sendEntities","manageSelectedItems","selectionScope","selectionConfig","operationTypes","filterTypes","selected","manageItemsSelectedTemplate","animation","restoreSelection","clearSelection","applyFilter","customOql","filterAction","operationType","saveChangesDialog","finalSelection","visible","selectedItemsLength","lastItem","createApplyPromise","result","deferred","defer","reject","when","editScope","saveDialog","validationError","applyFn","editScopeDefinition","setReloadTimeout","_setFilterType","selectFilter","filterId","_widgetFilters","sharedFilters","loadingData","startLoading","stopLoading","lastMessageTime","setStatusMessage","message","statusMessage","changeFilter","actions","setActions","adfDashboardCollapseExpand","args","collapseExpandStatus","adfWidgetEnterEditMode","adfIsEditMode","adfDashboardChanged","widgetConfigChanged","adfDashboardEditsCancelled","openFullScreen","$emit","openAboutScreen","modalInstance","$uibModalInstance","information","about","info","ok","selectedItem","saveWidgetScreen","wId","objectSelector","fileName","createQuickFilter","fieldsQuickSearch","criteria","_filter","or","field","operator","downloadCsv","extra_filter","columns","scope_filter","final_filter","order","window_filter","onWindowTimeChanged","and","JSON","parse","generateQR","stopReloadTimeout","addItemToSelection","removeItemFromSelection","reloadPeriod","isNaN","cancel","post","factory","$http","$sce","$templateCache","parseUrl","parsedUrl","substring","exposed","tpl","getTrustedResourceUrl","success","response","put"],"mappings":"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","file":"opengate-angular-dashboard-framework.min.js","sourcesContent":["/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('adf', ['adf.provider', 'ui.bootstrap', 'opengate-angular-js'])\r\n    .value('adfTemplatePath', '../src/templates/')\r\n    .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\r\n    .value('adfVersion', '<<adfVersion>>');","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name adf.directive:adfDashboard\r\n * @element div\r\n * @restrict EA\r\n * @scope\r\n * @description\r\n *\r\n * `adfDashboard` is a directive which renders the dashboard with all its\r\n * components. The directive requires a name attribute. The name of the\r\n * dashboard can be used to store the model.\r\n *\r\n * @param {string} name name of the dashboard. This attribute is required.\r\n * @param {boolean=} editable false to disable the editmode of the dashboard.\r\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\r\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\r\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\r\n * @param {object=} adfModel model object of the dashboard.\r\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\r\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\r\n *                   events during edit mode not reset it if edit mode is exited.\r\n * @param {boolean=} categories enable categories for the add widget dialog.\r\n */\r\n\r\nangular.module('adf')\r\n    .directive('adfDashboard', function ($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath, $faIcons, $translate, Upload) {\r\n        'use strict';\r\n\r\n        function stringToBoolean(string) {\r\n            switch (angular.isDefined(string) ? string.toLowerCase() : null) {\r\n                case 'true':\r\n                case 'yes':\r\n                case '1':\r\n                    return true;\r\n                case 'false':\r\n                case 'no':\r\n                case '0':\r\n                case null:\r\n                    return false;\r\n                default:\r\n                    return Boolean(string);\r\n            }\r\n        }\r\n\r\n        function createConfiguration(type) {\r\n            var cfg = {};\r\n            var config = dashboard.widgets[type].config || {};\r\n            cfg = angular.copy(config);\r\n            return cfg;\r\n        }\r\n\r\n        function createWidget(type) {\r\n            var wdgt = {};\r\n            var widget = dashboard.widgets[type];\r\n            if (widget) {\r\n                wdgt = angular.copy(widget);\r\n            }\r\n            return wdgt;\r\n        }\r\n\r\n        /**\r\n         * Adds the widget to first column of the model.\r\n         *\r\n         * @param dashboard model\r\n         * @param widget to add to model\r\n         * @param name name of the dashboard\r\n         */\r\n        function addNewWidgetToModel(model, widget, name, forceToSave) {\r\n            if (model) {\r\n                if (!model.grid) {\r\n                    model.grid = [];\r\n                }\r\n\r\n                var newWidget = {\r\n                    width: 3,\r\n                    height: 2,\r\n                    x: 0,\r\n                    y: 0,\r\n                    definition: widget\r\n                };\r\n                model.grid.push(newWidget);\r\n\r\n                $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\r\n\r\n                if (forceToSave) {\r\n                    $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n                }\r\n            } else {\r\n                $log.error('model is undefined');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Checks if the edit mode of the widget should be opened immediately.\r\n         *\r\n         * @param widget type\r\n         */\r\n        function isEditModeImmediate(type) {\r\n            var widget = dashboard.widgets[type];\r\n            return widget && widget.edit && widget.edit.immediate;\r\n        }\r\n\r\n        /**\r\n         * Opens the edit mode of the specified widget.\r\n         *\r\n         * @param dashboard scope\r\n         * @param widget\r\n         */\r\n        function openEditMode($scope, widget) {\r\n            // wait some time before fire enter edit mode event\r\n            $timeout(function () {\r\n                $scope.$broadcast('adfWidgetEnterEditMode', widget);\r\n            }, 200);\r\n        }\r\n\r\n        /**\r\n         * Creates object with the category name as key and an array of widgets as value.\r\n         *\r\n         * @param widgets array of widgets\r\n         *\r\n         * @return array of categories\r\n         */\r\n        function createCategories(widgets) {\r\n            var categories = {};\r\n            angular.forEach(widgets, function (widget, key) {\r\n                var category = widget.category;\r\n                // if the widget has no category use a default one\r\n                if (!category) {\r\n                    category = 'ADF.CATEGORY.MISCELANOUS';\r\n                }\r\n\r\n                widget.title = $translate.instant(widget.title);\r\n                widget.description = $translate.instant(widget.description);\r\n                widget.category = $translate.instant(widget.category);\r\n\r\n                // push widget to category array\r\n                if (angular.isUndefined(categories[widget.category])) {\r\n                    categories[widget.category] = {\r\n                        widgets: {}\r\n                    };\r\n                }\r\n\r\n                categories[widget.category].widgets[key] = widget;\r\n            });\r\n            return categories;\r\n        }\r\n\r\n        function createCategoriesList(widgets) {\r\n            var categories = [];\r\n            angular.forEach(widgets, function (widget, key) {\r\n                if (!widget.category) {\r\n                    widget.category = 'ADF.CATEGORY.MISCELLANEOUS';\r\n                }\r\n\r\n                widget.title = $translate.instant(widget.title);\r\n                widget.description = $translate.instant(widget.description);\r\n                widget.category = $translate.instant(widget.category);\r\n\r\n                if (!widget.categoryTags) {\r\n                    widget.categoryTags = 'ADF.CATEGORY.TAG.MISCELLANEOUS';\r\n                }\r\n\r\n                var categoriesTmp = widget.categoryTags.split(',');\r\n\r\n                angular.forEach(categoriesTmp, function (category, idx) {\r\n                    // push widget to category array\r\n                    var translatedCat = $translate.instant(category);\r\n                    if (categories.indexOf(translatedCat) === -1)\r\n                        categories.push(translatedCat);\r\n                });\r\n\r\n            });\r\n            return categories;\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            scope: {\r\n                name: '@',\r\n                collapsible: '@',\r\n                editable: '@',\r\n                editMode: '@',\r\n                continuousEditMode: '=',\r\n                maximizable: '@',\r\n                adfModel: '=',\r\n                adfWidgetFilter: '=',\r\n                categories: '@',\r\n                hideButtons: '=',\r\n                extraData: '='\r\n            },\r\n            controller: function ($scope) {\r\n                var model = {};\r\n                var widgetFilter = null;\r\n                var name = $scope.name;\r\n\r\n                var _getReloadWidgets = function (widget) {\r\n                    var reloadWidgets = {\r\n                        configChange: [],\r\n                        reload: []\r\n                    };\r\n                    if (widget) {\r\n                        var definition = angular.copy(widget.definition);\r\n                        var ftype = definition.Ftype;\r\n                        var id = definition.wid;\r\n                        var config = definition.config || {};\r\n                        var filter = config.filter;\r\n                        model.grid.forEach(function (w) {\r\n                            var f = w.definition.config.filter;\r\n                            var ft = w.definition.Ftype;\r\n                            //solo recargamos y actualizamos los widgets:\r\n                            // - que tengan filtro\r\n                            // y que el id tenga filtro\r\n                            // y que el id del filtro coincida con el wid del widget que ha modificado el fitro\r\n                            if (f && f.id && f.id === id) {\r\n                                w.definition.config.filter = filter;\r\n                                w.definition.config.filter.id = id;\r\n                                reloadWidgets.reload.push(w.definition.wid);\r\n                            } else if (ftype === ft) {\r\n                                reloadWidgets.configChange.push(w.definition.wid);\r\n                            }\r\n                        });\r\n                    }\r\n                    return reloadWidgets;\r\n                };\r\n\r\n                var updateWidgetFilters = function (model) {\r\n                    var widgetFilters = [];\r\n                    var grid = model.grid;\r\n                    if (grid && grid.length > 0) {\r\n                        grid.forEach(function (element) {\r\n                            var definition = element.definition;\r\n                            var config = definition.config || {};\r\n                            var filter = config.filter;\r\n                            widgetFilters.push({\r\n                                wid: definition.wid,\r\n                                title: definition.title,\r\n                                filter: filter,\r\n                                Ftype: definition.Ftype\r\n                            });\r\n                        });\r\n                    }\r\n                    if (!$scope.options) {\r\n                        $scope.options = {\r\n                            extraData: {}\r\n                        };\r\n                    }\r\n                    $scope.options.extraData.widgetFilters = widgetFilters;\r\n                };\r\n                // Watching for changes on adfModel\r\n                $scope.$watch('adfModel', function (oldVal, newVal) {\r\n                    // has model changed or is the model attribute not set\r\n                    if (newVal !== null || (oldVal === null && newVal === null)) {\r\n                        model = $scope.adfModel;\r\n                        widgetFilter = $scope.adfWidgetFilter;\r\n\r\n                        if (model) {\r\n                            updateWidgetFilters(model);\r\n                            if (!model.title) {\r\n                                model.title = $translate.instant('ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD');\r\n                            }\r\n                            if (!model.titleTemplateUrl) {\r\n                                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\r\n                            }\r\n                            $scope.model = model;\r\n                        } else {\r\n                            $log.error('could not find or create model');\r\n                        }\r\n                    }\r\n                }, true);\r\n\r\n                // edit mode\r\n                $scope.editMode = false;\r\n\r\n                function getNewModalScope() {\r\n                    var scope = $scope.$new();\r\n                    return scope;\r\n                }\r\n\r\n                $scope.toggleEditMode = function (openConfigWindow) {\r\n                    $scope.editMode = !$scope.editMode;\r\n                    if ($scope.editMode) {\r\n                        if (!$scope.continuousEditMode) {\r\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n                            $rootScope.$broadcast('adfIsEditMode');\r\n                        }\r\n\r\n                        if (openConfigWindow) {\r\n                            $scope.editDashboardDialog();\r\n                        }\r\n                    }\r\n\r\n                    if (!$scope.editMode) {\r\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n                    }\r\n                };\r\n\r\n                var adfToggleEditMode = $scope.$on('adfToggleEditMode', function (event, isNewDashboard) {\r\n                    if (isNewDashboard) {\r\n                        $scope.toggleEditMode(true);\r\n                    } else {\r\n                        $scope.toggleEditMode();\r\n                    }\r\n                });\r\n\r\n                var adfCancelEditMode = $scope.$on('adfCancelEditMode', function (event) {\r\n                    if ($scope.editMode) {\r\n                        $scope.cancelEditMode();\r\n                    }\r\n                });\r\n\r\n                var adfWidgetRemoved = $scope.$on('adfWidgetRemovedFromGrid', function (event, widget) {\r\n                    var index = null;\r\n                    angular.forEach($scope.adfModel.grid, function (widgetTmp, idx) {\r\n                        if (widgetTmp.definition.wid === widget.wid) {\r\n                            index = idx;\r\n                        }\r\n                    });\r\n\r\n                    if (index >= 0) {\r\n                        $scope.adfModel.grid.splice(index, 1);\r\n                    }\r\n                });\r\n\r\n                $scope.cancelEditMode = function () {\r\n                    $scope.editMode = false;\r\n                    if (!$scope.continuousEditMode && ($scope.modelCopy !== $scope.adfModel)) {\r\n                        $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\r\n                    }\r\n                    $rootScope.$broadcast('adfDashboardEditsCancelled');\r\n                };\r\n\r\n                var adfEditDashboardDialog = $scope.$on('adfEditDashboardDialog', function (event) {\r\n                    if ($scope.editMode) {\r\n                        $scope.editDashboardDialog();\r\n                    }\r\n                });\r\n\r\n\r\n                var adfLaunchSearchingFromWidget = $scope.$on('adfLaunchSearchingFromWidget', function (event, widget) {\r\n                    var reloadWidgets = _getReloadWidgets(widget);\r\n                    $rootScope.$broadcast('adfFilterChanged', name, model, reloadWidgets);\r\n                });\r\n                var adfWindowTimeChangedFromWidget = $scope.$on('adfWindowTimeChangedFromWidget', function (event) {\r\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\r\n                });\r\n\r\n                // edit dashboard settings\r\n                $scope.editDashboardDialog = function () {\r\n                    var editDashboardScope = getNewModalScope();\r\n                    // create a copy of the title, to avoid changing the title to\r\n                    // \"dashboard\" if the field is empty\r\n                    editDashboardScope.copy = {\r\n                        title: (model.title !== 'ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD' ? model.title : ''),\r\n                        description: model.description,\r\n                        backgroundColor: model.backgroundColor ? model.backgroundColor : undefined,\r\n                        time: new Date(),\r\n                        backgroundImage: model.backgroundImage ? model.backgroundImage : undefined,\r\n                        file: model.backgroundImage ? model.backgroundImage : undefined,\r\n                    };\r\n\r\n                    editDashboardScope.backgroundSize = {\r\n                        name: 'backgroundSize',\r\n                        model: model.backgroundImageSize ? model.backgroundImageSize : '100% 100%',\r\n                        options: {\r\n                            '100% 100%': {\r\n                                title: $translate.instant('SIZE_CONF.AUTO')\r\n                            },\r\n                            'contain': {\r\n                                title: $translate.instant('SIZE_CONF.CONTAIN')\r\n                            },\r\n                            'cover': {\r\n                                title: $translate.instant('SIZE_CONF.COVER')\r\n                            }\r\n                        }\r\n                    };\r\n\r\n                    editDashboardScope.iconConfiguration = {\r\n                        name: 'iconConfiguration',\r\n                        model: model.iconType ? model.iconType : 'icon',\r\n                        url: undefined,\r\n                        file: undefined,\r\n                        iconType: model.iconType ? model.iconType : 'icon',\r\n                        icon: model.iconType === 'icon' ? model.icon : 'fa-tachometer',\r\n                        options: {\r\n                            'icon': {\r\n                                title: $translate.instant('ICON.LIBRARY'),\r\n                            },\r\n                            'image': {\r\n                                title: $translate.instant('ICON.IMAGE')\r\n                            }\r\n                        }\r\n                    };\r\n                    if (editDashboardScope.iconConfiguration.iconType === 'image') {\r\n                        editDashboardScope.iconConfiguration.file = model.icon;\r\n                        editDashboardScope.iconConfiguration.url = model.icon;\r\n                    }\r\n                    editDashboardScope.imageSelected = function (file) {\r\n                        if (file) {\r\n                            editDashboardScope.iconConfiguration.file = file;\r\n                            Upload.base64DataUrl(file).then(\r\n                                function (url) {\r\n                                    editDashboardScope.iconConfiguration.url = url;\r\n                                    editDashboardScope.iconConfiguration.file = url;\r\n                                    editDashboardScope.iconConfiguration.iconType = 'image'\r\n\r\n                                });\r\n                        } else {\r\n                            editDashboardScope.removeDataFile();\r\n                        }\r\n                    };\r\n                    editDashboardScope.backgroundImageSelected = function (file) {\r\n                        if (file) {\r\n                            editDashboardScope.iconConfiguration.file = file;\r\n                            Upload.base64DataUrl(file).then(\r\n                                function (url) {\r\n                                    editDashboardScope.copy.backgroundImage = url;\r\n                                    editDashboardScope.copy.file = url;\r\n\r\n                                });\r\n                        } else {\r\n                            editDashboardScope.removeBackgroundFile();\r\n                        }\r\n                    };\r\n                    editDashboardScope.removeDataFile = function () {\r\n                        editDashboardScope.iconConfiguration.file = null;\r\n                        editDashboardScope.iconConfiguration.url = null;\r\n                    };\r\n                    editDashboardScope.removeBackgroundFile = function () {\r\n                        editDashboardScope.copy.backgroundImage = null;\r\n                        editDashboardScope.copy.file = null;\r\n\r\n                    };\r\n                    // pass icon list\r\n                    editDashboardScope.availableIcons = $faIcons.list();\r\n\r\n                    var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\r\n                    if (model.editTemplateUrl) {\r\n                        adfEditTemplatePath = model.editTemplateUrl;\r\n                    }\r\n                    var instance = $uibModal.open({\r\n                        scope: editDashboardScope,\r\n                        templateUrl: adfEditTemplatePath,\r\n                        backdrop: 'static',\r\n                        keyboard: false,\r\n                        size: 'lg'\r\n                    });\r\n\r\n\r\n                    editDashboardScope.closeDialog = function () {\r\n                        // copy the new title back to the model\r\n                        model.title = editDashboardScope.copy.title;\r\n                        model.description = editDashboardScope.copy.description;\r\n                        if (editDashboardScope.iconConfiguration.model === 'image') {\r\n                            model.icon = editDashboardScope.iconConfiguration.url;\r\n\r\n                        } else if (editDashboardScope.iconConfiguration.model === 'icon') {\r\n                            model.icon = editDashboardScope.iconConfiguration.icon;\r\n\r\n                        }\r\n                        model.iconType = editDashboardScope.iconConfiguration.model;\r\n                        model.backgroundColor = editDashboardScope.copy.backgroundColor ? editDashboardScope.copy.backgroundColor : undefined;\r\n                        model.backgroundImage = editDashboardScope.copy.backgroundImage ? editDashboardScope.copy.backgroundImage : undefined;\r\n                        model.backgroundImageSize = editDashboardScope.backgroundSize.model;\r\n                        // close modal and destroy the scope\r\n                        instance.close();\r\n                        editDashboardScope.$destroy();\r\n                    };\r\n                };\r\n\r\n                var adfOpenWidgetFromOther = $scope.$on('adfOpenWidgetFromOther', function (event, widget, config) {\r\n\r\n                    var internal_config = createConfiguration(widget);\r\n                    var _config = angular.merge({}, internal_config, config || {});\r\n                    var w = {\r\n                        type: widget,\r\n                        config: _config,\r\n                        title: _config.title\r\n                    };\r\n                    addNewWidgetToModel(model, w, name, !$scope.editMode);\r\n                });\r\n\r\n                var adfOpenModalWidgetFromOther = $scope.$on('adfOpenModalWidgetFromOther', function (event, widgetType, config) {\r\n                    var templateUrl = adfTemplatePath + 'widget-fullscreen.html';\r\n                    var _config = config || {};\r\n                    if (_config.sendSelection) {\r\n                        templateUrl = adfTemplatePath + 'widget-fullscreen-selection.html';\r\n                    }\r\n                    var widget = createWidget(widgetType);\r\n                    widget.config = angular.merge({}, widget.config, _config);\r\n                    widget.type = widgetType;\r\n                    if (widget.config.title) {\r\n                        widget.title = widget.config.title;\r\n                    }\r\n                    var fullScreenScope = $scope.$new();\r\n                    fullScreenScope.definition = fullScreenScope.widget = widget;\r\n                    var opts = {\r\n                        scope: fullScreenScope,\r\n                        templateUrl: templateUrl,\r\n                        size: fullScreenScope.definition.modalSize || 'el',\r\n                        backdrop: 'static',\r\n                        windowClass: (fullScreenScope.definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\r\n                    };\r\n\r\n                    if ($scope.model && !$scope.model.temporal) {\r\n                        fullScreenScope.persistDashboard = function () {\r\n                            $rootScope.$broadcast('adfOpenWidgetFromOther', this.$parent.widget.type, this.$parent.widget.config || {});\r\n                            this.closeDialog();\r\n                        };\r\n                    }\r\n\r\n                    var instance = $uibModal.open(opts);\r\n                    fullScreenScope.closeDialog = function () {\r\n                        instance.close();\r\n                        fullScreenScope.$destroy();\r\n                    };\r\n\r\n\r\n                });\r\n\r\n                var adfAddWidgetDialog = $scope.$on('adfAddWidgetDialog', function (event) {\r\n                    if (!model.temporal && model.editable) {\r\n                        if (!$scope.editMode) {\r\n                            $scope.editMode = true;\r\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n                            $rootScope.$broadcast('adfIsEditMode');\r\n                        }\r\n\r\n                        $scope.addWidgetDialog();\r\n                    }\r\n                });\r\n\r\n                // add widget dialog\r\n                $scope.addScopeCfg = {\r\n                    widgetFilter: {},\r\n                    widgetSortingDirection: '',\r\n                    widgetSorting: 'priority'\r\n                };\r\n\r\n                $scope.addWidgetDialog = function () {\r\n                    var addScope = getNewModalScope();\r\n                    var widgets;\r\n                    if (angular.isFunction(widgetFilter)) {\r\n                        widgets = {};\r\n                        angular.forEach(dashboard.widgets, function (widget, type) {\r\n                            if (widgetFilter(widget, type, model)) {\r\n                                widgets[type] = widget;\r\n                            }\r\n                        });\r\n                    } else {\r\n                        widgets = dashboard.widgets;\r\n                    }\r\n                    addScope.widgets = widgets;\r\n\r\n                    angular.forEach(addScope.widgets, function (widget, type) {\r\n                        widget.key = type;\r\n                        if (!widget.category) {\r\n                            widget.category = 'Miscellaneous';\r\n                        }\r\n                    });\r\n\r\n                    // pass createCategories function to scope, if categories option is enabled\r\n                    if ($scope.options.categories) {\r\n                        addScope.createCategories = createCategories;\r\n                    } else {\r\n                        addScope.availableCategories = createCategoriesList(widgets);\r\n                    }\r\n\r\n                    var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\r\n                    if (model.addTemplateUrl) {\r\n                        adfAddTemplatePath = model.addTemplateUrl;\r\n                    }\r\n\r\n                    var opts = {\r\n                        scope: addScope,\r\n                        templateUrl: adfAddTemplatePath,\r\n                        backdrop: 'static',\r\n                        size: 'lg'\r\n                    };\r\n\r\n                    var instance = $uibModal.open(opts);\r\n\r\n                    addScope.widgetFilterCfg = $scope.addScopeCfg;\r\n\r\n                    addScope.addWidget = function (widget) {\r\n                        var w = {\r\n                            type: widget,\r\n                            Ftype: dashboard.widgets[widget].Ftype || null,\r\n                            config: createConfiguration(widget)\r\n                        };\r\n                        addNewWidgetToModel(model, w, name);\r\n                        // close and destroy\r\n                        instance.close();\r\n                        addScope.$destroy();\r\n\r\n                        // check for open edit mode immediately\r\n                        if (isEditModeImmediate(widget)) {\r\n                            openEditMode($scope, w);\r\n                        }\r\n                    };\r\n\r\n                    addScope.changeThumbnail = function (widget) {\r\n                        if (widget.images) {\r\n                            if (angular.isUndefined(widget._currThumb)) {\r\n                                widget._currThumb = 1;\r\n                            } else {\r\n                                widget._currThumb += 1;\r\n                            }\r\n\r\n\r\n                            if (widget._currThumb >= widget.images.length) {\r\n                                widget._currThumb = 0;\r\n                            }\r\n\r\n                            widget._currImg = widget.images[widget._currThumb];\r\n                        }\r\n                    };\r\n\r\n                    addScope.closeDialog = function () {\r\n                        // close and destroy\r\n                        instance.close();\r\n                        addScope.$destroy();\r\n                    };\r\n                };\r\n\r\n                $scope.addNewWidgetToModel = addNewWidgetToModel;\r\n\r\n                $scope.$on('destroy', function () {\r\n                    adfLaunchSearchingFromWidget();\r\n                    adfWindowTimeChangedFromWidget();\r\n                    adfToggleEditMode();\r\n                    adfOpenWidgetFromOther();\r\n                    adfOpenModalWidgetFromOther();\r\n                    adfCancelEditMode();\r\n                    adfAddWidgetDialog();\r\n                    adfEditDashboardDialog();\r\n                    adfWidgetRemoved();\r\n                });\r\n            },\r\n            link: function ($scope, $element, $attr) {\r\n                // pass options to scope\r\n                var options = {\r\n                    name: $attr.name,\r\n                    editable: true,\r\n                    enableConfirmDelete: stringToBoolean($attr.enableConfirmDelete),\r\n                    maximizable: stringToBoolean($attr.maximizable),\r\n                    collapsible: stringToBoolean($attr.collapsible),\r\n                    categories: stringToBoolean($attr.categories),\r\n                    extraData: {}\r\n                };\r\n\r\n                if (angular.isDefined($attr.editable)) {\r\n                    options.editable = stringToBoolean($attr.editable);\r\n                }\r\n\r\n                if (angular.isDefined($scope.extraData)) {\r\n                    options.extraData = $scope.extraData;\r\n                }\r\n\r\n                options.extraData.editing = $scope.editMode;\r\n\r\n                $scope.options = options;\r\n            },\r\n            templateUrl: adfTemplatePath + 'dashboard.html'\r\n        };\r\n    });","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the 'Software'), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n    .directive('adfDashboardGrid', function(adfTemplatePath) {\r\n        'use strict';\r\n\r\n        function preLink($scope) {\r\n            $scope.gridOptions = {\r\n                cellHeight: 146,\r\n                verticalMargin: 10,\r\n                animate: true,\r\n                float: false,\r\n                alwaysShowResizeHandle: true,\r\n                minWidth: 768,\r\n                auto: true,\r\n                resizable: {\r\n                    handles: 'e, se, s, sw, w'\r\n                },\r\n                disableDrag: !$scope.editMode,\r\n                disableResize: !$scope.editMode\r\n            };\r\n\r\n            $scope.gsHandler = null;\r\n        }\r\n\r\n        return {\r\n            restrict: 'E',\r\n            scope: {\r\n                adfModel: '=',\r\n                editMode: '=',\r\n                continuousEditMode: '=',\r\n                options: '='\r\n            },\r\n            templateUrl: adfTemplatePath + 'dashboard-grid.html',\r\n            compile: function() {\r\n                return {\r\n                    pre: preLink,\r\n                };\r\n            },\r\n            controller: function($scope, $timeout) {\r\n                var dashEvents = [];\r\n                dashEvents.push($scope.$on('adfIsEditMode', function() {\r\n                    $timeout(function() {\r\n                        $scope.gsHandler.enable();\r\n                    }, 100);\r\n                }));\r\n\r\n                dashEvents.push($scope.$on('adfDashboardChanged', function() {\r\n                    $timeout(function() {\r\n                        $scope.gsHandler.disable();\r\n                    }, 100);\r\n                }));\r\n\r\n                dashEvents.push($scope.$on('adfDashboardEditsCancelled', function() {\r\n                    $timeout(function() {\r\n                        $scope.gsHandler.disable();\r\n                    }, 100);\r\n                }));\r\n\r\n                dashEvents.push($scope.$on('adfCancelEditMode', function() {\r\n                    $timeout(function() {\r\n                        $scope.gsHandler.disable();\r\n                    }, 100);\r\n                }));\r\n\r\n                dashEvents.push($scope.$on('adfWidgetAdded', function(event) {\r\n                    $timeout(function() {\r\n                        $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\r\n                        $scope.gsHandler.enable();\r\n                    }, 100);\r\n                }));\r\n\r\n                $scope.onChange = function(event, items) {\r\n                    //console.log('onChange event: ' + event + ' items:' + items);\r\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\r\n                };\r\n\r\n                $scope.onDragStart = function(event, ui) {\r\n                    console.log('onDragStart event: ' + event + ' ui:' + ui);\r\n                };\r\n\r\n                $scope.onDragStop = function(event, ui) {\r\n                    console.log('onDragStop event: ' + event + ' ui:' + ui);\r\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\r\n                };\r\n\r\n                $scope.onResizeStart = function(event, ui) {\r\n                    console.log('onResizeStart event: ' + event + ' ui:' + ui);\r\n                };\r\n\r\n                $scope.onResizeStop = function(event, ui) {\r\n                    console.log('onResizeStop event: ' + event + ' ui:' + ui);\r\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\r\n                    $scope.$broadcast('OnResizeWidget');\r\n                };\r\n\r\n                $scope.onItemAdded = function(item) {\r\n                    console.log('onItemAdded item: ' + item);\r\n                };\r\n\r\n                $scope.onItemRemoved = function(item) {\r\n                    console.log('onItemRemoved item: ' + item);\r\n                };\r\n\r\n                $scope.$on('destroy', function() {\r\n                    dashEvents.forEach(function(dashEvt) {\r\n                        dashEvt();\r\n                    });\r\n                });\r\n            }\r\n        };\r\n    });","/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .filter('adfOrderByObjectKey', function($filter) {\r\n    'use strict';\r\n\r\n    return function(item, key){\r\n      var array = [];\r\n      angular.forEach(item, function(value, objectKey){\r\n        value[key] = objectKey;\r\n        array.push(value);\r\n      });\r\n      return $filter('orderBy')(array, key);\r\n    };\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * @ngdoc object\r\n * @name adf.dashboardProvider\r\n * @description\r\n *\r\n * The dashboardProvider can be used to register widgets.\r\n */\r\nangular.module('adf.provider', [])\r\n    .provider('dashboard', function () {\r\n\r\n        var widgets = {};\r\n        var widgetsPath = '';\r\n        var messageTemplate = '<div class=\"alert alert-primary\">{}</div>';\r\n        var loadingTemplate = '\\\r\n      <div class=\"progress progress-striped active\">\\n\\\r\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\r\n          <span class=\"sr-only\" translate>FORM.MSG.LOADING ...</span>\\n\\\r\n        </div>\\n\\\r\n      </div>';\r\n        var customWidgetTemplatePath = null;\r\n\r\n        // default apply function of widget.edit.apply\r\n        var defaultApplyFunction = function () {\r\n            return true;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#widget\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Registers a new widget.\r\n         *\r\n         * @param {string} name of the widget\r\n         * @param {object} widget to be registered.\r\n         *\r\n         *   Object properties:\r\n         *\r\n         *   - `title` - `{string=}` - The title of the widget.\r\n         *   - `description` - `{string=}` - Description of the widget.\r\n         *   - `category` - `{string=}` - Category of the widget.\r\n         *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\r\n         *   - `config` - `{object}` - Predefined widget configuration.\r\n         *   - `controller` - `{string=|function()=}` - Controller fn that should be\r\n         *      associated with newly created scope of the widget or the name of a\r\n         *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\r\n         *      if passed as a string.\r\n         *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\r\n         *      published to scope under the `controllerAs` name.\r\n         *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\r\n         *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\r\n         *   - `template` - `{string=|function()=}` - html template as a string.\r\n         *   - `templateUrl` - `{string=}` - path to an html template.\r\n         *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\r\n         *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n         *      be injected into the controller. If any of these dependencies are promises, the widget\r\n         *      will wait for them all to be resolved or one to be rejected before the controller is\r\n         *      instantiated.\r\n         *      If all the promises are resolved successfully, the values of the resolved promises are\r\n         *      injected.\r\n         *\r\n         *      The map object is:\r\n         *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\r\n         *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n         *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\r\n         *        and the return value is treated as the dependency. If the result is a promise, it is\r\n         *        resolved before its value is injected into the controller.\r\n         *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n         *      on the scope of the widget.\r\n         *   - `edit` - `{object}` - Edit modus of the widget.\r\n         *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n         *        on the scope of the widget.\r\n         *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\r\n         *        Default is true.\r\n         *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\r\n         *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\r\n         *        The function have to return a boolean or an promise which can be resolved to a boolean.\r\n         *        The function can use injection.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.widget = function (name, widget) {\r\n            var w = angular.extend({\r\n                reload: false,\r\n                frameless: false\r\n            }, widget);\r\n            if (w.edit) {\r\n                var edit = {\r\n                    reload: true,\r\n                    immediate: false,\r\n                    apply: defaultApplyFunction\r\n                };\r\n                angular.extend(edit, w.edit);\r\n                w.edit = edit;\r\n            }\r\n            //OUW-1610\r\n            if (!w.config) {\r\n                w.config = {};\r\n            }\r\n            widgets[name] = w;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#widgetsPath\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Sets the path to the directory which contains the widgets. The widgets\r\n         * path is used for widgets with a templateUrl which contains the\r\n         * placeholder {widgetsPath}. The placeholder is replaced with the\r\n         * configured value, before the template is loaded, but the template is\r\n         * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\r\n         * The default value of widgetPaths is ''.\r\n         *\r\n         *\r\n         * @param {string} path to the directory which contains the widgets\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.widgetsPath = function (path) {\r\n            widgetsPath = path;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#messageTemplate\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the template for messages.\r\n         *\r\n         * @param {string} template for messages.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.messageTemplate = function (template) {\r\n            messageTemplate = template;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#loadingTemplate\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the template which is displayed as\r\n         * long as the widget resources are not resolved.\r\n         *\r\n         * @param {string} template loading template\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.loadingTemplate = function (template) {\r\n            loadingTemplate = template;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#customWidgetTemplatePath\r\n         * @propertyOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the container template for the widgets\r\n         *\r\n         * @param {string} path to the custom widget template\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.customWidgetTemplatePath = function (templatePath) {\r\n            customWidgetTemplatePath = templatePath;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc service\r\n         * @name adf.dashboard\r\n         * @description\r\n         *\r\n         * The dashboard holds all options and  widgets.\r\n         *\r\n         * @property {Array.<Object>} widgets Array of registered widgets.\r\n         * @property {string} widgetsPath Default path for widgets.\r\n         * @property {string} messageTemplate Template for messages.\r\n         * @property {string} loadingTemplate Template for widget loading.\r\n         * * @property {string} customWidgetTemplatePath Changes the container template for the widgets\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.$get = function () {\r\n            var cid = 0;\r\n\r\n            return {\r\n                widgets: widgets,\r\n                widgetsPath: widgetsPath,\r\n                messageTemplate: messageTemplate,\r\n                loadingTemplate: loadingTemplate,\r\n                customWidgetTemplatePath: customWidgetTemplatePath,\r\n\r\n                /**\r\n                 * @ngdoc method\r\n                 * @name adf.dashboard#id\r\n                 * @methodOf adf.dashboard\r\n                 * @description\r\n                 *\r\n                 * Creates an ongoing numeric id. The method is used to create ids for\r\n                 * columns and widgets in the dashboard.\r\n                 */\r\n                id: function () {\r\n                    return new Date().getTime() + '-' + (++cid);\r\n                },\r\n\r\n                /**\r\n                 * @ngdoc method\r\n                 * @name adf.dashboard#idEqual\r\n                 * @methodOf adf.dashboard\r\n                 * @description\r\n                 *\r\n                 * Checks if the given ids are equal.\r\n                 *\r\n                 * @param {string} id widget or column id\r\n                 * @param {string} other widget or column id\r\n                 */\r\n                idEquals: function (id, other) {\r\n                    // use toString, because old ids are numbers\r\n                    return ((id) && (other)) && (id.toString() === other.toString());\r\n                }\r\n            };\r\n        };\r\n\r\n    });","(function(window, undefined) {'use strict';\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf', ['adf.provider', 'ui.bootstrap', 'opengate-angular-js'])\r\n    .value('adfTemplatePath', '../src/templates/')\r\n    .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\r\n    .value('adfVersion', '7.1.2');\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name adf.directive:adfDashboard\r\n * @element div\r\n * @restrict EA\r\n * @scope\r\n * @description\r\n *\r\n * `adfDashboard` is a directive which renders the dashboard with all its\r\n * components. The directive requires a name attribute. The name of the\r\n * dashboard can be used to store the model.\r\n *\r\n * @param {string} name name of the dashboard. This attribute is required.\r\n * @param {boolean=} editable false to disable the editmode of the dashboard.\r\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\r\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\r\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\r\n * @param {object=} adfModel model object of the dashboard.\r\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\r\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\r\n *                   events during edit mode not reset it if edit mode is exited.\r\n * @param {boolean=} categories enable categories for the add widget dialog.\r\n */\r\n\r\nangular.module('adf')\r\n    .directive('adfDashboard', [\"$rootScope\", \"$log\", \"$timeout\", \"$uibModal\", \"dashboard\", \"adfTemplatePath\", \"$faIcons\", \"$translate\", \"Upload\", function ($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath, $faIcons, $translate, Upload) {\r\n        \r\n\r\n        function stringToBoolean(string) {\r\n            switch (angular.isDefined(string) ? string.toLowerCase() : null) {\r\n                case 'true':\r\n                case 'yes':\r\n                case '1':\r\n                    return true;\r\n                case 'false':\r\n                case 'no':\r\n                case '0':\r\n                case null:\r\n                    return false;\r\n                default:\r\n                    return Boolean(string);\r\n            }\r\n        }\r\n\r\n        function createConfiguration(type) {\r\n            var cfg = {};\r\n            var config = dashboard.widgets[type].config || {};\r\n            cfg = angular.copy(config);\r\n            return cfg;\r\n        }\r\n\r\n        function createWidget(type) {\r\n            var wdgt = {};\r\n            var widget = dashboard.widgets[type];\r\n            if (widget) {\r\n                wdgt = angular.copy(widget);\r\n            }\r\n            return wdgt;\r\n        }\r\n\r\n        /**\r\n         * Adds the widget to first column of the model.\r\n         *\r\n         * @param dashboard model\r\n         * @param widget to add to model\r\n         * @param name name of the dashboard\r\n         */\r\n        function addNewWidgetToModel(model, widget, name, forceToSave) {\r\n            if (model) {\r\n                if (!model.grid) {\r\n                    model.grid = [];\r\n                }\r\n\r\n                var newWidget = {\r\n                    width: 3,\r\n                    height: 2,\r\n                    x: 0,\r\n                    y: 0,\r\n                    definition: widget\r\n                };\r\n                model.grid.push(newWidget);\r\n\r\n                $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\r\n\r\n                if (forceToSave) {\r\n                    $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n                }\r\n            } else {\r\n                $log.error('model is undefined');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Checks if the edit mode of the widget should be opened immediately.\r\n         *\r\n         * @param widget type\r\n         */\r\n        function isEditModeImmediate(type) {\r\n            var widget = dashboard.widgets[type];\r\n            return widget && widget.edit && widget.edit.immediate;\r\n        }\r\n\r\n        /**\r\n         * Opens the edit mode of the specified widget.\r\n         *\r\n         * @param dashboard scope\r\n         * @param widget\r\n         */\r\n        function openEditMode($scope, widget) {\r\n            // wait some time before fire enter edit mode event\r\n            $timeout(function () {\r\n                $scope.$broadcast('adfWidgetEnterEditMode', widget);\r\n            }, 200);\r\n        }\r\n\r\n        /**\r\n         * Creates object with the category name as key and an array of widgets as value.\r\n         *\r\n         * @param widgets array of widgets\r\n         *\r\n         * @return array of categories\r\n         */\r\n        function createCategories(widgets) {\r\n            var categories = {};\r\n            angular.forEach(widgets, function (widget, key) {\r\n                var category = widget.category;\r\n                // if the widget has no category use a default one\r\n                if (!category) {\r\n                    category = 'ADF.CATEGORY.MISCELANOUS';\r\n                }\r\n\r\n                widget.title = $translate.instant(widget.title);\r\n                widget.description = $translate.instant(widget.description);\r\n                widget.category = $translate.instant(widget.category);\r\n\r\n                // push widget to category array\r\n                if (angular.isUndefined(categories[widget.category])) {\r\n                    categories[widget.category] = {\r\n                        widgets: {}\r\n                    };\r\n                }\r\n\r\n                categories[widget.category].widgets[key] = widget;\r\n            });\r\n            return categories;\r\n        }\r\n\r\n        function createCategoriesList(widgets) {\r\n            var categories = [];\r\n            angular.forEach(widgets, function (widget, key) {\r\n                if (!widget.category) {\r\n                    widget.category = 'ADF.CATEGORY.MISCELLANEOUS';\r\n                }\r\n\r\n                widget.title = $translate.instant(widget.title);\r\n                widget.description = $translate.instant(widget.description);\r\n                widget.category = $translate.instant(widget.category);\r\n\r\n                if (!widget.categoryTags) {\r\n                    widget.categoryTags = 'ADF.CATEGORY.TAG.MISCELLANEOUS';\r\n                }\r\n\r\n                var categoriesTmp = widget.categoryTags.split(',');\r\n\r\n                angular.forEach(categoriesTmp, function (category, idx) {\r\n                    // push widget to category array\r\n                    var translatedCat = $translate.instant(category);\r\n                    if (categories.indexOf(translatedCat) === -1)\r\n                        categories.push(translatedCat);\r\n                });\r\n\r\n            });\r\n            return categories;\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            scope: {\r\n                name: '@',\r\n                collapsible: '@',\r\n                editable: '@',\r\n                editMode: '@',\r\n                continuousEditMode: '=',\r\n                maximizable: '@',\r\n                adfModel: '=',\r\n                adfWidgetFilter: '=',\r\n                categories: '@',\r\n                hideButtons: '=',\r\n                extraData: '='\r\n            },\r\n            controller: [\"$scope\", function ($scope) {\r\n                var model = {};\r\n                var widgetFilter = null;\r\n                var name = $scope.name;\r\n\r\n                var _getReloadWidgets = function (widget) {\r\n                    var reloadWidgets = {\r\n                        configChange: [],\r\n                        reload: []\r\n                    };\r\n                    if (widget) {\r\n                        var definition = angular.copy(widget.definition);\r\n                        var ftype = definition.Ftype;\r\n                        var id = definition.wid;\r\n                        var config = definition.config || {};\r\n                        var filter = config.filter;\r\n                        model.grid.forEach(function (w) {\r\n                            var f = w.definition.config.filter;\r\n                            var ft = w.definition.Ftype;\r\n                            //solo recargamos y actualizamos los widgets:\r\n                            // - que tengan filtro\r\n                            // y que el id tenga filtro\r\n                            // y que el id del filtro coincida con el wid del widget que ha modificado el fitro\r\n                            if (f && f.id && f.id === id) {\r\n                                w.definition.config.filter = filter;\r\n                                w.definition.config.filter.id = id;\r\n                                reloadWidgets.reload.push(w.definition.wid);\r\n                            } else if (ftype === ft) {\r\n                                reloadWidgets.configChange.push(w.definition.wid);\r\n                            }\r\n                        });\r\n                    }\r\n                    return reloadWidgets;\r\n                };\r\n\r\n                var updateWidgetFilters = function (model) {\r\n                    var widgetFilters = [];\r\n                    var grid = model.grid;\r\n                    if (grid && grid.length > 0) {\r\n                        grid.forEach(function (element) {\r\n                            var definition = element.definition;\r\n                            var config = definition.config || {};\r\n                            var filter = config.filter;\r\n                            widgetFilters.push({\r\n                                wid: definition.wid,\r\n                                title: definition.title,\r\n                                filter: filter,\r\n                                Ftype: definition.Ftype\r\n                            });\r\n                        });\r\n                    }\r\n                    if (!$scope.options) {\r\n                        $scope.options = {\r\n                            extraData: {}\r\n                        };\r\n                    }\r\n                    $scope.options.extraData.widgetFilters = widgetFilters;\r\n                };\r\n                // Watching for changes on adfModel\r\n                $scope.$watch('adfModel', function (oldVal, newVal) {\r\n                    // has model changed or is the model attribute not set\r\n                    if (newVal !== null || (oldVal === null && newVal === null)) {\r\n                        model = $scope.adfModel;\r\n                        widgetFilter = $scope.adfWidgetFilter;\r\n\r\n                        if (model) {\r\n                            updateWidgetFilters(model);\r\n                            if (!model.title) {\r\n                                model.title = $translate.instant('ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD');\r\n                            }\r\n                            if (!model.titleTemplateUrl) {\r\n                                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\r\n                            }\r\n                            $scope.model = model;\r\n                        } else {\r\n                            $log.error('could not find or create model');\r\n                        }\r\n                    }\r\n                }, true);\r\n\r\n                // edit mode\r\n                $scope.editMode = false;\r\n\r\n                function getNewModalScope() {\r\n                    var scope = $scope.$new();\r\n                    return scope;\r\n                }\r\n\r\n                $scope.toggleEditMode = function (openConfigWindow) {\r\n                    $scope.editMode = !$scope.editMode;\r\n                    if ($scope.editMode) {\r\n                        if (!$scope.continuousEditMode) {\r\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n                            $rootScope.$broadcast('adfIsEditMode');\r\n                        }\r\n\r\n                        if (openConfigWindow) {\r\n                            $scope.editDashboardDialog();\r\n                        }\r\n                    }\r\n\r\n                    if (!$scope.editMode) {\r\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n                    }\r\n                };\r\n\r\n                var adfToggleEditMode = $scope.$on('adfToggleEditMode', function (event, isNewDashboard) {\r\n                    if (isNewDashboard) {\r\n                        $scope.toggleEditMode(true);\r\n                    } else {\r\n                        $scope.toggleEditMode();\r\n                    }\r\n                });\r\n\r\n                var adfCancelEditMode = $scope.$on('adfCancelEditMode', function (event) {\r\n                    if ($scope.editMode) {\r\n                        $scope.cancelEditMode();\r\n                    }\r\n                });\r\n\r\n                var adfWidgetRemoved = $scope.$on('adfWidgetRemovedFromGrid', function (event, widget) {\r\n                    var index = null;\r\n                    angular.forEach($scope.adfModel.grid, function (widgetTmp, idx) {\r\n                        if (widgetTmp.definition.wid === widget.wid) {\r\n                            index = idx;\r\n                        }\r\n                    });\r\n\r\n                    if (index >= 0) {\r\n                        $scope.adfModel.grid.splice(index, 1);\r\n                    }\r\n                });\r\n\r\n                $scope.cancelEditMode = function () {\r\n                    $scope.editMode = false;\r\n                    if (!$scope.continuousEditMode && ($scope.modelCopy !== $scope.adfModel)) {\r\n                        $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\r\n                    }\r\n                    $rootScope.$broadcast('adfDashboardEditsCancelled');\r\n                };\r\n\r\n                var adfEditDashboardDialog = $scope.$on('adfEditDashboardDialog', function (event) {\r\n                    if ($scope.editMode) {\r\n                        $scope.editDashboardDialog();\r\n                    }\r\n                });\r\n\r\n\r\n                var adfLaunchSearchingFromWidget = $scope.$on('adfLaunchSearchingFromWidget', function (event, widget) {\r\n                    var reloadWidgets = _getReloadWidgets(widget);\r\n                    $rootScope.$broadcast('adfFilterChanged', name, model, reloadWidgets);\r\n                });\r\n                var adfWindowTimeChangedFromWidget = $scope.$on('adfWindowTimeChangedFromWidget', function (event) {\r\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\r\n                });\r\n\r\n                // edit dashboard settings\r\n                $scope.editDashboardDialog = function () {\r\n                    var editDashboardScope = getNewModalScope();\r\n                    // create a copy of the title, to avoid changing the title to\r\n                    // \"dashboard\" if the field is empty\r\n                    editDashboardScope.copy = {\r\n                        title: (model.title !== 'ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD' ? model.title : ''),\r\n                        description: model.description,\r\n                        backgroundColor: model.backgroundColor ? model.backgroundColor : undefined,\r\n                        time: new Date(),\r\n                        backgroundImage: model.backgroundImage ? model.backgroundImage : undefined,\r\n                        file: model.backgroundImage ? model.backgroundImage : undefined,\r\n                    };\r\n\r\n                    editDashboardScope.backgroundSize = {\r\n                        name: 'backgroundSize',\r\n                        model: model.backgroundImageSize ? model.backgroundImageSize : '100% 100%',\r\n                        options: {\r\n                            '100% 100%': {\r\n                                title: $translate.instant('SIZE_CONF.AUTO')\r\n                            },\r\n                            'contain': {\r\n                                title: $translate.instant('SIZE_CONF.CONTAIN')\r\n                            },\r\n                            'cover': {\r\n                                title: $translate.instant('SIZE_CONF.COVER')\r\n                            }\r\n                        }\r\n                    };\r\n\r\n                    editDashboardScope.iconConfiguration = {\r\n                        name: 'iconConfiguration',\r\n                        model: model.iconType ? model.iconType : 'icon',\r\n                        url: undefined,\r\n                        file: undefined,\r\n                        iconType: model.iconType ? model.iconType : 'icon',\r\n                        icon: model.iconType === 'icon' ? model.icon : 'fa-tachometer',\r\n                        options: {\r\n                            'icon': {\r\n                                title: $translate.instant('ICON.LIBRARY'),\r\n                            },\r\n                            'image': {\r\n                                title: $translate.instant('ICON.IMAGE')\r\n                            }\r\n                        }\r\n                    };\r\n                    if (editDashboardScope.iconConfiguration.iconType === 'image') {\r\n                        editDashboardScope.iconConfiguration.file = model.icon;\r\n                        editDashboardScope.iconConfiguration.url = model.icon;\r\n                    }\r\n                    editDashboardScope.imageSelected = function (file) {\r\n                        if (file) {\r\n                            editDashboardScope.iconConfiguration.file = file;\r\n                            Upload.base64DataUrl(file).then(\r\n                                function (url) {\r\n                                    editDashboardScope.iconConfiguration.url = url;\r\n                                    editDashboardScope.iconConfiguration.file = url;\r\n                                    editDashboardScope.iconConfiguration.iconType = 'image'\r\n\r\n                                });\r\n                        } else {\r\n                            editDashboardScope.removeDataFile();\r\n                        }\r\n                    };\r\n                    editDashboardScope.backgroundImageSelected = function (file) {\r\n                        if (file) {\r\n                            editDashboardScope.iconConfiguration.file = file;\r\n                            Upload.base64DataUrl(file).then(\r\n                                function (url) {\r\n                                    editDashboardScope.copy.backgroundImage = url;\r\n                                    editDashboardScope.copy.file = url;\r\n\r\n                                });\r\n                        } else {\r\n                            editDashboardScope.removeBackgroundFile();\r\n                        }\r\n                    };\r\n                    editDashboardScope.removeDataFile = function () {\r\n                        editDashboardScope.iconConfiguration.file = null;\r\n                        editDashboardScope.iconConfiguration.url = null;\r\n                    };\r\n                    editDashboardScope.removeBackgroundFile = function () {\r\n                        editDashboardScope.copy.backgroundImage = null;\r\n                        editDashboardScope.copy.file = null;\r\n\r\n                    };\r\n                    // pass icon list\r\n                    editDashboardScope.availableIcons = $faIcons.list();\r\n\r\n                    var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\r\n                    if (model.editTemplateUrl) {\r\n                        adfEditTemplatePath = model.editTemplateUrl;\r\n                    }\r\n                    var instance = $uibModal.open({\r\n                        scope: editDashboardScope,\r\n                        templateUrl: adfEditTemplatePath,\r\n                        backdrop: 'static',\r\n                        keyboard: false,\r\n                        size: 'lg'\r\n                    });\r\n\r\n\r\n                    editDashboardScope.closeDialog = function () {\r\n                        // copy the new title back to the model\r\n                        model.title = editDashboardScope.copy.title;\r\n                        model.description = editDashboardScope.copy.description;\r\n                        if (editDashboardScope.iconConfiguration.model === 'image') {\r\n                            model.icon = editDashboardScope.iconConfiguration.url;\r\n\r\n                        } else if (editDashboardScope.iconConfiguration.model === 'icon') {\r\n                            model.icon = editDashboardScope.iconConfiguration.icon;\r\n\r\n                        }\r\n                        model.iconType = editDashboardScope.iconConfiguration.model;\r\n                        model.backgroundColor = editDashboardScope.copy.backgroundColor ? editDashboardScope.copy.backgroundColor : undefined;\r\n                        model.backgroundImage = editDashboardScope.copy.backgroundImage ? editDashboardScope.copy.backgroundImage : undefined;\r\n                        model.backgroundImageSize = editDashboardScope.backgroundSize.model;\r\n                        // close modal and destroy the scope\r\n                        instance.close();\r\n                        editDashboardScope.$destroy();\r\n                    };\r\n                };\r\n\r\n                var adfOpenWidgetFromOther = $scope.$on('adfOpenWidgetFromOther', function (event, widget, config) {\r\n\r\n                    var internal_config = createConfiguration(widget);\r\n                    var _config = angular.merge({}, internal_config, config || {});\r\n                    var w = {\r\n                        type: widget,\r\n                        config: _config,\r\n                        title: _config.title\r\n                    };\r\n                    addNewWidgetToModel(model, w, name, !$scope.editMode);\r\n                });\r\n\r\n                var adfOpenModalWidgetFromOther = $scope.$on('adfOpenModalWidgetFromOther', function (event, widgetType, config) {\r\n                    var templateUrl = adfTemplatePath + 'widget-fullscreen.html';\r\n                    var _config = config || {};\r\n                    if (_config.sendSelection) {\r\n                        templateUrl = adfTemplatePath + 'widget-fullscreen-selection.html';\r\n                    }\r\n                    var widget = createWidget(widgetType);\r\n                    widget.config = angular.merge({}, widget.config, _config);\r\n                    widget.type = widgetType;\r\n                    if (widget.config.title) {\r\n                        widget.title = widget.config.title;\r\n                    }\r\n                    var fullScreenScope = $scope.$new();\r\n                    fullScreenScope.definition = fullScreenScope.widget = widget;\r\n                    var opts = {\r\n                        scope: fullScreenScope,\r\n                        templateUrl: templateUrl,\r\n                        size: fullScreenScope.definition.modalSize || 'el',\r\n                        backdrop: 'static',\r\n                        windowClass: (fullScreenScope.definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\r\n                    };\r\n\r\n                    if ($scope.model && !$scope.model.temporal) {\r\n                        fullScreenScope.persistDashboard = function () {\r\n                            $rootScope.$broadcast('adfOpenWidgetFromOther', this.$parent.widget.type, this.$parent.widget.config || {});\r\n                            this.closeDialog();\r\n                        };\r\n                    }\r\n\r\n                    var instance = $uibModal.open(opts);\r\n                    fullScreenScope.closeDialog = function () {\r\n                        instance.close();\r\n                        fullScreenScope.$destroy();\r\n                    };\r\n\r\n\r\n                });\r\n\r\n                var adfAddWidgetDialog = $scope.$on('adfAddWidgetDialog', function (event) {\r\n                    if (!model.temporal && model.editable) {\r\n                        if (!$scope.editMode) {\r\n                            $scope.editMode = true;\r\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n                            $rootScope.$broadcast('adfIsEditMode');\r\n                        }\r\n\r\n                        $scope.addWidgetDialog();\r\n                    }\r\n                });\r\n\r\n                // add widget dialog\r\n                $scope.addScopeCfg = {\r\n                    widgetFilter: {},\r\n                    widgetSortingDirection: '',\r\n                    widgetSorting: 'priority'\r\n                };\r\n\r\n                $scope.addWidgetDialog = function () {\r\n                    var addScope = getNewModalScope();\r\n                    var widgets;\r\n                    if (angular.isFunction(widgetFilter)) {\r\n                        widgets = {};\r\n                        angular.forEach(dashboard.widgets, function (widget, type) {\r\n                            if (widgetFilter(widget, type, model)) {\r\n                                widgets[type] = widget;\r\n                            }\r\n                        });\r\n                    } else {\r\n                        widgets = dashboard.widgets;\r\n                    }\r\n                    addScope.widgets = widgets;\r\n\r\n                    angular.forEach(addScope.widgets, function (widget, type) {\r\n                        widget.key = type;\r\n                        if (!widget.category) {\r\n                            widget.category = 'Miscellaneous';\r\n                        }\r\n                    });\r\n\r\n                    // pass createCategories function to scope, if categories option is enabled\r\n                    if ($scope.options.categories) {\r\n                        addScope.createCategories = createCategories;\r\n                    } else {\r\n                        addScope.availableCategories = createCategoriesList(widgets);\r\n                    }\r\n\r\n                    var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\r\n                    if (model.addTemplateUrl) {\r\n                        adfAddTemplatePath = model.addTemplateUrl;\r\n                    }\r\n\r\n                    var opts = {\r\n                        scope: addScope,\r\n                        templateUrl: adfAddTemplatePath,\r\n                        backdrop: 'static',\r\n                        size: 'lg'\r\n                    };\r\n\r\n                    var instance = $uibModal.open(opts);\r\n\r\n                    addScope.widgetFilterCfg = $scope.addScopeCfg;\r\n\r\n                    addScope.addWidget = function (widget) {\r\n                        var w = {\r\n                            type: widget,\r\n                            Ftype: dashboard.widgets[widget].Ftype || null,\r\n                            config: createConfiguration(widget)\r\n                        };\r\n                        addNewWidgetToModel(model, w, name);\r\n                        // close and destroy\r\n                        instance.close();\r\n                        addScope.$destroy();\r\n\r\n                        // check for open edit mode immediately\r\n                        if (isEditModeImmediate(widget)) {\r\n                            openEditMode($scope, w);\r\n                        }\r\n                    };\r\n\r\n                    addScope.changeThumbnail = function (widget) {\r\n                        if (widget.images) {\r\n                            if (angular.isUndefined(widget._currThumb)) {\r\n                                widget._currThumb = 1;\r\n                            } else {\r\n                                widget._currThumb += 1;\r\n                            }\r\n\r\n\r\n                            if (widget._currThumb >= widget.images.length) {\r\n                                widget._currThumb = 0;\r\n                            }\r\n\r\n                            widget._currImg = widget.images[widget._currThumb];\r\n                        }\r\n                    };\r\n\r\n                    addScope.closeDialog = function () {\r\n                        // close and destroy\r\n                        instance.close();\r\n                        addScope.$destroy();\r\n                    };\r\n                };\r\n\r\n                $scope.addNewWidgetToModel = addNewWidgetToModel;\r\n\r\n                $scope.$on('destroy', function () {\r\n                    adfLaunchSearchingFromWidget();\r\n                    adfWindowTimeChangedFromWidget();\r\n                    adfToggleEditMode();\r\n                    adfOpenWidgetFromOther();\r\n                    adfOpenModalWidgetFromOther();\r\n                    adfCancelEditMode();\r\n                    adfAddWidgetDialog();\r\n                    adfEditDashboardDialog();\r\n                    adfWidgetRemoved();\r\n                });\r\n            }],\r\n            link: function ($scope, $element, $attr) {\r\n                // pass options to scope\r\n                var options = {\r\n                    name: $attr.name,\r\n                    editable: true,\r\n                    enableConfirmDelete: stringToBoolean($attr.enableConfirmDelete),\r\n                    maximizable: stringToBoolean($attr.maximizable),\r\n                    collapsible: stringToBoolean($attr.collapsible),\r\n                    categories: stringToBoolean($attr.categories),\r\n                    extraData: {}\r\n                };\r\n\r\n                if (angular.isDefined($attr.editable)) {\r\n                    options.editable = stringToBoolean($attr.editable);\r\n                }\r\n\r\n                if (angular.isDefined($scope.extraData)) {\r\n                    options.extraData = $scope.extraData;\r\n                }\r\n\r\n                options.extraData.editing = $scope.editMode;\r\n\r\n                $scope.options = options;\r\n            },\r\n            templateUrl: adfTemplatePath + 'dashboard.html'\r\n        };\r\n    }]);\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the 'Software'), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n    .directive('adfDashboardGrid', [\"adfTemplatePath\", function(adfTemplatePath) {\r\n        \r\n\r\n        function preLink($scope) {\r\n            $scope.gridOptions = {\r\n                cellHeight: 146,\r\n                verticalMargin: 10,\r\n                animate: true,\r\n                float: false,\r\n                alwaysShowResizeHandle: true,\r\n                minWidth: 768,\r\n                auto: true,\r\n                resizable: {\r\n                    handles: 'e, se, s, sw, w'\r\n                },\r\n                disableDrag: !$scope.editMode,\r\n                disableResize: !$scope.editMode\r\n            };\r\n\r\n            $scope.gsHandler = null;\r\n        }\r\n\r\n        return {\r\n            restrict: 'E',\r\n            scope: {\r\n                adfModel: '=',\r\n                editMode: '=',\r\n                continuousEditMode: '=',\r\n                options: '='\r\n            },\r\n            templateUrl: adfTemplatePath + 'dashboard-grid.html',\r\n            compile: function() {\r\n                return {\r\n                    pre: preLink,\r\n                };\r\n            },\r\n            controller: [\"$scope\", \"$timeout\", function($scope, $timeout) {\r\n                var dashEvents = [];\r\n                dashEvents.push($scope.$on('adfIsEditMode', function() {\r\n                    $timeout(function() {\r\n                        $scope.gsHandler.enable();\r\n                    }, 100);\r\n                }));\r\n\r\n                dashEvents.push($scope.$on('adfDashboardChanged', function() {\r\n                    $timeout(function() {\r\n                        $scope.gsHandler.disable();\r\n                    }, 100);\r\n                }));\r\n\r\n                dashEvents.push($scope.$on('adfDashboardEditsCancelled', function() {\r\n                    $timeout(function() {\r\n                        $scope.gsHandler.disable();\r\n                    }, 100);\r\n                }));\r\n\r\n                dashEvents.push($scope.$on('adfCancelEditMode', function() {\r\n                    $timeout(function() {\r\n                        $scope.gsHandler.disable();\r\n                    }, 100);\r\n                }));\r\n\r\n                dashEvents.push($scope.$on('adfWidgetAdded', function(event) {\r\n                    $timeout(function() {\r\n                        $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\r\n                        $scope.gsHandler.enable();\r\n                    }, 100);\r\n                }));\r\n\r\n                $scope.onChange = function(event, items) {\r\n                    //console.log('onChange event: ' + event + ' items:' + items);\r\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\r\n                };\r\n\r\n                $scope.onDragStart = function(event, ui) {\r\n                    console.log('onDragStart event: ' + event + ' ui:' + ui);\r\n                };\r\n\r\n                $scope.onDragStop = function(event, ui) {\r\n                    console.log('onDragStop event: ' + event + ' ui:' + ui);\r\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\r\n                };\r\n\r\n                $scope.onResizeStart = function(event, ui) {\r\n                    console.log('onResizeStart event: ' + event + ' ui:' + ui);\r\n                };\r\n\r\n                $scope.onResizeStop = function(event, ui) {\r\n                    console.log('onResizeStop event: ' + event + ' ui:' + ui);\r\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\r\n                    $scope.$broadcast('OnResizeWidget');\r\n                };\r\n\r\n                $scope.onItemAdded = function(item) {\r\n                    console.log('onItemAdded item: ' + item);\r\n                };\r\n\r\n                $scope.onItemRemoved = function(item) {\r\n                    console.log('onItemRemoved item: ' + item);\r\n                };\r\n\r\n                $scope.$on('destroy', function() {\r\n                    dashEvents.forEach(function(dashEvt) {\r\n                        dashEvt();\r\n                    });\r\n                });\r\n            }]\r\n        };\r\n    }]);\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .filter('adfOrderByObjectKey', [\"$filter\", function($filter) {\r\n    \r\n\r\n    return function(item, key){\r\n      var array = [];\r\n      angular.forEach(item, function(value, objectKey){\r\n        value[key] = objectKey;\r\n        array.push(value);\r\n      });\r\n      return $filter('orderBy')(array, key);\r\n    };\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\n/**\r\n * @ngdoc object\r\n * @name adf.dashboardProvider\r\n * @description\r\n *\r\n * The dashboardProvider can be used to register widgets.\r\n */\r\nangular.module('adf.provider', [])\r\n    .provider('dashboard', function () {\r\n\r\n        var widgets = {};\r\n        var widgetsPath = '';\r\n        var messageTemplate = '<div class=\"alert alert-primary\">{}</div>';\r\n        var loadingTemplate = '\\\r\n      <div class=\"progress progress-striped active\">\\n\\\r\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\r\n          <span class=\"sr-only\" translate>FORM.MSG.LOADING ...</span>\\n\\\r\n        </div>\\n\\\r\n      </div>';\r\n        var customWidgetTemplatePath = null;\r\n\r\n        // default apply function of widget.edit.apply\r\n        var defaultApplyFunction = function () {\r\n            return true;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#widget\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Registers a new widget.\r\n         *\r\n         * @param {string} name of the widget\r\n         * @param {object} widget to be registered.\r\n         *\r\n         *   Object properties:\r\n         *\r\n         *   - `title` - `{string=}` - The title of the widget.\r\n         *   - `description` - `{string=}` - Description of the widget.\r\n         *   - `category` - `{string=}` - Category of the widget.\r\n         *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\r\n         *   - `config` - `{object}` - Predefined widget configuration.\r\n         *   - `controller` - `{string=|function()=}` - Controller fn that should be\r\n         *      associated with newly created scope of the widget or the name of a\r\n         *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\r\n         *      if passed as a string.\r\n         *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\r\n         *      published to scope under the `controllerAs` name.\r\n         *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\r\n         *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\r\n         *   - `template` - `{string=|function()=}` - html template as a string.\r\n         *   - `templateUrl` - `{string=}` - path to an html template.\r\n         *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\r\n         *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n         *      be injected into the controller. If any of these dependencies are promises, the widget\r\n         *      will wait for them all to be resolved or one to be rejected before the controller is\r\n         *      instantiated.\r\n         *      If all the promises are resolved successfully, the values of the resolved promises are\r\n         *      injected.\r\n         *\r\n         *      The map object is:\r\n         *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\r\n         *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n         *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\r\n         *        and the return value is treated as the dependency. If the result is a promise, it is\r\n         *        resolved before its value is injected into the controller.\r\n         *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n         *      on the scope of the widget.\r\n         *   - `edit` - `{object}` - Edit modus of the widget.\r\n         *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n         *        on the scope of the widget.\r\n         *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\r\n         *        Default is true.\r\n         *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\r\n         *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\r\n         *        The function have to return a boolean or an promise which can be resolved to a boolean.\r\n         *        The function can use injection.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.widget = function (name, widget) {\r\n            var w = angular.extend({\r\n                reload: false,\r\n                frameless: false\r\n            }, widget);\r\n            if (w.edit) {\r\n                var edit = {\r\n                    reload: true,\r\n                    immediate: false,\r\n                    apply: defaultApplyFunction\r\n                };\r\n                angular.extend(edit, w.edit);\r\n                w.edit = edit;\r\n            }\r\n            //OUW-1610\r\n            if (!w.config) {\r\n                w.config = {};\r\n            }\r\n            widgets[name] = w;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#widgetsPath\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Sets the path to the directory which contains the widgets. The widgets\r\n         * path is used for widgets with a templateUrl which contains the\r\n         * placeholder {widgetsPath}. The placeholder is replaced with the\r\n         * configured value, before the template is loaded, but the template is\r\n         * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\r\n         * The default value of widgetPaths is ''.\r\n         *\r\n         *\r\n         * @param {string} path to the directory which contains the widgets\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.widgetsPath = function (path) {\r\n            widgetsPath = path;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#messageTemplate\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the template for messages.\r\n         *\r\n         * @param {string} template for messages.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.messageTemplate = function (template) {\r\n            messageTemplate = template;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#loadingTemplate\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the template which is displayed as\r\n         * long as the widget resources are not resolved.\r\n         *\r\n         * @param {string} template loading template\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.loadingTemplate = function (template) {\r\n            loadingTemplate = template;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#customWidgetTemplatePath\r\n         * @propertyOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the container template for the widgets\r\n         *\r\n         * @param {string} path to the custom widget template\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.customWidgetTemplatePath = function (templatePath) {\r\n            customWidgetTemplatePath = templatePath;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc service\r\n         * @name adf.dashboard\r\n         * @description\r\n         *\r\n         * The dashboard holds all options and  widgets.\r\n         *\r\n         * @property {Array.<Object>} widgets Array of registered widgets.\r\n         * @property {string} widgetsPath Default path for widgets.\r\n         * @property {string} messageTemplate Template for messages.\r\n         * @property {string} loadingTemplate Template for widget loading.\r\n         * * @property {string} customWidgetTemplatePath Changes the container template for the widgets\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.$get = function () {\r\n            var cid = 0;\r\n\r\n            return {\r\n                widgets: widgets,\r\n                widgetsPath: widgetsPath,\r\n                messageTemplate: messageTemplate,\r\n                loadingTemplate: loadingTemplate,\r\n                customWidgetTemplatePath: customWidgetTemplatePath,\r\n\r\n                /**\r\n                 * @ngdoc method\r\n                 * @name adf.dashboard#id\r\n                 * @methodOf adf.dashboard\r\n                 * @description\r\n                 *\r\n                 * Creates an ongoing numeric id. The method is used to create ids for\r\n                 * columns and widgets in the dashboard.\r\n                 */\r\n                id: function () {\r\n                    return new Date().getTime() + '-' + (++cid);\r\n                },\r\n\r\n                /**\r\n                 * @ngdoc method\r\n                 * @name adf.dashboard#idEqual\r\n                 * @methodOf adf.dashboard\r\n                 * @description\r\n                 *\r\n                 * Checks if the given ids are equal.\r\n                 *\r\n                 * @param {string} id widget or column id\r\n                 * @param {string} other widget or column id\r\n                 */\r\n                idEquals: function (id, other) {\r\n                    // use toString, because old ids are numbers\r\n                    return ((id) && (other)) && (id.toString() === other.toString());\r\n                }\r\n            };\r\n        };\r\n\r\n    });\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf')\r\n    .directive('adfWidgetContent', [\"$log\", \"$q\", \"widgetService\", \"$compile\", \"$controller\", \"$injector\", \"dashboard\", \"$translate\", function ($log, $q, widgetService,\r\n        $compile, $controller, $injector, dashboard, $translate) {\r\n\r\n        function renderError($element, msg) {\r\n            $log.warn(msg);\r\n            $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\r\n        }\r\n\r\n        function compileWidget($scope, $element, currentScope, configChanged) {\r\n            var model = $scope.model;\r\n            if (!model) {\r\n                $translate('ADF.ERROR.MODEL_IS_UNDEFINED').then(function (translateMessage) {\r\n                    renderError($element, translateMessage);\r\n                });\r\n                return currentScope;\r\n            }\r\n\r\n            var content = $scope.content;\r\n\r\n            if (!content) {\r\n                $translate('ADF.ERROR.WIDGET_FOR_DEPRECTATED', {\r\n                    title: model.title\r\n                }).then(function (translateMessage) {\r\n                    renderError($element, translateMessage);\r\n                });\r\n                return currentScope;\r\n            }\r\n\r\n            var extra = $scope.extra;\r\n            var newScope = currentScope;\r\n\r\n            if (newScope) {\r\n                var is_menu = newScope.menu !== undefined && newScope.menu !== null && (!newScope.isPaginationEnable || !newScope.isPaginationEnable());\r\n                if (is_menu || configChanged || !angular.isFunction(newScope.reloadData)) {\r\n                    if ($scope.navOptionsHandler) {\r\n                        $scope.navOptionsHandler.firstLoad = true;\r\n                    }\r\n                    newScope = renderWidget($scope, $element, currentScope, model, content, extra);\r\n                } else {\r\n                    var is_itemsPerPage = newScope.itemsPerPage !== undefined && newScope.itemsPerPage !== null;\r\n                    if (is_itemsPerPage || newScope.page) {\r\n                        newScope.page = 1;\r\n                    }\r\n                    newScope.reloadData();\r\n                }\r\n            } else {\r\n                if ($scope.navOptionsHandler) {\r\n                    $scope.navOptionsHandler.firstLoad = true;\r\n                }\r\n\r\n                newScope = renderWidget($scope, $element, currentScope, model, content, extra);\r\n            }\r\n\r\n            function _getWindowTime(type) {\r\n                if (type === 'custom') {\r\n                    return {\r\n                        from: newScope.config.windowFilter.from,\r\n                        to: newScope.config.windowFilter.to\r\n                    };\r\n                }\r\n                var from = window.moment().subtract(1, type);\r\n                return {\r\n                    from: from._d\r\n                };\r\n            }\r\n\r\n\r\n\r\n            newScope.config.getWindowTime = function () {\r\n                var windowFilter = newScope.config.windowFilter;\r\n                if (windowFilter && windowFilter.type) {\r\n                    var winTime = _getWindowTime(windowFilter.type);\r\n                    /* jshint ignore:start */\r\n                    if (!window.eval(newScope.config.windowFilter.rawdate)) {\r\n                        for (var key in winTime) {\r\n                            winTime[key] = window.moment(winTime[key]).format();\r\n                        }\r\n                        winTime['rawdate'] = true;\r\n                    }\r\n                    /* jshint ignore:end */\r\n                    return winTime;\r\n                }\r\n            };\r\n\r\n            if (extra) {\r\n                newScope.editing = extra.editing ? true : false;\r\n                newScope.extraData = extra;\r\n            }\r\n\r\n            return newScope;\r\n        }\r\n\r\n        function renderWidget($scope, $element, currentScope, model, content, extra) {\r\n            // display loading template\r\n            $element.html(dashboard.loadingTemplate);\r\n\r\n            // create new scope\r\n            var templateScope = $scope.$new();\r\n\r\n            // pass config object to scope\r\n            if (!model.config) {\r\n                model.config = {};\r\n            }\r\n\r\n            templateScope.config = model.config;\r\n            templateScope.editing = extra && extra.editing;\r\n\r\n            if (extra) {\r\n                templateScope.extra = extra;\r\n            }\r\n\r\n            var _from = currentScope || templateScope.config;\r\n            templateScope.selectionManager = (_from) ? _from.selectionManager : undefined;\r\n\r\n            // local injections\r\n            var base = {\r\n                $scope: templateScope,\r\n                widget: model,\r\n                config: model.config\r\n            };\r\n\r\n            // get resolve promises from content object\r\n            var resolvers = {};\r\n            resolvers.$tpl = widgetService.getTemplate(content);\r\n            if (content.resolve) {\r\n                angular.forEach(content.resolve, function (promise, key) {\r\n                    if (angular.isString(promise)) {\r\n                        resolvers[key] = $injector.get(promise);\r\n                    } else {\r\n                        resolvers[key] = $injector.invoke(promise, promise, base);\r\n                    }\r\n                });\r\n            }\r\n\r\n            // resolve all resolvers\r\n            $q.all(resolvers).then(function (locals) {\r\n                angular.extend(locals, base);\r\n\r\n                // pass resolve map to template scope as defined in resolveAs\r\n                if (content.resolveAs) {\r\n                    templateScope[content.resolveAs] = locals;\r\n                }\r\n\r\n                // compile & render template\r\n                var template = locals.$tpl;\r\n                $element.html(template);\r\n                if (content.controller) {\r\n                    var templateCtrl = $controller(content.controller, locals);\r\n                    if (content.controllerAs) {\r\n                        templateScope[content.controllerAs] = templateCtrl;\r\n                    }\r\n                    $element.children().data('$ngControllerController', templateCtrl);\r\n                }\r\n                $compile($element.contents())(templateScope);\r\n            }, function (reason) {\r\n                // handle promise rejection\r\n                var msg = 'ADF.ERROR.COULD_NOT_RESOLVE_ALL_PROMISSES';\r\n                $translate(msg, {\r\n                    reason: (reason ? ': ' + reason : reason)\r\n                }).then(function (translateMessage) {\r\n                    renderError($element, translateMessage);\r\n                });\r\n            });\r\n\r\n            // destroy old scope\r\n            if (currentScope) {\r\n                currentScope.$destroy();\r\n            }\r\n\r\n            return templateScope;\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            require: '?^^adfWidgetGrid',\r\n            scope: {\r\n                model: '=',\r\n                content: '=',\r\n                extra: '=',\r\n                navOptionsHandler: '=?',\r\n                filterHandler: '=?',\r\n                widgetActionsHandler: '=?'\r\n            },\r\n            link: function ($scope, $element, attrs, adfWidgetGridCtrl) {\r\n                var currentScope = compileWidget($scope, $element, null);\r\n                if (adfWidgetGridCtrl) {\r\n                    $scope.search = $scope.search || {};\r\n                    adfWidgetGridCtrl.updateWidgetFilters($scope.model.config.filter && $scope.model.config.filter.id);\r\n                }\r\n\r\n                var widgetConfigChangedEvt = $scope.$on('widgetConfigChanged', function (event, changeWidgets) {\r\n                    if (changeWidgets) {\r\n                        if (changeWidgets.indexOf($scope.model.wid) !== -1 && adfWidgetGridCtrl) {\r\n                            adfWidgetGridCtrl.updateWidgetFilters($scope.model.config.filter && $scope.model.config.filter.id, true);\r\n                        }\r\n                    } else {\r\n                        currentScope = compileWidget($scope, $element, currentScope, true);\r\n                    }\r\n                });\r\n\r\n                var widgetReloadEvt = $scope.$on('widgetReload', function (event, reloadWidgets) {\r\n                    var reloadWidget = true;\r\n                    if (reloadWidgets && reloadWidgets.length > 0) {\r\n                        reloadWidget = reloadWidgets.indexOf($scope.model.wid) !== -1;\r\n                    }\r\n                    if (reloadWidget) {\r\n                        currentScope = compileWidget($scope, $element, currentScope, false);\r\n                        if (adfWidgetGridCtrl && adfWidgetGridCtrl.updateWidgetFilters) {\r\n                            adfWidgetGridCtrl.updateWidgetFilters($scope.model.config.filter && $scope.model.config.filter.id);\r\n                        }\r\n                    }\r\n                });\r\n\r\n                $scope.$on('destroy', function () {\r\n                    widgetConfigChangedEvt();\r\n                    widgetReloadEvt();\r\n                });\r\n            }\r\n        };\r\n    }]);\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf')\r\n    .directive('adfWidgetGrid', [\"$injector\", \"$q\", \"$log\", \"$uibModal\", \"$rootScope\", \"$interval\", \"dashboard\", \"adfTemplatePath\", \"Filter\", \"toastr\", \"$translate\", function ($injector, $q, $log, $uibModal, $rootScope, $interval, dashboard, adfTemplatePath, Filter, toastr, $translate) {\r\n        function preLink($scope) {\r\n            var definition = $scope.definition;\r\n\r\n            if (definition) {\r\n                var w = dashboard.widgets[definition.type];\r\n                if (w) {\r\n                    // pass title\r\n                    if (!definition.title) {\r\n                        definition.title = w.title;\r\n                    }\r\n\r\n                    definition.titleTemplateUrl = adfTemplatePath + 'widget-grid-title.html';\r\n\r\n                    if (!definition.editTemplateUrl) {\r\n                        definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\r\n                        if (w.editTemplateUrl) {\r\n                            definition.editTemplateUrl = w.editTemplateUrl;\r\n                        }\r\n                    }\r\n\r\n                    if (!definition.titleTemplateUrl) {\r\n                        definition.frameless = w.frameless;\r\n                    }\r\n\r\n                    if (!definition.styleClass) {\r\n                        definition.styleClass = w.styleClass;\r\n                    }\r\n\r\n                    // set id for sortable\r\n                    if (!definition.wid) {\r\n                        definition.wid = dashboard.id();\r\n                    }\r\n\r\n                    // pass copy of widget to scope\r\n                    $scope.widget = angular.copy(w);\r\n\r\n                    // create config object\r\n                    var config = definition.config;\r\n                    if (config) {\r\n                        if (angular.isString(config)) {\r\n                            config = angular.fromJson(config);\r\n                        }\r\n                    } else {\r\n                        config = {};\r\n                    }\r\n                    // pass config to scope\r\n                    $scope.config = config;\r\n\r\n                    if (typeof $scope.widget.show_modal_footer === 'undefined') {\r\n                        $scope.widget.show_modal_footer = true;\r\n                    }\r\n\r\n                    if (typeof $scope.widget.show_reload_config === 'undefined') {\r\n                        $scope.widget.show_reload_config = true;\r\n                    }\r\n\r\n                    // collapse exposed $scope.widgetState property\r\n                    if (!$scope.widgetState) {\r\n                        $scope.widgetState = {};\r\n                        $scope.widgetState.isCollapsed = (w.collapsed === true) ? w.collapsed : false;\r\n                    }\r\n\r\n                } else {\r\n                    $log.warn('could not find widget ' + definition.type);\r\n                }\r\n            } else {\r\n                $log.debug('definition not specified, widget was probably removed');\r\n            }\r\n        }\r\n\r\n        function postLink($scope, $element) {\r\n            var definition = $scope.definition;\r\n            if (!definition) {\r\n                $log.debug('widget not found');\r\n                return;\r\n            }\r\n            var config = $scope.config || {};\r\n\r\n            // bind close function\r\n            var deleteWidget = function () {\r\n                $element.remove();\r\n                $rootScope.$broadcast('adfWidgetRemovedFromGrid', definition);\r\n            };\r\n\r\n            $scope.remove = function () {\r\n                if ($scope.options.enableConfirmDelete) {\r\n                    var deleteScope = $scope.$new();\r\n\r\n                    var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\r\n                    if (definition.deleteTemplateUrl) {\r\n                        deleteTemplateUrl = definition.deleteTemplateUrl;\r\n                    }\r\n                    var opts = {\r\n                        scope: deleteScope,\r\n                        templateUrl: deleteTemplateUrl,\r\n                        backdrop: 'static'\r\n                    };\r\n                    var instance = $uibModal.open(opts);\r\n\r\n                    deleteScope.closeDialog = function () {\r\n                        instance.close();\r\n                        deleteScope.$destroy();\r\n                    };\r\n                    deleteScope.deleteDialog = function () {\r\n                        deleteWidget();\r\n                        deleteScope.closeDialog();\r\n                    };\r\n                } else {\r\n                    deleteWidget();\r\n                }\r\n            };\r\n\r\n\r\n            $scope.print = function () {\r\n                if (!$scope.editMode) {\r\n                    $scope.$broadcast('widgetPrint');\r\n                }\r\n            };\r\n\r\n            $scope.isExecuteOperationEnabled = function () {\r\n\r\n                if (config.entityKey)\r\n                    return true;\r\n                var filter = config.filter;\r\n\r\n                if (filter) {\r\n                    if (filter.headersFilter && filter.headersFilter.length > 0) {\r\n                        return true;\r\n                    } else {\r\n                        if (filter.type === \"basic\") {\r\n                            return filter.value.length > 0;\r\n                        }\r\n                        if (filter.type === \"advanced\") {\r\n                            return filter.value.length > 2 && filter.oql;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return false;\r\n            };\r\n\r\n            $scope.executeOperation = function () {\r\n                if (!$scope.editMode) {\r\n\r\n                    $scope.$parent.$broadcast('widgetExecuteOperation');\r\n                }\r\n            };\r\n\r\n            $scope.filter = {\r\n                typeFilter: 1,\r\n                showFilter: false,\r\n                showFinalFilter: false\r\n            };\r\n\r\n            $scope.launchSearching = function () {\r\n                var widget = {\r\n                    definition: definition,\r\n                    element: $element\r\n                };\r\n\r\n                $rootScope.$broadcast('adfLaunchSearchingFromWidget', widget, $scope.config.filter);\r\n                $scope.reload();\r\n            };\r\n\r\n\r\n            $scope.launchSearchingAdv = function () {\r\n                if (!$scope.filterApplied) {\r\n                    var executeSearch = true;\r\n                    $scope.search.quick = '';\r\n                    if ($scope.search.json === '' || $scope.search.json === '{}' || (!angular.isString($scope.search.json) && Object.keys($scope.search.json).length === 0)) {\r\n                        if ($scope.search.oql && $scope.search.oql.trim().length > 0) {\r\n                            toastr.error($translate.instant(\"TOASTR.FILTER_IS_MALFORMED\"));\r\n                            executeSearch = false;\r\n                        } else {\r\n                            $scope.config.filter = {\r\n                                type: 'advanced',\r\n                                oql: '',\r\n                                value: ''\r\n                            };\r\n                        }\r\n                    } else {\r\n                        $scope.config.filter = {\r\n                            type: 'advanced',\r\n                            oql: $scope.search.oql,\r\n                            value: $scope.search.json,\r\n                            headersFilter: $scope.config.filter.headersFilter\r\n                        };\r\n                    }\r\n\r\n                    if (executeSearch) {\r\n                        $scope.launchSearching();\r\n                        $scope.filterApplied = true;\r\n                    }\r\n                }\r\n            };\r\n\r\n            $scope.launchSearchingQuick = function () {\r\n                if (!$scope.filterApplied) {\r\n                    $scope.search.oql = $scope.search.json = '';\r\n                    $scope.config.filter = {\r\n                        type: 'basic',\r\n                        value: $scope.search.quick,\r\n                        headersFilter: $scope.config.filter.headersFilter\r\n                    };\r\n                    $scope.launchSearching();\r\n                    $scope.filterApplied = true;\r\n                }\r\n            };\r\n\r\n            $scope.launchSearchingShared = function () {\r\n                // if (!$scope.filterApplied) {\r\n                var shared = $scope.search.id;\r\n                if (shared) {\r\n                    shared.filter.id = shared.wid;\r\n                    $scope.config.filter = shared.filter;\r\n                } else {\r\n                    $scope.config.filter = {};\r\n                }\r\n                $scope.launchSearching();\r\n                $scope.filterApplied = true;\r\n                // }\r\n            };\r\n\r\n            $scope.filterSharedSelect = function ($item, $model) {\r\n                $scope.filterApplied = false;\r\n                $scope.launchSearchingShared();\r\n            };\r\n            $scope.filterSharedRemove = function ($item, $model) {\r\n                $scope.filterApplied = false;\r\n            };\r\n\r\n            var windowTimeChanged = $scope.$on('onWindowTimeChanged', function (event, timeObj) {\r\n                $scope.config.windowFilter = timeObj ? timeObj : (config.windowFilter ? {} : timeObj);\r\n                var widget = {\r\n                    definition: definition,\r\n                    element: $element\r\n                };\r\n                $rootScope.$broadcast('adfWindowTimeChangedFromWidget', widget, $scope.config.windowFilter);\r\n                $scope.reload();\r\n            });\r\n\r\n            $scope.enter = function (event) {\r\n                var keycode = (event.keyCode ? event.keyCode : event.which);\r\n                if (keycode === 13) {\r\n                    if ($scope.filter.typeFilter === 0)\r\n                        $scope.launchSearchingAdv();\r\n                    if ($scope.filter.typeFilter === 1)\r\n                        $scope.launchSearchingQuick();\r\n                    if ($scope.filter.typeFilter === 2)\r\n                        $scope.launchSearchingShared();\r\n                } else if (keycode === 19) {\r\n                    $scope.filter.showFinalFilter = !$scope.filter.showFinalFilter;\r\n                } else {\r\n                    $scope.filterApplied = false;\r\n                }\r\n            };\r\n\r\n\r\n            $scope.customSelectors = [];\r\n            $scope.getCustomSelectors = function () {\r\n                if ($scope.config.customSelectors) {\r\n                    $scope.customSelectors = $scope.config.customSelectors;\r\n                } else {\r\n                    config.widgetSelectors().findFields('').then(function (fields) {\r\n                        $scope.customSelectors = fields;\r\n                        $scope.$apply();\r\n                    }).catch(function (err) {\r\n                        $log.error(err);\r\n                    });\r\n                }\r\n            };\r\n\r\n            $scope.changeDirection = function () {\r\n                var direction = config.sort.direction;\r\n                if (direction === 'DESCENDING') {\r\n                    $scope.config.sort.direction = 'ASCENDING';\r\n                } else if (direction === 'ASCENDING') {\r\n                    $scope.config.sort.direction = 'DESCENDING';\r\n                }\r\n                $scope.reload();\r\n            };\r\n\r\n            $scope.debugQuery = function () {\r\n                Filter.parseQuery($scope.search.oql || '')\r\n                    .then(function (data) {\r\n                        $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\r\n                        $scope.unknownWords = '';\r\n                        $scope.filter_error = null;\r\n                    })\r\n                    .catch(function (err) {\r\n                        $scope.filter_error = err;\r\n                        // Tratar el error\r\n                    });\r\n\r\n            };\r\n\r\n            $scope.autocomplete_options = function () {\r\n                var autocomplete_options = {\r\n                    suggest: Filter.suggest_field_delimited,\r\n                    customSelectors: config.widgetSelectors()\r\n                };\r\n\r\n                return autocomplete_options;\r\n\r\n            };\r\n\r\n            // Multiple selection\r\n            $scope.selectedItems = definition.selectedItems || {};\r\n\r\n            // Gestor de seleccion\r\n            $scope.selectionManager = {\r\n                currentSelection: $scope.selectedItems,\r\n                isSelected: function (key, obj) {\r\n                    if ($scope.selectedItems[key] && !angular.isUndefined(obj)) {\r\n                        $scope.selectedItems[key].data = obj;\r\n                    }\r\n\r\n                    return $scope.selectedItems[key] ? true : false;\r\n                },\r\n                totalSelected: function () {\r\n                    return Object.keys($scope.selectedItems).length;\r\n                }\r\n            };\r\n\r\n            if (definition.config.sendSelection) {\r\n\r\n                $scope.sendEntities = function () {\r\n                    definition.config.sendSelection($scope.selectedItems);\r\n                    $scope.$parent.closeDialog();\r\n                };\r\n\r\n                if (definition.config.selectedItems) {\r\n                    $scope.selectedItems = angular.copy(definition.config.selectedItems);\r\n                }\r\n\r\n                $scope.config.selectionManager = $scope.selectionManager;\r\n            }\r\n\r\n            $scope.manageSelectedItems = function () {\r\n                var selectionScope = $scope.$new();\r\n\r\n                if (definition.config.sendSelection) {\r\n                    delete config.selectionConfig.operationTypes;\r\n                    delete config.selectionConfig.filterTypes;\r\n                }\r\n\r\n                selectionScope.selectionConfig = config.selectionConfig;\r\n\r\n                selectionScope.selectedItems = [];\r\n                angular.forEach($scope.selectedItems, function (value, key) {\r\n                    selectionScope.selectedItems.push({\r\n                        key: key,\r\n                        value: value\r\n                    });\r\n                });\r\n\r\n                selectionScope.currentSelection = {\r\n                    selected: selectionScope.selectedItems\r\n                };\r\n\r\n                var manageItemsSelectedTemplate = adfTemplatePath + 'widget-selection.html';\r\n                var opts = {\r\n                    scope: selectionScope,\r\n                    templateUrl: manageItemsSelectedTemplate,\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    animation: true\r\n                };\r\n\r\n                var instance = $uibModal.open(opts);\r\n\r\n                selectionScope.restoreSelection = function () {\r\n                    selectionScope.currentSelection = {\r\n                        selected: selectionScope.selectedItems\r\n                    };\r\n                };\r\n\r\n                selectionScope.clearSelection = function () {\r\n                    selectionScope.currentSelection.selected = [];\r\n                };\r\n\r\n                // Cierra sy guarda los datos de nueva selección\r\n                selectionScope.applyFilter = function (type) {\r\n                    var customOql = selectionScope.selectionConfig.filterAction(selectionScope.currentSelection.selected, type);\r\n\r\n                    if (!angular.isUndefined(customOql) && customOql !== null) {\r\n                        $scope.filter.typeFilter = 0;\r\n                        Filter.parseQuery(customOql).then(function (data) {\r\n                            $scope.search.oql = customOql;\r\n                            $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\r\n                            $scope.unknownWords = '';\r\n                            $scope.filter_error = null;\r\n\r\n                            $scope.launchSearchingAdv();\r\n                        }).catch(function (err) {\r\n                            $scope.filter_error = err;\r\n                        });\r\n                    }\r\n                };\r\n\r\n                selectionScope.executeOperation = function (operationType) {\r\n                    if (!$scope.editMode) {\r\n                        $scope.$parent.$broadcast('widgetExecuteOperation', {\r\n                            'selectedItems': selectionScope.currentSelection.selected,\r\n                            'type': operationType\r\n                        });\r\n                    }\r\n                };\r\n\r\n                // Cierra sy guarda los datos de nueva selección\r\n                selectionScope.saveChangesDialog = function () {\r\n                    var finalSelection = {};\r\n                    angular.forEach(selectionScope.currentSelection.selected, function (data, idx) {\r\n                        finalSelection[data.key] = {\r\n                            data: data.value.data,\r\n                            visible: data.value.visible\r\n                        };\r\n                    });\r\n\r\n                    $scope.selectedItems = angular.copy(finalSelection);\r\n                    $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n\r\n                    $scope.selectionManager.lastItem = {};\r\n                    $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n\r\n                    instance.close();\r\n                    selectionScope.$destroy();\r\n                };\r\n\r\n                // Cierra sin realizar ninguna acción\r\n                selectionScope.closeDialog = function () {\r\n                    instance.close();\r\n                    selectionScope.$destroy();\r\n                };\r\n            };\r\n\r\n\r\n            // bind edit function\r\n            $scope.edit = function () {\r\n                var editScope = $scope.$new();\r\n                editScope.definition = angular.copy(definition);\r\n\r\n                var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\r\n                if (definition.editTemplateUrl) {\r\n                    adfEditTemplatePath = definition.editTemplateUrl;\r\n                }\r\n\r\n                var opts = {\r\n                    scope: editScope,\r\n                    templateUrl: adfEditTemplatePath,\r\n                    backdrop: 'static',\r\n                    size: 'lg'\r\n                };\r\n\r\n                var instance = $uibModal.open(opts);\r\n\r\n                editScope.closeDialog = function () {\r\n                    instance.close();\r\n                    editScope.$destroy();\r\n                };\r\n\r\n                // TODO create util method\r\n                function createApplyPromise(result) {\r\n                    var promise;\r\n                    if (typeof result === 'boolean') {\r\n                        var deferred = $q.defer();\r\n                        if (result) {\r\n                            deferred.resolve();\r\n                        } else {\r\n                            deferred.reject();\r\n                        }\r\n                        promise = deferred.promise;\r\n                    } else {\r\n                        promise = $q.when(result);\r\n                    }\r\n                    return promise;\r\n                }\r\n\r\n                editScope.saveDialog = function () {\r\n                    // clear validation error\r\n                    editScope.validationError = null;\r\n\r\n                    // build injection locals\r\n                    var widget = $scope.widget;\r\n\r\n                    // create a default apply method for widgets\r\n                    // without edit mode\r\n                    // see issue https://goo.gl/KHPQLZ\r\n                    var applyFn;\r\n                    if (widget.edit) {\r\n                        applyFn = widget.edit.apply;\r\n                    } else {\r\n                        applyFn = function () {\r\n                            return true;\r\n                        };\r\n                    }\r\n\r\n                    var editScopeDefinition = editScope.definition.config || {};\r\n                    // injection locals\r\n                    var locals = {\r\n                        widget: widget,\r\n                        definition: editScope.definition,\r\n                        config: editScopeDefinition\r\n                    };\r\n\r\n                    // invoke apply function and apply if success\r\n                    var result = $injector.invoke(applyFn, applyFn, locals);\r\n                    createApplyPromise(result).then(function () {\r\n                        definition.title = editScope.definition.title;\r\n                        if (editScope.definition.type === 'summaryChart') {\r\n                            editScope.definition.Ftype = editScope.definition.config.type.toLowerCase();\r\n                            definition.Ftype = editScope.definition.config.type.toLowerCase();\r\n                        }\r\n                        angular.extend(definition.config, editScopeDefinition);\r\n\r\n                        editScope.closeDialog();\r\n\r\n                        if (widget.edit && widget.edit.reload) {\r\n                            $scope.setReloadTimeout();\r\n                            // reload content after edit dialog is closed\r\n                            $scope.$broadcast('widgetConfigChanged');\r\n                        }\r\n                    }, function (err) {\r\n                        if (err) {\r\n                            editScope.validationError = err;\r\n                        } else {\r\n                            editScope.validationError = 'VALIDATION_DURING_APPLY_FAILED';\r\n                        }\r\n                    });\r\n                };\r\n\r\n            };\r\n\r\n\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            templateUrl: adfTemplatePath + 'widget-grid.html',\r\n            scope: {\r\n                definition: '=',\r\n                editMode: '=',\r\n                options: '=',\r\n                widgetState: '='\r\n            },\r\n            controller: [\"$scope\", function ($scope) {\r\n                var _setFilterType = function (selectFilter) {\r\n                    var config = $scope.config || {};\r\n                    var filter = config.filter = config.filter ? config.filter : {};\r\n                    var id = filter.id = selectFilter && filter.id;\r\n                    filter.headersFilter = selectFilter && filter.headersFilter;\r\n                    switch (filter.type) {\r\n                        case 'advanced':\r\n                            $scope.filter.typeFilter = id ? 2 : 0;\r\n                            $scope.search = {\r\n                                oql: filter.oql,\r\n                                json: filter.value\r\n                            };\r\n                            break;\r\n                        case 'basic':\r\n                            $scope.filter.typeFilter = id ? 2 : 1;\r\n                            $scope.search = {\r\n                                quick: filter.value\r\n                            };\r\n\r\n                            break;\r\n                        default:\r\n                            $scope.filter.typeFilter = id ? 2 : 1;\r\n                            $scope.search = {\r\n                                quick: filter.value = ''\r\n                            };\r\n                            break;\r\n                    }\r\n                    $scope.search.id = selectFilter;\r\n                };\r\n\r\n                this.updateWidgetFilters = function (filterId, configChange) {\r\n                    if ($scope.options && $scope.options.extraData && $scope.options.extraData.widgetFilters) {\r\n                        var _widgetFilters = $scope.options.extraData.widgetFilters;\r\n                        var model = $scope.definition;\r\n                        var selectFilter;\r\n                        var sharedFilters = _widgetFilters.filter(function (widgetFilter) {\r\n                            // Recuperamos solos los filtros de widgets que cumplan las condiciones:\r\n                            // - No tenga un filtro heredado como filtro\r\n                            // - El tipo de filtro sea igual que el widget que pueda heredarlo (Ftype)\r\n                            // - No recuperamos el filtro propio del widget  \r\n                            var shared = (!widgetFilter.filter || !widgetFilter.filter.id) && (widgetFilter.Ftype === model.Ftype) && (widgetFilter.wid !== model.wid);\r\n                            if (shared && (filterId === widgetFilter.wid))\r\n                                selectFilter = widgetFilter;\r\n                            return shared;\r\n                        });\r\n\r\n                        $scope.sharedFilters = angular.copy(sharedFilters);\r\n                        if (!configChange || !selectFilter && !!filterId)\r\n                            _setFilterType(selectFilter);\r\n                    }\r\n\r\n                };\r\n\r\n                var definition = $scope.definition;\r\n\r\n\r\n                if (definition.config.selectedItems) {\r\n                    $scope.selectedItemsLength = Object.keys(definition.config.selectedItems).length;\r\n                }\r\n\r\n\r\n                // Controlador de la barra inferior de los widgets\r\n                $scope.navOptionsHandler = {\r\n                    firstLoad: true,\r\n                    loadingData: false,\r\n                    startLoading: function () {\r\n                        $scope.navOptionsHandler.loadingData = true;\r\n                    },\r\n                    stopLoading: function () {\r\n                        $scope.navOptionsHandler.firstLoad = false;\r\n                        $scope.navOptionsHandler.loadingData = false;\r\n                        $scope.navOptionsHandler.lastMessageTime = new Date();\r\n                    },\r\n                    setStatusMessage: function (message) {\r\n                        $scope.navOptionsHandler.statusMessage = message;\r\n                        $scope.navOptionsHandler.lastMessageTime = new Date();\r\n                    }\r\n                };\r\n\r\n                // Controlador de los parámetros del filtro\r\n                $scope.filterHandler = {\r\n                    changeFilter: function (filter, search, typeFilter) {\r\n                        $scope.search = search;\r\n                        $scope.filter.typeFilter = typeFilter;\r\n                    }\r\n                };\r\n\r\n                // Controlador de las custom actions del widget\r\n                $scope.widgetActionsHandler = {\r\n                    actions: [],\r\n                    setActions: function (actions) {\r\n                        $scope.widgetActionsHandler.actions = actions;\r\n                    }\r\n                };\r\n\r\n                var adfDashboardCollapseExpand = $scope.$on('adfDashboardCollapseExpand', function (event, args) {\r\n                    $scope.widgetState.isCollapsed = args.collapseExpandStatus;\r\n                });\r\n\r\n                var adfWidgetEnterEditMode = $scope.$on('adfWidgetEnterEditMode', function (event, widget) {\r\n                    if (dashboard.idEquals(definition.wid, widget.wid)) {\r\n                        $scope.edit();\r\n                    }\r\n                });\r\n\r\n                var adfIsEditMode = $scope.$on('adfIsEditMode', function (event, widget) {\r\n                    $scope.editing = true;\r\n                });\r\n\r\n                var adfDashboardChanged = $scope.$on('adfDashboardChanged', function (event, name, model) {\r\n                    //config.widgetSelectors = tiene filtro\r\n                    var widgetConfigChanged = [];\r\n                    var grid = model.grid;\r\n                    if (grid && grid.length > 0) {\r\n                        grid.forEach(function (element) {\r\n                            var definition = element.definition;\r\n                            widgetConfigChanged.push(definition.wid);\r\n                        });\r\n                        var widgetFilters = $scope.options.extraData && $scope.options.extraData.widgetFilters;\r\n                        var sharedFilters = widgetFilters.filter(function (widgetFilter) {\r\n                            var filter = widgetFilter.filter;\r\n                            return filter && !filter.id || widgetConfigChanged.indexOf(filter.id) !== -1;\r\n                        });\r\n                        $scope.sharedFilters = angular.copy(sharedFilters);\r\n                        $scope.editing = false;\r\n                        $scope.$broadcast('widgetConfigChanged', widgetConfigChanged);\r\n                    }\r\n                });\r\n\r\n                var adfDashboardEditsCancelled = $scope.$on('adfDashboardEditsCancelled', function (event, widget) {\r\n                    $scope.editing = false;\r\n                });\r\n\r\n                $scope.openFullScreen = function () {\r\n\r\n                    $scope.$emit('adfOpenModalWidgetFromOther', definition.type, $scope.config || {});\r\n                };\r\n\r\n                $scope.openAboutScreen = function (size) {\r\n                    size = 'md';\r\n                    var modalInstance = $uibModal.open({\r\n                        animation: true,\r\n                        templateUrl: 'widgetAboutModal.html',\r\n                        controller: [\"$scope\", \"$uibModalInstance\", \"information\", function ($scope, $uibModalInstance, information) {\r\n                            $scope.about = {};\r\n                            $scope.about.info = information;\r\n                            $scope.ok = function () {\r\n                                $uibModalInstance.close();\r\n                            };\r\n                        }],\r\n                        'size': size,\r\n                        resolve: {\r\n                            information: function () {\r\n                                return $scope.config.about;\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    modalInstance.result.then(function (selectedItem) {\r\n                        $scope.selected = selectedItem;\r\n                    }, function () {\r\n                        $log.info('Modal dismissed at: ' + new Date());\r\n                    });\r\n                };\r\n\r\n                $scope.saveWidgetScreen = function (wId) {\r\n                    $scope.$emit('generateSnapshot', {\r\n                        'objectSelector': '.widget_' + wId,\r\n                        'fileName': 'capture_' + new Date().getTime()\r\n                    });\r\n                };\r\n\r\n                var createQuickFilter = function (fieldsQuickSearch) {\r\n                    var _filter = {\r\n                        or: []\r\n                    };\r\n                    var criteria;\r\n                    fieldsQuickSearch.forEach(function (field) {\r\n                        criteria = {};\r\n                        criteria[field.operator] = {};\r\n                        criteria[field.operator][field.name] = $scope.config.filter.value;\r\n                        _filter.or.push(criteria);\r\n                    });\r\n                    return _filter;\r\n                };\r\n\r\n                $scope.downloadCsv = function () {\r\n                    var columns = $scope.config.columns;\r\n                    var scope_filter = $scope.config.filter;\r\n                    var extra_filter;\r\n                    var final_filter = {};\r\n                    var order = $scope.config.sort ? $scope.config.sort : undefined;\r\n                    if ($scope.config.windowFilter) {\r\n                        var window_filter = $scope.config.onWindowTimeChanged($scope.config.windowFilter);\r\n                        if (window_filter && window_filter.and) {\r\n                            extra_filter = {\r\n                                and: window_filter.and\r\n                            };\r\n                        }\r\n                    }\r\n                    var filter;\r\n                    if (scope_filter.type && scope_filter.type === 'advanced' && scope_filter.value.length > 4) {\r\n                        filter = JSON.parse(scope_filter.value);\r\n                    } else if (scope_filter.type && scope_filter.type === 'basic' && scope_filter.value.trim() !== '') {\r\n                        filter = createQuickFilter($scope.config.fieldsQuickSearch, scope_filter.value);\r\n                    }\r\n                    if (extra_filter) {\r\n                        if (filter) {\r\n                            final_filter = {\r\n                                and: [extra_filter, filter]\r\n                            };\r\n                        } else {\r\n                            final_filter = extra_filter;\r\n                        }\r\n                    } else {\r\n                        final_filter = filter;\r\n                    }\r\n                    $scope.$broadcast('downloadCsv', {\r\n                        'columns': columns,\r\n                        'filter': final_filter,\r\n                        'order': order\r\n                    });\r\n                };\r\n\r\n                $scope.generateQR = function () {\r\n                    $scope.$broadcast('generateQR');\r\n                };\r\n\r\n                var addItemToSelection = $scope.$on('addItemToSelection', function (event, item) {\r\n                    if (!$scope.selectedItems[item.key]) {\r\n                        $scope.selectedItems[item.key] = {\r\n                            data: item.data,\r\n                            visible: item.visible\r\n                        };\r\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n                        item.isSelected = true;\r\n                        $scope.selectionManager.lastItem = item;\r\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n                    }\r\n\r\n                });\r\n\r\n                var removeItemFromSelection = $scope.$on('removeItemFromSelection', function (event, item) {\r\n                    if ($scope.selectedItems[item.key]) {\r\n                        delete $scope.selectedItems[item.key];\r\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n                        item.isSelected = false;\r\n                        $scope.selectionManager.lastItem = item;\r\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n                    }\r\n                });\r\n\r\n                // bind reload function\r\n                var stopReloadTimeout;\r\n\r\n                $scope.setReloadTimeout = function () {\r\n                    var config = $scope.config || $scope.definition.config || {};\r\n\r\n\r\n                    var reloadPeriod = config.reloadPeriod;\r\n                    if (!isNaN(reloadPeriod) && (reloadPeriod * 1) !== 0) {\r\n                        if (angular.isDefined(stopReloadTimeout)) {\r\n                            $interval.cancel(stopReloadTimeout);\r\n                            stopReloadTimeout = undefined;\r\n                        }\r\n                        stopReloadTimeout = $interval($scope.reload, (reloadPeriod * 1000));\r\n                    } else if (stopReloadTimeout) {\r\n                        $interval.cancel(stopReloadTimeout);\r\n                    }\r\n                };\r\n\r\n                $scope.reload = function () {\r\n                    $scope.$broadcast('widgetReload');\r\n\r\n                    $scope.setReloadTimeout();\r\n                };\r\n\r\n                // verificacion de periodo de refresco\r\n                $scope.setReloadTimeout();\r\n\r\n                $scope.$on('$destroy', function () {\r\n                    adfDashboardCollapseExpand();\r\n                    adfWidgetEnterEditMode();\r\n                    adfIsEditMode();\r\n                    adfDashboardChanged();\r\n                    adfDashboardEditsCancelled();\r\n                    addItemToSelection();\r\n                    removeItemFromSelection();\r\n                    $interval.cancel(stopReloadTimeout);\r\n                });\r\n            }],\r\n            compile: function () {\r\n\r\n                /**\r\n                 * use pre link, because link of widget-content\r\n                 * is executed before post link widget\r\n                 */\r\n                return {\r\n                    pre: preLink,\r\n                    post: postLink\r\n                };\r\n            }\r\n        };\r\n\r\n    }]);\n\r\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n/**\r\n * The widget service provide helper functions to render widgets and their content.\r\n */\r\nangular.module('adf')\r\n  .factory('widgetService', [\"$http\", \"$q\", \"$sce\", \"$templateCache\", \"dashboard\", function($http, $q, $sce, $templateCache, dashboard) {\r\n    \r\n\r\n    function parseUrl(url) {\r\n      var parsedUrl = url;\r\n      if (url.indexOf('{widgetsPath}') >= 0) {\r\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\r\n                .replace('//', '/');\r\n        if (parsedUrl.indexOf('/') === 0) {\r\n          parsedUrl = parsedUrl.substring(1);\r\n        }\r\n      }\r\n      return parsedUrl;\r\n    }\r\n\r\n    var exposed = {};\r\n\r\n    exposed.getTemplate = function(widget){\r\n      var deferred = $q.defer();\r\n\r\n      if (widget.template) {\r\n        deferred.resolve(widget.template);\r\n      } else if (widget.templateUrl) {\r\n        // try to fetch template from cache\r\n        var tpl = $templateCache.get(widget.templateUrl);\r\n        if (tpl) {\r\n          deferred.resolve(tpl);\r\n        } else {\r\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\r\n          $http.get(url)\r\n               .success(function(response) {\r\n                 // put response to cache, with unmodified url as key\r\n                 $templateCache.put(widget.templateUrl, response);\r\n                 deferred.resolve(response);\r\n               })\r\n               .error(function() {\r\n                 deferred.reject('could not load template');\r\n               });\r\n        }\r\n      }\r\n\r\n      return deferred.promise;\r\n    };\r\n\r\n    return exposed;\r\n  }]);\r\n\n})(window);","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('adf')\r\n    .directive('adfWidgetContent', function ($log, $q, widgetService,\r\n        $compile, $controller, $injector, dashboard, $translate) {\r\n\r\n        function renderError($element, msg) {\r\n            $log.warn(msg);\r\n            $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\r\n        }\r\n\r\n        function compileWidget($scope, $element, currentScope, configChanged) {\r\n            var model = $scope.model;\r\n            if (!model) {\r\n                $translate('ADF.ERROR.MODEL_IS_UNDEFINED').then(function (translateMessage) {\r\n                    renderError($element, translateMessage);\r\n                });\r\n                return currentScope;\r\n            }\r\n\r\n            var content = $scope.content;\r\n\r\n            if (!content) {\r\n                $translate('ADF.ERROR.WIDGET_FOR_DEPRECTATED', {\r\n                    title: model.title\r\n                }).then(function (translateMessage) {\r\n                    renderError($element, translateMessage);\r\n                });\r\n                return currentScope;\r\n            }\r\n\r\n            var extra = $scope.extra;\r\n            var newScope = currentScope;\r\n\r\n            if (newScope) {\r\n                var is_menu = newScope.menu !== undefined && newScope.menu !== null && (!newScope.isPaginationEnable || !newScope.isPaginationEnable());\r\n                if (is_menu || configChanged || !angular.isFunction(newScope.reloadData)) {\r\n                    if ($scope.navOptionsHandler) {\r\n                        $scope.navOptionsHandler.firstLoad = true;\r\n                    }\r\n                    newScope = renderWidget($scope, $element, currentScope, model, content, extra);\r\n                } else {\r\n                    var is_itemsPerPage = newScope.itemsPerPage !== undefined && newScope.itemsPerPage !== null;\r\n                    if (is_itemsPerPage || newScope.page) {\r\n                        newScope.page = 1;\r\n                    }\r\n                    newScope.reloadData();\r\n                }\r\n            } else {\r\n                if ($scope.navOptionsHandler) {\r\n                    $scope.navOptionsHandler.firstLoad = true;\r\n                }\r\n\r\n                newScope = renderWidget($scope, $element, currentScope, model, content, extra);\r\n            }\r\n\r\n            function _getWindowTime(type) {\r\n                if (type === 'custom') {\r\n                    return {\r\n                        from: newScope.config.windowFilter.from,\r\n                        to: newScope.config.windowFilter.to\r\n                    };\r\n                }\r\n                var from = window.moment().subtract(1, type);\r\n                return {\r\n                    from: from._d\r\n                };\r\n            }\r\n\r\n\r\n\r\n            newScope.config.getWindowTime = function () {\r\n                var windowFilter = newScope.config.windowFilter;\r\n                if (windowFilter && windowFilter.type) {\r\n                    var winTime = _getWindowTime(windowFilter.type);\r\n                    /* jshint ignore:start */\r\n                    if (!window.eval(newScope.config.windowFilter.rawdate)) {\r\n                        for (var key in winTime) {\r\n                            winTime[key] = window.moment(winTime[key]).format();\r\n                        }\r\n                        winTime['rawdate'] = true;\r\n                    }\r\n                    /* jshint ignore:end */\r\n                    return winTime;\r\n                }\r\n            };\r\n\r\n            if (extra) {\r\n                newScope.editing = extra.editing ? true : false;\r\n                newScope.extraData = extra;\r\n            }\r\n\r\n            return newScope;\r\n        }\r\n\r\n        function renderWidget($scope, $element, currentScope, model, content, extra) {\r\n            // display loading template\r\n            $element.html(dashboard.loadingTemplate);\r\n\r\n            // create new scope\r\n            var templateScope = $scope.$new();\r\n\r\n            // pass config object to scope\r\n            if (!model.config) {\r\n                model.config = {};\r\n            }\r\n\r\n            templateScope.config = model.config;\r\n            templateScope.editing = extra && extra.editing;\r\n\r\n            if (extra) {\r\n                templateScope.extra = extra;\r\n            }\r\n\r\n            var _from = currentScope || templateScope.config;\r\n            templateScope.selectionManager = (_from) ? _from.selectionManager : undefined;\r\n\r\n            // local injections\r\n            var base = {\r\n                $scope: templateScope,\r\n                widget: model,\r\n                config: model.config\r\n            };\r\n\r\n            // get resolve promises from content object\r\n            var resolvers = {};\r\n            resolvers.$tpl = widgetService.getTemplate(content);\r\n            if (content.resolve) {\r\n                angular.forEach(content.resolve, function (promise, key) {\r\n                    if (angular.isString(promise)) {\r\n                        resolvers[key] = $injector.get(promise);\r\n                    } else {\r\n                        resolvers[key] = $injector.invoke(promise, promise, base);\r\n                    }\r\n                });\r\n            }\r\n\r\n            // resolve all resolvers\r\n            $q.all(resolvers).then(function (locals) {\r\n                angular.extend(locals, base);\r\n\r\n                // pass resolve map to template scope as defined in resolveAs\r\n                if (content.resolveAs) {\r\n                    templateScope[content.resolveAs] = locals;\r\n                }\r\n\r\n                // compile & render template\r\n                var template = locals.$tpl;\r\n                $element.html(template);\r\n                if (content.controller) {\r\n                    var templateCtrl = $controller(content.controller, locals);\r\n                    if (content.controllerAs) {\r\n                        templateScope[content.controllerAs] = templateCtrl;\r\n                    }\r\n                    $element.children().data('$ngControllerController', templateCtrl);\r\n                }\r\n                $compile($element.contents())(templateScope);\r\n            }, function (reason) {\r\n                // handle promise rejection\r\n                var msg = 'ADF.ERROR.COULD_NOT_RESOLVE_ALL_PROMISSES';\r\n                $translate(msg, {\r\n                    reason: (reason ? ': ' + reason : reason)\r\n                }).then(function (translateMessage) {\r\n                    renderError($element, translateMessage);\r\n                });\r\n            });\r\n\r\n            // destroy old scope\r\n            if (currentScope) {\r\n                currentScope.$destroy();\r\n            }\r\n\r\n            return templateScope;\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            require: '?^^adfWidgetGrid',\r\n            scope: {\r\n                model: '=',\r\n                content: '=',\r\n                extra: '=',\r\n                navOptionsHandler: '=?',\r\n                filterHandler: '=?',\r\n                widgetActionsHandler: '=?'\r\n            },\r\n            link: function ($scope, $element, attrs, adfWidgetGridCtrl) {\r\n                var currentScope = compileWidget($scope, $element, null);\r\n                if (adfWidgetGridCtrl) {\r\n                    $scope.search = $scope.search || {};\r\n                    adfWidgetGridCtrl.updateWidgetFilters($scope.model.config.filter && $scope.model.config.filter.id);\r\n                }\r\n\r\n                var widgetConfigChangedEvt = $scope.$on('widgetConfigChanged', function (event, changeWidgets) {\r\n                    if (changeWidgets) {\r\n                        if (changeWidgets.indexOf($scope.model.wid) !== -1 && adfWidgetGridCtrl) {\r\n                            adfWidgetGridCtrl.updateWidgetFilters($scope.model.config.filter && $scope.model.config.filter.id, true);\r\n                        }\r\n                    } else {\r\n                        currentScope = compileWidget($scope, $element, currentScope, true);\r\n                    }\r\n                });\r\n\r\n                var widgetReloadEvt = $scope.$on('widgetReload', function (event, reloadWidgets) {\r\n                    var reloadWidget = true;\r\n                    if (reloadWidgets && reloadWidgets.length > 0) {\r\n                        reloadWidget = reloadWidgets.indexOf($scope.model.wid) !== -1;\r\n                    }\r\n                    if (reloadWidget) {\r\n                        currentScope = compileWidget($scope, $element, currentScope, false);\r\n                        if (adfWidgetGridCtrl && adfWidgetGridCtrl.updateWidgetFilters) {\r\n                            adfWidgetGridCtrl.updateWidgetFilters($scope.model.config.filter && $scope.model.config.filter.id);\r\n                        }\r\n                    }\r\n                });\r\n\r\n                $scope.$on('destroy', function () {\r\n                    widgetConfigChangedEvt();\r\n                    widgetReloadEvt();\r\n                });\r\n            }\r\n        };\r\n    });","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('adf')\r\n    .directive('adfWidgetGrid', function ($injector, $q, $log, $uibModal, $rootScope, $interval, dashboard, adfTemplatePath, Filter, toastr, $translate) {\r\n        function preLink($scope) {\r\n            var definition = $scope.definition;\r\n\r\n            if (definition) {\r\n                var w = dashboard.widgets[definition.type];\r\n                if (w) {\r\n                    // pass title\r\n                    if (!definition.title) {\r\n                        definition.title = w.title;\r\n                    }\r\n\r\n                    definition.titleTemplateUrl = adfTemplatePath + 'widget-grid-title.html';\r\n\r\n                    if (!definition.editTemplateUrl) {\r\n                        definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\r\n                        if (w.editTemplateUrl) {\r\n                            definition.editTemplateUrl = w.editTemplateUrl;\r\n                        }\r\n                    }\r\n\r\n                    if (!definition.titleTemplateUrl) {\r\n                        definition.frameless = w.frameless;\r\n                    }\r\n\r\n                    if (!definition.styleClass) {\r\n                        definition.styleClass = w.styleClass;\r\n                    }\r\n\r\n                    // set id for sortable\r\n                    if (!definition.wid) {\r\n                        definition.wid = dashboard.id();\r\n                    }\r\n\r\n                    // pass copy of widget to scope\r\n                    $scope.widget = angular.copy(w);\r\n\r\n                    // create config object\r\n                    var config = definition.config;\r\n                    if (config) {\r\n                        if (angular.isString(config)) {\r\n                            config = angular.fromJson(config);\r\n                        }\r\n                    } else {\r\n                        config = {};\r\n                    }\r\n                    // pass config to scope\r\n                    $scope.config = config;\r\n\r\n                    if (typeof $scope.widget.show_modal_footer === 'undefined') {\r\n                        $scope.widget.show_modal_footer = true;\r\n                    }\r\n\r\n                    if (typeof $scope.widget.show_reload_config === 'undefined') {\r\n                        $scope.widget.show_reload_config = true;\r\n                    }\r\n\r\n                    // collapse exposed $scope.widgetState property\r\n                    if (!$scope.widgetState) {\r\n                        $scope.widgetState = {};\r\n                        $scope.widgetState.isCollapsed = (w.collapsed === true) ? w.collapsed : false;\r\n                    }\r\n\r\n                } else {\r\n                    $log.warn('could not find widget ' + definition.type);\r\n                }\r\n            } else {\r\n                $log.debug('definition not specified, widget was probably removed');\r\n            }\r\n        }\r\n\r\n        function postLink($scope, $element) {\r\n            var definition = $scope.definition;\r\n            if (!definition) {\r\n                $log.debug('widget not found');\r\n                return;\r\n            }\r\n            var config = $scope.config || {};\r\n\r\n            // bind close function\r\n            var deleteWidget = function () {\r\n                $element.remove();\r\n                $rootScope.$broadcast('adfWidgetRemovedFromGrid', definition);\r\n            };\r\n\r\n            $scope.remove = function () {\r\n                if ($scope.options.enableConfirmDelete) {\r\n                    var deleteScope = $scope.$new();\r\n\r\n                    var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\r\n                    if (definition.deleteTemplateUrl) {\r\n                        deleteTemplateUrl = definition.deleteTemplateUrl;\r\n                    }\r\n                    var opts = {\r\n                        scope: deleteScope,\r\n                        templateUrl: deleteTemplateUrl,\r\n                        backdrop: 'static'\r\n                    };\r\n                    var instance = $uibModal.open(opts);\r\n\r\n                    deleteScope.closeDialog = function () {\r\n                        instance.close();\r\n                        deleteScope.$destroy();\r\n                    };\r\n                    deleteScope.deleteDialog = function () {\r\n                        deleteWidget();\r\n                        deleteScope.closeDialog();\r\n                    };\r\n                } else {\r\n                    deleteWidget();\r\n                }\r\n            };\r\n\r\n\r\n            $scope.print = function () {\r\n                if (!$scope.editMode) {\r\n                    $scope.$broadcast('widgetPrint');\r\n                }\r\n            };\r\n\r\n            $scope.isExecuteOperationEnabled = function () {\r\n\r\n                if (config.entityKey)\r\n                    return true;\r\n                var filter = config.filter;\r\n\r\n                if (filter) {\r\n                    if (filter.headersFilter && filter.headersFilter.length > 0) {\r\n                        return true;\r\n                    } else {\r\n                        if (filter.type === \"basic\") {\r\n                            return filter.value.length > 0;\r\n                        }\r\n                        if (filter.type === \"advanced\") {\r\n                            return filter.value.length > 2 && filter.oql;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return false;\r\n            };\r\n\r\n            $scope.executeOperation = function () {\r\n                if (!$scope.editMode) {\r\n\r\n                    $scope.$parent.$broadcast('widgetExecuteOperation');\r\n                }\r\n            };\r\n\r\n            $scope.filter = {\r\n                typeFilter: 1,\r\n                showFilter: false,\r\n                showFinalFilter: false\r\n            };\r\n\r\n            $scope.launchSearching = function () {\r\n                var widget = {\r\n                    definition: definition,\r\n                    element: $element\r\n                };\r\n\r\n                $rootScope.$broadcast('adfLaunchSearchingFromWidget', widget, $scope.config.filter);\r\n                $scope.reload();\r\n            };\r\n\r\n\r\n            $scope.launchSearchingAdv = function () {\r\n                if (!$scope.filterApplied) {\r\n                    var executeSearch = true;\r\n                    $scope.search.quick = '';\r\n                    if ($scope.search.json === '' || $scope.search.json === '{}' || (!angular.isString($scope.search.json) && Object.keys($scope.search.json).length === 0)) {\r\n                        if ($scope.search.oql && $scope.search.oql.trim().length > 0) {\r\n                            toastr.error($translate.instant(\"TOASTR.FILTER_IS_MALFORMED\"));\r\n                            executeSearch = false;\r\n                        } else {\r\n                            $scope.config.filter = {\r\n                                type: 'advanced',\r\n                                oql: '',\r\n                                value: ''\r\n                            };\r\n                        }\r\n                    } else {\r\n                        $scope.config.filter = {\r\n                            type: 'advanced',\r\n                            oql: $scope.search.oql,\r\n                            value: $scope.search.json,\r\n                            headersFilter: $scope.config.filter.headersFilter\r\n                        };\r\n                    }\r\n\r\n                    if (executeSearch) {\r\n                        $scope.launchSearching();\r\n                        $scope.filterApplied = true;\r\n                    }\r\n                }\r\n            };\r\n\r\n            $scope.launchSearchingQuick = function () {\r\n                if (!$scope.filterApplied) {\r\n                    $scope.search.oql = $scope.search.json = '';\r\n                    $scope.config.filter = {\r\n                        type: 'basic',\r\n                        value: $scope.search.quick,\r\n                        headersFilter: $scope.config.filter.headersFilter\r\n                    };\r\n                    $scope.launchSearching();\r\n                    $scope.filterApplied = true;\r\n                }\r\n            };\r\n\r\n            $scope.launchSearchingShared = function () {\r\n                // if (!$scope.filterApplied) {\r\n                var shared = $scope.search.id;\r\n                if (shared) {\r\n                    shared.filter.id = shared.wid;\r\n                    $scope.config.filter = shared.filter;\r\n                } else {\r\n                    $scope.config.filter = {};\r\n                }\r\n                $scope.launchSearching();\r\n                $scope.filterApplied = true;\r\n                // }\r\n            };\r\n\r\n            $scope.filterSharedSelect = function ($item, $model) {\r\n                $scope.filterApplied = false;\r\n                $scope.launchSearchingShared();\r\n            };\r\n            $scope.filterSharedRemove = function ($item, $model) {\r\n                $scope.filterApplied = false;\r\n            };\r\n\r\n            var windowTimeChanged = $scope.$on('onWindowTimeChanged', function (event, timeObj) {\r\n                $scope.config.windowFilter = timeObj ? timeObj : (config.windowFilter ? {} : timeObj);\r\n                var widget = {\r\n                    definition: definition,\r\n                    element: $element\r\n                };\r\n                $rootScope.$broadcast('adfWindowTimeChangedFromWidget', widget, $scope.config.windowFilter);\r\n                $scope.reload();\r\n            });\r\n\r\n            $scope.enter = function (event) {\r\n                var keycode = (event.keyCode ? event.keyCode : event.which);\r\n                if (keycode === 13) {\r\n                    if ($scope.filter.typeFilter === 0)\r\n                        $scope.launchSearchingAdv();\r\n                    if ($scope.filter.typeFilter === 1)\r\n                        $scope.launchSearchingQuick();\r\n                    if ($scope.filter.typeFilter === 2)\r\n                        $scope.launchSearchingShared();\r\n                } else if (keycode === 19) {\r\n                    $scope.filter.showFinalFilter = !$scope.filter.showFinalFilter;\r\n                } else {\r\n                    $scope.filterApplied = false;\r\n                }\r\n            };\r\n\r\n\r\n            $scope.customSelectors = [];\r\n            $scope.getCustomSelectors = function () {\r\n                if ($scope.config.customSelectors) {\r\n                    $scope.customSelectors = $scope.config.customSelectors;\r\n                } else {\r\n                    config.widgetSelectors().findFields('').then(function (fields) {\r\n                        $scope.customSelectors = fields;\r\n                        $scope.$apply();\r\n                    }).catch(function (err) {\r\n                        $log.error(err);\r\n                    });\r\n                }\r\n            };\r\n\r\n            $scope.changeDirection = function () {\r\n                var direction = config.sort.direction;\r\n                if (direction === 'DESCENDING') {\r\n                    $scope.config.sort.direction = 'ASCENDING';\r\n                } else if (direction === 'ASCENDING') {\r\n                    $scope.config.sort.direction = 'DESCENDING';\r\n                }\r\n                $scope.reload();\r\n            };\r\n\r\n            $scope.debugQuery = function () {\r\n                Filter.parseQuery($scope.search.oql || '')\r\n                    .then(function (data) {\r\n                        $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\r\n                        $scope.unknownWords = '';\r\n                        $scope.filter_error = null;\r\n                    })\r\n                    .catch(function (err) {\r\n                        $scope.filter_error = err;\r\n                        // Tratar el error\r\n                    });\r\n\r\n            };\r\n\r\n            $scope.autocomplete_options = function () {\r\n                var autocomplete_options = {\r\n                    suggest: Filter.suggest_field_delimited,\r\n                    customSelectors: config.widgetSelectors()\r\n                };\r\n\r\n                return autocomplete_options;\r\n\r\n            };\r\n\r\n            // Multiple selection\r\n            $scope.selectedItems = definition.selectedItems || {};\r\n\r\n            // Gestor de seleccion\r\n            $scope.selectionManager = {\r\n                currentSelection: $scope.selectedItems,\r\n                isSelected: function (key, obj) {\r\n                    if ($scope.selectedItems[key] && !angular.isUndefined(obj)) {\r\n                        $scope.selectedItems[key].data = obj;\r\n                    }\r\n\r\n                    return $scope.selectedItems[key] ? true : false;\r\n                },\r\n                totalSelected: function () {\r\n                    return Object.keys($scope.selectedItems).length;\r\n                }\r\n            };\r\n\r\n            if (definition.config.sendSelection) {\r\n\r\n                $scope.sendEntities = function () {\r\n                    definition.config.sendSelection($scope.selectedItems);\r\n                    $scope.$parent.closeDialog();\r\n                };\r\n\r\n                if (definition.config.selectedItems) {\r\n                    $scope.selectedItems = angular.copy(definition.config.selectedItems);\r\n                }\r\n\r\n                $scope.config.selectionManager = $scope.selectionManager;\r\n            }\r\n\r\n            $scope.manageSelectedItems = function () {\r\n                var selectionScope = $scope.$new();\r\n\r\n                if (definition.config.sendSelection) {\r\n                    delete config.selectionConfig.operationTypes;\r\n                    delete config.selectionConfig.filterTypes;\r\n                }\r\n\r\n                selectionScope.selectionConfig = config.selectionConfig;\r\n\r\n                selectionScope.selectedItems = [];\r\n                angular.forEach($scope.selectedItems, function (value, key) {\r\n                    selectionScope.selectedItems.push({\r\n                        key: key,\r\n                        value: value\r\n                    });\r\n                });\r\n\r\n                selectionScope.currentSelection = {\r\n                    selected: selectionScope.selectedItems\r\n                };\r\n\r\n                var manageItemsSelectedTemplate = adfTemplatePath + 'widget-selection.html';\r\n                var opts = {\r\n                    scope: selectionScope,\r\n                    templateUrl: manageItemsSelectedTemplate,\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    animation: true\r\n                };\r\n\r\n                var instance = $uibModal.open(opts);\r\n\r\n                selectionScope.restoreSelection = function () {\r\n                    selectionScope.currentSelection = {\r\n                        selected: selectionScope.selectedItems\r\n                    };\r\n                };\r\n\r\n                selectionScope.clearSelection = function () {\r\n                    selectionScope.currentSelection.selected = [];\r\n                };\r\n\r\n                // Cierra sy guarda los datos de nueva selección\r\n                selectionScope.applyFilter = function (type) {\r\n                    var customOql = selectionScope.selectionConfig.filterAction(selectionScope.currentSelection.selected, type);\r\n\r\n                    if (!angular.isUndefined(customOql) && customOql !== null) {\r\n                        $scope.filter.typeFilter = 0;\r\n                        Filter.parseQuery(customOql).then(function (data) {\r\n                            $scope.search.oql = customOql;\r\n                            $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\r\n                            $scope.unknownWords = '';\r\n                            $scope.filter_error = null;\r\n\r\n                            $scope.launchSearchingAdv();\r\n                        }).catch(function (err) {\r\n                            $scope.filter_error = err;\r\n                        });\r\n                    }\r\n                };\r\n\r\n                selectionScope.executeOperation = function (operationType) {\r\n                    if (!$scope.editMode) {\r\n                        $scope.$parent.$broadcast('widgetExecuteOperation', {\r\n                            'selectedItems': selectionScope.currentSelection.selected,\r\n                            'type': operationType\r\n                        });\r\n                    }\r\n                };\r\n\r\n                // Cierra sy guarda los datos de nueva selección\r\n                selectionScope.saveChangesDialog = function () {\r\n                    var finalSelection = {};\r\n                    angular.forEach(selectionScope.currentSelection.selected, function (data, idx) {\r\n                        finalSelection[data.key] = {\r\n                            data: data.value.data,\r\n                            visible: data.value.visible\r\n                        };\r\n                    });\r\n\r\n                    $scope.selectedItems = angular.copy(finalSelection);\r\n                    $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n\r\n                    $scope.selectionManager.lastItem = {};\r\n                    $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n\r\n                    instance.close();\r\n                    selectionScope.$destroy();\r\n                };\r\n\r\n                // Cierra sin realizar ninguna acción\r\n                selectionScope.closeDialog = function () {\r\n                    instance.close();\r\n                    selectionScope.$destroy();\r\n                };\r\n            };\r\n\r\n\r\n            // bind edit function\r\n            $scope.edit = function () {\r\n                var editScope = $scope.$new();\r\n                editScope.definition = angular.copy(definition);\r\n\r\n                var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\r\n                if (definition.editTemplateUrl) {\r\n                    adfEditTemplatePath = definition.editTemplateUrl;\r\n                }\r\n\r\n                var opts = {\r\n                    scope: editScope,\r\n                    templateUrl: adfEditTemplatePath,\r\n                    backdrop: 'static',\r\n                    size: 'lg'\r\n                };\r\n\r\n                var instance = $uibModal.open(opts);\r\n\r\n                editScope.closeDialog = function () {\r\n                    instance.close();\r\n                    editScope.$destroy();\r\n                };\r\n\r\n                // TODO create util method\r\n                function createApplyPromise(result) {\r\n                    var promise;\r\n                    if (typeof result === 'boolean') {\r\n                        var deferred = $q.defer();\r\n                        if (result) {\r\n                            deferred.resolve();\r\n                        } else {\r\n                            deferred.reject();\r\n                        }\r\n                        promise = deferred.promise;\r\n                    } else {\r\n                        promise = $q.when(result);\r\n                    }\r\n                    return promise;\r\n                }\r\n\r\n                editScope.saveDialog = function () {\r\n                    // clear validation error\r\n                    editScope.validationError = null;\r\n\r\n                    // build injection locals\r\n                    var widget = $scope.widget;\r\n\r\n                    // create a default apply method for widgets\r\n                    // without edit mode\r\n                    // see issue https://goo.gl/KHPQLZ\r\n                    var applyFn;\r\n                    if (widget.edit) {\r\n                        applyFn = widget.edit.apply;\r\n                    } else {\r\n                        applyFn = function () {\r\n                            return true;\r\n                        };\r\n                    }\r\n\r\n                    var editScopeDefinition = editScope.definition.config || {};\r\n                    // injection locals\r\n                    var locals = {\r\n                        widget: widget,\r\n                        definition: editScope.definition,\r\n                        config: editScopeDefinition\r\n                    };\r\n\r\n                    // invoke apply function and apply if success\r\n                    var result = $injector.invoke(applyFn, applyFn, locals);\r\n                    createApplyPromise(result).then(function () {\r\n                        definition.title = editScope.definition.title;\r\n                        if (editScope.definition.type === 'summaryChart') {\r\n                            editScope.definition.Ftype = editScope.definition.config.type.toLowerCase();\r\n                            definition.Ftype = editScope.definition.config.type.toLowerCase();\r\n                        }\r\n                        angular.extend(definition.config, editScopeDefinition);\r\n\r\n                        editScope.closeDialog();\r\n\r\n                        if (widget.edit && widget.edit.reload) {\r\n                            $scope.setReloadTimeout();\r\n                            // reload content after edit dialog is closed\r\n                            $scope.$broadcast('widgetConfigChanged');\r\n                        }\r\n                    }, function (err) {\r\n                        if (err) {\r\n                            editScope.validationError = err;\r\n                        } else {\r\n                            editScope.validationError = 'VALIDATION_DURING_APPLY_FAILED';\r\n                        }\r\n                    });\r\n                };\r\n\r\n            };\r\n\r\n\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            templateUrl: adfTemplatePath + 'widget-grid.html',\r\n            scope: {\r\n                definition: '=',\r\n                editMode: '=',\r\n                options: '=',\r\n                widgetState: '='\r\n            },\r\n            controller: function ($scope) {\r\n                var _setFilterType = function (selectFilter) {\r\n                    var config = $scope.config || {};\r\n                    var filter = config.filter = config.filter ? config.filter : {};\r\n                    var id = filter.id = selectFilter && filter.id;\r\n                    filter.headersFilter = selectFilter && filter.headersFilter;\r\n                    switch (filter.type) {\r\n                        case 'advanced':\r\n                            $scope.filter.typeFilter = id ? 2 : 0;\r\n                            $scope.search = {\r\n                                oql: filter.oql,\r\n                                json: filter.value\r\n                            };\r\n                            break;\r\n                        case 'basic':\r\n                            $scope.filter.typeFilter = id ? 2 : 1;\r\n                            $scope.search = {\r\n                                quick: filter.value\r\n                            };\r\n\r\n                            break;\r\n                        default:\r\n                            $scope.filter.typeFilter = id ? 2 : 1;\r\n                            $scope.search = {\r\n                                quick: filter.value = ''\r\n                            };\r\n                            break;\r\n                    }\r\n                    $scope.search.id = selectFilter;\r\n                };\r\n\r\n                this.updateWidgetFilters = function (filterId, configChange) {\r\n                    if ($scope.options && $scope.options.extraData && $scope.options.extraData.widgetFilters) {\r\n                        var _widgetFilters = $scope.options.extraData.widgetFilters;\r\n                        var model = $scope.definition;\r\n                        var selectFilter;\r\n                        var sharedFilters = _widgetFilters.filter(function (widgetFilter) {\r\n                            // Recuperamos solos los filtros de widgets que cumplan las condiciones:\r\n                            // - No tenga un filtro heredado como filtro\r\n                            // - El tipo de filtro sea igual que el widget que pueda heredarlo (Ftype)\r\n                            // - No recuperamos el filtro propio del widget  \r\n                            var shared = (!widgetFilter.filter || !widgetFilter.filter.id) && (widgetFilter.Ftype === model.Ftype) && (widgetFilter.wid !== model.wid);\r\n                            if (shared && (filterId === widgetFilter.wid))\r\n                                selectFilter = widgetFilter;\r\n                            return shared;\r\n                        });\r\n\r\n                        $scope.sharedFilters = angular.copy(sharedFilters);\r\n                        if (!configChange || !selectFilter && !!filterId)\r\n                            _setFilterType(selectFilter);\r\n                    }\r\n\r\n                };\r\n\r\n                var definition = $scope.definition;\r\n\r\n\r\n                if (definition.config.selectedItems) {\r\n                    $scope.selectedItemsLength = Object.keys(definition.config.selectedItems).length;\r\n                }\r\n\r\n\r\n                // Controlador de la barra inferior de los widgets\r\n                $scope.navOptionsHandler = {\r\n                    firstLoad: true,\r\n                    loadingData: false,\r\n                    startLoading: function () {\r\n                        $scope.navOptionsHandler.loadingData = true;\r\n                    },\r\n                    stopLoading: function () {\r\n                        $scope.navOptionsHandler.firstLoad = false;\r\n                        $scope.navOptionsHandler.loadingData = false;\r\n                        $scope.navOptionsHandler.lastMessageTime = new Date();\r\n                    },\r\n                    setStatusMessage: function (message) {\r\n                        $scope.navOptionsHandler.statusMessage = message;\r\n                        $scope.navOptionsHandler.lastMessageTime = new Date();\r\n                    }\r\n                };\r\n\r\n                // Controlador de los parámetros del filtro\r\n                $scope.filterHandler = {\r\n                    changeFilter: function (filter, search, typeFilter) {\r\n                        $scope.search = search;\r\n                        $scope.filter.typeFilter = typeFilter;\r\n                    }\r\n                };\r\n\r\n                // Controlador de las custom actions del widget\r\n                $scope.widgetActionsHandler = {\r\n                    actions: [],\r\n                    setActions: function (actions) {\r\n                        $scope.widgetActionsHandler.actions = actions;\r\n                    }\r\n                };\r\n\r\n                var adfDashboardCollapseExpand = $scope.$on('adfDashboardCollapseExpand', function (event, args) {\r\n                    $scope.widgetState.isCollapsed = args.collapseExpandStatus;\r\n                });\r\n\r\n                var adfWidgetEnterEditMode = $scope.$on('adfWidgetEnterEditMode', function (event, widget) {\r\n                    if (dashboard.idEquals(definition.wid, widget.wid)) {\r\n                        $scope.edit();\r\n                    }\r\n                });\r\n\r\n                var adfIsEditMode = $scope.$on('adfIsEditMode', function (event, widget) {\r\n                    $scope.editing = true;\r\n                });\r\n\r\n                var adfDashboardChanged = $scope.$on('adfDashboardChanged', function (event, name, model) {\r\n                    //config.widgetSelectors = tiene filtro\r\n                    var widgetConfigChanged = [];\r\n                    var grid = model.grid;\r\n                    if (grid && grid.length > 0) {\r\n                        grid.forEach(function (element) {\r\n                            var definition = element.definition;\r\n                            widgetConfigChanged.push(definition.wid);\r\n                        });\r\n                        var widgetFilters = $scope.options.extraData && $scope.options.extraData.widgetFilters;\r\n                        var sharedFilters = widgetFilters.filter(function (widgetFilter) {\r\n                            var filter = widgetFilter.filter;\r\n                            return filter && !filter.id || widgetConfigChanged.indexOf(filter.id) !== -1;\r\n                        });\r\n                        $scope.sharedFilters = angular.copy(sharedFilters);\r\n                        $scope.editing = false;\r\n                        $scope.$broadcast('widgetConfigChanged', widgetConfigChanged);\r\n                    }\r\n                });\r\n\r\n                var adfDashboardEditsCancelled = $scope.$on('adfDashboardEditsCancelled', function (event, widget) {\r\n                    $scope.editing = false;\r\n                });\r\n\r\n                $scope.openFullScreen = function () {\r\n\r\n                    $scope.$emit('adfOpenModalWidgetFromOther', definition.type, $scope.config || {});\r\n                };\r\n\r\n                $scope.openAboutScreen = function (size) {\r\n                    size = 'md';\r\n                    var modalInstance = $uibModal.open({\r\n                        animation: true,\r\n                        templateUrl: 'widgetAboutModal.html',\r\n                        controller: function ($scope, $uibModalInstance, information) {\r\n                            $scope.about = {};\r\n                            $scope.about.info = information;\r\n                            $scope.ok = function () {\r\n                                $uibModalInstance.close();\r\n                            };\r\n                        },\r\n                        'size': size,\r\n                        resolve: {\r\n                            information: function () {\r\n                                return $scope.config.about;\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    modalInstance.result.then(function (selectedItem) {\r\n                        $scope.selected = selectedItem;\r\n                    }, function () {\r\n                        $log.info('Modal dismissed at: ' + new Date());\r\n                    });\r\n                };\r\n\r\n                $scope.saveWidgetScreen = function (wId) {\r\n                    $scope.$emit('generateSnapshot', {\r\n                        'objectSelector': '.widget_' + wId,\r\n                        'fileName': 'capture_' + new Date().getTime()\r\n                    });\r\n                };\r\n\r\n                var createQuickFilter = function (fieldsQuickSearch) {\r\n                    var _filter = {\r\n                        or: []\r\n                    };\r\n                    var criteria;\r\n                    fieldsQuickSearch.forEach(function (field) {\r\n                        criteria = {};\r\n                        criteria[field.operator] = {};\r\n                        criteria[field.operator][field.name] = $scope.config.filter.value;\r\n                        _filter.or.push(criteria);\r\n                    });\r\n                    return _filter;\r\n                };\r\n\r\n                $scope.downloadCsv = function () {\r\n                    var columns = $scope.config.columns;\r\n                    var scope_filter = $scope.config.filter;\r\n                    var extra_filter;\r\n                    var final_filter = {};\r\n                    var order = $scope.config.sort ? $scope.config.sort : undefined;\r\n                    if ($scope.config.windowFilter) {\r\n                        var window_filter = $scope.config.onWindowTimeChanged($scope.config.windowFilter);\r\n                        if (window_filter && window_filter.and) {\r\n                            extra_filter = {\r\n                                and: window_filter.and\r\n                            };\r\n                        }\r\n                    }\r\n                    var filter;\r\n                    if (scope_filter.type && scope_filter.type === 'advanced' && scope_filter.value.length > 4) {\r\n                        filter = JSON.parse(scope_filter.value);\r\n                    } else if (scope_filter.type && scope_filter.type === 'basic' && scope_filter.value.trim() !== '') {\r\n                        filter = createQuickFilter($scope.config.fieldsQuickSearch, scope_filter.value);\r\n                    }\r\n                    if (extra_filter) {\r\n                        if (filter) {\r\n                            final_filter = {\r\n                                and: [extra_filter, filter]\r\n                            };\r\n                        } else {\r\n                            final_filter = extra_filter;\r\n                        }\r\n                    } else {\r\n                        final_filter = filter;\r\n                    }\r\n                    $scope.$broadcast('downloadCsv', {\r\n                        'columns': columns,\r\n                        'filter': final_filter,\r\n                        'order': order\r\n                    });\r\n                };\r\n\r\n                $scope.generateQR = function () {\r\n                    $scope.$broadcast('generateQR');\r\n                };\r\n\r\n                var addItemToSelection = $scope.$on('addItemToSelection', function (event, item) {\r\n                    if (!$scope.selectedItems[item.key]) {\r\n                        $scope.selectedItems[item.key] = {\r\n                            data: item.data,\r\n                            visible: item.visible\r\n                        };\r\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n                        item.isSelected = true;\r\n                        $scope.selectionManager.lastItem = item;\r\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n                    }\r\n\r\n                });\r\n\r\n                var removeItemFromSelection = $scope.$on('removeItemFromSelection', function (event, item) {\r\n                    if ($scope.selectedItems[item.key]) {\r\n                        delete $scope.selectedItems[item.key];\r\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n                        item.isSelected = false;\r\n                        $scope.selectionManager.lastItem = item;\r\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n                    }\r\n                });\r\n\r\n                // bind reload function\r\n                var stopReloadTimeout;\r\n\r\n                $scope.setReloadTimeout = function () {\r\n                    var config = $scope.config || $scope.definition.config || {};\r\n\r\n\r\n                    var reloadPeriod = config.reloadPeriod;\r\n                    if (!isNaN(reloadPeriod) && (reloadPeriod * 1) !== 0) {\r\n                        if (angular.isDefined(stopReloadTimeout)) {\r\n                            $interval.cancel(stopReloadTimeout);\r\n                            stopReloadTimeout = undefined;\r\n                        }\r\n                        stopReloadTimeout = $interval($scope.reload, (reloadPeriod * 1000));\r\n                    } else if (stopReloadTimeout) {\r\n                        $interval.cancel(stopReloadTimeout);\r\n                    }\r\n                };\r\n\r\n                $scope.reload = function () {\r\n                    $scope.$broadcast('widgetReload');\r\n\r\n                    $scope.setReloadTimeout();\r\n                };\r\n\r\n                // verificacion de periodo de refresco\r\n                $scope.setReloadTimeout();\r\n\r\n                $scope.$on('$destroy', function () {\r\n                    adfDashboardCollapseExpand();\r\n                    adfWidgetEnterEditMode();\r\n                    adfIsEditMode();\r\n                    adfDashboardChanged();\r\n                    adfDashboardEditsCancelled();\r\n                    addItemToSelection();\r\n                    removeItemFromSelection();\r\n                    $interval.cancel(stopReloadTimeout);\r\n                });\r\n            },\r\n            compile: function () {\r\n\r\n                /**\r\n                 * use pre link, because link of widget-content\r\n                 * is executed before post link widget\r\n                 */\r\n                return {\r\n                    pre: preLink,\r\n                    post: postLink\r\n                };\r\n            }\r\n        };\r\n\r\n    });","\r\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n/**\r\n * The widget service provide helper functions to render widgets and their content.\r\n */\r\nangular.module('adf')\r\n  .factory('widgetService', function($http, $q, $sce, $templateCache, dashboard) {\r\n    'use strict';\r\n\r\n    function parseUrl(url) {\r\n      var parsedUrl = url;\r\n      if (url.indexOf('{widgetsPath}') >= 0) {\r\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\r\n                .replace('//', '/');\r\n        if (parsedUrl.indexOf('/') === 0) {\r\n          parsedUrl = parsedUrl.substring(1);\r\n        }\r\n      }\r\n      return parsedUrl;\r\n    }\r\n\r\n    var exposed = {};\r\n\r\n    exposed.getTemplate = function(widget){\r\n      var deferred = $q.defer();\r\n\r\n      if (widget.template) {\r\n        deferred.resolve(widget.template);\r\n      } else if (widget.templateUrl) {\r\n        // try to fetch template from cache\r\n        var tpl = $templateCache.get(widget.templateUrl);\r\n        if (tpl) {\r\n          deferred.resolve(tpl);\r\n        } else {\r\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\r\n          $http.get(url)\r\n               .success(function(response) {\r\n                 // put response to cache, with unmodified url as key\r\n                 $templateCache.put(widget.templateUrl, response);\r\n                 deferred.resolve(response);\r\n               })\r\n               .error(function() {\r\n                 deferred.reject('could not load template');\r\n               });\r\n        }\r\n      }\r\n\r\n      return deferred.promise;\r\n    };\r\n\r\n    return exposed;\r\n  });\r\n"]}