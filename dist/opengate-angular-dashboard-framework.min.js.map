{"version":3,"sources":["adf.js","column.js","dashboard.js","order-by-object-key.js","provider.js","row.js","structure-preview.js","widget-content.js","widget-service.js","widget.js","opengate-angular-dashboard-framework.js"],"names":["window","undefined","angular","module","value","directive","$log","$compile","$rootScope","adfTemplatePath","rowTemplate","dashboard","moveWidgetInColumn","$scope","column","evt","widgets","$apply","splice","newIndex","oldIndex","$broadcast","findWidget","index","widget","i","length","w","idEquals","wid","findColumn","model","rows","r","j","columns","c","cid","getId","el","id","getAttribute","addWidgetToColumn","targetColumn","from","sourceColumn","item","warn","removeWidgetFromColumn","applySortable","$element","sortable","Sortable","create","group","handle","ghostClass","animation","onAdd","onRemove","onUpdate","on","destroy","restrict","replace","scope","editMode","continuousEditMode","adfModel","options","templateUrl","link","col","isDefined","isArray","cloned","append","$timeout","$uibModal","$faIcons","stringToBoolean","string","toLowerCase","Boolean","copyWidgets","source","target","shift","push","fillStructure","root","counter","forEach","row","isUndefined","readColumns","changeStructure","structure","copy","createConfiguration","type","cfg","config","createWidget","wdgt","findFirstWidgetColumn","error","addNewWidgetToModel","name","forceToSave","unshift","isEditModeImmediate","edit","immediate","openEditMode","split","object","size","arr","key","createCategories","categories","category","createCategoriesList","categoryTags","categoriesTmp","idx","indexOf","transclude","collapsible","editable","maximizable","adfWidgetFilter","hideButtons","extraData","controller","getNewModalScope","$new","widgetFilter","structureName","$watch","oldVal","newVal","structures","title","titleTemplateUrl","editClass","deleteDashboard","dashData","toggleEditMode","openConfigWindow","modelCopy","editDashboardDialog","saveTemporalDashboard","temporal","adfToggleEditMode","$on","event","isNewDashboard","adfCancelEditMode","cancelEditMode","collapseAll","collapseExpandStatus","adfEditDashboardDialog","adfLaunchSearchingFromWidget","configFilter","adfWindowTimeChangedFromWidget","windowFilter","editDashboardScope","description","icon","availableIcons","list","adfEditTemplatePath","editTemplateUrl","instance","open","backdrop","keyboard","info","closeDialog","close","$destroy","adfOpenWidgetFromOther","internal_config","_config","merge","adfOpenModalWidgetFromOther","widgetType","fullScreenScope","definition","opts","modalSize","windowClass","persistDashboard","this","$parent","adfAddWidgetDialog","addWidgetDialog","addScope","isFunction","availableCategories","adfAddTemplatePath","addTemplateUrl","addWidget","changeThumbnail","images","_currThumb","_currImg","$attr","enableConfirmDelete","editing","filter","$filter","array","objectKey","provider","widgetsPath","messageTemplate","loadingTemplate","customWidgetTemplatePath","defaultApplyFunction","extend","reload","frameless","apply","path","template","templatePath","$get","Date","getTime","other","toString","columnTemplate","adjustRowHeight","container","height","style","prepareStructure","preview","selected","$q","widgetService","$controller","$injector","$translate","renderError","msg","html","compileWidget","currentScope","configChanged","_getWindowTime","newScope","to","moment","subtract","_d","content","extra","is_menu","menu","is_itemsPerPage","itemsPerPage","reloadData","renderWidget","then","translateMessage","getWindowTime","winTime","eval","rawdate","format","templateScope","selectionManager","base","resolvers","$tpl","getTemplate","resolve","promise","isString","get","invoke","all","locals","resolveAs","templateCtrl","controllerAs","children","data","contents","reason","widgetConfigChangedEvt","widgetReloadEvt","factory","$http","$sce","$templateCache","parseUrl","url","parsedUrl","substring","exposed","deferred","defer","tpl","getTrustedResourceUrl","success","response","put","reject","$interval","Filter","preLink","styleClass","fromJson","reloadPeriod","show_modal_footer","show_reload_config","widgetState","isCollapsed","collapsed","debug","postLink","_setReloadTimeout","stopReloadTimeout","cancel","deleteWidget","remove","deleteScope","deleteTemplateUrl","deleteDialog","print","isExecuteOperationEnabled","entityKey","oql","executeOperation","completeReload","sort","direction","toggleAdvanced","search","json","quick","fields","customFilter","v","toggleFilter","advanced","filterAvailable","showFilter","showFinalFilter","launchSearching","element","addCustomFilter","launchCustomFilter","and","like","JSON","stringify","deleteFilter","launchSearchingAdv","Object","keys","applyFilter","launchSearchingQuick","timeObj","enter","keycode","keyCode","which","customSelectors","getCustomSelectors","widgetSelectors","findFields","err","getcustomFilter","ifCustomFilter","showCustomFields","changeDirection","changeDefaultTab","debugQuery","parseQuery","toJson","unknownWords","autocomplete_options","suggest","suggest_field_delimited","selectedItems","currentSelection","isSelected","obj","totalSelected","manageSelectedItems","selectionScope","selectionConfig","manageItemsSelectedTemplate","restoreSelection","clearSelection","customOql","filterAction","operationType","saveChangesDialog","finalSelection","visible","selectedItemsLength","lastItem","createApplyPromise","result","when","editScope","saveDialog","validationError","applyFn","adfDashboardCollapseExpand","args","adfWidgetEnterEditMode","adfIsEditMode","adfDashboardChanged","adfDashboardEditsCancelled","widgetClasses","classes","openFullScreen","openFilter","openAboutScreen","modalInstance","$uibModalInstance","information","about","ok","selectedItem","saveWidgetScreen","wId","$emit","objectSelector","fileName","createQuickFilter","fieldsQuickSearch","criteria","_filter","or","field","operator","downloadCsv","extra_filter","scope_filter","final_filter","order","window_filter","onWindowTimeChanged","parse","trim","generateQR","addItemToSelection","removeItemFromSelection","compile","pre","post"],"mappings":"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","file":"opengate-angular-dashboard-framework.min.js","sourcesContent":["/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf', ['adf.provider', 'ui.bootstrap', 'opengate-angular-js'])\n    .value('adfTemplatePath', '../src/templates/')\n    .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\n    .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\n    .value('adfVersion', '<<adfVersion>>');","/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardColumn', function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\n    'use strict';\n\n    /**\n     * moves a widget in between a column\n     */\n    function moveWidgetInColumn($scope, column, evt){\n      var widgets = column.widgets;\n      // move widget and apply to scope\n      $scope.$apply(function(){\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\n      });\n    }\n\n    /**\n     * finds a widget by its id in the column\n     */\n    function findWidget(column, index){\n      var widget = null;\n      for (var i=0; i<column.widgets.length; i++){\n        var w = column.widgets[i];\n        if (dashboard.idEquals(w.wid,index)){\n          widget = w;\n          break;\n        }\n      }\n      return widget;\n    }\n\n    /**\n     * finds a column by its id in the model\n     */\n    function findColumn(model, index){\n      var column = null;\n      for (var i=0; i<model.rows.length; i++){\n        var r = model.rows[i];\n        for (var j=0; j<r.columns.length; j++){\n          var c = r.columns[j];\n          if (dashboard.idEquals(c.cid, index)){\n            column = c;\n            break;\n          } else if (c.rows){\n            column = findColumn(c, index);\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * get the adf id from an html element\n     */\n    function getId(el){\n      var id = el.getAttribute('adf-id');\n      return id ? id : '-1';\n    }\n\n    /**\n     * adds a widget to a column\n     */\n    function addWidgetToColumn($scope, model, targetColumn, evt){\n      // find source column\n      var cid = getId(evt.from);\n      var sourceColumn = findColumn(model, cid);\n\n      if (sourceColumn){\n        // find moved widget\n        var wid = getId(evt.item);\n        var widget = findWidget(sourceColumn, wid);\n\n        if (widget){\n          // add new item and apply to scope\n          $scope.$apply(function(){\n            if (!targetColumn.widgets) {\n              targetColumn.widgets = [];\n            }\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\n\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\n          });\n        } else {\n          $log.warn('could not find widget with id ' + wid);\n        }\n      } else {\n        $log.warn('could not find column with id ' + cid);\n      }\n    }\n\n    /**\n     * removes a widget from a column\n     */\n    function removeWidgetFromColumn($scope, column, evt){\n      // remove old item and apply to scope\n      $scope.$apply(function(){\n        column.widgets.splice(evt.oldIndex, 1);\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n      });\n    }\n\n    /**\n     * enable sortable\n     */\n    function applySortable($scope, $element, model, column){\n      // enable drag and drop\n      var el = $element[0];\n      var sortable = Sortable.create(el, {\n        group: 'widgets',\n        handle: '.adf-move',\n        ghostClass: 'placeholder',\n        animation: 150,\n        onAdd: function(evt){\n          addWidgetToColumn($scope, model, column, evt);\n        },\n        onRemove: function(evt){\n          removeWidgetFromColumn($scope, column, evt);\n        },\n        onUpdate: function(evt){\n          moveWidgetInColumn($scope, column, evt);\n        }\n      });\n\n      // destroy sortable on column destroy event\n      $element.on('$destroy', function () {\n        // check sortable element, before calling destroy\n        // see https://github.com/sdorra/angular-dashboard-framework/issues/118\n        if (sortable.el){\n          sortable.destroy();\n        }\n      });\n    }\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        column: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        adfModel: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\n      link: function ($scope, $element) {\n        // set id\n        var col = $scope.column;\n        if (!col.cid){\n          col.cid = dashboard.id();\n        }\n\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\n          $compile(rowTemplate)($scope, function(cloned) {\n            $element.append(cloned);\n          });\n        } else {\n          // enable drag and drop for widget only columns\n          applySortable($scope, $element, $scope.adfModel, col);\n        }\n      }\n    };\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @ngdoc directive\n * @name adf.directive:adfDashboard\n * @element div\n * @restrict EA\n * @scope\n * @description\n *\n * `adfDashboard` is a directive which renders the dashboard with all its\n * components. The directive requires a name attribute. The name of the\n * dashboard can be used to store the model.\n *\n * @param {string} name name of the dashboard. This attribute is required.\n * @param {boolean=} editable false to disable the editmode of the dashboard.\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\n * @param {string=} structure the default structure of the dashboard.\n * @param {object=} adfModel model object of the dashboard.\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\n *                   events during edit mode not reset it if edit mode is exited.\n * @param {boolean=} categories enable categories for the add widget dialog.\n */\n\nangular.module('adf')\n    .directive('adfDashboard', function ($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath, $faIcons) {\n        'use strict';\n\n        function stringToBoolean(string) {\n            switch (angular.isDefined(string) ? string.toLowerCase() : null) {\n                case 'true':\n                case 'yes':\n                case '1':\n                    return true;\n                case 'false':\n                case 'no':\n                case '0':\n                case null:\n                    return false;\n                default:\n                    return Boolean(string);\n            }\n        }\n\n        function copyWidgets(source, target) {\n            if (source.widgets && source.widgets.length > 0) {\n                var w = source.widgets.shift();\n                while (w) {\n                    target.widgets.push(w);\n                    w = source.widgets.shift();\n                }\n            }\n        }\n\n        /**\n         * Copy widget from old columns to the new model\n         * @param object root the model\n         * @param array of columns\n         * @param counter\n         */\n        function fillStructure(root, columns, counter) {\n            counter = counter || 0;\n\n            if (angular.isDefined(root.rows)) {\n                angular.forEach(root.rows, function (row) {\n                    angular.forEach(row.columns, function (column) {\n                        // if the widgets prop doesn't exist, create a new array for it.\n                        // this allows ui.sortable to do it's thing without error\n                        if (!column.widgets) {\n                            column.widgets = [];\n                        }\n\n                        // if a column exist at the counter index, copy over the column\n                        if (angular.isDefined(columns[counter])) {\n                            // do not add widgets to a column, which uses nested rows\n                            if (angular.isUndefined(column.rows)) {\n                                copyWidgets(columns[counter], column);\n                                counter++;\n                            }\n                        }\n\n                        // run fillStructure again for any sub rows/columns\n                        counter = fillStructure(column, columns, counter);\n                    });\n                });\n            }\n            return counter;\n        }\n\n        /**\n         * Read Columns: recursively searches an object for the 'columns' property\n         * @param object model\n         * @param array  an array of existing columns; used when recursion happens\n         */\n        function readColumns(root, columns) {\n            columns = columns || [];\n\n            if (angular.isDefined(root.rows)) {\n                angular.forEach(root.rows, function (row) {\n                    angular.forEach(row.columns, function (col) {\n                        columns.push(col);\n                        // keep reading columns until we can't any more\n                        readColumns(col, columns);\n                    });\n                });\n            }\n\n            return columns;\n        }\n\n        function changeStructure(model, structure) {\n            var columns = readColumns(model);\n            var counter = 0;\n\n            model.rows = angular.copy(structure.rows);\n\n            while (counter < columns.length) {\n                counter = fillStructure(model, columns, counter);\n            }\n        }\n\n        function createConfiguration(type) {\n            var cfg = {};\n            var config = dashboard.widgets[type].config;\n            if (config) {\n                cfg = angular.copy(config);\n            }\n            return cfg;\n        }\n\n        function createWidget(type) {\n            var wdgt = {};\n            var widget = dashboard.widgets[type];\n            if (widget) {\n                wdgt = angular.copy(widget);\n            }\n            return wdgt;\n        }\n\n        /**\n         * Find first widget column in model.\n         *\n         * @param dashboard model\n         */\n        function findFirstWidgetColumn(model) {\n            var column = null;\n            if (!angular.isArray(model.rows)) {\n                $log.error('model does not have any rows');\n                return null;\n            }\n            for (var i = 0; i < model.rows.length; i++) {\n                var row = model.rows[i];\n                if (angular.isArray(row.columns)) {\n                    for (var j = 0; j < row.columns.length; j++) {\n                        var col = row.columns[j];\n                        if (!col.rows) {\n                            column = col;\n                            break;\n                        }\n                    }\n                }\n                if (column) {\n                    break;\n                }\n            }\n            return column;\n        }\n\n        /**\n         * Adds the widget to first column of the model.\n         *\n         * @param dashboard model\n         * @param widget to add to model\n         * @param name name of the dashboard\n         */\n        function addNewWidgetToModel(model, widget, name, forceToSave) {\n            if (model) {\n                var column = findFirstWidgetColumn(model);\n                if (column) {\n                    if (!column.widgets) {\n                        column.widgets = [];\n                    }\n                    column.widgets.unshift(widget);\n\n                    // broadcast added event\n                    $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\n\n                    if (forceToSave) {\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\n                    }\n                } else {\n                    $log.error('could not find first widget column');\n                }\n            } else {\n                $log.error('model is undefined');\n            }\n        }\n\n        /**\n         * Checks if the edit mode of the widget should be opened immediately.\n         *\n         * @param widget type\n         */\n        function isEditModeImmediate(type) {\n            var widget = dashboard.widgets[type];\n            return widget && widget.edit && widget.edit.immediate;\n        }\n\n        /**\n         * Opens the edit mode of the specified widget.\n         *\n         * @param dashboard scope\n         * @param widget\n         */\n        function openEditMode($scope, widget) {\n            // wait some time before fire enter edit mode event\n            $timeout(function () {\n                $scope.$broadcast('adfWidgetEnterEditMode', widget);\n            }, 200);\n        }\n\n        /**\n         * Splits an object into an array multiple objects inside.\n         *\n         * @param object source object\n         * @param size size of array\n         *\n         * @return array of splitted objects\n         */\n        function split(object, size) {\n            var arr = [];\n            var i = 0;\n            angular.forEach(object, function (value, key) {\n                var index = i++ % size;\n                if (!arr[index]) {\n                    arr[index] = {};\n                }\n                arr[index][key] = value;\n            });\n            return arr;\n        }\n\n        /**\n         * Creates object with the category name as key and an array of widgets as value.\n         *\n         * @param widgets array of widgets\n         *\n         * @return array of categories\n         */\n        function createCategories(widgets) {\n            var categories = {};\n            angular.forEach(widgets, function (widget, key) {\n                var category = widget.category;\n                // if the widget has no category use a default one\n                if (!category) {\n                    category = 'ADF.CATEGORY.MISCELANOUS';\n                }\n                // push widget to category array\n                if (angular.isUndefined(categories[category])) {\n                    categories[category] = {\n                        widgets: {}\n                    };\n                }\n                categories[category].widgets[key] = widget;\n            });\n            return categories;\n        }\n\n        function createCategoriesList(widgets) {\n            var categories = [];\n            angular.forEach(widgets, function (widget, key) {\n                if (!widget.category) {\n                    widget.category = 'ADF.CATEGORY.MISCELLANEOUS';\n                }\n\n                if (!widget.categoryTags) {\n                    widget.categoryTags = 'ADF.CATEGORY.TAG.MISCELLANEOUS';\n                }\n                \n                var categoriesTmp = widget.categoryTags.split(',');\n\n                angular.forEach(categoriesTmp, function(category, idx) {\n                    // push widget to category array\n                    if (categories.indexOf(category) === -1) \n                        categories.push(category)\n                });\n                \n            });\n            return categories;\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            scope: {\n                structure: '@',\n                name: '@',\n                collapsible: '@',\n                editable: '@',\n                editMode: '@',\n                continuousEditMode: '=',\n                maximizable: '@',\n                adfModel: '=',\n                adfWidgetFilter: '=',\n                categories: '@',\n                hideButtons: '=',\n                extraData: '='\n            },\n            controller: function ($scope) {\n                var model = {};\n                var structure = {};\n                var widgetFilter = null;\n                var structureName = {};\n                var name = $scope.name;\n\n                // Watching for changes on adfModel\n                $scope.$watch('adfModel', function (oldVal, newVal) {\n                    // has model changed or is the model attribute not set\n                    if (newVal !== null || (oldVal === null && newVal === null)) {\n                        model = $scope.adfModel;\n                        widgetFilter = $scope.adfWidgetFilter;\n                        if (!model || !model.rows) {\n                            structureName = $scope.structure;\n                            structure = dashboard.structures[structureName];\n                            if (structure) {\n                                if (model) {\n                                    model.rows = angular.copy(structure).rows;\n                                } else {\n                                    model = angular.copy(structure);\n                                }\n                                model.structure = structureName;\n                            } else {\n                                $log.error('could not find structure ' + structureName);\n                            }\n                        }\n\n                        if (model) {\n                            if (!model.title) {\n                                model.title = 'ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD';\n                            }\n                            if (!model.titleTemplateUrl) {\n                                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\n                            }\n                            $scope.model = model;\n                        } else {\n                            $log.error('could not find or create model');\n                        }\n                    }\n                }, true);\n\n                // edit mode\n                $scope.editMode = false;\n                $scope.editClass = '';\n\n                function getNewModalScope() {\n                    var scope = $scope.$new();\n                    return scope;\n                }\n\n                $scope.deleteDashboard = function () {\n                    var dashData = {\n                        id: model.id,\n                        name: model.title\n                    };\n\n                    $rootScope.$broadcast('dashboardDelete', dashData);\n                };\n\n                $scope.toggleEditMode = function (openConfigWindow) {\n                    $scope.editMode = !$scope.editMode;\n                    if ($scope.editMode) {\n                        if (!$scope.continuousEditMode) {\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\n                            $rootScope.$broadcast('adfIsEditMode');\n                        }\n\n                        if (openConfigWindow) {\n                            $scope.editDashboardDialog();\n                        }\n                    }\n\n                    if (!$scope.editMode) {\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\n                    }\n                };\n\n                $scope.saveTemporalDashboard = function () {\n                    delete model.temporal;\n                    $rootScope.$broadcast('adfDashboardChanged', name, model);\n                };\n\n                var adfToggleEditMode = $scope.$on('adfToggleEditMode', function (event, isNewDashboard) {\n                    if (isNewDashboard) {\n                        $scope.toggleEditMode(true);\n                    } else {\n                        $scope.toggleEditMode();\n                    }\n                });\n\n                var adfCancelEditMode = $scope.$on('adfCancelEditMode', function (event, isNewDashboard) {\n                    if ($scope.editMode) {\n                        $scope.cancelEditMode();\n                    }\n                });\n\n                $scope.collapseAll = function (collapseExpandStatus) {\n                    $rootScope.$broadcast('adfDashboardCollapseExpand', {\n                        collapseExpandStatus: collapseExpandStatus\n                    });\n                };\n\n                $scope.cancelEditMode = function () {\n                    $scope.editMode = false;\n                    if (!$scope.continuousEditMode && ($scope.modelCopy !== $scope.adfModel)) {\n                        $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\n                    }\n                    $rootScope.$broadcast('adfDashboardEditsCancelled');\n                };\n\n                var adfEditDashboardDialog = $scope.$on('adfEditDashboardDialog', function (event, isNewDashboard) {\n                    if ($scope.editMode) {\n                        $scope.editDashboardDialog();\n                    }\n                });\n\n                var adfLaunchSearchingFromWidget = $scope.$on('adfLaunchSearchingFromWidget', function (event, widget, configFilter) {\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\n                });\n                var adfWindowTimeChangedFromWidget = $scope.$on('adfWindowTimeChangedFromWidget', function (event, widget, windowFilter) {\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\n                });\n\n                // edit dashboard settings\n                $scope.editDashboardDialog = function () {\n                    var editDashboardScope = getNewModalScope();\n                    // create a copy of the title, to avoid changing the title to\n                    // \"dashboard\" if the field is empty\n                    editDashboardScope.copy = {\n                        title: (model.title !== 'ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD' ? model.title : ''),\n                        description: model.description,\n                        icon: model.icon ? model.icon : 'fa-tachometer'\n                    };\n\n                    // pass icon list\n                    editDashboardScope.availableIcons = $faIcons.list();\n\n                    // pass dashboard structure to scope\n                    editDashboardScope.structures = dashboard.structures;\n\n                    // pass split function to scope, to be able to display structures in multiple columns\n                    editDashboardScope.split = split;\n\n                    var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\n                    if (model.editTemplateUrl) {\n                        adfEditTemplatePath = model.editTemplateUrl;\n                    }\n                    var instance = $uibModal.open({\n                        scope: editDashboardScope,\n                        templateUrl: adfEditTemplatePath,\n                        backdrop: 'static',\n                        keyboard: false,\n                        size: 'lg'\n                    });\n\n                    editDashboardScope.changeStructure = function (name, structure) {\n                        $log.info('change structure to ' + name);\n                        changeStructure(model, structure);\n                        if (model.structure !== name) {\n                            model.structure = name;\n                        }\n                    };\n                    editDashboardScope.closeDialog = function () {\n                        // copy the new title back to the model\n                        model.title = editDashboardScope.copy.title;\n                        model.description = editDashboardScope.copy.description;\n                        model.icon = editDashboardScope.copy.icon;\n\n                        // close modal and destroy the scope\n                        instance.close();\n                        editDashboardScope.$destroy();\n                    };\n                };\n\n                var adfOpenWidgetFromOther = $scope.$on('adfOpenWidgetFromOther', function (event, widget, config) {\n                    var internal_config = createConfiguration(widget);\n                    var _config = angular.merge({}, internal_config, config);\n                    var w = {\n                        type: widget,\n                        config: _config,\n                        title: _config.title\n                    };\n                    addNewWidgetToModel(model, w, name, !$scope.editMode);\n                });\n\n                var adfOpenModalWidgetFromOther = $scope.$on('adfOpenModalWidgetFromOther', function (event, widgetType, config) {\n                    var widget = createWidget(widgetType);\n                    widget.config = angular.merge({}, widget.config, config);\n                    widget.type = widgetType;\n                    if (widget.config.title) {\n                        widget.title = widget.config.title;\n                    }\n                    var fullScreenScope = $scope.$new();\n                    fullScreenScope.definition = fullScreenScope.widget = widget;\n                    var opts = {\n                        scope: fullScreenScope,\n                        templateUrl: adfTemplatePath + 'widget-fullscreen.html',\n                        size: fullScreenScope.definition.modalSize || 'lg', // 'sm', 'lg'\n                        backdrop: 'static',\n                        windowClass: (fullScreenScope.definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n                    };\n\n                    fullScreenScope.persistDashboard = function () {\n                        $rootScope.$broadcast('adfOpenWidgetFromOther', this.$parent.widget.type, this.$parent.widget.config);\n                        this.closeDialog();\n                    }\n\n                    var instance = $uibModal.open(opts);\n                    fullScreenScope.closeDialog = function () {\n                        instance.close();\n                        fullScreenScope.$destroy();\n                    };\n\n                });\n\n                var adfAddWidgetDialog = $scope.$on('adfAddWidgetDialog', function (event, isNewDashboard) {\n                    if (!model.temporal && model.editable) {\n                        if (!$scope.editMode) {\n                            $scope.editMode = true;\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\n                            $rootScope.$broadcast('adfIsEditMode');\n                        }\n\n                        $scope.addWidgetDialog();\n                    }\n                });\n\n                // add widget dialog\n                $scope.addWidgetDialog = function () {\n                    var addScope = getNewModalScope();\n                    var widgets;\n                    if (angular.isFunction(widgetFilter)) {\n                        widgets = {};\n                        angular.forEach(dashboard.widgets, function (widget, type) {\n                            if (widgetFilter(widget, type, model)) {\n                                widgets[type] = widget;\n                            }\n                        });\n                    } else {\n                        widgets = dashboard.widgets;\n                    }\n                    addScope.widgets = widgets;\n\n                    angular.forEach(addScope.widgets, function (widget, type) {\n                        widget.key = type;\n                        if (!widget.category) {\n                            widget.category = 'Miscellaneous';\n                        }\n                    });\n                    \n                    // pass createCategories function to scope, if categories option is enabled\n                    if ($scope.options.categories) {\n                        addScope.createCategories = createCategories;\n                    } else {\n                        addScope.availableCategories = createCategoriesList(widgets);\n                    }\n\n                    var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\n                    if (model.addTemplateUrl) {\n                        adfAddTemplatePath = model.addTemplateUrl;\n                    }\n\n                    var opts = {\n                        scope: addScope,\n                        templateUrl: adfAddTemplatePath,\n                        backdrop: 'static',\n                        size: 'lg'\n                    };\n\n                    var instance = $uibModal.open(opts);\n                    addScope.widgetFilter = {};\n                    addScope.addWidget = function (widget) {\n                        var w = {\n                            type: widget,\n                            config: createConfiguration(widget)\n                        };\n                        addNewWidgetToModel(model, w, name);\n                        // close and destroy\n                        instance.close();\n                        addScope.$destroy();\n\n                        // check for open edit mode immediately\n                        if (isEditModeImmediate(widget)) {\n                            openEditMode($scope, w);\n                        }\n                    };\n\n                    addScope.changeThumbnail = function (widget) {\n                        if ( widget.images) {\n                            if (angular.isUndefined(widget._currThumb)) {\n                                widget._currThumb = 1;\n                            } else {\n                                widget._currThumb+=1;\n                            }\n                            \n                            \n                            if (widget._currThumb >= widget.images.length) {\n                                widget._currThumb = 0;\n                            } \n    \n                            widget._currImg = widget.images[widget._currThumb];\n                        }                        \n                    };\n\n                    addScope.closeDialog = function () {\n                        // close and destroy\n                        instance.close();\n                        addScope.$destroy();\n                    };\n                };\n\n                $scope.addNewWidgetToModel = addNewWidgetToModel;\n\n                $scope.$on('destroy', function () {\n                    adfLaunchSearchingFromWidget();\n                    adfWindowTimeChangedFromWidget();\n                    adfToggleEditMode();\n                    adfOpenWidgetFromOther();\n                    adfOpenModalWidgetFromOther();\n                    adfCancelEditMode();\n                    adfAddWidgetDialog();\n                    adfEditDashboardDialog();\n                });\n            },\n            link: function ($scope, $element, $attr) {\n                // pass options to scope\n                var options = {\n                    name: $attr.name,\n                    editable: true,\n                    enableConfirmDelete: stringToBoolean($attr.enableConfirmDelete),\n                    maximizable: stringToBoolean($attr.maximizable),\n                    collapsible: stringToBoolean($attr.collapsible),\n                    categories: stringToBoolean($attr.categories),\n                    extraData: {}\n                };\n\n                if (angular.isDefined($attr.editable)) {\n                    options.editable = stringToBoolean($attr.editable);\n                }\n\n                if (angular.isDefined($scope.extraData)) {\n                    options.extraData = $scope.extraData;\n                }\n\n                options.extraData.editing = $scope.editMode;\n\n                $scope.options = options;\n            },\n            templateUrl: adfTemplatePath + 'dashboard.html'\n        };\n    });","/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .filter('adfOrderByObjectKey', function($filter) {\n    'use strict';\n\n    return function(item, key){\n      var array = [];\n      angular.forEach(item, function(value, objectKey){\n        value[key] = objectKey;\n        array.push(value);\n      });\n      return $filter('orderBy')(array, key);\n    };\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\n/**\n * @ngdoc object\n * @name adf.dashboardProvider\n * @description\n *\n * The dashboardProvider can be used to register structures and widgets.\n */\nangular.module('adf.provider', [])\n    .provider('dashboard', function () {\n\n        var widgets = {};\n        var widgetsPath = '';\n        var structures = {};\n        var messageTemplate = '<div class=\"alert alert-primary\">{}</div>';\n        var loadingTemplate = '\\\n      <div class=\"progress progress-striped active\">\\n\\\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\n          <span class=\"sr-only\" translate>FORM.MSG.LOADING ...</span>\\n\\\n        </div>\\n\\\n      </div>';\n        var customWidgetTemplatePath = null;\n\n        // default apply function of widget.edit.apply\n        var defaultApplyFunction = function () {\n            return true;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#widget\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Registers a new widget.\n         *\n         * @param {string} name of the widget\n         * @param {object} widget to be registered.\n         *\n         *   Object properties:\n         *\n         *   - `title` - `{string=}` - The title of the widget.\n         *   - `description` - `{string=}` - Description of the widget.\n         *   - `category` - `{string=}` - Category of the widget.\n         *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\n         *   - `config` - `{object}` - Predefined widget configuration.\n         *   - `controller` - `{string=|function()=}` - Controller fn that should be\n         *      associated with newly created scope of the widget or the name of a\n         *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\n         *      if passed as a string.\n         *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\n         *      published to scope under the `controllerAs` name.\n         *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\n         *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\n         *   - `template` - `{string=|function()=}` - html template as a string.\n         *   - `templateUrl` - `{string=}` - path to an html template.\n         *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\n         *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n         *      be injected into the controller. If any of these dependencies are promises, the widget\n         *      will wait for them all to be resolved or one to be rejected before the controller is\n         *      instantiated.\n         *      If all the promises are resolved successfully, the values of the resolved promises are\n         *      injected.\n         *\n         *      The map object is:\n         *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n         *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n         *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\n         *        and the return value is treated as the dependency. If the result is a promise, it is\n         *        resolved before its value is injected into the controller.\n         *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n         *      on the scope of the widget.\n         *   - `edit` - `{object}` - Edit modus of the widget.\n         *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n         *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\n         *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n         *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\n         *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\n         *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n         *        on the scope of the widget.\n         *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\n         *        Default is true.\n         *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\n         *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\n         *        The function have to return a boolean or an promise which can be resolved to a boolean.\n         *        The function can use injection.\n         *\n         * @returns {Object} self\n         */\n        this.widget = function (name, widget) {\n            var w = angular.extend({\n                reload: false,\n                frameless: false\n            }, widget);\n            if (w.edit) {\n                var edit = {\n                    reload: true,\n                    immediate: false,\n                    apply: defaultApplyFunction\n                };\n                angular.extend(edit, w.edit);\n                w.edit = edit;\n            }\n            widgets[name] = w;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#widgetsPath\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Sets the path to the directory which contains the widgets. The widgets\n         * path is used for widgets with a templateUrl which contains the\n         * placeholder {widgetsPath}. The placeholder is replaced with the\n         * configured value, before the template is loaded, but the template is\n         * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\n         * The default value of widgetPaths is ''.\n         *\n         *\n         * @param {string} path to the directory which contains the widgets\n         *\n         * @returns {Object} self\n         */\n        this.widgetsPath = function (path) {\n            widgetsPath = path;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#structure\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Registers a new structure.\n         *\n         * @param {string} name of the structure\n         * @param {object} structure to be registered.\n         *\n         *   Object properties:\n         *\n         *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\n         *     - `styleClass` - `{string}` - CSS Class of the row.\n         *     - `columns` - `{Array.<Object>}` - Columns of the row.\n         *       - `styleClass` - `{string}` - CSS Class of the column.\n         *\n         * @returns {Object} self\n         */\n        this.structure = function (name, structure) {\n            structures[name] = structure;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#messageTemplate\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the template for messages.\n         *\n         * @param {string} template for messages.\n         *\n         * @returns {Object} self\n         */\n        this.messageTemplate = function (template) {\n            messageTemplate = template;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#loadingTemplate\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the template which is displayed as\n         * long as the widget resources are not resolved.\n         *\n         * @param {string} template loading template\n         *\n         * @returns {Object} self\n         */\n        this.loadingTemplate = function (template) {\n            loadingTemplate = template;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#customWidgetTemplatePath\n         * @propertyOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the container template for the widgets\n         *\n         * @param {string} path to the custom widget template\n         *\n         * @returns {Object} self\n         */\n        this.customWidgetTemplatePath = function (templatePath) {\n            customWidgetTemplatePath = templatePath;\n            return this;\n        };\n\n        /**\n         * @ngdoc service\n         * @name adf.dashboard\n         * @description\n         *\n         * The dashboard holds all options, structures and widgets.\n         *\n         * @property {Array.<Object>} widgets Array of registered widgets.\n         * @property {string} widgetsPath Default path for widgets.\n         * @property {Array.<Object>} structures Array of registered structures.\n         * @property {string} messageTemplate Template for messages.\n         * @property {string} loadingTemplate Template for widget loading.\n         * * @property {string} customWidgetTemplatePath Changes the container template for the widgets\n         *\n         * @returns {Object} self\n         */\n        this.$get = function () {\n            var cid = 0;\n\n            return {\n                widgets: widgets,\n                widgetsPath: widgetsPath,\n                structures: structures,\n                messageTemplate: messageTemplate,\n                loadingTemplate: loadingTemplate,\n                customWidgetTemplatePath: customWidgetTemplatePath,\n\n                /**\n                 * @ngdoc method\n                 * @name adf.dashboard#id\n                 * @methodOf adf.dashboard\n                 * @description\n                 *\n                 * Creates an ongoing numeric id. The method is used to create ids for\n                 * columns and widgets in the dashboard.\n                 */\n                id: function () {\n                    return new Date().getTime() + '-' + (++cid);\n                },\n\n                /**\n                 * @ngdoc method\n                 * @name adf.dashboard#idEqual\n                 * @methodOf adf.dashboard\n                 * @description\n                 *\n                 * Checks if the given ids are equal.\n                 *\n                 * @param {string} id widget or column id\n                 * @param {string} other widget or column id\n                 */\n                idEquals: function (id, other) {\n                    // use toString, because old ids are numbers\n                    return ((id) && (other)) && (id.toString() === other.toString());\n                }\n            };\n        };\n\n    });","/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardRow', function ($compile, adfTemplatePath, columnTemplate) {\n    'use strict';\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        row: '=',\n        adfModel: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\n      link: function($scope, $element) {\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\n          $compile(columnTemplate)($scope, function(cloned) {\n            $element.append(cloned);\n          });\n        }\n      }\n    };\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\n/* global angular */\nangular.module('adf')\n  .directive('adfStructurePreview', function(adfTemplatePath) {\n\n    function adjustRowHeight(container){\n      if (container.rows && container.rows.length > 0){\n        var height = 100 / container.rows.length;\n        angular.forEach(container.rows, function(row){\n          row.style = {\n            height: height + '%'\n          }\n\n          if (row.columns){\n            angular.forEach(row.columns, function(column){\n              adjustRowHeight(column);\n            });\n          }\n        });\n      }\n    }\n\n    function prepareStructure($scope){\n      var structure = angular.copy($scope.structure);\n      adjustRowHeight(structure);\n      $scope.preview = structure;\n    }\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        name: '=',\n        structure: '=',\n        selected: '='\n      },\n      templateUrl: adfTemplatePath + 'structure-preview.html',\n      link: prepareStructure\n    };\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf')\n    .directive('adfWidgetContent', function ($log, $q, widgetService,\n        $compile, $controller, $injector, dashboard, $translate) {\n\n        function renderError($element, msg) {\n            $log.warn(msg);\n            $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\n        }\n\n        function compileWidget($scope, $element, currentScope, configChanged) {\n            var model = $scope.model;\n            var content = $scope.content;\n\n            var extra = $scope.extra;\n\n            var newScope = currentScope;\n            if (!model) {\n                $translate('ADF.ERROR.MODEL_IS_UNDEFINED').then(function (translateMessage) {\n                    renderError($element, translateMessage);\n                });\n            } else if (!content) {\n                if (model.title) {\n                    $translate('ADF.ERROR.WIDGET_FOR_DEPRECTATED', {\n                        title: model.title\n                    }).then(function (translateMessage) {\n                        renderError($element, translateMessage);\n                    });\n                } else {\n                    $translate('ADF.ERROR.WIDGET_DEPRECTATED').then(function (translateMessage) {\n                        renderError($element, translateMessage);\n                    });\n                }\n            } else {\n                if (newScope) {\n                    var is_menu = newScope.menu !== undefined && newScope.menu !== null;\n                    var is_itemsPerPage = newScope.itemsPerPage !== undefined && newScope.itemsPerPage !== null;\n                    if (is_menu || is_itemsPerPage || configChanged || !angular.isFunction(newScope.reloadData)) {\n                        newScope = renderWidget($scope, $element, currentScope, model, content, extra);\n                    } else {\n                        newScope.reloadData();\n                    }\n                } else {\n                    newScope = renderWidget($scope, $element, currentScope, model, content, extra);\n                }\n            }\n\n            function _getWindowTime(type) {\n                if (type === \"custom\") {\n                    return {\n                        from: newScope.config.windowFilter.from,\n                        to: newScope.config.windowFilter.to\n                    }\n                }\n                var from = window.moment().subtract(1, type);\n                return {\n                    from: from._d\n                };\n            }\n\n            if (newScope) {\n                if (newScope.config) {\n                    newScope.config.getWindowTime = function () {\n                        var windowFilter = newScope.config.windowFilter;\n                        if (windowFilter && windowFilter.type) {\n                            var winTime = _getWindowTime(windowFilter.type);\n                            /* jshint ignore:start */\n                            if (!window.eval(newScope.config.windowFilter.rawdate)) {\n                                for (var key in winTime) {\n                                    winTime[key] = window.moment(winTime[key]).format();\n                                }\n                                winTime['rawdate'] = true;\n                            }\n                            /* jshint ignore:end */\n                            return winTime;\n                        }\n                    }\n                }\n\n                if (extra) {\n                    newScope.editing = extra.editing ? true : false;\n                    newScope.extraData = extra;\n                }\n            }\n            return newScope;\n        }\n\n        function renderWidget($scope, $element, currentScope, model, content, extra) {\n            // display loading template\n            $element.html(dashboard.loadingTemplate);\n\n            // create new scope\n            var templateScope = $scope.$new();\n\n            // pass config object to scope\n            if (!model.config) {\n                model.config = {};\n            }\n\n            templateScope.config = model.config;\n            templateScope.editing = extra && extra.editing;\n\n            if (extra) {\n                templateScope.extra = extra;\n            }\n\n            templateScope.selectionManager = (currentScope && currentScope.selectionManager) ? currentScope.selectionManager : undefined;\n\n            // local injections\n            var base = {\n                $scope: templateScope,\n                widget: model,\n                config: model.config\n            };\n\n            // get resolve promises from content object\n            var resolvers = {};\n            resolvers.$tpl = widgetService.getTemplate(content);\n            if (content.resolve) {\n                angular.forEach(content.resolve, function (promise, key) {\n                    if (angular.isString(promise)) {\n                        resolvers[key] = $injector.get(promise);\n                    } else {\n                        resolvers[key] = $injector.invoke(promise, promise, base);\n                    }\n                });\n            }\n\n            // resolve all resolvers\n            $q.all(resolvers).then(function (locals) {\n                angular.extend(locals, base);\n\n                // pass resolve map to template scope as defined in resolveAs\n                if (content.resolveAs) {\n                    templateScope[content.resolveAs] = locals;\n                }\n\n                // compile & render template\n                var template = locals.$tpl;\n                $element.html(template);\n                if (content.controller) {\n                    var templateCtrl = $controller(content.controller, locals);\n                    if (content.controllerAs) {\n                        templateScope[content.controllerAs] = templateCtrl;\n                    }\n                    $element.children().data('$ngControllerController', templateCtrl);\n                }\n                $compile($element.contents())(templateScope);\n            }, function (reason) {\n                // handle promise rejection\n                var msg = 'ADF.ERROR.COULD_NOT_RESOLVE_ALL_PROMISSES';\n                $translate(msg, {\n                    reason: (reason ? \": \" + reason : reason)\n                }).then(function (translateMessage) {\n                    renderError($element, translateMessage);\n                });\n            });\n\n            // destroy old scope\n            if (currentScope) {\n                currentScope.$destroy();\n            }\n\n            return templateScope;\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            scope: {\n                model: '=',\n                content: '=',\n                extra: '='\n            },\n            link: function ($scope, $element) {\n                var currentScope = compileWidget($scope, $element, null);\n                var widgetConfigChangedEvt = $scope.$on('widgetConfigChanged', function () {\n                    currentScope = compileWidget($scope, $element, currentScope, true);\n                });\n\n                var widgetReloadEvt = $scope.$on('widgetReload', function () {\n                    currentScope = compileWidget($scope, $element, currentScope, false);\n                });\n\n                $scope.$on('destroy', function () {\n                    widgetConfigChangedEvt();\n                    widgetReloadEvt();\n                });\n            }\n        };\n    });","\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/**\n * The widget service provide helper functions to render widgets and their content.\n */\nangular.module('adf')\n  .factory('widgetService', function($http, $q, $sce, $templateCache, dashboard) {\n    'use strict';\n\n    function parseUrl(url) {\n      var parsedUrl = url;\n      if (url.indexOf('{widgetsPath}') >= 0) {\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\n                .replace('//', '/');\n        if (parsedUrl.indexOf('/') === 0) {\n          parsedUrl = parsedUrl.substring(1);\n        }\n      }\n      return parsedUrl;\n    }\n\n    var exposed = {};\n\n    exposed.getTemplate = function(widget){\n      var deferred = $q.defer();\n\n      if (widget.template) {\n        deferred.resolve(widget.template);\n      } else if (widget.templateUrl) {\n        // try to fetch template from cache\n        var tpl = $templateCache.get(widget.templateUrl);\n        if (tpl) {\n          deferred.resolve(tpl);\n        } else {\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\n          $http.get(url)\n               .success(function(response) {\n                 // put response to cache, with unmodified url as key\n                 $templateCache.put(widget.templateUrl, response);\n                 deferred.resolve(response);\n               })\n               .error(function() {\n                 deferred.reject('could not load template');\n               });\n        }\n      }\n\n      return deferred.promise;\n    };\n\n    return exposed;\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf')\n    .directive('adfWidget', function($injector, $q, $log, $uibModal, $rootScope, $interval, dashboard, adfTemplatePath, Filter) {\n        function preLink($scope) {\n            var definition = $scope.definition;\n\n            if (definition) {\n                var w = dashboard.widgets[definition.type];\n                if (w) {\n                    // pass title\n                    if (!definition.title) {\n                        definition.title = w.title;\n                    }\n\n                    if (!definition.titleTemplateUrl) {\n                        definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\n                        if (w.titleTemplateUrl) {\n                            definition.titleTemplateUrl = w.titleTemplateUrl;\n                        }\n                    }\n\n                    if (!definition.editTemplateUrl) {\n                        definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\n                        if (w.editTemplateUrl) {\n                            definition.editTemplateUrl = w.editTemplateUrl;\n                        }\n                    }\n\n                    if (!definition.titleTemplateUrl) {\n                        definition.frameless = w.frameless;\n                    }\n\n                    if (!definition.styleClass) {\n                        definition.styleClass = w.styleClass;\n                    }\n\n                    // set id for sortable\n                    if (!definition.wid) {\n                        definition.wid = dashboard.id();\n                    }\n\n                    // pass copy of widget to scope\n                    $scope.widget = angular.copy(w);\n\n                    // create config object\n                    var config = definition.config;\n                    if (config) {\n                        if (angular.isString(config)) {\n                            config = angular.fromJson(config);\n                        }\n                    } else {\n                        config = {};\n                    }\n\n                    if (!config.reloadPeriod) {\n                        config.reloadPeriod = \"0\";\n                    }\n\n                    if (typeof $scope.widget.show_modal_footer === \"undefined\") {\n                        $scope.widget.show_modal_footer = true;\n                    }\n\n                    if (typeof $scope.widget.show_reload_config === \"undefined\") {\n                        $scope.widget.show_reload_config = true;\n                    }\n\n                    // pass config to scope\n                    $scope.config = config;\n\n                    // collapse exposed $scope.widgetState property\n                    if (!$scope.widgetState) {\n                        $scope.widgetState = {};\n                        $scope.widgetState.isCollapsed = (w.collapsed === true) ? w.collapsed : false;\n                    }\n\n                } else {\n                    $log.warn('could not find widget ' + definition.type);\n                }\n            } else {\n                $log.debug('definition not specified, widget was probably removed');\n            }\n        }\n\n        function postLink($scope, $element) {\n            var definition = $scope.definition;\n            if (!definition) {\n                $log.debug('widget not found');\n                return;\n            }\n            if (!$scope.config) {\n                $scope.config = {};\n            }\n\n            var config = $scope.config;\n\n            // bind close function\n            var deleteWidget = function() {\n                var column = $scope.col;\n                if (column) {\n                    var index = column.widgets.indexOf(definition);\n                    if (index >= 0) {\n                        column.widgets.splice(index, 1);\n                    }\n                }\n                $element.remove();\n                $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n            };\n\n            $scope.remove = function() {\n                if ($scope.options.enableConfirmDelete) {\n                    var deleteScope = $scope.$new();\n\n                    var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\n                    if (definition.deleteTemplateUrl) {\n                        deleteTemplateUrl = definition.deleteTemplateUrl;\n                    }\n                    var opts = {\n                        scope: deleteScope,\n                        templateUrl: deleteTemplateUrl,\n                        backdrop: 'static'\n                    };\n                    var instance = $uibModal.open(opts);\n\n                    deleteScope.closeDialog = function() {\n                        instance.close();\n                        deleteScope.$destroy();\n                    };\n                    deleteScope.deleteDialog = function() {\n                        deleteWidget();\n                        deleteScope.closeDialog();\n                    };\n                } else {\n                    deleteWidget();\n                }\n            };\n\n\n            $scope.print = function() {\n                if (!$scope.editMode) {\n                    $scope.$broadcast('widgetPrint');\n                }\n            }\n\n            $scope.isExecuteOperationEnabled = function() {\n\n                if (config.entityKey)\n                    return true;\n                var filter = config.filter;\n                if (typeof filter === \"string\") {\n                    return filter.length > 0;\n                }\n                if (typeof filter === \"object\") {\n                    return filter.value.length > 2 && filter.oql;\n                }\n                return false;\n            }\n\n            $scope.executeOperation = function() {\n                if (!$scope.editMode) {\n\n                    $scope.$parent.$broadcast('widgetExecuteOperation');\n                }\n            };\n\n            // bind reload function\n            var stopReloadTimeout;\n\n            function _setReloadTimeout() {\n                if (config && config.reloadPeriod && config.reloadPeriod !== \"0\") {\n                    if (angular.isDefined(stopReloadTimeout)) {\n                        $interval.cancel(stopReloadTimeout)\n                        stopReloadTimeout = undefined;\n                    };\n                    stopReloadTimeout = $interval($scope.reload, (config.reloadPeriod * 1000));\n                }\n            }\n\n            $scope.reload = function(completeReload) {\n                if (completeReload) {\n                    $scope.$broadcast('widgetReload', completeReload);\n                } else {\n                    $scope.$broadcast('widgetReload');\n                }\n\n                _setReloadTimeout();\n            };\n\n            // verificacion de periodo de refresco\n            _setReloadTimeout();\n\n            $element.on('$destroy', function() {\n                $interval.cancel(stopReloadTimeout);\n            });\n\n            $scope.filter = {\n                value: \"\"\n            };\n            $scope.sort = {\n                value: \"\",\n                direction: \"\"\n            };\n\n            $scope.toggleAdvanced = 1;\n            var filter = config.filter;\n            if (typeof filter === \"object\" && filter.oql && filter.oql.length > 2) {\n                $scope.search = {\n                    oql: filter.oql,\n                    json: filter.value\n                };\n                $scope.toggleAdvanced = 0;\n            } else if (typeof filter === \"string\") {\n                $scope.search = {\n                    quick: filter\n                };\n                $scope.toggleAdvanced = 1;\n            } else if (typeof filter === \"object\" && filter.fields) {\n                $scope.search = {\n                    customFilter: filter.fields\n                };\n                $scope.search.fields = [];\n                angular.forEach(filter.fields, function(v, key) {\n                    $scope.search.fields.push(v.name);\n                });\n                $scope.toggleAdvanced = 2;\n            } else {\n                $scope.search = {\n                    quick: filter = \"\"\n                };\n            }\n\n            $scope.toggleFilter = function(advanced) {\n                $scope.toggleAdvanced = advanced;\n            };\n            $scope.filterAvailable = false;\n            $scope.showFilter = function() {\n                $scope.filterAvailable = $scope.filterAvailable === true ? false : true;\n            };\n\n            $scope.showFinalFilter = false;\n\n            $scope.launchSearching = function() {\n                var widget = {\n                    definition: definition,\n                    element: $element\n                };\n\n                $rootScope.$broadcast('adfLaunchSearchingFromWidget', widget, $scope.config.filter);\n                $scope.reload(true);\n            }\n            $scope.addCustomFilter = function(key) {\n                $scope.search.customFilter = $scope.search.customFilter ? $scope.search.customFilter : [];\n                $scope.search.customFilter.push({\n                    name: key,\n                    value: ''\n                });\n            }\n\n            $scope.launchCustomFilter = function() {\n                if ($scope.search.customFilter && $scope.search.customFilter.length > 0) {\n                    $scope.search.oql = $scope.search.json = '';\n\n                    $scope.config.filter = {\n                        value: {\n                            and: []\n                        },\n                        fields: $scope.search.customFilter\n                    }\n                    angular.forEach($scope.search.customFilter, function(v, key) {\n                        if (v.value) {\n                            var like = {};\n                            like[v.name] = v.value;\n                            $scope.config.filter.value.and.push({\n                                'like': like\n                            });\n                        }\n\n                    });\n                    $scope.config.filter.value = JSON.stringify($scope.config.filter.value);\n                }\n\n                $scope.launchSearching();\n            }\n\n\n\n            $scope.deleteFilter = function(value, model) {\n                angular.forEach($scope.search.customFilter, function(v, key) {\n                    if (v.name === value) {\n                        $scope.search.customFilter.splice(key, 1);\n                    }\n                });\n                if ($scope.search.customFilter.length === 0) {\n                    $scope.config.filter = {};\n                }\n            };\n\n\n            $scope.launchSearchingAdv = function() {\n                $scope.search.quick = '';\n                if ($scope.search.json === '' || $scope.search.json === '{}' || (!angular.isString($scope.search.json) && Object.keys($scope.search.json).length === 0)) {\n                    $scope.config.filter = {\n                        oql: '',\n                        value: ''\n                    };\n                } else {\n                    $scope.config.filter = {\n                        oql: $scope.search.oql,\n                        value: $scope.search.json\n                    };\n                }\n                $scope.launchSearching();\n\n            }\n\n            $scope.applyFilter = function(event) {\n                $scope.launchSearching();\n            }\n\n            $scope.launchSearchingQuick = function() {\n                $scope.search.oql = $scope.search.json = '';\n                $scope.config.filter = $scope.search.quick;\n                $scope.launchSearching();\n            }\n\n            var windowTimeChanged = $scope.$on('onWindowTimeChanged', function(event, timeObj) {\n                $scope.config.windowFilter = timeObj ? timeObj : (config.windowFilter ? {} : timeObj);\n                var widget = {\n                    definition: definition,\n                    element: $element\n                }\n                $rootScope.$broadcast('adfWindowTimeChangedFromWidget', widget, $scope.config.windowFilter);\n                $scope.reload();\n            });\n\n            $scope.enter = function(event) {\n                var keycode = (event.keyCode ? event.keyCode : event.which);\n                if (keycode === 13) {\n                    if ($scope.toggleAdvanced === 0)\n                        $scope.launchSearchingAdv();\n                    if ($scope.toggleAdvanced === 1)\n                        $scope.launchSearchingQuick();\n                    if ($scope.toggleAdvanced === 2)\n                        $scope.launchCustomFilter();\n\n                }\n                if (keycode === 19) {\n                    $scope.showFinalFilter = $scope.showFinalFilter === false ? true : false;\n                }\n            }\n\n\n            $scope.customSelectors = [];\n            $scope.getCustomSelectors = function() {\n                if ($scope.config.customSelectors) {\n                    $scope.customSelectors = $scope.config.customSelectors;\n                } else {\n                    config.widgetSelectors().findFields(\"\").then(function(fields) {\n                        $scope.customSelectors = fields;\n                        $scope.$apply();\n                    }).catch(function(err) {\n                        $log.error(err);\n                    });\n                }\n\n            }\n\n            $scope.customFilter = [];\n            $scope.getcustomFilter = function() {\n                config.widgetSelectors().findFields(\"\").then(function(fields) {\n                    $scope.customFilter = fields;\n                    $scope.$apply();\n                }).catch(function(err) {\n                    $log.error(err);\n                });\n\n            }\n\n            $scope.ifCustomFilter = function() {\n                return $scope.customSelectors && config.sort && $scope.definition.type === 'FullDevicesList' && $scope.toggleAdvanced === 2;\n            }\n\n            $scope.showCustomFields = function() {\n                return $scope.definition.type === 'FullDevicesList' && $scope.toggleAdvanced === 2 && $scope.search.customFilter && $scope.filterAvailable && !$scope.editMode;\n            }\n\n            $scope.changeDirection = function() {\n                var direction = config.sort.direction;\n                if (direction === 'DESCENDING') {\n                    $scope.config.sort.direction = 'ASCENDING'\n                } else if (direction === 'ASCENDING') {\n                    $scope.config.sort.direction = 'DESCENDING'\n                }\n                $scope.reload();\n            }\n\n            $scope.changeDefaultTab = function() {\n\n\n                $scope.reload();\n            }\n\n            $scope.debugQuery = function() {\n                Filter.parseQuery($scope.search.oql || '')\n                    .then(function(data) {\n                        //$scope.elementos = data;\n                        $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\n                        $scope.unknownWords = '';\n                        $scope.filter.error = null;\n                    })\n                    .catch(function(err) {\n                        $scope.filter.error = err;\n                        // Tratar el error\n                    });\n\n            }\n\n            $scope.autocomplete_options = function() {\n                var autocomplete_options = {\n                    suggest: Filter.suggest_field_delimited,\n                    customSelectors: config.widgetSelectors()\n                };\n\n                return autocomplete_options;\n\n            };\n\n            // Multiple selection\n            $scope.selectedItems = {};\n\n            // Gestor de seleccion\n            $scope.selectionManager = {\n                currentSelection: $scope.selectedItems,\n                isSelected: function(key, obj) {\n                    if ($scope.selectedItems[key] && !angular.isUndefined(obj)) {\n                        $scope.selectedItems[key].data = obj;\n                    }\n\n                    return $scope.selectedItems[key] ? true : false;\n                },\n                totalSelected: function() {\n                    return Object.keys($scope.selectedItems).length;\n                }\n            };\n\n            $scope.manageSelectedItems = function() {\n                var selectionScope = $scope.$new();\n\n                selectionScope.selectionConfig = config.selectionConfig;\n\n                selectionScope.selectedItems = [];\n                angular.forEach($scope.selectedItems, function(value, key) {\n                    selectionScope.selectedItems.push({\n                        key: key,\n                        value: value\n                    });\n                });\n\n                selectionScope.currentSelection = {\n                    selected: selectionScope.selectedItems\n                };\n\n                var manageItemsSelectedTemplate = adfTemplatePath + 'widget-selection.html';\n                var opts = {\n                    scope: selectionScope,\n                    templateUrl: manageItemsSelectedTemplate,\n                    backdrop: 'static',\n                    size: 'lg',\n                    animation: true\n                };\n\n                var instance = $uibModal.open(opts);\n\n                selectionScope.restoreSelection = function() {\n                    selectionScope.currentSelection = {\n                        selected: selectionScope.selectedItems\n                    };\n                };\n\n                selectionScope.clearSelection = function() {\n                    selectionScope.currentSelection.selected = [];\n                };\n\n                // Cierra sy guarda los datos de nueva selección\n                selectionScope.applyFilter = function(type) {\n                    var customOql = selectionScope.selectionConfig.filterAction(selectionScope.currentSelection.selected, type);\n\n                    if (!angular.isUndefined(customOql) && customOql !== null) {\n                        $scope.toggleAdvanced = 0;\n                        Filter.parseQuery(customOql).then(function(data) {\n                            $scope.search.oql = customOql;\n                            $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\n                            $scope.unknownWords = '';\n                            $scope.filter.error = null;\n\n                            $scope.launchSearchingAdv();\n                        }).catch(function(err) {\n                            $scope.filter.error = err;\n                        });\n                    }\n                };\n\n                selectionScope.executeOperation = function(operationType) {\n                    if (!$scope.editMode) {\n                        $scope.$parent.$broadcast('widgetExecuteOperation', {\n                            'selectedItems': selectionScope.currentSelection.selected,\n                            'type': operationType\n                        });\n                    }\n                };\n\n                // Cierra sy guarda los datos de nueva selección\n                selectionScope.saveChangesDialog = function() {\n                    var finalSelection = {};\n                    angular.forEach(selectionScope.currentSelection.selected, function(data, idx) {\n                        finalSelection[data.key] = {\n                            data: data.value.data,\n                            visible: data.value.visible\n                        };\n                    });\n\n                    $scope.selectedItems = angular.copy(finalSelection);\n                    $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n\n                    $scope.selectionManager.lastItem = {};\n                    $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n\n                    instance.close();\n                    selectionScope.$destroy();\n                };\n\n                // Cierra sin realizar ninguna acción\n                selectionScope.closeDialog = function() {\n                    instance.close();\n                    selectionScope.$destroy();\n                };\n            };\n\n\n            // bind edit function\n            $scope.edit = function() {\n                var editScope = $scope.$new();\n                editScope.definition = angular.copy(definition);\n\n                var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\n                if (definition.editTemplateUrl) {\n                    adfEditTemplatePath = definition.editTemplateUrl;\n                }\n\n                var opts = {\n                    scope: editScope,\n                    templateUrl: adfEditTemplatePath,\n                    backdrop: 'static',\n                    size: 'lg'\n                };\n\n                var instance = $uibModal.open(opts);\n\n                editScope.closeDialog = function() {\n                    instance.close();\n                    editScope.$destroy();\n                };\n\n                // TODO create util method\n                function createApplyPromise(result) {\n                    var promise;\n                    if (typeof result === 'boolean') {\n                        var deferred = $q.defer();\n                        if (result) {\n                            deferred.resolve();\n                        } else {\n                            deferred.reject();\n                        }\n                        promise = deferred.promise;\n                    } else {\n                        promise = $q.when(result);\n                    }\n                    return promise;\n                }\n\n                editScope.saveDialog = function() {\n                    // clear validation error\n                    editScope.validationError = null;\n\n                    // build injection locals\n                    var widget = $scope.widget;\n\n                    // create a default apply method for widgets\n                    // without edit mode\n                    // see issue https://goo.gl/KHPQLZ\n                    var applyFn;\n                    if (widget.edit) {\n                        applyFn = widget.edit.apply;\n                    } else {\n                        applyFn = function() {\n                            return true;\n                        };\n                    }\n\n                    // injection locals\n                    var locals = {\n                        widget: widget,\n                        definition: editScope.definition,\n                        config: editScope.definition.config\n                    };\n\n                    // invoke apply function and apply if success\n                    var result = $injector.invoke(applyFn, applyFn, locals);\n                    createApplyPromise(result).then(function() {\n                        definition.title = editScope.definition.title;\n                        angular.extend(definition.config, editScope.definition.config);\n\n                        editScope.closeDialog();\n\n                        if (widget.edit && widget.edit.reload) {\n                            // reload content after edit dialog is closed\n                            $scope.$broadcast('widgetConfigChanged');\n                        }\n                    }, function(err) {\n                        if (err) {\n                            editScope.validationError = err;\n                        } else {\n                            editScope.validationError = 'VALIDATION_DURING_APPLY_FAILED';\n                        }\n                    });\n                };\n\n            };\n\n\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            templateUrl: dashboard.customWidgetTemplatePath ? dashboard.customWidgetTemplatePath : adfTemplatePath + 'widget.html',\n            scope: {\n                definition: '=',\n                col: '=column',\n                editMode: '=',\n                options: '=',\n                widgetState: '='\n            },\n            controller: function($scope) {\n                var adfDashboardCollapseExpand = $scope.$on('adfDashboardCollapseExpand', function(event, args) {\n                    $scope.widgetState.isCollapsed = args.collapseExpandStatus;\n                });\n\n                var adfWidgetEnterEditMode = $scope.$on('adfWidgetEnterEditMode', function(event, widget) {\n                    if (dashboard.idEquals($scope.definition.wid, widget.wid)) {\n                        $scope.edit();\n                    }\n                });\n\n                var adfIsEditMode = $scope.$on('adfIsEditMode', function(event, widget) {\n                    $scope.editing = true;\n                });\n\n                var adfDashboardChanged = $scope.$on('adfDashboardChanged', function(event, widget) {\n                    $scope.editing = false;\n                });\n\n                var adfDashboardEditsCancelled = $scope.$on('adfDashboardEditsCancelled', function(event, widget) {\n                    $scope.editing = false;\n                });\n\n                $scope.widgetClasses = function(w, definition) {\n                    var classes = definition.styleClass || '';\n                    // w is undefined, if the type of the widget is unknown\n                    // see issue #216\n                    if (!w || !w.frameless || $scope.editMode) {\n                        classes += ' panel panel-default';\n                    }\n                    return classes;\n                };\n\n                $scope.openFullScreen = function() {\n                    var definition = $scope.definition;\n                    var fullScreenScope = $scope.$new();\n                    var opts = {\n                        scope: fullScreenScope,\n                        templateUrl: adfTemplatePath + 'widget-fullscreen.html',\n                        size: definition.modalSize || 'lg', // 'sm', 'lg'\n                        backdrop: 'static',\n                        windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n                    };\n\n                    var instance = $uibModal.open(opts);\n                    fullScreenScope.closeDialog = function() {\n                        instance.close();\n                        fullScreenScope.$destroy();\n                    };\n                };\n\n                $scope.openFilter = function() {\n\n                }\n\n                $scope.openAboutScreen = function(size) {\n                    size = 'md';\n                    var modalInstance = $uibModal.open({\n                        animation: true,\n                        templateUrl: 'widgetAboutModal.html',\n                        controller: function($scope, $uibModalInstance, information) {\n                            $scope.about = {};\n                            $scope.about.info = information;\n                            $scope.ok = function() {\n                                $uibModalInstance.close();\n                            };\n                        },\n                        'size': size,\n                        resolve: {\n                            information: function() {\n                                return $scope.config.about;\n                            }\n                        }\n                    });\n\n                    modalInstance.result.then(function(selectedItem) {\n                        $scope.selected = selectedItem;\n                    }, function() {\n                        $log.info('Modal dismissed at: ' + new Date());\n                    });\n                };\n\n                $scope.saveWidgetScreen = function(wId) {\n                    $scope.$emit('generateSnapshot', {\n                        'objectSelector': '.widget_' + wId,\n                        'fileName': 'capture_' + new Date().getTime()\n                    });\n                };\n\n                var onWindowTimeChanged = function(timeObj) {\n                    var filter = {\n                        and: []\n                    };\n                    if (timeObj && timeObj.from) {\n                        filter.and.push({\n                            gt: {\n                                operationDate: timeObj.from\n                            }\n                        });\n\n                        if (timeObj.to) {\n                            filter.and.push({\n                                lt: {\n                                    operationDate: timeObj.to\n                                }\n                            });\n                        }\n                    } else {\n                        filter = null;\n                    }\n                    return filter;\n                }\n\n                var createQuickFilter = function(fieldsQuickSearch, filter) {\n                    var _filter = {\n                        or: []\n                    };\n                    var criteria;\n                    fieldsQuickSearch.forEach(function(field) {\n                        criteria = {};\n                        criteria[field.operator] = {};\n                        criteria[field.operator][field.name] = $scope.config.filter;\n                        _filter.or.push(criteria);\n                    });\n                    return _filter;\n                }\n\n                $scope.downloadCsv = function() {\n                    var columns = $scope.config.columns;\n                    var scope_filter = $scope.config.filter;\n                    var extra_filter;\n                    var final_filter = {};\n                    var order = $scope.config.sort ? $scope.config.sort : undefined;\n                    if ($scope.config.windowFilter) {\n                        var window_filter = $scope.config.onWindowTimeChanged($scope.config.windowFilter);\n                        if (window_filter && window_filter.and) {\n                            extra_filter = {\n                                and: window_filter.and\n                            };\n                        }\n                    }\n                    var filter;\n                    if (scope_filter.value && scope_filter.value.length > 4) {\n                        filter = JSON.parse(scope_filter.value);\n                    } else if (typeof scope_filter === 'string' && scope_filter.trim() !== '') {\n                        filter = createQuickFilter($scope.config.fieldsQuickSearch, scope_filter);\n                    }\n                    if (extra_filter) {\n                        if (filter) {\n                            final_filter = {\n                                and: [extra_filter, filter]\n                            };\n                        } else {\n                            final_filter = extra_filter;\n                        }\n                    } else {\n                        final_filter = filter;\n                    }\n                    $scope.$broadcast('downloadCsv', {\n                        'columns': columns,\n                        'filter': final_filter,\n                        'order': order\n                    });\n                };\n\n                $scope.generateQR = function() {\n                    $scope.$broadcast('generateQR');\n                };\n\n                var addItemToSelection = $scope.$on('addItemToSelection', function(event, item) {\n                    if (!$scope.selectedItems[item.key]) {\n                        $scope.selectedItems[item.key] = {\n                            data: item.data,\n                            visible: item.visible\n                        };\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n                        item.isSelected = true;\n                        $scope.selectionManager.lastItem = item;\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n                    }\n\n                });\n\n                var removeItemFromSelection = $scope.$on('removeItemFromSelection', function(event, item) {\n                    if ($scope.selectedItems[item.key]) {\n                        delete $scope.selectedItems[item.key];\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n                        item.isSelected = false;\n                        $scope.selectionManager.lastItem = item;\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n                    }\n                });\n\n                $scope.$on('$destroy', function() {\n                    adfDashboardCollapseExpand();\n                    adfWidgetEnterEditMode();\n                    adfIsEditMode();\n                    adfDashboardChanged();\n                    adfDashboardEditsCancelled();\n                    addItemToSelection();\n                    removeItemFromSelection();\n                });\n            },\n            compile: function() {\n\n                /**\n                 * use pre link, because link of widget-content\n                 * is executed before post link widget\n                 */\n                return {\n                    pre: preLink,\n                    post: postLink\n                };\n            }\n        };\n\n    });","(function(window, undefined) {'use strict';\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf', ['adf.provider', 'ui.bootstrap', 'opengate-angular-js'])\n    .value('adfTemplatePath', '../src/templates/')\n    .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\n    .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\n    .value('adfVersion', '4.3.0');\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardColumn', function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\n    \n\n    /**\n     * moves a widget in between a column\n     */\n    function moveWidgetInColumn($scope, column, evt){\n      var widgets = column.widgets;\n      // move widget and apply to scope\n      $scope.$apply(function(){\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\n      });\n    }\n\n    /**\n     * finds a widget by its id in the column\n     */\n    function findWidget(column, index){\n      var widget = null;\n      for (var i=0; i<column.widgets.length; i++){\n        var w = column.widgets[i];\n        if (dashboard.idEquals(w.wid,index)){\n          widget = w;\n          break;\n        }\n      }\n      return widget;\n    }\n\n    /**\n     * finds a column by its id in the model\n     */\n    function findColumn(model, index){\n      var column = null;\n      for (var i=0; i<model.rows.length; i++){\n        var r = model.rows[i];\n        for (var j=0; j<r.columns.length; j++){\n          var c = r.columns[j];\n          if (dashboard.idEquals(c.cid, index)){\n            column = c;\n            break;\n          } else if (c.rows){\n            column = findColumn(c, index);\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * get the adf id from an html element\n     */\n    function getId(el){\n      var id = el.getAttribute('adf-id');\n      return id ? id : '-1';\n    }\n\n    /**\n     * adds a widget to a column\n     */\n    function addWidgetToColumn($scope, model, targetColumn, evt){\n      // find source column\n      var cid = getId(evt.from);\n      var sourceColumn = findColumn(model, cid);\n\n      if (sourceColumn){\n        // find moved widget\n        var wid = getId(evt.item);\n        var widget = findWidget(sourceColumn, wid);\n\n        if (widget){\n          // add new item and apply to scope\n          $scope.$apply(function(){\n            if (!targetColumn.widgets) {\n              targetColumn.widgets = [];\n            }\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\n\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\n          });\n        } else {\n          $log.warn('could not find widget with id ' + wid);\n        }\n      } else {\n        $log.warn('could not find column with id ' + cid);\n      }\n    }\n\n    /**\n     * removes a widget from a column\n     */\n    function removeWidgetFromColumn($scope, column, evt){\n      // remove old item and apply to scope\n      $scope.$apply(function(){\n        column.widgets.splice(evt.oldIndex, 1);\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n      });\n    }\n\n    /**\n     * enable sortable\n     */\n    function applySortable($scope, $element, model, column){\n      // enable drag and drop\n      var el = $element[0];\n      var sortable = Sortable.create(el, {\n        group: 'widgets',\n        handle: '.adf-move',\n        ghostClass: 'placeholder',\n        animation: 150,\n        onAdd: function(evt){\n          addWidgetToColumn($scope, model, column, evt);\n        },\n        onRemove: function(evt){\n          removeWidgetFromColumn($scope, column, evt);\n        },\n        onUpdate: function(evt){\n          moveWidgetInColumn($scope, column, evt);\n        }\n      });\n\n      // destroy sortable on column destroy event\n      $element.on('$destroy', function () {\n        // check sortable element, before calling destroy\n        // see https://github.com/sdorra/angular-dashboard-framework/issues/118\n        if (sortable.el){\n          sortable.destroy();\n        }\n      });\n    }\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        column: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        adfModel: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\n      link: function ($scope, $element) {\n        // set id\n        var col = $scope.column;\n        if (!col.cid){\n          col.cid = dashboard.id();\n        }\n\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\n          $compile(rowTemplate)($scope, function(cloned) {\n            $element.append(cloned);\n          });\n        } else {\n          // enable drag and drop for widget only columns\n          applySortable($scope, $element, $scope.adfModel, col);\n        }\n      }\n    };\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @ngdoc directive\n * @name adf.directive:adfDashboard\n * @element div\n * @restrict EA\n * @scope\n * @description\n *\n * `adfDashboard` is a directive which renders the dashboard with all its\n * components. The directive requires a name attribute. The name of the\n * dashboard can be used to store the model.\n *\n * @param {string} name name of the dashboard. This attribute is required.\n * @param {boolean=} editable false to disable the editmode of the dashboard.\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\n * @param {string=} structure the default structure of the dashboard.\n * @param {object=} adfModel model object of the dashboard.\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\n *                   events during edit mode not reset it if edit mode is exited.\n * @param {boolean=} categories enable categories for the add widget dialog.\n */\n\nangular.module('adf')\n    .directive('adfDashboard', function ($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath, $faIcons) {\n        \n\n        function stringToBoolean(string) {\n            switch (angular.isDefined(string) ? string.toLowerCase() : null) {\n                case 'true':\n                case 'yes':\n                case '1':\n                    return true;\n                case 'false':\n                case 'no':\n                case '0':\n                case null:\n                    return false;\n                default:\n                    return Boolean(string);\n            }\n        }\n\n        function copyWidgets(source, target) {\n            if (source.widgets && source.widgets.length > 0) {\n                var w = source.widgets.shift();\n                while (w) {\n                    target.widgets.push(w);\n                    w = source.widgets.shift();\n                }\n            }\n        }\n\n        /**\n         * Copy widget from old columns to the new model\n         * @param object root the model\n         * @param array of columns\n         * @param counter\n         */\n        function fillStructure(root, columns, counter) {\n            counter = counter || 0;\n\n            if (angular.isDefined(root.rows)) {\n                angular.forEach(root.rows, function (row) {\n                    angular.forEach(row.columns, function (column) {\n                        // if the widgets prop doesn't exist, create a new array for it.\n                        // this allows ui.sortable to do it's thing without error\n                        if (!column.widgets) {\n                            column.widgets = [];\n                        }\n\n                        // if a column exist at the counter index, copy over the column\n                        if (angular.isDefined(columns[counter])) {\n                            // do not add widgets to a column, which uses nested rows\n                            if (angular.isUndefined(column.rows)) {\n                                copyWidgets(columns[counter], column);\n                                counter++;\n                            }\n                        }\n\n                        // run fillStructure again for any sub rows/columns\n                        counter = fillStructure(column, columns, counter);\n                    });\n                });\n            }\n            return counter;\n        }\n\n        /**\n         * Read Columns: recursively searches an object for the 'columns' property\n         * @param object model\n         * @param array  an array of existing columns; used when recursion happens\n         */\n        function readColumns(root, columns) {\n            columns = columns || [];\n\n            if (angular.isDefined(root.rows)) {\n                angular.forEach(root.rows, function (row) {\n                    angular.forEach(row.columns, function (col) {\n                        columns.push(col);\n                        // keep reading columns until we can't any more\n                        readColumns(col, columns);\n                    });\n                });\n            }\n\n            return columns;\n        }\n\n        function changeStructure(model, structure) {\n            var columns = readColumns(model);\n            var counter = 0;\n\n            model.rows = angular.copy(structure.rows);\n\n            while (counter < columns.length) {\n                counter = fillStructure(model, columns, counter);\n            }\n        }\n\n        function createConfiguration(type) {\n            var cfg = {};\n            var config = dashboard.widgets[type].config;\n            if (config) {\n                cfg = angular.copy(config);\n            }\n            return cfg;\n        }\n\n        function createWidget(type) {\n            var wdgt = {};\n            var widget = dashboard.widgets[type];\n            if (widget) {\n                wdgt = angular.copy(widget);\n            }\n            return wdgt;\n        }\n\n        /**\n         * Find first widget column in model.\n         *\n         * @param dashboard model\n         */\n        function findFirstWidgetColumn(model) {\n            var column = null;\n            if (!angular.isArray(model.rows)) {\n                $log.error('model does not have any rows');\n                return null;\n            }\n            for (var i = 0; i < model.rows.length; i++) {\n                var row = model.rows[i];\n                if (angular.isArray(row.columns)) {\n                    for (var j = 0; j < row.columns.length; j++) {\n                        var col = row.columns[j];\n                        if (!col.rows) {\n                            column = col;\n                            break;\n                        }\n                    }\n                }\n                if (column) {\n                    break;\n                }\n            }\n            return column;\n        }\n\n        /**\n         * Adds the widget to first column of the model.\n         *\n         * @param dashboard model\n         * @param widget to add to model\n         * @param name name of the dashboard\n         */\n        function addNewWidgetToModel(model, widget, name, forceToSave) {\n            if (model) {\n                var column = findFirstWidgetColumn(model);\n                if (column) {\n                    if (!column.widgets) {\n                        column.widgets = [];\n                    }\n                    column.widgets.unshift(widget);\n\n                    // broadcast added event\n                    $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\n\n                    if (forceToSave) {\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\n                    }\n                } else {\n                    $log.error('could not find first widget column');\n                }\n            } else {\n                $log.error('model is undefined');\n            }\n        }\n\n        /**\n         * Checks if the edit mode of the widget should be opened immediately.\n         *\n         * @param widget type\n         */\n        function isEditModeImmediate(type) {\n            var widget = dashboard.widgets[type];\n            return widget && widget.edit && widget.edit.immediate;\n        }\n\n        /**\n         * Opens the edit mode of the specified widget.\n         *\n         * @param dashboard scope\n         * @param widget\n         */\n        function openEditMode($scope, widget) {\n            // wait some time before fire enter edit mode event\n            $timeout(function () {\n                $scope.$broadcast('adfWidgetEnterEditMode', widget);\n            }, 200);\n        }\n\n        /**\n         * Splits an object into an array multiple objects inside.\n         *\n         * @param object source object\n         * @param size size of array\n         *\n         * @return array of splitted objects\n         */\n        function split(object, size) {\n            var arr = [];\n            var i = 0;\n            angular.forEach(object, function (value, key) {\n                var index = i++ % size;\n                if (!arr[index]) {\n                    arr[index] = {};\n                }\n                arr[index][key] = value;\n            });\n            return arr;\n        }\n\n        /**\n         * Creates object with the category name as key and an array of widgets as value.\n         *\n         * @param widgets array of widgets\n         *\n         * @return array of categories\n         */\n        function createCategories(widgets) {\n            var categories = {};\n            angular.forEach(widgets, function (widget, key) {\n                var category = widget.category;\n                // if the widget has no category use a default one\n                if (!category) {\n                    category = 'ADF.CATEGORY.MISCELANOUS';\n                }\n                // push widget to category array\n                if (angular.isUndefined(categories[category])) {\n                    categories[category] = {\n                        widgets: {}\n                    };\n                }\n                categories[category].widgets[key] = widget;\n            });\n            return categories;\n        }\n\n        function createCategoriesList(widgets) {\n            var categories = [];\n            angular.forEach(widgets, function (widget, key) {\n                if (!widget.category) {\n                    widget.category = 'ADF.CATEGORY.MISCELLANEOUS';\n                }\n\n                if (!widget.categoryTags) {\n                    widget.categoryTags = 'ADF.CATEGORY.TAG.MISCELLANEOUS';\n                }\n                \n                var categoriesTmp = widget.categoryTags.split(',');\n\n                angular.forEach(categoriesTmp, function(category, idx) {\n                    // push widget to category array\n                    if (categories.indexOf(category) === -1) \n                        categories.push(category)\n                });\n                \n            });\n            return categories;\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            scope: {\n                structure: '@',\n                name: '@',\n                collapsible: '@',\n                editable: '@',\n                editMode: '@',\n                continuousEditMode: '=',\n                maximizable: '@',\n                adfModel: '=',\n                adfWidgetFilter: '=',\n                categories: '@',\n                hideButtons: '=',\n                extraData: '='\n            },\n            controller: function ($scope) {\n                var model = {};\n                var structure = {};\n                var widgetFilter = null;\n                var structureName = {};\n                var name = $scope.name;\n\n                // Watching for changes on adfModel\n                $scope.$watch('adfModel', function (oldVal, newVal) {\n                    // has model changed or is the model attribute not set\n                    if (newVal !== null || (oldVal === null && newVal === null)) {\n                        model = $scope.adfModel;\n                        widgetFilter = $scope.adfWidgetFilter;\n                        if (!model || !model.rows) {\n                            structureName = $scope.structure;\n                            structure = dashboard.structures[structureName];\n                            if (structure) {\n                                if (model) {\n                                    model.rows = angular.copy(structure).rows;\n                                } else {\n                                    model = angular.copy(structure);\n                                }\n                                model.structure = structureName;\n                            } else {\n                                $log.error('could not find structure ' + structureName);\n                            }\n                        }\n\n                        if (model) {\n                            if (!model.title) {\n                                model.title = 'ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD';\n                            }\n                            if (!model.titleTemplateUrl) {\n                                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\n                            }\n                            $scope.model = model;\n                        } else {\n                            $log.error('could not find or create model');\n                        }\n                    }\n                }, true);\n\n                // edit mode\n                $scope.editMode = false;\n                $scope.editClass = '';\n\n                function getNewModalScope() {\n                    var scope = $scope.$new();\n                    return scope;\n                }\n\n                $scope.deleteDashboard = function () {\n                    var dashData = {\n                        id: model.id,\n                        name: model.title\n                    };\n\n                    $rootScope.$broadcast('dashboardDelete', dashData);\n                };\n\n                $scope.toggleEditMode = function (openConfigWindow) {\n                    $scope.editMode = !$scope.editMode;\n                    if ($scope.editMode) {\n                        if (!$scope.continuousEditMode) {\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\n                            $rootScope.$broadcast('adfIsEditMode');\n                        }\n\n                        if (openConfigWindow) {\n                            $scope.editDashboardDialog();\n                        }\n                    }\n\n                    if (!$scope.editMode) {\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\n                    }\n                };\n\n                $scope.saveTemporalDashboard = function () {\n                    delete model.temporal;\n                    $rootScope.$broadcast('adfDashboardChanged', name, model);\n                };\n\n                var adfToggleEditMode = $scope.$on('adfToggleEditMode', function (event, isNewDashboard) {\n                    if (isNewDashboard) {\n                        $scope.toggleEditMode(true);\n                    } else {\n                        $scope.toggleEditMode();\n                    }\n                });\n\n                var adfCancelEditMode = $scope.$on('adfCancelEditMode', function (event, isNewDashboard) {\n                    if ($scope.editMode) {\n                        $scope.cancelEditMode();\n                    }\n                });\n\n                $scope.collapseAll = function (collapseExpandStatus) {\n                    $rootScope.$broadcast('adfDashboardCollapseExpand', {\n                        collapseExpandStatus: collapseExpandStatus\n                    });\n                };\n\n                $scope.cancelEditMode = function () {\n                    $scope.editMode = false;\n                    if (!$scope.continuousEditMode && ($scope.modelCopy !== $scope.adfModel)) {\n                        $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\n                    }\n                    $rootScope.$broadcast('adfDashboardEditsCancelled');\n                };\n\n                var adfEditDashboardDialog = $scope.$on('adfEditDashboardDialog', function (event, isNewDashboard) {\n                    if ($scope.editMode) {\n                        $scope.editDashboardDialog();\n                    }\n                });\n\n                var adfLaunchSearchingFromWidget = $scope.$on('adfLaunchSearchingFromWidget', function (event, widget, configFilter) {\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\n                });\n                var adfWindowTimeChangedFromWidget = $scope.$on('adfWindowTimeChangedFromWidget', function (event, widget, windowFilter) {\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\n                });\n\n                // edit dashboard settings\n                $scope.editDashboardDialog = function () {\n                    var editDashboardScope = getNewModalScope();\n                    // create a copy of the title, to avoid changing the title to\n                    // \"dashboard\" if the field is empty\n                    editDashboardScope.copy = {\n                        title: (model.title !== 'ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD' ? model.title : ''),\n                        description: model.description,\n                        icon: model.icon ? model.icon : 'fa-tachometer'\n                    };\n\n                    // pass icon list\n                    editDashboardScope.availableIcons = $faIcons.list();\n\n                    // pass dashboard structure to scope\n                    editDashboardScope.structures = dashboard.structures;\n\n                    // pass split function to scope, to be able to display structures in multiple columns\n                    editDashboardScope.split = split;\n\n                    var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\n                    if (model.editTemplateUrl) {\n                        adfEditTemplatePath = model.editTemplateUrl;\n                    }\n                    var instance = $uibModal.open({\n                        scope: editDashboardScope,\n                        templateUrl: adfEditTemplatePath,\n                        backdrop: 'static',\n                        keyboard: false,\n                        size: 'lg'\n                    });\n\n                    editDashboardScope.changeStructure = function (name, structure) {\n                        $log.info('change structure to ' + name);\n                        changeStructure(model, structure);\n                        if (model.structure !== name) {\n                            model.structure = name;\n                        }\n                    };\n                    editDashboardScope.closeDialog = function () {\n                        // copy the new title back to the model\n                        model.title = editDashboardScope.copy.title;\n                        model.description = editDashboardScope.copy.description;\n                        model.icon = editDashboardScope.copy.icon;\n\n                        // close modal and destroy the scope\n                        instance.close();\n                        editDashboardScope.$destroy();\n                    };\n                };\n\n                var adfOpenWidgetFromOther = $scope.$on('adfOpenWidgetFromOther', function (event, widget, config) {\n                    var internal_config = createConfiguration(widget);\n                    var _config = angular.merge({}, internal_config, config);\n                    var w = {\n                        type: widget,\n                        config: _config,\n                        title: _config.title\n                    };\n                    addNewWidgetToModel(model, w, name, !$scope.editMode);\n                });\n\n                var adfOpenModalWidgetFromOther = $scope.$on('adfOpenModalWidgetFromOther', function (event, widgetType, config) {\n                    var widget = createWidget(widgetType);\n                    widget.config = angular.merge({}, widget.config, config);\n                    widget.type = widgetType;\n                    if (widget.config.title) {\n                        widget.title = widget.config.title;\n                    }\n                    var fullScreenScope = $scope.$new();\n                    fullScreenScope.definition = fullScreenScope.widget = widget;\n                    var opts = {\n                        scope: fullScreenScope,\n                        templateUrl: adfTemplatePath + 'widget-fullscreen.html',\n                        size: fullScreenScope.definition.modalSize || 'lg', // 'sm', 'lg'\n                        backdrop: 'static',\n                        windowClass: (fullScreenScope.definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n                    };\n\n                    fullScreenScope.persistDashboard = function () {\n                        $rootScope.$broadcast('adfOpenWidgetFromOther', this.$parent.widget.type, this.$parent.widget.config);\n                        this.closeDialog();\n                    }\n\n                    var instance = $uibModal.open(opts);\n                    fullScreenScope.closeDialog = function () {\n                        instance.close();\n                        fullScreenScope.$destroy();\n                    };\n\n                });\n\n                var adfAddWidgetDialog = $scope.$on('adfAddWidgetDialog', function (event, isNewDashboard) {\n                    if (!model.temporal && model.editable) {\n                        if (!$scope.editMode) {\n                            $scope.editMode = true;\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\n                            $rootScope.$broadcast('adfIsEditMode');\n                        }\n\n                        $scope.addWidgetDialog();\n                    }\n                });\n\n                // add widget dialog\n                $scope.addWidgetDialog = function () {\n                    var addScope = getNewModalScope();\n                    var widgets;\n                    if (angular.isFunction(widgetFilter)) {\n                        widgets = {};\n                        angular.forEach(dashboard.widgets, function (widget, type) {\n                            if (widgetFilter(widget, type, model)) {\n                                widgets[type] = widget;\n                            }\n                        });\n                    } else {\n                        widgets = dashboard.widgets;\n                    }\n                    addScope.widgets = widgets;\n\n                    angular.forEach(addScope.widgets, function (widget, type) {\n                        widget.key = type;\n                        if (!widget.category) {\n                            widget.category = 'Miscellaneous';\n                        }\n                    });\n                    \n                    // pass createCategories function to scope, if categories option is enabled\n                    if ($scope.options.categories) {\n                        addScope.createCategories = createCategories;\n                    } else {\n                        addScope.availableCategories = createCategoriesList(widgets);\n                    }\n\n                    var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\n                    if (model.addTemplateUrl) {\n                        adfAddTemplatePath = model.addTemplateUrl;\n                    }\n\n                    var opts = {\n                        scope: addScope,\n                        templateUrl: adfAddTemplatePath,\n                        backdrop: 'static',\n                        size: 'lg'\n                    };\n\n                    var instance = $uibModal.open(opts);\n                    addScope.widgetFilter = {};\n                    addScope.addWidget = function (widget) {\n                        var w = {\n                            type: widget,\n                            config: createConfiguration(widget)\n                        };\n                        addNewWidgetToModel(model, w, name);\n                        // close and destroy\n                        instance.close();\n                        addScope.$destroy();\n\n                        // check for open edit mode immediately\n                        if (isEditModeImmediate(widget)) {\n                            openEditMode($scope, w);\n                        }\n                    };\n\n                    addScope.changeThumbnail = function (widget) {\n                        if ( widget.images) {\n                            if (angular.isUndefined(widget._currThumb)) {\n                                widget._currThumb = 1;\n                            } else {\n                                widget._currThumb+=1;\n                            }\n                            \n                            \n                            if (widget._currThumb >= widget.images.length) {\n                                widget._currThumb = 0;\n                            } \n    \n                            widget._currImg = widget.images[widget._currThumb];\n                        }                        \n                    };\n\n                    addScope.closeDialog = function () {\n                        // close and destroy\n                        instance.close();\n                        addScope.$destroy();\n                    };\n                };\n\n                $scope.addNewWidgetToModel = addNewWidgetToModel;\n\n                $scope.$on('destroy', function () {\n                    adfLaunchSearchingFromWidget();\n                    adfWindowTimeChangedFromWidget();\n                    adfToggleEditMode();\n                    adfOpenWidgetFromOther();\n                    adfOpenModalWidgetFromOther();\n                    adfCancelEditMode();\n                    adfAddWidgetDialog();\n                    adfEditDashboardDialog();\n                });\n            },\n            link: function ($scope, $element, $attr) {\n                // pass options to scope\n                var options = {\n                    name: $attr.name,\n                    editable: true,\n                    enableConfirmDelete: stringToBoolean($attr.enableConfirmDelete),\n                    maximizable: stringToBoolean($attr.maximizable),\n                    collapsible: stringToBoolean($attr.collapsible),\n                    categories: stringToBoolean($attr.categories),\n                    extraData: {}\n                };\n\n                if (angular.isDefined($attr.editable)) {\n                    options.editable = stringToBoolean($attr.editable);\n                }\n\n                if (angular.isDefined($scope.extraData)) {\n                    options.extraData = $scope.extraData;\n                }\n\n                options.extraData.editing = $scope.editMode;\n\n                $scope.options = options;\n            },\n            templateUrl: adfTemplatePath + 'dashboard.html'\n        };\n    });\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .filter('adfOrderByObjectKey', function($filter) {\n    \n\n    return function(item, key){\n      var array = [];\n      angular.forEach(item, function(value, objectKey){\n        value[key] = objectKey;\n        array.push(value);\n      });\n      return $filter('orderBy')(array, key);\n    };\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\n/**\n * @ngdoc object\n * @name adf.dashboardProvider\n * @description\n *\n * The dashboardProvider can be used to register structures and widgets.\n */\nangular.module('adf.provider', [])\n    .provider('dashboard', function () {\n\n        var widgets = {};\n        var widgetsPath = '';\n        var structures = {};\n        var messageTemplate = '<div class=\"alert alert-primary\">{}</div>';\n        var loadingTemplate = '\\\n      <div class=\"progress progress-striped active\">\\n\\\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\n          <span class=\"sr-only\" translate>FORM.MSG.LOADING ...</span>\\n\\\n        </div>\\n\\\n      </div>';\n        var customWidgetTemplatePath = null;\n\n        // default apply function of widget.edit.apply\n        var defaultApplyFunction = function () {\n            return true;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#widget\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Registers a new widget.\n         *\n         * @param {string} name of the widget\n         * @param {object} widget to be registered.\n         *\n         *   Object properties:\n         *\n         *   - `title` - `{string=}` - The title of the widget.\n         *   - `description` - `{string=}` - Description of the widget.\n         *   - `category` - `{string=}` - Category of the widget.\n         *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\n         *   - `config` - `{object}` - Predefined widget configuration.\n         *   - `controller` - `{string=|function()=}` - Controller fn that should be\n         *      associated with newly created scope of the widget or the name of a\n         *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\n         *      if passed as a string.\n         *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\n         *      published to scope under the `controllerAs` name.\n         *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\n         *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\n         *   - `template` - `{string=|function()=}` - html template as a string.\n         *   - `templateUrl` - `{string=}` - path to an html template.\n         *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\n         *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n         *      be injected into the controller. If any of these dependencies are promises, the widget\n         *      will wait for them all to be resolved or one to be rejected before the controller is\n         *      instantiated.\n         *      If all the promises are resolved successfully, the values of the resolved promises are\n         *      injected.\n         *\n         *      The map object is:\n         *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n         *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n         *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\n         *        and the return value is treated as the dependency. If the result is a promise, it is\n         *        resolved before its value is injected into the controller.\n         *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n         *      on the scope of the widget.\n         *   - `edit` - `{object}` - Edit modus of the widget.\n         *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n         *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\n         *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n         *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\n         *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\n         *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n         *        on the scope of the widget.\n         *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\n         *        Default is true.\n         *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\n         *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\n         *        The function have to return a boolean or an promise which can be resolved to a boolean.\n         *        The function can use injection.\n         *\n         * @returns {Object} self\n         */\n        this.widget = function (name, widget) {\n            var w = angular.extend({\n                reload: false,\n                frameless: false\n            }, widget);\n            if (w.edit) {\n                var edit = {\n                    reload: true,\n                    immediate: false,\n                    apply: defaultApplyFunction\n                };\n                angular.extend(edit, w.edit);\n                w.edit = edit;\n            }\n            widgets[name] = w;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#widgetsPath\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Sets the path to the directory which contains the widgets. The widgets\n         * path is used for widgets with a templateUrl which contains the\n         * placeholder {widgetsPath}. The placeholder is replaced with the\n         * configured value, before the template is loaded, but the template is\n         * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\n         * The default value of widgetPaths is ''.\n         *\n         *\n         * @param {string} path to the directory which contains the widgets\n         *\n         * @returns {Object} self\n         */\n        this.widgetsPath = function (path) {\n            widgetsPath = path;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#structure\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Registers a new structure.\n         *\n         * @param {string} name of the structure\n         * @param {object} structure to be registered.\n         *\n         *   Object properties:\n         *\n         *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\n         *     - `styleClass` - `{string}` - CSS Class of the row.\n         *     - `columns` - `{Array.<Object>}` - Columns of the row.\n         *       - `styleClass` - `{string}` - CSS Class of the column.\n         *\n         * @returns {Object} self\n         */\n        this.structure = function (name, structure) {\n            structures[name] = structure;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#messageTemplate\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the template for messages.\n         *\n         * @param {string} template for messages.\n         *\n         * @returns {Object} self\n         */\n        this.messageTemplate = function (template) {\n            messageTemplate = template;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#loadingTemplate\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the template which is displayed as\n         * long as the widget resources are not resolved.\n         *\n         * @param {string} template loading template\n         *\n         * @returns {Object} self\n         */\n        this.loadingTemplate = function (template) {\n            loadingTemplate = template;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#customWidgetTemplatePath\n         * @propertyOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the container template for the widgets\n         *\n         * @param {string} path to the custom widget template\n         *\n         * @returns {Object} self\n         */\n        this.customWidgetTemplatePath = function (templatePath) {\n            customWidgetTemplatePath = templatePath;\n            return this;\n        };\n\n        /**\n         * @ngdoc service\n         * @name adf.dashboard\n         * @description\n         *\n         * The dashboard holds all options, structures and widgets.\n         *\n         * @property {Array.<Object>} widgets Array of registered widgets.\n         * @property {string} widgetsPath Default path for widgets.\n         * @property {Array.<Object>} structures Array of registered structures.\n         * @property {string} messageTemplate Template for messages.\n         * @property {string} loadingTemplate Template for widget loading.\n         * * @property {string} customWidgetTemplatePath Changes the container template for the widgets\n         *\n         * @returns {Object} self\n         */\n        this.$get = function () {\n            var cid = 0;\n\n            return {\n                widgets: widgets,\n                widgetsPath: widgetsPath,\n                structures: structures,\n                messageTemplate: messageTemplate,\n                loadingTemplate: loadingTemplate,\n                customWidgetTemplatePath: customWidgetTemplatePath,\n\n                /**\n                 * @ngdoc method\n                 * @name adf.dashboard#id\n                 * @methodOf adf.dashboard\n                 * @description\n                 *\n                 * Creates an ongoing numeric id. The method is used to create ids for\n                 * columns and widgets in the dashboard.\n                 */\n                id: function () {\n                    return new Date().getTime() + '-' + (++cid);\n                },\n\n                /**\n                 * @ngdoc method\n                 * @name adf.dashboard#idEqual\n                 * @methodOf adf.dashboard\n                 * @description\n                 *\n                 * Checks if the given ids are equal.\n                 *\n                 * @param {string} id widget or column id\n                 * @param {string} other widget or column id\n                 */\n                idEquals: function (id, other) {\n                    // use toString, because old ids are numbers\n                    return ((id) && (other)) && (id.toString() === other.toString());\n                }\n            };\n        };\n\n    });\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardRow', function ($compile, adfTemplatePath, columnTemplate) {\n    \n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        row: '=',\n        adfModel: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\n      link: function($scope, $element) {\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\n          $compile(columnTemplate)($scope, function(cloned) {\n            $element.append(cloned);\n          });\n        }\n      }\n    };\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfStructurePreview', function(adfTemplatePath) {\n\n    function adjustRowHeight(container){\n      if (container.rows && container.rows.length > 0){\n        var height = 100 / container.rows.length;\n        angular.forEach(container.rows, function(row){\n          row.style = {\n            height: height + '%'\n          }\n\n          if (row.columns){\n            angular.forEach(row.columns, function(column){\n              adjustRowHeight(column);\n            });\n          }\n        });\n      }\n    }\n\n    function prepareStructure($scope){\n      var structure = angular.copy($scope.structure);\n      adjustRowHeight(structure);\n      $scope.preview = structure;\n    }\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        name: '=',\n        structure: '=',\n        selected: '='\n      },\n      templateUrl: adfTemplatePath + 'structure-preview.html',\n      link: prepareStructure\n    };\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf')\n    .directive('adfWidgetContent', function ($log, $q, widgetService,\n        $compile, $controller, $injector, dashboard, $translate) {\n\n        function renderError($element, msg) {\n            $log.warn(msg);\n            $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\n        }\n\n        function compileWidget($scope, $element, currentScope, configChanged) {\n            var model = $scope.model;\n            var content = $scope.content;\n\n            var extra = $scope.extra;\n\n            var newScope = currentScope;\n            if (!model) {\n                $translate('ADF.ERROR.MODEL_IS_UNDEFINED').then(function (translateMessage) {\n                    renderError($element, translateMessage);\n                });\n            } else if (!content) {\n                if (model.title) {\n                    $translate('ADF.ERROR.WIDGET_FOR_DEPRECTATED', {\n                        title: model.title\n                    }).then(function (translateMessage) {\n                        renderError($element, translateMessage);\n                    });\n                } else {\n                    $translate('ADF.ERROR.WIDGET_DEPRECTATED').then(function (translateMessage) {\n                        renderError($element, translateMessage);\n                    });\n                }\n            } else {\n                if (newScope) {\n                    var is_menu = newScope.menu !== undefined && newScope.menu !== null;\n                    var is_itemsPerPage = newScope.itemsPerPage !== undefined && newScope.itemsPerPage !== null;\n                    if (is_menu || is_itemsPerPage || configChanged || !angular.isFunction(newScope.reloadData)) {\n                        newScope = renderWidget($scope, $element, currentScope, model, content, extra);\n                    } else {\n                        newScope.reloadData();\n                    }\n                } else {\n                    newScope = renderWidget($scope, $element, currentScope, model, content, extra);\n                }\n            }\n\n            function _getWindowTime(type) {\n                if (type === \"custom\") {\n                    return {\n                        from: newScope.config.windowFilter.from,\n                        to: newScope.config.windowFilter.to\n                    }\n                }\n                var from = window.moment().subtract(1, type);\n                return {\n                    from: from._d\n                };\n            }\n\n            if (newScope) {\n                if (newScope.config) {\n                    newScope.config.getWindowTime = function () {\n                        var windowFilter = newScope.config.windowFilter;\n                        if (windowFilter && windowFilter.type) {\n                            var winTime = _getWindowTime(windowFilter.type);\n                            /* jshint ignore:start */\n                            if (!window.eval(newScope.config.windowFilter.rawdate)) {\n                                for (var key in winTime) {\n                                    winTime[key] = window.moment(winTime[key]).format();\n                                }\n                                winTime['rawdate'] = true;\n                            }\n                            /* jshint ignore:end */\n                            return winTime;\n                        }\n                    }\n                }\n\n                if (extra) {\n                    newScope.editing = extra.editing ? true : false;\n                    newScope.extraData = extra;\n                }\n            }\n            return newScope;\n        }\n\n        function renderWidget($scope, $element, currentScope, model, content, extra) {\n            // display loading template\n            $element.html(dashboard.loadingTemplate);\n\n            // create new scope\n            var templateScope = $scope.$new();\n\n            // pass config object to scope\n            if (!model.config) {\n                model.config = {};\n            }\n\n            templateScope.config = model.config;\n            templateScope.editing = extra && extra.editing;\n\n            if (extra) {\n                templateScope.extra = extra;\n            }\n\n            templateScope.selectionManager = (currentScope && currentScope.selectionManager) ? currentScope.selectionManager : undefined;\n\n            // local injections\n            var base = {\n                $scope: templateScope,\n                widget: model,\n                config: model.config\n            };\n\n            // get resolve promises from content object\n            var resolvers = {};\n            resolvers.$tpl = widgetService.getTemplate(content);\n            if (content.resolve) {\n                angular.forEach(content.resolve, function (promise, key) {\n                    if (angular.isString(promise)) {\n                        resolvers[key] = $injector.get(promise);\n                    } else {\n                        resolvers[key] = $injector.invoke(promise, promise, base);\n                    }\n                });\n            }\n\n            // resolve all resolvers\n            $q.all(resolvers).then(function (locals) {\n                angular.extend(locals, base);\n\n                // pass resolve map to template scope as defined in resolveAs\n                if (content.resolveAs) {\n                    templateScope[content.resolveAs] = locals;\n                }\n\n                // compile & render template\n                var template = locals.$tpl;\n                $element.html(template);\n                if (content.controller) {\n                    var templateCtrl = $controller(content.controller, locals);\n                    if (content.controllerAs) {\n                        templateScope[content.controllerAs] = templateCtrl;\n                    }\n                    $element.children().data('$ngControllerController', templateCtrl);\n                }\n                $compile($element.contents())(templateScope);\n            }, function (reason) {\n                // handle promise rejection\n                var msg = 'ADF.ERROR.COULD_NOT_RESOLVE_ALL_PROMISSES';\n                $translate(msg, {\n                    reason: (reason ? \": \" + reason : reason)\n                }).then(function (translateMessage) {\n                    renderError($element, translateMessage);\n                });\n            });\n\n            // destroy old scope\n            if (currentScope) {\n                currentScope.$destroy();\n            }\n\n            return templateScope;\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            scope: {\n                model: '=',\n                content: '=',\n                extra: '='\n            },\n            link: function ($scope, $element) {\n                var currentScope = compileWidget($scope, $element, null);\n                var widgetConfigChangedEvt = $scope.$on('widgetConfigChanged', function () {\n                    currentScope = compileWidget($scope, $element, currentScope, true);\n                });\n\n                var widgetReloadEvt = $scope.$on('widgetReload', function () {\n                    currentScope = compileWidget($scope, $element, currentScope, false);\n                });\n\n                $scope.$on('destroy', function () {\n                    widgetConfigChangedEvt();\n                    widgetReloadEvt();\n                });\n            }\n        };\n    });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/**\n * The widget service provide helper functions to render widgets and their content.\n */\nangular.module('adf')\n  .factory('widgetService', function($http, $q, $sce, $templateCache, dashboard) {\n    \n\n    function parseUrl(url) {\n      var parsedUrl = url;\n      if (url.indexOf('{widgetsPath}') >= 0) {\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\n                .replace('//', '/');\n        if (parsedUrl.indexOf('/') === 0) {\n          parsedUrl = parsedUrl.substring(1);\n        }\n      }\n      return parsedUrl;\n    }\n\n    var exposed = {};\n\n    exposed.getTemplate = function(widget){\n      var deferred = $q.defer();\n\n      if (widget.template) {\n        deferred.resolve(widget.template);\n      } else if (widget.templateUrl) {\n        // try to fetch template from cache\n        var tpl = $templateCache.get(widget.templateUrl);\n        if (tpl) {\n          deferred.resolve(tpl);\n        } else {\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\n          $http.get(url)\n               .success(function(response) {\n                 // put response to cache, with unmodified url as key\n                 $templateCache.put(widget.templateUrl, response);\n                 deferred.resolve(response);\n               })\n               .error(function() {\n                 deferred.reject('could not load template');\n               });\n        }\n      }\n\n      return deferred.promise;\n    };\n\n    return exposed;\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf')\n    .directive('adfWidget', function($injector, $q, $log, $uibModal, $rootScope, $interval, dashboard, adfTemplatePath, Filter) {\n        function preLink($scope) {\n            var definition = $scope.definition;\n\n            if (definition) {\n                var w = dashboard.widgets[definition.type];\n                if (w) {\n                    // pass title\n                    if (!definition.title) {\n                        definition.title = w.title;\n                    }\n\n                    if (!definition.titleTemplateUrl) {\n                        definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\n                        if (w.titleTemplateUrl) {\n                            definition.titleTemplateUrl = w.titleTemplateUrl;\n                        }\n                    }\n\n                    if (!definition.editTemplateUrl) {\n                        definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\n                        if (w.editTemplateUrl) {\n                            definition.editTemplateUrl = w.editTemplateUrl;\n                        }\n                    }\n\n                    if (!definition.titleTemplateUrl) {\n                        definition.frameless = w.frameless;\n                    }\n\n                    if (!definition.styleClass) {\n                        definition.styleClass = w.styleClass;\n                    }\n\n                    // set id for sortable\n                    if (!definition.wid) {\n                        definition.wid = dashboard.id();\n                    }\n\n                    // pass copy of widget to scope\n                    $scope.widget = angular.copy(w);\n\n                    // create config object\n                    var config = definition.config;\n                    if (config) {\n                        if (angular.isString(config)) {\n                            config = angular.fromJson(config);\n                        }\n                    } else {\n                        config = {};\n                    }\n\n                    if (!config.reloadPeriod) {\n                        config.reloadPeriod = \"0\";\n                    }\n\n                    if (typeof $scope.widget.show_modal_footer === \"undefined\") {\n                        $scope.widget.show_modal_footer = true;\n                    }\n\n                    if (typeof $scope.widget.show_reload_config === \"undefined\") {\n                        $scope.widget.show_reload_config = true;\n                    }\n\n                    // pass config to scope\n                    $scope.config = config;\n\n                    // collapse exposed $scope.widgetState property\n                    if (!$scope.widgetState) {\n                        $scope.widgetState = {};\n                        $scope.widgetState.isCollapsed = (w.collapsed === true) ? w.collapsed : false;\n                    }\n\n                } else {\n                    $log.warn('could not find widget ' + definition.type);\n                }\n            } else {\n                $log.debug('definition not specified, widget was probably removed');\n            }\n        }\n\n        function postLink($scope, $element) {\n            var definition = $scope.definition;\n            if (!definition) {\n                $log.debug('widget not found');\n                return;\n            }\n            if (!$scope.config) {\n                $scope.config = {};\n            }\n\n            var config = $scope.config;\n\n            // bind close function\n            var deleteWidget = function() {\n                var column = $scope.col;\n                if (column) {\n                    var index = column.widgets.indexOf(definition);\n                    if (index >= 0) {\n                        column.widgets.splice(index, 1);\n                    }\n                }\n                $element.remove();\n                $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n            };\n\n            $scope.remove = function() {\n                if ($scope.options.enableConfirmDelete) {\n                    var deleteScope = $scope.$new();\n\n                    var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\n                    if (definition.deleteTemplateUrl) {\n                        deleteTemplateUrl = definition.deleteTemplateUrl;\n                    }\n                    var opts = {\n                        scope: deleteScope,\n                        templateUrl: deleteTemplateUrl,\n                        backdrop: 'static'\n                    };\n                    var instance = $uibModal.open(opts);\n\n                    deleteScope.closeDialog = function() {\n                        instance.close();\n                        deleteScope.$destroy();\n                    };\n                    deleteScope.deleteDialog = function() {\n                        deleteWidget();\n                        deleteScope.closeDialog();\n                    };\n                } else {\n                    deleteWidget();\n                }\n            };\n\n\n            $scope.print = function() {\n                if (!$scope.editMode) {\n                    $scope.$broadcast('widgetPrint');\n                }\n            }\n\n            $scope.isExecuteOperationEnabled = function() {\n\n                if (config.entityKey)\n                    return true;\n                var filter = config.filter;\n                if (typeof filter === \"string\") {\n                    return filter.length > 0;\n                }\n                if (typeof filter === \"object\") {\n                    return filter.value.length > 2 && filter.oql;\n                }\n                return false;\n            }\n\n            $scope.executeOperation = function() {\n                if (!$scope.editMode) {\n\n                    $scope.$parent.$broadcast('widgetExecuteOperation');\n                }\n            };\n\n            // bind reload function\n            var stopReloadTimeout;\n\n            function _setReloadTimeout() {\n                if (config && config.reloadPeriod && config.reloadPeriod !== \"0\") {\n                    if (angular.isDefined(stopReloadTimeout)) {\n                        $interval.cancel(stopReloadTimeout)\n                        stopReloadTimeout = undefined;\n                    };\n                    stopReloadTimeout = $interval($scope.reload, (config.reloadPeriod * 1000));\n                }\n            }\n\n            $scope.reload = function(completeReload) {\n                if (completeReload) {\n                    $scope.$broadcast('widgetReload', completeReload);\n                } else {\n                    $scope.$broadcast('widgetReload');\n                }\n\n                _setReloadTimeout();\n            };\n\n            // verificacion de periodo de refresco\n            _setReloadTimeout();\n\n            $element.on('$destroy', function() {\n                $interval.cancel(stopReloadTimeout);\n            });\n\n            $scope.filter = {\n                value: \"\"\n            };\n            $scope.sort = {\n                value: \"\",\n                direction: \"\"\n            };\n\n            $scope.toggleAdvanced = 1;\n            var filter = config.filter;\n            if (typeof filter === \"object\" && filter.oql && filter.oql.length > 2) {\n                $scope.search = {\n                    oql: filter.oql,\n                    json: filter.value\n                };\n                $scope.toggleAdvanced = 0;\n            } else if (typeof filter === \"string\") {\n                $scope.search = {\n                    quick: filter\n                };\n                $scope.toggleAdvanced = 1;\n            } else if (typeof filter === \"object\" && filter.fields) {\n                $scope.search = {\n                    customFilter: filter.fields\n                };\n                $scope.search.fields = [];\n                angular.forEach(filter.fields, function(v, key) {\n                    $scope.search.fields.push(v.name);\n                });\n                $scope.toggleAdvanced = 2;\n            } else {\n                $scope.search = {\n                    quick: filter = \"\"\n                };\n            }\n\n            $scope.toggleFilter = function(advanced) {\n                $scope.toggleAdvanced = advanced;\n            };\n            $scope.filterAvailable = false;\n            $scope.showFilter = function() {\n                $scope.filterAvailable = $scope.filterAvailable === true ? false : true;\n            };\n\n            $scope.showFinalFilter = false;\n\n            $scope.launchSearching = function() {\n                var widget = {\n                    definition: definition,\n                    element: $element\n                };\n\n                $rootScope.$broadcast('adfLaunchSearchingFromWidget', widget, $scope.config.filter);\n                $scope.reload(true);\n            }\n            $scope.addCustomFilter = function(key) {\n                $scope.search.customFilter = $scope.search.customFilter ? $scope.search.customFilter : [];\n                $scope.search.customFilter.push({\n                    name: key,\n                    value: ''\n                });\n            }\n\n            $scope.launchCustomFilter = function() {\n                if ($scope.search.customFilter && $scope.search.customFilter.length > 0) {\n                    $scope.search.oql = $scope.search.json = '';\n\n                    $scope.config.filter = {\n                        value: {\n                            and: []\n                        },\n                        fields: $scope.search.customFilter\n                    }\n                    angular.forEach($scope.search.customFilter, function(v, key) {\n                        if (v.value) {\n                            var like = {};\n                            like[v.name] = v.value;\n                            $scope.config.filter.value.and.push({\n                                'like': like\n                            });\n                        }\n\n                    });\n                    $scope.config.filter.value = JSON.stringify($scope.config.filter.value);\n                }\n\n                $scope.launchSearching();\n            }\n\n\n\n            $scope.deleteFilter = function(value, model) {\n                angular.forEach($scope.search.customFilter, function(v, key) {\n                    if (v.name === value) {\n                        $scope.search.customFilter.splice(key, 1);\n                    }\n                });\n                if ($scope.search.customFilter.length === 0) {\n                    $scope.config.filter = {};\n                }\n            };\n\n\n            $scope.launchSearchingAdv = function() {\n                $scope.search.quick = '';\n                if ($scope.search.json === '' || $scope.search.json === '{}' || (!angular.isString($scope.search.json) && Object.keys($scope.search.json).length === 0)) {\n                    $scope.config.filter = {\n                        oql: '',\n                        value: ''\n                    };\n                } else {\n                    $scope.config.filter = {\n                        oql: $scope.search.oql,\n                        value: $scope.search.json\n                    };\n                }\n                $scope.launchSearching();\n\n            }\n\n            $scope.applyFilter = function(event) {\n                $scope.launchSearching();\n            }\n\n            $scope.launchSearchingQuick = function() {\n                $scope.search.oql = $scope.search.json = '';\n                $scope.config.filter = $scope.search.quick;\n                $scope.launchSearching();\n            }\n\n            var windowTimeChanged = $scope.$on('onWindowTimeChanged', function(event, timeObj) {\n                $scope.config.windowFilter = timeObj ? timeObj : (config.windowFilter ? {} : timeObj);\n                var widget = {\n                    definition: definition,\n                    element: $element\n                }\n                $rootScope.$broadcast('adfWindowTimeChangedFromWidget', widget, $scope.config.windowFilter);\n                $scope.reload();\n            });\n\n            $scope.enter = function(event) {\n                var keycode = (event.keyCode ? event.keyCode : event.which);\n                if (keycode === 13) {\n                    if ($scope.toggleAdvanced === 0)\n                        $scope.launchSearchingAdv();\n                    if ($scope.toggleAdvanced === 1)\n                        $scope.launchSearchingQuick();\n                    if ($scope.toggleAdvanced === 2)\n                        $scope.launchCustomFilter();\n\n                }\n                if (keycode === 19) {\n                    $scope.showFinalFilter = $scope.showFinalFilter === false ? true : false;\n                }\n            }\n\n\n            $scope.customSelectors = [];\n            $scope.getCustomSelectors = function() {\n                if ($scope.config.customSelectors) {\n                    $scope.customSelectors = $scope.config.customSelectors;\n                } else {\n                    config.widgetSelectors().findFields(\"\").then(function(fields) {\n                        $scope.customSelectors = fields;\n                        $scope.$apply();\n                    }).catch(function(err) {\n                        $log.error(err);\n                    });\n                }\n\n            }\n\n            $scope.customFilter = [];\n            $scope.getcustomFilter = function() {\n                config.widgetSelectors().findFields(\"\").then(function(fields) {\n                    $scope.customFilter = fields;\n                    $scope.$apply();\n                }).catch(function(err) {\n                    $log.error(err);\n                });\n\n            }\n\n            $scope.ifCustomFilter = function() {\n                return $scope.customSelectors && config.sort && $scope.definition.type === 'FullDevicesList' && $scope.toggleAdvanced === 2;\n            }\n\n            $scope.showCustomFields = function() {\n                return $scope.definition.type === 'FullDevicesList' && $scope.toggleAdvanced === 2 && $scope.search.customFilter && $scope.filterAvailable && !$scope.editMode;\n            }\n\n            $scope.changeDirection = function() {\n                var direction = config.sort.direction;\n                if (direction === 'DESCENDING') {\n                    $scope.config.sort.direction = 'ASCENDING'\n                } else if (direction === 'ASCENDING') {\n                    $scope.config.sort.direction = 'DESCENDING'\n                }\n                $scope.reload();\n            }\n\n            $scope.changeDefaultTab = function() {\n\n\n                $scope.reload();\n            }\n\n            $scope.debugQuery = function() {\n                Filter.parseQuery($scope.search.oql || '')\n                    .then(function(data) {\n                        //$scope.elementos = data;\n                        $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\n                        $scope.unknownWords = '';\n                        $scope.filter.error = null;\n                    })\n                    .catch(function(err) {\n                        $scope.filter.error = err;\n                        // Tratar el error\n                    });\n\n            }\n\n            $scope.autocomplete_options = function() {\n                var autocomplete_options = {\n                    suggest: Filter.suggest_field_delimited,\n                    customSelectors: config.widgetSelectors()\n                };\n\n                return autocomplete_options;\n\n            };\n\n            // Multiple selection\n            $scope.selectedItems = {};\n\n            // Gestor de seleccion\n            $scope.selectionManager = {\n                currentSelection: $scope.selectedItems,\n                isSelected: function(key, obj) {\n                    if ($scope.selectedItems[key] && !angular.isUndefined(obj)) {\n                        $scope.selectedItems[key].data = obj;\n                    }\n\n                    return $scope.selectedItems[key] ? true : false;\n                },\n                totalSelected: function() {\n                    return Object.keys($scope.selectedItems).length;\n                }\n            };\n\n            $scope.manageSelectedItems = function() {\n                var selectionScope = $scope.$new();\n\n                selectionScope.selectionConfig = config.selectionConfig;\n\n                selectionScope.selectedItems = [];\n                angular.forEach($scope.selectedItems, function(value, key) {\n                    selectionScope.selectedItems.push({\n                        key: key,\n                        value: value\n                    });\n                });\n\n                selectionScope.currentSelection = {\n                    selected: selectionScope.selectedItems\n                };\n\n                var manageItemsSelectedTemplate = adfTemplatePath + 'widget-selection.html';\n                var opts = {\n                    scope: selectionScope,\n                    templateUrl: manageItemsSelectedTemplate,\n                    backdrop: 'static',\n                    size: 'lg',\n                    animation: true\n                };\n\n                var instance = $uibModal.open(opts);\n\n                selectionScope.restoreSelection = function() {\n                    selectionScope.currentSelection = {\n                        selected: selectionScope.selectedItems\n                    };\n                };\n\n                selectionScope.clearSelection = function() {\n                    selectionScope.currentSelection.selected = [];\n                };\n\n                // Cierra sy guarda los datos de nueva selección\n                selectionScope.applyFilter = function(type) {\n                    var customOql = selectionScope.selectionConfig.filterAction(selectionScope.currentSelection.selected, type);\n\n                    if (!angular.isUndefined(customOql) && customOql !== null) {\n                        $scope.toggleAdvanced = 0;\n                        Filter.parseQuery(customOql).then(function(data) {\n                            $scope.search.oql = customOql;\n                            $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\n                            $scope.unknownWords = '';\n                            $scope.filter.error = null;\n\n                            $scope.launchSearchingAdv();\n                        }).catch(function(err) {\n                            $scope.filter.error = err;\n                        });\n                    }\n                };\n\n                selectionScope.executeOperation = function(operationType) {\n                    if (!$scope.editMode) {\n                        $scope.$parent.$broadcast('widgetExecuteOperation', {\n                            'selectedItems': selectionScope.currentSelection.selected,\n                            'type': operationType\n                        });\n                    }\n                };\n\n                // Cierra sy guarda los datos de nueva selección\n                selectionScope.saveChangesDialog = function() {\n                    var finalSelection = {};\n                    angular.forEach(selectionScope.currentSelection.selected, function(data, idx) {\n                        finalSelection[data.key] = {\n                            data: data.value.data,\n                            visible: data.value.visible\n                        };\n                    });\n\n                    $scope.selectedItems = angular.copy(finalSelection);\n                    $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n\n                    $scope.selectionManager.lastItem = {};\n                    $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n\n                    instance.close();\n                    selectionScope.$destroy();\n                };\n\n                // Cierra sin realizar ninguna acción\n                selectionScope.closeDialog = function() {\n                    instance.close();\n                    selectionScope.$destroy();\n                };\n            };\n\n\n            // bind edit function\n            $scope.edit = function() {\n                var editScope = $scope.$new();\n                editScope.definition = angular.copy(definition);\n\n                var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\n                if (definition.editTemplateUrl) {\n                    adfEditTemplatePath = definition.editTemplateUrl;\n                }\n\n                var opts = {\n                    scope: editScope,\n                    templateUrl: adfEditTemplatePath,\n                    backdrop: 'static',\n                    size: 'lg'\n                };\n\n                var instance = $uibModal.open(opts);\n\n                editScope.closeDialog = function() {\n                    instance.close();\n                    editScope.$destroy();\n                };\n\n                // TODO create util method\n                function createApplyPromise(result) {\n                    var promise;\n                    if (typeof result === 'boolean') {\n                        var deferred = $q.defer();\n                        if (result) {\n                            deferred.resolve();\n                        } else {\n                            deferred.reject();\n                        }\n                        promise = deferred.promise;\n                    } else {\n                        promise = $q.when(result);\n                    }\n                    return promise;\n                }\n\n                editScope.saveDialog = function() {\n                    // clear validation error\n                    editScope.validationError = null;\n\n                    // build injection locals\n                    var widget = $scope.widget;\n\n                    // create a default apply method for widgets\n                    // without edit mode\n                    // see issue https://goo.gl/KHPQLZ\n                    var applyFn;\n                    if (widget.edit) {\n                        applyFn = widget.edit.apply;\n                    } else {\n                        applyFn = function() {\n                            return true;\n                        };\n                    }\n\n                    // injection locals\n                    var locals = {\n                        widget: widget,\n                        definition: editScope.definition,\n                        config: editScope.definition.config\n                    };\n\n                    // invoke apply function and apply if success\n                    var result = $injector.invoke(applyFn, applyFn, locals);\n                    createApplyPromise(result).then(function() {\n                        definition.title = editScope.definition.title;\n                        angular.extend(definition.config, editScope.definition.config);\n\n                        editScope.closeDialog();\n\n                        if (widget.edit && widget.edit.reload) {\n                            // reload content after edit dialog is closed\n                            $scope.$broadcast('widgetConfigChanged');\n                        }\n                    }, function(err) {\n                        if (err) {\n                            editScope.validationError = err;\n                        } else {\n                            editScope.validationError = 'VALIDATION_DURING_APPLY_FAILED';\n                        }\n                    });\n                };\n\n            };\n\n\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            templateUrl: dashboard.customWidgetTemplatePath ? dashboard.customWidgetTemplatePath : adfTemplatePath + 'widget.html',\n            scope: {\n                definition: '=',\n                col: '=column',\n                editMode: '=',\n                options: '=',\n                widgetState: '='\n            },\n            controller: function($scope) {\n                var adfDashboardCollapseExpand = $scope.$on('adfDashboardCollapseExpand', function(event, args) {\n                    $scope.widgetState.isCollapsed = args.collapseExpandStatus;\n                });\n\n                var adfWidgetEnterEditMode = $scope.$on('adfWidgetEnterEditMode', function(event, widget) {\n                    if (dashboard.idEquals($scope.definition.wid, widget.wid)) {\n                        $scope.edit();\n                    }\n                });\n\n                var adfIsEditMode = $scope.$on('adfIsEditMode', function(event, widget) {\n                    $scope.editing = true;\n                });\n\n                var adfDashboardChanged = $scope.$on('adfDashboardChanged', function(event, widget) {\n                    $scope.editing = false;\n                });\n\n                var adfDashboardEditsCancelled = $scope.$on('adfDashboardEditsCancelled', function(event, widget) {\n                    $scope.editing = false;\n                });\n\n                $scope.widgetClasses = function(w, definition) {\n                    var classes = definition.styleClass || '';\n                    // w is undefined, if the type of the widget is unknown\n                    // see issue #216\n                    if (!w || !w.frameless || $scope.editMode) {\n                        classes += ' panel panel-default';\n                    }\n                    return classes;\n                };\n\n                $scope.openFullScreen = function() {\n                    var definition = $scope.definition;\n                    var fullScreenScope = $scope.$new();\n                    var opts = {\n                        scope: fullScreenScope,\n                        templateUrl: adfTemplatePath + 'widget-fullscreen.html',\n                        size: definition.modalSize || 'lg', // 'sm', 'lg'\n                        backdrop: 'static',\n                        windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n                    };\n\n                    var instance = $uibModal.open(opts);\n                    fullScreenScope.closeDialog = function() {\n                        instance.close();\n                        fullScreenScope.$destroy();\n                    };\n                };\n\n                $scope.openFilter = function() {\n\n                }\n\n                $scope.openAboutScreen = function(size) {\n                    size = 'md';\n                    var modalInstance = $uibModal.open({\n                        animation: true,\n                        templateUrl: 'widgetAboutModal.html',\n                        controller: function($scope, $uibModalInstance, information) {\n                            $scope.about = {};\n                            $scope.about.info = information;\n                            $scope.ok = function() {\n                                $uibModalInstance.close();\n                            };\n                        },\n                        'size': size,\n                        resolve: {\n                            information: function() {\n                                return $scope.config.about;\n                            }\n                        }\n                    });\n\n                    modalInstance.result.then(function(selectedItem) {\n                        $scope.selected = selectedItem;\n                    }, function() {\n                        $log.info('Modal dismissed at: ' + new Date());\n                    });\n                };\n\n                $scope.saveWidgetScreen = function(wId) {\n                    $scope.$emit('generateSnapshot', {\n                        'objectSelector': '.widget_' + wId,\n                        'fileName': 'capture_' + new Date().getTime()\n                    });\n                };\n\n                var onWindowTimeChanged = function(timeObj) {\n                    var filter = {\n                        and: []\n                    };\n                    if (timeObj && timeObj.from) {\n                        filter.and.push({\n                            gt: {\n                                operationDate: timeObj.from\n                            }\n                        });\n\n                        if (timeObj.to) {\n                            filter.and.push({\n                                lt: {\n                                    operationDate: timeObj.to\n                                }\n                            });\n                        }\n                    } else {\n                        filter = null;\n                    }\n                    return filter;\n                }\n\n                var createQuickFilter = function(fieldsQuickSearch, filter) {\n                    var _filter = {\n                        or: []\n                    };\n                    var criteria;\n                    fieldsQuickSearch.forEach(function(field) {\n                        criteria = {};\n                        criteria[field.operator] = {};\n                        criteria[field.operator][field.name] = $scope.config.filter;\n                        _filter.or.push(criteria);\n                    });\n                    return _filter;\n                }\n\n                $scope.downloadCsv = function() {\n                    var columns = $scope.config.columns;\n                    var scope_filter = $scope.config.filter;\n                    var extra_filter;\n                    var final_filter = {};\n                    var order = $scope.config.sort ? $scope.config.sort : undefined;\n                    if ($scope.config.windowFilter) {\n                        var window_filter = $scope.config.onWindowTimeChanged($scope.config.windowFilter);\n                        if (window_filter && window_filter.and) {\n                            extra_filter = {\n                                and: window_filter.and\n                            };\n                        }\n                    }\n                    var filter;\n                    if (scope_filter.value && scope_filter.value.length > 4) {\n                        filter = JSON.parse(scope_filter.value);\n                    } else if (typeof scope_filter === 'string' && scope_filter.trim() !== '') {\n                        filter = createQuickFilter($scope.config.fieldsQuickSearch, scope_filter);\n                    }\n                    if (extra_filter) {\n                        if (filter) {\n                            final_filter = {\n                                and: [extra_filter, filter]\n                            };\n                        } else {\n                            final_filter = extra_filter;\n                        }\n                    } else {\n                        final_filter = filter;\n                    }\n                    $scope.$broadcast('downloadCsv', {\n                        'columns': columns,\n                        'filter': final_filter,\n                        'order': order\n                    });\n                };\n\n                $scope.generateQR = function() {\n                    $scope.$broadcast('generateQR');\n                };\n\n                var addItemToSelection = $scope.$on('addItemToSelection', function(event, item) {\n                    if (!$scope.selectedItems[item.key]) {\n                        $scope.selectedItems[item.key] = {\n                            data: item.data,\n                            visible: item.visible\n                        };\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n                        item.isSelected = true;\n                        $scope.selectionManager.lastItem = item;\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n                    }\n\n                });\n\n                var removeItemFromSelection = $scope.$on('removeItemFromSelection', function(event, item) {\n                    if ($scope.selectedItems[item.key]) {\n                        delete $scope.selectedItems[item.key];\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n                        item.isSelected = false;\n                        $scope.selectionManager.lastItem = item;\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n                    }\n                });\n\n                $scope.$on('$destroy', function() {\n                    adfDashboardCollapseExpand();\n                    adfWidgetEnterEditMode();\n                    adfIsEditMode();\n                    adfDashboardChanged();\n                    adfDashboardEditsCancelled();\n                    addItemToSelection();\n                    removeItemFromSelection();\n                });\n            },\n            compile: function() {\n\n                /**\n                 * use pre link, because link of widget-content\n                 * is executed before post link widget\n                 */\n                return {\n                    pre: preLink,\n                    post: postLink\n                };\n            }\n        };\n\n    });\n})(window);"]}