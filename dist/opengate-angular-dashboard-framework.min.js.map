{"version":3,"sources":["adf.js","dashboard.js","grid.js","order-by-object-key.js","provider.js","widget-content.js","widget-grid.js","widget-service.js","opengate-angular-dashboard-framework.js"],"names":["window","undefined","angular","module","value","directive","$rootScope","$log","$timeout","$uibModal","dashboard","adfTemplatePath","$translate","Upload","stringToBoolean","string","isDefined","toLowerCase","Boolean","createConfiguration","type","cfg","config","widgets","copy","createWidget","wdgt","widget","addNewWidgetToModel","model","name","forceToSave","grid","newWidget","width","height","x","y","definition","push","$broadcast","error","isEditModeImmediate","edit","immediate","openEditMode","$scope","createCategories","categories","forEach","key","category","title","instant","description","isUndefined","createCategoriesList","categoryTags","categoriesTmp","split","allWidgetCategoriesTranslated","idx","translatedCat","indexOf","toString","replace","restrict","transclude","scope","collapsible","editable","editMode","continuousEditMode","maximizable","adfModel","adfWidgetFilter","hideButtons","extraData","controller","getNewModalScope","$new","widgetFilter","_getReloadWidgets","reloadWidgets","configChange","reload","ftype","Ftype","id","wid","filter","w","f","ft","updateWidgetFilters","widgetFilters","length","element","options","$watch","oldVal","newVal","titleTemplateUrl","toggleEditMode","openConfigWindow","modelCopy","editDashboardDialog","adfToggleEditMode","$on","event","isNewDashboard","adfCancelEditMode","cancelEditMode","adfWidgetRemoved","index","widgetTmp","splice","adfEditDashboardDialog","adfLaunchSearchingFromWidget","adfWindowTimeChangedFromWidget","editDashboardScope","backgroundColor","time","Date","backgroundImage","file","backgroundSize","backgroundImageSize","100% 100%","contain","cover","iconConfiguration","iconType","url","icon","image","imageSelected","base64DataUrl","then","removeDataFile","backgroundImageSelected","removeBackgroundFile","adfEditTemplatePath","editTemplateUrl","instance","open","templateUrl","backdrop","keyboard","size","closeDialog","close","$destroy","adfOpenWidgetFromOther","internal_config","_config","merge","adfOpenModalWidgetFromOther","widgetType","sendSelection","fullScreenScope","opts","modalSize","windowClass","temporal","persistDashboard","this","$parent","adfAddWidgetDialog","addWidgetDialog","addScopeCfg","widgetSortingDirection","widgetSorting","addScope","isFunction","availableCategories","adfAddTemplatePath","addTemplateUrl","widgetFilterCfg","addWidget","changeThumbnail","images","_currThumb","_currImg","link","$element","$attr","enableConfirmDelete","editing","preLink","gridOptions","cellHeight","verticalMargin","animate","float","alwaysShowResizeHandle","minWidth","auto","resizable","handles","disableDrag","disableResize","gsHandler","compile","pre","dashEvents","enable","disable","GridStackUI","Utils","sort","onChange","items","onDragStart","ui","console","log","onDragStop","onResizeStart","onResizeStop","onItemAdded","item","onItemRemoved","dashEvt","$filter","array","objectKey","provider","widgetsPath","messageTemplate","loadingTemplate","customWidgetTemplatePath","defaultApplyFunction","extend","frameless","apply","path","template","templatePath","$get","cid","getTime","idEquals","other","$q","widgetService","$compile","$controller","$injector","renderError","msg","warn","html","compileWidget","currentScope","configChanged","_getWindowTime","from","newScope","windowFilter","to","moment","subtract","_d","translateMessage","content","extra","is_menu","menu","isPaginationEnable","reloadData","navOptionsHandler","firstLoad","renderWidget","is_itemsPerPage","itemsPerPage","page","getWindowTime","winTime","eval","rawdate","format","templateScope","_from","selectionManager","base","resolvers","$tpl","getTemplate","resolve","promise","isString","get","invoke","all","locals","resolveAs","templateCtrl","controllerAs","children","data","contents","reason","require","filterHandler","widgetActionsHandler","attrs","adfWidgetGridCtrl","search","widgetConfigChangedEvt","changeWidgets","widgetReloadEvt","reloadWidget","$interval","Filter","toastr","styleClass","fromJson","show_modal_footer","show_reload_config","widgetState","isCollapsed","collapsed","debug","postLink","deleteWidget","remove","deleteScope","deleteTemplateUrl","deleteDialog","print","isExecuteOperationEnabled","entityKey","headersFilter","oql","executeOperation","typeFilter","showFilter","showFinalFilter","launchSearching","preventRefreshFilterEvent","launchSearchingAdv","filterApplied","executeSearch","quick","json","Object","keys","trim","launchSearchingQuick","launchSearchingShared","shared","filterSharedSelect","$item","$model","filterSharedRemove","timeObj","enter","keycode","keyCode","which","customSelectors","getCustomSelectors","widgetSelectors","findFields","fields","$apply","err","changeDirection","direction","debugQuery","parseQuery","toJson","unknownWords","filter_error","autocomplete_options","suggest","suggest_field_delimited","selectedItems","currentSelection","isSelected","obj","totalSelected","sendEntities","manageSelectedItems","selectionScope","selectionConfig","operationTypes","filterTypes","selected","manageItemsSelectedTemplate","animation","restoreSelection","clearSelection","applyFilter","customOql","filterAction","operationType","saveChangesDialog","finalSelection","visible","selectedItemsLength","lastItem","createApplyPromise","result","deferred","defer","reject","when","editScope","saveDialog","validationError","applyFn","editScopeDefinition","setReloadTimeout","_setFilterType","selectFilter","filterId","_widgetFilters","sharedFilters","loadingData","startLoading","stopLoading","lastMessageTime","setStatusMessage","message","statusMessage","changeFilter","actions","setActions","adfDashboardCollapseExpand","args","collapseExpandStatus","adfWidgetEnterEditMode","adfIsEditMode","adfDashboardChanged","widgetConfigChanged","adfDashboardEditsCancelled","openFullScreen","$emit","openAboutScreen","modalInstance","$uibModalInstance","information","about","info","ok","selectedItem","saveWidgetScreen","wId","objectSelector","fileName","createQuickFilter","fieldsQuickSearch","criteria","_filter","or","field","operator","downloadCsv","extra_filter","columns","scope_filter","final_filter","order","window_filter","onWindowTimeChanged","and","JSON","parse","generateQR","stopReloadTimeout","addItemToSelection","removeItemFromSelection","reloadPeriod","isNaN","cancel","post","factory","$http","$sce","$templateCache","parseUrl","parsedUrl","substring","exposed","tpl","getTrustedResourceUrl","success","response","put"],"mappings":"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","file":"opengate-angular-dashboard-framework.min.js","sourcesContent":["/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf', ['adf.provider', 'ui.bootstrap', 'opengate-angular-js'])\n    .value('adfTemplatePath', '../src/templates/')\n    .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\n    .value('adfVersion', '<<adfVersion>>');","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @ngdoc directive\n * @name adf.directive:adfDashboard\n * @element div\n * @restrict EA\n * @scope\n * @description\n *\n * `adfDashboard` is a directive which renders the dashboard with all its\n * components. The directive requires a name attribute. The name of the\n * dashboard can be used to store the model.\n *\n * @param {string} name name of the dashboard. This attribute is required.\n * @param {boolean=} editable false to disable the editmode of the dashboard.\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\n * @param {object=} adfModel model object of the dashboard.\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\n *                   events during edit mode not reset it if edit mode is exited.\n * @param {boolean=} categories enable categories for the add widget dialog.\n */\n\nangular.module('adf')\n    .directive('adfDashboard', function($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath, $translate, Upload) {\n        'use strict';\n\n        function stringToBoolean(string) {\n            switch (angular.isDefined(string) ? string.toLowerCase() : null) {\n                case 'true':\n                case 'yes':\n                case '1':\n                    return true;\n                case 'false':\n                case 'no':\n                case '0':\n                case null:\n                    return false;\n                default:\n                    return Boolean(string);\n            }\n        }\n\n        function createConfiguration(type) {\n            var cfg = {};\n            var config = dashboard.widgets[type].config || {};\n            cfg = angular.copy(config);\n            return cfg;\n        }\n\n        function createWidget(type) {\n            var wdgt = {};\n            var widget = dashboard.widgets[type];\n            if (widget) {\n                wdgt = angular.copy(widget);\n            }\n            return wdgt;\n        }\n\n        /**\n         * Adds the widget to first column of the model.\n         *\n         * @param dashboard model\n         * @param widget to add to model\n         * @param name name of the dashboard\n         */\n        function addNewWidgetToModel(model, widget, name, forceToSave) {\n            if (model) {\n                if (!model.grid) {\n                    model.grid = [];\n                }\n\n                var newWidget = {\n                    width: 3,\n                    height: 2,\n                    x: 0,\n                    y: 0,\n                    definition: widget\n                };\n                model.grid.push(newWidget);\n\n                $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\n\n                if (forceToSave) {\n                    $rootScope.$broadcast('adfDashboardChanged', name, model);\n                }\n            } else {\n                $log.error('model is undefined');\n            }\n        }\n\n        /**\n         * Checks if the edit mode of the widget should be opened immediately.\n         *\n         * @param widget type\n         */\n        function isEditModeImmediate(type) {\n            var widget = dashboard.widgets[type];\n            return widget && widget.edit && widget.edit.immediate;\n        }\n\n        /**\n         * Opens the edit mode of the specified widget.\n         *\n         * @param dashboard scope\n         * @param widget\n         */\n        function openEditMode($scope, widget) {\n            // wait some time before fire enter edit mode event\n            $timeout(function() {\n                $scope.$broadcast('adfWidgetEnterEditMode', widget);\n            }, 200);\n        }\n\n        /**\n         * Creates object with the category name as key and an array of widgets as value.\n         *\n         * @param widgets array of widgets\n         *\n         * @return array of categories\n         */\n        function createCategories(widgets) {\n            var categories = {};\n            angular.forEach(widgets, function(widget, key) {\n                var category = widget.category;\n                // if the widget has no category use a default one\n                if (!category) {\n                    category = 'ADF.CATEGORY.MISCELANOUS';\n                }\n\n                widget.title = $translate.instant(widget.title);\n                widget.description = $translate.instant(widget.description);\n                widget.category = $translate.instant(widget.category);\n\n                // push widget to category array\n                if (angular.isUndefined(categories[widget.category])) {\n                    categories[widget.category] = {\n                        widgets: {}\n                    };\n                }\n\n                categories[widget.category].widgets[key] = widget;\n            });\n            return categories;\n        }\n\n        function createCategoriesList(widgets) {\n            var categories = [];\n            angular.forEach(widgets, function(widget, key) {\n                if (!widget.category) {\n                    widget.category = 'ADF.CATEGORY.MISCELLANEOUS';\n                }\n\n                widget.title = $translate.instant(widget.title);\n                widget.description = $translate.instant(widget.description);\n                widget.category = $translate.instant(widget.category);\n\n                if (!widget.categoryTags) {\n                    widget.categoryTags = 'ADF.CATEGORY.TAG.MISCELLANEOUS';\n                }\n\n                var categoriesTmp = widget.categoryTags.split(',');\n\n                var allWidgetCategoriesTranslated = [];\n                angular.forEach(categoriesTmp, function(category, idx) {\n                    // push widget to category array\n                    var translatedCat = $translate.instant(category);\n                    if (categories.indexOf(translatedCat) === -1) {\n                        categories.push(translatedCat);\n                    }\n\n                    if (allWidgetCategoriesTranslated.indexOf(translatedCat) === -1) {\n                        allWidgetCategoriesTranslated.push(translatedCat);\n                    }\n                });\n                widget.categoryTags = allWidgetCategoriesTranslated.toString();\n\n            });\n            return categories;\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            scope: {\n                name: '@',\n                collapsible: '@',\n                editable: '@',\n                editMode: '@',\n                continuousEditMode: '=',\n                maximizable: '@',\n                adfModel: '=',\n                adfWidgetFilter: '=',\n                categories: '@',\n                hideButtons: '=',\n                extraData: '='\n            },\n            controller: function($scope) {\n                var model = {};\n                var widgetFilter = null;\n                var name = $scope.name;\n\n                var _getReloadWidgets = function(widget) {\n                    var reloadWidgets = {\n                        configChange: [],\n                        reload: []\n                    };\n                    if (widget) {\n                        var definition = angular.copy(widget.definition);\n                        var ftype = definition.Ftype;\n                        var id = definition.wid;\n                        var config = definition.config || {};\n                        var filter = config.filter;\n                        model.grid.forEach(function(w) {\n                            var f = w.definition.config.filter;\n                            var ft = w.definition.Ftype;\n                            //solo recargamos y actualizamos los widgets:\n                            // - que tengan filtro\n                            // y que el id tenga filtro\n                            // y que el id del filtro coincida con el wid del widget que ha modificado el fitro\n                            if (f && f.id && f.id === id) {\n                                w.definition.config.filter = filter;\n                                w.definition.config.filter.id = id;\n                                reloadWidgets.reload.push(w.definition.wid);\n                            } else if (ftype === ft) {\n                                reloadWidgets.configChange.push(w.definition.wid);\n                            }\n                        });\n                    }\n                    return reloadWidgets;\n                };\n\n                var updateWidgetFilters = function(model) {\n                    var widgetFilters = [];\n                    var grid = model.grid;\n                    if (grid && grid.length > 0) {\n                        grid.forEach(function(element) {\n                            var definition = element.definition;\n                            var config = definition.config || {};\n                            var filter = config.filter;\n                            widgetFilters.push({\n                                wid: definition.wid,\n                                title: definition.title,\n                                filter: filter,\n                                Ftype: definition.Ftype\n                            });\n                        });\n                    }\n                    if (!$scope.options) {\n                        $scope.options = {\n                            extraData: {}\n                        };\n                    }\n                    $scope.options.extraData.widgetFilters = widgetFilters;\n                };\n                // Watching for changes on adfModel\n                $scope.$watch('adfModel', function(oldVal, newVal) {\n                    // has model changed or is the model attribute not set\n                    if (newVal !== null || (oldVal === null && newVal === null)) {\n                        model = $scope.adfModel;\n                        widgetFilter = $scope.adfWidgetFilter;\n\n                        if (model) {\n                            updateWidgetFilters(model);\n                            if (!model.title) {\n                                model.title = $translate.instant('ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD');\n                            }\n                            if (!model.titleTemplateUrl) {\n                                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\n                            }\n                            $scope.model = model;\n                        } else {\n                            $log.error('could not find or create model');\n                        }\n                    }\n                }, true);\n\n                // edit mode\n                $scope.editMode = false;\n\n                function getNewModalScope() {\n                    var scope = $scope.$new();\n                    return scope;\n                }\n\n                $scope.toggleEditMode = function(openConfigWindow) {\n                    $scope.editMode = !$scope.editMode;\n                    if ($scope.editMode) {\n                        if (!$scope.continuousEditMode) {\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\n                            $rootScope.$broadcast('adfIsEditMode');\n                        }\n\n                        if (openConfigWindow) {\n                            $scope.editDashboardDialog();\n                        }\n                    }\n\n                    if (!$scope.editMode) {\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\n                    }\n                };\n\n                var adfToggleEditMode = $scope.$on('adfToggleEditMode', function(event, isNewDashboard) {\n                    if (isNewDashboard) {\n                        $scope.toggleEditMode(true);\n                    } else {\n                        $scope.toggleEditMode();\n                    }\n                });\n\n                var adfCancelEditMode = $scope.$on('adfCancelEditMode', function(event) {\n                    if ($scope.editMode) {\n                        $scope.cancelEditMode();\n                    }\n                });\n\n                var adfWidgetRemoved = $scope.$on('adfWidgetRemovedFromGrid', function(event, widget) {\n                    var index = null;\n                    angular.forEach($scope.adfModel.grid, function(widgetTmp, idx) {\n                        if (widgetTmp.definition.wid === widget.wid) {\n                            index = idx;\n                        }\n                    });\n\n                    if (index >= 0) {\n                        $scope.adfModel.grid.splice(index, 1);\n                    }\n                });\n\n                $scope.cancelEditMode = function() {\n                    $scope.editMode = false;\n                    if (!$scope.continuousEditMode && ($scope.modelCopy !== $scope.adfModel)) {\n                        $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\n                    }\n                    $rootScope.$broadcast('adfDashboardEditsCancelled');\n                };\n\n                var adfEditDashboardDialog = $scope.$on('adfEditDashboardDialog', function(event) {\n                    if ($scope.editMode) {\n                        $scope.editDashboardDialog();\n                    }\n                });\n\n\n                var adfLaunchSearchingFromWidget = $scope.$on('adfLaunchSearchingFromWidget', function(event, widget) {\n                    var reloadWidgets = _getReloadWidgets(widget);\n                    $rootScope.$broadcast('adfFilterChanged', name, model, reloadWidgets);\n                });\n                var adfWindowTimeChangedFromWidget = $scope.$on('adfWindowTimeChangedFromWidget', function(event) {\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\n                });\n\n                // edit dashboard settings\n                $scope.editDashboardDialog = function() {\n                    var editDashboardScope = getNewModalScope();\n                    // create a copy of the title, to avoid changing the title to\n                    // \"dashboard\" if the field is empty\n                    editDashboardScope.copy = {\n                        title: (model.title !== 'ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD' ? model.title : ''),\n                        description: model.description,\n                        backgroundColor: model.backgroundColor ? model.backgroundColor : undefined,\n                        time: new Date(),\n                        backgroundImage: model.backgroundImage ? model.backgroundImage : undefined,\n                        file: model.backgroundImage ? model.backgroundImage : undefined,\n                    };\n\n                    editDashboardScope.backgroundSize = {\n                        name: 'backgroundSize',\n                        model: model.backgroundImageSize ? model.backgroundImageSize : '100% 100%',\n                        options: {\n                            '100% 100%': {\n                                title: $translate.instant('SIZE_CONF.AUTO')\n                            },\n                            'contain': {\n                                title: $translate.instant('SIZE_CONF.CONTAIN')\n                            },\n                            'cover': {\n                                title: $translate.instant('SIZE_CONF.COVER')\n                            }\n                        }\n                    };\n\n                    editDashboardScope.iconConfiguration = {\n                        name: 'iconConfiguration',\n                        model: model.iconType ? model.iconType : 'icon',\n                        url: undefined,\n                        file: undefined,\n                        iconType: model.iconType ? model.iconType : 'icon',\n                        icon: model.iconType === 'icon' ? model.icon : 'fa-tachometer',\n                        options: {\n                            'icon': {\n                                title: $translate.instant('ICON.LIBRARY'),\n                            },\n                            'image': {\n                                title: $translate.instant('ICON.IMAGE')\n                            }\n                        }\n                    };\n                    if (editDashboardScope.iconConfiguration.iconType === 'image') {\n                        editDashboardScope.iconConfiguration.file = model.icon;\n                        editDashboardScope.iconConfiguration.url = model.icon;\n                    }\n                    editDashboardScope.imageSelected = function(file) {\n                        if (file) {\n                            editDashboardScope.iconConfiguration.file = file;\n                            Upload.base64DataUrl(file).then(\n                                function(url) {\n                                    editDashboardScope.iconConfiguration.url = url;\n                                    editDashboardScope.iconConfiguration.file = url;\n                                    editDashboardScope.iconConfiguration.iconType = 'image';\n\n                                });\n                        } else {\n                            editDashboardScope.removeDataFile();\n                        }\n                    };\n                    editDashboardScope.backgroundImageSelected = function(file) {\n                        if (file) {\n                            editDashboardScope.iconConfiguration.file = file;\n                            Upload.base64DataUrl(file).then(\n                                function(url) {\n                                    editDashboardScope.copy.backgroundImage = url;\n                                    editDashboardScope.copy.file = url;\n\n                                });\n                        } else {\n                            editDashboardScope.removeBackgroundFile();\n                        }\n                    };\n                    editDashboardScope.removeDataFile = function() {\n                        editDashboardScope.iconConfiguration.file = null;\n                        editDashboardScope.iconConfiguration.url = null;\n                    };\n                    editDashboardScope.removeBackgroundFile = function() {\n                        editDashboardScope.copy.backgroundImage = null;\n                        editDashboardScope.copy.file = null;\n\n                    };\n\n                    var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\n                    if (model.editTemplateUrl) {\n                        adfEditTemplatePath = model.editTemplateUrl;\n                    }\n                    var instance = $uibModal.open({\n                        scope: editDashboardScope,\n                        templateUrl: adfEditTemplatePath,\n                        backdrop: 'static',\n                        keyboard: false,\n                        size: 'lg'\n                    });\n\n\n                    editDashboardScope.closeDialog = function() {\n                        // copy the new title back to the model\n                        model.title = editDashboardScope.copy.title;\n                        model.description = editDashboardScope.copy.description;\n                        if (editDashboardScope.iconConfiguration.model === 'image') {\n                            model.icon = editDashboardScope.iconConfiguration.url;\n\n                        } else if (editDashboardScope.iconConfiguration.model === 'icon') {\n                            model.icon = (editDashboardScope.iconConfiguration.icon && editDashboardScope.iconConfiguration.icon.key) || editDashboardScope.iconConfiguration.icon;\n\n                        }\n                        model.iconType = editDashboardScope.iconConfiguration.model;\n                        model.backgroundColor = editDashboardScope.copy.backgroundColor ? editDashboardScope.copy.backgroundColor : undefined;\n                        model.backgroundImage = editDashboardScope.copy.backgroundImage ? editDashboardScope.copy.backgroundImage : undefined;\n                        model.backgroundImageSize = editDashboardScope.backgroundSize.model;\n                        // close modal and destroy the scope\n                        instance.close();\n                        editDashboardScope.$destroy();\n                    };\n                };\n\n                var adfOpenWidgetFromOther = $scope.$on('adfOpenWidgetFromOther', function(event, widget, config) {\n\n                    var internal_config = createConfiguration(widget);\n                    var _config = angular.merge({}, internal_config, config || {});\n                    var w = {\n                        type: widget,\n                        config: _config,\n                        title: _config.title\n                    };\n                    addNewWidgetToModel(model, w, name, !$scope.editMode);\n                });\n\n                var adfOpenModalWidgetFromOther = $scope.$on('adfOpenModalWidgetFromOther', function(event, widgetType, config) {\n                    var templateUrl = adfTemplatePath + 'widget-fullscreen.html';\n                    var _config = config || {};\n                    if (_config.sendSelection) {\n                        templateUrl = adfTemplatePath + 'widget-fullscreen-selection.html';\n                    }\n                    var widget = createWidget(widgetType);\n                    widget.config = angular.merge({}, widget.config, _config);\n                    widget.type = widgetType;\n                    if (widget.config.title) {\n                        widget.title = widget.config.title;\n                    }\n                    var fullScreenScope = $scope.$new();\n                    fullScreenScope.definition = fullScreenScope.widget = widget;\n                    var opts = {\n                        scope: fullScreenScope,\n                        templateUrl: templateUrl,\n                        size: fullScreenScope.definition.modalSize || 'el',\n                        backdrop: 'static',\n                        windowClass: (fullScreenScope.definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n                    };\n\n                    if ($scope.model && !$scope.model.temporal) {\n                        fullScreenScope.persistDashboard = function() {\n                            $rootScope.$broadcast('adfOpenWidgetFromOther', this.$parent.widget.type, this.$parent.widget.config || {});\n                            this.closeDialog();\n                        };\n                    }\n\n                    var instance = $uibModal.open(opts);\n                    fullScreenScope.closeDialog = function() {\n                        instance.close();\n                        fullScreenScope.$destroy();\n                    };\n\n\n                });\n\n                var adfAddWidgetDialog = $scope.$on('adfAddWidgetDialog', function(event) {\n                    if (!model.temporal && model.editable) {\n                        if (!$scope.editMode) {\n                            $scope.editMode = true;\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\n                            $rootScope.$broadcast('adfIsEditMode');\n                        }\n\n                        $scope.addWidgetDialog();\n                    }\n                });\n\n                // add widget dialog\n                $scope.addScopeCfg = {\n                    widgetFilter: {},\n                    widgetSortingDirection: '',\n                    widgetSorting: 'priority'\n                };\n\n                $scope.addWidgetDialog = function() {\n                    var addScope = getNewModalScope();\n                    var widgets;\n                    if (angular.isFunction(widgetFilter)) {\n                        widgets = {};\n                        angular.forEach(dashboard.widgets, function(widget, type) {\n                            if (widgetFilter(widget, type, model)) {\n                                widgets[type] = widget;\n                            }\n                        });\n                    } else {\n                        widgets = dashboard.widgets;\n                    }\n                    addScope.widgets = widgets;\n\n                    angular.forEach(addScope.widgets, function(widget, type) {\n                        widget.key = type;\n                        if (!widget.category) {\n                            widget.category = 'ADF.CATEGORY.MISCELLANEOUS';\n                        }\n                    });\n\n                    // pass createCategories function to scope, if categories option is enabled\n                    if ($scope.options.categories) {\n                        addScope.createCategories = createCategories;\n                    } else {\n                        addScope.availableCategories = createCategoriesList(widgets);\n                    }\n\n                    var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\n                    if (model.addTemplateUrl) {\n                        adfAddTemplatePath = model.addTemplateUrl;\n                    }\n\n                    var opts = {\n                        scope: addScope,\n                        templateUrl: adfAddTemplatePath,\n                        backdrop: 'static',\n                        size: 'lg'\n                    };\n\n                    var instance = $uibModal.open(opts);\n\n                    addScope.widgetFilterCfg = $scope.addScopeCfg;\n\n                    addScope.addWidget = function(widget) {\n                        var w = {\n                            type: widget,\n                            Ftype: dashboard.widgets[widget].Ftype || null,\n                            config: createConfiguration(widget)\n                        };\n                        addNewWidgetToModel(model, w, name);\n                        // close and destroy\n                        instance.close();\n                        addScope.$destroy();\n\n                        // check for open edit mode immediately\n                        if (isEditModeImmediate(widget)) {\n                            openEditMode($scope, w);\n                        }\n                    };\n\n                    addScope.changeThumbnail = function(widget) {\n                        if (widget.images) {\n                            if (angular.isUndefined(widget._currThumb)) {\n                                widget._currThumb = 1;\n                            } else {\n                                widget._currThumb += 1;\n                            }\n\n\n                            if (widget._currThumb >= widget.images.length) {\n                                widget._currThumb = 0;\n                            }\n\n                            widget._currImg = widget.images[widget._currThumb];\n                        }\n                    };\n\n                    addScope.closeDialog = function() {\n                        // close and destroy\n                        instance.close();\n                        addScope.$destroy();\n                    };\n                };\n\n                $scope.addNewWidgetToModel = addNewWidgetToModel;\n\n                $scope.$on('destroy', function() {\n                    adfLaunchSearchingFromWidget();\n                    adfWindowTimeChangedFromWidget();\n                    adfToggleEditMode();\n                    adfOpenWidgetFromOther();\n                    adfOpenModalWidgetFromOther();\n                    adfCancelEditMode();\n                    adfAddWidgetDialog();\n                    adfEditDashboardDialog();\n                    adfWidgetRemoved();\n                });\n            },\n            link: function($scope, $element, $attr) {\n                // pass options to scope\n                var options = {\n                    name: $attr.name,\n                    editable: true,\n                    enableConfirmDelete: stringToBoolean($attr.enableConfirmDelete),\n                    maximizable: stringToBoolean($attr.maximizable),\n                    collapsible: stringToBoolean($attr.collapsible),\n                    categories: stringToBoolean($attr.categories),\n                    extraData: {}\n                };\n\n                if (angular.isDefined($attr.editable)) {\n                    options.editable = stringToBoolean($attr.editable);\n                }\n\n                if (angular.isDefined($scope.extraData)) {\n                    options.extraData = $scope.extraData;\n                }\n\n                options.extraData.editing = $scope.editMode;\n\n                $scope.options = options;\n            },\n            templateUrl: adfTemplatePath + 'dashboard.html'\n        };\n    });","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the 'Software'), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/* global angular */\nangular.module('adf')\n    .directive('adfDashboardGrid', function(adfTemplatePath) {\n        'use strict';\n\n        function preLink($scope) {\n            $scope.gridOptions = {\n                cellHeight: 146,\n                verticalMargin: 10,\n                animate: true,\n                float: false,\n                alwaysShowResizeHandle: true,\n                minWidth: 768,\n                auto: true,\n                resizable: {\n                    handles: 'e, se, s, sw, w'\n                },\n                disableDrag: !$scope.editMode,\n                disableResize: !$scope.editMode\n            };\n\n            $scope.gsHandler = null;\n        }\n\n        return {\n            restrict: 'E',\n            scope: {\n                adfModel: '=',\n                editMode: '=',\n                continuousEditMode: '=',\n                options: '='\n            },\n            templateUrl: adfTemplatePath + 'dashboard-grid.html',\n            compile: function() {\n                return {\n                    pre: preLink,\n                };\n            },\n            controller: function($scope, $timeout) {\n                var dashEvents = [];\n                dashEvents.push($scope.$on('adfIsEditMode', function() {\n                    $timeout(function() {\n                        $scope.gsHandler.enable();\n                    }, 100);\n                }));\n\n                dashEvents.push($scope.$on('adfDashboardChanged', function() {\n                    $timeout(function() {\n                        $scope.gsHandler.disable();\n                    }, 100);\n                }));\n\n                dashEvents.push($scope.$on('adfDashboardEditsCancelled', function() {\n                    $timeout(function() {\n                        $scope.gsHandler.disable();\n                    }, 100);\n                }));\n\n                dashEvents.push($scope.$on('adfCancelEditMode', function() {\n                    $timeout(function() {\n                        $scope.gsHandler.disable();\n                    }, 100);\n                }));\n\n                dashEvents.push($scope.$on('adfWidgetAdded', function(event) {\n                    $timeout(function() {\n                        $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\n                        $scope.gsHandler.enable();\n                    }, 100);\n                }));\n\n                $scope.onChange = function(event, items) {\n                    //console.log('onChange event: ' + event + ' items:' + items);\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\n                };\n\n                $scope.onDragStart = function(event, ui) {\n                    console.log('onDragStart event: ' + event + ' ui:' + ui);\n                };\n\n                $scope.onDragStop = function(event, ui) {\n                    console.log('onDragStop event: ' + event + ' ui:' + ui);\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\n                };\n\n                $scope.onResizeStart = function(event, ui) {\n                    console.log('onResizeStart event: ' + event + ' ui:' + ui);\n                };\n\n                $scope.onResizeStop = function(event, ui) {\n                    console.log('onResizeStop event: ' + event + ' ui:' + ui);\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\n                    $scope.$broadcast('OnResizeWidget');\n                };\n\n                $scope.onItemAdded = function(item) {\n                    console.log('onItemAdded item: ' + item);\n                };\n\n                $scope.onItemRemoved = function(item) {\n                    console.log('onItemRemoved item: ' + item);\n                };\n\n                $scope.$on('destroy', function() {\n                    dashEvents.forEach(function(dashEvt) {\n                        dashEvt();\n                    });\n                });\n            }\n        };\n    });","/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .filter('adfOrderByObjectKey', function($filter) {\n    'use strict';\n\n    return function(item, key){\n      var array = [];\n      angular.forEach(item, function(value, objectKey){\n        value[key] = objectKey;\n        array.push(value);\n      });\n      return $filter('orderBy')(array, key);\n    };\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\n/**\n * @ngdoc object\n * @name adf.dashboardProvider\n * @description\n *\n * The dashboardProvider can be used to register widgets.\n */\nangular.module('adf.provider', [])\n    .provider('dashboard', function () {\n\n        var widgets = {};\n        var widgetsPath = '';\n        var messageTemplate = '<div class=\"alert alert-primary\">{}</div>';\n        var loadingTemplate = '\\\n      <div class=\"progress progress-striped active\">\\n\\\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\n          <span class=\"sr-only\" translate>FORM.MSG.LOADING ...</span>\\n\\\n        </div>\\n\\\n      </div>';\n        var customWidgetTemplatePath = null;\n\n        // default apply function of widget.edit.apply\n        var defaultApplyFunction = function () {\n            return true;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#widget\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Registers a new widget.\n         *\n         * @param {string} name of the widget\n         * @param {object} widget to be registered.\n         *\n         *   Object properties:\n         *\n         *   - `title` - `{string=}` - The title of the widget.\n         *   - `description` - `{string=}` - Description of the widget.\n         *   - `category` - `{string=}` - Category of the widget.\n         *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\n         *   - `config` - `{object}` - Predefined widget configuration.\n         *   - `controller` - `{string=|function()=}` - Controller fn that should be\n         *      associated with newly created scope of the widget or the name of a\n         *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\n         *      if passed as a string.\n         *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\n         *      published to scope under the `controllerAs` name.\n         *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\n         *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\n         *   - `template` - `{string=|function()=}` - html template as a string.\n         *   - `templateUrl` - `{string=}` - path to an html template.\n         *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\n         *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n         *      be injected into the controller. If any of these dependencies are promises, the widget\n         *      will wait for them all to be resolved or one to be rejected before the controller is\n         *      instantiated.\n         *      If all the promises are resolved successfully, the values of the resolved promises are\n         *      injected.\n         *\n         *      The map object is:\n         *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n         *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n         *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\n         *        and the return value is treated as the dependency. If the result is a promise, it is\n         *        resolved before its value is injected into the controller.\n         *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n         *      on the scope of the widget.\n         *   - `edit` - `{object}` - Edit modus of the widget.\n         *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n         *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\n         *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n         *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\n         *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\n         *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n         *        on the scope of the widget.\n         *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\n         *        Default is true.\n         *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\n         *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\n         *        The function have to return a boolean or an promise which can be resolved to a boolean.\n         *        The function can use injection.\n         *\n         * @returns {Object} self\n         */\n        this.widget = function (name, widget) {\n            var w = angular.extend({\n                reload: false,\n                frameless: false\n            }, widget);\n            if (w.edit) {\n                var edit = {\n                    reload: true,\n                    immediate: false,\n                    apply: defaultApplyFunction\n                };\n                angular.extend(edit, w.edit);\n                w.edit = edit;\n            }\n            //OUW-1610\n            if (!w.config) {\n                w.config = {};\n            }\n            widgets[name] = w;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#widgetsPath\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Sets the path to the directory which contains the widgets. The widgets\n         * path is used for widgets with a templateUrl which contains the\n         * placeholder {widgetsPath}. The placeholder is replaced with the\n         * configured value, before the template is loaded, but the template is\n         * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\n         * The default value of widgetPaths is ''.\n         *\n         *\n         * @param {string} path to the directory which contains the widgets\n         *\n         * @returns {Object} self\n         */\n        this.widgetsPath = function (path) {\n            widgetsPath = path;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#messageTemplate\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the template for messages.\n         *\n         * @param {string} template for messages.\n         *\n         * @returns {Object} self\n         */\n        this.messageTemplate = function (template) {\n            messageTemplate = template;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#loadingTemplate\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the template which is displayed as\n         * long as the widget resources are not resolved.\n         *\n         * @param {string} template loading template\n         *\n         * @returns {Object} self\n         */\n        this.loadingTemplate = function (template) {\n            loadingTemplate = template;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#customWidgetTemplatePath\n         * @propertyOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the container template for the widgets\n         *\n         * @param {string} path to the custom widget template\n         *\n         * @returns {Object} self\n         */\n        this.customWidgetTemplatePath = function (templatePath) {\n            customWidgetTemplatePath = templatePath;\n            return this;\n        };\n\n        /**\n         * @ngdoc service\n         * @name adf.dashboard\n         * @description\n         *\n         * The dashboard holds all options and  widgets.\n         *\n         * @property {Array.<Object>} widgets Array of registered widgets.\n         * @property {string} widgetsPath Default path for widgets.\n         * @property {string} messageTemplate Template for messages.\n         * @property {string} loadingTemplate Template for widget loading.\n         * * @property {string} customWidgetTemplatePath Changes the container template for the widgets\n         *\n         * @returns {Object} self\n         */\n        this.$get = function () {\n            var cid = 0;\n\n            return {\n                widgets: widgets,\n                widgetsPath: widgetsPath,\n                messageTemplate: messageTemplate,\n                loadingTemplate: loadingTemplate,\n                customWidgetTemplatePath: customWidgetTemplatePath,\n\n                /**\n                 * @ngdoc method\n                 * @name adf.dashboard#id\n                 * @methodOf adf.dashboard\n                 * @description\n                 *\n                 * Creates an ongoing numeric id. The method is used to create ids for\n                 * columns and widgets in the dashboard.\n                 */\n                id: function () {\n                    return new Date().getTime() + '-' + (++cid);\n                },\n\n                /**\n                 * @ngdoc method\n                 * @name adf.dashboard#idEqual\n                 * @methodOf adf.dashboard\n                 * @description\n                 *\n                 * Checks if the given ids are equal.\n                 *\n                 * @param {string} id widget or column id\n                 * @param {string} other widget or column id\n                 */\n                idEquals: function (id, other) {\n                    // use toString, because old ids are numbers\n                    return ((id) && (other)) && (id.toString() === other.toString());\n                }\n            };\n        };\n\n    });","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf')\n    .directive('adfWidgetContent', function ($log, $q, widgetService,\n        $compile, $controller, $injector, dashboard, $translate) {\n\n        function renderError($element, msg) {\n            $log.warn(msg);\n            $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\n        }\n\n        function compileWidget($scope, $element, currentScope, configChanged) {\n            var model = $scope.model;\n            if (!model) {\n                $translate('ADF.ERROR.MODEL_IS_UNDEFINED').then(function (translateMessage) {\n                    renderError($element, translateMessage);\n                });\n                return currentScope;\n            }\n\n            var content = $scope.content;\n\n            if (!content) {\n                $translate('ADF.ERROR.WIDGET_FOR_DEPRECTATED', {\n                    title: model.title\n                }).then(function (translateMessage) {\n                    renderError($element, translateMessage);\n                });\n                return currentScope;\n            }\n\n            var extra = $scope.extra;\n            var newScope = currentScope;\n\n            if (newScope) {\n                var is_menu = newScope.menu !== undefined && newScope.menu !== null && (!newScope.isPaginationEnable || !newScope.isPaginationEnable());\n                if (is_menu || configChanged || !angular.isFunction(newScope.reloadData)) {\n                    if ($scope.navOptionsHandler) {\n                        $scope.navOptionsHandler.firstLoad = true;\n                    }\n                    newScope = renderWidget($scope, $element, currentScope, model, content, extra);\n                } else {\n                    var is_itemsPerPage = newScope.itemsPerPage !== undefined && newScope.itemsPerPage !== null;\n                    if (is_itemsPerPage || newScope.page) {\n                        newScope.page = 1;\n                    }\n                    newScope.reloadData();\n                }\n            } else {\n                if ($scope.navOptionsHandler) {\n                    $scope.navOptionsHandler.firstLoad = true;\n                }\n\n                newScope = renderWidget($scope, $element, currentScope, model, content, extra);\n            }\n\n            function _getWindowTime(type) {\n                if (type === 'custom') {\n                    return {\n                        from: newScope.config.windowFilter.from,\n                        to: newScope.config.windowFilter.to\n                    };\n                }\n                var from = window.moment().subtract(1, type);\n                return {\n                    from: from._d\n                };\n            }\n\n\n\n            newScope.config.getWindowTime = function () {\n                var windowFilter = newScope.config.windowFilter;\n                if (windowFilter && windowFilter.type) {\n                    var winTime = _getWindowTime(windowFilter.type);\n                    /* jshint ignore:start */\n                    if (!window.eval(newScope.config.windowFilter.rawdate)) {\n                        for (var key in winTime) {\n                            winTime[key] = window.moment(winTime[key]).format();\n                        }\n                        winTime['rawdate'] = true;\n                    }\n                    /* jshint ignore:end */\n                    return winTime;\n                }\n            };\n\n            if (extra) {\n                newScope.editing = extra.editing ? true : false;\n                newScope.extraData = extra;\n            }\n\n            return newScope;\n        }\n\n        function renderWidget($scope, $element, currentScope, model, content, extra) {\n            // display loading template\n            $element.html(dashboard.loadingTemplate);\n\n            // create new scope\n            var templateScope = $scope.$new();\n\n            // pass config object to scope\n            if (!model.config) {\n                model.config = {};\n            }\n\n            templateScope.config = model.config;\n            templateScope.editing = extra && extra.editing;\n\n            if (extra) {\n                templateScope.extra = extra;\n            }\n\n            var _from = currentScope || templateScope.config;\n            templateScope.selectionManager = (_from) ? _from.selectionManager : undefined;\n\n            // local injections\n            var base = {\n                $scope: templateScope,\n                widget: model,\n                config: model.config\n            };\n\n            // get resolve promises from content object\n            var resolvers = {};\n            resolvers.$tpl = widgetService.getTemplate(content);\n            if (content.resolve) {\n                angular.forEach(content.resolve, function (promise, key) {\n                    if (angular.isString(promise)) {\n                        resolvers[key] = $injector.get(promise);\n                    } else {\n                        resolvers[key] = $injector.invoke(promise, promise, base);\n                    }\n                });\n            }\n\n            // resolve all resolvers\n            $q.all(resolvers).then(function (locals) {\n                angular.extend(locals, base);\n\n                // pass resolve map to template scope as defined in resolveAs\n                if (content.resolveAs) {\n                    templateScope[content.resolveAs] = locals;\n                }\n\n                // compile & render template\n                var template = locals.$tpl;\n                $element.html(template);\n                if (content.controller) {\n                    var templateCtrl = $controller(content.controller, locals);\n                    if (content.controllerAs) {\n                        templateScope[content.controllerAs] = templateCtrl;\n                    }\n                    $element.children().data('$ngControllerController', templateCtrl);\n                }\n                $compile($element.contents())(templateScope);\n            }, function (reason) {\n                // handle promise rejection\n                var msg = 'ADF.ERROR.COULD_NOT_RESOLVE_ALL_PROMISSES';\n                $translate(msg, {\n                    reason: (reason ? ': ' + reason : reason)\n                }).then(function (translateMessage) {\n                    renderError($element, translateMessage);\n                });\n            });\n\n            // destroy old scope\n            if (currentScope) {\n                currentScope.$destroy();\n            }\n\n            return templateScope;\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            require: '?^^adfWidgetGrid',\n            scope: {\n                model: '=',\n                content: '=',\n                extra: '=',\n                navOptionsHandler: '=?',\n                filterHandler: '=?',\n                widgetActionsHandler: '=?'\n            },\n            link: function ($scope, $element, attrs, adfWidgetGridCtrl) {\n                var currentScope = compileWidget($scope, $element, null);\n                if (adfWidgetGridCtrl) {\n                    $scope.search = $scope.search || {};\n                    adfWidgetGridCtrl.updateWidgetFilters($scope.model.config.filter && $scope.model.config.filter.id);\n                }\n\n                var widgetConfigChangedEvt = $scope.$on('widgetConfigChanged', function (event, changeWidgets) {\n                    if (changeWidgets) {\n                        if (changeWidgets.indexOf($scope.model.wid) !== -1 && adfWidgetGridCtrl) {\n                            adfWidgetGridCtrl.updateWidgetFilters($scope.model.config.filter && $scope.model.config.filter.id, true);\n                        }\n                    } else {\n                        currentScope = compileWidget($scope, $element, currentScope, true);\n                    }\n                });\n\n                var widgetReloadEvt = $scope.$on('widgetReload', function (event, reloadWidgets) {\n                    var reloadWidget = true;\n                    if (reloadWidgets && reloadWidgets.length > 0) {\n                        reloadWidget = reloadWidgets.indexOf($scope.model.wid) !== -1;\n                    }\n                    if (reloadWidget) {\n                        currentScope = compileWidget($scope, $element, currentScope, false);\n                        if (adfWidgetGridCtrl && adfWidgetGridCtrl.updateWidgetFilters) {\n                            adfWidgetGridCtrl.updateWidgetFilters($scope.model.config.filter && $scope.model.config.filter.id);\n                        }\n                    }\n                });\n\n                $scope.$on('destroy', function () {\n                    widgetConfigChangedEvt();\n                    widgetReloadEvt();\n                });\n            }\n        };\n    });","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf')\n    .directive('adfWidgetGrid', function($injector, $q, $log, $uibModal, $rootScope, $interval, dashboard, adfTemplatePath, Filter, toastr, $translate) {\n        function preLink($scope) {\n            var definition = $scope.definition;\n\n            if (definition) {\n                var w = dashboard.widgets[definition.type];\n                if (w) {\n                    // pass title\n                    if (!definition.title) {\n                        definition.title = w.title;\n                    }\n\n                    definition.titleTemplateUrl = adfTemplatePath + 'widget-grid-title.html';\n\n                    if (!definition.editTemplateUrl) {\n                        definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\n                        if (w.editTemplateUrl) {\n                            definition.editTemplateUrl = w.editTemplateUrl;\n                        }\n                    }\n\n                    if (!definition.titleTemplateUrl) {\n                        definition.frameless = w.frameless;\n                    }\n\n                    if (!definition.styleClass) {\n                        definition.styleClass = w.styleClass;\n                    }\n\n                    // set id for sortable\n                    if (!definition.wid) {\n                        definition.wid = dashboard.id();\n                    }\n\n                    // pass copy of widget to scope\n                    $scope.widget = angular.copy(w);\n\n                    // create config object\n                    var config = definition.config;\n                    if (config) {\n                        if (angular.isString(config)) {\n                            config = angular.fromJson(config);\n                        }\n                    } else {\n                        config = {};\n                    }\n                    // pass config to scope\n                    $scope.config = config;\n\n                    if (typeof $scope.widget.show_modal_footer === 'undefined') {\n                        $scope.widget.show_modal_footer = true;\n                    }\n\n                    if (typeof $scope.widget.show_reload_config === 'undefined') {\n                        $scope.widget.show_reload_config = true;\n                    }\n\n                    // collapse exposed $scope.widgetState property\n                    if (!$scope.widgetState) {\n                        $scope.widgetState = {};\n                        $scope.widgetState.isCollapsed = (w.collapsed === true) ? w.collapsed : false;\n                    }\n\n                } else {\n                    $log.warn('could not find widget ' + definition.type);\n                }\n            } else {\n                $log.debug('definition not specified, widget was probably removed');\n            }\n        }\n\n        function postLink($scope, $element) {\n            var definition = $scope.definition;\n            if (!definition) {\n                $log.debug('widget not found');\n                return;\n            }\n            var config = $scope.config || {};\n\n            // bind close function\n            var deleteWidget = function() {\n                $element.remove();\n                $rootScope.$broadcast('adfWidgetRemovedFromGrid', definition);\n            };\n\n            $scope.remove = function() {\n                if ($scope.options.enableConfirmDelete) {\n                    var deleteScope = $scope.$new();\n\n                    var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\n                    if (definition.deleteTemplateUrl) {\n                        deleteTemplateUrl = definition.deleteTemplateUrl;\n                    }\n                    var opts = {\n                        scope: deleteScope,\n                        templateUrl: deleteTemplateUrl,\n                        backdrop: 'static'\n                    };\n                    var instance = $uibModal.open(opts);\n\n                    deleteScope.closeDialog = function() {\n                        instance.close();\n                        deleteScope.$destroy();\n                    };\n                    deleteScope.deleteDialog = function() {\n                        deleteWidget();\n                        deleteScope.closeDialog();\n                    };\n                } else {\n                    deleteWidget();\n                }\n            };\n\n\n            $scope.print = function() {\n                if (!$scope.editMode) {\n                    $scope.$broadcast('widgetPrint');\n                }\n            };\n\n            $scope.isExecuteOperationEnabled = function() {\n\n                if (config.entityKey)\n                    return true;\n                var filter = config.filter;\n\n                if (filter) {\n                    if (filter.headersFilter && filter.headersFilter.length > 0) {\n                        return true;\n                    } else {\n                        if (filter.type === \"basic\") {\n                            return filter.value.length > 0;\n                        }\n                        if (filter.type === \"advanced\") {\n                            return filter.value.length > 2 && filter.oql;\n                        }\n                    }\n                }\n\n                return false;\n            };\n\n            $scope.executeOperation = function() {\n                if (!$scope.editMode) {\n\n                    $scope.$parent.$broadcast('widgetExecuteOperation');\n                }\n            };\n\n            $scope.filter = {\n                typeFilter: 1,\n                showFilter: false,\n                showFinalFilter: false\n            };\n\n            $scope.launchSearching = function() {\n                if ($scope.widget && !$scope.widget.preventRefreshFilterEvent) {\n                    var widget = {\n                        definition: definition,\n                        element: $element\n                    };\n\n                    $rootScope.$broadcast('adfLaunchSearchingFromWidget', widget, $scope.config.filter);\n                }\n\n                $scope.reload();\n            };\n\n\n            $scope.launchSearchingAdv = function() {\n                if (!$scope.filterApplied) {\n                    var executeSearch = true;\n                    $scope.search.quick = '';\n                    if ($scope.search.json === '' || $scope.search.json === '{}' || (!angular.isString($scope.search.json) && Object.keys($scope.search.json).length === 0)) {\n                        if ($scope.search.oql && $scope.search.oql.trim().length > 0) {\n                            toastr.error($translate.instant(\"TOASTR.FILTER_IS_MALFORMED\"));\n                            executeSearch = false;\n                        } else {\n                            $scope.config.filter = {\n                                type: 'advanced',\n                                oql: '',\n                                value: ''\n                            };\n                        }\n                    } else {\n                        $scope.config.filter = {\n                            type: 'advanced',\n                            oql: $scope.search.oql,\n                            value: $scope.search.json,\n                            headersFilter: $scope.config.filter.headersFilter\n                        };\n                    }\n\n                    if (executeSearch) {\n                        $scope.launchSearching();\n                        $scope.filterApplied = true;\n                    }\n                }\n            };\n\n            $scope.launchSearchingQuick = function() {\n                if (!$scope.filterApplied) {\n                    $scope.search.oql = $scope.search.json = '';\n                    $scope.config.filter = {\n                        type: 'basic',\n                        value: $scope.search.quick,\n                        headersFilter: $scope.config.filter.headersFilter\n                    };\n                    $scope.launchSearching();\n                    $scope.filterApplied = true;\n                }\n            };\n\n            $scope.launchSearchingShared = function() {\n                // if (!$scope.filterApplied) {\n                var shared = $scope.search.id;\n                if (shared) {\n                    shared.filter.id = shared.wid;\n                    $scope.config.filter = shared.filter;\n                } else {\n                    $scope.config.filter = {};\n                }\n                $scope.launchSearching();\n                $scope.filterApplied = true;\n                // }\n            };\n\n            $scope.filterSharedSelect = function($item, $model) {\n                $scope.filterApplied = false;\n                $scope.launchSearchingShared();\n            };\n            $scope.filterSharedRemove = function($item, $model) {\n                $scope.filterApplied = false;\n            };\n\n            var windowTimeChanged = $scope.$on('onWindowTimeChanged', function(event, timeObj) {\n                $scope.config.windowFilter = timeObj ? timeObj : (config.windowFilter ? {} : timeObj);\n                var widget = {\n                    definition: definition,\n                    element: $element\n                };\n                $rootScope.$broadcast('adfWindowTimeChangedFromWidget', widget, $scope.config.windowFilter);\n                $scope.reload();\n            });\n\n            $scope.enter = function(event) {\n                var keycode = (event.keyCode ? event.keyCode : event.which);\n                if (keycode === 13) {\n                    if ($scope.filter.typeFilter === 0)\n                        $scope.launchSearchingAdv();\n                    if ($scope.filter.typeFilter === 1)\n                        $scope.launchSearchingQuick();\n                    if ($scope.filter.typeFilter === 2)\n                        $scope.launchSearchingShared();\n                } else if (keycode === 19) {\n                    $scope.filter.showFinalFilter = !$scope.filter.showFinalFilter;\n                } else {\n                    $scope.filterApplied = false;\n                }\n            };\n\n\n            $scope.customSelectors = [];\n            $scope.getCustomSelectors = function() {\n                if ($scope.config.customSelectors) {\n                    $scope.customSelectors = $scope.config.customSelectors;\n                } else {\n                    config.widgetSelectors().findFields('').then(function(fields) {\n                        $scope.customSelectors = fields;\n                        $scope.$apply();\n                    }).catch(function(err) {\n                        $log.error(err);\n                    });\n                }\n            };\n\n            $scope.changeDirection = function() {\n                var direction = config.sort.direction;\n                if (direction === 'DESCENDING') {\n                    $scope.config.sort.direction = 'ASCENDING';\n                } else if (direction === 'ASCENDING') {\n                    $scope.config.sort.direction = 'DESCENDING';\n                }\n                $scope.reload();\n            };\n\n            $scope.debugQuery = function() {\n                Filter.parseQuery($scope.search.oql || '')\n                    .then(function(data) {\n                        $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\n                        $scope.unknownWords = '';\n                        $scope.filter_error = null;\n                    })\n                    .catch(function(err) {\n                        $scope.filter_error = err;\n                        // Tratar el error\n                    });\n\n            };\n\n            $scope.autocomplete_options = function() {\n                var autocomplete_options = {\n                    suggest: Filter.suggest_field_delimited,\n                    customSelectors: config.widgetSelectors()\n                };\n\n                return autocomplete_options;\n\n            };\n\n            // Multiple selection\n            $scope.selectedItems = definition.selectedItems || {};\n\n            // Gestor de seleccion\n            $scope.selectionManager = {\n                currentSelection: $scope.selectedItems,\n                isSelected: function(key, obj) {\n                    if ($scope.selectedItems[key] && !angular.isUndefined(obj)) {\n                        $scope.selectedItems[key].data = obj;\n                    }\n\n                    return $scope.selectedItems[key] ? true : false;\n                },\n                totalSelected: function() {\n                    return Object.keys($scope.selectedItems).length;\n                }\n            };\n\n            if (definition.config.sendSelection) {\n\n                $scope.sendEntities = function() {\n                    definition.config.sendSelection($scope.selectedItems);\n                    $scope.$parent.closeDialog();\n                };\n\n                if (definition.config.selectedItems) {\n                    $scope.selectedItems = angular.copy(definition.config.selectedItems);\n                }\n\n                $scope.config.selectionManager = $scope.selectionManager;\n            }\n\n            $scope.manageSelectedItems = function() {\n                var selectionScope = $scope.$new();\n\n                if (definition.config.sendSelection) {\n                    delete config.selectionConfig.operationTypes;\n                    delete config.selectionConfig.filterTypes;\n                }\n\n                selectionScope.selectionConfig = config.selectionConfig;\n\n                selectionScope.selectedItems = [];\n                angular.forEach($scope.selectedItems, function(value, key) {\n                    selectionScope.selectedItems.push({\n                        key: key,\n                        value: value\n                    });\n                });\n\n                selectionScope.currentSelection = {\n                    selected: selectionScope.selectedItems\n                };\n\n                var manageItemsSelectedTemplate = adfTemplatePath + 'widget-selection.html';\n                var opts = {\n                    scope: selectionScope,\n                    templateUrl: manageItemsSelectedTemplate,\n                    backdrop: 'static',\n                    size: 'lg',\n                    animation: true\n                };\n\n                var instance = $uibModal.open(opts);\n\n                selectionScope.restoreSelection = function() {\n                    selectionScope.currentSelection = {\n                        selected: selectionScope.selectedItems\n                    };\n                };\n\n                selectionScope.clearSelection = function() {\n                    selectionScope.currentSelection.selected = [];\n                };\n\n                // Cierra sy guarda los datos de nueva selección\n                selectionScope.applyFilter = function(type) {\n                    var customOql = selectionScope.selectionConfig.filterAction(selectionScope.currentSelection.selected, type);\n\n                    if (!angular.isUndefined(customOql) && customOql !== null) {\n                        $scope.filter.typeFilter = 0;\n                        Filter.parseQuery(customOql).then(function(data) {\n                            $scope.search.oql = customOql;\n                            $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\n                            $scope.unknownWords = '';\n                            $scope.filter_error = null;\n\n                            $scope.launchSearchingAdv();\n                        }).catch(function(err) {\n                            $scope.filter_error = err;\n                        });\n                    }\n                };\n\n                selectionScope.executeOperation = function(operationType) {\n                    if (!$scope.editMode) {\n                        $scope.$parent.$broadcast('widgetExecuteOperation', {\n                            'selectedItems': selectionScope.currentSelection.selected,\n                            'type': operationType\n                        });\n                    }\n                };\n\n                // Cierra sy guarda los datos de nueva selección\n                selectionScope.saveChangesDialog = function() {\n                    var finalSelection = {};\n                    angular.forEach(selectionScope.currentSelection.selected, function(data, idx) {\n                        finalSelection[data.key] = {\n                            data: data.value.data,\n                            visible: data.value.visible\n                        };\n                    });\n\n                    $scope.selectedItems = angular.copy(finalSelection);\n                    $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n\n                    $scope.selectionManager.lastItem = {};\n                    $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n\n                    instance.close();\n                    selectionScope.$destroy();\n                };\n\n                // Cierra sin realizar ninguna acción\n                selectionScope.closeDialog = function() {\n                    instance.close();\n                    selectionScope.$destroy();\n                };\n            };\n\n\n            // bind edit function\n            $scope.edit = function() {\n                var editScope = $scope.$new();\n                editScope.definition = angular.copy(definition);\n\n                var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\n                if (definition.editTemplateUrl) {\n                    adfEditTemplatePath = definition.editTemplateUrl;\n                }\n\n                var opts = {\n                    scope: editScope,\n                    templateUrl: adfEditTemplatePath,\n                    backdrop: 'static',\n                    size: 'lg'\n                };\n\n                var instance = $uibModal.open(opts);\n\n                editScope.closeDialog = function() {\n                    instance.close();\n                    editScope.$destroy();\n                };\n\n                // TODO create util method\n                function createApplyPromise(result) {\n                    var promise;\n                    if (typeof result === 'boolean') {\n                        var deferred = $q.defer();\n                        if (result) {\n                            deferred.resolve();\n                        } else {\n                            deferred.reject();\n                        }\n                        promise = deferred.promise;\n                    } else {\n                        promise = $q.when(result);\n                    }\n                    return promise;\n                }\n\n                editScope.saveDialog = function() {\n                    // clear validation error\n                    editScope.validationError = null;\n\n                    // build injection locals\n                    var widget = $scope.widget;\n\n                    // create a default apply method for widgets\n                    // without edit mode\n                    // see issue https://goo.gl/KHPQLZ\n                    var applyFn;\n                    if (widget.edit) {\n                        applyFn = widget.edit.apply;\n                    } else {\n                        applyFn = function() {\n                            return true;\n                        };\n                    }\n\n                    var editScopeDefinition = editScope.definition.config || {};\n                    // injection locals\n                    var locals = {\n                        widget: widget,\n                        definition: editScope.definition,\n                        config: editScopeDefinition\n                    };\n\n                    // invoke apply function and apply if success\n                    var result = $injector.invoke(applyFn, applyFn, locals);\n                    createApplyPromise(result).then(function() {\n                        definition.title = editScope.definition.title;\n                        if (editScope.definition.type === 'summaryChart') {\n                            editScope.definition.Ftype = editScope.definition.config.type.toLowerCase();\n                            definition.Ftype = editScope.definition.config.type.toLowerCase();\n                        }\n                        angular.extend(definition.config, editScopeDefinition);\n\n                        editScope.closeDialog();\n\n                        if (widget.edit && widget.edit.reload) {\n                            $scope.setReloadTimeout();\n                            // reload content after edit dialog is closed\n                            $scope.$broadcast('widgetConfigChanged');\n                        }\n                    }, function(err) {\n                        if (err) {\n                            editScope.validationError = err;\n                        } else {\n                            editScope.validationError = 'VALIDATION_DURING_APPLY_FAILED';\n                        }\n                    });\n                };\n\n            };\n\n\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            templateUrl: adfTemplatePath + 'widget-grid.html',\n            scope: {\n                definition: '=',\n                editMode: '=',\n                options: '=',\n                widgetState: '='\n            },\n            controller: function($scope) {\n                var _setFilterType = function(selectFilter) {\n                    var config = $scope.config || {};\n                    var filter = config.filter = config.filter ? config.filter : {};\n                    var id = filter.id = selectFilter && filter.id;\n                    filter.headersFilter = selectFilter && filter.headersFilter;\n                    switch (filter.type) {\n                        case 'advanced':\n                            $scope.filter.typeFilter = id ? 2 : 0;\n                            $scope.search = {\n                                oql: filter.oql,\n                                json: filter.value\n                            };\n                            break;\n                        case 'basic':\n                            $scope.filter.typeFilter = id ? 2 : 1;\n                            $scope.search = {\n                                quick: filter.value\n                            };\n\n                            break;\n                        default:\n                            $scope.filter.typeFilter = id ? 2 : 1;\n                            $scope.search = {\n                                quick: filter.value = ''\n                            };\n                            break;\n                    }\n                    $scope.search.id = selectFilter;\n                };\n\n                this.updateWidgetFilters = function(filterId, configChange) {\n                    if ($scope.options && $scope.options.extraData && $scope.options.extraData.widgetFilters) {\n                        var _widgetFilters = $scope.options.extraData.widgetFilters;\n                        var model = $scope.definition;\n                        var selectFilter;\n                        var sharedFilters = _widgetFilters.filter(function(widgetFilter) {\n                            // Recuperamos solos los filtros de widgets que cumplan las condiciones:\n                            // - No tenga un filtro heredado como filtro\n                            // - El tipo de filtro sea igual que el widget que pueda heredarlo (Ftype)\n                            // - No recuperamos el filtro propio del widget  \n                            var shared = (!widgetFilter.filter || !widgetFilter.filter.id) && (widgetFilter.Ftype === model.Ftype) && (widgetFilter.wid !== model.wid);\n                            if (shared && (filterId === widgetFilter.wid))\n                                selectFilter = widgetFilter;\n                            return shared;\n                        });\n\n                        $scope.sharedFilters = angular.copy(sharedFilters);\n                        if (!configChange || !selectFilter && !!filterId)\n                            _setFilterType(selectFilter);\n                    }\n\n                };\n\n                var definition = $scope.definition;\n\n\n                if (definition.config.selectedItems) {\n                    $scope.selectedItemsLength = Object.keys(definition.config.selectedItems).length;\n                }\n\n\n                // Controlador de la barra inferior de los widgets\n                $scope.navOptionsHandler = {\n                    firstLoad: true,\n                    loadingData: false,\n                    startLoading: function() {\n                        $scope.navOptionsHandler.loadingData = true;\n                    },\n                    stopLoading: function() {\n                        $scope.navOptionsHandler.firstLoad = false;\n                        $scope.navOptionsHandler.loadingData = false;\n                        $scope.navOptionsHandler.lastMessageTime = new Date();\n                    },\n                    setStatusMessage: function(message) {\n                        $scope.navOptionsHandler.statusMessage = message;\n                        $scope.navOptionsHandler.lastMessageTime = new Date();\n                    }\n                };\n\n                // Controlador de los parámetros del filtro\n                $scope.filterHandler = {\n                    changeFilter: function(filter, search, typeFilter) {\n                        $scope.search = search;\n                        $scope.filter.typeFilter = typeFilter;\n                    }\n                };\n\n                // Controlador de las custom actions del widget\n                $scope.widgetActionsHandler = {\n                    actions: [],\n                    setActions: function(actions) {\n                        $scope.widgetActionsHandler.actions = actions;\n                    }\n                };\n\n                var adfDashboardCollapseExpand = $scope.$on('adfDashboardCollapseExpand', function(event, args) {\n                    $scope.widgetState.isCollapsed = args.collapseExpandStatus;\n                });\n\n                var adfWidgetEnterEditMode = $scope.$on('adfWidgetEnterEditMode', function(event, widget) {\n                    if (dashboard.idEquals(definition.wid, widget.wid)) {\n                        $scope.edit();\n                    }\n                });\n\n                var adfIsEditMode = $scope.$on('adfIsEditMode', function(event, widget) {\n                    $scope.editing = true;\n                });\n\n                var adfDashboardChanged = $scope.$on('adfDashboardChanged', function(event, name, model) {\n                    //config.widgetSelectors = tiene filtro\n                    var widgetConfigChanged = [];\n                    var grid = model.grid;\n                    if (grid && grid.length > 0) {\n                        grid.forEach(function(element) {\n                            var definition = element.definition;\n                            widgetConfigChanged.push(definition.wid);\n                        });\n                        var widgetFilters = $scope.options.extraData && $scope.options.extraData.widgetFilters;\n                        var sharedFilters = widgetFilters.filter(function(widgetFilter) {\n                            var filter = widgetFilter.filter;\n                            return filter && !filter.id || widgetConfigChanged.indexOf(filter.id) !== -1;\n                        });\n                        $scope.sharedFilters = angular.copy(sharedFilters);\n                        $scope.editing = false;\n                        $scope.$broadcast('widgetConfigChanged', widgetConfigChanged);\n                    }\n                });\n\n                var adfDashboardEditsCancelled = $scope.$on('adfDashboardEditsCancelled', function(event, widget) {\n                    $scope.editing = false;\n                });\n\n                $scope.openFullScreen = function() {\n\n                    $scope.$emit('adfOpenModalWidgetFromOther', definition.type, $scope.config || {});\n                };\n\n                $scope.openAboutScreen = function(size) {\n                    size = 'md';\n                    var modalInstance = $uibModal.open({\n                        animation: true,\n                        templateUrl: 'widgetAboutModal.html',\n                        controller: function($scope, $uibModalInstance, information) {\n                            $scope.about = {};\n                            $scope.about.info = information;\n                            $scope.ok = function() {\n                                $uibModalInstance.close();\n                            };\n                        },\n                        'size': size,\n                        resolve: {\n                            information: function() {\n                                return $scope.config.about;\n                            }\n                        }\n                    });\n\n                    modalInstance.result.then(function(selectedItem) {\n                        $scope.selected = selectedItem;\n                    }, function() {\n                        $log.info('Modal dismissed at: ' + new Date());\n                    });\n                };\n\n                $scope.saveWidgetScreen = function(wId) {\n                    $scope.$emit('generateSnapshot', {\n                        'objectSelector': '.widget_' + wId,\n                        'fileName': 'capture_' + new Date().getTime()\n                    });\n                };\n\n                var createQuickFilter = function(fieldsQuickSearch) {\n                    var _filter = {\n                        or: []\n                    };\n                    var criteria;\n                    fieldsQuickSearch.forEach(function(field) {\n                        criteria = {};\n                        criteria[field.operator] = {};\n                        criteria[field.operator][field.name] = $scope.config.filter.value;\n                        _filter.or.push(criteria);\n                    });\n                    return _filter;\n                };\n\n                $scope.downloadCsv = function() {\n                    var columns = $scope.config.columns;\n                    var scope_filter = $scope.config.filter;\n                    var extra_filter;\n                    var final_filter = {};\n                    var order = $scope.config.sort ? $scope.config.sort : undefined;\n                    if ($scope.config.windowFilter) {\n                        var window_filter = $scope.config.onWindowTimeChanged($scope.config.windowFilter);\n                        if (window_filter && window_filter.and) {\n                            extra_filter = {\n                                and: window_filter.and\n                            };\n                        }\n                    }\n                    var filter;\n                    if (scope_filter.type && scope_filter.type === 'advanced' && scope_filter.value.length > 4) {\n                        filter = JSON.parse(scope_filter.value);\n                    } else if (scope_filter.type && scope_filter.type === 'basic' && scope_filter.value.trim() !== '') {\n                        filter = createQuickFilter($scope.config.fieldsQuickSearch, scope_filter.value);\n                    }\n                    if (extra_filter) {\n                        if (filter) {\n                            final_filter = {\n                                and: [extra_filter, filter]\n                            };\n                        } else {\n                            final_filter = extra_filter;\n                        }\n                    } else {\n                        final_filter = filter;\n                    }\n                    $scope.$broadcast('downloadCsv', {\n                        'columns': columns,\n                        'filter': final_filter,\n                        'order': order\n                    });\n                };\n\n                $scope.generateQR = function() {\n                    $scope.$broadcast('generateQR');\n                };\n\n                var addItemToSelection = $scope.$on('addItemToSelection', function(event, item) {\n                    if (!$scope.selectedItems[item.key]) {\n                        $scope.selectedItems[item.key] = {\n                            data: item.data,\n                            visible: item.visible\n                        };\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n                        item.isSelected = true;\n                        $scope.selectionManager.lastItem = item;\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n                    }\n\n                });\n\n                var removeItemFromSelection = $scope.$on('removeItemFromSelection', function(event, item) {\n                    if ($scope.selectedItems[item.key]) {\n                        delete $scope.selectedItems[item.key];\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n                        item.isSelected = false;\n                        $scope.selectionManager.lastItem = item;\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n                    }\n                });\n\n                // bind reload function\n                var stopReloadTimeout;\n\n                $scope.setReloadTimeout = function() {\n                    var config = $scope.config || $scope.definition.config || {};\n\n\n                    var reloadPeriod = config.reloadPeriod;\n                    if (!isNaN(reloadPeriod) && (reloadPeriod * 1) !== 0) {\n                        if (angular.isDefined(stopReloadTimeout)) {\n                            $interval.cancel(stopReloadTimeout);\n                            stopReloadTimeout = undefined;\n                        }\n                        stopReloadTimeout = $interval($scope.reload, (reloadPeriod * 1000));\n                    } else if (stopReloadTimeout) {\n                        $interval.cancel(stopReloadTimeout);\n                    }\n                };\n\n                $scope.reload = function() {\n                    $scope.$broadcast('widgetReload');\n\n                    $scope.setReloadTimeout();\n                };\n\n                // verificacion de periodo de refresco\n                $scope.setReloadTimeout();\n\n                $scope.$on('$destroy', function() {\n                    adfDashboardCollapseExpand();\n                    adfWidgetEnterEditMode();\n                    adfIsEditMode();\n                    adfDashboardChanged();\n                    adfDashboardEditsCancelled();\n                    addItemToSelection();\n                    removeItemFromSelection();\n                    $interval.cancel(stopReloadTimeout);\n                });\n            },\n            compile: function() {\n\n                /**\n                 * use pre link, because link of widget-content\n                 * is executed before post link widget\n                 */\n                return {\n                    pre: preLink,\n                    post: postLink\n                };\n            }\n        };\n\n    });","\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/**\n * The widget service provide helper functions to render widgets and their content.\n */\nangular.module('adf')\n  .factory('widgetService', function($http, $q, $sce, $templateCache, dashboard) {\n    'use strict';\n\n    function parseUrl(url) {\n      var parsedUrl = url;\n      if (url.indexOf('{widgetsPath}') >= 0) {\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\n                .replace('//', '/');\n        if (parsedUrl.indexOf('/') === 0) {\n          parsedUrl = parsedUrl.substring(1);\n        }\n      }\n      return parsedUrl;\n    }\n\n    var exposed = {};\n\n    exposed.getTemplate = function(widget){\n      var deferred = $q.defer();\n\n      if (widget.template) {\n        deferred.resolve(widget.template);\n      } else if (widget.templateUrl) {\n        // try to fetch template from cache\n        var tpl = $templateCache.get(widget.templateUrl);\n        if (tpl) {\n          deferred.resolve(tpl);\n        } else {\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\n          $http.get(url)\n               .success(function(response) {\n                 // put response to cache, with unmodified url as key\n                 $templateCache.put(widget.templateUrl, response);\n                 deferred.resolve(response);\n               })\n               .error(function() {\n                 deferred.reject('could not load template');\n               });\n        }\n      }\n\n      return deferred.promise;\n    };\n\n    return exposed;\n  });\n","(function(window, undefined) {'use strict';\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf', ['adf.provider', 'ui.bootstrap', 'opengate-angular-js'])\n    .value('adfTemplatePath', '../src/templates/')\n    .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\n    .value('adfVersion', '8.2.0');\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @ngdoc directive\n * @name adf.directive:adfDashboard\n * @element div\n * @restrict EA\n * @scope\n * @description\n *\n * `adfDashboard` is a directive which renders the dashboard with all its\n * components. The directive requires a name attribute. The name of the\n * dashboard can be used to store the model.\n *\n * @param {string} name name of the dashboard. This attribute is required.\n * @param {boolean=} editable false to disable the editmode of the dashboard.\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\n * @param {object=} adfModel model object of the dashboard.\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\n *                   events during edit mode not reset it if edit mode is exited.\n * @param {boolean=} categories enable categories for the add widget dialog.\n */\n\nangular.module('adf')\n    .directive('adfDashboard', function($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath, $translate, Upload) {\n        \n\n        function stringToBoolean(string) {\n            switch (angular.isDefined(string) ? string.toLowerCase() : null) {\n                case 'true':\n                case 'yes':\n                case '1':\n                    return true;\n                case 'false':\n                case 'no':\n                case '0':\n                case null:\n                    return false;\n                default:\n                    return Boolean(string);\n            }\n        }\n\n        function createConfiguration(type) {\n            var cfg = {};\n            var config = dashboard.widgets[type].config || {};\n            cfg = angular.copy(config);\n            return cfg;\n        }\n\n        function createWidget(type) {\n            var wdgt = {};\n            var widget = dashboard.widgets[type];\n            if (widget) {\n                wdgt = angular.copy(widget);\n            }\n            return wdgt;\n        }\n\n        /**\n         * Adds the widget to first column of the model.\n         *\n         * @param dashboard model\n         * @param widget to add to model\n         * @param name name of the dashboard\n         */\n        function addNewWidgetToModel(model, widget, name, forceToSave) {\n            if (model) {\n                if (!model.grid) {\n                    model.grid = [];\n                }\n\n                var newWidget = {\n                    width: 3,\n                    height: 2,\n                    x: 0,\n                    y: 0,\n                    definition: widget\n                };\n                model.grid.push(newWidget);\n\n                $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\n\n                if (forceToSave) {\n                    $rootScope.$broadcast('adfDashboardChanged', name, model);\n                }\n            } else {\n                $log.error('model is undefined');\n            }\n        }\n\n        /**\n         * Checks if the edit mode of the widget should be opened immediately.\n         *\n         * @param widget type\n         */\n        function isEditModeImmediate(type) {\n            var widget = dashboard.widgets[type];\n            return widget && widget.edit && widget.edit.immediate;\n        }\n\n        /**\n         * Opens the edit mode of the specified widget.\n         *\n         * @param dashboard scope\n         * @param widget\n         */\n        function openEditMode($scope, widget) {\n            // wait some time before fire enter edit mode event\n            $timeout(function() {\n                $scope.$broadcast('adfWidgetEnterEditMode', widget);\n            }, 200);\n        }\n\n        /**\n         * Creates object with the category name as key and an array of widgets as value.\n         *\n         * @param widgets array of widgets\n         *\n         * @return array of categories\n         */\n        function createCategories(widgets) {\n            var categories = {};\n            angular.forEach(widgets, function(widget, key) {\n                var category = widget.category;\n                // if the widget has no category use a default one\n                if (!category) {\n                    category = 'ADF.CATEGORY.MISCELANOUS';\n                }\n\n                widget.title = $translate.instant(widget.title);\n                widget.description = $translate.instant(widget.description);\n                widget.category = $translate.instant(widget.category);\n\n                // push widget to category array\n                if (angular.isUndefined(categories[widget.category])) {\n                    categories[widget.category] = {\n                        widgets: {}\n                    };\n                }\n\n                categories[widget.category].widgets[key] = widget;\n            });\n            return categories;\n        }\n\n        function createCategoriesList(widgets) {\n            var categories = [];\n            angular.forEach(widgets, function(widget, key) {\n                if (!widget.category) {\n                    widget.category = 'ADF.CATEGORY.MISCELLANEOUS';\n                }\n\n                widget.title = $translate.instant(widget.title);\n                widget.description = $translate.instant(widget.description);\n                widget.category = $translate.instant(widget.category);\n\n                if (!widget.categoryTags) {\n                    widget.categoryTags = 'ADF.CATEGORY.TAG.MISCELLANEOUS';\n                }\n\n                var categoriesTmp = widget.categoryTags.split(',');\n\n                var allWidgetCategoriesTranslated = [];\n                angular.forEach(categoriesTmp, function(category, idx) {\n                    // push widget to category array\n                    var translatedCat = $translate.instant(category);\n                    if (categories.indexOf(translatedCat) === -1) {\n                        categories.push(translatedCat);\n                    }\n\n                    if (allWidgetCategoriesTranslated.indexOf(translatedCat) === -1) {\n                        allWidgetCategoriesTranslated.push(translatedCat);\n                    }\n                });\n                widget.categoryTags = allWidgetCategoriesTranslated.toString();\n\n            });\n            return categories;\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            scope: {\n                name: '@',\n                collapsible: '@',\n                editable: '@',\n                editMode: '@',\n                continuousEditMode: '=',\n                maximizable: '@',\n                adfModel: '=',\n                adfWidgetFilter: '=',\n                categories: '@',\n                hideButtons: '=',\n                extraData: '='\n            },\n            controller: function($scope) {\n                var model = {};\n                var widgetFilter = null;\n                var name = $scope.name;\n\n                var _getReloadWidgets = function(widget) {\n                    var reloadWidgets = {\n                        configChange: [],\n                        reload: []\n                    };\n                    if (widget) {\n                        var definition = angular.copy(widget.definition);\n                        var ftype = definition.Ftype;\n                        var id = definition.wid;\n                        var config = definition.config || {};\n                        var filter = config.filter;\n                        model.grid.forEach(function(w) {\n                            var f = w.definition.config.filter;\n                            var ft = w.definition.Ftype;\n                            //solo recargamos y actualizamos los widgets:\n                            // - que tengan filtro\n                            // y que el id tenga filtro\n                            // y que el id del filtro coincida con el wid del widget que ha modificado el fitro\n                            if (f && f.id && f.id === id) {\n                                w.definition.config.filter = filter;\n                                w.definition.config.filter.id = id;\n                                reloadWidgets.reload.push(w.definition.wid);\n                            } else if (ftype === ft) {\n                                reloadWidgets.configChange.push(w.definition.wid);\n                            }\n                        });\n                    }\n                    return reloadWidgets;\n                };\n\n                var updateWidgetFilters = function(model) {\n                    var widgetFilters = [];\n                    var grid = model.grid;\n                    if (grid && grid.length > 0) {\n                        grid.forEach(function(element) {\n                            var definition = element.definition;\n                            var config = definition.config || {};\n                            var filter = config.filter;\n                            widgetFilters.push({\n                                wid: definition.wid,\n                                title: definition.title,\n                                filter: filter,\n                                Ftype: definition.Ftype\n                            });\n                        });\n                    }\n                    if (!$scope.options) {\n                        $scope.options = {\n                            extraData: {}\n                        };\n                    }\n                    $scope.options.extraData.widgetFilters = widgetFilters;\n                };\n                // Watching for changes on adfModel\n                $scope.$watch('adfModel', function(oldVal, newVal) {\n                    // has model changed or is the model attribute not set\n                    if (newVal !== null || (oldVal === null && newVal === null)) {\n                        model = $scope.adfModel;\n                        widgetFilter = $scope.adfWidgetFilter;\n\n                        if (model) {\n                            updateWidgetFilters(model);\n                            if (!model.title) {\n                                model.title = $translate.instant('ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD');\n                            }\n                            if (!model.titleTemplateUrl) {\n                                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\n                            }\n                            $scope.model = model;\n                        } else {\n                            $log.error('could not find or create model');\n                        }\n                    }\n                }, true);\n\n                // edit mode\n                $scope.editMode = false;\n\n                function getNewModalScope() {\n                    var scope = $scope.$new();\n                    return scope;\n                }\n\n                $scope.toggleEditMode = function(openConfigWindow) {\n                    $scope.editMode = !$scope.editMode;\n                    if ($scope.editMode) {\n                        if (!$scope.continuousEditMode) {\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\n                            $rootScope.$broadcast('adfIsEditMode');\n                        }\n\n                        if (openConfigWindow) {\n                            $scope.editDashboardDialog();\n                        }\n                    }\n\n                    if (!$scope.editMode) {\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\n                    }\n                };\n\n                var adfToggleEditMode = $scope.$on('adfToggleEditMode', function(event, isNewDashboard) {\n                    if (isNewDashboard) {\n                        $scope.toggleEditMode(true);\n                    } else {\n                        $scope.toggleEditMode();\n                    }\n                });\n\n                var adfCancelEditMode = $scope.$on('adfCancelEditMode', function(event) {\n                    if ($scope.editMode) {\n                        $scope.cancelEditMode();\n                    }\n                });\n\n                var adfWidgetRemoved = $scope.$on('adfWidgetRemovedFromGrid', function(event, widget) {\n                    var index = null;\n                    angular.forEach($scope.adfModel.grid, function(widgetTmp, idx) {\n                        if (widgetTmp.definition.wid === widget.wid) {\n                            index = idx;\n                        }\n                    });\n\n                    if (index >= 0) {\n                        $scope.adfModel.grid.splice(index, 1);\n                    }\n                });\n\n                $scope.cancelEditMode = function() {\n                    $scope.editMode = false;\n                    if (!$scope.continuousEditMode && ($scope.modelCopy !== $scope.adfModel)) {\n                        $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\n                    }\n                    $rootScope.$broadcast('adfDashboardEditsCancelled');\n                };\n\n                var adfEditDashboardDialog = $scope.$on('adfEditDashboardDialog', function(event) {\n                    if ($scope.editMode) {\n                        $scope.editDashboardDialog();\n                    }\n                });\n\n\n                var adfLaunchSearchingFromWidget = $scope.$on('adfLaunchSearchingFromWidget', function(event, widget) {\n                    var reloadWidgets = _getReloadWidgets(widget);\n                    $rootScope.$broadcast('adfFilterChanged', name, model, reloadWidgets);\n                });\n                var adfWindowTimeChangedFromWidget = $scope.$on('adfWindowTimeChangedFromWidget', function(event) {\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\n                });\n\n                // edit dashboard settings\n                $scope.editDashboardDialog = function() {\n                    var editDashboardScope = getNewModalScope();\n                    // create a copy of the title, to avoid changing the title to\n                    // \"dashboard\" if the field is empty\n                    editDashboardScope.copy = {\n                        title: (model.title !== 'ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD' ? model.title : ''),\n                        description: model.description,\n                        backgroundColor: model.backgroundColor ? model.backgroundColor : undefined,\n                        time: new Date(),\n                        backgroundImage: model.backgroundImage ? model.backgroundImage : undefined,\n                        file: model.backgroundImage ? model.backgroundImage : undefined,\n                    };\n\n                    editDashboardScope.backgroundSize = {\n                        name: 'backgroundSize',\n                        model: model.backgroundImageSize ? model.backgroundImageSize : '100% 100%',\n                        options: {\n                            '100% 100%': {\n                                title: $translate.instant('SIZE_CONF.AUTO')\n                            },\n                            'contain': {\n                                title: $translate.instant('SIZE_CONF.CONTAIN')\n                            },\n                            'cover': {\n                                title: $translate.instant('SIZE_CONF.COVER')\n                            }\n                        }\n                    };\n\n                    editDashboardScope.iconConfiguration = {\n                        name: 'iconConfiguration',\n                        model: model.iconType ? model.iconType : 'icon',\n                        url: undefined,\n                        file: undefined,\n                        iconType: model.iconType ? model.iconType : 'icon',\n                        icon: model.iconType === 'icon' ? model.icon : 'fa-tachometer',\n                        options: {\n                            'icon': {\n                                title: $translate.instant('ICON.LIBRARY'),\n                            },\n                            'image': {\n                                title: $translate.instant('ICON.IMAGE')\n                            }\n                        }\n                    };\n                    if (editDashboardScope.iconConfiguration.iconType === 'image') {\n                        editDashboardScope.iconConfiguration.file = model.icon;\n                        editDashboardScope.iconConfiguration.url = model.icon;\n                    }\n                    editDashboardScope.imageSelected = function(file) {\n                        if (file) {\n                            editDashboardScope.iconConfiguration.file = file;\n                            Upload.base64DataUrl(file).then(\n                                function(url) {\n                                    editDashboardScope.iconConfiguration.url = url;\n                                    editDashboardScope.iconConfiguration.file = url;\n                                    editDashboardScope.iconConfiguration.iconType = 'image';\n\n                                });\n                        } else {\n                            editDashboardScope.removeDataFile();\n                        }\n                    };\n                    editDashboardScope.backgroundImageSelected = function(file) {\n                        if (file) {\n                            editDashboardScope.iconConfiguration.file = file;\n                            Upload.base64DataUrl(file).then(\n                                function(url) {\n                                    editDashboardScope.copy.backgroundImage = url;\n                                    editDashboardScope.copy.file = url;\n\n                                });\n                        } else {\n                            editDashboardScope.removeBackgroundFile();\n                        }\n                    };\n                    editDashboardScope.removeDataFile = function() {\n                        editDashboardScope.iconConfiguration.file = null;\n                        editDashboardScope.iconConfiguration.url = null;\n                    };\n                    editDashboardScope.removeBackgroundFile = function() {\n                        editDashboardScope.copy.backgroundImage = null;\n                        editDashboardScope.copy.file = null;\n\n                    };\n\n                    var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\n                    if (model.editTemplateUrl) {\n                        adfEditTemplatePath = model.editTemplateUrl;\n                    }\n                    var instance = $uibModal.open({\n                        scope: editDashboardScope,\n                        templateUrl: adfEditTemplatePath,\n                        backdrop: 'static',\n                        keyboard: false,\n                        size: 'lg'\n                    });\n\n\n                    editDashboardScope.closeDialog = function() {\n                        // copy the new title back to the model\n                        model.title = editDashboardScope.copy.title;\n                        model.description = editDashboardScope.copy.description;\n                        if (editDashboardScope.iconConfiguration.model === 'image') {\n                            model.icon = editDashboardScope.iconConfiguration.url;\n\n                        } else if (editDashboardScope.iconConfiguration.model === 'icon') {\n                            model.icon = (editDashboardScope.iconConfiguration.icon && editDashboardScope.iconConfiguration.icon.key) || editDashboardScope.iconConfiguration.icon;\n\n                        }\n                        model.iconType = editDashboardScope.iconConfiguration.model;\n                        model.backgroundColor = editDashboardScope.copy.backgroundColor ? editDashboardScope.copy.backgroundColor : undefined;\n                        model.backgroundImage = editDashboardScope.copy.backgroundImage ? editDashboardScope.copy.backgroundImage : undefined;\n                        model.backgroundImageSize = editDashboardScope.backgroundSize.model;\n                        // close modal and destroy the scope\n                        instance.close();\n                        editDashboardScope.$destroy();\n                    };\n                };\n\n                var adfOpenWidgetFromOther = $scope.$on('adfOpenWidgetFromOther', function(event, widget, config) {\n\n                    var internal_config = createConfiguration(widget);\n                    var _config = angular.merge({}, internal_config, config || {});\n                    var w = {\n                        type: widget,\n                        config: _config,\n                        title: _config.title\n                    };\n                    addNewWidgetToModel(model, w, name, !$scope.editMode);\n                });\n\n                var adfOpenModalWidgetFromOther = $scope.$on('adfOpenModalWidgetFromOther', function(event, widgetType, config) {\n                    var templateUrl = adfTemplatePath + 'widget-fullscreen.html';\n                    var _config = config || {};\n                    if (_config.sendSelection) {\n                        templateUrl = adfTemplatePath + 'widget-fullscreen-selection.html';\n                    }\n                    var widget = createWidget(widgetType);\n                    widget.config = angular.merge({}, widget.config, _config);\n                    widget.type = widgetType;\n                    if (widget.config.title) {\n                        widget.title = widget.config.title;\n                    }\n                    var fullScreenScope = $scope.$new();\n                    fullScreenScope.definition = fullScreenScope.widget = widget;\n                    var opts = {\n                        scope: fullScreenScope,\n                        templateUrl: templateUrl,\n                        size: fullScreenScope.definition.modalSize || 'el',\n                        backdrop: 'static',\n                        windowClass: (fullScreenScope.definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n                    };\n\n                    if ($scope.model && !$scope.model.temporal) {\n                        fullScreenScope.persistDashboard = function() {\n                            $rootScope.$broadcast('adfOpenWidgetFromOther', this.$parent.widget.type, this.$parent.widget.config || {});\n                            this.closeDialog();\n                        };\n                    }\n\n                    var instance = $uibModal.open(opts);\n                    fullScreenScope.closeDialog = function() {\n                        instance.close();\n                        fullScreenScope.$destroy();\n                    };\n\n\n                });\n\n                var adfAddWidgetDialog = $scope.$on('adfAddWidgetDialog', function(event) {\n                    if (!model.temporal && model.editable) {\n                        if (!$scope.editMode) {\n                            $scope.editMode = true;\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\n                            $rootScope.$broadcast('adfIsEditMode');\n                        }\n\n                        $scope.addWidgetDialog();\n                    }\n                });\n\n                // add widget dialog\n                $scope.addScopeCfg = {\n                    widgetFilter: {},\n                    widgetSortingDirection: '',\n                    widgetSorting: 'priority'\n                };\n\n                $scope.addWidgetDialog = function() {\n                    var addScope = getNewModalScope();\n                    var widgets;\n                    if (angular.isFunction(widgetFilter)) {\n                        widgets = {};\n                        angular.forEach(dashboard.widgets, function(widget, type) {\n                            if (widgetFilter(widget, type, model)) {\n                                widgets[type] = widget;\n                            }\n                        });\n                    } else {\n                        widgets = dashboard.widgets;\n                    }\n                    addScope.widgets = widgets;\n\n                    angular.forEach(addScope.widgets, function(widget, type) {\n                        widget.key = type;\n                        if (!widget.category) {\n                            widget.category = 'ADF.CATEGORY.MISCELLANEOUS';\n                        }\n                    });\n\n                    // pass createCategories function to scope, if categories option is enabled\n                    if ($scope.options.categories) {\n                        addScope.createCategories = createCategories;\n                    } else {\n                        addScope.availableCategories = createCategoriesList(widgets);\n                    }\n\n                    var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\n                    if (model.addTemplateUrl) {\n                        adfAddTemplatePath = model.addTemplateUrl;\n                    }\n\n                    var opts = {\n                        scope: addScope,\n                        templateUrl: adfAddTemplatePath,\n                        backdrop: 'static',\n                        size: 'lg'\n                    };\n\n                    var instance = $uibModal.open(opts);\n\n                    addScope.widgetFilterCfg = $scope.addScopeCfg;\n\n                    addScope.addWidget = function(widget) {\n                        var w = {\n                            type: widget,\n                            Ftype: dashboard.widgets[widget].Ftype || null,\n                            config: createConfiguration(widget)\n                        };\n                        addNewWidgetToModel(model, w, name);\n                        // close and destroy\n                        instance.close();\n                        addScope.$destroy();\n\n                        // check for open edit mode immediately\n                        if (isEditModeImmediate(widget)) {\n                            openEditMode($scope, w);\n                        }\n                    };\n\n                    addScope.changeThumbnail = function(widget) {\n                        if (widget.images) {\n                            if (angular.isUndefined(widget._currThumb)) {\n                                widget._currThumb = 1;\n                            } else {\n                                widget._currThumb += 1;\n                            }\n\n\n                            if (widget._currThumb >= widget.images.length) {\n                                widget._currThumb = 0;\n                            }\n\n                            widget._currImg = widget.images[widget._currThumb];\n                        }\n                    };\n\n                    addScope.closeDialog = function() {\n                        // close and destroy\n                        instance.close();\n                        addScope.$destroy();\n                    };\n                };\n\n                $scope.addNewWidgetToModel = addNewWidgetToModel;\n\n                $scope.$on('destroy', function() {\n                    adfLaunchSearchingFromWidget();\n                    adfWindowTimeChangedFromWidget();\n                    adfToggleEditMode();\n                    adfOpenWidgetFromOther();\n                    adfOpenModalWidgetFromOther();\n                    adfCancelEditMode();\n                    adfAddWidgetDialog();\n                    adfEditDashboardDialog();\n                    adfWidgetRemoved();\n                });\n            },\n            link: function($scope, $element, $attr) {\n                // pass options to scope\n                var options = {\n                    name: $attr.name,\n                    editable: true,\n                    enableConfirmDelete: stringToBoolean($attr.enableConfirmDelete),\n                    maximizable: stringToBoolean($attr.maximizable),\n                    collapsible: stringToBoolean($attr.collapsible),\n                    categories: stringToBoolean($attr.categories),\n                    extraData: {}\n                };\n\n                if (angular.isDefined($attr.editable)) {\n                    options.editable = stringToBoolean($attr.editable);\n                }\n\n                if (angular.isDefined($scope.extraData)) {\n                    options.extraData = $scope.extraData;\n                }\n\n                options.extraData.editing = $scope.editMode;\n\n                $scope.options = options;\n            },\n            templateUrl: adfTemplatePath + 'dashboard.html'\n        };\n    });\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the 'Software'), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/* global angular */\nangular.module('adf')\n    .directive('adfDashboardGrid', function(adfTemplatePath) {\n        \n\n        function preLink($scope) {\n            $scope.gridOptions = {\n                cellHeight: 146,\n                verticalMargin: 10,\n                animate: true,\n                float: false,\n                alwaysShowResizeHandle: true,\n                minWidth: 768,\n                auto: true,\n                resizable: {\n                    handles: 'e, se, s, sw, w'\n                },\n                disableDrag: !$scope.editMode,\n                disableResize: !$scope.editMode\n            };\n\n            $scope.gsHandler = null;\n        }\n\n        return {\n            restrict: 'E',\n            scope: {\n                adfModel: '=',\n                editMode: '=',\n                continuousEditMode: '=',\n                options: '='\n            },\n            templateUrl: adfTemplatePath + 'dashboard-grid.html',\n            compile: function() {\n                return {\n                    pre: preLink,\n                };\n            },\n            controller: function($scope, $timeout) {\n                var dashEvents = [];\n                dashEvents.push($scope.$on('adfIsEditMode', function() {\n                    $timeout(function() {\n                        $scope.gsHandler.enable();\n                    }, 100);\n                }));\n\n                dashEvents.push($scope.$on('adfDashboardChanged', function() {\n                    $timeout(function() {\n                        $scope.gsHandler.disable();\n                    }, 100);\n                }));\n\n                dashEvents.push($scope.$on('adfDashboardEditsCancelled', function() {\n                    $timeout(function() {\n                        $scope.gsHandler.disable();\n                    }, 100);\n                }));\n\n                dashEvents.push($scope.$on('adfCancelEditMode', function() {\n                    $timeout(function() {\n                        $scope.gsHandler.disable();\n                    }, 100);\n                }));\n\n                dashEvents.push($scope.$on('adfWidgetAdded', function(event) {\n                    $timeout(function() {\n                        $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\n                        $scope.gsHandler.enable();\n                    }, 100);\n                }));\n\n                $scope.onChange = function(event, items) {\n                    //console.log('onChange event: ' + event + ' items:' + items);\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\n                };\n\n                $scope.onDragStart = function(event, ui) {\n                    console.log('onDragStart event: ' + event + ' ui:' + ui);\n                };\n\n                $scope.onDragStop = function(event, ui) {\n                    console.log('onDragStop event: ' + event + ' ui:' + ui);\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\n                };\n\n                $scope.onResizeStart = function(event, ui) {\n                    console.log('onResizeStart event: ' + event + ' ui:' + ui);\n                };\n\n                $scope.onResizeStop = function(event, ui) {\n                    console.log('onResizeStop event: ' + event + ' ui:' + ui);\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\n                    $scope.$broadcast('OnResizeWidget');\n                };\n\n                $scope.onItemAdded = function(item) {\n                    console.log('onItemAdded item: ' + item);\n                };\n\n                $scope.onItemRemoved = function(item) {\n                    console.log('onItemRemoved item: ' + item);\n                };\n\n                $scope.$on('destroy', function() {\n                    dashEvents.forEach(function(dashEvt) {\n                        dashEvt();\n                    });\n                });\n            }\n        };\n    });\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .filter('adfOrderByObjectKey', function($filter) {\n    \n\n    return function(item, key){\n      var array = [];\n      angular.forEach(item, function(value, objectKey){\n        value[key] = objectKey;\n        array.push(value);\n      });\n      return $filter('orderBy')(array, key);\n    };\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\n/**\n * @ngdoc object\n * @name adf.dashboardProvider\n * @description\n *\n * The dashboardProvider can be used to register widgets.\n */\nangular.module('adf.provider', [])\n    .provider('dashboard', function () {\n\n        var widgets = {};\n        var widgetsPath = '';\n        var messageTemplate = '<div class=\"alert alert-primary\">{}</div>';\n        var loadingTemplate = '\\\n      <div class=\"progress progress-striped active\">\\n\\\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\n          <span class=\"sr-only\" translate>FORM.MSG.LOADING ...</span>\\n\\\n        </div>\\n\\\n      </div>';\n        var customWidgetTemplatePath = null;\n\n        // default apply function of widget.edit.apply\n        var defaultApplyFunction = function () {\n            return true;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#widget\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Registers a new widget.\n         *\n         * @param {string} name of the widget\n         * @param {object} widget to be registered.\n         *\n         *   Object properties:\n         *\n         *   - `title` - `{string=}` - The title of the widget.\n         *   - `description` - `{string=}` - Description of the widget.\n         *   - `category` - `{string=}` - Category of the widget.\n         *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\n         *   - `config` - `{object}` - Predefined widget configuration.\n         *   - `controller` - `{string=|function()=}` - Controller fn that should be\n         *      associated with newly created scope of the widget or the name of a\n         *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\n         *      if passed as a string.\n         *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\n         *      published to scope under the `controllerAs` name.\n         *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\n         *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\n         *   - `template` - `{string=|function()=}` - html template as a string.\n         *   - `templateUrl` - `{string=}` - path to an html template.\n         *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\n         *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n         *      be injected into the controller. If any of these dependencies are promises, the widget\n         *      will wait for them all to be resolved or one to be rejected before the controller is\n         *      instantiated.\n         *      If all the promises are resolved successfully, the values of the resolved promises are\n         *      injected.\n         *\n         *      The map object is:\n         *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n         *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n         *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\n         *        and the return value is treated as the dependency. If the result is a promise, it is\n         *        resolved before its value is injected into the controller.\n         *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n         *      on the scope of the widget.\n         *   - `edit` - `{object}` - Edit modus of the widget.\n         *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n         *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\n         *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n         *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\n         *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\n         *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n         *        on the scope of the widget.\n         *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\n         *        Default is true.\n         *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\n         *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\n         *        The function have to return a boolean or an promise which can be resolved to a boolean.\n         *        The function can use injection.\n         *\n         * @returns {Object} self\n         */\n        this.widget = function (name, widget) {\n            var w = angular.extend({\n                reload: false,\n                frameless: false\n            }, widget);\n            if (w.edit) {\n                var edit = {\n                    reload: true,\n                    immediate: false,\n                    apply: defaultApplyFunction\n                };\n                angular.extend(edit, w.edit);\n                w.edit = edit;\n            }\n            //OUW-1610\n            if (!w.config) {\n                w.config = {};\n            }\n            widgets[name] = w;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#widgetsPath\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Sets the path to the directory which contains the widgets. The widgets\n         * path is used for widgets with a templateUrl which contains the\n         * placeholder {widgetsPath}. The placeholder is replaced with the\n         * configured value, before the template is loaded, but the template is\n         * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\n         * The default value of widgetPaths is ''.\n         *\n         *\n         * @param {string} path to the directory which contains the widgets\n         *\n         * @returns {Object} self\n         */\n        this.widgetsPath = function (path) {\n            widgetsPath = path;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#messageTemplate\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the template for messages.\n         *\n         * @param {string} template for messages.\n         *\n         * @returns {Object} self\n         */\n        this.messageTemplate = function (template) {\n            messageTemplate = template;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#loadingTemplate\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the template which is displayed as\n         * long as the widget resources are not resolved.\n         *\n         * @param {string} template loading template\n         *\n         * @returns {Object} self\n         */\n        this.loadingTemplate = function (template) {\n            loadingTemplate = template;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#customWidgetTemplatePath\n         * @propertyOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the container template for the widgets\n         *\n         * @param {string} path to the custom widget template\n         *\n         * @returns {Object} self\n         */\n        this.customWidgetTemplatePath = function (templatePath) {\n            customWidgetTemplatePath = templatePath;\n            return this;\n        };\n\n        /**\n         * @ngdoc service\n         * @name adf.dashboard\n         * @description\n         *\n         * The dashboard holds all options and  widgets.\n         *\n         * @property {Array.<Object>} widgets Array of registered widgets.\n         * @property {string} widgetsPath Default path for widgets.\n         * @property {string} messageTemplate Template for messages.\n         * @property {string} loadingTemplate Template for widget loading.\n         * * @property {string} customWidgetTemplatePath Changes the container template for the widgets\n         *\n         * @returns {Object} self\n         */\n        this.$get = function () {\n            var cid = 0;\n\n            return {\n                widgets: widgets,\n                widgetsPath: widgetsPath,\n                messageTemplate: messageTemplate,\n                loadingTemplate: loadingTemplate,\n                customWidgetTemplatePath: customWidgetTemplatePath,\n\n                /**\n                 * @ngdoc method\n                 * @name adf.dashboard#id\n                 * @methodOf adf.dashboard\n                 * @description\n                 *\n                 * Creates an ongoing numeric id. The method is used to create ids for\n                 * columns and widgets in the dashboard.\n                 */\n                id: function () {\n                    return new Date().getTime() + '-' + (++cid);\n                },\n\n                /**\n                 * @ngdoc method\n                 * @name adf.dashboard#idEqual\n                 * @methodOf adf.dashboard\n                 * @description\n                 *\n                 * Checks if the given ids are equal.\n                 *\n                 * @param {string} id widget or column id\n                 * @param {string} other widget or column id\n                 */\n                idEquals: function (id, other) {\n                    // use toString, because old ids are numbers\n                    return ((id) && (other)) && (id.toString() === other.toString());\n                }\n            };\n        };\n\n    });\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf')\n    .directive('adfWidgetContent', function ($log, $q, widgetService,\n        $compile, $controller, $injector, dashboard, $translate) {\n\n        function renderError($element, msg) {\n            $log.warn(msg);\n            $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\n        }\n\n        function compileWidget($scope, $element, currentScope, configChanged) {\n            var model = $scope.model;\n            if (!model) {\n                $translate('ADF.ERROR.MODEL_IS_UNDEFINED').then(function (translateMessage) {\n                    renderError($element, translateMessage);\n                });\n                return currentScope;\n            }\n\n            var content = $scope.content;\n\n            if (!content) {\n                $translate('ADF.ERROR.WIDGET_FOR_DEPRECTATED', {\n                    title: model.title\n                }).then(function (translateMessage) {\n                    renderError($element, translateMessage);\n                });\n                return currentScope;\n            }\n\n            var extra = $scope.extra;\n            var newScope = currentScope;\n\n            if (newScope) {\n                var is_menu = newScope.menu !== undefined && newScope.menu !== null && (!newScope.isPaginationEnable || !newScope.isPaginationEnable());\n                if (is_menu || configChanged || !angular.isFunction(newScope.reloadData)) {\n                    if ($scope.navOptionsHandler) {\n                        $scope.navOptionsHandler.firstLoad = true;\n                    }\n                    newScope = renderWidget($scope, $element, currentScope, model, content, extra);\n                } else {\n                    var is_itemsPerPage = newScope.itemsPerPage !== undefined && newScope.itemsPerPage !== null;\n                    if (is_itemsPerPage || newScope.page) {\n                        newScope.page = 1;\n                    }\n                    newScope.reloadData();\n                }\n            } else {\n                if ($scope.navOptionsHandler) {\n                    $scope.navOptionsHandler.firstLoad = true;\n                }\n\n                newScope = renderWidget($scope, $element, currentScope, model, content, extra);\n            }\n\n            function _getWindowTime(type) {\n                if (type === 'custom') {\n                    return {\n                        from: newScope.config.windowFilter.from,\n                        to: newScope.config.windowFilter.to\n                    };\n                }\n                var from = window.moment().subtract(1, type);\n                return {\n                    from: from._d\n                };\n            }\n\n\n\n            newScope.config.getWindowTime = function () {\n                var windowFilter = newScope.config.windowFilter;\n                if (windowFilter && windowFilter.type) {\n                    var winTime = _getWindowTime(windowFilter.type);\n                    /* jshint ignore:start */\n                    if (!window.eval(newScope.config.windowFilter.rawdate)) {\n                        for (var key in winTime) {\n                            winTime[key] = window.moment(winTime[key]).format();\n                        }\n                        winTime['rawdate'] = true;\n                    }\n                    /* jshint ignore:end */\n                    return winTime;\n                }\n            };\n\n            if (extra) {\n                newScope.editing = extra.editing ? true : false;\n                newScope.extraData = extra;\n            }\n\n            return newScope;\n        }\n\n        function renderWidget($scope, $element, currentScope, model, content, extra) {\n            // display loading template\n            $element.html(dashboard.loadingTemplate);\n\n            // create new scope\n            var templateScope = $scope.$new();\n\n            // pass config object to scope\n            if (!model.config) {\n                model.config = {};\n            }\n\n            templateScope.config = model.config;\n            templateScope.editing = extra && extra.editing;\n\n            if (extra) {\n                templateScope.extra = extra;\n            }\n\n            var _from = currentScope || templateScope.config;\n            templateScope.selectionManager = (_from) ? _from.selectionManager : undefined;\n\n            // local injections\n            var base = {\n                $scope: templateScope,\n                widget: model,\n                config: model.config\n            };\n\n            // get resolve promises from content object\n            var resolvers = {};\n            resolvers.$tpl = widgetService.getTemplate(content);\n            if (content.resolve) {\n                angular.forEach(content.resolve, function (promise, key) {\n                    if (angular.isString(promise)) {\n                        resolvers[key] = $injector.get(promise);\n                    } else {\n                        resolvers[key] = $injector.invoke(promise, promise, base);\n                    }\n                });\n            }\n\n            // resolve all resolvers\n            $q.all(resolvers).then(function (locals) {\n                angular.extend(locals, base);\n\n                // pass resolve map to template scope as defined in resolveAs\n                if (content.resolveAs) {\n                    templateScope[content.resolveAs] = locals;\n                }\n\n                // compile & render template\n                var template = locals.$tpl;\n                $element.html(template);\n                if (content.controller) {\n                    var templateCtrl = $controller(content.controller, locals);\n                    if (content.controllerAs) {\n                        templateScope[content.controllerAs] = templateCtrl;\n                    }\n                    $element.children().data('$ngControllerController', templateCtrl);\n                }\n                $compile($element.contents())(templateScope);\n            }, function (reason) {\n                // handle promise rejection\n                var msg = 'ADF.ERROR.COULD_NOT_RESOLVE_ALL_PROMISSES';\n                $translate(msg, {\n                    reason: (reason ? ': ' + reason : reason)\n                }).then(function (translateMessage) {\n                    renderError($element, translateMessage);\n                });\n            });\n\n            // destroy old scope\n            if (currentScope) {\n                currentScope.$destroy();\n            }\n\n            return templateScope;\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            require: '?^^adfWidgetGrid',\n            scope: {\n                model: '=',\n                content: '=',\n                extra: '=',\n                navOptionsHandler: '=?',\n                filterHandler: '=?',\n                widgetActionsHandler: '=?'\n            },\n            link: function ($scope, $element, attrs, adfWidgetGridCtrl) {\n                var currentScope = compileWidget($scope, $element, null);\n                if (adfWidgetGridCtrl) {\n                    $scope.search = $scope.search || {};\n                    adfWidgetGridCtrl.updateWidgetFilters($scope.model.config.filter && $scope.model.config.filter.id);\n                }\n\n                var widgetConfigChangedEvt = $scope.$on('widgetConfigChanged', function (event, changeWidgets) {\n                    if (changeWidgets) {\n                        if (changeWidgets.indexOf($scope.model.wid) !== -1 && adfWidgetGridCtrl) {\n                            adfWidgetGridCtrl.updateWidgetFilters($scope.model.config.filter && $scope.model.config.filter.id, true);\n                        }\n                    } else {\n                        currentScope = compileWidget($scope, $element, currentScope, true);\n                    }\n                });\n\n                var widgetReloadEvt = $scope.$on('widgetReload', function (event, reloadWidgets) {\n                    var reloadWidget = true;\n                    if (reloadWidgets && reloadWidgets.length > 0) {\n                        reloadWidget = reloadWidgets.indexOf($scope.model.wid) !== -1;\n                    }\n                    if (reloadWidget) {\n                        currentScope = compileWidget($scope, $element, currentScope, false);\n                        if (adfWidgetGridCtrl && adfWidgetGridCtrl.updateWidgetFilters) {\n                            adfWidgetGridCtrl.updateWidgetFilters($scope.model.config.filter && $scope.model.config.filter.id);\n                        }\n                    }\n                });\n\n                $scope.$on('destroy', function () {\n                    widgetConfigChangedEvt();\n                    widgetReloadEvt();\n                });\n            }\n        };\n    });\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf')\n    .directive('adfWidgetGrid', function($injector, $q, $log, $uibModal, $rootScope, $interval, dashboard, adfTemplatePath, Filter, toastr, $translate) {\n        function preLink($scope) {\n            var definition = $scope.definition;\n\n            if (definition) {\n                var w = dashboard.widgets[definition.type];\n                if (w) {\n                    // pass title\n                    if (!definition.title) {\n                        definition.title = w.title;\n                    }\n\n                    definition.titleTemplateUrl = adfTemplatePath + 'widget-grid-title.html';\n\n                    if (!definition.editTemplateUrl) {\n                        definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\n                        if (w.editTemplateUrl) {\n                            definition.editTemplateUrl = w.editTemplateUrl;\n                        }\n                    }\n\n                    if (!definition.titleTemplateUrl) {\n                        definition.frameless = w.frameless;\n                    }\n\n                    if (!definition.styleClass) {\n                        definition.styleClass = w.styleClass;\n                    }\n\n                    // set id for sortable\n                    if (!definition.wid) {\n                        definition.wid = dashboard.id();\n                    }\n\n                    // pass copy of widget to scope\n                    $scope.widget = angular.copy(w);\n\n                    // create config object\n                    var config = definition.config;\n                    if (config) {\n                        if (angular.isString(config)) {\n                            config = angular.fromJson(config);\n                        }\n                    } else {\n                        config = {};\n                    }\n                    // pass config to scope\n                    $scope.config = config;\n\n                    if (typeof $scope.widget.show_modal_footer === 'undefined') {\n                        $scope.widget.show_modal_footer = true;\n                    }\n\n                    if (typeof $scope.widget.show_reload_config === 'undefined') {\n                        $scope.widget.show_reload_config = true;\n                    }\n\n                    // collapse exposed $scope.widgetState property\n                    if (!$scope.widgetState) {\n                        $scope.widgetState = {};\n                        $scope.widgetState.isCollapsed = (w.collapsed === true) ? w.collapsed : false;\n                    }\n\n                } else {\n                    $log.warn('could not find widget ' + definition.type);\n                }\n            } else {\n                $log.debug('definition not specified, widget was probably removed');\n            }\n        }\n\n        function postLink($scope, $element) {\n            var definition = $scope.definition;\n            if (!definition) {\n                $log.debug('widget not found');\n                return;\n            }\n            var config = $scope.config || {};\n\n            // bind close function\n            var deleteWidget = function() {\n                $element.remove();\n                $rootScope.$broadcast('adfWidgetRemovedFromGrid', definition);\n            };\n\n            $scope.remove = function() {\n                if ($scope.options.enableConfirmDelete) {\n                    var deleteScope = $scope.$new();\n\n                    var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\n                    if (definition.deleteTemplateUrl) {\n                        deleteTemplateUrl = definition.deleteTemplateUrl;\n                    }\n                    var opts = {\n                        scope: deleteScope,\n                        templateUrl: deleteTemplateUrl,\n                        backdrop: 'static'\n                    };\n                    var instance = $uibModal.open(opts);\n\n                    deleteScope.closeDialog = function() {\n                        instance.close();\n                        deleteScope.$destroy();\n                    };\n                    deleteScope.deleteDialog = function() {\n                        deleteWidget();\n                        deleteScope.closeDialog();\n                    };\n                } else {\n                    deleteWidget();\n                }\n            };\n\n\n            $scope.print = function() {\n                if (!$scope.editMode) {\n                    $scope.$broadcast('widgetPrint');\n                }\n            };\n\n            $scope.isExecuteOperationEnabled = function() {\n\n                if (config.entityKey)\n                    return true;\n                var filter = config.filter;\n\n                if (filter) {\n                    if (filter.headersFilter && filter.headersFilter.length > 0) {\n                        return true;\n                    } else {\n                        if (filter.type === \"basic\") {\n                            return filter.value.length > 0;\n                        }\n                        if (filter.type === \"advanced\") {\n                            return filter.value.length > 2 && filter.oql;\n                        }\n                    }\n                }\n\n                return false;\n            };\n\n            $scope.executeOperation = function() {\n                if (!$scope.editMode) {\n\n                    $scope.$parent.$broadcast('widgetExecuteOperation');\n                }\n            };\n\n            $scope.filter = {\n                typeFilter: 1,\n                showFilter: false,\n                showFinalFilter: false\n            };\n\n            $scope.launchSearching = function() {\n                if ($scope.widget && !$scope.widget.preventRefreshFilterEvent) {\n                    var widget = {\n                        definition: definition,\n                        element: $element\n                    };\n\n                    $rootScope.$broadcast('adfLaunchSearchingFromWidget', widget, $scope.config.filter);\n                }\n\n                $scope.reload();\n            };\n\n\n            $scope.launchSearchingAdv = function() {\n                if (!$scope.filterApplied) {\n                    var executeSearch = true;\n                    $scope.search.quick = '';\n                    if ($scope.search.json === '' || $scope.search.json === '{}' || (!angular.isString($scope.search.json) && Object.keys($scope.search.json).length === 0)) {\n                        if ($scope.search.oql && $scope.search.oql.trim().length > 0) {\n                            toastr.error($translate.instant(\"TOASTR.FILTER_IS_MALFORMED\"));\n                            executeSearch = false;\n                        } else {\n                            $scope.config.filter = {\n                                type: 'advanced',\n                                oql: '',\n                                value: ''\n                            };\n                        }\n                    } else {\n                        $scope.config.filter = {\n                            type: 'advanced',\n                            oql: $scope.search.oql,\n                            value: $scope.search.json,\n                            headersFilter: $scope.config.filter.headersFilter\n                        };\n                    }\n\n                    if (executeSearch) {\n                        $scope.launchSearching();\n                        $scope.filterApplied = true;\n                    }\n                }\n            };\n\n            $scope.launchSearchingQuick = function() {\n                if (!$scope.filterApplied) {\n                    $scope.search.oql = $scope.search.json = '';\n                    $scope.config.filter = {\n                        type: 'basic',\n                        value: $scope.search.quick,\n                        headersFilter: $scope.config.filter.headersFilter\n                    };\n                    $scope.launchSearching();\n                    $scope.filterApplied = true;\n                }\n            };\n\n            $scope.launchSearchingShared = function() {\n                // if (!$scope.filterApplied) {\n                var shared = $scope.search.id;\n                if (shared) {\n                    shared.filter.id = shared.wid;\n                    $scope.config.filter = shared.filter;\n                } else {\n                    $scope.config.filter = {};\n                }\n                $scope.launchSearching();\n                $scope.filterApplied = true;\n                // }\n            };\n\n            $scope.filterSharedSelect = function($item, $model) {\n                $scope.filterApplied = false;\n                $scope.launchSearchingShared();\n            };\n            $scope.filterSharedRemove = function($item, $model) {\n                $scope.filterApplied = false;\n            };\n\n            var windowTimeChanged = $scope.$on('onWindowTimeChanged', function(event, timeObj) {\n                $scope.config.windowFilter = timeObj ? timeObj : (config.windowFilter ? {} : timeObj);\n                var widget = {\n                    definition: definition,\n                    element: $element\n                };\n                $rootScope.$broadcast('adfWindowTimeChangedFromWidget', widget, $scope.config.windowFilter);\n                $scope.reload();\n            });\n\n            $scope.enter = function(event) {\n                var keycode = (event.keyCode ? event.keyCode : event.which);\n                if (keycode === 13) {\n                    if ($scope.filter.typeFilter === 0)\n                        $scope.launchSearchingAdv();\n                    if ($scope.filter.typeFilter === 1)\n                        $scope.launchSearchingQuick();\n                    if ($scope.filter.typeFilter === 2)\n                        $scope.launchSearchingShared();\n                } else if (keycode === 19) {\n                    $scope.filter.showFinalFilter = !$scope.filter.showFinalFilter;\n                } else {\n                    $scope.filterApplied = false;\n                }\n            };\n\n\n            $scope.customSelectors = [];\n            $scope.getCustomSelectors = function() {\n                if ($scope.config.customSelectors) {\n                    $scope.customSelectors = $scope.config.customSelectors;\n                } else {\n                    config.widgetSelectors().findFields('').then(function(fields) {\n                        $scope.customSelectors = fields;\n                        $scope.$apply();\n                    }).catch(function(err) {\n                        $log.error(err);\n                    });\n                }\n            };\n\n            $scope.changeDirection = function() {\n                var direction = config.sort.direction;\n                if (direction === 'DESCENDING') {\n                    $scope.config.sort.direction = 'ASCENDING';\n                } else if (direction === 'ASCENDING') {\n                    $scope.config.sort.direction = 'DESCENDING';\n                }\n                $scope.reload();\n            };\n\n            $scope.debugQuery = function() {\n                Filter.parseQuery($scope.search.oql || '')\n                    .then(function(data) {\n                        $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\n                        $scope.unknownWords = '';\n                        $scope.filter_error = null;\n                    })\n                    .catch(function(err) {\n                        $scope.filter_error = err;\n                        // Tratar el error\n                    });\n\n            };\n\n            $scope.autocomplete_options = function() {\n                var autocomplete_options = {\n                    suggest: Filter.suggest_field_delimited,\n                    customSelectors: config.widgetSelectors()\n                };\n\n                return autocomplete_options;\n\n            };\n\n            // Multiple selection\n            $scope.selectedItems = definition.selectedItems || {};\n\n            // Gestor de seleccion\n            $scope.selectionManager = {\n                currentSelection: $scope.selectedItems,\n                isSelected: function(key, obj) {\n                    if ($scope.selectedItems[key] && !angular.isUndefined(obj)) {\n                        $scope.selectedItems[key].data = obj;\n                    }\n\n                    return $scope.selectedItems[key] ? true : false;\n                },\n                totalSelected: function() {\n                    return Object.keys($scope.selectedItems).length;\n                }\n            };\n\n            if (definition.config.sendSelection) {\n\n                $scope.sendEntities = function() {\n                    definition.config.sendSelection($scope.selectedItems);\n                    $scope.$parent.closeDialog();\n                };\n\n                if (definition.config.selectedItems) {\n                    $scope.selectedItems = angular.copy(definition.config.selectedItems);\n                }\n\n                $scope.config.selectionManager = $scope.selectionManager;\n            }\n\n            $scope.manageSelectedItems = function() {\n                var selectionScope = $scope.$new();\n\n                if (definition.config.sendSelection) {\n                    delete config.selectionConfig.operationTypes;\n                    delete config.selectionConfig.filterTypes;\n                }\n\n                selectionScope.selectionConfig = config.selectionConfig;\n\n                selectionScope.selectedItems = [];\n                angular.forEach($scope.selectedItems, function(value, key) {\n                    selectionScope.selectedItems.push({\n                        key: key,\n                        value: value\n                    });\n                });\n\n                selectionScope.currentSelection = {\n                    selected: selectionScope.selectedItems\n                };\n\n                var manageItemsSelectedTemplate = adfTemplatePath + 'widget-selection.html';\n                var opts = {\n                    scope: selectionScope,\n                    templateUrl: manageItemsSelectedTemplate,\n                    backdrop: 'static',\n                    size: 'lg',\n                    animation: true\n                };\n\n                var instance = $uibModal.open(opts);\n\n                selectionScope.restoreSelection = function() {\n                    selectionScope.currentSelection = {\n                        selected: selectionScope.selectedItems\n                    };\n                };\n\n                selectionScope.clearSelection = function() {\n                    selectionScope.currentSelection.selected = [];\n                };\n\n                // Cierra sy guarda los datos de nueva selección\n                selectionScope.applyFilter = function(type) {\n                    var customOql = selectionScope.selectionConfig.filterAction(selectionScope.currentSelection.selected, type);\n\n                    if (!angular.isUndefined(customOql) && customOql !== null) {\n                        $scope.filter.typeFilter = 0;\n                        Filter.parseQuery(customOql).then(function(data) {\n                            $scope.search.oql = customOql;\n                            $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\n                            $scope.unknownWords = '';\n                            $scope.filter_error = null;\n\n                            $scope.launchSearchingAdv();\n                        }).catch(function(err) {\n                            $scope.filter_error = err;\n                        });\n                    }\n                };\n\n                selectionScope.executeOperation = function(operationType) {\n                    if (!$scope.editMode) {\n                        $scope.$parent.$broadcast('widgetExecuteOperation', {\n                            'selectedItems': selectionScope.currentSelection.selected,\n                            'type': operationType\n                        });\n                    }\n                };\n\n                // Cierra sy guarda los datos de nueva selección\n                selectionScope.saveChangesDialog = function() {\n                    var finalSelection = {};\n                    angular.forEach(selectionScope.currentSelection.selected, function(data, idx) {\n                        finalSelection[data.key] = {\n                            data: data.value.data,\n                            visible: data.value.visible\n                        };\n                    });\n\n                    $scope.selectedItems = angular.copy(finalSelection);\n                    $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n\n                    $scope.selectionManager.lastItem = {};\n                    $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n\n                    instance.close();\n                    selectionScope.$destroy();\n                };\n\n                // Cierra sin realizar ninguna acción\n                selectionScope.closeDialog = function() {\n                    instance.close();\n                    selectionScope.$destroy();\n                };\n            };\n\n\n            // bind edit function\n            $scope.edit = function() {\n                var editScope = $scope.$new();\n                editScope.definition = angular.copy(definition);\n\n                var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\n                if (definition.editTemplateUrl) {\n                    adfEditTemplatePath = definition.editTemplateUrl;\n                }\n\n                var opts = {\n                    scope: editScope,\n                    templateUrl: adfEditTemplatePath,\n                    backdrop: 'static',\n                    size: 'lg'\n                };\n\n                var instance = $uibModal.open(opts);\n\n                editScope.closeDialog = function() {\n                    instance.close();\n                    editScope.$destroy();\n                };\n\n                // TODO create util method\n                function createApplyPromise(result) {\n                    var promise;\n                    if (typeof result === 'boolean') {\n                        var deferred = $q.defer();\n                        if (result) {\n                            deferred.resolve();\n                        } else {\n                            deferred.reject();\n                        }\n                        promise = deferred.promise;\n                    } else {\n                        promise = $q.when(result);\n                    }\n                    return promise;\n                }\n\n                editScope.saveDialog = function() {\n                    // clear validation error\n                    editScope.validationError = null;\n\n                    // build injection locals\n                    var widget = $scope.widget;\n\n                    // create a default apply method for widgets\n                    // without edit mode\n                    // see issue https://goo.gl/KHPQLZ\n                    var applyFn;\n                    if (widget.edit) {\n                        applyFn = widget.edit.apply;\n                    } else {\n                        applyFn = function() {\n                            return true;\n                        };\n                    }\n\n                    var editScopeDefinition = editScope.definition.config || {};\n                    // injection locals\n                    var locals = {\n                        widget: widget,\n                        definition: editScope.definition,\n                        config: editScopeDefinition\n                    };\n\n                    // invoke apply function and apply if success\n                    var result = $injector.invoke(applyFn, applyFn, locals);\n                    createApplyPromise(result).then(function() {\n                        definition.title = editScope.definition.title;\n                        if (editScope.definition.type === 'summaryChart') {\n                            editScope.definition.Ftype = editScope.definition.config.type.toLowerCase();\n                            definition.Ftype = editScope.definition.config.type.toLowerCase();\n                        }\n                        angular.extend(definition.config, editScopeDefinition);\n\n                        editScope.closeDialog();\n\n                        if (widget.edit && widget.edit.reload) {\n                            $scope.setReloadTimeout();\n                            // reload content after edit dialog is closed\n                            $scope.$broadcast('widgetConfigChanged');\n                        }\n                    }, function(err) {\n                        if (err) {\n                            editScope.validationError = err;\n                        } else {\n                            editScope.validationError = 'VALIDATION_DURING_APPLY_FAILED';\n                        }\n                    });\n                };\n\n            };\n\n\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            templateUrl: adfTemplatePath + 'widget-grid.html',\n            scope: {\n                definition: '=',\n                editMode: '=',\n                options: '=',\n                widgetState: '='\n            },\n            controller: function($scope) {\n                var _setFilterType = function(selectFilter) {\n                    var config = $scope.config || {};\n                    var filter = config.filter = config.filter ? config.filter : {};\n                    var id = filter.id = selectFilter && filter.id;\n                    filter.headersFilter = selectFilter && filter.headersFilter;\n                    switch (filter.type) {\n                        case 'advanced':\n                            $scope.filter.typeFilter = id ? 2 : 0;\n                            $scope.search = {\n                                oql: filter.oql,\n                                json: filter.value\n                            };\n                            break;\n                        case 'basic':\n                            $scope.filter.typeFilter = id ? 2 : 1;\n                            $scope.search = {\n                                quick: filter.value\n                            };\n\n                            break;\n                        default:\n                            $scope.filter.typeFilter = id ? 2 : 1;\n                            $scope.search = {\n                                quick: filter.value = ''\n                            };\n                            break;\n                    }\n                    $scope.search.id = selectFilter;\n                };\n\n                this.updateWidgetFilters = function(filterId, configChange) {\n                    if ($scope.options && $scope.options.extraData && $scope.options.extraData.widgetFilters) {\n                        var _widgetFilters = $scope.options.extraData.widgetFilters;\n                        var model = $scope.definition;\n                        var selectFilter;\n                        var sharedFilters = _widgetFilters.filter(function(widgetFilter) {\n                            // Recuperamos solos los filtros de widgets que cumplan las condiciones:\n                            // - No tenga un filtro heredado como filtro\n                            // - El tipo de filtro sea igual que el widget que pueda heredarlo (Ftype)\n                            // - No recuperamos el filtro propio del widget  \n                            var shared = (!widgetFilter.filter || !widgetFilter.filter.id) && (widgetFilter.Ftype === model.Ftype) && (widgetFilter.wid !== model.wid);\n                            if (shared && (filterId === widgetFilter.wid))\n                                selectFilter = widgetFilter;\n                            return shared;\n                        });\n\n                        $scope.sharedFilters = angular.copy(sharedFilters);\n                        if (!configChange || !selectFilter && !!filterId)\n                            _setFilterType(selectFilter);\n                    }\n\n                };\n\n                var definition = $scope.definition;\n\n\n                if (definition.config.selectedItems) {\n                    $scope.selectedItemsLength = Object.keys(definition.config.selectedItems).length;\n                }\n\n\n                // Controlador de la barra inferior de los widgets\n                $scope.navOptionsHandler = {\n                    firstLoad: true,\n                    loadingData: false,\n                    startLoading: function() {\n                        $scope.navOptionsHandler.loadingData = true;\n                    },\n                    stopLoading: function() {\n                        $scope.navOptionsHandler.firstLoad = false;\n                        $scope.navOptionsHandler.loadingData = false;\n                        $scope.navOptionsHandler.lastMessageTime = new Date();\n                    },\n                    setStatusMessage: function(message) {\n                        $scope.navOptionsHandler.statusMessage = message;\n                        $scope.navOptionsHandler.lastMessageTime = new Date();\n                    }\n                };\n\n                // Controlador de los parámetros del filtro\n                $scope.filterHandler = {\n                    changeFilter: function(filter, search, typeFilter) {\n                        $scope.search = search;\n                        $scope.filter.typeFilter = typeFilter;\n                    }\n                };\n\n                // Controlador de las custom actions del widget\n                $scope.widgetActionsHandler = {\n                    actions: [],\n                    setActions: function(actions) {\n                        $scope.widgetActionsHandler.actions = actions;\n                    }\n                };\n\n                var adfDashboardCollapseExpand = $scope.$on('adfDashboardCollapseExpand', function(event, args) {\n                    $scope.widgetState.isCollapsed = args.collapseExpandStatus;\n                });\n\n                var adfWidgetEnterEditMode = $scope.$on('adfWidgetEnterEditMode', function(event, widget) {\n                    if (dashboard.idEquals(definition.wid, widget.wid)) {\n                        $scope.edit();\n                    }\n                });\n\n                var adfIsEditMode = $scope.$on('adfIsEditMode', function(event, widget) {\n                    $scope.editing = true;\n                });\n\n                var adfDashboardChanged = $scope.$on('adfDashboardChanged', function(event, name, model) {\n                    //config.widgetSelectors = tiene filtro\n                    var widgetConfigChanged = [];\n                    var grid = model.grid;\n                    if (grid && grid.length > 0) {\n                        grid.forEach(function(element) {\n                            var definition = element.definition;\n                            widgetConfigChanged.push(definition.wid);\n                        });\n                        var widgetFilters = $scope.options.extraData && $scope.options.extraData.widgetFilters;\n                        var sharedFilters = widgetFilters.filter(function(widgetFilter) {\n                            var filter = widgetFilter.filter;\n                            return filter && !filter.id || widgetConfigChanged.indexOf(filter.id) !== -1;\n                        });\n                        $scope.sharedFilters = angular.copy(sharedFilters);\n                        $scope.editing = false;\n                        $scope.$broadcast('widgetConfigChanged', widgetConfigChanged);\n                    }\n                });\n\n                var adfDashboardEditsCancelled = $scope.$on('adfDashboardEditsCancelled', function(event, widget) {\n                    $scope.editing = false;\n                });\n\n                $scope.openFullScreen = function() {\n\n                    $scope.$emit('adfOpenModalWidgetFromOther', definition.type, $scope.config || {});\n                };\n\n                $scope.openAboutScreen = function(size) {\n                    size = 'md';\n                    var modalInstance = $uibModal.open({\n                        animation: true,\n                        templateUrl: 'widgetAboutModal.html',\n                        controller: function($scope, $uibModalInstance, information) {\n                            $scope.about = {};\n                            $scope.about.info = information;\n                            $scope.ok = function() {\n                                $uibModalInstance.close();\n                            };\n                        },\n                        'size': size,\n                        resolve: {\n                            information: function() {\n                                return $scope.config.about;\n                            }\n                        }\n                    });\n\n                    modalInstance.result.then(function(selectedItem) {\n                        $scope.selected = selectedItem;\n                    }, function() {\n                        $log.info('Modal dismissed at: ' + new Date());\n                    });\n                };\n\n                $scope.saveWidgetScreen = function(wId) {\n                    $scope.$emit('generateSnapshot', {\n                        'objectSelector': '.widget_' + wId,\n                        'fileName': 'capture_' + new Date().getTime()\n                    });\n                };\n\n                var createQuickFilter = function(fieldsQuickSearch) {\n                    var _filter = {\n                        or: []\n                    };\n                    var criteria;\n                    fieldsQuickSearch.forEach(function(field) {\n                        criteria = {};\n                        criteria[field.operator] = {};\n                        criteria[field.operator][field.name] = $scope.config.filter.value;\n                        _filter.or.push(criteria);\n                    });\n                    return _filter;\n                };\n\n                $scope.downloadCsv = function() {\n                    var columns = $scope.config.columns;\n                    var scope_filter = $scope.config.filter;\n                    var extra_filter;\n                    var final_filter = {};\n                    var order = $scope.config.sort ? $scope.config.sort : undefined;\n                    if ($scope.config.windowFilter) {\n                        var window_filter = $scope.config.onWindowTimeChanged($scope.config.windowFilter);\n                        if (window_filter && window_filter.and) {\n                            extra_filter = {\n                                and: window_filter.and\n                            };\n                        }\n                    }\n                    var filter;\n                    if (scope_filter.type && scope_filter.type === 'advanced' && scope_filter.value.length > 4) {\n                        filter = JSON.parse(scope_filter.value);\n                    } else if (scope_filter.type && scope_filter.type === 'basic' && scope_filter.value.trim() !== '') {\n                        filter = createQuickFilter($scope.config.fieldsQuickSearch, scope_filter.value);\n                    }\n                    if (extra_filter) {\n                        if (filter) {\n                            final_filter = {\n                                and: [extra_filter, filter]\n                            };\n                        } else {\n                            final_filter = extra_filter;\n                        }\n                    } else {\n                        final_filter = filter;\n                    }\n                    $scope.$broadcast('downloadCsv', {\n                        'columns': columns,\n                        'filter': final_filter,\n                        'order': order\n                    });\n                };\n\n                $scope.generateQR = function() {\n                    $scope.$broadcast('generateQR');\n                };\n\n                var addItemToSelection = $scope.$on('addItemToSelection', function(event, item) {\n                    if (!$scope.selectedItems[item.key]) {\n                        $scope.selectedItems[item.key] = {\n                            data: item.data,\n                            visible: item.visible\n                        };\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n                        item.isSelected = true;\n                        $scope.selectionManager.lastItem = item;\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n                    }\n\n                });\n\n                var removeItemFromSelection = $scope.$on('removeItemFromSelection', function(event, item) {\n                    if ($scope.selectedItems[item.key]) {\n                        delete $scope.selectedItems[item.key];\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n                        item.isSelected = false;\n                        $scope.selectionManager.lastItem = item;\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n                    }\n                });\n\n                // bind reload function\n                var stopReloadTimeout;\n\n                $scope.setReloadTimeout = function() {\n                    var config = $scope.config || $scope.definition.config || {};\n\n\n                    var reloadPeriod = config.reloadPeriod;\n                    if (!isNaN(reloadPeriod) && (reloadPeriod * 1) !== 0) {\n                        if (angular.isDefined(stopReloadTimeout)) {\n                            $interval.cancel(stopReloadTimeout);\n                            stopReloadTimeout = undefined;\n                        }\n                        stopReloadTimeout = $interval($scope.reload, (reloadPeriod * 1000));\n                    } else if (stopReloadTimeout) {\n                        $interval.cancel(stopReloadTimeout);\n                    }\n                };\n\n                $scope.reload = function() {\n                    $scope.$broadcast('widgetReload');\n\n                    $scope.setReloadTimeout();\n                };\n\n                // verificacion de periodo de refresco\n                $scope.setReloadTimeout();\n\n                $scope.$on('$destroy', function() {\n                    adfDashboardCollapseExpand();\n                    adfWidgetEnterEditMode();\n                    adfIsEditMode();\n                    adfDashboardChanged();\n                    adfDashboardEditsCancelled();\n                    addItemToSelection();\n                    removeItemFromSelection();\n                    $interval.cancel(stopReloadTimeout);\n                });\n            },\n            compile: function() {\n\n                /**\n                 * use pre link, because link of widget-content\n                 * is executed before post link widget\n                 */\n                return {\n                    pre: preLink,\n                    post: postLink\n                };\n            }\n        };\n\n    });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/**\n * The widget service provide helper functions to render widgets and their content.\n */\nangular.module('adf')\n  .factory('widgetService', function($http, $q, $sce, $templateCache, dashboard) {\n    \n\n    function parseUrl(url) {\n      var parsedUrl = url;\n      if (url.indexOf('{widgetsPath}') >= 0) {\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\n                .replace('//', '/');\n        if (parsedUrl.indexOf('/') === 0) {\n          parsedUrl = parsedUrl.substring(1);\n        }\n      }\n      return parsedUrl;\n    }\n\n    var exposed = {};\n\n    exposed.getTemplate = function(widget){\n      var deferred = $q.defer();\n\n      if (widget.template) {\n        deferred.resolve(widget.template);\n      } else if (widget.templateUrl) {\n        // try to fetch template from cache\n        var tpl = $templateCache.get(widget.templateUrl);\n        if (tpl) {\n          deferred.resolve(tpl);\n        } else {\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\n          $http.get(url)\n               .success(function(response) {\n                 // put response to cache, with unmodified url as key\n                 $templateCache.put(widget.templateUrl, response);\n                 deferred.resolve(response);\n               })\n               .error(function() {\n                 deferred.reject('could not load template');\n               });\n        }\n      }\n\n      return deferred.promise;\n    };\n\n    return exposed;\n  });\n\n})(window);"]}