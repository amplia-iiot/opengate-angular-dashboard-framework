{"version":3,"sources":["adf.js","adf.locale.js","column.js","dashboard.js","locale-constant.js","order-by-object-key.js","provider.js","row.js","structure-preview.js","widget-content.js","widget-service.js","widget.js","opengate-angular-dashboard-framework.js"],"names":["window","undefined","angular","module","value","directive","$log","$compile","$rootScope","adfTemplatePath","rowTemplate","dashboard","moveWidgetInColumn","$scope","column","evt","widgets","$apply","splice","newIndex","oldIndex","$broadcast","findWidget","index","widget","i","length","w","idEquals","wid","findColumn","model","rows","r","j","columns","c","cid","getId","el","id","getAttribute","addWidgetToColumn","targetColumn","from","sourceColumn","item","warn","removeWidgetFromColumn","applySortable","$element","sortable","Sortable","create","group","handle","ghostClass","animation","onAdd","onRemove","onUpdate","on","destroy","restrict","replace","scope","editMode","continuousEditMode","adfModel","options","templateUrl","link","col","isDefined","isArray","cloned","append","$timeout","$uibModal","$faIcons","stringToBoolean","string","toLowerCase","Boolean","copyWidgets","source","target","shift","push","fillStructure","root","counter","forEach","row","isUndefined","readColumns","changeStructure","structure","copy","createConfiguration","type","cfg","config","createWidget","wdgt","findFirstWidgetColumn","error","addNewWidgetToModel","name","forceToSave","unshift","isEditModeImmediate","edit","immediate","openEditMode","split","object","size","arr","key","createCategories","categories","category","transclude","collapsible","editable","maximizable","adfWidgetFilter","hideButtons","extraData","controller","getNewModalScope","$new","translate","widgetFilter","structureName","$watch","oldVal","newVal","structures","title","titleTemplateUrl","editClass","deleteDashboard","dashData","toggleEditMode","openConfigWindow","modelCopy","editDashboardDialog","saveTemporalDashboard","temporal","adfToggleEditMode","$on","event","isNewDashboard","adfCancelEditMode","cancelEditMode","collapseAll","collapseExpandStatus","adfEditDashboardDialog","adfLaunchSearchingFromWidget","configFilter","adfWindowTimeChangedFromWidget","windowFilter","editDashboardScope","description","icon","availableIcons","list","adfEditTemplatePath","editTemplateUrl","instance","open","backdrop","keyboard","info","closeDialog","close","$destroy","adfOpenWidgetFromOther","internal_config","_config","merge","adfOpenModalWidgetFromOther","widgetType","fullScreenScope","definition","opts","modalSize","windowClass","persistDashboard","this","$parent","adfAddWidgetDialog","addWidgetDialog","addScope","isFunction","adfAddTemplatePath","addTemplateUrl","addWidget","$attr","enableConfirmDelete","editing","constant","defaultLocale","frameworkLocales","en-GB","ADF_COMMON_CLOSE","ADF_COMMON_DELETE","ADF_COMMON_TITLE","ADF_COMMON_DESCRIPTION","ADF_COMMON_CANCEL","ADF_COMMON_APPLY","ADF_COMMON_EDIT_DASHBOARD","ADF_EDIT_DASHBOARD_STRUCTURE_LABEL","ADF_DASHBOARD_TITLE_TOOLTIP_ADD","ADF_DASHBOARD_TITLE_TOOLTIP_SAVE","ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE","ADF_DASHBOARD_TITLE_TOOLTIP_UNDO","ADF_WIDGET_ADD_HEADER","ADF_WIDGET_DELETE_CONFIRM_MESSAGE","ADF_WIDGET_TOOLTIP_REFRESH","ADF_WIDGET_TOOLTIP_PRINT","ADF_WIDGET_TOOLTIP_FILTER","ADF_WIDGET_TOOLTIP_SORT","ADF_WIDGET_TOOLTIP_MOVE","ADF_WIDGET_TOOLTIP_COLLAPSE","ADF_WIDGET_TOOLTIP_EXPAND","ADF_WIDGET_TOOLTIP_EDIT","ADF_WIDGET_TOOLTIP_FULLSCREEN","ADF_WIDGET_TOOLTIP_REMOVE","ADF_WIDGET_TOOLTIP_OPERATION","ADF_WIDGET_TOOLTIP_SELECTION","ADF_WIDGET_CLEAR","ADF_WIDGET_RESTORE","ADF_WIDGET_FILTER","sv-SE","filter","$filter","array","objectKey","provider","adfLocale","getLocales","locales","getActiveLocale","activeLocale","label","translation","widgetsPath","messageTemplate","loadingTemplate","customWidgetTemplatePath","defaultApplyFunction","extend","reload","frameless","apply","path","template","templatePath","setLocale","locale","Error","addLocale","translations","isString","isObject","$get","Date","getTime","other","toString","columnTemplate","adjustRowHeight","container","height","style","prepareStructure","preview","selected","$q","widgetService","$controller","$injector","renderError","msg","html","compileWidget","currentScope","configChanged","_getWindowTime","newScope","to","moment","subtract","_d","content","extra","is_menu","menu","is_itemsPerPage","itemsPerPage","reloadData","renderWidget","getWindowTime","winTime","eval","rawdate","format","templateScope","selectionManager","base","resolvers","$tpl","getTemplate","resolve","promise","get","invoke","all","then","locals","resolveAs","templateCtrl","controllerAs","children","data","contents","reason","widgetConfigChangedEvt","widgetReloadEvt","factory","$http","$sce","$templateCache","parseUrl","url","parsedUrl","indexOf","substring","exposed","deferred","defer","tpl","getTrustedResourceUrl","success","response","put","reject","$interval","Filter","preLink","styleClass","fromJson","reloadPeriod","show_modal_footer","show_reload_config","widgetState","isCollapsed","collapsed","debug","postLink","_setReloadTimeout","stopReloadTimeout","cancel","deleteWidget","remove","deleteScope","deleteTemplateUrl","deleteDialog","print","isExecuteOperationEnabled","entityKey","oql","executeOperation","completeReload","sort","direction","toggleAdvanced","search","json","quick","fields","customFilter","v","toggleFilter","advanced","filterAvailable","showFilter","showFinalFilter","launchSearching","element","addCustomFilter","launchCustomFilter","and","like","JSON","stringify","deleteFilter","launchSearchingAdv","Object","keys","applyFilter","launchSearchingQuick","timeObj","enter","keycode","keyCode","which","customSelectors","getCustomSelectors","widgetSelectors","findFields","err","getcustomFilter","ifCustomFilter","showCustomFields","changeDirection","debugQuery","parseQuery","toJson","unknownWords","autocomplete_options","suggest","suggest_field_delimited","selectedItems","currentSelection","isSelected","obj","totalSelected","manageSelectedItems","selectionScope","selectionConfig","manageItemsSelectedTemplate","restoreSelection","clearSelection","customOql","filterAction","operationType","saveChangesDialog","finalSelection","idx","visible","selectedItemsLength","lastItem","createApplyPromise","result","when","editScope","saveDialog","validationError","applyFn","adfDashboardCollapseExpand","args","adfWidgetEnterEditMode","adfIsEditMode","adfDashboardChanged","adfDashboardEditsCancelled","widgetClasses","classes","openFullScreen","openFilter","openAboutScreen","modalInstance","$uibModalInstance","information","about","ok","selectedItem","saveWidgetScreen","wId","$emit","objectSelector","fileName","onWindowTimeChanged","gt","operationDate","lt","createQuickFilter","fieldsQuickSearch","criteria","_filter","or","field","operator","downloadCsv","extra_filter","scope_filter","final_filter","order","window_filter","parse","trim","addItemToSelection","removeItemFromSelection","compile","pre","post"],"mappings":"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","file":"opengate-angular-dashboard-framework.min.js","sourcesContent":["/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf', ['adf.provider', 'adf.locale', 'ui.bootstrap', 'opengate-angular-js'])\n    .value('adfTemplatePath', '../src/templates/')\n    .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\n    .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\n    .value('adfVersion', '<<adfVersion>>');","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf.locale', [])\n","/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardColumn', function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\n    'use strict';\n\n    /**\n     * moves a widget in between a column\n     */\n    function moveWidgetInColumn($scope, column, evt){\n      var widgets = column.widgets;\n      // move widget and apply to scope\n      $scope.$apply(function(){\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\n      });\n    }\n\n    /**\n     * finds a widget by its id in the column\n     */\n    function findWidget(column, index){\n      var widget = null;\n      for (var i=0; i<column.widgets.length; i++){\n        var w = column.widgets[i];\n        if (dashboard.idEquals(w.wid,index)){\n          widget = w;\n          break;\n        }\n      }\n      return widget;\n    }\n\n    /**\n     * finds a column by its id in the model\n     */\n    function findColumn(model, index){\n      var column = null;\n      for (var i=0; i<model.rows.length; i++){\n        var r = model.rows[i];\n        for (var j=0; j<r.columns.length; j++){\n          var c = r.columns[j];\n          if (dashboard.idEquals(c.cid, index)){\n            column = c;\n            break;\n          } else if (c.rows){\n            column = findColumn(c, index);\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * get the adf id from an html element\n     */\n    function getId(el){\n      var id = el.getAttribute('adf-id');\n      return id ? id : '-1';\n    }\n\n    /**\n     * adds a widget to a column\n     */\n    function addWidgetToColumn($scope, model, targetColumn, evt){\n      // find source column\n      var cid = getId(evt.from);\n      var sourceColumn = findColumn(model, cid);\n\n      if (sourceColumn){\n        // find moved widget\n        var wid = getId(evt.item);\n        var widget = findWidget(sourceColumn, wid);\n\n        if (widget){\n          // add new item and apply to scope\n          $scope.$apply(function(){\n            if (!targetColumn.widgets) {\n              targetColumn.widgets = [];\n            }\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\n\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\n          });\n        } else {\n          $log.warn('could not find widget with id ' + wid);\n        }\n      } else {\n        $log.warn('could not find column with id ' + cid);\n      }\n    }\n\n    /**\n     * removes a widget from a column\n     */\n    function removeWidgetFromColumn($scope, column, evt){\n      // remove old item and apply to scope\n      $scope.$apply(function(){\n        column.widgets.splice(evt.oldIndex, 1);\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n      });\n    }\n\n    /**\n     * enable sortable\n     */\n    function applySortable($scope, $element, model, column){\n      // enable drag and drop\n      var el = $element[0];\n      var sortable = Sortable.create(el, {\n        group: 'widgets',\n        handle: '.adf-move',\n        ghostClass: 'placeholder',\n        animation: 150,\n        onAdd: function(evt){\n          addWidgetToColumn($scope, model, column, evt);\n        },\n        onRemove: function(evt){\n          removeWidgetFromColumn($scope, column, evt);\n        },\n        onUpdate: function(evt){\n          moveWidgetInColumn($scope, column, evt);\n        }\n      });\n\n      // destroy sortable on column destroy event\n      $element.on('$destroy', function () {\n        // check sortable element, before calling destroy\n        // see https://github.com/sdorra/angular-dashboard-framework/issues/118\n        if (sortable.el){\n          sortable.destroy();\n        }\n      });\n    }\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        column: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        adfModel: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\n      link: function ($scope, $element) {\n        // set id\n        var col = $scope.column;\n        if (!col.cid){\n          col.cid = dashboard.id();\n        }\n\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\n          $compile(rowTemplate)($scope, function(cloned) {\n            $element.append(cloned);\n          });\n        } else {\n          // enable drag and drop for widget only columns\n          applySortable($scope, $element, $scope.adfModel, col);\n        }\n      }\n    };\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @ngdoc directive\n * @name adf.directive:adfDashboard\n * @element div\n * @restrict EA\n * @scope\n * @description\n *\n * `adfDashboard` is a directive which renders the dashboard with all its\n * components. The directive requires a name attribute. The name of the\n * dashboard can be used to store the model.\n *\n * @param {string} name name of the dashboard. This attribute is required.\n * @param {boolean=} editable false to disable the editmode of the dashboard.\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\n * @param {string=} structure the default structure of the dashboard.\n * @param {object=} adfModel model object of the dashboard.\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\n *                   events during edit mode not reset it if edit mode is exited.\n * @param {boolean=} categories enable categories for the add widget dialog.\n */\n\nangular.module('adf')\n    .directive('adfDashboard', function($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath, $faIcons) {\n        'use strict';\n\n        function stringToBoolean(string) {\n            switch (angular.isDefined(string) ? string.toLowerCase() : null) {\n                case 'true':\n                case 'yes':\n                case '1':\n                    return true;\n                case 'false':\n                case 'no':\n                case '0':\n                case null:\n                    return false;\n                default:\n                    return Boolean(string);\n            }\n        }\n\n        function copyWidgets(source, target) {\n            if (source.widgets && source.widgets.length > 0) {\n                var w = source.widgets.shift();\n                while (w) {\n                    target.widgets.push(w);\n                    w = source.widgets.shift();\n                }\n            }\n        }\n\n        /**\n         * Copy widget from old columns to the new model\n         * @param object root the model\n         * @param array of columns\n         * @param counter\n         */\n        function fillStructure(root, columns, counter) {\n            counter = counter || 0;\n\n            if (angular.isDefined(root.rows)) {\n                angular.forEach(root.rows, function(row) {\n                    angular.forEach(row.columns, function(column) {\n                        // if the widgets prop doesn't exist, create a new array for it.\n                        // this allows ui.sortable to do it's thing without error\n                        if (!column.widgets) {\n                            column.widgets = [];\n                        }\n\n                        // if a column exist at the counter index, copy over the column\n                        if (angular.isDefined(columns[counter])) {\n                            // do not add widgets to a column, which uses nested rows\n                            if (angular.isUndefined(column.rows)) {\n                                copyWidgets(columns[counter], column);\n                                counter++;\n                            }\n                        }\n\n                        // run fillStructure again for any sub rows/columns\n                        counter = fillStructure(column, columns, counter);\n                    });\n                });\n            }\n            return counter;\n        }\n\n        /**\n         * Read Columns: recursively searches an object for the 'columns' property\n         * @param object model\n         * @param array  an array of existing columns; used when recursion happens\n         */\n        function readColumns(root, columns) {\n            columns = columns || [];\n\n            if (angular.isDefined(root.rows)) {\n                angular.forEach(root.rows, function(row) {\n                    angular.forEach(row.columns, function(col) {\n                        columns.push(col);\n                        // keep reading columns until we can't any more\n                        readColumns(col, columns);\n                    });\n                });\n            }\n\n            return columns;\n        }\n\n        function changeStructure(model, structure) {\n            var columns = readColumns(model);\n            var counter = 0;\n\n            model.rows = angular.copy(structure.rows);\n\n            while (counter < columns.length) {\n                counter = fillStructure(model, columns, counter);\n            }\n        }\n\n        function createConfiguration(type) {\n            var cfg = {};\n            var config = dashboard.widgets[type].config;\n            if (config) {\n                cfg = angular.copy(config);\n            }\n            return cfg;\n        }\n\n        function createWidget(type) {\n            var wdgt = {};\n            var widget = dashboard.widgets[type];\n            if (widget) {\n                wdgt = angular.copy(widget);\n            }\n            return wdgt;\n        }\n\n        /**\n         * Find first widget column in model.\n         *\n         * @param dashboard model\n         */\n        function findFirstWidgetColumn(model) {\n            var column = null;\n            if (!angular.isArray(model.rows)) {\n                $log.error('model does not have any rows');\n                return null;\n            }\n            for (var i = 0; i < model.rows.length; i++) {\n                var row = model.rows[i];\n                if (angular.isArray(row.columns)) {\n                    for (var j = 0; j < row.columns.length; j++) {\n                        var col = row.columns[j];\n                        if (!col.rows) {\n                            column = col;\n                            break;\n                        }\n                    }\n                }\n                if (column) {\n                    break;\n                }\n            }\n            return column;\n        }\n\n        /**\n         * Adds the widget to first column of the model.\n         *\n         * @param dashboard model\n         * @param widget to add to model\n         * @param name name of the dashboard\n         */\n        function addNewWidgetToModel(model, widget, name, forceToSave) {\n            if (model) {\n                var column = findFirstWidgetColumn(model);\n                if (column) {\n                    if (!column.widgets) {\n                        column.widgets = [];\n                    }\n                    column.widgets.unshift(widget);\n\n                    // broadcast added event\n                    $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\n\n                    if (forceToSave) {\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\n                    }\n                } else {\n                    $log.error('could not find first widget column');\n                }\n            } else {\n                $log.error('model is undefined');\n            }\n        }\n\n        /**\n         * Checks if the edit mode of the widget should be opened immediately.\n         *\n         * @param widget type\n         */\n        function isEditModeImmediate(type) {\n            var widget = dashboard.widgets[type];\n            return widget && widget.edit && widget.edit.immediate;\n        }\n\n        /**\n         * Opens the edit mode of the specified widget.\n         *\n         * @param dashboard scope\n         * @param widget\n         */\n        function openEditMode($scope, widget) {\n            // wait some time before fire enter edit mode event\n            $timeout(function() {\n                $scope.$broadcast('adfWidgetEnterEditMode', widget);\n            }, 200);\n        }\n\n        /**\n         * Splits an object into an array multiple objects inside.\n         *\n         * @param object source object\n         * @param size size of array\n         *\n         * @return array of splitted objects\n         */\n        function split(object, size) {\n            var arr = [];\n            var i = 0;\n            angular.forEach(object, function(value, key) {\n                var index = i++ % size;\n                if (!arr[index]) {\n                    arr[index] = {};\n                }\n                arr[index][key] = value;\n            });\n            return arr;\n        }\n\n        /**\n         * Creates object with the category name as key and an array of widgets as value.\n         *\n         * @param widgets array of widgets\n         *\n         * @return array of categories\n         */\n        function createCategories(widgets) {\n            var categories = {};\n            angular.forEach(widgets, function(widget, key) {\n                var category = widget.category;\n                // if the widget has no category use a default one\n                if (!category) {\n                    category = 'Miscellaneous';\n                }\n                // push widget to category array\n                if (angular.isUndefined(categories[category])) {\n                    categories[category] = { widgets: {} };\n                }\n                categories[category].widgets[key] = widget;\n            });\n            return categories;\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            scope: {\n                structure: '@',\n                name: '@',\n                collapsible: '@',\n                editable: '@',\n                editMode: '@',\n                continuousEditMode: '=',\n                maximizable: '@',\n                adfModel: '=',\n                adfWidgetFilter: '=',\n                categories: '@',\n                hideButtons: '=',\n                extraData: '='\n            },\n            controller: function($scope) {\n                var model = {};\n                var structure = {};\n                var widgetFilter = null;\n                var structureName = {};\n                var name = $scope.name;\n\n                // Watching for changes on adfModel\n                $scope.$watch('adfModel', function(oldVal, newVal) {\n                    // has model changed or is the model attribute not set\n                    if (newVal !== null || (oldVal === null && newVal === null)) {\n                        model = $scope.adfModel;\n                        widgetFilter = $scope.adfWidgetFilter;\n                        if (!model || !model.rows) {\n                            structureName = $scope.structure;\n                            structure = dashboard.structures[structureName];\n                            if (structure) {\n                                if (model) {\n                                    model.rows = angular.copy(structure).rows;\n                                } else {\n                                    model = angular.copy(structure);\n                                }\n                                model.structure = structureName;\n                            } else {\n                                $log.error('could not find structure ' + structureName);\n                            }\n                        }\n\n                        if (model) {\n                            if (!model.title) {\n                                model.title = 'Empty Dashboard';\n                            }\n                            if (!model.titleTemplateUrl) {\n                                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\n                            }\n                            $scope.model = model;\n                        } else {\n                            $log.error('could not find or create model');\n                        }\n                    }\n                }, true);\n\n                // edit mode\n                $scope.editMode = false;\n                $scope.editClass = '';\n\n                //passs translate function from dashboard so we can translate labels inside html templates\n                $scope.translate = dashboard.translate;\n\n                function getNewModalScope() {\n                    var scope = $scope.$new();\n                    //pass translate function to the new scope so we can translate the labels inside the modal dialog\n                    scope.translate = dashboard.translate;\n                    return scope;\n                }\n\n                $scope.deleteDashboard = function() {\n                    var dashData = {\n                        id: model.id,\n                        name: model.title\n                    };\n\n                    $rootScope.$broadcast('dashboardDelete', dashData);\n                };\n\n                $scope.toggleEditMode = function(openConfigWindow) {\n                    $scope.editMode = !$scope.editMode;\n                    if ($scope.editMode) {\n                        if (!$scope.continuousEditMode) {\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\n                            $rootScope.$broadcast('adfIsEditMode');\n                        }\n\n                        if (openConfigWindow) {\n                            $scope.editDashboardDialog();\n                        }\n                    }\n\n                    if (!$scope.editMode) {\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\n                    }\n                };\n\n                $scope.saveTemporalDashboard = function() {\n                    delete model.temporal;\n                    $rootScope.$broadcast('adfDashboardChanged', name, model);\n                };\n\n                var adfToggleEditMode = $scope.$on('adfToggleEditMode', function(event, isNewDashboard) {\n                    if (isNewDashboard) {\n                        $scope.toggleEditMode(true);\n                    } else {\n                        $scope.toggleEditMode();\n                    }\n                });\n\n                var adfCancelEditMode = $scope.$on('adfCancelEditMode', function(event, isNewDashboard) {\n                    if ($scope.editMode) {\n                        $scope.cancelEditMode();\n                    }\n                });\n\n                $scope.collapseAll = function(collapseExpandStatus) {\n                    $rootScope.$broadcast('adfDashboardCollapseExpand', { collapseExpandStatus: collapseExpandStatus });\n                };\n\n                $scope.cancelEditMode = function() {\n                    $scope.editMode = false;\n                    if (!$scope.continuousEditMode && ($scope.modelCopy !== $scope.adfModel)) {\n                        $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\n                    }\n                    $rootScope.$broadcast('adfDashboardEditsCancelled');\n                };\n\n                var adfEditDashboardDialog = $scope.$on('adfEditDashboardDialog', function(event, isNewDashboard) {\n                    if ($scope.editMode) {\n                        $scope.editDashboardDialog();\n                    }\n                });\n\n                var adfLaunchSearchingFromWidget = $scope.$on('adfLaunchSearchingFromWidget', function(event, widget, configFilter) {\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\n                });\n                var adfWindowTimeChangedFromWidget = $scope.$on('adfWindowTimeChangedFromWidget', function(event, widget, windowFilter) {\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\n                });\n\n                // edit dashboard settings\n                $scope.editDashboardDialog = function() {\n                    var editDashboardScope = getNewModalScope();\n                    // create a copy of the title, to avoid changing the title to\n                    // \"dashboard\" if the field is empty\n                    editDashboardScope.copy = {\n                        title: (model.title !== 'Empty Dashboard' ? model.title : ''),\n                        description: model.description,\n                        icon: model.icon ? model.icon : 'fa-tachometer'\n                    };\n\n                    // pass icon list\n                    editDashboardScope.availableIcons = $faIcons.list();\n\n                    // pass dashboard structure to scope\n                    editDashboardScope.structures = dashboard.structures;\n\n                    // pass split function to scope, to be able to display structures in multiple columns\n                    editDashboardScope.split = split;\n\n                    var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\n                    if (model.editTemplateUrl) {\n                        adfEditTemplatePath = model.editTemplateUrl;\n                    }\n                    var instance = $uibModal.open({\n                        scope: editDashboardScope,\n                        templateUrl: adfEditTemplatePath,\n                        backdrop: 'static',\n                        keyboard: false,\n                        size: 'lg'\n                    });\n\n                    editDashboardScope.changeStructure = function(name, structure) {\n                        $log.info('change structure to ' + name);\n                        changeStructure(model, structure);\n                        if (model.structure !== name) {\n                            model.structure = name;\n                        }\n                    };\n                    editDashboardScope.closeDialog = function() {\n                        // copy the new title back to the model\n                        model.title = editDashboardScope.copy.title;\n                        model.description = editDashboardScope.copy.description;\n                        model.icon = editDashboardScope.copy.icon;\n\n                        // close modal and destroy the scope\n                        instance.close();\n                        editDashboardScope.$destroy();\n                    };\n                };\n\n                var adfOpenWidgetFromOther = $scope.$on('adfOpenWidgetFromOther', function(event, widget, config) {\n                    var internal_config = createConfiguration(widget);\n                    var _config = angular.merge({}, internal_config, config);\n                    var w = {\n                        type: widget,\n                        config: _config,\n                        title: _config.title\n                    };\n                    addNewWidgetToModel(model, w, name, !$scope.editMode);\n                });\n\n                var adfOpenModalWidgetFromOther = $scope.$on('adfOpenModalWidgetFromOther', function(event, widgetType, config) {\n                    var widget = createWidget(widgetType);\n                    widget.config = angular.merge({}, widget.config, config);\n                    widget.type = widgetType;\n                    if (widget.config.title) {\n                        widget.title = widget.config.title;\n                    }\n                    var fullScreenScope = $scope.$new();\n                    fullScreenScope.definition = fullScreenScope.widget = widget;\n                    var opts = {\n                        scope: fullScreenScope,\n                        templateUrl: adfTemplatePath + 'widget-fullscreen.html',\n                        size: fullScreenScope.definition.modalSize || 'lg', // 'sm', 'lg'\n                        backdrop: 'static',\n                        windowClass: (fullScreenScope.definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n                    };\n\n                    fullScreenScope.persistDashboard = function() {\n                        $rootScope.$broadcast('adfOpenWidgetFromOther', this.$parent.widget.type, this.$parent.widget.config);\n                        this.closeDialog();\n                    }\n\n                    var instance = $uibModal.open(opts);\n                    fullScreenScope.closeDialog = function() {\n                        instance.close();\n                        fullScreenScope.$destroy();\n                    };\n\n                });\n\n                var adfAddWidgetDialog = $scope.$on('adfAddWidgetDialog', function(event, isNewDashboard) {\n                    if (!model.temporal && model.editable) {\n                        if (!$scope.editMode) {\n                            $scope.editMode = true;\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\n                            $rootScope.$broadcast('adfIsEditMode');\n                        }\n\n                        $scope.addWidgetDialog();\n                    }\n                });\n\n                // add widget dialog\n                $scope.addWidgetDialog = function() {\n                    var addScope = getNewModalScope();\n                    var widgets;\n                    if (angular.isFunction(widgetFilter)) {\n                        widgets = {};\n                        angular.forEach(dashboard.widgets, function(widget, type) {\n                            if (widgetFilter(widget, type, model)) {\n                                widgets[type] = widget;\n                            }\n                        });\n                    } else {\n                        widgets = dashboard.widgets;\n                    }\n                    addScope.widgets = widgets;\n\n                    //pass translate function to the new scope so we can translate the labels inside the modal dialog\n                    addScope.translate = $scope.translate;\n\n                    // pass createCategories function to scope, if categories option is enabled\n                    if ($scope.options.categories) {\n                        $scope.createCategories = createCategories;\n                    }\n\n                    var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\n                    if (model.addTemplateUrl) {\n                        adfAddTemplatePath = model.addTemplateUrl;\n                    }\n\n                    var opts = {\n                        scope: addScope,\n                        templateUrl: adfAddTemplatePath,\n                        backdrop: 'static'\n                    };\n\n                    var instance = $uibModal.open(opts);\n                    addScope.addWidget = function(widget) {\n                        var w = {\n                            type: widget,\n                            config: createConfiguration(widget)\n                        };\n                        addNewWidgetToModel(model, w, name);\n                        // close and destroy\n                        instance.close();\n                        addScope.$destroy();\n\n                        // check for open edit mode immediately\n                        if (isEditModeImmediate(widget)) {\n                            openEditMode($scope, w);\n                        }\n                    };\n                    addScope.closeDialog = function() {\n                        // close and destroy\n                        instance.close();\n                        addScope.$destroy();\n                    };\n                };\n\n                $scope.addNewWidgetToModel = addNewWidgetToModel;\n\n                $scope.$on('destroy', function() {\n                    adfLaunchSearchingFromWidget();\n                    adfWindowTimeChangedFromWidget();\n                    adfToggleEditMode();\n                    adfOpenWidgetFromOther();\n                    adfOpenModalWidgetFromOther();\n                    adfCancelEditMode();\n                    adfAddWidgetDialog();\n                    adfEditDashboardDialog();\n                });\n            },\n            link: function($scope, $element, $attr) {\n                // pass options to scope\n                var options = {\n                    name: $attr.name,\n                    editable: true,\n                    enableConfirmDelete: stringToBoolean($attr.enableConfirmDelete),\n                    maximizable: stringToBoolean($attr.maximizable),\n                    collapsible: stringToBoolean($attr.collapsible),\n                    categories: stringToBoolean($attr.categories),\n                    extraData: {}\n                };\n\n                if (angular.isDefined($attr.editable)) {\n                    options.editable = stringToBoolean($attr.editable);\n                }\n\n                if (angular.isDefined($scope.extraData)) {\n                    options.extraData = $scope.extraData;\n                }\n\n                options.extraData.editing = $scope.editMode;\n\n                $scope.options = options;\n            },\n            templateUrl: adfTemplatePath + 'dashboard.html'\n        };\n    });","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\n/**\n * @ngdoc object\n * @name adf.locale#adfLocale\n * @description\n *\n * Holds settings and values for framework supported locales\n */\nangular.module('adf.locale')\n    .constant('adfLocale', {\n        defaultLocale: 'en-GB',\n        frameworkLocales: {\n            'en-GB': {\n                ADF_COMMON_CLOSE: 'Close',\n                ADF_COMMON_DELETE: 'Delete',\n                ADF_COMMON_TITLE: 'Title',\n                ADF_COMMON_DESCRIPTION: 'Description',\n                ADF_COMMON_CANCEL: 'Cancel',\n                ADF_COMMON_APPLY: 'Apply',\n                ADF_COMMON_EDIT_DASHBOARD: 'Edit dashboard',\n                ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Structure',\n                ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Add new widget',\n                ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Save changes',\n                ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Enable edit mode',\n                ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Undo changes',\n                ADF_WIDGET_ADD_HEADER: 'Add new widget',\n                ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Are you sure you want to delete this widget ?',\n                ADF_WIDGET_TOOLTIP_REFRESH: 'Reload widget Content',\n                ADF_WIDGET_TOOLTIP_PRINT: 'Print widget Content',\n                ADF_WIDGET_TOOLTIP_FILTER: 'Show widget Filter',\n                ADF_WIDGET_TOOLTIP_SORT: 'Show widget Sort',\n                ADF_WIDGET_TOOLTIP_MOVE: 'Change widget location',\n                ADF_WIDGET_TOOLTIP_COLLAPSE: 'Collapse widget',\n                ADF_WIDGET_TOOLTIP_EXPAND: 'Expand widget',\n                ADF_WIDGET_TOOLTIP_EDIT: 'Edit widget configuration',\n                ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Fullscreen widget',\n                ADF_WIDGET_TOOLTIP_REMOVE: 'Remove widget',\n                ADF_WIDGET_TOOLTIP_OPERATION: 'Execute operation',\n                ADF_WIDGET_TOOLTIP_SELECTION: 'Items selected',\n                ADF_WIDGET_CLEAR: 'Clear',\n                ADF_WIDGET_RESTORE: 'Restore',\n                ADF_WIDGET_FILTER: 'Filter'\n            },\n            'sv-SE': {\n                ADF_COMMON_CLOSE: 'Stäng',\n                ADF_COMMON_DELETE: 'Ta bort',\n                ADF_COMMON_TITLE: 'Titel',\n                ADF_COMMON_DESCRIPTION: 'Description',\n                ADF_COMMON_CANCEL: 'Avbryt',\n                ADF_COMMON_APPLY: 'Använd',\n                ADF_COMMON_EDIT_DASHBOARD: 'Redigera dashboard',\n                ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Struktur',\n                ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Lägg till ny widget',\n                ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Spara förändringar',\n                ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Slå på redigeringsläge',\n                ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Ångra förändringar',\n                ADF_WIDGET_ADD_HEADER: 'Lägg till ny widget',\n                ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Är du säker på att du vill ta bort denna widget ?',\n                ADF_WIDGET_TOOLTIP_REFRESH: 'Ladda om widget',\n                ADF_WIDGET_TOOLTIP_FILTER: 'Show widget Filter',\n                ADF_WIDGET_TOOLTIP_SORT: 'Show widget Sort',\n                ADF_WIDGET_TOOLTIP_MOVE: 'Ändra widgets position',\n                ADF_WIDGET_TOOLTIP_COLLAPSE: 'Stäng widget',\n                ADF_WIDGET_TOOLTIP_EXPAND: 'Öppna widget',\n                ADF_WIDGET_TOOLTIP_EDIT: 'Ändra widget konfigurering',\n                ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Visa widget i fullskärm',\n                ADF_WIDGET_TOOLTIP_REMOVE: 'Ta bort widget',\n                ADF_WIDGET_TOOLTIP_OPERATION: 'Execute operation',\n                ADF_WIDGET_TOOLTIP_SELECTION: 'Items selected',\n                ADF_WIDGET_CLEAR: 'Clear',\n                ADF_WIDGET_RESTORE: 'Restore',\n                ADF_WIDGET_FILTER: 'Filter'\n            }\n        }\n    });","/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .filter('adfOrderByObjectKey', function($filter) {\n    'use strict';\n\n    return function(item, key){\n      var array = [];\n      angular.forEach(item, function(value, objectKey){\n        value[key] = objectKey;\n        array.push(value);\n      });\n      return $filter('orderBy')(array, key);\n    };\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\n/**\n * @ngdoc object\n * @name adf.dashboardProvider\n * @description\n *\n * The dashboardProvider can be used to register structures and widgets.\n */\nangular.module('adf.provider', ['adf.locale'])\n    .provider('dashboard', function(adfLocale) {\n\n        var widgets = {};\n        var widgetsPath = '';\n        var structures = {};\n        var messageTemplate = '<div class=\"alert alert-primary\">{}</div>';\n        var loadingTemplate = '\\\n      <div class=\"progress progress-striped active\">\\n\\\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\n          <span class=\"sr-only\">loading ...</span>\\n\\\n        </div>\\n\\\n      </div>';\n        var customWidgetTemplatePath = null;\n\n        // default apply function of widget.edit.apply\n        var defaultApplyFunction = function() {\n            return true;\n        };\n\n        var activeLocale = adfLocale.defaultLocale;\n        var locales = adfLocale.frameworkLocales;\n\n        function getLocales() {\n            return locales;\n        }\n\n        function getActiveLocale() {\n            return activeLocale;\n        }\n\n        function translate(label) {\n            var translation = locales[activeLocale][label];\n            return translation ? translation : label;\n        }\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#widget\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Registers a new widget.\n         *\n         * @param {string} name of the widget\n         * @param {object} widget to be registered.\n         *\n         *   Object properties:\n         *\n         *   - `title` - `{string=}` - The title of the widget.\n         *   - `description` - `{string=}` - Description of the widget.\n         *   - `category` - `{string=}` - Category of the widget.\n         *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\n         *   - `config` - `{object}` - Predefined widget configuration.\n         *   - `controller` - `{string=|function()=}` - Controller fn that should be\n         *      associated with newly created scope of the widget or the name of a\n         *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\n         *      if passed as a string.\n         *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\n         *      published to scope under the `controllerAs` name.\n         *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\n         *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\n         *   - `template` - `{string=|function()=}` - html template as a string.\n         *   - `templateUrl` - `{string=}` - path to an html template.\n         *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\n         *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n         *      be injected into the controller. If any of these dependencies are promises, the widget\n         *      will wait for them all to be resolved or one to be rejected before the controller is\n         *      instantiated.\n         *      If all the promises are resolved successfully, the values of the resolved promises are\n         *      injected.\n         *\n         *      The map object is:\n         *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n         *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n         *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\n         *        and the return value is treated as the dependency. If the result is a promise, it is\n         *        resolved before its value is injected into the controller.\n         *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n         *      on the scope of the widget.\n         *   - `edit` - `{object}` - Edit modus of the widget.\n         *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n         *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\n         *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n         *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\n         *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\n         *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n         *        on the scope of the widget.\n         *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\n         *        Default is true.\n         *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\n         *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\n         *        The function have to return a boolean or an promise which can be resolved to a boolean.\n         *        The function can use injection.\n         *\n         * @returns {Object} self\n         */\n        this.widget = function(name, widget) {\n            var w = angular.extend({ reload: false, frameless: false }, widget);\n            if (w.edit) {\n                var edit = {\n                    reload: true,\n                    immediate: false,\n                    apply: defaultApplyFunction\n                };\n                angular.extend(edit, w.edit);\n                w.edit = edit;\n            }\n            widgets[name] = w;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#widgetsPath\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Sets the path to the directory which contains the widgets. The widgets\n         * path is used for widgets with a templateUrl which contains the\n         * placeholder {widgetsPath}. The placeholder is replaced with the\n         * configured value, before the template is loaded, but the template is\n         * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\n         * The default value of widgetPaths is ''.\n         *\n         *\n         * @param {string} path to the directory which contains the widgets\n         *\n         * @returns {Object} self\n         */\n        this.widgetsPath = function(path) {\n            widgetsPath = path;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#structure\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Registers a new structure.\n         *\n         * @param {string} name of the structure\n         * @param {object} structure to be registered.\n         *\n         *   Object properties:\n         *\n         *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\n         *     - `styleClass` - `{string}` - CSS Class of the row.\n         *     - `columns` - `{Array.<Object>}` - Columns of the row.\n         *       - `styleClass` - `{string}` - CSS Class of the column.\n         *\n         * @returns {Object} self\n         */\n        this.structure = function(name, structure) {\n            structures[name] = structure;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#messageTemplate\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the template for messages.\n         *\n         * @param {string} template for messages.\n         *\n         * @returns {Object} self\n         */\n        this.messageTemplate = function(template) {\n            messageTemplate = template;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#loadingTemplate\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the template which is displayed as\n         * long as the widget resources are not resolved.\n         *\n         * @param {string} template loading template\n         *\n         * @returns {Object} self\n         */\n        this.loadingTemplate = function(template) {\n            loadingTemplate = template;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#customWidgetTemplatePath\n         * @propertyOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the container template for the widgets\n         *\n         * @param {string} path to the custom widget template\n         *\n         * @returns {Object} self\n         */\n        this.customWidgetTemplatePath = function(templatePath) {\n            customWidgetTemplatePath = templatePath;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#setLocale\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the locale setting of adf\n         *\n         * @param {string} ISO Language Code\n         *\n         * @returns {Object} self\n         */\n        this.setLocale = function(locale) {\n            if (locales[locale]) {\n                activeLocale = locale;\n            } else {\n                throw new Error('Cannot set locale: ' + locale + '. Locale is not defined.');\n            }\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#addLocale\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Adds a new locale to adf\n         *\n         * @param {string} ISO Language Code for the new locale\n         * @param {object} translations for the locale.\n         *\n         * @returns {Object} self\n         */\n        this.addLocale = function(locale, translations) {\n            if (!angular.isString(locale)) {\n                throw new Error('locale must be an string');\n            }\n\n            if (!angular.isObject(translations)) {\n                throw new Error('translations must be an object');\n            }\n\n            locales[locale] = translations;\n            return this;\n        };\n\n        /**\n         * @ngdoc service\n         * @name adf.dashboard\n         * @description\n         *\n         * The dashboard holds all options, structures and widgets.\n         *\n         * @property {Array.<Object>} widgets Array of registered widgets.\n         * @property {string} widgetsPath Default path for widgets.\n         * @property {Array.<Object>} structures Array of registered structures.\n         * @property {string} messageTemplate Template for messages.\n         * @property {string} loadingTemplate Template for widget loading.\n         * @property {method} sets locale of adf.\n         * @property {Array.<Object>} hold all of the locale translations.\n         * @property {string} the active locale setting.\n         * @property {method} translation function passed to templates.\n         *\n         * @returns {Object} self\n         */\n        this.$get = function() {\n            var cid = 0;\n\n            return {\n                widgets: widgets,\n                widgetsPath: widgetsPath,\n                structures: structures,\n                messageTemplate: messageTemplate,\n                loadingTemplate: loadingTemplate,\n                setLocale: this.setLocale,\n                locales: getLocales,\n                activeLocale: getActiveLocale,\n                translate: translate,\n                customWidgetTemplatePath: customWidgetTemplatePath,\n\n                /**\n                 * @ngdoc method\n                 * @name adf.dashboard#id\n                 * @methodOf adf.dashboard\n                 * @description\n                 *\n                 * Creates an ongoing numeric id. The method is used to create ids for\n                 * columns and widgets in the dashboard.\n                 */\n                id: function() {\n                    return new Date().getTime() + '-' + (++cid);\n                },\n\n                /**\n                 * @ngdoc method\n                 * @name adf.dashboard#idEqual\n                 * @methodOf adf.dashboard\n                 * @description\n                 *\n                 * Checks if the given ids are equal.\n                 *\n                 * @param {string} id widget or column id\n                 * @param {string} other widget or column id\n                 */\n                idEquals: function(id, other) {\n                    // use toString, because old ids are numbers\n                    return ((id) && (other)) && (id.toString() === other.toString());\n                }\n            };\n        };\n\n    });","/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardRow', function ($compile, adfTemplatePath, columnTemplate) {\n    'use strict';\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        row: '=',\n        adfModel: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\n      link: function($scope, $element) {\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\n          $compile(columnTemplate)($scope, function(cloned) {\n            $element.append(cloned);\n          });\n        }\n      }\n    };\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\n/* global angular */\nangular.module('adf')\n  .directive('adfStructurePreview', function(adfTemplatePath) {\n\n    function adjustRowHeight(container){\n      if (container.rows && container.rows.length > 0){\n        var height = 100 / container.rows.length;\n        angular.forEach(container.rows, function(row){\n          row.style = {\n            height: height + '%'\n          }\n\n          if (row.columns){\n            angular.forEach(row.columns, function(column){\n              adjustRowHeight(column);\n            });\n          }\n        });\n      }\n    }\n\n    function prepareStructure($scope){\n      var structure = angular.copy($scope.structure);\n      adjustRowHeight(structure);\n      $scope.preview = structure;\n    }\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        name: '=',\n        structure: '=',\n        selected: '='\n      },\n      templateUrl: adfTemplatePath + 'structure-preview.html',\n      link: prepareStructure\n    };\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf')\n    .directive('adfWidgetContent', function($log, $q, widgetService,\n        $compile, $controller, $injector, dashboard) {\n\n        function renderError($element, msg) {\n            $log.warn(msg);\n            $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\n        }\n\n        function compileWidget($scope, $element, currentScope, configChanged) {\n            var model = $scope.model;\n            var content = $scope.content;\n\n            var extra = $scope.extra;\n\n            var newScope = currentScope;\n            if (!model) {\n                renderError($element, 'model is undefined');\n            } else if (!content) {\n                //var msg = 'widget content is undefined, please have a look at your browser log';\n                var msg = 'Widget ' + (model.title ? 'for \"' + model.title + '\"' : '') + ' has been deprecated. In order to continue you have to delete this one and look for the equivalent one.';\n                renderError($element, msg);\n            } else {\n                if (newScope) {\n                    var is_menu = newScope.menu !== undefined && newScope.menu !== null;\n                    var is_itemsPerPage = newScope.itemsPerPage !== undefined && newScope.itemsPerPage !== null;\n                    if (is_menu || is_itemsPerPage || configChanged || !angular.isFunction(newScope.reloadData)) {\n                        newScope = renderWidget($scope, $element, currentScope, model, content, extra);\n                    } else {\n                        newScope.reloadData();\n                    }\n                } else {\n                    newScope = renderWidget($scope, $element, currentScope, model, content, extra);\n                }\n            }\n\n            function _getWindowTime(type) {\n                if (type === \"custom\") {\n                    return {\n                        from: newScope.config.windowFilter.from,\n                        to: newScope.config.windowFilter.to\n                    }\n                }\n                var from = window.moment().subtract(1, type);\n                return {\n                    from: from._d\n                };\n            }\n\n            if (newScope) {\n                if (newScope.config) {\n                    newScope.config.getWindowTime = function() {\n                        var windowFilter = newScope.config.windowFilter;\n                        if (windowFilter && windowFilter.type) {\n                            var winTime = _getWindowTime(windowFilter.type);\n                            /* jshint ignore:start */\n                            if (!window.eval(newScope.config.windowFilter.rawdate)) {\n                                for (var key in winTime) {\n                                    winTime[key] = window.moment(winTime[key]).format();\n                                }\n                                winTime['rawdate'] = true;\n                            }\n                            /* jshint ignore:end */\n                            return winTime;\n                        }\n                    }\n                }\n\n                if (extra) {\n                    newScope.editing = extra.editing ? true : false;\n                    newScope.extraData = extra;\n                }\n            }\n            return newScope;\n        }\n\n        function renderWidget($scope, $element, currentScope, model, content, extra) {\n            // display loading template\n            $element.html(dashboard.loadingTemplate);\n\n            // create new scope\n            var templateScope = $scope.$new();\n\n            // pass config object to scope\n            if (!model.config) {\n                model.config = {};\n            }\n\n            templateScope.config = model.config;\n            templateScope.editing = extra && extra.editing;\n\n            if (extra) {\n                templateScope.extra = extra;\n            }\n\n            templateScope.selectionManager = (currentScope && currentScope.selectionManager) ? currentScope.selectionManager : undefined;\n\n            // local injections\n            var base = {\n                $scope: templateScope,\n                widget: model,\n                config: model.config\n            };\n\n            // get resolve promises from content object\n            var resolvers = {};\n            resolvers.$tpl = widgetService.getTemplate(content);\n            if (content.resolve) {\n                angular.forEach(content.resolve, function(promise, key) {\n                    if (angular.isString(promise)) {\n                        resolvers[key] = $injector.get(promise);\n                    } else {\n                        resolvers[key] = $injector.invoke(promise, promise, base);\n                    }\n                });\n            }\n\n            // resolve all resolvers\n            $q.all(resolvers).then(function(locals) {\n                angular.extend(locals, base);\n\n                // pass resolve map to template scope as defined in resolveAs\n                if (content.resolveAs) {\n                    templateScope[content.resolveAs] = locals;\n                }\n\n                // compile & render template\n                var template = locals.$tpl;\n                $element.html(template);\n                if (content.controller) {\n                    var templateCtrl = $controller(content.controller, locals);\n                    if (content.controllerAs) {\n                        templateScope[content.controllerAs] = templateCtrl;\n                    }\n                    $element.children().data('$ngControllerController', templateCtrl);\n                }\n                $compile($element.contents())(templateScope);\n            }, function(reason) {\n                // handle promise rejection\n                var msg = 'Could not resolve all promises';\n                if (reason) {\n                    msg += ': ' + reason;\n                }\n                renderError($element, msg);\n            });\n\n            // destroy old scope\n            if (currentScope) {\n                currentScope.$destroy();\n            }\n\n            return templateScope;\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            scope: {\n                model: '=',\n                content: '=',\n                extra: '='\n            },\n            link: function($scope, $element) {\n                var currentScope = compileWidget($scope, $element, null);\n                var widgetConfigChangedEvt = $scope.$on('widgetConfigChanged', function() {\n                    currentScope = compileWidget($scope, $element, currentScope, true);\n                });\n\n                var widgetReloadEvt = $scope.$on('widgetReload', function() {\n                    currentScope = compileWidget($scope, $element, currentScope, false);\n                });\n\n                $scope.$on('destroy', function() {\n                    widgetConfigChangedEvt();\n                    widgetReloadEvt();\n                });\n            }\n        };\n    });","\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/**\n * The widget service provide helper functions to render widgets and their content.\n */\nangular.module('adf')\n  .factory('widgetService', function($http, $q, $sce, $templateCache, dashboard) {\n    'use strict';\n\n    function parseUrl(url) {\n      var parsedUrl = url;\n      if (url.indexOf('{widgetsPath}') >= 0) {\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\n                .replace('//', '/');\n        if (parsedUrl.indexOf('/') === 0) {\n          parsedUrl = parsedUrl.substring(1);\n        }\n      }\n      return parsedUrl;\n    }\n\n    var exposed = {};\n\n    exposed.getTemplate = function(widget){\n      var deferred = $q.defer();\n\n      if (widget.template) {\n        deferred.resolve(widget.template);\n      } else if (widget.templateUrl) {\n        // try to fetch template from cache\n        var tpl = $templateCache.get(widget.templateUrl);\n        if (tpl) {\n          deferred.resolve(tpl);\n        } else {\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\n          $http.get(url)\n               .success(function(response) {\n                 // put response to cache, with unmodified url as key\n                 $templateCache.put(widget.templateUrl, response);\n                 deferred.resolve(response);\n               })\n               .error(function() {\n                 deferred.reject('could not load template');\n               });\n        }\n      }\n\n      return deferred.promise;\n    };\n\n    return exposed;\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf')\n    .directive('adfWidget', function($injector, $q, $log, $uibModal, $rootScope, $interval, dashboard, adfTemplatePath, Filter) {\n        function preLink($scope) {\n            var definition = $scope.definition;\n\n            //passs translate function from dashboard so we can translate labels inside html templates\n            $scope.translate = dashboard.translate;\n\n            if (definition) {\n                var w = dashboard.widgets[definition.type];\n                if (w) {\n                    // pass title\n                    if (!definition.title) {\n                        definition.title = w.title;\n                    }\n\n                    if (!definition.titleTemplateUrl) {\n                        definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\n                        if (w.titleTemplateUrl) {\n                            definition.titleTemplateUrl = w.titleTemplateUrl;\n                        }\n                    }\n\n                    if (!definition.editTemplateUrl) {\n                        definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\n                        if (w.editTemplateUrl) {\n                            definition.editTemplateUrl = w.editTemplateUrl;\n                        }\n                    }\n\n                    if (!definition.titleTemplateUrl) {\n                        definition.frameless = w.frameless;\n                    }\n\n                    if (!definition.styleClass) {\n                        definition.styleClass = w.styleClass;\n                    }\n\n                    // set id for sortable\n                    if (!definition.wid) {\n                        definition.wid = dashboard.id();\n                    }\n\n                    // pass copy of widget to scope\n                    $scope.widget = angular.copy(w);\n\n                    // create config object\n                    var config = definition.config;\n                    if (config) {\n                        if (angular.isString(config)) {\n                            config = angular.fromJson(config);\n                        }\n                    } else {\n                        config = {};\n                    }\n\n                    if (!config.reloadPeriod) {\n                        config.reloadPeriod = \"0\";\n                    }\n\n                    if (typeof $scope.widget.show_modal_footer === \"undefined\") {\n                        $scope.widget.show_modal_footer = true;\n                    }\n\n                    if (typeof $scope.widget.show_reload_config === \"undefined\") {\n                        $scope.widget.show_reload_config = true;\n                    }\n\n                    // pass config to scope\n                    $scope.config = config;\n\n                    // collapse exposed $scope.widgetState property\n                    if (!$scope.widgetState) {\n                        $scope.widgetState = {};\n                        $scope.widgetState.isCollapsed = (w.collapsed === true) ? w.collapsed : false;\n                    }\n\n                } else {\n                    $log.warn('could not find widget ' + definition.type);\n                }\n            } else {\n                $log.debug('definition not specified, widget was probably removed');\n            }\n        }\n\n        function postLink($scope, $element) {\n            var definition = $scope.definition;\n            if (!definition) {\n                $log.debug('widget not found');\n                return;\n            }\n            if (!$scope.config) {\n                $scope.config = {};\n            }\n\n            var config = $scope.config;\n\n            // bind close function\n            var deleteWidget = function() {\n                var column = $scope.col;\n                if (column) {\n                    var index = column.widgets.indexOf(definition);\n                    if (index >= 0) {\n                        column.widgets.splice(index, 1);\n                    }\n                }\n                $element.remove();\n                $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n            };\n\n            $scope.remove = function() {\n                if ($scope.options.enableConfirmDelete) {\n                    var deleteScope = $scope.$new();\n                    deleteScope.translate = dashboard.translate;\n\n                    var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\n                    if (definition.deleteTemplateUrl) {\n                        deleteTemplateUrl = definition.deleteTemplateUrl;\n                    }\n                    var opts = {\n                        scope: deleteScope,\n                        templateUrl: deleteTemplateUrl,\n                        backdrop: 'static'\n                    };\n                    var instance = $uibModal.open(opts);\n\n                    deleteScope.closeDialog = function() {\n                        instance.close();\n                        deleteScope.$destroy();\n                    };\n                    deleteScope.deleteDialog = function() {\n                        deleteWidget();\n                        deleteScope.closeDialog();\n                    };\n                } else {\n                    deleteWidget();\n                }\n            };\n\n\n            $scope.print = function() {\n                if (!$scope.editMode) {\n                    $scope.$broadcast('widgetPrint');\n                }\n            }\n\n            $scope.isExecuteOperationEnabled = function() {\n                // if ($scope.selectionManager.totalSelected() > 0)\n                //     return true;\n                if (config.entityKey)\n                    return true;\n                var filter = config.filter;\n                if (typeof filter === \"string\") {\n                    return filter.length > 0;\n                }\n                if (typeof filter === \"object\") {\n                    return filter.value.length > 2 && filter.oql;\n                }\n                return false;\n            }\n\n            $scope.executeOperation = function() {\n                if (!$scope.editMode) {\n                    // if ($scope.selectionManager.totalSelected() > 0) {\n                    //     var selectedItems = [];\n                    //     angular.forEach($scope.selectionManager.currentSelection, function(data, key) {\n                    //         selectedItems.push({ key: key, value: data });\n                    //     });\n                    //     $scope.$parent.$broadcast('widgetExecuteOperation', { 'selectedItems': selectedItems });\n                    // } else {\n                    $scope.$parent.$broadcast('widgetExecuteOperation');\n                    // }\n                }\n            };\n\n            // bind reload function\n            var stopReloadTimeout;\n\n            function _setReloadTimeout() {\n                if (config && config.reloadPeriod && config.reloadPeriod !== \"0\") {\n                    if (angular.isDefined(stopReloadTimeout)) {\n                        $interval.cancel(stopReloadTimeout)\n                        stopReloadTimeout = undefined;\n                    };\n                    stopReloadTimeout = $interval($scope.reload, (config.reloadPeriod * 1000));\n                }\n            }\n\n            $scope.reload = function(completeReload) {\n                if (completeReload) {\n                    $scope.$broadcast('widgetReload', completeReload);\n                } else {\n                    $scope.$broadcast('widgetReload');\n                }\n\n                _setReloadTimeout();\n            };\n\n            // verificacion de periodo de refresco\n            _setReloadTimeout();\n\n            $element.on('$destroy', function() {\n                $interval.cancel(stopReloadTimeout);\n            });\n\n            $scope.filter = {\n                value: \"\"\n            };\n            $scope.sort = {\n                value: \"\",\n                direction: \"\"\n            };\n\n            $scope.toggleAdvanced = 1;\n            var filter = config.filter;\n            if (typeof filter === \"object\" && filter.oql && filter.oql.length > 2) {\n                $scope.search = {\n                    oql: filter.oql,\n                    json: filter.value\n                };\n                $scope.toggleAdvanced = 0;\n            } else if (typeof filter === \"string\") {\n                $scope.search = {\n                    quick: filter\n                };\n                $scope.toggleAdvanced = 1;\n            } else if (typeof filter === \"object\" && filter.fields) {\n                $scope.search = {\n                    customFilter: filter.fields\n                };\n                $scope.search.fields = [];\n                angular.forEach(filter.fields, function(v, key) {\n                    $scope.search.fields.push(v.name);\n                });\n                $scope.toggleAdvanced = 2;\n            } else {\n                $scope.search = {\n                    quick: filter = \"\"\n                };\n            }\n\n            $scope.toggleFilter = function(advanced) {\n                $scope.toggleAdvanced = advanced;\n            };\n            $scope.filterAvailable = false;\n            $scope.showFilter = function() {\n                $scope.filterAvailable = $scope.filterAvailable === true ? false : true;\n            };\n\n            $scope.showFinalFilter = false;\n\n            $scope.launchSearching = function() {\n                var widget = {\n                    definition: definition,\n                    element: $element\n                };\n\n                $rootScope.$broadcast('adfLaunchSearchingFromWidget', widget, $scope.config.filter);\n                $scope.reload(true);\n            }\n            $scope.addCustomFilter = function(key) {\n                $scope.search.customFilter = $scope.search.customFilter ? $scope.search.customFilter : [];\n                $scope.search.customFilter.push({ name: key, value: '' });\n            }\n\n            $scope.launchCustomFilter = function() {\n                if ($scope.search.customFilter && $scope.search.customFilter.length > 0) {\n                    $scope.search.oql = $scope.search.json = '';\n\n                    $scope.config.filter = {\n                        value: {\n                            and: []\n                        },\n                        fields: $scope.search.customFilter\n                    }\n                    angular.forEach($scope.search.customFilter, function(v, key) {\n                        if (v.value) {\n                            var like = {};\n                            like[v.name] = v.value;\n                            $scope.config.filter.value.and.push({ 'like': like });\n                        }\n\n                    });\n                    $scope.config.filter.value = JSON.stringify($scope.config.filter.value);\n                }\n\n                $scope.launchSearching();\n            }\n\n\n\n            $scope.deleteFilter = function(value, model) {\n                angular.forEach($scope.search.customFilter, function(v, key) {\n                    if (v.name === value) {\n                        $scope.search.customFilter.splice(key, 1);\n                    }\n                });\n                if ($scope.search.customFilter.length === 0) {\n                    $scope.config.filter = {};\n                }\n            };\n\n\n            $scope.launchSearchingAdv = function() {\n                $scope.search.quick = '';\n                if ($scope.search.json === '' || $scope.search.json === '{}' || (!angular.isString($scope.search.json) && Object.keys($scope.search.json).length === 0)) {\n                    $scope.config.filter = {\n                        oql: '',\n                        value: ''\n                    };\n                } else {\n                    $scope.config.filter = {\n                        oql: $scope.search.oql,\n                        value: $scope.search.json\n                    };\n                }\n                $scope.launchSearching();\n\n            }\n\n            $scope.applyFilter = function(event) {\n                $scope.launchSearching();\n            }\n\n            $scope.launchSearchingQuick = function() {\n                $scope.search.oql = $scope.search.json = '';\n                $scope.config.filter = $scope.search.quick;\n                $scope.launchSearching();\n            }\n\n            var windowTimeChanged = $scope.$on('onWindowTimeChanged', function(event, timeObj) {\n                $scope.config.windowFilter = timeObj ? timeObj : (config.windowFilter ? {} : timeObj);\n                var widget = {\n                    definition: definition,\n                    element: $element\n                }\n                $rootScope.$broadcast('adfWindowTimeChangedFromWidget', widget, $scope.config.windowFilter);\n                $scope.reload();\n            });\n\n            $scope.enter = function(event) {\n                var keycode = (event.keyCode ? event.keyCode : event.which);\n                if (keycode === 13) {\n                    if ($scope.toggleAdvanced === 0)\n                        $scope.launchSearchingAdv();\n                    if ($scope.toggleAdvanced === 1)\n                        $scope.launchSearchingQuick();\n                    if ($scope.toggleAdvanced === 2)\n                        $scope.launchCustomFilter();\n\n                }\n                if (keycode === 19) {\n                    $scope.showFinalFilter = $scope.showFinalFilter === false ? true : false;\n                }\n            }\n\n\n            $scope.customSelectors = [];\n            $scope.getCustomSelectors = function() {\n                config.widgetSelectors().findFields(\"\").then(function(fields) {\n                    $scope.customSelectors = fields;\n                    $scope.$apply();\n                }).catch(function(err) {\n                    $log.error(err);\n                });\n\n            }\n\n            $scope.customFilter = [];\n            $scope.getcustomFilter = function() {\n                config.widgetSelectors().findFields(\"\").then(function(fields) {\n                    $scope.customFilter = fields;\n                    $scope.$apply();\n                }).catch(function(err) {\n                    $log.error(err);\n                });\n\n            }\n\n            $scope.ifCustomFilter = function() {\n                return $scope.customSelectors && config.sort && $scope.definition.type === 'FullDevicesList' && $scope.toggleAdvanced === 2;\n            }\n\n            $scope.showCustomFields = function() {\n                return $scope.definition.type === 'FullDevicesList' && $scope.toggleAdvanced === 2 && $scope.search.customFilter && $scope.filterAvailable && !$scope.editMode;\n            }\n\n            $scope.changeDirection = function() {\n                var direction = config.sort.direction;\n                if (direction === 'DESCENDING') {\n                    $scope.config.sort.direction = 'ASCENDING'\n                } else if (direction === 'ASCENDING') {\n                    $scope.config.sort.direction = 'DESCENDING'\n                }\n                $scope.reload();\n            }\n\n            $scope.debugQuery = function() {\n                Filter.parseQuery($scope.search.oql || '')\n                    .then(function(data) {\n                        //$scope.elementos = data;\n                        $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\n                        $scope.unknownWords = '';\n                        $scope.filter.error = null;\n                    })\n                    .catch(function(err) {\n                        $scope.filter.error = err;\n                        // Tratar el error\n                    });\n\n            }\n\n            $scope.autocomplete_options = function() {\n                var autocomplete_options = {\n                    suggest: Filter.suggest_field_delimited,\n                    customSelectors: config.widgetSelectors()\n                };\n\n                return autocomplete_options;\n\n            };\n\n            // Multiple selection\n            $scope.selectedItems = {};\n\n            // Gestor de seleccion\n            $scope.selectionManager = {\n                currentSelection: $scope.selectedItems,\n                isSelected: function(key, obj) {\n                    if ($scope.selectedItems[key] && !angular.isUndefined(obj)) {\n                        $scope.selectedItems[key].data = obj;\n                    }\n\n                    return $scope.selectedItems[key] ? true : false;\n                },\n                totalSelected: function() {\n                    return Object.keys($scope.selectedItems).length;\n                }\n            };\n\n            $scope.manageSelectedItems = function() {\n                var selectionScope = $scope.$new();\n\n                selectionScope.selectionConfig = config.selectionConfig;\n\n                selectionScope.selectedItems = [];\n                angular.forEach($scope.selectedItems, function(value, key) {\n                    selectionScope.selectedItems.push({ key: key, value: value });\n                });\n\n                selectionScope.currentSelection = {\n                    selected: selectionScope.selectedItems\n                };\n\n                var manageItemsSelectedTemplate = adfTemplatePath + 'widget-selection.html';\n                var opts = {\n                    scope: selectionScope,\n                    templateUrl: manageItemsSelectedTemplate,\n                    backdrop: 'static',\n                    size: 'lg',\n                    animation: true\n                };\n\n                var instance = $uibModal.open(opts);\n\n                selectionScope.restoreSelection = function() {\n                    selectionScope.currentSelection = {\n                        selected: selectionScope.selectedItems\n                    };\n                };\n\n                selectionScope.clearSelection = function() {\n                    selectionScope.currentSelection.selected = [];\n                };\n\n                // Cierra sy guarda los datos de nueva selección\n                selectionScope.applyFilter = function(type) {\n                    var customOql = selectionScope.selectionConfig.filterAction(selectionScope.currentSelection.selected, type);\n\n                    if (!angular.isUndefined(customOql) && customOql !== null) {\n                        $scope.toggleAdvanced = 0;\n                        Filter.parseQuery(customOql).then(function(data) {\n                            $scope.search.oql = customOql;\n                            $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\n                            $scope.unknownWords = '';\n                            $scope.filter.error = null;\n\n                            $scope.launchSearchingAdv();\n                        }).catch(function(err) {\n                            $scope.filter.error = err;\n                        });\n                    }\n                };\n\n                selectionScope.executeOperation = function(operationType) {\n                    if (!$scope.editMode) {\n                        $scope.$parent.$broadcast('widgetExecuteOperation', { 'selectedItems': selectionScope.currentSelection.selected, 'type': operationType });\n                    }\n                };\n\n                // Cierra sy guarda los datos de nueva selección\n                selectionScope.saveChangesDialog = function() {\n                    var finalSelection = {};\n                    angular.forEach(selectionScope.currentSelection.selected, function(data, idx) {\n                        finalSelection[data.key] = { data: data.value.data, visible: data.value.visible };\n                    });\n\n                    $scope.selectedItems = angular.copy(finalSelection);\n                    $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n\n                    $scope.selectionManager.lastItem = {};\n                    $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n\n                    instance.close();\n                    selectionScope.$destroy();\n                };\n\n                // Cierra sin realizar ninguna acción\n                selectionScope.closeDialog = function() {\n                    instance.close();\n                    selectionScope.$destroy();\n                };\n            };\n\n\n            // bind edit function\n            $scope.edit = function() {\n                var editScope = $scope.$new();\n                editScope.translate = dashboard.translate;\n                editScope.definition = angular.copy(definition);\n\n                var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\n                if (definition.editTemplateUrl) {\n                    adfEditTemplatePath = definition.editTemplateUrl;\n                }\n\n                var opts = {\n                    scope: editScope,\n                    templateUrl: adfEditTemplatePath,\n                    backdrop: 'static',\n                    size: 'lg'\n                };\n\n                var instance = $uibModal.open(opts);\n\n                editScope.closeDialog = function() {\n                    instance.close();\n                    editScope.$destroy();\n                };\n\n                // TODO create util method\n                function createApplyPromise(result) {\n                    var promise;\n                    if (typeof result === 'boolean') {\n                        var deferred = $q.defer();\n                        if (result) {\n                            deferred.resolve();\n                        } else {\n                            deferred.reject();\n                        }\n                        promise = deferred.promise;\n                    } else {\n                        promise = $q.when(result);\n                    }\n                    return promise;\n                }\n\n                editScope.saveDialog = function() {\n                    // clear validation error\n                    editScope.validationError = null;\n\n                    // build injection locals\n                    var widget = $scope.widget;\n\n                    // create a default apply method for widgets\n                    // without edit mode\n                    // see issue https://goo.gl/KHPQLZ\n                    var applyFn;\n                    if (widget.edit) {\n                        applyFn = widget.edit.apply;\n                    } else {\n                        applyFn = function() {\n                            return true;\n                        };\n                    }\n\n                    // injection locals\n                    var locals = {\n                        widget: widget,\n                        definition: editScope.definition,\n                        config: editScope.definition.config\n                    };\n\n                    // invoke apply function and apply if success\n                    var result = $injector.invoke(applyFn, applyFn, locals);\n                    createApplyPromise(result).then(function() {\n                        definition.title = editScope.definition.title;\n                        angular.extend(definition.config, editScope.definition.config);\n\n                        editScope.closeDialog();\n\n                        if (widget.edit && widget.edit.reload) {\n                            // reload content after edit dialog is closed\n                            $scope.$broadcast('widgetConfigChanged');\n                        }\n                    }, function(err) {\n                        if (err) {\n                            editScope.validationError = err;\n                        } else {\n                            editScope.validationError = 'Validation durring apply failed';\n                        }\n                    });\n                };\n\n            };\n\n\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            templateUrl: dashboard.customWidgetTemplatePath ? dashboard.customWidgetTemplatePath : adfTemplatePath + 'widget.html',\n            scope: {\n                definition: '=',\n                col: '=column',\n                editMode: '=',\n                options: '=',\n                widgetState: '='\n            },\n            controller: function($scope) {\n                var adfDashboardCollapseExpand = $scope.$on('adfDashboardCollapseExpand', function(event, args) {\n                    $scope.widgetState.isCollapsed = args.collapseExpandStatus;\n                });\n\n                var adfWidgetEnterEditMode = $scope.$on('adfWidgetEnterEditMode', function(event, widget) {\n                    if (dashboard.idEquals($scope.definition.wid, widget.wid)) {\n                        $scope.edit();\n                    }\n                });\n\n                var adfIsEditMode = $scope.$on('adfIsEditMode', function(event, widget) {\n                    $scope.editing = true;\n                });\n\n                var adfDashboardChanged = $scope.$on('adfDashboardChanged', function(event, widget) {\n                    $scope.editing = false;\n                });\n\n                var adfDashboardEditsCancelled = $scope.$on('adfDashboardEditsCancelled', function(event, widget) {\n                    $scope.editing = false;\n                });\n\n                $scope.widgetClasses = function(w, definition) {\n                    var classes = definition.styleClass || '';\n                    // w is undefined, if the type of the widget is unknown\n                    // see issue #216\n                    if (!w || !w.frameless || $scope.editMode) {\n                        classes += ' panel panel-default';\n                    }\n                    return classes;\n                };\n\n                $scope.openFullScreen = function() {\n                    var definition = $scope.definition;\n                    var fullScreenScope = $scope.$new();\n                    var opts = {\n                        scope: fullScreenScope,\n                        templateUrl: adfTemplatePath + 'widget-fullscreen.html',\n                        size: definition.modalSize || 'lg', // 'sm', 'lg'\n                        backdrop: 'static',\n                        windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n                    };\n\n                    var instance = $uibModal.open(opts);\n                    fullScreenScope.closeDialog = function() {\n                        instance.close();\n                        fullScreenScope.$destroy();\n                    };\n                };\n\n                $scope.openFilter = function() {\n\n                }\n\n                $scope.openAboutScreen = function(size) {\n                    size = 'md';\n                    var modalInstance = $uibModal.open({\n                        animation: true,\n                        templateUrl: 'widgetAboutModal.html',\n                        controller: function($scope, $uibModalInstance, information) {\n                            $scope.about = {};\n                            $scope.about.info = information;\n                            $scope.ok = function() {\n                                $uibModalInstance.close();\n                            };\n                        },\n                        'size': size,\n                        resolve: {\n                            information: function() {\n                                return $scope.config.about;\n                            }\n                        }\n                    });\n\n                    modalInstance.result.then(function(selectedItem) {\n                        $scope.selected = selectedItem;\n                    }, function() {\n                        $log.info('Modal dismissed at: ' + new Date());\n                    });\n                };\n\n                $scope.saveWidgetScreen = function(wId) {\n                    $scope.$emit('generateSnapshot', {\n                        'objectSelector': '.widget_' + wId,\n                        'fileName': 'capture_' + new Date().getTime()\n                    });\n                };\n\n                var onWindowTimeChanged = function(timeObj) {\n                    var filter = { and: [] };\n                    if (timeObj && timeObj.from) {\n                        filter.and.push({\n                            gt: {\n                                operationDate: timeObj.from\n                            }\n                        });\n\n                        if (timeObj.to) {\n                            filter.and.push({\n                                lt: {\n                                    operationDate: timeObj.to\n                                }\n                            });\n                        }\n                    } else {\n                        filter = null;\n                    }\n                    return filter;\n                }\n\n                var createQuickFilter = function(fieldsQuickSearch, filter) {\n                    var _filter = {\n                        or: []\n                    };\n                    var criteria;\n                    fieldsQuickSearch.forEach(function(field) {\n                        criteria = {};\n                        criteria[field.operator] = {};\n                        criteria[field.operator][field.name] = $scope.config.filter;\n                        _filter.or.push(criteria);\n                    });\n                    return _filter;\n                }\n\n                $scope.downloadCsv = function() {\n                    var columns = $scope.config.columns;\n                    var scope_filter = $scope.config.filter;\n                    var extra_filter;\n                    var final_filter = {};\n                    var order = $scope.config.sort ? $scope.config.sort : undefined;\n                    if ($scope.config.windowFilter) {\n                        var window_filter = onWindowTimeChanged($scope.config.windowFilter);\n                        if (window_filter && window_filter.and) {\n                            extra_filter = { and: window_filter.and };\n                        }\n                    }\n                    var filter;\n                    if (scope_filter.value && scope_filter.value.length > 4) {\n                        filter = JSON.parse(scope_filter.value);\n                    } else if (typeof scope_filter === 'string' && scope_filter.trim() !== '') {\n                        filter = createQuickFilter($scope.config.fieldsQuickSearch, scope_filter);\n                    }\n                    if (extra_filter) {\n                        if (filter) {\n                            final_filter = { and: [extra_filter, filter] };\n                        } else {\n                            final_filter = extra_filter;\n                        }\n                    } else {\n                        final_filter = filter;\n                    }\n                    $scope.$broadcast('downloadCsv', {\n                        'columns': columns,\n                        'filter': final_filter,\n                        'order': order\n                    });\n                };\n\n                var addItemToSelection = $scope.$on('addItemToSelection', function(event, item) {\n                    if (!$scope.selectedItems[item.key]) {\n                        $scope.selectedItems[item.key] = {\n                            data: item.data,\n                            visible: item.visible\n                        };\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n                        item.isSelected = true;\n                        $scope.selectionManager.lastItem = item;\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n                    }\n\n                });\n\n                var removeItemFromSelection = $scope.$on('removeItemFromSelection', function(event, item) {\n                    if ($scope.selectedItems[item.key]) {\n                        delete $scope.selectedItems[item.key];\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n                        item.isSelected = false;\n                        $scope.selectionManager.lastItem = item;\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n                    }\n                });\n\n                $scope.$on('$destroy', function() {\n                    adfDashboardCollapseExpand();\n                    adfWidgetEnterEditMode();\n                    adfIsEditMode();\n                    adfDashboardChanged();\n                    adfDashboardEditsCancelled();\n                    addItemToSelection();\n                    removeItemFromSelection();\n                });\n            },\n            compile: function() {\n\n                /**\n                 * use pre link, because link of widget-content\n                 * is executed before post link widget\n                 */\n                return {\n                    pre: preLink,\n                    post: postLink\n                };\n            }\n        };\n\n    });","(function(window, undefined) {'use strict';\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf', ['adf.provider', 'adf.locale', 'ui.bootstrap', 'opengate-angular-js'])\n    .value('adfTemplatePath', '../src/templates/')\n    .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\n    .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\n    .value('adfVersion', '3.1.0');\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf.locale', [])\n\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardColumn', function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\n    \n\n    /**\n     * moves a widget in between a column\n     */\n    function moveWidgetInColumn($scope, column, evt){\n      var widgets = column.widgets;\n      // move widget and apply to scope\n      $scope.$apply(function(){\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\n      });\n    }\n\n    /**\n     * finds a widget by its id in the column\n     */\n    function findWidget(column, index){\n      var widget = null;\n      for (var i=0; i<column.widgets.length; i++){\n        var w = column.widgets[i];\n        if (dashboard.idEquals(w.wid,index)){\n          widget = w;\n          break;\n        }\n      }\n      return widget;\n    }\n\n    /**\n     * finds a column by its id in the model\n     */\n    function findColumn(model, index){\n      var column = null;\n      for (var i=0; i<model.rows.length; i++){\n        var r = model.rows[i];\n        for (var j=0; j<r.columns.length; j++){\n          var c = r.columns[j];\n          if (dashboard.idEquals(c.cid, index)){\n            column = c;\n            break;\n          } else if (c.rows){\n            column = findColumn(c, index);\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * get the adf id from an html element\n     */\n    function getId(el){\n      var id = el.getAttribute('adf-id');\n      return id ? id : '-1';\n    }\n\n    /**\n     * adds a widget to a column\n     */\n    function addWidgetToColumn($scope, model, targetColumn, evt){\n      // find source column\n      var cid = getId(evt.from);\n      var sourceColumn = findColumn(model, cid);\n\n      if (sourceColumn){\n        // find moved widget\n        var wid = getId(evt.item);\n        var widget = findWidget(sourceColumn, wid);\n\n        if (widget){\n          // add new item and apply to scope\n          $scope.$apply(function(){\n            if (!targetColumn.widgets) {\n              targetColumn.widgets = [];\n            }\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\n\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\n          });\n        } else {\n          $log.warn('could not find widget with id ' + wid);\n        }\n      } else {\n        $log.warn('could not find column with id ' + cid);\n      }\n    }\n\n    /**\n     * removes a widget from a column\n     */\n    function removeWidgetFromColumn($scope, column, evt){\n      // remove old item and apply to scope\n      $scope.$apply(function(){\n        column.widgets.splice(evt.oldIndex, 1);\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n      });\n    }\n\n    /**\n     * enable sortable\n     */\n    function applySortable($scope, $element, model, column){\n      // enable drag and drop\n      var el = $element[0];\n      var sortable = Sortable.create(el, {\n        group: 'widgets',\n        handle: '.adf-move',\n        ghostClass: 'placeholder',\n        animation: 150,\n        onAdd: function(evt){\n          addWidgetToColumn($scope, model, column, evt);\n        },\n        onRemove: function(evt){\n          removeWidgetFromColumn($scope, column, evt);\n        },\n        onUpdate: function(evt){\n          moveWidgetInColumn($scope, column, evt);\n        }\n      });\n\n      // destroy sortable on column destroy event\n      $element.on('$destroy', function () {\n        // check sortable element, before calling destroy\n        // see https://github.com/sdorra/angular-dashboard-framework/issues/118\n        if (sortable.el){\n          sortable.destroy();\n        }\n      });\n    }\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        column: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        adfModel: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\n      link: function ($scope, $element) {\n        // set id\n        var col = $scope.column;\n        if (!col.cid){\n          col.cid = dashboard.id();\n        }\n\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\n          $compile(rowTemplate)($scope, function(cloned) {\n            $element.append(cloned);\n          });\n        } else {\n          // enable drag and drop for widget only columns\n          applySortable($scope, $element, $scope.adfModel, col);\n        }\n      }\n    };\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @ngdoc directive\n * @name adf.directive:adfDashboard\n * @element div\n * @restrict EA\n * @scope\n * @description\n *\n * `adfDashboard` is a directive which renders the dashboard with all its\n * components. The directive requires a name attribute. The name of the\n * dashboard can be used to store the model.\n *\n * @param {string} name name of the dashboard. This attribute is required.\n * @param {boolean=} editable false to disable the editmode of the dashboard.\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\n * @param {string=} structure the default structure of the dashboard.\n * @param {object=} adfModel model object of the dashboard.\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\n *                   events during edit mode not reset it if edit mode is exited.\n * @param {boolean=} categories enable categories for the add widget dialog.\n */\n\nangular.module('adf')\n    .directive('adfDashboard', function($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath, $faIcons) {\n        \n\n        function stringToBoolean(string) {\n            switch (angular.isDefined(string) ? string.toLowerCase() : null) {\n                case 'true':\n                case 'yes':\n                case '1':\n                    return true;\n                case 'false':\n                case 'no':\n                case '0':\n                case null:\n                    return false;\n                default:\n                    return Boolean(string);\n            }\n        }\n\n        function copyWidgets(source, target) {\n            if (source.widgets && source.widgets.length > 0) {\n                var w = source.widgets.shift();\n                while (w) {\n                    target.widgets.push(w);\n                    w = source.widgets.shift();\n                }\n            }\n        }\n\n        /**\n         * Copy widget from old columns to the new model\n         * @param object root the model\n         * @param array of columns\n         * @param counter\n         */\n        function fillStructure(root, columns, counter) {\n            counter = counter || 0;\n\n            if (angular.isDefined(root.rows)) {\n                angular.forEach(root.rows, function(row) {\n                    angular.forEach(row.columns, function(column) {\n                        // if the widgets prop doesn't exist, create a new array for it.\n                        // this allows ui.sortable to do it's thing without error\n                        if (!column.widgets) {\n                            column.widgets = [];\n                        }\n\n                        // if a column exist at the counter index, copy over the column\n                        if (angular.isDefined(columns[counter])) {\n                            // do not add widgets to a column, which uses nested rows\n                            if (angular.isUndefined(column.rows)) {\n                                copyWidgets(columns[counter], column);\n                                counter++;\n                            }\n                        }\n\n                        // run fillStructure again for any sub rows/columns\n                        counter = fillStructure(column, columns, counter);\n                    });\n                });\n            }\n            return counter;\n        }\n\n        /**\n         * Read Columns: recursively searches an object for the 'columns' property\n         * @param object model\n         * @param array  an array of existing columns; used when recursion happens\n         */\n        function readColumns(root, columns) {\n            columns = columns || [];\n\n            if (angular.isDefined(root.rows)) {\n                angular.forEach(root.rows, function(row) {\n                    angular.forEach(row.columns, function(col) {\n                        columns.push(col);\n                        // keep reading columns until we can't any more\n                        readColumns(col, columns);\n                    });\n                });\n            }\n\n            return columns;\n        }\n\n        function changeStructure(model, structure) {\n            var columns = readColumns(model);\n            var counter = 0;\n\n            model.rows = angular.copy(structure.rows);\n\n            while (counter < columns.length) {\n                counter = fillStructure(model, columns, counter);\n            }\n        }\n\n        function createConfiguration(type) {\n            var cfg = {};\n            var config = dashboard.widgets[type].config;\n            if (config) {\n                cfg = angular.copy(config);\n            }\n            return cfg;\n        }\n\n        function createWidget(type) {\n            var wdgt = {};\n            var widget = dashboard.widgets[type];\n            if (widget) {\n                wdgt = angular.copy(widget);\n            }\n            return wdgt;\n        }\n\n        /**\n         * Find first widget column in model.\n         *\n         * @param dashboard model\n         */\n        function findFirstWidgetColumn(model) {\n            var column = null;\n            if (!angular.isArray(model.rows)) {\n                $log.error('model does not have any rows');\n                return null;\n            }\n            for (var i = 0; i < model.rows.length; i++) {\n                var row = model.rows[i];\n                if (angular.isArray(row.columns)) {\n                    for (var j = 0; j < row.columns.length; j++) {\n                        var col = row.columns[j];\n                        if (!col.rows) {\n                            column = col;\n                            break;\n                        }\n                    }\n                }\n                if (column) {\n                    break;\n                }\n            }\n            return column;\n        }\n\n        /**\n         * Adds the widget to first column of the model.\n         *\n         * @param dashboard model\n         * @param widget to add to model\n         * @param name name of the dashboard\n         */\n        function addNewWidgetToModel(model, widget, name, forceToSave) {\n            if (model) {\n                var column = findFirstWidgetColumn(model);\n                if (column) {\n                    if (!column.widgets) {\n                        column.widgets = [];\n                    }\n                    column.widgets.unshift(widget);\n\n                    // broadcast added event\n                    $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\n\n                    if (forceToSave) {\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\n                    }\n                } else {\n                    $log.error('could not find first widget column');\n                }\n            } else {\n                $log.error('model is undefined');\n            }\n        }\n\n        /**\n         * Checks if the edit mode of the widget should be opened immediately.\n         *\n         * @param widget type\n         */\n        function isEditModeImmediate(type) {\n            var widget = dashboard.widgets[type];\n            return widget && widget.edit && widget.edit.immediate;\n        }\n\n        /**\n         * Opens the edit mode of the specified widget.\n         *\n         * @param dashboard scope\n         * @param widget\n         */\n        function openEditMode($scope, widget) {\n            // wait some time before fire enter edit mode event\n            $timeout(function() {\n                $scope.$broadcast('adfWidgetEnterEditMode', widget);\n            }, 200);\n        }\n\n        /**\n         * Splits an object into an array multiple objects inside.\n         *\n         * @param object source object\n         * @param size size of array\n         *\n         * @return array of splitted objects\n         */\n        function split(object, size) {\n            var arr = [];\n            var i = 0;\n            angular.forEach(object, function(value, key) {\n                var index = i++ % size;\n                if (!arr[index]) {\n                    arr[index] = {};\n                }\n                arr[index][key] = value;\n            });\n            return arr;\n        }\n\n        /**\n         * Creates object with the category name as key and an array of widgets as value.\n         *\n         * @param widgets array of widgets\n         *\n         * @return array of categories\n         */\n        function createCategories(widgets) {\n            var categories = {};\n            angular.forEach(widgets, function(widget, key) {\n                var category = widget.category;\n                // if the widget has no category use a default one\n                if (!category) {\n                    category = 'Miscellaneous';\n                }\n                // push widget to category array\n                if (angular.isUndefined(categories[category])) {\n                    categories[category] = { widgets: {} };\n                }\n                categories[category].widgets[key] = widget;\n            });\n            return categories;\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            scope: {\n                structure: '@',\n                name: '@',\n                collapsible: '@',\n                editable: '@',\n                editMode: '@',\n                continuousEditMode: '=',\n                maximizable: '@',\n                adfModel: '=',\n                adfWidgetFilter: '=',\n                categories: '@',\n                hideButtons: '=',\n                extraData: '='\n            },\n            controller: function($scope) {\n                var model = {};\n                var structure = {};\n                var widgetFilter = null;\n                var structureName = {};\n                var name = $scope.name;\n\n                // Watching for changes on adfModel\n                $scope.$watch('adfModel', function(oldVal, newVal) {\n                    // has model changed or is the model attribute not set\n                    if (newVal !== null || (oldVal === null && newVal === null)) {\n                        model = $scope.adfModel;\n                        widgetFilter = $scope.adfWidgetFilter;\n                        if (!model || !model.rows) {\n                            structureName = $scope.structure;\n                            structure = dashboard.structures[structureName];\n                            if (structure) {\n                                if (model) {\n                                    model.rows = angular.copy(structure).rows;\n                                } else {\n                                    model = angular.copy(structure);\n                                }\n                                model.structure = structureName;\n                            } else {\n                                $log.error('could not find structure ' + structureName);\n                            }\n                        }\n\n                        if (model) {\n                            if (!model.title) {\n                                model.title = 'Empty Dashboard';\n                            }\n                            if (!model.titleTemplateUrl) {\n                                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\n                            }\n                            $scope.model = model;\n                        } else {\n                            $log.error('could not find or create model');\n                        }\n                    }\n                }, true);\n\n                // edit mode\n                $scope.editMode = false;\n                $scope.editClass = '';\n\n                //passs translate function from dashboard so we can translate labels inside html templates\n                $scope.translate = dashboard.translate;\n\n                function getNewModalScope() {\n                    var scope = $scope.$new();\n                    //pass translate function to the new scope so we can translate the labels inside the modal dialog\n                    scope.translate = dashboard.translate;\n                    return scope;\n                }\n\n                $scope.deleteDashboard = function() {\n                    var dashData = {\n                        id: model.id,\n                        name: model.title\n                    };\n\n                    $rootScope.$broadcast('dashboardDelete', dashData);\n                };\n\n                $scope.toggleEditMode = function(openConfigWindow) {\n                    $scope.editMode = !$scope.editMode;\n                    if ($scope.editMode) {\n                        if (!$scope.continuousEditMode) {\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\n                            $rootScope.$broadcast('adfIsEditMode');\n                        }\n\n                        if (openConfigWindow) {\n                            $scope.editDashboardDialog();\n                        }\n                    }\n\n                    if (!$scope.editMode) {\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\n                    }\n                };\n\n                $scope.saveTemporalDashboard = function() {\n                    delete model.temporal;\n                    $rootScope.$broadcast('adfDashboardChanged', name, model);\n                };\n\n                var adfToggleEditMode = $scope.$on('adfToggleEditMode', function(event, isNewDashboard) {\n                    if (isNewDashboard) {\n                        $scope.toggleEditMode(true);\n                    } else {\n                        $scope.toggleEditMode();\n                    }\n                });\n\n                var adfCancelEditMode = $scope.$on('adfCancelEditMode', function(event, isNewDashboard) {\n                    if ($scope.editMode) {\n                        $scope.cancelEditMode();\n                    }\n                });\n\n                $scope.collapseAll = function(collapseExpandStatus) {\n                    $rootScope.$broadcast('adfDashboardCollapseExpand', { collapseExpandStatus: collapseExpandStatus });\n                };\n\n                $scope.cancelEditMode = function() {\n                    $scope.editMode = false;\n                    if (!$scope.continuousEditMode && ($scope.modelCopy !== $scope.adfModel)) {\n                        $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\n                    }\n                    $rootScope.$broadcast('adfDashboardEditsCancelled');\n                };\n\n                var adfEditDashboardDialog = $scope.$on('adfEditDashboardDialog', function(event, isNewDashboard) {\n                    if ($scope.editMode) {\n                        $scope.editDashboardDialog();\n                    }\n                });\n\n                var adfLaunchSearchingFromWidget = $scope.$on('adfLaunchSearchingFromWidget', function(event, widget, configFilter) {\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\n                });\n                var adfWindowTimeChangedFromWidget = $scope.$on('adfWindowTimeChangedFromWidget', function(event, widget, windowFilter) {\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\n                });\n\n                // edit dashboard settings\n                $scope.editDashboardDialog = function() {\n                    var editDashboardScope = getNewModalScope();\n                    // create a copy of the title, to avoid changing the title to\n                    // \"dashboard\" if the field is empty\n                    editDashboardScope.copy = {\n                        title: (model.title !== 'Empty Dashboard' ? model.title : ''),\n                        description: model.description,\n                        icon: model.icon ? model.icon : 'fa-tachometer'\n                    };\n\n                    // pass icon list\n                    editDashboardScope.availableIcons = $faIcons.list();\n\n                    // pass dashboard structure to scope\n                    editDashboardScope.structures = dashboard.structures;\n\n                    // pass split function to scope, to be able to display structures in multiple columns\n                    editDashboardScope.split = split;\n\n                    var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\n                    if (model.editTemplateUrl) {\n                        adfEditTemplatePath = model.editTemplateUrl;\n                    }\n                    var instance = $uibModal.open({\n                        scope: editDashboardScope,\n                        templateUrl: adfEditTemplatePath,\n                        backdrop: 'static',\n                        keyboard: false,\n                        size: 'lg'\n                    });\n\n                    editDashboardScope.changeStructure = function(name, structure) {\n                        $log.info('change structure to ' + name);\n                        changeStructure(model, structure);\n                        if (model.structure !== name) {\n                            model.structure = name;\n                        }\n                    };\n                    editDashboardScope.closeDialog = function() {\n                        // copy the new title back to the model\n                        model.title = editDashboardScope.copy.title;\n                        model.description = editDashboardScope.copy.description;\n                        model.icon = editDashboardScope.copy.icon;\n\n                        // close modal and destroy the scope\n                        instance.close();\n                        editDashboardScope.$destroy();\n                    };\n                };\n\n                var adfOpenWidgetFromOther = $scope.$on('adfOpenWidgetFromOther', function(event, widget, config) {\n                    var internal_config = createConfiguration(widget);\n                    var _config = angular.merge({}, internal_config, config);\n                    var w = {\n                        type: widget,\n                        config: _config,\n                        title: _config.title\n                    };\n                    addNewWidgetToModel(model, w, name, !$scope.editMode);\n                });\n\n                var adfOpenModalWidgetFromOther = $scope.$on('adfOpenModalWidgetFromOther', function(event, widgetType, config) {\n                    var widget = createWidget(widgetType);\n                    widget.config = angular.merge({}, widget.config, config);\n                    widget.type = widgetType;\n                    if (widget.config.title) {\n                        widget.title = widget.config.title;\n                    }\n                    var fullScreenScope = $scope.$new();\n                    fullScreenScope.definition = fullScreenScope.widget = widget;\n                    var opts = {\n                        scope: fullScreenScope,\n                        templateUrl: adfTemplatePath + 'widget-fullscreen.html',\n                        size: fullScreenScope.definition.modalSize || 'lg', // 'sm', 'lg'\n                        backdrop: 'static',\n                        windowClass: (fullScreenScope.definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n                    };\n\n                    fullScreenScope.persistDashboard = function() {\n                        $rootScope.$broadcast('adfOpenWidgetFromOther', this.$parent.widget.type, this.$parent.widget.config);\n                        this.closeDialog();\n                    }\n\n                    var instance = $uibModal.open(opts);\n                    fullScreenScope.closeDialog = function() {\n                        instance.close();\n                        fullScreenScope.$destroy();\n                    };\n\n                });\n\n                var adfAddWidgetDialog = $scope.$on('adfAddWidgetDialog', function(event, isNewDashboard) {\n                    if (!model.temporal && model.editable) {\n                        if (!$scope.editMode) {\n                            $scope.editMode = true;\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\n                            $rootScope.$broadcast('adfIsEditMode');\n                        }\n\n                        $scope.addWidgetDialog();\n                    }\n                });\n\n                // add widget dialog\n                $scope.addWidgetDialog = function() {\n                    var addScope = getNewModalScope();\n                    var widgets;\n                    if (angular.isFunction(widgetFilter)) {\n                        widgets = {};\n                        angular.forEach(dashboard.widgets, function(widget, type) {\n                            if (widgetFilter(widget, type, model)) {\n                                widgets[type] = widget;\n                            }\n                        });\n                    } else {\n                        widgets = dashboard.widgets;\n                    }\n                    addScope.widgets = widgets;\n\n                    //pass translate function to the new scope so we can translate the labels inside the modal dialog\n                    addScope.translate = $scope.translate;\n\n                    // pass createCategories function to scope, if categories option is enabled\n                    if ($scope.options.categories) {\n                        $scope.createCategories = createCategories;\n                    }\n\n                    var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\n                    if (model.addTemplateUrl) {\n                        adfAddTemplatePath = model.addTemplateUrl;\n                    }\n\n                    var opts = {\n                        scope: addScope,\n                        templateUrl: adfAddTemplatePath,\n                        backdrop: 'static'\n                    };\n\n                    var instance = $uibModal.open(opts);\n                    addScope.addWidget = function(widget) {\n                        var w = {\n                            type: widget,\n                            config: createConfiguration(widget)\n                        };\n                        addNewWidgetToModel(model, w, name);\n                        // close and destroy\n                        instance.close();\n                        addScope.$destroy();\n\n                        // check for open edit mode immediately\n                        if (isEditModeImmediate(widget)) {\n                            openEditMode($scope, w);\n                        }\n                    };\n                    addScope.closeDialog = function() {\n                        // close and destroy\n                        instance.close();\n                        addScope.$destroy();\n                    };\n                };\n\n                $scope.addNewWidgetToModel = addNewWidgetToModel;\n\n                $scope.$on('destroy', function() {\n                    adfLaunchSearchingFromWidget();\n                    adfWindowTimeChangedFromWidget();\n                    adfToggleEditMode();\n                    adfOpenWidgetFromOther();\n                    adfOpenModalWidgetFromOther();\n                    adfCancelEditMode();\n                    adfAddWidgetDialog();\n                    adfEditDashboardDialog();\n                });\n            },\n            link: function($scope, $element, $attr) {\n                // pass options to scope\n                var options = {\n                    name: $attr.name,\n                    editable: true,\n                    enableConfirmDelete: stringToBoolean($attr.enableConfirmDelete),\n                    maximizable: stringToBoolean($attr.maximizable),\n                    collapsible: stringToBoolean($attr.collapsible),\n                    categories: stringToBoolean($attr.categories),\n                    extraData: {}\n                };\n\n                if (angular.isDefined($attr.editable)) {\n                    options.editable = stringToBoolean($attr.editable);\n                }\n\n                if (angular.isDefined($scope.extraData)) {\n                    options.extraData = $scope.extraData;\n                }\n\n                options.extraData.editing = $scope.editMode;\n\n                $scope.options = options;\n            },\n            templateUrl: adfTemplatePath + 'dashboard.html'\n        };\n    });\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\n/**\n * @ngdoc object\n * @name adf.locale#adfLocale\n * @description\n *\n * Holds settings and values for framework supported locales\n */\nangular.module('adf.locale')\n    .constant('adfLocale', {\n        defaultLocale: 'en-GB',\n        frameworkLocales: {\n            'en-GB': {\n                ADF_COMMON_CLOSE: 'Close',\n                ADF_COMMON_DELETE: 'Delete',\n                ADF_COMMON_TITLE: 'Title',\n                ADF_COMMON_DESCRIPTION: 'Description',\n                ADF_COMMON_CANCEL: 'Cancel',\n                ADF_COMMON_APPLY: 'Apply',\n                ADF_COMMON_EDIT_DASHBOARD: 'Edit dashboard',\n                ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Structure',\n                ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Add new widget',\n                ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Save changes',\n                ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Enable edit mode',\n                ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Undo changes',\n                ADF_WIDGET_ADD_HEADER: 'Add new widget',\n                ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Are you sure you want to delete this widget ?',\n                ADF_WIDGET_TOOLTIP_REFRESH: 'Reload widget Content',\n                ADF_WIDGET_TOOLTIP_PRINT: 'Print widget Content',\n                ADF_WIDGET_TOOLTIP_FILTER: 'Show widget Filter',\n                ADF_WIDGET_TOOLTIP_SORT: 'Show widget Sort',\n                ADF_WIDGET_TOOLTIP_MOVE: 'Change widget location',\n                ADF_WIDGET_TOOLTIP_COLLAPSE: 'Collapse widget',\n                ADF_WIDGET_TOOLTIP_EXPAND: 'Expand widget',\n                ADF_WIDGET_TOOLTIP_EDIT: 'Edit widget configuration',\n                ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Fullscreen widget',\n                ADF_WIDGET_TOOLTIP_REMOVE: 'Remove widget',\n                ADF_WIDGET_TOOLTIP_OPERATION: 'Execute operation',\n                ADF_WIDGET_TOOLTIP_SELECTION: 'Items selected',\n                ADF_WIDGET_CLEAR: 'Clear',\n                ADF_WIDGET_RESTORE: 'Restore',\n                ADF_WIDGET_FILTER: 'Filter'\n            },\n            'sv-SE': {\n                ADF_COMMON_CLOSE: 'Stäng',\n                ADF_COMMON_DELETE: 'Ta bort',\n                ADF_COMMON_TITLE: 'Titel',\n                ADF_COMMON_DESCRIPTION: 'Description',\n                ADF_COMMON_CANCEL: 'Avbryt',\n                ADF_COMMON_APPLY: 'Använd',\n                ADF_COMMON_EDIT_DASHBOARD: 'Redigera dashboard',\n                ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Struktur',\n                ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Lägg till ny widget',\n                ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Spara förändringar',\n                ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Slå på redigeringsläge',\n                ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Ångra förändringar',\n                ADF_WIDGET_ADD_HEADER: 'Lägg till ny widget',\n                ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Är du säker på att du vill ta bort denna widget ?',\n                ADF_WIDGET_TOOLTIP_REFRESH: 'Ladda om widget',\n                ADF_WIDGET_TOOLTIP_FILTER: 'Show widget Filter',\n                ADF_WIDGET_TOOLTIP_SORT: 'Show widget Sort',\n                ADF_WIDGET_TOOLTIP_MOVE: 'Ändra widgets position',\n                ADF_WIDGET_TOOLTIP_COLLAPSE: 'Stäng widget',\n                ADF_WIDGET_TOOLTIP_EXPAND: 'Öppna widget',\n                ADF_WIDGET_TOOLTIP_EDIT: 'Ändra widget konfigurering',\n                ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Visa widget i fullskärm',\n                ADF_WIDGET_TOOLTIP_REMOVE: 'Ta bort widget',\n                ADF_WIDGET_TOOLTIP_OPERATION: 'Execute operation',\n                ADF_WIDGET_TOOLTIP_SELECTION: 'Items selected',\n                ADF_WIDGET_CLEAR: 'Clear',\n                ADF_WIDGET_RESTORE: 'Restore',\n                ADF_WIDGET_FILTER: 'Filter'\n            }\n        }\n    });\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .filter('adfOrderByObjectKey', function($filter) {\n    \n\n    return function(item, key){\n      var array = [];\n      angular.forEach(item, function(value, objectKey){\n        value[key] = objectKey;\n        array.push(value);\n      });\n      return $filter('orderBy')(array, key);\n    };\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\n/**\n * @ngdoc object\n * @name adf.dashboardProvider\n * @description\n *\n * The dashboardProvider can be used to register structures and widgets.\n */\nangular.module('adf.provider', ['adf.locale'])\n    .provider('dashboard', function(adfLocale) {\n\n        var widgets = {};\n        var widgetsPath = '';\n        var structures = {};\n        var messageTemplate = '<div class=\"alert alert-primary\">{}</div>';\n        var loadingTemplate = '\\\n      <div class=\"progress progress-striped active\">\\n\\\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\n          <span class=\"sr-only\">loading ...</span>\\n\\\n        </div>\\n\\\n      </div>';\n        var customWidgetTemplatePath = null;\n\n        // default apply function of widget.edit.apply\n        var defaultApplyFunction = function() {\n            return true;\n        };\n\n        var activeLocale = adfLocale.defaultLocale;\n        var locales = adfLocale.frameworkLocales;\n\n        function getLocales() {\n            return locales;\n        }\n\n        function getActiveLocale() {\n            return activeLocale;\n        }\n\n        function translate(label) {\n            var translation = locales[activeLocale][label];\n            return translation ? translation : label;\n        }\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#widget\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Registers a new widget.\n         *\n         * @param {string} name of the widget\n         * @param {object} widget to be registered.\n         *\n         *   Object properties:\n         *\n         *   - `title` - `{string=}` - The title of the widget.\n         *   - `description` - `{string=}` - Description of the widget.\n         *   - `category` - `{string=}` - Category of the widget.\n         *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\n         *   - `config` - `{object}` - Predefined widget configuration.\n         *   - `controller` - `{string=|function()=}` - Controller fn that should be\n         *      associated with newly created scope of the widget or the name of a\n         *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\n         *      if passed as a string.\n         *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\n         *      published to scope under the `controllerAs` name.\n         *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\n         *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\n         *   - `template` - `{string=|function()=}` - html template as a string.\n         *   - `templateUrl` - `{string=}` - path to an html template.\n         *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\n         *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n         *      be injected into the controller. If any of these dependencies are promises, the widget\n         *      will wait for them all to be resolved or one to be rejected before the controller is\n         *      instantiated.\n         *      If all the promises are resolved successfully, the values of the resolved promises are\n         *      injected.\n         *\n         *      The map object is:\n         *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n         *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n         *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\n         *        and the return value is treated as the dependency. If the result is a promise, it is\n         *        resolved before its value is injected into the controller.\n         *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n         *      on the scope of the widget.\n         *   - `edit` - `{object}` - Edit modus of the widget.\n         *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n         *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\n         *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n         *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\n         *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\n         *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n         *        on the scope of the widget.\n         *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\n         *        Default is true.\n         *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\n         *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\n         *        The function have to return a boolean or an promise which can be resolved to a boolean.\n         *        The function can use injection.\n         *\n         * @returns {Object} self\n         */\n        this.widget = function(name, widget) {\n            var w = angular.extend({ reload: false, frameless: false }, widget);\n            if (w.edit) {\n                var edit = {\n                    reload: true,\n                    immediate: false,\n                    apply: defaultApplyFunction\n                };\n                angular.extend(edit, w.edit);\n                w.edit = edit;\n            }\n            widgets[name] = w;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#widgetsPath\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Sets the path to the directory which contains the widgets. The widgets\n         * path is used for widgets with a templateUrl which contains the\n         * placeholder {widgetsPath}. The placeholder is replaced with the\n         * configured value, before the template is loaded, but the template is\n         * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\n         * The default value of widgetPaths is ''.\n         *\n         *\n         * @param {string} path to the directory which contains the widgets\n         *\n         * @returns {Object} self\n         */\n        this.widgetsPath = function(path) {\n            widgetsPath = path;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#structure\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Registers a new structure.\n         *\n         * @param {string} name of the structure\n         * @param {object} structure to be registered.\n         *\n         *   Object properties:\n         *\n         *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\n         *     - `styleClass` - `{string}` - CSS Class of the row.\n         *     - `columns` - `{Array.<Object>}` - Columns of the row.\n         *       - `styleClass` - `{string}` - CSS Class of the column.\n         *\n         * @returns {Object} self\n         */\n        this.structure = function(name, structure) {\n            structures[name] = structure;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#messageTemplate\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the template for messages.\n         *\n         * @param {string} template for messages.\n         *\n         * @returns {Object} self\n         */\n        this.messageTemplate = function(template) {\n            messageTemplate = template;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#loadingTemplate\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the template which is displayed as\n         * long as the widget resources are not resolved.\n         *\n         * @param {string} template loading template\n         *\n         * @returns {Object} self\n         */\n        this.loadingTemplate = function(template) {\n            loadingTemplate = template;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#customWidgetTemplatePath\n         * @propertyOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the container template for the widgets\n         *\n         * @param {string} path to the custom widget template\n         *\n         * @returns {Object} self\n         */\n        this.customWidgetTemplatePath = function(templatePath) {\n            customWidgetTemplatePath = templatePath;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#setLocale\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the locale setting of adf\n         *\n         * @param {string} ISO Language Code\n         *\n         * @returns {Object} self\n         */\n        this.setLocale = function(locale) {\n            if (locales[locale]) {\n                activeLocale = locale;\n            } else {\n                throw new Error('Cannot set locale: ' + locale + '. Locale is not defined.');\n            }\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#addLocale\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Adds a new locale to adf\n         *\n         * @param {string} ISO Language Code for the new locale\n         * @param {object} translations for the locale.\n         *\n         * @returns {Object} self\n         */\n        this.addLocale = function(locale, translations) {\n            if (!angular.isString(locale)) {\n                throw new Error('locale must be an string');\n            }\n\n            if (!angular.isObject(translations)) {\n                throw new Error('translations must be an object');\n            }\n\n            locales[locale] = translations;\n            return this;\n        };\n\n        /**\n         * @ngdoc service\n         * @name adf.dashboard\n         * @description\n         *\n         * The dashboard holds all options, structures and widgets.\n         *\n         * @property {Array.<Object>} widgets Array of registered widgets.\n         * @property {string} widgetsPath Default path for widgets.\n         * @property {Array.<Object>} structures Array of registered structures.\n         * @property {string} messageTemplate Template for messages.\n         * @property {string} loadingTemplate Template for widget loading.\n         * @property {method} sets locale of adf.\n         * @property {Array.<Object>} hold all of the locale translations.\n         * @property {string} the active locale setting.\n         * @property {method} translation function passed to templates.\n         *\n         * @returns {Object} self\n         */\n        this.$get = function() {\n            var cid = 0;\n\n            return {\n                widgets: widgets,\n                widgetsPath: widgetsPath,\n                structures: structures,\n                messageTemplate: messageTemplate,\n                loadingTemplate: loadingTemplate,\n                setLocale: this.setLocale,\n                locales: getLocales,\n                activeLocale: getActiveLocale,\n                translate: translate,\n                customWidgetTemplatePath: customWidgetTemplatePath,\n\n                /**\n                 * @ngdoc method\n                 * @name adf.dashboard#id\n                 * @methodOf adf.dashboard\n                 * @description\n                 *\n                 * Creates an ongoing numeric id. The method is used to create ids for\n                 * columns and widgets in the dashboard.\n                 */\n                id: function() {\n                    return new Date().getTime() + '-' + (++cid);\n                },\n\n                /**\n                 * @ngdoc method\n                 * @name adf.dashboard#idEqual\n                 * @methodOf adf.dashboard\n                 * @description\n                 *\n                 * Checks if the given ids are equal.\n                 *\n                 * @param {string} id widget or column id\n                 * @param {string} other widget or column id\n                 */\n                idEquals: function(id, other) {\n                    // use toString, because old ids are numbers\n                    return ((id) && (other)) && (id.toString() === other.toString());\n                }\n            };\n        };\n\n    });\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardRow', function ($compile, adfTemplatePath, columnTemplate) {\n    \n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        row: '=',\n        adfModel: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\n      link: function($scope, $element) {\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\n          $compile(columnTemplate)($scope, function(cloned) {\n            $element.append(cloned);\n          });\n        }\n      }\n    };\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfStructurePreview', function(adfTemplatePath) {\n\n    function adjustRowHeight(container){\n      if (container.rows && container.rows.length > 0){\n        var height = 100 / container.rows.length;\n        angular.forEach(container.rows, function(row){\n          row.style = {\n            height: height + '%'\n          }\n\n          if (row.columns){\n            angular.forEach(row.columns, function(column){\n              adjustRowHeight(column);\n            });\n          }\n        });\n      }\n    }\n\n    function prepareStructure($scope){\n      var structure = angular.copy($scope.structure);\n      adjustRowHeight(structure);\n      $scope.preview = structure;\n    }\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        name: '=',\n        structure: '=',\n        selected: '='\n      },\n      templateUrl: adfTemplatePath + 'structure-preview.html',\n      link: prepareStructure\n    };\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf')\n    .directive('adfWidgetContent', function($log, $q, widgetService,\n        $compile, $controller, $injector, dashboard) {\n\n        function renderError($element, msg) {\n            $log.warn(msg);\n            $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\n        }\n\n        function compileWidget($scope, $element, currentScope, configChanged) {\n            var model = $scope.model;\n            var content = $scope.content;\n\n            var extra = $scope.extra;\n\n            var newScope = currentScope;\n            if (!model) {\n                renderError($element, 'model is undefined');\n            } else if (!content) {\n                //var msg = 'widget content is undefined, please have a look at your browser log';\n                var msg = 'Widget ' + (model.title ? 'for \"' + model.title + '\"' : '') + ' has been deprecated. In order to continue you have to delete this one and look for the equivalent one.';\n                renderError($element, msg);\n            } else {\n                if (newScope) {\n                    var is_menu = newScope.menu !== undefined && newScope.menu !== null;\n                    var is_itemsPerPage = newScope.itemsPerPage !== undefined && newScope.itemsPerPage !== null;\n                    if (is_menu || is_itemsPerPage || configChanged || !angular.isFunction(newScope.reloadData)) {\n                        newScope = renderWidget($scope, $element, currentScope, model, content, extra);\n                    } else {\n                        newScope.reloadData();\n                    }\n                } else {\n                    newScope = renderWidget($scope, $element, currentScope, model, content, extra);\n                }\n            }\n\n            function _getWindowTime(type) {\n                if (type === \"custom\") {\n                    return {\n                        from: newScope.config.windowFilter.from,\n                        to: newScope.config.windowFilter.to\n                    }\n                }\n                var from = window.moment().subtract(1, type);\n                return {\n                    from: from._d\n                };\n            }\n\n            if (newScope) {\n                if (newScope.config) {\n                    newScope.config.getWindowTime = function() {\n                        var windowFilter = newScope.config.windowFilter;\n                        if (windowFilter && windowFilter.type) {\n                            var winTime = _getWindowTime(windowFilter.type);\n                            /* jshint ignore:start */\n                            if (!window.eval(newScope.config.windowFilter.rawdate)) {\n                                for (var key in winTime) {\n                                    winTime[key] = window.moment(winTime[key]).format();\n                                }\n                                winTime['rawdate'] = true;\n                            }\n                            /* jshint ignore:end */\n                            return winTime;\n                        }\n                    }\n                }\n\n                if (extra) {\n                    newScope.editing = extra.editing ? true : false;\n                    newScope.extraData = extra;\n                }\n            }\n            return newScope;\n        }\n\n        function renderWidget($scope, $element, currentScope, model, content, extra) {\n            // display loading template\n            $element.html(dashboard.loadingTemplate);\n\n            // create new scope\n            var templateScope = $scope.$new();\n\n            // pass config object to scope\n            if (!model.config) {\n                model.config = {};\n            }\n\n            templateScope.config = model.config;\n            templateScope.editing = extra && extra.editing;\n\n            if (extra) {\n                templateScope.extra = extra;\n            }\n\n            templateScope.selectionManager = (currentScope && currentScope.selectionManager) ? currentScope.selectionManager : undefined;\n\n            // local injections\n            var base = {\n                $scope: templateScope,\n                widget: model,\n                config: model.config\n            };\n\n            // get resolve promises from content object\n            var resolvers = {};\n            resolvers.$tpl = widgetService.getTemplate(content);\n            if (content.resolve) {\n                angular.forEach(content.resolve, function(promise, key) {\n                    if (angular.isString(promise)) {\n                        resolvers[key] = $injector.get(promise);\n                    } else {\n                        resolvers[key] = $injector.invoke(promise, promise, base);\n                    }\n                });\n            }\n\n            // resolve all resolvers\n            $q.all(resolvers).then(function(locals) {\n                angular.extend(locals, base);\n\n                // pass resolve map to template scope as defined in resolveAs\n                if (content.resolveAs) {\n                    templateScope[content.resolveAs] = locals;\n                }\n\n                // compile & render template\n                var template = locals.$tpl;\n                $element.html(template);\n                if (content.controller) {\n                    var templateCtrl = $controller(content.controller, locals);\n                    if (content.controllerAs) {\n                        templateScope[content.controllerAs] = templateCtrl;\n                    }\n                    $element.children().data('$ngControllerController', templateCtrl);\n                }\n                $compile($element.contents())(templateScope);\n            }, function(reason) {\n                // handle promise rejection\n                var msg = 'Could not resolve all promises';\n                if (reason) {\n                    msg += ': ' + reason;\n                }\n                renderError($element, msg);\n            });\n\n            // destroy old scope\n            if (currentScope) {\n                currentScope.$destroy();\n            }\n\n            return templateScope;\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            scope: {\n                model: '=',\n                content: '=',\n                extra: '='\n            },\n            link: function($scope, $element) {\n                var currentScope = compileWidget($scope, $element, null);\n                var widgetConfigChangedEvt = $scope.$on('widgetConfigChanged', function() {\n                    currentScope = compileWidget($scope, $element, currentScope, true);\n                });\n\n                var widgetReloadEvt = $scope.$on('widgetReload', function() {\n                    currentScope = compileWidget($scope, $element, currentScope, false);\n                });\n\n                $scope.$on('destroy', function() {\n                    widgetConfigChangedEvt();\n                    widgetReloadEvt();\n                });\n            }\n        };\n    });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/**\n * The widget service provide helper functions to render widgets and their content.\n */\nangular.module('adf')\n  .factory('widgetService', function($http, $q, $sce, $templateCache, dashboard) {\n    \n\n    function parseUrl(url) {\n      var parsedUrl = url;\n      if (url.indexOf('{widgetsPath}') >= 0) {\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\n                .replace('//', '/');\n        if (parsedUrl.indexOf('/') === 0) {\n          parsedUrl = parsedUrl.substring(1);\n        }\n      }\n      return parsedUrl;\n    }\n\n    var exposed = {};\n\n    exposed.getTemplate = function(widget){\n      var deferred = $q.defer();\n\n      if (widget.template) {\n        deferred.resolve(widget.template);\n      } else if (widget.templateUrl) {\n        // try to fetch template from cache\n        var tpl = $templateCache.get(widget.templateUrl);\n        if (tpl) {\n          deferred.resolve(tpl);\n        } else {\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\n          $http.get(url)\n               .success(function(response) {\n                 // put response to cache, with unmodified url as key\n                 $templateCache.put(widget.templateUrl, response);\n                 deferred.resolve(response);\n               })\n               .error(function() {\n                 deferred.reject('could not load template');\n               });\n        }\n      }\n\n      return deferred.promise;\n    };\n\n    return exposed;\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf')\n    .directive('adfWidget', function($injector, $q, $log, $uibModal, $rootScope, $interval, dashboard, adfTemplatePath, Filter) {\n        function preLink($scope) {\n            var definition = $scope.definition;\n\n            //passs translate function from dashboard so we can translate labels inside html templates\n            $scope.translate = dashboard.translate;\n\n            if (definition) {\n                var w = dashboard.widgets[definition.type];\n                if (w) {\n                    // pass title\n                    if (!definition.title) {\n                        definition.title = w.title;\n                    }\n\n                    if (!definition.titleTemplateUrl) {\n                        definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\n                        if (w.titleTemplateUrl) {\n                            definition.titleTemplateUrl = w.titleTemplateUrl;\n                        }\n                    }\n\n                    if (!definition.editTemplateUrl) {\n                        definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\n                        if (w.editTemplateUrl) {\n                            definition.editTemplateUrl = w.editTemplateUrl;\n                        }\n                    }\n\n                    if (!definition.titleTemplateUrl) {\n                        definition.frameless = w.frameless;\n                    }\n\n                    if (!definition.styleClass) {\n                        definition.styleClass = w.styleClass;\n                    }\n\n                    // set id for sortable\n                    if (!definition.wid) {\n                        definition.wid = dashboard.id();\n                    }\n\n                    // pass copy of widget to scope\n                    $scope.widget = angular.copy(w);\n\n                    // create config object\n                    var config = definition.config;\n                    if (config) {\n                        if (angular.isString(config)) {\n                            config = angular.fromJson(config);\n                        }\n                    } else {\n                        config = {};\n                    }\n\n                    if (!config.reloadPeriod) {\n                        config.reloadPeriod = \"0\";\n                    }\n\n                    if (typeof $scope.widget.show_modal_footer === \"undefined\") {\n                        $scope.widget.show_modal_footer = true;\n                    }\n\n                    if (typeof $scope.widget.show_reload_config === \"undefined\") {\n                        $scope.widget.show_reload_config = true;\n                    }\n\n                    // pass config to scope\n                    $scope.config = config;\n\n                    // collapse exposed $scope.widgetState property\n                    if (!$scope.widgetState) {\n                        $scope.widgetState = {};\n                        $scope.widgetState.isCollapsed = (w.collapsed === true) ? w.collapsed : false;\n                    }\n\n                } else {\n                    $log.warn('could not find widget ' + definition.type);\n                }\n            } else {\n                $log.debug('definition not specified, widget was probably removed');\n            }\n        }\n\n        function postLink($scope, $element) {\n            var definition = $scope.definition;\n            if (!definition) {\n                $log.debug('widget not found');\n                return;\n            }\n            if (!$scope.config) {\n                $scope.config = {};\n            }\n\n            var config = $scope.config;\n\n            // bind close function\n            var deleteWidget = function() {\n                var column = $scope.col;\n                if (column) {\n                    var index = column.widgets.indexOf(definition);\n                    if (index >= 0) {\n                        column.widgets.splice(index, 1);\n                    }\n                }\n                $element.remove();\n                $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n            };\n\n            $scope.remove = function() {\n                if ($scope.options.enableConfirmDelete) {\n                    var deleteScope = $scope.$new();\n                    deleteScope.translate = dashboard.translate;\n\n                    var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\n                    if (definition.deleteTemplateUrl) {\n                        deleteTemplateUrl = definition.deleteTemplateUrl;\n                    }\n                    var opts = {\n                        scope: deleteScope,\n                        templateUrl: deleteTemplateUrl,\n                        backdrop: 'static'\n                    };\n                    var instance = $uibModal.open(opts);\n\n                    deleteScope.closeDialog = function() {\n                        instance.close();\n                        deleteScope.$destroy();\n                    };\n                    deleteScope.deleteDialog = function() {\n                        deleteWidget();\n                        deleteScope.closeDialog();\n                    };\n                } else {\n                    deleteWidget();\n                }\n            };\n\n\n            $scope.print = function() {\n                if (!$scope.editMode) {\n                    $scope.$broadcast('widgetPrint');\n                }\n            }\n\n            $scope.isExecuteOperationEnabled = function() {\n                // if ($scope.selectionManager.totalSelected() > 0)\n                //     return true;\n                if (config.entityKey)\n                    return true;\n                var filter = config.filter;\n                if (typeof filter === \"string\") {\n                    return filter.length > 0;\n                }\n                if (typeof filter === \"object\") {\n                    return filter.value.length > 2 && filter.oql;\n                }\n                return false;\n            }\n\n            $scope.executeOperation = function() {\n                if (!$scope.editMode) {\n                    // if ($scope.selectionManager.totalSelected() > 0) {\n                    //     var selectedItems = [];\n                    //     angular.forEach($scope.selectionManager.currentSelection, function(data, key) {\n                    //         selectedItems.push({ key: key, value: data });\n                    //     });\n                    //     $scope.$parent.$broadcast('widgetExecuteOperation', { 'selectedItems': selectedItems });\n                    // } else {\n                    $scope.$parent.$broadcast('widgetExecuteOperation');\n                    // }\n                }\n            };\n\n            // bind reload function\n            var stopReloadTimeout;\n\n            function _setReloadTimeout() {\n                if (config && config.reloadPeriod && config.reloadPeriod !== \"0\") {\n                    if (angular.isDefined(stopReloadTimeout)) {\n                        $interval.cancel(stopReloadTimeout)\n                        stopReloadTimeout = undefined;\n                    };\n                    stopReloadTimeout = $interval($scope.reload, (config.reloadPeriod * 1000));\n                }\n            }\n\n            $scope.reload = function(completeReload) {\n                if (completeReload) {\n                    $scope.$broadcast('widgetReload', completeReload);\n                } else {\n                    $scope.$broadcast('widgetReload');\n                }\n\n                _setReloadTimeout();\n            };\n\n            // verificacion de periodo de refresco\n            _setReloadTimeout();\n\n            $element.on('$destroy', function() {\n                $interval.cancel(stopReloadTimeout);\n            });\n\n            $scope.filter = {\n                value: \"\"\n            };\n            $scope.sort = {\n                value: \"\",\n                direction: \"\"\n            };\n\n            $scope.toggleAdvanced = 1;\n            var filter = config.filter;\n            if (typeof filter === \"object\" && filter.oql && filter.oql.length > 2) {\n                $scope.search = {\n                    oql: filter.oql,\n                    json: filter.value\n                };\n                $scope.toggleAdvanced = 0;\n            } else if (typeof filter === \"string\") {\n                $scope.search = {\n                    quick: filter\n                };\n                $scope.toggleAdvanced = 1;\n            } else if (typeof filter === \"object\" && filter.fields) {\n                $scope.search = {\n                    customFilter: filter.fields\n                };\n                $scope.search.fields = [];\n                angular.forEach(filter.fields, function(v, key) {\n                    $scope.search.fields.push(v.name);\n                });\n                $scope.toggleAdvanced = 2;\n            } else {\n                $scope.search = {\n                    quick: filter = \"\"\n                };\n            }\n\n            $scope.toggleFilter = function(advanced) {\n                $scope.toggleAdvanced = advanced;\n            };\n            $scope.filterAvailable = false;\n            $scope.showFilter = function() {\n                $scope.filterAvailable = $scope.filterAvailable === true ? false : true;\n            };\n\n            $scope.showFinalFilter = false;\n\n            $scope.launchSearching = function() {\n                var widget = {\n                    definition: definition,\n                    element: $element\n                };\n\n                $rootScope.$broadcast('adfLaunchSearchingFromWidget', widget, $scope.config.filter);\n                $scope.reload(true);\n            }\n            $scope.addCustomFilter = function(key) {\n                $scope.search.customFilter = $scope.search.customFilter ? $scope.search.customFilter : [];\n                $scope.search.customFilter.push({ name: key, value: '' });\n            }\n\n            $scope.launchCustomFilter = function() {\n                if ($scope.search.customFilter && $scope.search.customFilter.length > 0) {\n                    $scope.search.oql = $scope.search.json = '';\n\n                    $scope.config.filter = {\n                        value: {\n                            and: []\n                        },\n                        fields: $scope.search.customFilter\n                    }\n                    angular.forEach($scope.search.customFilter, function(v, key) {\n                        if (v.value) {\n                            var like = {};\n                            like[v.name] = v.value;\n                            $scope.config.filter.value.and.push({ 'like': like });\n                        }\n\n                    });\n                    $scope.config.filter.value = JSON.stringify($scope.config.filter.value);\n                }\n\n                $scope.launchSearching();\n            }\n\n\n\n            $scope.deleteFilter = function(value, model) {\n                angular.forEach($scope.search.customFilter, function(v, key) {\n                    if (v.name === value) {\n                        $scope.search.customFilter.splice(key, 1);\n                    }\n                });\n                if ($scope.search.customFilter.length === 0) {\n                    $scope.config.filter = {};\n                }\n            };\n\n\n            $scope.launchSearchingAdv = function() {\n                $scope.search.quick = '';\n                if ($scope.search.json === '' || $scope.search.json === '{}' || (!angular.isString($scope.search.json) && Object.keys($scope.search.json).length === 0)) {\n                    $scope.config.filter = {\n                        oql: '',\n                        value: ''\n                    };\n                } else {\n                    $scope.config.filter = {\n                        oql: $scope.search.oql,\n                        value: $scope.search.json\n                    };\n                }\n                $scope.launchSearching();\n\n            }\n\n            $scope.applyFilter = function(event) {\n                $scope.launchSearching();\n            }\n\n            $scope.launchSearchingQuick = function() {\n                $scope.search.oql = $scope.search.json = '';\n                $scope.config.filter = $scope.search.quick;\n                $scope.launchSearching();\n            }\n\n            var windowTimeChanged = $scope.$on('onWindowTimeChanged', function(event, timeObj) {\n                $scope.config.windowFilter = timeObj ? timeObj : (config.windowFilter ? {} : timeObj);\n                var widget = {\n                    definition: definition,\n                    element: $element\n                }\n                $rootScope.$broadcast('adfWindowTimeChangedFromWidget', widget, $scope.config.windowFilter);\n                $scope.reload();\n            });\n\n            $scope.enter = function(event) {\n                var keycode = (event.keyCode ? event.keyCode : event.which);\n                if (keycode === 13) {\n                    if ($scope.toggleAdvanced === 0)\n                        $scope.launchSearchingAdv();\n                    if ($scope.toggleAdvanced === 1)\n                        $scope.launchSearchingQuick();\n                    if ($scope.toggleAdvanced === 2)\n                        $scope.launchCustomFilter();\n\n                }\n                if (keycode === 19) {\n                    $scope.showFinalFilter = $scope.showFinalFilter === false ? true : false;\n                }\n            }\n\n\n            $scope.customSelectors = [];\n            $scope.getCustomSelectors = function() {\n                config.widgetSelectors().findFields(\"\").then(function(fields) {\n                    $scope.customSelectors = fields;\n                    $scope.$apply();\n                }).catch(function(err) {\n                    $log.error(err);\n                });\n\n            }\n\n            $scope.customFilter = [];\n            $scope.getcustomFilter = function() {\n                config.widgetSelectors().findFields(\"\").then(function(fields) {\n                    $scope.customFilter = fields;\n                    $scope.$apply();\n                }).catch(function(err) {\n                    $log.error(err);\n                });\n\n            }\n\n            $scope.ifCustomFilter = function() {\n                return $scope.customSelectors && config.sort && $scope.definition.type === 'FullDevicesList' && $scope.toggleAdvanced === 2;\n            }\n\n            $scope.showCustomFields = function() {\n                return $scope.definition.type === 'FullDevicesList' && $scope.toggleAdvanced === 2 && $scope.search.customFilter && $scope.filterAvailable && !$scope.editMode;\n            }\n\n            $scope.changeDirection = function() {\n                var direction = config.sort.direction;\n                if (direction === 'DESCENDING') {\n                    $scope.config.sort.direction = 'ASCENDING'\n                } else if (direction === 'ASCENDING') {\n                    $scope.config.sort.direction = 'DESCENDING'\n                }\n                $scope.reload();\n            }\n\n            $scope.debugQuery = function() {\n                Filter.parseQuery($scope.search.oql || '')\n                    .then(function(data) {\n                        //$scope.elementos = data;\n                        $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\n                        $scope.unknownWords = '';\n                        $scope.filter.error = null;\n                    })\n                    .catch(function(err) {\n                        $scope.filter.error = err;\n                        // Tratar el error\n                    });\n\n            }\n\n            $scope.autocomplete_options = function() {\n                var autocomplete_options = {\n                    suggest: Filter.suggest_field_delimited,\n                    customSelectors: config.widgetSelectors()\n                };\n\n                return autocomplete_options;\n\n            };\n\n            // Multiple selection\n            $scope.selectedItems = {};\n\n            // Gestor de seleccion\n            $scope.selectionManager = {\n                currentSelection: $scope.selectedItems,\n                isSelected: function(key, obj) {\n                    if ($scope.selectedItems[key] && !angular.isUndefined(obj)) {\n                        $scope.selectedItems[key].data = obj;\n                    }\n\n                    return $scope.selectedItems[key] ? true : false;\n                },\n                totalSelected: function() {\n                    return Object.keys($scope.selectedItems).length;\n                }\n            };\n\n            $scope.manageSelectedItems = function() {\n                var selectionScope = $scope.$new();\n\n                selectionScope.selectionConfig = config.selectionConfig;\n\n                selectionScope.selectedItems = [];\n                angular.forEach($scope.selectedItems, function(value, key) {\n                    selectionScope.selectedItems.push({ key: key, value: value });\n                });\n\n                selectionScope.currentSelection = {\n                    selected: selectionScope.selectedItems\n                };\n\n                var manageItemsSelectedTemplate = adfTemplatePath + 'widget-selection.html';\n                var opts = {\n                    scope: selectionScope,\n                    templateUrl: manageItemsSelectedTemplate,\n                    backdrop: 'static',\n                    size: 'lg',\n                    animation: true\n                };\n\n                var instance = $uibModal.open(opts);\n\n                selectionScope.restoreSelection = function() {\n                    selectionScope.currentSelection = {\n                        selected: selectionScope.selectedItems\n                    };\n                };\n\n                selectionScope.clearSelection = function() {\n                    selectionScope.currentSelection.selected = [];\n                };\n\n                // Cierra sy guarda los datos de nueva selección\n                selectionScope.applyFilter = function(type) {\n                    var customOql = selectionScope.selectionConfig.filterAction(selectionScope.currentSelection.selected, type);\n\n                    if (!angular.isUndefined(customOql) && customOql !== null) {\n                        $scope.toggleAdvanced = 0;\n                        Filter.parseQuery(customOql).then(function(data) {\n                            $scope.search.oql = customOql;\n                            $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\n                            $scope.unknownWords = '';\n                            $scope.filter.error = null;\n\n                            $scope.launchSearchingAdv();\n                        }).catch(function(err) {\n                            $scope.filter.error = err;\n                        });\n                    }\n                };\n\n                selectionScope.executeOperation = function(operationType) {\n                    if (!$scope.editMode) {\n                        $scope.$parent.$broadcast('widgetExecuteOperation', { 'selectedItems': selectionScope.currentSelection.selected, 'type': operationType });\n                    }\n                };\n\n                // Cierra sy guarda los datos de nueva selección\n                selectionScope.saveChangesDialog = function() {\n                    var finalSelection = {};\n                    angular.forEach(selectionScope.currentSelection.selected, function(data, idx) {\n                        finalSelection[data.key] = { data: data.value.data, visible: data.value.visible };\n                    });\n\n                    $scope.selectedItems = angular.copy(finalSelection);\n                    $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n\n                    $scope.selectionManager.lastItem = {};\n                    $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n\n                    instance.close();\n                    selectionScope.$destroy();\n                };\n\n                // Cierra sin realizar ninguna acción\n                selectionScope.closeDialog = function() {\n                    instance.close();\n                    selectionScope.$destroy();\n                };\n            };\n\n\n            // bind edit function\n            $scope.edit = function() {\n                var editScope = $scope.$new();\n                editScope.translate = dashboard.translate;\n                editScope.definition = angular.copy(definition);\n\n                var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\n                if (definition.editTemplateUrl) {\n                    adfEditTemplatePath = definition.editTemplateUrl;\n                }\n\n                var opts = {\n                    scope: editScope,\n                    templateUrl: adfEditTemplatePath,\n                    backdrop: 'static',\n                    size: 'lg'\n                };\n\n                var instance = $uibModal.open(opts);\n\n                editScope.closeDialog = function() {\n                    instance.close();\n                    editScope.$destroy();\n                };\n\n                // TODO create util method\n                function createApplyPromise(result) {\n                    var promise;\n                    if (typeof result === 'boolean') {\n                        var deferred = $q.defer();\n                        if (result) {\n                            deferred.resolve();\n                        } else {\n                            deferred.reject();\n                        }\n                        promise = deferred.promise;\n                    } else {\n                        promise = $q.when(result);\n                    }\n                    return promise;\n                }\n\n                editScope.saveDialog = function() {\n                    // clear validation error\n                    editScope.validationError = null;\n\n                    // build injection locals\n                    var widget = $scope.widget;\n\n                    // create a default apply method for widgets\n                    // without edit mode\n                    // see issue https://goo.gl/KHPQLZ\n                    var applyFn;\n                    if (widget.edit) {\n                        applyFn = widget.edit.apply;\n                    } else {\n                        applyFn = function() {\n                            return true;\n                        };\n                    }\n\n                    // injection locals\n                    var locals = {\n                        widget: widget,\n                        definition: editScope.definition,\n                        config: editScope.definition.config\n                    };\n\n                    // invoke apply function and apply if success\n                    var result = $injector.invoke(applyFn, applyFn, locals);\n                    createApplyPromise(result).then(function() {\n                        definition.title = editScope.definition.title;\n                        angular.extend(definition.config, editScope.definition.config);\n\n                        editScope.closeDialog();\n\n                        if (widget.edit && widget.edit.reload) {\n                            // reload content after edit dialog is closed\n                            $scope.$broadcast('widgetConfigChanged');\n                        }\n                    }, function(err) {\n                        if (err) {\n                            editScope.validationError = err;\n                        } else {\n                            editScope.validationError = 'Validation durring apply failed';\n                        }\n                    });\n                };\n\n            };\n\n\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            templateUrl: dashboard.customWidgetTemplatePath ? dashboard.customWidgetTemplatePath : adfTemplatePath + 'widget.html',\n            scope: {\n                definition: '=',\n                col: '=column',\n                editMode: '=',\n                options: '=',\n                widgetState: '='\n            },\n            controller: function($scope) {\n                var adfDashboardCollapseExpand = $scope.$on('adfDashboardCollapseExpand', function(event, args) {\n                    $scope.widgetState.isCollapsed = args.collapseExpandStatus;\n                });\n\n                var adfWidgetEnterEditMode = $scope.$on('adfWidgetEnterEditMode', function(event, widget) {\n                    if (dashboard.idEquals($scope.definition.wid, widget.wid)) {\n                        $scope.edit();\n                    }\n                });\n\n                var adfIsEditMode = $scope.$on('adfIsEditMode', function(event, widget) {\n                    $scope.editing = true;\n                });\n\n                var adfDashboardChanged = $scope.$on('adfDashboardChanged', function(event, widget) {\n                    $scope.editing = false;\n                });\n\n                var adfDashboardEditsCancelled = $scope.$on('adfDashboardEditsCancelled', function(event, widget) {\n                    $scope.editing = false;\n                });\n\n                $scope.widgetClasses = function(w, definition) {\n                    var classes = definition.styleClass || '';\n                    // w is undefined, if the type of the widget is unknown\n                    // see issue #216\n                    if (!w || !w.frameless || $scope.editMode) {\n                        classes += ' panel panel-default';\n                    }\n                    return classes;\n                };\n\n                $scope.openFullScreen = function() {\n                    var definition = $scope.definition;\n                    var fullScreenScope = $scope.$new();\n                    var opts = {\n                        scope: fullScreenScope,\n                        templateUrl: adfTemplatePath + 'widget-fullscreen.html',\n                        size: definition.modalSize || 'lg', // 'sm', 'lg'\n                        backdrop: 'static',\n                        windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n                    };\n\n                    var instance = $uibModal.open(opts);\n                    fullScreenScope.closeDialog = function() {\n                        instance.close();\n                        fullScreenScope.$destroy();\n                    };\n                };\n\n                $scope.openFilter = function() {\n\n                }\n\n                $scope.openAboutScreen = function(size) {\n                    size = 'md';\n                    var modalInstance = $uibModal.open({\n                        animation: true,\n                        templateUrl: 'widgetAboutModal.html',\n                        controller: function($scope, $uibModalInstance, information) {\n                            $scope.about = {};\n                            $scope.about.info = information;\n                            $scope.ok = function() {\n                                $uibModalInstance.close();\n                            };\n                        },\n                        'size': size,\n                        resolve: {\n                            information: function() {\n                                return $scope.config.about;\n                            }\n                        }\n                    });\n\n                    modalInstance.result.then(function(selectedItem) {\n                        $scope.selected = selectedItem;\n                    }, function() {\n                        $log.info('Modal dismissed at: ' + new Date());\n                    });\n                };\n\n                $scope.saveWidgetScreen = function(wId) {\n                    $scope.$emit('generateSnapshot', {\n                        'objectSelector': '.widget_' + wId,\n                        'fileName': 'capture_' + new Date().getTime()\n                    });\n                };\n\n                var onWindowTimeChanged = function(timeObj) {\n                    var filter = { and: [] };\n                    if (timeObj && timeObj.from) {\n                        filter.and.push({\n                            gt: {\n                                operationDate: timeObj.from\n                            }\n                        });\n\n                        if (timeObj.to) {\n                            filter.and.push({\n                                lt: {\n                                    operationDate: timeObj.to\n                                }\n                            });\n                        }\n                    } else {\n                        filter = null;\n                    }\n                    return filter;\n                }\n\n                var createQuickFilter = function(fieldsQuickSearch, filter) {\n                    var _filter = {\n                        or: []\n                    };\n                    var criteria;\n                    fieldsQuickSearch.forEach(function(field) {\n                        criteria = {};\n                        criteria[field.operator] = {};\n                        criteria[field.operator][field.name] = $scope.config.filter;\n                        _filter.or.push(criteria);\n                    });\n                    return _filter;\n                }\n\n                $scope.downloadCsv = function() {\n                    var columns = $scope.config.columns;\n                    var scope_filter = $scope.config.filter;\n                    var extra_filter;\n                    var final_filter = {};\n                    var order = $scope.config.sort ? $scope.config.sort : undefined;\n                    if ($scope.config.windowFilter) {\n                        var window_filter = onWindowTimeChanged($scope.config.windowFilter);\n                        if (window_filter && window_filter.and) {\n                            extra_filter = { and: window_filter.and };\n                        }\n                    }\n                    var filter;\n                    if (scope_filter.value && scope_filter.value.length > 4) {\n                        filter = JSON.parse(scope_filter.value);\n                    } else if (typeof scope_filter === 'string' && scope_filter.trim() !== '') {\n                        filter = createQuickFilter($scope.config.fieldsQuickSearch, scope_filter);\n                    }\n                    if (extra_filter) {\n                        if (filter) {\n                            final_filter = { and: [extra_filter, filter] };\n                        } else {\n                            final_filter = extra_filter;\n                        }\n                    } else {\n                        final_filter = filter;\n                    }\n                    $scope.$broadcast('downloadCsv', {\n                        'columns': columns,\n                        'filter': final_filter,\n                        'order': order\n                    });\n                };\n\n                var addItemToSelection = $scope.$on('addItemToSelection', function(event, item) {\n                    if (!$scope.selectedItems[item.key]) {\n                        $scope.selectedItems[item.key] = {\n                            data: item.data,\n                            visible: item.visible\n                        };\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n                        item.isSelected = true;\n                        $scope.selectionManager.lastItem = item;\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n                    }\n\n                });\n\n                var removeItemFromSelection = $scope.$on('removeItemFromSelection', function(event, item) {\n                    if ($scope.selectedItems[item.key]) {\n                        delete $scope.selectedItems[item.key];\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n                        item.isSelected = false;\n                        $scope.selectionManager.lastItem = item;\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n                    }\n                });\n\n                $scope.$on('$destroy', function() {\n                    adfDashboardCollapseExpand();\n                    adfWidgetEnterEditMode();\n                    adfIsEditMode();\n                    adfDashboardChanged();\n                    adfDashboardEditsCancelled();\n                    addItemToSelection();\n                    removeItemFromSelection();\n                });\n            },\n            compile: function() {\n\n                /**\n                 * use pre link, because link of widget-content\n                 * is executed before post link widget\n                 */\n                return {\n                    pre: preLink,\n                    post: postLink\n                };\n            }\n        };\n\n    });\n})(window);"]}