{"version":3,"sources":["adf.js","dashboard.js","grid.js","order-by-object-key.js","provider.js","opengate-angular-dashboard-framework.min.js","widget-content.js","widget-grid.js","widget-service.js"],"names":["window","undefined","angular","module","value","directive","$rootScope","$log","$timeout","$uibModal","dashboard","adfTemplatePath","$faIcons","$translate","stringToBoolean","string","isDefined","toLowerCase","Boolean","createConfiguration","type","cfg","config","widgets","copy","createWidget","wdgt","widget","addNewWidgetToModel","model","name","forceToSave","grid","newWidget","width","height","x","y","definition","push","$broadcast","error","isEditModeImmediate","edit","immediate","openEditMode","$scope","createCategories","categories","forEach","key","category","title","instant","description","isUndefined","createCategoriesList","categoryTags","categoriesTmp","split","idx","translatedCat","indexOf","replace","restrict","transclude","scope","collapsible","editable","editMode","continuousEditMode","maximizable","adfModel","adfWidgetFilter","hideButtons","extraData","controller","getNewModalScope","$new","widgetFilter","updateWidgetFilters","widgetFilters","length","element","wid","filter","Ftype","options","$watch","oldVal","newVal","titleTemplateUrl","toggleEditMode","openConfigWindow","modelCopy","editDashboardDialog","adfToggleEditMode","$on","event","isNewDashboard","adfCancelEditMode","cancelEditMode","adfWidgetRemoved","index","widgetTmp","splice","adfEditDashboardDialog","adfLaunchSearchingFromWidget","reloadWidgets","id","w","f","adfWindowTimeChangedFromWidget","editDashboardScope","icon","availableIcons","list","adfEditTemplatePath","editTemplateUrl","instance","open","templateUrl","backdrop","keyboard","size","closeDialog","close","$destroy","adfOpenWidgetFromOther","internal_config","_config","merge","adfOpenModalWidgetFromOther","widgetType","sendSelection","fullScreenScope","opts","modalSize","windowClass","temporal","persistDashboard","this","$parent","adfAddWidgetDialog","addWidgetDialog","addScopeCfg","widgetSortingDirection","widgetSorting","addScope","isFunction","availableCategories","adfAddTemplatePath","addTemplateUrl","widgetFilterCfg","addWidget","changeThumbnail","images","_currThumb","_currImg","link","$element","$attr","enableConfirmDelete","editing","preLink","gridOptions","cellHeight","verticalMargin","animate","float","alwaysShowResizeHandle","minWidth","auto","resizable","handles","disableDrag","disableResize","gsHandler","compile","pre","dashEvents","enable","disable","GridStackUI","Utils","sort","onChange","items","console","log","onDragStart","ui","onDragStop","onResizeStart","onResizeStop","onItemAdded","item","onItemRemoved","dashEvt","$filter","array","objectKey","provider","widgetsPath","messageTemplate","loadingTemplate","customWidgetTemplatePath","defaultApplyFunction","extend","reload","frameless","apply","path","template","templatePath","$get","cid","Date","getTime","idEquals","other","toString","$q","widgetService","$compile","$controller","$injector","renderError","msg","warn","html","compileWidget","currentScope","configChanged","_getWindowTime","from","newScope","windowFilter","to","moment","subtract","_d","then","translateMessage","content","extra","is_menu","menu","isPaginationEnable","reloadData","navOptionsHandler","firstLoad","renderWidget","is_itemsPerPage","itemsPerPage","page","getWindowTime","winTime","eval","rawdate","format","templateScope","_from","selectionManager","base","resolvers","$tpl","getTemplate","resolve","promise","isString","get","invoke","all","locals","resolveAs","templateCtrl","controllerAs","children","data","contents","reason","require","filterHandler","widgetActionsHandler","attrs","adfWidgetGridCtrl","widgetConfigChangedEvt","widgetReloadEvt","reloadWidget","$interval","Filter","styleClass","fromJson","show_modal_footer","show_reload_config","widgetState","isCollapsed","collapsed","debug","postLink","deleteWidget","remove","deleteScope","deleteTemplateUrl","deleteDialog","print","isExecuteOperationEnabled","entityKey","oql","executeOperation","typeFilter","showFilter","showFinalFilter","search","json","toggleAdvanced","quick","fields","customFilter","v","launchSearching","launchSearchingAdv","filterApplied","Object","keys","launchSearchingQuick","launchSearchingShared","shared","filterSharedSelect","$item","$model","filterSharedRemove","timeObj","enter","keycode","keyCode","which","customSelectors","getCustomSelectors","widgetSelectors","findFields","$apply","err","changeDirection","direction","debugQuery","parseQuery","toJson","unknownWords","filter_error","autocomplete_options","suggest","suggest_field_delimited","selectedItems","currentSelection","isSelected","obj","totalSelected","sendEntities","manageSelectedItems","selectionScope","selectionConfig","operationTypes","filterTypes","selected","manageItemsSelectedTemplate","animation","restoreSelection","clearSelection","applyFilter","customOql","filterAction","operationType","saveChangesDialog","finalSelection","visible","selectedItemsLength","lastItem","createApplyPromise","result","deferred","defer","reject","when","editScope","saveDialog","validationError","applyFn","setReloadTimeout","sharedFilters","_widgetFilters","loadingData","startLoading","stopLoading","lastMessageTime","setStatusMessage","message","statusMessage","changeFilter","actions","setActions","adfDashboardCollapseExpand","args","collapseExpandStatus","adfWidgetEnterEditMode","adfIsEditMode","adfDashboardChanged","adfDashboardEditsCancelled","openFullScreen","$emit","openAboutScreen","modalInstance","$uibModalInstance","information","about","info","ok","selectedItem","saveWidgetScreen","wId","objectSelector","fileName","createQuickFilter","fieldsQuickSearch","criteria","_filter","or","field","operator","downloadCsv","extra_filter","columns","scope_filter","final_filter","order","window_filter","onWindowTimeChanged","and","JSON","parse","trim","generateQR","stopReloadTimeout","addItemToSelection","removeItemFromSelection","reloadPeriod","isNaN","cancel","completeReload","post","factory","$http","$sce","$templateCache","parseUrl","url","parsedUrl","substring","exposed","tpl","getTrustedResourceUrl","success","response","put"],"mappings":"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","file":"opengate-angular-dashboard-framework.min.js","sourcesContent":["/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('adf', ['adf.provider', 'ui.bootstrap', 'opengate-angular-js'])\r\n    .value('adfTemplatePath', '../src/templates/')\r\n    .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\r\n    .value('adfVersion', '<<adfVersion>>');","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name adf.directive:adfDashboard\r\n * @element div\r\n * @restrict EA\r\n * @scope\r\n * @description\r\n *\r\n * `adfDashboard` is a directive which renders the dashboard with all its\r\n * components. The directive requires a name attribute. The name of the\r\n * dashboard can be used to store the model.\r\n *\r\n * @param {string} name name of the dashboard. This attribute is required.\r\n * @param {boolean=} editable false to disable the editmode of the dashboard.\r\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\r\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\r\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\r\n * @param {object=} adfModel model object of the dashboard.\r\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\r\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\r\n *                   events during edit mode not reset it if edit mode is exited.\r\n * @param {boolean=} categories enable categories for the add widget dialog.\r\n */\r\n\r\nangular.module('adf')\r\n    .directive('adfDashboard', function ($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath, $faIcons, $translate) {\r\n        'use strict';\r\n\r\n        function stringToBoolean(string) {\r\n            switch (angular.isDefined(string) ? string.toLowerCase() : null) {\r\n                case 'true':\r\n                case 'yes':\r\n                case '1':\r\n                    return true;\r\n                case 'false':\r\n                case 'no':\r\n                case '0':\r\n                case null:\r\n                    return false;\r\n                default:\r\n                    return Boolean(string);\r\n            }\r\n        }\r\n\r\n        function createConfiguration(type) {\r\n            var cfg = {};\r\n            var config = dashboard.widgets[type].config;\r\n            if (config) {\r\n                cfg = angular.copy(config);\r\n            }\r\n            return cfg;\r\n        }\r\n\r\n        function createWidget(type) {\r\n            var wdgt = {};\r\n            var widget = dashboard.widgets[type];\r\n            if (widget) {\r\n                wdgt = angular.copy(widget);\r\n            }\r\n            return wdgt;\r\n        }\r\n\r\n        /**\r\n         * Adds the widget to first column of the model.\r\n         *\r\n         * @param dashboard model\r\n         * @param widget to add to model\r\n         * @param name name of the dashboard\r\n         */\r\n        function addNewWidgetToModel(model, widget, name, forceToSave) {\r\n            if (model) {\r\n                if (!model.grid) {\r\n                    model.grid = [];\r\n                }\r\n\r\n                var newWidget = {\r\n                    width: 3,\r\n                    height: 2,\r\n                    x: 0,\r\n                    y: 0,\r\n                    definition: widget\r\n                };\r\n                model.grid.push(newWidget);\r\n\r\n                $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\r\n\r\n                if (forceToSave) {\r\n                    $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n                }\r\n            } else {\r\n                $log.error('model is undefined');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Checks if the edit mode of the widget should be opened immediately.\r\n         *\r\n         * @param widget type\r\n         */\r\n        function isEditModeImmediate(type) {\r\n            var widget = dashboard.widgets[type];\r\n            return widget && widget.edit && widget.edit.immediate;\r\n        }\r\n\r\n        /**\r\n         * Opens the edit mode of the specified widget.\r\n         *\r\n         * @param dashboard scope\r\n         * @param widget\r\n         */\r\n        function openEditMode($scope, widget) {\r\n            // wait some time before fire enter edit mode event\r\n            $timeout(function () {\r\n                $scope.$broadcast('adfWidgetEnterEditMode', widget);\r\n            }, 200);\r\n        }\r\n\r\n        /**\r\n         * Creates object with the category name as key and an array of widgets as value.\r\n         *\r\n         * @param widgets array of widgets\r\n         *\r\n         * @return array of categories\r\n         */\r\n        function createCategories(widgets) {\r\n            var categories = {};\r\n            angular.forEach(widgets, function (widget, key) {\r\n                var category = widget.category;\r\n                // if the widget has no category use a default one\r\n                if (!category) {\r\n                    category = 'ADF.CATEGORY.MISCELANOUS';\r\n                }\r\n\r\n                widget.title = $translate.instant(widget.title);\r\n                widget.description = $translate.instant(widget.description);\r\n                widget.category = $translate.instant(widget.category);\r\n\r\n                // push widget to category array\r\n                if (angular.isUndefined(categories[widget.category])) {\r\n                    categories[widget.category] = {\r\n                        widgets: {}\r\n                    };\r\n                }\r\n\r\n                categories[widget.category].widgets[key] = widget;\r\n            });\r\n            return categories;\r\n        }\r\n\r\n        function createCategoriesList(widgets) {\r\n            var categories = [];\r\n            angular.forEach(widgets, function (widget, key) {\r\n                if (!widget.category) {\r\n                    widget.category = 'ADF.CATEGORY.MISCELLANEOUS';\r\n                }\r\n\r\n                widget.title = $translate.instant(widget.title);\r\n                widget.description = $translate.instant(widget.description);\r\n                widget.category = $translate.instant(widget.category);\r\n\r\n                if (!widget.categoryTags) {\r\n                    widget.categoryTags = 'ADF.CATEGORY.TAG.MISCELLANEOUS';\r\n                }\r\n\r\n                var categoriesTmp = widget.categoryTags.split(',');\r\n\r\n                angular.forEach(categoriesTmp, function (category, idx) {\r\n                    // push widget to category array\r\n                    var translatedCat = $translate.instant(category);\r\n                    if (categories.indexOf(translatedCat) === -1)\r\n                        categories.push(translatedCat);\r\n                });\r\n\r\n            });\r\n            return categories;\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            scope: {\r\n                name: '@',\r\n                collapsible: '@',\r\n                editable: '@',\r\n                editMode: '@',\r\n                continuousEditMode: '=',\r\n                maximizable: '@',\r\n                adfModel: '=',\r\n                adfWidgetFilter: '=',\r\n                categories: '@',\r\n                hideButtons: '=',\r\n                extraData: '='\r\n            },\r\n            controller: function ($scope) {\r\n                var model = {};\r\n                var widgetFilter = null;\r\n                var name = $scope.name;\r\n\r\n                var updateWidgetFilters = function (model) {\r\n                    var widgetFilters = [];\r\n                    var grid = model.grid;\r\n                    if (grid && grid.length > 0) {\r\n                        grid.forEach(function (element) {\r\n                            var definition = element.definition;\r\n                            var config = definition.config;\r\n                            widgetFilters.push({\r\n                                wid: definition.wid,\r\n                                title: definition.title,\r\n                                filter: config.filter,\r\n                                Ftype: definition.Ftype\r\n                            });\r\n                        });\r\n                    }\r\n                    if (!$scope.options) {\r\n                        $scope.options = {\r\n                            extraData: {}\r\n                        };\r\n                    }\r\n                    $scope.options.extraData.widgetFilters = widgetFilters;\r\n                };\r\n                // Watching for changes on adfModel\r\n                $scope.$watch('adfModel', function (oldVal, newVal) {\r\n                    // has model changed or is the model attribute not set\r\n                    if (newVal !== null || (oldVal === null && newVal === null)) {\r\n                        model = $scope.adfModel;\r\n                        widgetFilter = $scope.adfWidgetFilter;\r\n\r\n                        if (model) {\r\n                            updateWidgetFilters(model);\r\n                            if (!model.title) {\r\n                                model.title = $translate.instant('ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD');\r\n                            }\r\n                            if (!model.titleTemplateUrl) {\r\n                                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\r\n                            }\r\n                            $scope.model = model;\r\n                        } else {\r\n                            $log.error('could not find or create model');\r\n                        }\r\n                    }\r\n                }, true);\r\n\r\n                // edit mode\r\n                $scope.editMode = false;\r\n\r\n                function getNewModalScope() {\r\n                    var scope = $scope.$new();\r\n                    return scope;\r\n                }\r\n\r\n                $scope.toggleEditMode = function (openConfigWindow) {\r\n                    $scope.editMode = !$scope.editMode;\r\n                    if ($scope.editMode) {\r\n                        if (!$scope.continuousEditMode) {\r\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n                            $rootScope.$broadcast('adfIsEditMode');\r\n                        }\r\n\r\n                        if (openConfigWindow) {\r\n                            $scope.editDashboardDialog();\r\n                        }\r\n                    }\r\n\r\n                    if (!$scope.editMode) {\r\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n                    }\r\n                };\r\n\r\n                var adfToggleEditMode = $scope.$on('adfToggleEditMode', function (event, isNewDashboard) {\r\n                    if (isNewDashboard) {\r\n                        $scope.toggleEditMode(true);\r\n                    } else {\r\n                        $scope.toggleEditMode();\r\n                    }\r\n                });\r\n\r\n                var adfCancelEditMode = $scope.$on('adfCancelEditMode', function (event) {\r\n                    if ($scope.editMode) {\r\n                        $scope.cancelEditMode();\r\n                    }\r\n                });\r\n\r\n                var adfWidgetRemoved = $scope.$on('adfWidgetRemovedFromGrid', function (event, widget) {\r\n                    var index = null;\r\n                    angular.forEach($scope.adfModel.grid, function (widgetTmp, idx) {\r\n                        if (widgetTmp.definition.wid === widget.wid) {\r\n                            index = idx;\r\n                        }\r\n                    });\r\n\r\n                    if (index >= 0) {\r\n                        $scope.adfModel.grid.splice(index, 1);\r\n                        //$scope.gsHandler.commit();\r\n                    }\r\n                });\r\n\r\n                $scope.cancelEditMode = function () {\r\n                    $scope.editMode = false;\r\n                    if (!$scope.continuousEditMode && ($scope.modelCopy !== $scope.adfModel)) {\r\n                        $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\r\n                    }\r\n                    $rootScope.$broadcast('adfDashboardEditsCancelled');\r\n                };\r\n\r\n                var adfEditDashboardDialog = $scope.$on('adfEditDashboardDialog', function (event) {\r\n                    if ($scope.editMode) {\r\n                        $scope.editDashboardDialog();\r\n                    }\r\n                });\r\n\r\n                var adfLaunchSearchingFromWidget = $scope.$on('adfLaunchSearchingFromWidget', function (event, widget) {\r\n                    var reloadWidgets = [];\r\n                    if (widget) {\r\n                        var id = widget.definition.wid;\r\n                        var config = widget.definition.config;\r\n                        if (config) {\r\n                            var filter = config.filter;\r\n                            model.grid.forEach(function (w) {\r\n                                var f = w.definition.config.filter;\r\n                                if (f && f.id && f.id === id) {\r\n                                    w.definition.config.filter = filter;\r\n                                    w.definition.config.filter.id = id;\r\n                                    reloadWidgets.push(w.definition.wid);\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n                    $rootScope.$broadcast('adfFilterChanged', name, model, reloadWidgets);\r\n                });\r\n                var adfWindowTimeChangedFromWidget = $scope.$on('adfWindowTimeChangedFromWidget', function (event) {\r\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\r\n                });\r\n\r\n                // edit dashboard settings\r\n                $scope.editDashboardDialog = function () {\r\n                    var editDashboardScope = getNewModalScope();\r\n                    // create a copy of the title, to avoid changing the title to\r\n                    // \"dashboard\" if the field is empty\r\n                    editDashboardScope.copy = {\r\n                        title: (model.title !== 'ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD' ? model.title : ''),\r\n                        description: model.description,\r\n                        icon: model.icon ? model.icon : 'fa-tachometer'\r\n                    };\r\n\r\n                    // pass icon list\r\n                    editDashboardScope.availableIcons = $faIcons.list();\r\n\r\n                    var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\r\n                    if (model.editTemplateUrl) {\r\n                        adfEditTemplatePath = model.editTemplateUrl;\r\n                    }\r\n                    var instance = $uibModal.open({\r\n                        scope: editDashboardScope,\r\n                        templateUrl: adfEditTemplatePath,\r\n                        backdrop: 'static',\r\n                        keyboard: false,\r\n                        size: 'lg'\r\n                    });\r\n\r\n\r\n                    editDashboardScope.closeDialog = function () {\r\n                        // copy the new title back to the model\r\n                        model.title = editDashboardScope.copy.title;\r\n                        model.description = editDashboardScope.copy.description;\r\n                        model.icon = editDashboardScope.copy.icon;\r\n\r\n                        // close modal and destroy the scope\r\n                        instance.close();\r\n                        editDashboardScope.$destroy();\r\n                    };\r\n                };\r\n\r\n                var adfOpenWidgetFromOther = $scope.$on('adfOpenWidgetFromOther', function (event, widget, config) {\r\n\r\n                    var internal_config = createConfiguration(widget);\r\n                    var _config = angular.merge({}, internal_config, config);\r\n                    var w = {\r\n                        type: widget,\r\n                        config: _config,\r\n                        title: _config.title\r\n                    };\r\n                    addNewWidgetToModel(model, w, name, !$scope.editMode);\r\n                });\r\n\r\n                var adfOpenModalWidgetFromOther = $scope.$on('adfOpenModalWidgetFromOther', function (event, widgetType, config) {\r\n                    var templateUrl = adfTemplatePath + 'widget-fullscreen.html';\r\n                    if (config.sendSelection) {\r\n                        templateUrl = adfTemplatePath + 'widget-fullscreen-selection.html';\r\n                    }\r\n                    var widget = createWidget(widgetType);\r\n                    widget.config = angular.merge({}, widget.config, config);\r\n                    widget.type = widgetType;\r\n                    if (widget.config.title) {\r\n                        widget.title = widget.config.title;\r\n                    }\r\n                    var fullScreenScope = $scope.$new();\r\n                    fullScreenScope.definition = fullScreenScope.widget = widget;\r\n                    var opts = {\r\n                        scope: fullScreenScope,\r\n                        templateUrl: templateUrl,\r\n                        size: fullScreenScope.definition.modalSize || 'el',\r\n                        backdrop: 'static',\r\n                        windowClass: (fullScreenScope.definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\r\n                    };\r\n\r\n                    if ($scope.model && !$scope.model.temporal) {\r\n                        fullScreenScope.persistDashboard = function () {\r\n                            $rootScope.$broadcast('adfOpenWidgetFromOther', this.$parent.widget.type, this.$parent.widget.config);\r\n                            this.closeDialog();\r\n                        };\r\n                    }\r\n\r\n                    var instance = $uibModal.open(opts);\r\n                    fullScreenScope.closeDialog = function () {\r\n                        instance.close();\r\n                        fullScreenScope.$destroy();\r\n                    };\r\n\r\n\r\n                });\r\n\r\n                var adfAddWidgetDialog = $scope.$on('adfAddWidgetDialog', function (event) {\r\n                    if (!model.temporal && model.editable) {\r\n                        if (!$scope.editMode) {\r\n                            $scope.editMode = true;\r\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n                            $rootScope.$broadcast('adfIsEditMode');\r\n                        }\r\n\r\n                        $scope.addWidgetDialog();\r\n                    }\r\n                });\r\n\r\n                // add widget dialog\r\n                $scope.addScopeCfg = {\r\n                    widgetFilter: {},\r\n                    widgetSortingDirection: '',\r\n                    widgetSorting: 'priority'\r\n                };\r\n\r\n                $scope.addWidgetDialog = function () {\r\n                    var addScope = getNewModalScope();\r\n                    var widgets;\r\n                    if (angular.isFunction(widgetFilter)) {\r\n                        widgets = {};\r\n                        angular.forEach(dashboard.widgets, function (widget, type) {\r\n                            if (widgetFilter(widget, type, model)) {\r\n                                widgets[type] = widget;\r\n                            }\r\n                        });\r\n                    } else {\r\n                        widgets = dashboard.widgets;\r\n                    }\r\n                    addScope.widgets = widgets;\r\n\r\n                    angular.forEach(addScope.widgets, function (widget, type) {\r\n                        widget.key = type;\r\n                        if (!widget.category) {\r\n                            widget.category = 'Miscellaneous';\r\n                        }\r\n                    });\r\n\r\n                    // pass createCategories function to scope, if categories option is enabled\r\n                    if ($scope.options.categories) {\r\n                        addScope.createCategories = createCategories;\r\n                    } else {\r\n                        addScope.availableCategories = createCategoriesList(widgets);\r\n                    }\r\n\r\n                    var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\r\n                    if (model.addTemplateUrl) {\r\n                        adfAddTemplatePath = model.addTemplateUrl;\r\n                    }\r\n\r\n                    var opts = {\r\n                        scope: addScope,\r\n                        templateUrl: adfAddTemplatePath,\r\n                        backdrop: 'static',\r\n                        size: 'lg'\r\n                    };\r\n\r\n                    var instance = $uibModal.open(opts);\r\n\r\n                    addScope.widgetFilterCfg = $scope.addScopeCfg;\r\n\r\n                    addScope.addWidget = function (widget) {\r\n                        var w = {\r\n                            type: widget,\r\n                            Ftype: dashboard.widgets[widget].Ftype || null,\r\n                            config: createConfiguration(widget)\r\n                        };\r\n                        addNewWidgetToModel(model, w, name);\r\n                        // close and destroy\r\n                        instance.close();\r\n                        addScope.$destroy();\r\n\r\n                        // check for open edit mode immediately\r\n                        if (isEditModeImmediate(widget)) {\r\n                            openEditMode($scope, w);\r\n                        }\r\n                    };\r\n\r\n                    addScope.changeThumbnail = function (widget) {\r\n                        if (widget.images) {\r\n                            if (angular.isUndefined(widget._currThumb)) {\r\n                                widget._currThumb = 1;\r\n                            } else {\r\n                                widget._currThumb += 1;\r\n                            }\r\n\r\n\r\n                            if (widget._currThumb >= widget.images.length) {\r\n                                widget._currThumb = 0;\r\n                            }\r\n\r\n                            widget._currImg = widget.images[widget._currThumb];\r\n                        }\r\n                    };\r\n\r\n                    addScope.closeDialog = function () {\r\n                        // close and destroy\r\n                        instance.close();\r\n                        addScope.$destroy();\r\n                    };\r\n                };\r\n\r\n                $scope.addNewWidgetToModel = addNewWidgetToModel;\r\n\r\n                $scope.$on('destroy', function () {\r\n                    adfLaunchSearchingFromWidget();\r\n                    adfWindowTimeChangedFromWidget();\r\n                    adfToggleEditMode();\r\n                    adfOpenWidgetFromOther();\r\n                    adfOpenModalWidgetFromOther();\r\n                    adfCancelEditMode();\r\n                    adfAddWidgetDialog();\r\n                    adfEditDashboardDialog();\r\n                    adfWidgetRemoved();\r\n                });\r\n            },\r\n            link: function ($scope, $element, $attr) {\r\n                // pass options to scope\r\n                var options = {\r\n                    name: $attr.name,\r\n                    editable: true,\r\n                    enableConfirmDelete: stringToBoolean($attr.enableConfirmDelete),\r\n                    maximizable: stringToBoolean($attr.maximizable),\r\n                    collapsible: stringToBoolean($attr.collapsible),\r\n                    categories: stringToBoolean($attr.categories),\r\n                    extraData: {}\r\n                };\r\n\r\n                if (angular.isDefined($attr.editable)) {\r\n                    options.editable = stringToBoolean($attr.editable);\r\n                }\r\n\r\n                if (angular.isDefined($scope.extraData)) {\r\n                    options.extraData = $scope.extraData;\r\n                }\r\n\r\n                options.extraData.editing = $scope.editMode;\r\n\r\n                $scope.options = options;\r\n            },\r\n            templateUrl: adfTemplatePath + 'dashboard.html'\r\n        };\r\n    });","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the 'Software'), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n    .directive('adfDashboardGrid', function (adfTemplatePath) {\r\n        'use strict';\r\n\r\n        function preLink($scope) {\r\n            $scope.gridOptions = {\r\n                cellHeight: 146,\r\n                verticalMargin: 10,\r\n                animate: true,\r\n                float: false,\r\n                //alwaysShowResizeHandle: /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),\r\n                alwaysShowResizeHandle: true,\r\n                minWidth: 768,\r\n                auto: true,\r\n                resizable: {\r\n                    handles: 'e, se, s, sw, w'\r\n                },\r\n                disableDrag: !$scope.editMode,\r\n                disableResize: !$scope.editMode\r\n            };\r\n\r\n            $scope.gsHandler = null;\r\n        }\r\n\r\n        return {\r\n            restrict: 'E',\r\n            scope: {\r\n                adfModel: '=',\r\n                editMode: '=',\r\n                continuousEditMode: '=',\r\n                options: '='\r\n            },\r\n            templateUrl: adfTemplatePath + 'dashboard-grid.html',\r\n            compile: function () {\r\n                return {\r\n                    pre: preLink,\r\n                };\r\n            },\r\n            controller: function ($scope, $timeout) {\r\n                var dashEvents = [];\r\n                dashEvents.push($scope.$on('adfIsEditMode', function () {\r\n                    $timeout(function () {\r\n                        $scope.gsHandler.enable();\r\n                    }, 100);\r\n                }));\r\n\r\n                dashEvents.push($scope.$on('adfDashboardChanged', function () {\r\n                    $timeout(function () {\r\n                        $scope.gsHandler.disable();\r\n                    }, 100);\r\n                }));\r\n\r\n                dashEvents.push($scope.$on('adfDashboardEditsCancelled', function () {\r\n                    $timeout(function () {\r\n                        $scope.gsHandler.disable();\r\n                    }, 100);\r\n                }));\r\n\r\n                dashEvents.push($scope.$on('adfCancelEditMode', function () {\r\n                    $timeout(function () {\r\n                        $scope.gsHandler.disable();\r\n                    }, 100);\r\n                }));\r\n\r\n                dashEvents.push($scope.$on('adfWidgetAdded', function (event) {\r\n                    $timeout(function () {\r\n                        $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\r\n                        $scope.gsHandler.enable();\r\n                    }, 100);\r\n                }));\r\n\r\n                $scope.onChange = function (event, items) {\r\n                    console.log('onChange event: ' + event + ' items:' + items);\r\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\r\n                };\r\n\r\n                $scope.onDragStart = function (event, ui) {\r\n                    console.log('onDragStart event: ' + event + ' ui:' + ui);\r\n                };\r\n\r\n                $scope.onDragStop = function (event, ui) {\r\n                    console.log('onDragStop event: ' + event + ' ui:' + ui);\r\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\r\n                };\r\n\r\n                $scope.onResizeStart = function (event, ui) {\r\n                    console.log('onResizeStart event: ' + event + ' ui:' + ui);\r\n                };\r\n\r\n                $scope.onResizeStop = function (event, ui) {\r\n                    console.log('onResizeStop event: ' + event + ' ui:' + ui);\r\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\r\n                    $scope.$broadcast('OnResizeWidget');\r\n                };\r\n\r\n                $scope.onItemAdded = function (item) {\r\n                    console.log('onItemAdded item: ' + item);\r\n                };\r\n\r\n                $scope.onItemRemoved = function (item) {\r\n                    console.log('onItemRemoved item: ' + item);\r\n                };\r\n\r\n                $scope.$on('destroy', function () {\r\n                    dashEvents.forEach(function (dashEvt) {\r\n                        dashEvt();\r\n                    });\r\n                });\r\n            }\r\n        };\r\n    });","/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .filter('adfOrderByObjectKey', function($filter) {\r\n    'use strict';\r\n\r\n    return function(item, key){\r\n      var array = [];\r\n      angular.forEach(item, function(value, objectKey){\r\n        value[key] = objectKey;\r\n        array.push(value);\r\n      });\r\n      return $filter('orderBy')(array, key);\r\n    };\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * @ngdoc object\r\n * @name adf.dashboardProvider\r\n * @description\r\n *\r\n * The dashboardProvider can be used to register widgets.\r\n */\r\nangular.module('adf.provider', [])\r\n    .provider('dashboard', function() {\r\n\r\n        var widgets = {};\r\n        var widgetsPath = '';\r\n        var messageTemplate = '<div class=\"alert alert-primary\">{}</div>';\r\n        var loadingTemplate = '\\\r\n      <div class=\"progress progress-striped active\">\\n\\\r\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\r\n          <span class=\"sr-only\" translate>FORM.MSG.LOADING ...</span>\\n\\\r\n        </div>\\n\\\r\n      </div>';\r\n        var customWidgetTemplatePath = null;\r\n\r\n        // default apply function of widget.edit.apply\r\n        var defaultApplyFunction = function() {\r\n            return true;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#widget\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Registers a new widget.\r\n         *\r\n         * @param {string} name of the widget\r\n         * @param {object} widget to be registered.\r\n         *\r\n         *   Object properties:\r\n         *\r\n         *   - `title` - `{string=}` - The title of the widget.\r\n         *   - `description` - `{string=}` - Description of the widget.\r\n         *   - `category` - `{string=}` - Category of the widget.\r\n         *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\r\n         *   - `config` - `{object}` - Predefined widget configuration.\r\n         *   - `controller` - `{string=|function()=}` - Controller fn that should be\r\n         *      associated with newly created scope of the widget or the name of a\r\n         *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\r\n         *      if passed as a string.\r\n         *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\r\n         *      published to scope under the `controllerAs` name.\r\n         *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\r\n         *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\r\n         *   - `template` - `{string=|function()=}` - html template as a string.\r\n         *   - `templateUrl` - `{string=}` - path to an html template.\r\n         *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\r\n         *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n         *      be injected into the controller. If any of these dependencies are promises, the widget\r\n         *      will wait for them all to be resolved or one to be rejected before the controller is\r\n         *      instantiated.\r\n         *      If all the promises are resolved successfully, the values of the resolved promises are\r\n         *      injected.\r\n         *\r\n         *      The map object is:\r\n         *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\r\n         *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n         *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\r\n         *        and the return value is treated as the dependency. If the result is a promise, it is\r\n         *        resolved before its value is injected into the controller.\r\n         *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n         *      on the scope of the widget.\r\n         *   - `edit` - `{object}` - Edit modus of the widget.\r\n         *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n         *        on the scope of the widget.\r\n         *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\r\n         *        Default is true.\r\n         *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\r\n         *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\r\n         *        The function have to return a boolean or an promise which can be resolved to a boolean.\r\n         *        The function can use injection.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.widget = function(name, widget) {\r\n            var w = angular.extend({\r\n                reload: false,\r\n                frameless: false\r\n            }, widget);\r\n            if (w.edit) {\r\n                var edit = {\r\n                    reload: true,\r\n                    immediate: false,\r\n                    apply: defaultApplyFunction\r\n                };\r\n                angular.extend(edit, w.edit);\r\n                w.edit = edit;\r\n            }\r\n            widgets[name] = w;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#widgetsPath\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Sets the path to the directory which contains the widgets. The widgets\r\n         * path is used for widgets with a templateUrl which contains the\r\n         * placeholder {widgetsPath}. The placeholder is replaced with the\r\n         * configured value, before the template is loaded, but the template is\r\n         * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\r\n         * The default value of widgetPaths is ''.\r\n         *\r\n         *\r\n         * @param {string} path to the directory which contains the widgets\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.widgetsPath = function(path) {\r\n            widgetsPath = path;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#messageTemplate\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the template for messages.\r\n         *\r\n         * @param {string} template for messages.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.messageTemplate = function(template) {\r\n            messageTemplate = template;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#loadingTemplate\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the template which is displayed as\r\n         * long as the widget resources are not resolved.\r\n         *\r\n         * @param {string} template loading template\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.loadingTemplate = function(template) {\r\n            loadingTemplate = template;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#customWidgetTemplatePath\r\n         * @propertyOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the container template for the widgets\r\n         *\r\n         * @param {string} path to the custom widget template\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.customWidgetTemplatePath = function(templatePath) {\r\n            customWidgetTemplatePath = templatePath;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc service\r\n         * @name adf.dashboard\r\n         * @description\r\n         *\r\n         * The dashboard holds all options and  widgets.\r\n         *\r\n         * @property {Array.<Object>} widgets Array of registered widgets.\r\n         * @property {string} widgetsPath Default path for widgets.\r\n         * @property {string} messageTemplate Template for messages.\r\n         * @property {string} loadingTemplate Template for widget loading.\r\n         * * @property {string} customWidgetTemplatePath Changes the container template for the widgets\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.$get = function() {\r\n            var cid = 0;\r\n\r\n            return {\r\n                widgets: widgets,\r\n                widgetsPath: widgetsPath,\r\n                messageTemplate: messageTemplate,\r\n                loadingTemplate: loadingTemplate,\r\n                customWidgetTemplatePath: customWidgetTemplatePath,\r\n\r\n                /**\r\n                 * @ngdoc method\r\n                 * @name adf.dashboard#id\r\n                 * @methodOf adf.dashboard\r\n                 * @description\r\n                 *\r\n                 * Creates an ongoing numeric id. The method is used to create ids for\r\n                 * columns and widgets in the dashboard.\r\n                 */\r\n                id: function() {\r\n                    return new Date().getTime() + '-' + (++cid);\r\n                },\r\n\r\n                /**\r\n                 * @ngdoc method\r\n                 * @name adf.dashboard#idEqual\r\n                 * @methodOf adf.dashboard\r\n                 * @description\r\n                 *\r\n                 * Checks if the given ids are equal.\r\n                 *\r\n                 * @param {string} id widget or column id\r\n                 * @param {string} other widget or column id\r\n                 */\r\n                idEquals: function(id, other) {\r\n                    // use toString, because old ids are numbers\r\n                    return ((id) && (other)) && (id.toString() === other.toString());\r\n                }\r\n            };\r\n        };\r\n\r\n    });","(function(window, undefined) {'use strict';\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf', ['adf.provider', 'ui.bootstrap', 'opengate-angular-js'])\r\n    .value('adfTemplatePath', '../src/templates/')\r\n    .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\r\n    .value('adfVersion', '5.1.0');\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name adf.directive:adfDashboard\r\n * @element div\r\n * @restrict EA\r\n * @scope\r\n * @description\r\n *\r\n * `adfDashboard` is a directive which renders the dashboard with all its\r\n * components. The directive requires a name attribute. The name of the\r\n * dashboard can be used to store the model.\r\n *\r\n * @param {string} name name of the dashboard. This attribute is required.\r\n * @param {boolean=} editable false to disable the editmode of the dashboard.\r\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\r\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\r\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\r\n * @param {object=} adfModel model object of the dashboard.\r\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\r\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\r\n *                   events during edit mode not reset it if edit mode is exited.\r\n * @param {boolean=} categories enable categories for the add widget dialog.\r\n */\r\n\r\nangular.module('adf')\r\n    .directive('adfDashboard', [\"$rootScope\", \"$log\", \"$timeout\", \"$uibModal\", \"dashboard\", \"adfTemplatePath\", \"$faIcons\", \"$translate\", function ($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath, $faIcons, $translate) {\r\n        \r\n\r\n        function stringToBoolean(string) {\r\n            switch (angular.isDefined(string) ? string.toLowerCase() : null) {\r\n                case 'true':\r\n                case 'yes':\r\n                case '1':\r\n                    return true;\r\n                case 'false':\r\n                case 'no':\r\n                case '0':\r\n                case null:\r\n                    return false;\r\n                default:\r\n                    return Boolean(string);\r\n            }\r\n        }\r\n\r\n        function createConfiguration(type) {\r\n            var cfg = {};\r\n            var config = dashboard.widgets[type].config;\r\n            if (config) {\r\n                cfg = angular.copy(config);\r\n            }\r\n            return cfg;\r\n        }\r\n\r\n        function createWidget(type) {\r\n            var wdgt = {};\r\n            var widget = dashboard.widgets[type];\r\n            if (widget) {\r\n                wdgt = angular.copy(widget);\r\n            }\r\n            return wdgt;\r\n        }\r\n\r\n        /**\r\n         * Adds the widget to first column of the model.\r\n         *\r\n         * @param dashboard model\r\n         * @param widget to add to model\r\n         * @param name name of the dashboard\r\n         */\r\n        function addNewWidgetToModel(model, widget, name, forceToSave) {\r\n            if (model) {\r\n                if (!model.grid) {\r\n                    model.grid = [];\r\n                }\r\n\r\n                var newWidget = {\r\n                    width: 3,\r\n                    height: 2,\r\n                    x: 0,\r\n                    y: 0,\r\n                    definition: widget\r\n                };\r\n                model.grid.push(newWidget);\r\n\r\n                $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\r\n\r\n                if (forceToSave) {\r\n                    $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n                }\r\n            } else {\r\n                $log.error('model is undefined');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Checks if the edit mode of the widget should be opened immediately.\r\n         *\r\n         * @param widget type\r\n         */\r\n        function isEditModeImmediate(type) {\r\n            var widget = dashboard.widgets[type];\r\n            return widget && widget.edit && widget.edit.immediate;\r\n        }\r\n\r\n        /**\r\n         * Opens the edit mode of the specified widget.\r\n         *\r\n         * @param dashboard scope\r\n         * @param widget\r\n         */\r\n        function openEditMode($scope, widget) {\r\n            // wait some time before fire enter edit mode event\r\n            $timeout(function () {\r\n                $scope.$broadcast('adfWidgetEnterEditMode', widget);\r\n            }, 200);\r\n        }\r\n\r\n        /**\r\n         * Creates object with the category name as key and an array of widgets as value.\r\n         *\r\n         * @param widgets array of widgets\r\n         *\r\n         * @return array of categories\r\n         */\r\n        function createCategories(widgets) {\r\n            var categories = {};\r\n            angular.forEach(widgets, function (widget, key) {\r\n                var category = widget.category;\r\n                // if the widget has no category use a default one\r\n                if (!category) {\r\n                    category = 'ADF.CATEGORY.MISCELANOUS';\r\n                }\r\n\r\n                widget.title = $translate.instant(widget.title);\r\n                widget.description = $translate.instant(widget.description);\r\n                widget.category = $translate.instant(widget.category);\r\n\r\n                // push widget to category array\r\n                if (angular.isUndefined(categories[widget.category])) {\r\n                    categories[widget.category] = {\r\n                        widgets: {}\r\n                    };\r\n                }\r\n\r\n                categories[widget.category].widgets[key] = widget;\r\n            });\r\n            return categories;\r\n        }\r\n\r\n        function createCategoriesList(widgets) {\r\n            var categories = [];\r\n            angular.forEach(widgets, function (widget, key) {\r\n                if (!widget.category) {\r\n                    widget.category = 'ADF.CATEGORY.MISCELLANEOUS';\r\n                }\r\n\r\n                widget.title = $translate.instant(widget.title);\r\n                widget.description = $translate.instant(widget.description);\r\n                widget.category = $translate.instant(widget.category);\r\n\r\n                if (!widget.categoryTags) {\r\n                    widget.categoryTags = 'ADF.CATEGORY.TAG.MISCELLANEOUS';\r\n                }\r\n\r\n                var categoriesTmp = widget.categoryTags.split(',');\r\n\r\n                angular.forEach(categoriesTmp, function (category, idx) {\r\n                    // push widget to category array\r\n                    var translatedCat = $translate.instant(category);\r\n                    if (categories.indexOf(translatedCat) === -1)\r\n                        categories.push(translatedCat);\r\n                });\r\n\r\n            });\r\n            return categories;\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            scope: {\r\n                name: '@',\r\n                collapsible: '@',\r\n                editable: '@',\r\n                editMode: '@',\r\n                continuousEditMode: '=',\r\n                maximizable: '@',\r\n                adfModel: '=',\r\n                adfWidgetFilter: '=',\r\n                categories: '@',\r\n                hideButtons: '=',\r\n                extraData: '='\r\n            },\r\n            controller: [\"$scope\", function ($scope) {\r\n                var model = {};\r\n                var widgetFilter = null;\r\n                var name = $scope.name;\r\n\r\n                var updateWidgetFilters = function (model) {\r\n                    var widgetFilters = [];\r\n                    var grid = model.grid;\r\n                    if (grid && grid.length > 0) {\r\n                        grid.forEach(function (element) {\r\n                            var definition = element.definition;\r\n                            var config = definition.config;\r\n                            widgetFilters.push({\r\n                                wid: definition.wid,\r\n                                title: definition.title,\r\n                                filter: config.filter,\r\n                                Ftype: definition.Ftype\r\n                            });\r\n                        });\r\n                    }\r\n                    if (!$scope.options) {\r\n                        $scope.options = {\r\n                            extraData: {}\r\n                        };\r\n                    }\r\n                    $scope.options.extraData.widgetFilters = widgetFilters;\r\n                };\r\n                // Watching for changes on adfModel\r\n                $scope.$watch('adfModel', function (oldVal, newVal) {\r\n                    // has model changed or is the model attribute not set\r\n                    if (newVal !== null || (oldVal === null && newVal === null)) {\r\n                        model = $scope.adfModel;\r\n                        widgetFilter = $scope.adfWidgetFilter;\r\n\r\n                        if (model) {\r\n                            updateWidgetFilters(model);\r\n                            if (!model.title) {\r\n                                model.title = $translate.instant('ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD');\r\n                            }\r\n                            if (!model.titleTemplateUrl) {\r\n                                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\r\n                            }\r\n                            $scope.model = model;\r\n                        } else {\r\n                            $log.error('could not find or create model');\r\n                        }\r\n                    }\r\n                }, true);\r\n\r\n                // edit mode\r\n                $scope.editMode = false;\r\n\r\n                function getNewModalScope() {\r\n                    var scope = $scope.$new();\r\n                    return scope;\r\n                }\r\n\r\n                $scope.toggleEditMode = function (openConfigWindow) {\r\n                    $scope.editMode = !$scope.editMode;\r\n                    if ($scope.editMode) {\r\n                        if (!$scope.continuousEditMode) {\r\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n                            $rootScope.$broadcast('adfIsEditMode');\r\n                        }\r\n\r\n                        if (openConfigWindow) {\r\n                            $scope.editDashboardDialog();\r\n                        }\r\n                    }\r\n\r\n                    if (!$scope.editMode) {\r\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n                    }\r\n                };\r\n\r\n                var adfToggleEditMode = $scope.$on('adfToggleEditMode', function (event, isNewDashboard) {\r\n                    if (isNewDashboard) {\r\n                        $scope.toggleEditMode(true);\r\n                    } else {\r\n                        $scope.toggleEditMode();\r\n                    }\r\n                });\r\n\r\n                var adfCancelEditMode = $scope.$on('adfCancelEditMode', function (event) {\r\n                    if ($scope.editMode) {\r\n                        $scope.cancelEditMode();\r\n                    }\r\n                });\r\n\r\n                var adfWidgetRemoved = $scope.$on('adfWidgetRemovedFromGrid', function (event, widget) {\r\n                    var index = null;\r\n                    angular.forEach($scope.adfModel.grid, function (widgetTmp, idx) {\r\n                        if (widgetTmp.definition.wid === widget.wid) {\r\n                            index = idx;\r\n                        }\r\n                    });\r\n\r\n                    if (index >= 0) {\r\n                        $scope.adfModel.grid.splice(index, 1);\r\n                        //$scope.gsHandler.commit();\r\n                    }\r\n                });\r\n\r\n                $scope.cancelEditMode = function () {\r\n                    $scope.editMode = false;\r\n                    if (!$scope.continuousEditMode && ($scope.modelCopy !== $scope.adfModel)) {\r\n                        $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\r\n                    }\r\n                    $rootScope.$broadcast('adfDashboardEditsCancelled');\r\n                };\r\n\r\n                var adfEditDashboardDialog = $scope.$on('adfEditDashboardDialog', function (event) {\r\n                    if ($scope.editMode) {\r\n                        $scope.editDashboardDialog();\r\n                    }\r\n                });\r\n\r\n                var adfLaunchSearchingFromWidget = $scope.$on('adfLaunchSearchingFromWidget', function (event, widget) {\r\n                    var reloadWidgets = [];\r\n                    if (widget) {\r\n                        var id = widget.definition.wid;\r\n                        var config = widget.definition.config;\r\n                        if (config) {\r\n                            var filter = config.filter;\r\n                            model.grid.forEach(function (w) {\r\n                                var f = w.definition.config.filter;\r\n                                if (f && f.id && f.id === id) {\r\n                                    w.definition.config.filter = filter;\r\n                                    w.definition.config.filter.id = id;\r\n                                    reloadWidgets.push(w.definition.wid);\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n                    $rootScope.$broadcast('adfFilterChanged', name, model, reloadWidgets);\r\n                });\r\n                var adfWindowTimeChangedFromWidget = $scope.$on('adfWindowTimeChangedFromWidget', function (event) {\r\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\r\n                });\r\n\r\n                // edit dashboard settings\r\n                $scope.editDashboardDialog = function () {\r\n                    var editDashboardScope = getNewModalScope();\r\n                    // create a copy of the title, to avoid changing the title to\r\n                    // \"dashboard\" if the field is empty\r\n                    editDashboardScope.copy = {\r\n                        title: (model.title !== 'ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD' ? model.title : ''),\r\n                        description: model.description,\r\n                        icon: model.icon ? model.icon : 'fa-tachometer'\r\n                    };\r\n\r\n                    // pass icon list\r\n                    editDashboardScope.availableIcons = $faIcons.list();\r\n\r\n                    var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\r\n                    if (model.editTemplateUrl) {\r\n                        adfEditTemplatePath = model.editTemplateUrl;\r\n                    }\r\n                    var instance = $uibModal.open({\r\n                        scope: editDashboardScope,\r\n                        templateUrl: adfEditTemplatePath,\r\n                        backdrop: 'static',\r\n                        keyboard: false,\r\n                        size: 'lg'\r\n                    });\r\n\r\n\r\n                    editDashboardScope.closeDialog = function () {\r\n                        // copy the new title back to the model\r\n                        model.title = editDashboardScope.copy.title;\r\n                        model.description = editDashboardScope.copy.description;\r\n                        model.icon = editDashboardScope.copy.icon;\r\n\r\n                        // close modal and destroy the scope\r\n                        instance.close();\r\n                        editDashboardScope.$destroy();\r\n                    };\r\n                };\r\n\r\n                var adfOpenWidgetFromOther = $scope.$on('adfOpenWidgetFromOther', function (event, widget, config) {\r\n\r\n                    var internal_config = createConfiguration(widget);\r\n                    var _config = angular.merge({}, internal_config, config);\r\n                    var w = {\r\n                        type: widget,\r\n                        config: _config,\r\n                        title: _config.title\r\n                    };\r\n                    addNewWidgetToModel(model, w, name, !$scope.editMode);\r\n                });\r\n\r\n                var adfOpenModalWidgetFromOther = $scope.$on('adfOpenModalWidgetFromOther', function (event, widgetType, config) {\r\n                    var templateUrl = adfTemplatePath + 'widget-fullscreen.html';\r\n                    if (config.sendSelection) {\r\n                        templateUrl = adfTemplatePath + 'widget-fullscreen-selection.html';\r\n                    }\r\n                    var widget = createWidget(widgetType);\r\n                    widget.config = angular.merge({}, widget.config, config);\r\n                    widget.type = widgetType;\r\n                    if (widget.config.title) {\r\n                        widget.title = widget.config.title;\r\n                    }\r\n                    var fullScreenScope = $scope.$new();\r\n                    fullScreenScope.definition = fullScreenScope.widget = widget;\r\n                    var opts = {\r\n                        scope: fullScreenScope,\r\n                        templateUrl: templateUrl,\r\n                        size: fullScreenScope.definition.modalSize || 'el',\r\n                        backdrop: 'static',\r\n                        windowClass: (fullScreenScope.definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\r\n                    };\r\n\r\n                    if ($scope.model && !$scope.model.temporal) {\r\n                        fullScreenScope.persistDashboard = function () {\r\n                            $rootScope.$broadcast('adfOpenWidgetFromOther', this.$parent.widget.type, this.$parent.widget.config);\r\n                            this.closeDialog();\r\n                        };\r\n                    }\r\n\r\n                    var instance = $uibModal.open(opts);\r\n                    fullScreenScope.closeDialog = function () {\r\n                        instance.close();\r\n                        fullScreenScope.$destroy();\r\n                    };\r\n\r\n\r\n                });\r\n\r\n                var adfAddWidgetDialog = $scope.$on('adfAddWidgetDialog', function (event) {\r\n                    if (!model.temporal && model.editable) {\r\n                        if (!$scope.editMode) {\r\n                            $scope.editMode = true;\r\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n                            $rootScope.$broadcast('adfIsEditMode');\r\n                        }\r\n\r\n                        $scope.addWidgetDialog();\r\n                    }\r\n                });\r\n\r\n                // add widget dialog\r\n                $scope.addScopeCfg = {\r\n                    widgetFilter: {},\r\n                    widgetSortingDirection: '',\r\n                    widgetSorting: 'priority'\r\n                };\r\n\r\n                $scope.addWidgetDialog = function () {\r\n                    var addScope = getNewModalScope();\r\n                    var widgets;\r\n                    if (angular.isFunction(widgetFilter)) {\r\n                        widgets = {};\r\n                        angular.forEach(dashboard.widgets, function (widget, type) {\r\n                            if (widgetFilter(widget, type, model)) {\r\n                                widgets[type] = widget;\r\n                            }\r\n                        });\r\n                    } else {\r\n                        widgets = dashboard.widgets;\r\n                    }\r\n                    addScope.widgets = widgets;\r\n\r\n                    angular.forEach(addScope.widgets, function (widget, type) {\r\n                        widget.key = type;\r\n                        if (!widget.category) {\r\n                            widget.category = 'Miscellaneous';\r\n                        }\r\n                    });\r\n\r\n                    // pass createCategories function to scope, if categories option is enabled\r\n                    if ($scope.options.categories) {\r\n                        addScope.createCategories = createCategories;\r\n                    } else {\r\n                        addScope.availableCategories = createCategoriesList(widgets);\r\n                    }\r\n\r\n                    var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\r\n                    if (model.addTemplateUrl) {\r\n                        adfAddTemplatePath = model.addTemplateUrl;\r\n                    }\r\n\r\n                    var opts = {\r\n                        scope: addScope,\r\n                        templateUrl: adfAddTemplatePath,\r\n                        backdrop: 'static',\r\n                        size: 'lg'\r\n                    };\r\n\r\n                    var instance = $uibModal.open(opts);\r\n\r\n                    addScope.widgetFilterCfg = $scope.addScopeCfg;\r\n\r\n                    addScope.addWidget = function (widget) {\r\n                        var w = {\r\n                            type: widget,\r\n                            Ftype: dashboard.widgets[widget].Ftype || null,\r\n                            config: createConfiguration(widget)\r\n                        };\r\n                        addNewWidgetToModel(model, w, name);\r\n                        // close and destroy\r\n                        instance.close();\r\n                        addScope.$destroy();\r\n\r\n                        // check for open edit mode immediately\r\n                        if (isEditModeImmediate(widget)) {\r\n                            openEditMode($scope, w);\r\n                        }\r\n                    };\r\n\r\n                    addScope.changeThumbnail = function (widget) {\r\n                        if (widget.images) {\r\n                            if (angular.isUndefined(widget._currThumb)) {\r\n                                widget._currThumb = 1;\r\n                            } else {\r\n                                widget._currThumb += 1;\r\n                            }\r\n\r\n\r\n                            if (widget._currThumb >= widget.images.length) {\r\n                                widget._currThumb = 0;\r\n                            }\r\n\r\n                            widget._currImg = widget.images[widget._currThumb];\r\n                        }\r\n                    };\r\n\r\n                    addScope.closeDialog = function () {\r\n                        // close and destroy\r\n                        instance.close();\r\n                        addScope.$destroy();\r\n                    };\r\n                };\r\n\r\n                $scope.addNewWidgetToModel = addNewWidgetToModel;\r\n\r\n                $scope.$on('destroy', function () {\r\n                    adfLaunchSearchingFromWidget();\r\n                    adfWindowTimeChangedFromWidget();\r\n                    adfToggleEditMode();\r\n                    adfOpenWidgetFromOther();\r\n                    adfOpenModalWidgetFromOther();\r\n                    adfCancelEditMode();\r\n                    adfAddWidgetDialog();\r\n                    adfEditDashboardDialog();\r\n                    adfWidgetRemoved();\r\n                });\r\n            }],\r\n            link: function ($scope, $element, $attr) {\r\n                // pass options to scope\r\n                var options = {\r\n                    name: $attr.name,\r\n                    editable: true,\r\n                    enableConfirmDelete: stringToBoolean($attr.enableConfirmDelete),\r\n                    maximizable: stringToBoolean($attr.maximizable),\r\n                    collapsible: stringToBoolean($attr.collapsible),\r\n                    categories: stringToBoolean($attr.categories),\r\n                    extraData: {}\r\n                };\r\n\r\n                if (angular.isDefined($attr.editable)) {\r\n                    options.editable = stringToBoolean($attr.editable);\r\n                }\r\n\r\n                if (angular.isDefined($scope.extraData)) {\r\n                    options.extraData = $scope.extraData;\r\n                }\r\n\r\n                options.extraData.editing = $scope.editMode;\r\n\r\n                $scope.options = options;\r\n            },\r\n            templateUrl: adfTemplatePath + 'dashboard.html'\r\n        };\r\n    }]);\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the 'Software'), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n    .directive('adfDashboardGrid', [\"adfTemplatePath\", function (adfTemplatePath) {\r\n        \r\n\r\n        function preLink($scope) {\r\n            $scope.gridOptions = {\r\n                cellHeight: 146,\r\n                verticalMargin: 10,\r\n                animate: true,\r\n                float: false,\r\n                //alwaysShowResizeHandle: /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),\r\n                alwaysShowResizeHandle: true,\r\n                minWidth: 768,\r\n                auto: true,\r\n                resizable: {\r\n                    handles: 'e, se, s, sw, w'\r\n                },\r\n                disableDrag: !$scope.editMode,\r\n                disableResize: !$scope.editMode\r\n            };\r\n\r\n            $scope.gsHandler = null;\r\n        }\r\n\r\n        return {\r\n            restrict: 'E',\r\n            scope: {\r\n                adfModel: '=',\r\n                editMode: '=',\r\n                continuousEditMode: '=',\r\n                options: '='\r\n            },\r\n            templateUrl: adfTemplatePath + 'dashboard-grid.html',\r\n            compile: function () {\r\n                return {\r\n                    pre: preLink,\r\n                };\r\n            },\r\n            controller: [\"$scope\", \"$timeout\", function ($scope, $timeout) {\r\n                var dashEvents = [];\r\n                dashEvents.push($scope.$on('adfIsEditMode', function () {\r\n                    $timeout(function () {\r\n                        $scope.gsHandler.enable();\r\n                    }, 100);\r\n                }));\r\n\r\n                dashEvents.push($scope.$on('adfDashboardChanged', function () {\r\n                    $timeout(function () {\r\n                        $scope.gsHandler.disable();\r\n                    }, 100);\r\n                }));\r\n\r\n                dashEvents.push($scope.$on('adfDashboardEditsCancelled', function () {\r\n                    $timeout(function () {\r\n                        $scope.gsHandler.disable();\r\n                    }, 100);\r\n                }));\r\n\r\n                dashEvents.push($scope.$on('adfCancelEditMode', function () {\r\n                    $timeout(function () {\r\n                        $scope.gsHandler.disable();\r\n                    }, 100);\r\n                }));\r\n\r\n                dashEvents.push($scope.$on('adfWidgetAdded', function (event) {\r\n                    $timeout(function () {\r\n                        $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\r\n                        $scope.gsHandler.enable();\r\n                    }, 100);\r\n                }));\r\n\r\n                $scope.onChange = function (event, items) {\r\n                    console.log('onChange event: ' + event + ' items:' + items);\r\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\r\n                };\r\n\r\n                $scope.onDragStart = function (event, ui) {\r\n                    console.log('onDragStart event: ' + event + ' ui:' + ui);\r\n                };\r\n\r\n                $scope.onDragStop = function (event, ui) {\r\n                    console.log('onDragStop event: ' + event + ' ui:' + ui);\r\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\r\n                };\r\n\r\n                $scope.onResizeStart = function (event, ui) {\r\n                    console.log('onResizeStart event: ' + event + ' ui:' + ui);\r\n                };\r\n\r\n                $scope.onResizeStop = function (event, ui) {\r\n                    console.log('onResizeStop event: ' + event + ' ui:' + ui);\r\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\r\n                    $scope.$broadcast('OnResizeWidget');\r\n                };\r\n\r\n                $scope.onItemAdded = function (item) {\r\n                    console.log('onItemAdded item: ' + item);\r\n                };\r\n\r\n                $scope.onItemRemoved = function (item) {\r\n                    console.log('onItemRemoved item: ' + item);\r\n                };\r\n\r\n                $scope.$on('destroy', function () {\r\n                    dashEvents.forEach(function (dashEvt) {\r\n                        dashEvt();\r\n                    });\r\n                });\r\n            }]\r\n        };\r\n    }]);\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .filter('adfOrderByObjectKey', [\"$filter\", function($filter) {\r\n    \r\n\r\n    return function(item, key){\r\n      var array = [];\r\n      angular.forEach(item, function(value, objectKey){\r\n        value[key] = objectKey;\r\n        array.push(value);\r\n      });\r\n      return $filter('orderBy')(array, key);\r\n    };\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\n/**\r\n * @ngdoc object\r\n * @name adf.dashboardProvider\r\n * @description\r\n *\r\n * The dashboardProvider can be used to register widgets.\r\n */\r\nangular.module('adf.provider', [])\r\n    .provider('dashboard', function() {\r\n\r\n        var widgets = {};\r\n        var widgetsPath = '';\r\n        var messageTemplate = '<div class=\"alert alert-primary\">{}</div>';\r\n        var loadingTemplate = '\\\r\n      <div class=\"progress progress-striped active\">\\n\\\r\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\r\n          <span class=\"sr-only\" translate>FORM.MSG.LOADING ...</span>\\n\\\r\n        </div>\\n\\\r\n      </div>';\r\n        var customWidgetTemplatePath = null;\r\n\r\n        // default apply function of widget.edit.apply\r\n        var defaultApplyFunction = function() {\r\n            return true;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#widget\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Registers a new widget.\r\n         *\r\n         * @param {string} name of the widget\r\n         * @param {object} widget to be registered.\r\n         *\r\n         *   Object properties:\r\n         *\r\n         *   - `title` - `{string=}` - The title of the widget.\r\n         *   - `description` - `{string=}` - Description of the widget.\r\n         *   - `category` - `{string=}` - Category of the widget.\r\n         *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\r\n         *   - `config` - `{object}` - Predefined widget configuration.\r\n         *   - `controller` - `{string=|function()=}` - Controller fn that should be\r\n         *      associated with newly created scope of the widget or the name of a\r\n         *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\r\n         *      if passed as a string.\r\n         *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\r\n         *      published to scope under the `controllerAs` name.\r\n         *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\r\n         *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\r\n         *   - `template` - `{string=|function()=}` - html template as a string.\r\n         *   - `templateUrl` - `{string=}` - path to an html template.\r\n         *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\r\n         *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n         *      be injected into the controller. If any of these dependencies are promises, the widget\r\n         *      will wait for them all to be resolved or one to be rejected before the controller is\r\n         *      instantiated.\r\n         *      If all the promises are resolved successfully, the values of the resolved promises are\r\n         *      injected.\r\n         *\r\n         *      The map object is:\r\n         *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\r\n         *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n         *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\r\n         *        and the return value is treated as the dependency. If the result is a promise, it is\r\n         *        resolved before its value is injected into the controller.\r\n         *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n         *      on the scope of the widget.\r\n         *   - `edit` - `{object}` - Edit modus of the widget.\r\n         *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n         *        on the scope of the widget.\r\n         *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\r\n         *        Default is true.\r\n         *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\r\n         *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\r\n         *        The function have to return a boolean or an promise which can be resolved to a boolean.\r\n         *        The function can use injection.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.widget = function(name, widget) {\r\n            var w = angular.extend({\r\n                reload: false,\r\n                frameless: false\r\n            }, widget);\r\n            if (w.edit) {\r\n                var edit = {\r\n                    reload: true,\r\n                    immediate: false,\r\n                    apply: defaultApplyFunction\r\n                };\r\n                angular.extend(edit, w.edit);\r\n                w.edit = edit;\r\n            }\r\n            widgets[name] = w;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#widgetsPath\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Sets the path to the directory which contains the widgets. The widgets\r\n         * path is used for widgets with a templateUrl which contains the\r\n         * placeholder {widgetsPath}. The placeholder is replaced with the\r\n         * configured value, before the template is loaded, but the template is\r\n         * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\r\n         * The default value of widgetPaths is ''.\r\n         *\r\n         *\r\n         * @param {string} path to the directory which contains the widgets\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.widgetsPath = function(path) {\r\n            widgetsPath = path;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#messageTemplate\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the template for messages.\r\n         *\r\n         * @param {string} template for messages.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.messageTemplate = function(template) {\r\n            messageTemplate = template;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#loadingTemplate\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the template which is displayed as\r\n         * long as the widget resources are not resolved.\r\n         *\r\n         * @param {string} template loading template\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.loadingTemplate = function(template) {\r\n            loadingTemplate = template;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#customWidgetTemplatePath\r\n         * @propertyOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the container template for the widgets\r\n         *\r\n         * @param {string} path to the custom widget template\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.customWidgetTemplatePath = function(templatePath) {\r\n            customWidgetTemplatePath = templatePath;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc service\r\n         * @name adf.dashboard\r\n         * @description\r\n         *\r\n         * The dashboard holds all options and  widgets.\r\n         *\r\n         * @property {Array.<Object>} widgets Array of registered widgets.\r\n         * @property {string} widgetsPath Default path for widgets.\r\n         * @property {string} messageTemplate Template for messages.\r\n         * @property {string} loadingTemplate Template for widget loading.\r\n         * * @property {string} customWidgetTemplatePath Changes the container template for the widgets\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.$get = function() {\r\n            var cid = 0;\r\n\r\n            return {\r\n                widgets: widgets,\r\n                widgetsPath: widgetsPath,\r\n                messageTemplate: messageTemplate,\r\n                loadingTemplate: loadingTemplate,\r\n                customWidgetTemplatePath: customWidgetTemplatePath,\r\n\r\n                /**\r\n                 * @ngdoc method\r\n                 * @name adf.dashboard#id\r\n                 * @methodOf adf.dashboard\r\n                 * @description\r\n                 *\r\n                 * Creates an ongoing numeric id. The method is used to create ids for\r\n                 * columns and widgets in the dashboard.\r\n                 */\r\n                id: function() {\r\n                    return new Date().getTime() + '-' + (++cid);\r\n                },\r\n\r\n                /**\r\n                 * @ngdoc method\r\n                 * @name adf.dashboard#idEqual\r\n                 * @methodOf adf.dashboard\r\n                 * @description\r\n                 *\r\n                 * Checks if the given ids are equal.\r\n                 *\r\n                 * @param {string} id widget or column id\r\n                 * @param {string} other widget or column id\r\n                 */\r\n                idEquals: function(id, other) {\r\n                    // use toString, because old ids are numbers\r\n                    return ((id) && (other)) && (id.toString() === other.toString());\r\n                }\r\n            };\r\n        };\r\n\r\n    });\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf')\r\n    .directive('adfWidgetContent', [\"$log\", \"$q\", \"widgetService\", \"$compile\", \"$controller\", \"$injector\", \"dashboard\", \"$translate\", function ($log, $q, widgetService,\r\n        $compile, $controller, $injector, dashboard, $translate) {\r\n\r\n        function renderError($element, msg) {\r\n            $log.warn(msg);\r\n            $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\r\n        }\r\n\r\n        function compileWidget($scope, $element, currentScope, configChanged) {\r\n            var model = $scope.model;\r\n            if (!model) {\r\n                $translate('ADF.ERROR.MODEL_IS_UNDEFINED').then(function (translateMessage) {\r\n                    renderError($element, translateMessage);\r\n                });\r\n                return currentScope;\r\n            }\r\n\r\n            var content = $scope.content;\r\n\r\n            if (!content) {\r\n                $translate('ADF.ERROR.WIDGET_FOR_DEPRECTATED', {\r\n                    title: model.title\r\n                }).then(function (translateMessage) {\r\n                    renderError($element, translateMessage);\r\n                });\r\n                return currentScope;\r\n            }\r\n\r\n            var extra = $scope.extra;\r\n            var newScope = currentScope;\r\n\r\n            if (newScope) {\r\n                var is_menu = newScope.menu !== undefined && newScope.menu !== null && (!newScope.isPaginationEnable || !newScope.isPaginationEnable());\r\n                if (is_menu || configChanged || !angular.isFunction(newScope.reloadData)) {\r\n                    if ($scope.navOptionsHandler) {\r\n                        $scope.navOptionsHandler.firstLoad = true;\r\n                    }\r\n                    newScope = renderWidget($scope, $element, currentScope, model, content, extra);\r\n                } else {\r\n                    var is_itemsPerPage = newScope.itemsPerPage !== undefined && newScope.itemsPerPage !== null;\r\n                    if (is_itemsPerPage || newScope.page) {\r\n                        newScope.page = 1;\r\n                    }\r\n                    newScope.reloadData();\r\n                }\r\n            } else {\r\n                if ($scope.navOptionsHandler) {\r\n                    $scope.navOptionsHandler.firstLoad = true;\r\n                }\r\n\r\n                newScope = renderWidget($scope, $element, currentScope, model, content, extra);\r\n            }\r\n\r\n            function _getWindowTime(type) {\r\n                if (type === 'custom') {\r\n                    return {\r\n                        from: newScope.config.windowFilter.from,\r\n                        to: newScope.config.windowFilter.to\r\n                    };\r\n                }\r\n                var from = window.moment().subtract(1, type);\r\n                return {\r\n                    from: from._d\r\n                };\r\n            }\r\n\r\n\r\n            if (newScope.config) {\r\n                newScope.config.getWindowTime = function () {\r\n                    var windowFilter = newScope.config.windowFilter;\r\n                    if (windowFilter && windowFilter.type) {\r\n                        var winTime = _getWindowTime(windowFilter.type);\r\n                        /* jshint ignore:start */\r\n                        if (!window.eval(newScope.config.windowFilter.rawdate)) {\r\n                            for (var key in winTime) {\r\n                                winTime[key] = window.moment(winTime[key]).format();\r\n                            }\r\n                            winTime['rawdate'] = true;\r\n                        }\r\n                        /* jshint ignore:end */\r\n                        return winTime;\r\n                    }\r\n                };\r\n            }\r\n\r\n            if (extra) {\r\n                newScope.editing = extra.editing ? true : false;\r\n                newScope.extraData = extra;\r\n            }\r\n\r\n            return newScope;\r\n        }\r\n\r\n        function renderWidget($scope, $element, currentScope, model, content, extra) {\r\n            // display loading template\r\n            $element.html(dashboard.loadingTemplate);\r\n\r\n            // create new scope\r\n            var templateScope = $scope.$new();\r\n\r\n            // pass config object to scope\r\n            if (!model.config) {\r\n                model.config = {};\r\n            }\r\n\r\n            templateScope.config = model.config;\r\n            templateScope.editing = extra && extra.editing;\r\n\r\n            if (extra) {\r\n                templateScope.extra = extra;\r\n            }\r\n\r\n            var _from = currentScope || templateScope.config;\r\n            templateScope.selectionManager = (_from) ? _from.selectionManager : undefined;\r\n\r\n            // local injections\r\n            var base = {\r\n                $scope: templateScope,\r\n                widget: model,\r\n                config: model.config\r\n            };\r\n\r\n            // get resolve promises from content object\r\n            var resolvers = {};\r\n            resolvers.$tpl = widgetService.getTemplate(content);\r\n            if (content.resolve) {\r\n                angular.forEach(content.resolve, function (promise, key) {\r\n                    if (angular.isString(promise)) {\r\n                        resolvers[key] = $injector.get(promise);\r\n                    } else {\r\n                        resolvers[key] = $injector.invoke(promise, promise, base);\r\n                    }\r\n                });\r\n            }\r\n\r\n            // resolve all resolvers\r\n            $q.all(resolvers).then(function (locals) {\r\n                angular.extend(locals, base);\r\n\r\n                // pass resolve map to template scope as defined in resolveAs\r\n                if (content.resolveAs) {\r\n                    templateScope[content.resolveAs] = locals;\r\n                }\r\n\r\n                // compile & render template\r\n                var template = locals.$tpl;\r\n                $element.html(template);\r\n                if (content.controller) {\r\n                    var templateCtrl = $controller(content.controller, locals);\r\n                    if (content.controllerAs) {\r\n                        templateScope[content.controllerAs] = templateCtrl;\r\n                    }\r\n                    $element.children().data('$ngControllerController', templateCtrl);\r\n                }\r\n                $compile($element.contents())(templateScope);\r\n            }, function (reason) {\r\n                // handle promise rejection\r\n                var msg = 'ADF.ERROR.COULD_NOT_RESOLVE_ALL_PROMISSES';\r\n                $translate(msg, {\r\n                    reason: (reason ? ': ' + reason : reason)\r\n                }).then(function (translateMessage) {\r\n                    renderError($element, translateMessage);\r\n                });\r\n            });\r\n\r\n            // destroy old scope\r\n            if (currentScope) {\r\n                currentScope.$destroy();\r\n            }\r\n\r\n            return templateScope;\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            require: '?^^adfWidgetGrid',\r\n            scope: {\r\n                model: '=',\r\n                content: '=',\r\n                extra: '=',\r\n                navOptionsHandler: '=?',\r\n                filterHandler: '=?',\r\n                widgetActionsHandler: '=?'\r\n            },\r\n            link: function ($scope, $element, attrs, adfWidgetGridCtrl) {\r\n\r\n\r\n                var currentScope = compileWidget($scope, $element, null);\r\n                if (adfWidgetGridCtrl)\r\n                    adfWidgetGridCtrl.updateWidgetFilters();\r\n                var widgetConfigChangedEvt = $scope.$on('widgetConfigChanged', function () {\r\n                    currentScope = compileWidget($scope, $element, currentScope, true);\r\n                });\r\n\r\n                var widgetReloadEvt = $scope.$on('widgetReload', function (reloadWidgets) {\r\n                    var reloadWidget = true;\r\n                    if (reloadWidgets && reloadWidgets.length > 0) {\r\n                        reloadWidget = reloadWidgets.indexOf($scope.model.wid) !== -1;\r\n                    }\r\n                    if (reloadWidget) {\r\n                        currentScope = compileWidget($scope, $element, currentScope, false);\r\n                        if (adfWidgetGridCtrl)\r\n                            adfWidgetGridCtrl.updateWidgetFilters();\r\n                    }\r\n                });\r\n\r\n                $scope.$on('destroy', function () {\r\n                    widgetConfigChangedEvt();\r\n                    widgetReloadEvt();\r\n                });\r\n            }\r\n        };\r\n    }]);\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf')\r\n    .directive('adfWidgetGrid', [\"$injector\", \"$q\", \"$log\", \"$uibModal\", \"$rootScope\", \"$interval\", \"dashboard\", \"adfTemplatePath\", \"Filter\", function ($injector, $q, $log, $uibModal, $rootScope, $interval, dashboard, adfTemplatePath, Filter) {\r\n        function preLink($scope) {\r\n            var definition = $scope.definition;\r\n\r\n            if (definition) {\r\n                var w = dashboard.widgets[definition.type];\r\n                if (w) {\r\n                    // pass title\r\n                    if (!definition.title) {\r\n                        definition.title = w.title;\r\n                    }\r\n\r\n                    definition.titleTemplateUrl = adfTemplatePath + 'widget-grid-title.html';\r\n\r\n                    if (!definition.editTemplateUrl) {\r\n                        definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\r\n                        if (w.editTemplateUrl) {\r\n                            definition.editTemplateUrl = w.editTemplateUrl;\r\n                        }\r\n                    }\r\n\r\n                    if (!definition.titleTemplateUrl) {\r\n                        definition.frameless = w.frameless;\r\n                    }\r\n\r\n                    if (!definition.styleClass) {\r\n                        definition.styleClass = w.styleClass;\r\n                    }\r\n\r\n                    // set id for sortable\r\n                    if (!definition.wid) {\r\n                        definition.wid = dashboard.id();\r\n                    }\r\n\r\n                    // pass copy of widget to scope\r\n                    $scope.widget = angular.copy(w);\r\n\r\n                    // create config object\r\n                    var config = definition.config;\r\n                    if (config) {\r\n                        if (angular.isString(config)) {\r\n                            config = angular.fromJson(config);\r\n                        }\r\n                    } else {\r\n                        config = {};\r\n                    }\r\n\r\n                    if (typeof $scope.widget.show_modal_footer === 'undefined') {\r\n                        $scope.widget.show_modal_footer = true;\r\n                    }\r\n\r\n                    if (typeof $scope.widget.show_reload_config === 'undefined') {\r\n                        $scope.widget.show_reload_config = true;\r\n                    }\r\n\r\n                    // pass config to scope\r\n                    $scope.config = config;\r\n\r\n                    // collapse exposed $scope.widgetState property\r\n                    if (!$scope.widgetState) {\r\n                        $scope.widgetState = {};\r\n                        $scope.widgetState.isCollapsed = (w.collapsed === true) ? w.collapsed : false;\r\n                    }\r\n\r\n                } else {\r\n                    $log.warn('could not find widget ' + definition.type);\r\n                }\r\n            } else {\r\n                $log.debug('definition not specified, widget was probably removed');\r\n            }\r\n        }\r\n\r\n        function postLink($scope, $element) {\r\n            var definition = $scope.definition;\r\n            if (!definition) {\r\n                $log.debug('widget not found');\r\n                return;\r\n            }\r\n            if (!$scope.config) {\r\n                $scope.config = {};\r\n            }\r\n\r\n            var config = $scope.config;\r\n\r\n            // bind close function\r\n            var deleteWidget = function () {\r\n                $element.remove();\r\n                $rootScope.$broadcast('adfWidgetRemovedFromGrid', definition);\r\n            };\r\n\r\n            $scope.remove = function () {\r\n                if ($scope.options.enableConfirmDelete) {\r\n                    var deleteScope = $scope.$new();\r\n\r\n                    var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\r\n                    if (definition.deleteTemplateUrl) {\r\n                        deleteTemplateUrl = definition.deleteTemplateUrl;\r\n                    }\r\n                    var opts = {\r\n                        scope: deleteScope,\r\n                        templateUrl: deleteTemplateUrl,\r\n                        backdrop: 'static'\r\n                    };\r\n                    var instance = $uibModal.open(opts);\r\n\r\n                    deleteScope.closeDialog = function () {\r\n                        instance.close();\r\n                        deleteScope.$destroy();\r\n                    };\r\n                    deleteScope.deleteDialog = function () {\r\n                        deleteWidget();\r\n                        deleteScope.closeDialog();\r\n                    };\r\n                } else {\r\n                    deleteWidget();\r\n                }\r\n            };\r\n\r\n\r\n            $scope.print = function () {\r\n                if (!$scope.editMode) {\r\n                    $scope.$broadcast('widgetPrint');\r\n                }\r\n            };\r\n\r\n            $scope.isExecuteOperationEnabled = function () {\r\n\r\n                if (config.entityKey)\r\n                    return true;\r\n                var filter = config.filter;\r\n                if (filter && filter.type === \"basic\") {\r\n                    return filter.length > 0;\r\n                }\r\n                if (filter && filter.type === \"advanced\") {\r\n                    return filter.value.length > 2 && filter.oql;\r\n                }\r\n                return false;\r\n            };\r\n\r\n            $scope.executeOperation = function () {\r\n                if (!$scope.editMode) {\r\n\r\n                    $scope.$parent.$broadcast('widgetExecuteOperation');\r\n                }\r\n            };\r\n\r\n            $scope.filter = {\r\n                typeFilter: 1,\r\n                showFilter: false,\r\n                showFinalFilter: false\r\n            };\r\n\r\n            var filter = config.filter;\r\n            if (filter && filter.type === 'advanced' && filter.oql && filter.oql.length > 2) {\r\n                $scope.search = {\r\n                    oql: filter.oql,\r\n                    json: filter.value\r\n                };\r\n                $scope.toggleAdvanced = 0;\r\n            } else if (filter && filter.type === 'basic') {\r\n                $scope.search = {\r\n                    quick: filter.value\r\n                };\r\n                $scope.toggleAdvanced = 1;\r\n            } else if (typeof filter === \"object\" && filter.fields) {\r\n                $scope.search = {\r\n                    customFilter: filter.fields\r\n                };\r\n                $scope.search.fields = [];\r\n                angular.forEach(filter.fields, function (v, key) {\r\n                    $scope.search.fields.push(v.name);\r\n                });\r\n                $scope.toggleAdvanced = 2;\r\n            } else {\r\n                $scope.search = {\r\n                    quick: filter = ''\r\n                };\r\n            }\r\n\r\n            $scope.launchSearching = function () {\r\n                var widget = {\r\n                    definition: definition,\r\n                    element: $element\r\n                };\r\n\r\n                $rootScope.$broadcast('adfLaunchSearchingFromWidget', widget, $scope.config.filter);\r\n                $scope.reload(true);\r\n            };\r\n\r\n\r\n            $scope.launchSearchingAdv = function () {\r\n                if (!$scope.filterApplied) {\r\n                    $scope.search.quick = '';\r\n                    if ($scope.search.json === '' || $scope.search.json === '{}' || (!angular.isString($scope.search.json) && Object.keys($scope.search.json).length === 0)) {\r\n                        $scope.config.filter = {\r\n                            oql: '',\r\n                            value: ''\r\n                        };\r\n                    } else {\r\n                        $scope.config.filter = {\r\n                            type: 'advanced',\r\n                            oql: $scope.search.oql,\r\n                            value: $scope.search.json\r\n                        };\r\n                    }\r\n                    $scope.launchSearching();\r\n                    $scope.filterApplied = true;\r\n                }\r\n            };\r\n\r\n            $scope.launchSearchingQuick = function () {\r\n                if (!$scope.filterApplied) {\r\n                    $scope.search.oql = $scope.search.json = '';\r\n                    $scope.config.filter = {\r\n                        type: 'basic',\r\n                        value: $scope.search.quick\r\n                    };\r\n                    $scope.launchSearching();\r\n                    $scope.filterApplied = true;\r\n                }\r\n            };\r\n\r\n            $scope.launchSearchingShared = function () {\r\n                if (!$scope.filterApplied) {\r\n                    var shared = $scope.search.id;\r\n                    if (shared) {\r\n                        shared.filter.id = shared.wid;\r\n                        $scope.config.filter = shared.filter;\r\n                    } else {\r\n                        $scope.config.filter = {};\r\n                    }\r\n                    $scope.launchSearching();\r\n                    $scope.filterApplied = true;\r\n                }\r\n            };\r\n\r\n            $scope.filterSharedSelect = function ($item, $model) {\r\n                $scope.filterApplied = false;\r\n            };\r\n            $scope.filterSharedRemove = function ($item, $model) {\r\n                $scope.filterApplied = false;\r\n            };\r\n\r\n            var windowTimeChanged = $scope.$on('onWindowTimeChanged', function (event, timeObj) {\r\n                $scope.config.windowFilter = timeObj ? timeObj : (config.windowFilter ? {} : timeObj);\r\n                var widget = {\r\n                    definition: definition,\r\n                    element: $element\r\n                };\r\n                $rootScope.$broadcast('adfWindowTimeChangedFromWidget', widget, $scope.config.windowFilter);\r\n                $scope.reload();\r\n            });\r\n\r\n            $scope.enter = function (event) {\r\n                var keycode = (event.keyCode ? event.keyCode : event.which);\r\n                if (keycode === 13) {\r\n                    if ($scope.filter.typeFilter === 0)\r\n                        $scope.launchSearchingAdv();\r\n                    if ($scope.filter.typeFilter === 1)\r\n                        $scope.launchSearchingQuick();\r\n\r\n                } else if (keycode === 19) {\r\n                    $scope.filter.showFinalFilter = !$scope.filter.showFinalFilter;\r\n                } else {\r\n                    $scope.filterApplied = false;\r\n                }\r\n            };\r\n\r\n\r\n            $scope.customSelectors = [];\r\n            $scope.getCustomSelectors = function () {\r\n                if ($scope.config.customSelectors) {\r\n                    $scope.customSelectors = $scope.config.customSelectors;\r\n                } else {\r\n                    config.widgetSelectors().findFields('').then(function (fields) {\r\n                        $scope.customSelectors = fields;\r\n                        $scope.$apply();\r\n                    }).catch(function (err) {\r\n                        $log.error(err);\r\n                    });\r\n                }\r\n            };\r\n\r\n            $scope.changeDirection = function () {\r\n                var direction = config.sort.direction;\r\n                if (direction === 'DESCENDING') {\r\n                    $scope.config.sort.direction = 'ASCENDING';\r\n                } else if (direction === 'ASCENDING') {\r\n                    $scope.config.sort.direction = 'DESCENDING';\r\n                }\r\n                $scope.reload();\r\n            };\r\n\r\n            $scope.debugQuery = function () {\r\n                Filter.parseQuery($scope.search.oql || '')\r\n                    .then(function (data) {\r\n                        //$scope.elementos = data;\r\n                        $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\r\n                        $scope.unknownWords = '';\r\n                        $scope.filter_error = null;\r\n                    })\r\n                    .catch(function (err) {\r\n                        $scope.filter_error = err;\r\n                        // Tratar el error\r\n                    });\r\n\r\n            };\r\n\r\n            $scope.autocomplete_options = function () {\r\n                var autocomplete_options = {\r\n                    suggest: Filter.suggest_field_delimited,\r\n                    customSelectors: config.widgetSelectors()\r\n                };\r\n\r\n                return autocomplete_options;\r\n\r\n            };\r\n\r\n            // Multiple selection\r\n            $scope.selectedItems = definition.selectedItems || {};\r\n\r\n            // Gestor de seleccion\r\n            $scope.selectionManager = {\r\n                currentSelection: $scope.selectedItems,\r\n                isSelected: function (key, obj) {\r\n                    if ($scope.selectedItems[key] && !angular.isUndefined(obj)) {\r\n                        selectedItems[key].data = obj;\r\n                    }\r\n\r\n                    return $scope.selectedItems[key] ? true : false;\r\n                },\r\n                totalSelected: function () {\r\n                    return Object.keys($scope.selectedItems).length;\r\n                }\r\n            };\r\n\r\n            if (definition.config.sendSelection) {\r\n\r\n                $scope.sendEntities = function () {\r\n                    definition.config.sendSelection($scope.selectedItems);\r\n                    $scope.$parent.closeDialog();\r\n                };\r\n\r\n                if (definition.config.selectedItems) {\r\n                    $scope.selectedItems = angular.copy(definition.config.selectedItems);\r\n                }\r\n\r\n                $scope.config.selectionManager = $scope.selectionManager;\r\n            }\r\n\r\n            $scope.manageSelectedItems = function () {\r\n                var selectionScope = $scope.$new();\r\n\r\n                if (definition.config.sendSelection) {\r\n                    delete config.selectionConfig.operationTypes;\r\n                    delete config.selectionConfig.filterTypes;\r\n                }\r\n\r\n                selectionScope.selectionConfig = config.selectionConfig;\r\n\r\n                selectionScope.selectedItems = [];\r\n                angular.forEach($scope.selectedItems, function (value, key) {\r\n                    selectionScope.selectedItems.push({\r\n                        key: key,\r\n                        value: value\r\n                    });\r\n                });\r\n\r\n                selectionScope.currentSelection = {\r\n                    selected: selectionScope.selectedItems\r\n                };\r\n\r\n                var manageItemsSelectedTemplate = adfTemplatePath + 'widget-selection.html';\r\n                var opts = {\r\n                    scope: selectionScope,\r\n                    templateUrl: manageItemsSelectedTemplate,\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    animation: true\r\n                };\r\n\r\n                var instance = $uibModal.open(opts);\r\n\r\n                selectionScope.restoreSelection = function () {\r\n                    selectionScope.currentSelection = {\r\n                        selected: selectionScope.selectedItems\r\n                    };\r\n                };\r\n\r\n                selectionScope.clearSelection = function () {\r\n                    selectionScope.currentSelection.selected = [];\r\n                };\r\n\r\n                // Cierra sy guarda los datos de nueva selección\r\n                selectionScope.applyFilter = function (type) {\r\n                    var customOql = selectionScope.selectionConfig.filterAction(selectionScope.currentSelection.selected, type);\r\n\r\n                    if (!angular.isUndefined(customOql) && customOql !== null) {\r\n                        $scope.filter.typeFilter = 0;\r\n                        Filter.parseQuery(customOql).then(function (data) {\r\n                            $scope.search.oql = customOql;\r\n                            $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\r\n                            $scope.unknownWords = '';\r\n                            $scope.filter_error = null;\r\n\r\n                            $scope.launchSearchingAdv();\r\n                        }).catch(function (err) {\r\n                            $scope.filter_error = err;\r\n                        });\r\n                    }\r\n                };\r\n\r\n                selectionScope.executeOperation = function (operationType) {\r\n                    if (!$scope.editMode) {\r\n                        $scope.$parent.$broadcast('widgetExecuteOperation', {\r\n                            'selectedItems': selectionScope.currentSelection.selected,\r\n                            'type': operationType\r\n                        });\r\n                    }\r\n                };\r\n\r\n                // Cierra sy guarda los datos de nueva selección\r\n                selectionScope.saveChangesDialog = function () {\r\n                    var finalSelection = {};\r\n                    angular.forEach(selectionScope.currentSelection.selected, function (data, idx) {\r\n                        finalSelection[data.key] = {\r\n                            data: data.value.data,\r\n                            visible: data.value.visible\r\n                        };\r\n                    });\r\n\r\n                    $scope.selectedItems = angular.copy(finalSelection);\r\n                    $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n\r\n                    $scope.selectionManager.lastItem = {};\r\n                    $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n\r\n                    instance.close();\r\n                    selectionScope.$destroy();\r\n                };\r\n\r\n                // Cierra sin realizar ninguna acción\r\n                selectionScope.closeDialog = function () {\r\n                    instance.close();\r\n                    selectionScope.$destroy();\r\n                };\r\n            };\r\n\r\n\r\n            // bind edit function\r\n            $scope.edit = function () {\r\n                var editScope = $scope.$new();\r\n                editScope.definition = angular.copy(definition);\r\n\r\n                var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\r\n                if (definition.editTemplateUrl) {\r\n                    adfEditTemplatePath = definition.editTemplateUrl;\r\n                }\r\n\r\n                var opts = {\r\n                    scope: editScope,\r\n                    templateUrl: adfEditTemplatePath,\r\n                    backdrop: 'static',\r\n                    size: 'lg'\r\n                };\r\n\r\n                var instance = $uibModal.open(opts);\r\n\r\n                editScope.closeDialog = function () {\r\n                    instance.close();\r\n                    editScope.$destroy();\r\n                };\r\n\r\n                // TODO create util method\r\n                function createApplyPromise(result) {\r\n                    var promise;\r\n                    if (typeof result === 'boolean') {\r\n                        var deferred = $q.defer();\r\n                        if (result) {\r\n                            deferred.resolve();\r\n                        } else {\r\n                            deferred.reject();\r\n                        }\r\n                        promise = deferred.promise;\r\n                    } else {\r\n                        promise = $q.when(result);\r\n                    }\r\n                    return promise;\r\n                }\r\n\r\n                editScope.saveDialog = function () {\r\n                    // clear validation error\r\n                    editScope.validationError = null;\r\n\r\n                    // build injection locals\r\n                    var widget = $scope.widget;\r\n\r\n                    // create a default apply method for widgets\r\n                    // without edit mode\r\n                    // see issue https://goo.gl/KHPQLZ\r\n                    var applyFn;\r\n                    if (widget.edit) {\r\n                        applyFn = widget.edit.apply;\r\n                    } else {\r\n                        applyFn = function () {\r\n                            return true;\r\n                        };\r\n                    }\r\n\r\n                    // injection locals\r\n                    var locals = {\r\n                        widget: widget,\r\n                        definition: editScope.definition,\r\n                        config: editScope.definition.config\r\n                    };\r\n\r\n                    // invoke apply function and apply if success\r\n                    var result = $injector.invoke(applyFn, applyFn, locals);\r\n                    createApplyPromise(result).then(function () {\r\n                        definition.title = editScope.definition.title;\r\n                        if (editScope.definition.type === 'summaryChart') {\r\n                            editScope.definition.Ftype = editScope.definition.config.type.toLowerCase();\r\n                            definition.Ftype = editScope.definition.config.type.toLowerCase()\r\n                        }\r\n                        angular.extend(definition.config, editScope.definition.config);\r\n\r\n                        editScope.closeDialog();\r\n\r\n                        if (widget.edit && widget.edit.reload) {\r\n                            $scope.setReloadTimeout();\r\n                            // reload content after edit dialog is closed\r\n                            $scope.$broadcast('widgetConfigChanged');\r\n                        }\r\n                    }, function (err) {\r\n                        if (err) {\r\n                            editScope.validationError = err;\r\n                        } else {\r\n                            editScope.validationError = 'VALIDATION_DURING_APPLY_FAILED';\r\n                        }\r\n                    });\r\n                };\r\n\r\n            };\r\n\r\n\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            templateUrl: adfTemplatePath + 'widget-grid.html',\r\n            scope: {\r\n                definition: '=',\r\n                editMode: '=',\r\n                options: '=',\r\n                widgetState: '='\r\n            },\r\n            controller: [\"$scope\", function ($scope) {\r\n\r\n                var sharedFilters = $scope.sharedFilters = [];\r\n\r\n                this.updateWidgetFilters = function () {\r\n                    var _widgetFilters = $scope.options.extraData.widgetFilters;\r\n                    var model = $scope.definition;\r\n                    var sharedFilters = _widgetFilters.filter(function (widgetFilter) {\r\n                        return widgetFilter.wid !== model.wid && widgetFilter.Ftype === model.Ftype;\r\n                    });\r\n                    $scope.sharedFilters = angular.copy(sharedFilters);\r\n                };\r\n\r\n                var definition = $scope.definition;\r\n\r\n\r\n                if (definition.config.selectedItems) {\r\n                    $scope.selectedItemsLength = Object.keys(definition.config.selectedItems).length;\r\n                }\r\n\r\n\r\n                // Controlador de la barra inferior de los widgets\r\n                $scope.navOptionsHandler = {\r\n                    firstLoad: true,\r\n                    loadingData: false,\r\n                    startLoading: function () {\r\n                        $scope.navOptionsHandler.loadingData = true;\r\n                    },\r\n                    stopLoading: function () {\r\n                        $scope.navOptionsHandler.firstLoad = false;\r\n                        $scope.navOptionsHandler.loadingData = false;\r\n                        $scope.navOptionsHandler.lastMessageTime = new Date();\r\n                    },\r\n                    setStatusMessage: function (message) {\r\n                        $scope.navOptionsHandler.statusMessage = message;\r\n                        $scope.navOptionsHandler.lastMessageTime = new Date();\r\n                    }\r\n                };\r\n\r\n                // Controlador de los parámetros del filtro\r\n                $scope.filterHandler = {\r\n                    changeFilter: function (filter, search, typeFilter) {\r\n                        $scope.search = search;\r\n                        $scope.filter.typeFilter = typeFilter;\r\n                    }\r\n                };\r\n\r\n                // Controlador de las custom actions del widget\r\n                $scope.widgetActionsHandler = {\r\n                    actions: [],\r\n                    setActions: function (actions) {\r\n                        $scope.widgetActionsHandler.actions = actions;\r\n                    }\r\n                };\r\n\r\n                var adfDashboardCollapseExpand = $scope.$on('adfDashboardCollapseExpand', function (event, args) {\r\n                    $scope.widgetState.isCollapsed = args.collapseExpandStatus;\r\n                });\r\n\r\n                var adfWidgetEnterEditMode = $scope.$on('adfWidgetEnterEditMode', function (event, widget) {\r\n                    if (dashboard.idEquals(definition.wid, widget.wid)) {\r\n                        $scope.edit();\r\n                    }\r\n                });\r\n\r\n                var adfIsEditMode = $scope.$on('adfIsEditMode', function (event, widget) {\r\n                    $scope.editing = true;\r\n                });\r\n\r\n                var adfDashboardChanged = $scope.$on('adfDashboardChanged', function (event, widget) {\r\n                    $scope.editing = false;\r\n                });\r\n\r\n                var adfDashboardEditsCancelled = $scope.$on('adfDashboardEditsCancelled', function (event, widget) {\r\n                    $scope.editing = false;\r\n                });\r\n\r\n                $scope.openFullScreen = function () {\r\n\r\n                    $scope.$emit('adfOpenModalWidgetFromOther', definition.type, $scope.config);\r\n                };\r\n\r\n                $scope.openAboutScreen = function (size) {\r\n                    size = 'md';\r\n                    var modalInstance = $uibModal.open({\r\n                        animation: true,\r\n                        templateUrl: 'widgetAboutModal.html',\r\n                        controller: [\"$scope\", \"$uibModalInstance\", \"information\", function ($scope, $uibModalInstance, information) {\r\n                            $scope.about = {};\r\n                            $scope.about.info = information;\r\n                            $scope.ok = function () {\r\n                                $uibModalInstance.close();\r\n                            };\r\n                        }],\r\n                        'size': size,\r\n                        resolve: {\r\n                            information: function () {\r\n                                return $scope.config.about;\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    modalInstance.result.then(function (selectedItem) {\r\n                        $scope.selected = selectedItem;\r\n                    }, function () {\r\n                        $log.info('Modal dismissed at: ' + new Date());\r\n                    });\r\n                };\r\n\r\n                $scope.saveWidgetScreen = function (wId) {\r\n                    $scope.$emit('generateSnapshot', {\r\n                        'objectSelector': '.widget_' + wId,\r\n                        'fileName': 'capture_' + new Date().getTime()\r\n                    });\r\n                };\r\n\r\n                var createQuickFilter = function (fieldsQuickSearch) {\r\n                    var _filter = {\r\n                        or: []\r\n                    };\r\n                    var criteria;\r\n                    fieldsQuickSearch.forEach(function (field) {\r\n                        criteria = {};\r\n                        criteria[field.operator] = {};\r\n                        criteria[field.operator][field.name] = $scope.config.filter.value;\r\n                        _filter.or.push(criteria);\r\n                    });\r\n                    return _filter;\r\n                };\r\n\r\n                $scope.downloadCsv = function () {\r\n                    var columns = $scope.config.columns;\r\n                    var scope_filter = $scope.config.filter;\r\n                    var extra_filter;\r\n                    var final_filter = {};\r\n                    var order = $scope.config.sort ? $scope.config.sort : undefined;\r\n                    if ($scope.config.windowFilter) {\r\n                        var window_filter = $scope.config.onWindowTimeChanged($scope.config.windowFilter);\r\n                        if (window_filter && window_filter.and) {\r\n                            extra_filter = {\r\n                                and: window_filter.and\r\n                            };\r\n                        }\r\n                    }\r\n                    var filter;\r\n                    if (scope_filter.type && scope_filter.type === 'advanced' && scope_filter.value.length > 4) {\r\n                        filter = JSON.parse(scope_filter.value);\r\n                    } else if (scope_filter.type && scope_filter.type === 'basic' && scope_filter.value.trim() !== '') {\r\n                        filter = createQuickFilter($scope.config.fieldsQuickSearch, scope_filter.value);\r\n                    }\r\n                    if (extra_filter) {\r\n                        if (filter) {\r\n                            final_filter = {\r\n                                and: [extra_filter, filter]\r\n                            };\r\n                        } else {\r\n                            final_filter = extra_filter;\r\n                        }\r\n                    } else {\r\n                        final_filter = filter;\r\n                    }\r\n                    $scope.$broadcast('downloadCsv', {\r\n                        'columns': columns,\r\n                        'filter': final_filter,\r\n                        'order': order\r\n                    });\r\n                };\r\n\r\n                $scope.generateQR = function () {\r\n                    $scope.$broadcast('generateQR');\r\n                };\r\n\r\n                var addItemToSelection = $scope.$on('addItemToSelection', function (event, item) {\r\n                    if (!$scope.selectedItems[item.key]) {\r\n                        $scope.selectedItems[item.key] = {\r\n                            data: item.data,\r\n                            visible: item.visible\r\n                        };\r\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n                        item.isSelected = true;\r\n                        $scope.selectionManager.lastItem = item;\r\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n                    }\r\n\r\n                });\r\n\r\n                var removeItemFromSelection = $scope.$on('removeItemFromSelection', function (event, item) {\r\n                    if ($scope.selectedItems[item.key]) {\r\n                        delete $scope.selectedItems[item.key];\r\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n                        item.isSelected = false;\r\n                        $scope.selectionManager.lastItem = item;\r\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n                    }\r\n                });\r\n\r\n                // bind reload function\r\n                var stopReloadTimeout;\r\n\r\n                $scope.setReloadTimeout = function () {\r\n                    var config = $scope.config || $scope.definition.config;\r\n\r\n                    if (config) {\r\n                        var reloadPeriod = config.reloadPeriod;\r\n                        if (!isNaN(reloadPeriod) && (reloadPeriod * 1) !== 0) {\r\n                            if (angular.isDefined(stopReloadTimeout)) {\r\n                                $interval.cancel(stopReloadTimeout);\r\n                                stopReloadTimeout = undefined;\r\n                            }\r\n                            stopReloadTimeout = $interval($scope.reload, (reloadPeriod * 1000));\r\n                        } else if (stopReloadTimeout) {\r\n                            $interval.cancel(stopReloadTimeout);\r\n                        }\r\n                    }\r\n                };\r\n\r\n                $scope.reload = function (completeReload) {\r\n                    if (completeReload) {\r\n                        $scope.$broadcast('widgetReload', completeReload);\r\n                    } else {\r\n                        $scope.$broadcast('widgetReload');\r\n                    }\r\n\r\n                    $scope.setReloadTimeout();\r\n                };\r\n\r\n                // verificacion de periodo de refresco\r\n                $scope.setReloadTimeout();\r\n\r\n                $scope.$on('$destroy', function () {\r\n                    adfDashboardCollapseExpand();\r\n                    adfWidgetEnterEditMode();\r\n                    adfIsEditMode();\r\n                    adfDashboardChanged();\r\n                    adfDashboardEditsCancelled();\r\n                    addItemToSelection();\r\n                    removeItemFromSelection();\r\n                    $interval.cancel(stopReloadTimeout);\r\n                });\r\n            }],\r\n            compile: function () {\r\n\r\n                /**\r\n                 * use pre link, because link of widget-content\r\n                 * is executed before post link widget\r\n                 */\r\n                return {\r\n                    pre: preLink,\r\n                    post: postLink\r\n                };\r\n            }\r\n        };\r\n\r\n    }]);\n\r\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n/**\r\n * The widget service provide helper functions to render widgets and their content.\r\n */\r\nangular.module('adf')\r\n  .factory('widgetService', [\"$http\", \"$q\", \"$sce\", \"$templateCache\", \"dashboard\", function($http, $q, $sce, $templateCache, dashboard) {\r\n    \r\n\r\n    function parseUrl(url) {\r\n      var parsedUrl = url;\r\n      if (url.indexOf('{widgetsPath}') >= 0) {\r\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\r\n                .replace('//', '/');\r\n        if (parsedUrl.indexOf('/') === 0) {\r\n          parsedUrl = parsedUrl.substring(1);\r\n        }\r\n      }\r\n      return parsedUrl;\r\n    }\r\n\r\n    var exposed = {};\r\n\r\n    exposed.getTemplate = function(widget){\r\n      var deferred = $q.defer();\r\n\r\n      if (widget.template) {\r\n        deferred.resolve(widget.template);\r\n      } else if (widget.templateUrl) {\r\n        // try to fetch template from cache\r\n        var tpl = $templateCache.get(widget.templateUrl);\r\n        if (tpl) {\r\n          deferred.resolve(tpl);\r\n        } else {\r\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\r\n          $http.get(url)\r\n               .success(function(response) {\r\n                 // put response to cache, with unmodified url as key\r\n                 $templateCache.put(widget.templateUrl, response);\r\n                 deferred.resolve(response);\r\n               })\r\n               .error(function() {\r\n                 deferred.reject('could not load template');\r\n               });\r\n        }\r\n      }\r\n\r\n      return deferred.promise;\r\n    };\r\n\r\n    return exposed;\r\n  }]);\r\n\n})(window);","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('adf')\r\n    .directive('adfWidgetContent', function ($log, $q, widgetService,\r\n        $compile, $controller, $injector, dashboard, $translate) {\r\n\r\n        function renderError($element, msg) {\r\n            $log.warn(msg);\r\n            $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\r\n        }\r\n\r\n        function compileWidget($scope, $element, currentScope, configChanged) {\r\n            var model = $scope.model;\r\n            if (!model) {\r\n                $translate('ADF.ERROR.MODEL_IS_UNDEFINED').then(function (translateMessage) {\r\n                    renderError($element, translateMessage);\r\n                });\r\n                return currentScope;\r\n            }\r\n\r\n            var content = $scope.content;\r\n\r\n            if (!content) {\r\n                $translate('ADF.ERROR.WIDGET_FOR_DEPRECTATED', {\r\n                    title: model.title\r\n                }).then(function (translateMessage) {\r\n                    renderError($element, translateMessage);\r\n                });\r\n                return currentScope;\r\n            }\r\n\r\n            var extra = $scope.extra;\r\n            var newScope = currentScope;\r\n\r\n            if (newScope) {\r\n                var is_menu = newScope.menu !== undefined && newScope.menu !== null && (!newScope.isPaginationEnable || !newScope.isPaginationEnable());\r\n                if (is_menu || configChanged || !angular.isFunction(newScope.reloadData)) {\r\n                    if ($scope.navOptionsHandler) {\r\n                        $scope.navOptionsHandler.firstLoad = true;\r\n                    }\r\n                    newScope = renderWidget($scope, $element, currentScope, model, content, extra);\r\n                } else {\r\n                    var is_itemsPerPage = newScope.itemsPerPage !== undefined && newScope.itemsPerPage !== null;\r\n                    if (is_itemsPerPage || newScope.page) {\r\n                        newScope.page = 1;\r\n                    }\r\n                    newScope.reloadData();\r\n                }\r\n            } else {\r\n                if ($scope.navOptionsHandler) {\r\n                    $scope.navOptionsHandler.firstLoad = true;\r\n                }\r\n\r\n                newScope = renderWidget($scope, $element, currentScope, model, content, extra);\r\n            }\r\n\r\n            function _getWindowTime(type) {\r\n                if (type === 'custom') {\r\n                    return {\r\n                        from: newScope.config.windowFilter.from,\r\n                        to: newScope.config.windowFilter.to\r\n                    };\r\n                }\r\n                var from = window.moment().subtract(1, type);\r\n                return {\r\n                    from: from._d\r\n                };\r\n            }\r\n\r\n\r\n            if (newScope.config) {\r\n                newScope.config.getWindowTime = function () {\r\n                    var windowFilter = newScope.config.windowFilter;\r\n                    if (windowFilter && windowFilter.type) {\r\n                        var winTime = _getWindowTime(windowFilter.type);\r\n                        /* jshint ignore:start */\r\n                        if (!window.eval(newScope.config.windowFilter.rawdate)) {\r\n                            for (var key in winTime) {\r\n                                winTime[key] = window.moment(winTime[key]).format();\r\n                            }\r\n                            winTime['rawdate'] = true;\r\n                        }\r\n                        /* jshint ignore:end */\r\n                        return winTime;\r\n                    }\r\n                };\r\n            }\r\n\r\n            if (extra) {\r\n                newScope.editing = extra.editing ? true : false;\r\n                newScope.extraData = extra;\r\n            }\r\n\r\n            return newScope;\r\n        }\r\n\r\n        function renderWidget($scope, $element, currentScope, model, content, extra) {\r\n            // display loading template\r\n            $element.html(dashboard.loadingTemplate);\r\n\r\n            // create new scope\r\n            var templateScope = $scope.$new();\r\n\r\n            // pass config object to scope\r\n            if (!model.config) {\r\n                model.config = {};\r\n            }\r\n\r\n            templateScope.config = model.config;\r\n            templateScope.editing = extra && extra.editing;\r\n\r\n            if (extra) {\r\n                templateScope.extra = extra;\r\n            }\r\n\r\n            var _from = currentScope || templateScope.config;\r\n            templateScope.selectionManager = (_from) ? _from.selectionManager : undefined;\r\n\r\n            // local injections\r\n            var base = {\r\n                $scope: templateScope,\r\n                widget: model,\r\n                config: model.config\r\n            };\r\n\r\n            // get resolve promises from content object\r\n            var resolvers = {};\r\n            resolvers.$tpl = widgetService.getTemplate(content);\r\n            if (content.resolve) {\r\n                angular.forEach(content.resolve, function (promise, key) {\r\n                    if (angular.isString(promise)) {\r\n                        resolvers[key] = $injector.get(promise);\r\n                    } else {\r\n                        resolvers[key] = $injector.invoke(promise, promise, base);\r\n                    }\r\n                });\r\n            }\r\n\r\n            // resolve all resolvers\r\n            $q.all(resolvers).then(function (locals) {\r\n                angular.extend(locals, base);\r\n\r\n                // pass resolve map to template scope as defined in resolveAs\r\n                if (content.resolveAs) {\r\n                    templateScope[content.resolveAs] = locals;\r\n                }\r\n\r\n                // compile & render template\r\n                var template = locals.$tpl;\r\n                $element.html(template);\r\n                if (content.controller) {\r\n                    var templateCtrl = $controller(content.controller, locals);\r\n                    if (content.controllerAs) {\r\n                        templateScope[content.controllerAs] = templateCtrl;\r\n                    }\r\n                    $element.children().data('$ngControllerController', templateCtrl);\r\n                }\r\n                $compile($element.contents())(templateScope);\r\n            }, function (reason) {\r\n                // handle promise rejection\r\n                var msg = 'ADF.ERROR.COULD_NOT_RESOLVE_ALL_PROMISSES';\r\n                $translate(msg, {\r\n                    reason: (reason ? ': ' + reason : reason)\r\n                }).then(function (translateMessage) {\r\n                    renderError($element, translateMessage);\r\n                });\r\n            });\r\n\r\n            // destroy old scope\r\n            if (currentScope) {\r\n                currentScope.$destroy();\r\n            }\r\n\r\n            return templateScope;\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            require: '?^^adfWidgetGrid',\r\n            scope: {\r\n                model: '=',\r\n                content: '=',\r\n                extra: '=',\r\n                navOptionsHandler: '=?',\r\n                filterHandler: '=?',\r\n                widgetActionsHandler: '=?'\r\n            },\r\n            link: function ($scope, $element, attrs, adfWidgetGridCtrl) {\r\n\r\n\r\n                var currentScope = compileWidget($scope, $element, null);\r\n                if (adfWidgetGridCtrl)\r\n                    adfWidgetGridCtrl.updateWidgetFilters();\r\n                var widgetConfigChangedEvt = $scope.$on('widgetConfigChanged', function () {\r\n                    currentScope = compileWidget($scope, $element, currentScope, true);\r\n                });\r\n\r\n                var widgetReloadEvt = $scope.$on('widgetReload', function (reloadWidgets) {\r\n                    var reloadWidget = true;\r\n                    if (reloadWidgets && reloadWidgets.length > 0) {\r\n                        reloadWidget = reloadWidgets.indexOf($scope.model.wid) !== -1;\r\n                    }\r\n                    if (reloadWidget) {\r\n                        currentScope = compileWidget($scope, $element, currentScope, false);\r\n                        if (adfWidgetGridCtrl)\r\n                            adfWidgetGridCtrl.updateWidgetFilters();\r\n                    }\r\n                });\r\n\r\n                $scope.$on('destroy', function () {\r\n                    widgetConfigChangedEvt();\r\n                    widgetReloadEvt();\r\n                });\r\n            }\r\n        };\r\n    });","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('adf')\r\n    .directive('adfWidgetGrid', function ($injector, $q, $log, $uibModal, $rootScope, $interval, dashboard, adfTemplatePath, Filter) {\r\n        function preLink($scope) {\r\n            var definition = $scope.definition;\r\n\r\n            if (definition) {\r\n                var w = dashboard.widgets[definition.type];\r\n                if (w) {\r\n                    // pass title\r\n                    if (!definition.title) {\r\n                        definition.title = w.title;\r\n                    }\r\n\r\n                    definition.titleTemplateUrl = adfTemplatePath + 'widget-grid-title.html';\r\n\r\n                    if (!definition.editTemplateUrl) {\r\n                        definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\r\n                        if (w.editTemplateUrl) {\r\n                            definition.editTemplateUrl = w.editTemplateUrl;\r\n                        }\r\n                    }\r\n\r\n                    if (!definition.titleTemplateUrl) {\r\n                        definition.frameless = w.frameless;\r\n                    }\r\n\r\n                    if (!definition.styleClass) {\r\n                        definition.styleClass = w.styleClass;\r\n                    }\r\n\r\n                    // set id for sortable\r\n                    if (!definition.wid) {\r\n                        definition.wid = dashboard.id();\r\n                    }\r\n\r\n                    // pass copy of widget to scope\r\n                    $scope.widget = angular.copy(w);\r\n\r\n                    // create config object\r\n                    var config = definition.config;\r\n                    if (config) {\r\n                        if (angular.isString(config)) {\r\n                            config = angular.fromJson(config);\r\n                        }\r\n                    } else {\r\n                        config = {};\r\n                    }\r\n\r\n                    if (typeof $scope.widget.show_modal_footer === 'undefined') {\r\n                        $scope.widget.show_modal_footer = true;\r\n                    }\r\n\r\n                    if (typeof $scope.widget.show_reload_config === 'undefined') {\r\n                        $scope.widget.show_reload_config = true;\r\n                    }\r\n\r\n                    // pass config to scope\r\n                    $scope.config = config;\r\n\r\n                    // collapse exposed $scope.widgetState property\r\n                    if (!$scope.widgetState) {\r\n                        $scope.widgetState = {};\r\n                        $scope.widgetState.isCollapsed = (w.collapsed === true) ? w.collapsed : false;\r\n                    }\r\n\r\n                } else {\r\n                    $log.warn('could not find widget ' + definition.type);\r\n                }\r\n            } else {\r\n                $log.debug('definition not specified, widget was probably removed');\r\n            }\r\n        }\r\n\r\n        function postLink($scope, $element) {\r\n            var definition = $scope.definition;\r\n            if (!definition) {\r\n                $log.debug('widget not found');\r\n                return;\r\n            }\r\n            if (!$scope.config) {\r\n                $scope.config = {};\r\n            }\r\n\r\n            var config = $scope.config;\r\n\r\n            // bind close function\r\n            var deleteWidget = function () {\r\n                $element.remove();\r\n                $rootScope.$broadcast('adfWidgetRemovedFromGrid', definition);\r\n            };\r\n\r\n            $scope.remove = function () {\r\n                if ($scope.options.enableConfirmDelete) {\r\n                    var deleteScope = $scope.$new();\r\n\r\n                    var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\r\n                    if (definition.deleteTemplateUrl) {\r\n                        deleteTemplateUrl = definition.deleteTemplateUrl;\r\n                    }\r\n                    var opts = {\r\n                        scope: deleteScope,\r\n                        templateUrl: deleteTemplateUrl,\r\n                        backdrop: 'static'\r\n                    };\r\n                    var instance = $uibModal.open(opts);\r\n\r\n                    deleteScope.closeDialog = function () {\r\n                        instance.close();\r\n                        deleteScope.$destroy();\r\n                    };\r\n                    deleteScope.deleteDialog = function () {\r\n                        deleteWidget();\r\n                        deleteScope.closeDialog();\r\n                    };\r\n                } else {\r\n                    deleteWidget();\r\n                }\r\n            };\r\n\r\n\r\n            $scope.print = function () {\r\n                if (!$scope.editMode) {\r\n                    $scope.$broadcast('widgetPrint');\r\n                }\r\n            };\r\n\r\n            $scope.isExecuteOperationEnabled = function () {\r\n\r\n                if (config.entityKey)\r\n                    return true;\r\n                var filter = config.filter;\r\n                if (filter && filter.type === \"basic\") {\r\n                    return filter.length > 0;\r\n                }\r\n                if (filter && filter.type === \"advanced\") {\r\n                    return filter.value.length > 2 && filter.oql;\r\n                }\r\n                return false;\r\n            };\r\n\r\n            $scope.executeOperation = function () {\r\n                if (!$scope.editMode) {\r\n\r\n                    $scope.$parent.$broadcast('widgetExecuteOperation');\r\n                }\r\n            };\r\n\r\n            $scope.filter = {\r\n                typeFilter: 1,\r\n                showFilter: false,\r\n                showFinalFilter: false\r\n            };\r\n\r\n            var filter = config.filter;\r\n            if (filter && filter.type === 'advanced' && filter.oql && filter.oql.length > 2) {\r\n                $scope.search = {\r\n                    oql: filter.oql,\r\n                    json: filter.value\r\n                };\r\n                $scope.toggleAdvanced = 0;\r\n            } else if (filter && filter.type === 'basic') {\r\n                $scope.search = {\r\n                    quick: filter.value\r\n                };\r\n                $scope.toggleAdvanced = 1;\r\n            } else if (typeof filter === \"object\" && filter.fields) {\r\n                $scope.search = {\r\n                    customFilter: filter.fields\r\n                };\r\n                $scope.search.fields = [];\r\n                angular.forEach(filter.fields, function (v, key) {\r\n                    $scope.search.fields.push(v.name);\r\n                });\r\n                $scope.toggleAdvanced = 2;\r\n            } else {\r\n                $scope.search = {\r\n                    quick: filter = ''\r\n                };\r\n            }\r\n\r\n            $scope.launchSearching = function () {\r\n                var widget = {\r\n                    definition: definition,\r\n                    element: $element\r\n                };\r\n\r\n                $rootScope.$broadcast('adfLaunchSearchingFromWidget', widget, $scope.config.filter);\r\n                $scope.reload(true);\r\n            };\r\n\r\n\r\n            $scope.launchSearchingAdv = function () {\r\n                if (!$scope.filterApplied) {\r\n                    $scope.search.quick = '';\r\n                    if ($scope.search.json === '' || $scope.search.json === '{}' || (!angular.isString($scope.search.json) && Object.keys($scope.search.json).length === 0)) {\r\n                        $scope.config.filter = {\r\n                            oql: '',\r\n                            value: ''\r\n                        };\r\n                    } else {\r\n                        $scope.config.filter = {\r\n                            type: 'advanced',\r\n                            oql: $scope.search.oql,\r\n                            value: $scope.search.json\r\n                        };\r\n                    }\r\n                    $scope.launchSearching();\r\n                    $scope.filterApplied = true;\r\n                }\r\n            };\r\n\r\n            $scope.launchSearchingQuick = function () {\r\n                if (!$scope.filterApplied) {\r\n                    $scope.search.oql = $scope.search.json = '';\r\n                    $scope.config.filter = {\r\n                        type: 'basic',\r\n                        value: $scope.search.quick\r\n                    };\r\n                    $scope.launchSearching();\r\n                    $scope.filterApplied = true;\r\n                }\r\n            };\r\n\r\n            $scope.launchSearchingShared = function () {\r\n                if (!$scope.filterApplied) {\r\n                    var shared = $scope.search.id;\r\n                    if (shared) {\r\n                        shared.filter.id = shared.wid;\r\n                        $scope.config.filter = shared.filter;\r\n                    } else {\r\n                        $scope.config.filter = {};\r\n                    }\r\n                    $scope.launchSearching();\r\n                    $scope.filterApplied = true;\r\n                }\r\n            };\r\n\r\n            $scope.filterSharedSelect = function ($item, $model) {\r\n                $scope.filterApplied = false;\r\n            };\r\n            $scope.filterSharedRemove = function ($item, $model) {\r\n                $scope.filterApplied = false;\r\n            };\r\n\r\n            var windowTimeChanged = $scope.$on('onWindowTimeChanged', function (event, timeObj) {\r\n                $scope.config.windowFilter = timeObj ? timeObj : (config.windowFilter ? {} : timeObj);\r\n                var widget = {\r\n                    definition: definition,\r\n                    element: $element\r\n                };\r\n                $rootScope.$broadcast('adfWindowTimeChangedFromWidget', widget, $scope.config.windowFilter);\r\n                $scope.reload();\r\n            });\r\n\r\n            $scope.enter = function (event) {\r\n                var keycode = (event.keyCode ? event.keyCode : event.which);\r\n                if (keycode === 13) {\r\n                    if ($scope.filter.typeFilter === 0)\r\n                        $scope.launchSearchingAdv();\r\n                    if ($scope.filter.typeFilter === 1)\r\n                        $scope.launchSearchingQuick();\r\n\r\n                } else if (keycode === 19) {\r\n                    $scope.filter.showFinalFilter = !$scope.filter.showFinalFilter;\r\n                } else {\r\n                    $scope.filterApplied = false;\r\n                }\r\n            };\r\n\r\n\r\n            $scope.customSelectors = [];\r\n            $scope.getCustomSelectors = function () {\r\n                if ($scope.config.customSelectors) {\r\n                    $scope.customSelectors = $scope.config.customSelectors;\r\n                } else {\r\n                    config.widgetSelectors().findFields('').then(function (fields) {\r\n                        $scope.customSelectors = fields;\r\n                        $scope.$apply();\r\n                    }).catch(function (err) {\r\n                        $log.error(err);\r\n                    });\r\n                }\r\n            };\r\n\r\n            $scope.changeDirection = function () {\r\n                var direction = config.sort.direction;\r\n                if (direction === 'DESCENDING') {\r\n                    $scope.config.sort.direction = 'ASCENDING';\r\n                } else if (direction === 'ASCENDING') {\r\n                    $scope.config.sort.direction = 'DESCENDING';\r\n                }\r\n                $scope.reload();\r\n            };\r\n\r\n            $scope.debugQuery = function () {\r\n                Filter.parseQuery($scope.search.oql || '')\r\n                    .then(function (data) {\r\n                        //$scope.elementos = data;\r\n                        $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\r\n                        $scope.unknownWords = '';\r\n                        $scope.filter_error = null;\r\n                    })\r\n                    .catch(function (err) {\r\n                        $scope.filter_error = err;\r\n                        // Tratar el error\r\n                    });\r\n\r\n            };\r\n\r\n            $scope.autocomplete_options = function () {\r\n                var autocomplete_options = {\r\n                    suggest: Filter.suggest_field_delimited,\r\n                    customSelectors: config.widgetSelectors()\r\n                };\r\n\r\n                return autocomplete_options;\r\n\r\n            };\r\n\r\n            // Multiple selection\r\n            $scope.selectedItems = definition.selectedItems || {};\r\n\r\n            // Gestor de seleccion\r\n            $scope.selectionManager = {\r\n                currentSelection: $scope.selectedItems,\r\n                isSelected: function (key, obj) {\r\n                    if ($scope.selectedItems[key] && !angular.isUndefined(obj)) {\r\n                        selectedItems[key].data = obj;\r\n                    }\r\n\r\n                    return $scope.selectedItems[key] ? true : false;\r\n                },\r\n                totalSelected: function () {\r\n                    return Object.keys($scope.selectedItems).length;\r\n                }\r\n            };\r\n\r\n            if (definition.config.sendSelection) {\r\n\r\n                $scope.sendEntities = function () {\r\n                    definition.config.sendSelection($scope.selectedItems);\r\n                    $scope.$parent.closeDialog();\r\n                };\r\n\r\n                if (definition.config.selectedItems) {\r\n                    $scope.selectedItems = angular.copy(definition.config.selectedItems);\r\n                }\r\n\r\n                $scope.config.selectionManager = $scope.selectionManager;\r\n            }\r\n\r\n            $scope.manageSelectedItems = function () {\r\n                var selectionScope = $scope.$new();\r\n\r\n                if (definition.config.sendSelection) {\r\n                    delete config.selectionConfig.operationTypes;\r\n                    delete config.selectionConfig.filterTypes;\r\n                }\r\n\r\n                selectionScope.selectionConfig = config.selectionConfig;\r\n\r\n                selectionScope.selectedItems = [];\r\n                angular.forEach($scope.selectedItems, function (value, key) {\r\n                    selectionScope.selectedItems.push({\r\n                        key: key,\r\n                        value: value\r\n                    });\r\n                });\r\n\r\n                selectionScope.currentSelection = {\r\n                    selected: selectionScope.selectedItems\r\n                };\r\n\r\n                var manageItemsSelectedTemplate = adfTemplatePath + 'widget-selection.html';\r\n                var opts = {\r\n                    scope: selectionScope,\r\n                    templateUrl: manageItemsSelectedTemplate,\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    animation: true\r\n                };\r\n\r\n                var instance = $uibModal.open(opts);\r\n\r\n                selectionScope.restoreSelection = function () {\r\n                    selectionScope.currentSelection = {\r\n                        selected: selectionScope.selectedItems\r\n                    };\r\n                };\r\n\r\n                selectionScope.clearSelection = function () {\r\n                    selectionScope.currentSelection.selected = [];\r\n                };\r\n\r\n                // Cierra sy guarda los datos de nueva selección\r\n                selectionScope.applyFilter = function (type) {\r\n                    var customOql = selectionScope.selectionConfig.filterAction(selectionScope.currentSelection.selected, type);\r\n\r\n                    if (!angular.isUndefined(customOql) && customOql !== null) {\r\n                        $scope.filter.typeFilter = 0;\r\n                        Filter.parseQuery(customOql).then(function (data) {\r\n                            $scope.search.oql = customOql;\r\n                            $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\r\n                            $scope.unknownWords = '';\r\n                            $scope.filter_error = null;\r\n\r\n                            $scope.launchSearchingAdv();\r\n                        }).catch(function (err) {\r\n                            $scope.filter_error = err;\r\n                        });\r\n                    }\r\n                };\r\n\r\n                selectionScope.executeOperation = function (operationType) {\r\n                    if (!$scope.editMode) {\r\n                        $scope.$parent.$broadcast('widgetExecuteOperation', {\r\n                            'selectedItems': selectionScope.currentSelection.selected,\r\n                            'type': operationType\r\n                        });\r\n                    }\r\n                };\r\n\r\n                // Cierra sy guarda los datos de nueva selección\r\n                selectionScope.saveChangesDialog = function () {\r\n                    var finalSelection = {};\r\n                    angular.forEach(selectionScope.currentSelection.selected, function (data, idx) {\r\n                        finalSelection[data.key] = {\r\n                            data: data.value.data,\r\n                            visible: data.value.visible\r\n                        };\r\n                    });\r\n\r\n                    $scope.selectedItems = angular.copy(finalSelection);\r\n                    $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n\r\n                    $scope.selectionManager.lastItem = {};\r\n                    $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n\r\n                    instance.close();\r\n                    selectionScope.$destroy();\r\n                };\r\n\r\n                // Cierra sin realizar ninguna acción\r\n                selectionScope.closeDialog = function () {\r\n                    instance.close();\r\n                    selectionScope.$destroy();\r\n                };\r\n            };\r\n\r\n\r\n            // bind edit function\r\n            $scope.edit = function () {\r\n                var editScope = $scope.$new();\r\n                editScope.definition = angular.copy(definition);\r\n\r\n                var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\r\n                if (definition.editTemplateUrl) {\r\n                    adfEditTemplatePath = definition.editTemplateUrl;\r\n                }\r\n\r\n                var opts = {\r\n                    scope: editScope,\r\n                    templateUrl: adfEditTemplatePath,\r\n                    backdrop: 'static',\r\n                    size: 'lg'\r\n                };\r\n\r\n                var instance = $uibModal.open(opts);\r\n\r\n                editScope.closeDialog = function () {\r\n                    instance.close();\r\n                    editScope.$destroy();\r\n                };\r\n\r\n                // TODO create util method\r\n                function createApplyPromise(result) {\r\n                    var promise;\r\n                    if (typeof result === 'boolean') {\r\n                        var deferred = $q.defer();\r\n                        if (result) {\r\n                            deferred.resolve();\r\n                        } else {\r\n                            deferred.reject();\r\n                        }\r\n                        promise = deferred.promise;\r\n                    } else {\r\n                        promise = $q.when(result);\r\n                    }\r\n                    return promise;\r\n                }\r\n\r\n                editScope.saveDialog = function () {\r\n                    // clear validation error\r\n                    editScope.validationError = null;\r\n\r\n                    // build injection locals\r\n                    var widget = $scope.widget;\r\n\r\n                    // create a default apply method for widgets\r\n                    // without edit mode\r\n                    // see issue https://goo.gl/KHPQLZ\r\n                    var applyFn;\r\n                    if (widget.edit) {\r\n                        applyFn = widget.edit.apply;\r\n                    } else {\r\n                        applyFn = function () {\r\n                            return true;\r\n                        };\r\n                    }\r\n\r\n                    // injection locals\r\n                    var locals = {\r\n                        widget: widget,\r\n                        definition: editScope.definition,\r\n                        config: editScope.definition.config\r\n                    };\r\n\r\n                    // invoke apply function and apply if success\r\n                    var result = $injector.invoke(applyFn, applyFn, locals);\r\n                    createApplyPromise(result).then(function () {\r\n                        definition.title = editScope.definition.title;\r\n                        if (editScope.definition.type === 'summaryChart') {\r\n                            editScope.definition.Ftype = editScope.definition.config.type.toLowerCase();\r\n                            definition.Ftype = editScope.definition.config.type.toLowerCase()\r\n                        }\r\n                        angular.extend(definition.config, editScope.definition.config);\r\n\r\n                        editScope.closeDialog();\r\n\r\n                        if (widget.edit && widget.edit.reload) {\r\n                            $scope.setReloadTimeout();\r\n                            // reload content after edit dialog is closed\r\n                            $scope.$broadcast('widgetConfigChanged');\r\n                        }\r\n                    }, function (err) {\r\n                        if (err) {\r\n                            editScope.validationError = err;\r\n                        } else {\r\n                            editScope.validationError = 'VALIDATION_DURING_APPLY_FAILED';\r\n                        }\r\n                    });\r\n                };\r\n\r\n            };\r\n\r\n\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            templateUrl: adfTemplatePath + 'widget-grid.html',\r\n            scope: {\r\n                definition: '=',\r\n                editMode: '=',\r\n                options: '=',\r\n                widgetState: '='\r\n            },\r\n            controller: function ($scope) {\r\n\r\n                var sharedFilters = $scope.sharedFilters = [];\r\n\r\n                this.updateWidgetFilters = function () {\r\n                    var _widgetFilters = $scope.options.extraData.widgetFilters;\r\n                    var model = $scope.definition;\r\n                    var sharedFilters = _widgetFilters.filter(function (widgetFilter) {\r\n                        return widgetFilter.wid !== model.wid && widgetFilter.Ftype === model.Ftype;\r\n                    });\r\n                    $scope.sharedFilters = angular.copy(sharedFilters);\r\n                };\r\n\r\n                var definition = $scope.definition;\r\n\r\n\r\n                if (definition.config.selectedItems) {\r\n                    $scope.selectedItemsLength = Object.keys(definition.config.selectedItems).length;\r\n                }\r\n\r\n\r\n                // Controlador de la barra inferior de los widgets\r\n                $scope.navOptionsHandler = {\r\n                    firstLoad: true,\r\n                    loadingData: false,\r\n                    startLoading: function () {\r\n                        $scope.navOptionsHandler.loadingData = true;\r\n                    },\r\n                    stopLoading: function () {\r\n                        $scope.navOptionsHandler.firstLoad = false;\r\n                        $scope.navOptionsHandler.loadingData = false;\r\n                        $scope.navOptionsHandler.lastMessageTime = new Date();\r\n                    },\r\n                    setStatusMessage: function (message) {\r\n                        $scope.navOptionsHandler.statusMessage = message;\r\n                        $scope.navOptionsHandler.lastMessageTime = new Date();\r\n                    }\r\n                };\r\n\r\n                // Controlador de los parámetros del filtro\r\n                $scope.filterHandler = {\r\n                    changeFilter: function (filter, search, typeFilter) {\r\n                        $scope.search = search;\r\n                        $scope.filter.typeFilter = typeFilter;\r\n                    }\r\n                };\r\n\r\n                // Controlador de las custom actions del widget\r\n                $scope.widgetActionsHandler = {\r\n                    actions: [],\r\n                    setActions: function (actions) {\r\n                        $scope.widgetActionsHandler.actions = actions;\r\n                    }\r\n                };\r\n\r\n                var adfDashboardCollapseExpand = $scope.$on('adfDashboardCollapseExpand', function (event, args) {\r\n                    $scope.widgetState.isCollapsed = args.collapseExpandStatus;\r\n                });\r\n\r\n                var adfWidgetEnterEditMode = $scope.$on('adfWidgetEnterEditMode', function (event, widget) {\r\n                    if (dashboard.idEquals(definition.wid, widget.wid)) {\r\n                        $scope.edit();\r\n                    }\r\n                });\r\n\r\n                var adfIsEditMode = $scope.$on('adfIsEditMode', function (event, widget) {\r\n                    $scope.editing = true;\r\n                });\r\n\r\n                var adfDashboardChanged = $scope.$on('adfDashboardChanged', function (event, widget) {\r\n                    $scope.editing = false;\r\n                });\r\n\r\n                var adfDashboardEditsCancelled = $scope.$on('adfDashboardEditsCancelled', function (event, widget) {\r\n                    $scope.editing = false;\r\n                });\r\n\r\n                $scope.openFullScreen = function () {\r\n\r\n                    $scope.$emit('adfOpenModalWidgetFromOther', definition.type, $scope.config);\r\n                };\r\n\r\n                $scope.openAboutScreen = function (size) {\r\n                    size = 'md';\r\n                    var modalInstance = $uibModal.open({\r\n                        animation: true,\r\n                        templateUrl: 'widgetAboutModal.html',\r\n                        controller: function ($scope, $uibModalInstance, information) {\r\n                            $scope.about = {};\r\n                            $scope.about.info = information;\r\n                            $scope.ok = function () {\r\n                                $uibModalInstance.close();\r\n                            };\r\n                        },\r\n                        'size': size,\r\n                        resolve: {\r\n                            information: function () {\r\n                                return $scope.config.about;\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    modalInstance.result.then(function (selectedItem) {\r\n                        $scope.selected = selectedItem;\r\n                    }, function () {\r\n                        $log.info('Modal dismissed at: ' + new Date());\r\n                    });\r\n                };\r\n\r\n                $scope.saveWidgetScreen = function (wId) {\r\n                    $scope.$emit('generateSnapshot', {\r\n                        'objectSelector': '.widget_' + wId,\r\n                        'fileName': 'capture_' + new Date().getTime()\r\n                    });\r\n                };\r\n\r\n                var createQuickFilter = function (fieldsQuickSearch) {\r\n                    var _filter = {\r\n                        or: []\r\n                    };\r\n                    var criteria;\r\n                    fieldsQuickSearch.forEach(function (field) {\r\n                        criteria = {};\r\n                        criteria[field.operator] = {};\r\n                        criteria[field.operator][field.name] = $scope.config.filter.value;\r\n                        _filter.or.push(criteria);\r\n                    });\r\n                    return _filter;\r\n                };\r\n\r\n                $scope.downloadCsv = function () {\r\n                    var columns = $scope.config.columns;\r\n                    var scope_filter = $scope.config.filter;\r\n                    var extra_filter;\r\n                    var final_filter = {};\r\n                    var order = $scope.config.sort ? $scope.config.sort : undefined;\r\n                    if ($scope.config.windowFilter) {\r\n                        var window_filter = $scope.config.onWindowTimeChanged($scope.config.windowFilter);\r\n                        if (window_filter && window_filter.and) {\r\n                            extra_filter = {\r\n                                and: window_filter.and\r\n                            };\r\n                        }\r\n                    }\r\n                    var filter;\r\n                    if (scope_filter.type && scope_filter.type === 'advanced' && scope_filter.value.length > 4) {\r\n                        filter = JSON.parse(scope_filter.value);\r\n                    } else if (scope_filter.type && scope_filter.type === 'basic' && scope_filter.value.trim() !== '') {\r\n                        filter = createQuickFilter($scope.config.fieldsQuickSearch, scope_filter.value);\r\n                    }\r\n                    if (extra_filter) {\r\n                        if (filter) {\r\n                            final_filter = {\r\n                                and: [extra_filter, filter]\r\n                            };\r\n                        } else {\r\n                            final_filter = extra_filter;\r\n                        }\r\n                    } else {\r\n                        final_filter = filter;\r\n                    }\r\n                    $scope.$broadcast('downloadCsv', {\r\n                        'columns': columns,\r\n                        'filter': final_filter,\r\n                        'order': order\r\n                    });\r\n                };\r\n\r\n                $scope.generateQR = function () {\r\n                    $scope.$broadcast('generateQR');\r\n                };\r\n\r\n                var addItemToSelection = $scope.$on('addItemToSelection', function (event, item) {\r\n                    if (!$scope.selectedItems[item.key]) {\r\n                        $scope.selectedItems[item.key] = {\r\n                            data: item.data,\r\n                            visible: item.visible\r\n                        };\r\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n                        item.isSelected = true;\r\n                        $scope.selectionManager.lastItem = item;\r\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n                    }\r\n\r\n                });\r\n\r\n                var removeItemFromSelection = $scope.$on('removeItemFromSelection', function (event, item) {\r\n                    if ($scope.selectedItems[item.key]) {\r\n                        delete $scope.selectedItems[item.key];\r\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n                        item.isSelected = false;\r\n                        $scope.selectionManager.lastItem = item;\r\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n                    }\r\n                });\r\n\r\n                // bind reload function\r\n                var stopReloadTimeout;\r\n\r\n                $scope.setReloadTimeout = function () {\r\n                    var config = $scope.config || $scope.definition.config;\r\n\r\n                    if (config) {\r\n                        var reloadPeriod = config.reloadPeriod;\r\n                        if (!isNaN(reloadPeriod) && (reloadPeriod * 1) !== 0) {\r\n                            if (angular.isDefined(stopReloadTimeout)) {\r\n                                $interval.cancel(stopReloadTimeout);\r\n                                stopReloadTimeout = undefined;\r\n                            }\r\n                            stopReloadTimeout = $interval($scope.reload, (reloadPeriod * 1000));\r\n                        } else if (stopReloadTimeout) {\r\n                            $interval.cancel(stopReloadTimeout);\r\n                        }\r\n                    }\r\n                };\r\n\r\n                $scope.reload = function (completeReload) {\r\n                    if (completeReload) {\r\n                        $scope.$broadcast('widgetReload', completeReload);\r\n                    } else {\r\n                        $scope.$broadcast('widgetReload');\r\n                    }\r\n\r\n                    $scope.setReloadTimeout();\r\n                };\r\n\r\n                // verificacion de periodo de refresco\r\n                $scope.setReloadTimeout();\r\n\r\n                $scope.$on('$destroy', function () {\r\n                    adfDashboardCollapseExpand();\r\n                    adfWidgetEnterEditMode();\r\n                    adfIsEditMode();\r\n                    adfDashboardChanged();\r\n                    adfDashboardEditsCancelled();\r\n                    addItemToSelection();\r\n                    removeItemFromSelection();\r\n                    $interval.cancel(stopReloadTimeout);\r\n                });\r\n            },\r\n            compile: function () {\r\n\r\n                /**\r\n                 * use pre link, because link of widget-content\r\n                 * is executed before post link widget\r\n                 */\r\n                return {\r\n                    pre: preLink,\r\n                    post: postLink\r\n                };\r\n            }\r\n        };\r\n\r\n    });","\r\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n/**\r\n * The widget service provide helper functions to render widgets and their content.\r\n */\r\nangular.module('adf')\r\n  .factory('widgetService', function($http, $q, $sce, $templateCache, dashboard) {\r\n    'use strict';\r\n\r\n    function parseUrl(url) {\r\n      var parsedUrl = url;\r\n      if (url.indexOf('{widgetsPath}') >= 0) {\r\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\r\n                .replace('//', '/');\r\n        if (parsedUrl.indexOf('/') === 0) {\r\n          parsedUrl = parsedUrl.substring(1);\r\n        }\r\n      }\r\n      return parsedUrl;\r\n    }\r\n\r\n    var exposed = {};\r\n\r\n    exposed.getTemplate = function(widget){\r\n      var deferred = $q.defer();\r\n\r\n      if (widget.template) {\r\n        deferred.resolve(widget.template);\r\n      } else if (widget.templateUrl) {\r\n        // try to fetch template from cache\r\n        var tpl = $templateCache.get(widget.templateUrl);\r\n        if (tpl) {\r\n          deferred.resolve(tpl);\r\n        } else {\r\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\r\n          $http.get(url)\r\n               .success(function(response) {\r\n                 // put response to cache, with unmodified url as key\r\n                 $templateCache.put(widget.templateUrl, response);\r\n                 deferred.resolve(response);\r\n               })\r\n               .error(function() {\r\n                 deferred.reject('could not load template');\r\n               });\r\n        }\r\n      }\r\n\r\n      return deferred.promise;\r\n    };\r\n\r\n    return exposed;\r\n  });\r\n"]}