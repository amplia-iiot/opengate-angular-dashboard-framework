{"version":3,"sources":["adf.js","adf.locale.js","column.js","dashboard.js","locale-constant.js","order-by-object-key.js","provider.js","opengate-angular-dashboard-framework.min.js","row.js","structure-preview.js","widget-content.js","widget-service.js","widget.js"],"names":["window","undefined","angular","module","value","directive","$log","$compile","$rootScope","adfTemplatePath","rowTemplate","dashboard","moveWidgetInColumn","$scope","column","evt","widgets","$apply","splice","newIndex","oldIndex","$broadcast","findWidget","index","widget","i","length","w","idEquals","wid","findColumn","model","rows","r","j","columns","c","cid","getId","el","id","getAttribute","addWidgetToColumn","targetColumn","from","sourceColumn","item","warn","removeWidgetFromColumn","applySortable","$element","sortable","Sortable","create","group","handle","ghostClass","animation","onAdd","onRemove","onUpdate","on","destroy","restrict","replace","scope","editMode","continuousEditMode","adfModel","options","templateUrl","link","col","isDefined","isArray","cloned","append","$timeout","$uibModal","$faIcons","stringToBoolean","string","toLowerCase","Boolean","copyWidgets","source","target","shift","push","fillStructure","root","counter","forEach","row","isUndefined","readColumns","changeStructure","structure","copy","createConfiguration","type","cfg","config","createWidget","wdgt","findFirstWidgetColumn","error","addNewWidgetToModel","name","forceToSave","unshift","isEditModeImmediate","edit","immediate","openEditMode","split","object","size","arr","key","createCategories","categories","category","transclude","collapsible","editable","maximizable","adfWidgetFilter","hideButtons","extraData","controller","getNewModalScope","$new","translate","widgetFilter","structureName","$watch","oldVal","newVal","structures","title","titleTemplateUrl","editClass","deleteDashboard","dashData","toggleEditMode","openConfigWindow","modelCopy","editDashboardDialog","saveTemporalDashboard","temporal","adfToggleEditMode","$on","event","isNewDashboard","adfCancelEditMode","cancelEditMode","collapseAll","collapseExpandStatus","adfEditDashboardDialog","adfLaunchSearchingFromWidget","configFilter","adfWindowTimeChangedFromWidget","windowFilter","editDashboardScope","description","icon","availableIcons","list","adfEditTemplatePath","editTemplateUrl","instance","open","backdrop","keyboard","info","closeDialog","close","$destroy","adfOpenWidgetFromOther","internal_config","_config","merge","adfOpenModalWidgetFromOther","widgetType","fullScreenScope","definition","opts","modalSize","windowClass","persistDashboard","this","$parent","adfAddWidgetDialog","addWidgetDialog","addScope","isFunction","adfAddTemplatePath","addTemplateUrl","addWidget","$attr","enableConfirmDelete","editing","constant","defaultLocale","frameworkLocales","en-GB","ADF_COMMON_CLOSE","ADF_COMMON_DELETE","ADF_COMMON_TITLE","ADF_COMMON_DESCRIPTION","ADF_COMMON_CANCEL","ADF_COMMON_APPLY","ADF_COMMON_EDIT_DASHBOARD","ADF_EDIT_DASHBOARD_STRUCTURE_LABEL","ADF_DASHBOARD_TITLE_TOOLTIP_ADD","ADF_DASHBOARD_TITLE_TOOLTIP_SAVE","ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE","ADF_DASHBOARD_TITLE_TOOLTIP_UNDO","ADF_WIDGET_ADD_HEADER","ADF_WIDGET_DELETE_CONFIRM_MESSAGE","ADF_WIDGET_TOOLTIP_REFRESH","ADF_WIDGET_TOOLTIP_PRINT","ADF_WIDGET_TOOLTIP_FILTER","ADF_WIDGET_TOOLTIP_SORT","ADF_WIDGET_TOOLTIP_MOVE","ADF_WIDGET_TOOLTIP_COLLAPSE","ADF_WIDGET_TOOLTIP_EXPAND","ADF_WIDGET_TOOLTIP_EDIT","ADF_WIDGET_TOOLTIP_FULLSCREEN","ADF_WIDGET_TOOLTIP_REMOVE","ADF_WIDGET_TOOLTIP_OPERATION","ADF_WIDGET_TOOLTIP_SELECTION","ADF_WIDGET_CLEAR","ADF_WIDGET_RESTORE","ADF_WIDGET_FILTER","sv-SE","filter","$filter","array","objectKey","provider","adfLocale","getLocales","locales","getActiveLocale","activeLocale","label","translation","widgetsPath","messageTemplate","loadingTemplate","customWidgetTemplatePath","defaultApplyFunction","extend","reload","frameless","apply","path","template","templatePath","setLocale","locale","Error","addLocale","translations","isString","isObject","$get","Date","getTime","other","toString","columnTemplate","adjustRowHeight","container","height","style","prepareStructure","preview","selected","$q","widgetService","$controller","$injector","renderError","msg","html","compileWidget","currentScope","configChanged","_getWindowTime","newScope","to","moment","subtract","_d","content","extra","is_menu","menu","is_itemsPerPage","itemsPerPage","reloadData","renderWidget","getWindowTime","winTime","eval","rawdate","format","templateScope","selectionManager","base","resolvers","$tpl","getTemplate","resolve","promise","get","invoke","all","then","locals","resolveAs","templateCtrl","controllerAs","children","data","contents","reason","widgetConfigChangedEvt","widgetReloadEvt","factory","$http","$sce","$templateCache","parseUrl","url","parsedUrl","indexOf","substring","exposed","deferred","defer","tpl","getTrustedResourceUrl","success","response","put","reject","$interval","Filter","preLink","styleClass","fromJson","reloadPeriod","show_modal_footer","show_reload_config","widgetState","isCollapsed","collapsed","debug","postLink","_setReloadTimeout","stopReloadTimeout","cancel","deleteWidget","remove","deleteScope","deleteTemplateUrl","deleteDialog","print","isExecuteOperationEnabled","entityKey","oql","executeOperation","completeReload","sort","direction","toggleAdvanced","search","json","quick","fields","customFilter","v","toggleFilter","advanced","filterAvailable","showFilter","showFinalFilter","launchSearching","element","addCustomFilter","launchCustomFilter","and","like","JSON","stringify","deleteFilter","launchSearchingAdv","Object","keys","applyFilter","launchSearchingQuick","timeObj","enter","keycode","keyCode","which","customSelectors","getCustomSelectors","widgetSelectors","findFields","err","getcustomFilter","ifCustomFilter","showCustomFields","changeDirection","debugQuery","parseQuery","toJson","unknownWords","autocomplete_options","suggest","suggest_field_delimited","selectedItems","currentSelection","isSelected","obj","totalSelected","manageSelectedItems","selectionScope","selectionConfig","manageItemsSelectedTemplate","restoreSelection","clearSelection","customOql","filterAction","operationType","saveChangesDialog","finalSelection","idx","visible","selectedItemsLength","lastItem","createApplyPromise","result","when","editScope","saveDialog","validationError","applyFn","adfDashboardCollapseExpand","args","adfWidgetEnterEditMode","adfIsEditMode","adfDashboardChanged","adfDashboardEditsCancelled","widgetClasses","classes","openFullScreen","openFilter","openAboutScreen","modalInstance","$uibModalInstance","information","about","ok","selectedItem","saveWidgetScreen","wId","$emit","objectSelector","fileName","onWindowTimeChanged","gt","operationDate","lt","createQuickFilter","fieldsQuickSearch","criteria","_filter","or","field","operator","downloadCsv","extra_filter","scope_filter","final_filter","order","window_filter","parse","trim","addItemToSelection","removeItemFromSelection","compile","pre","post"],"mappings":"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","file":"opengate-angular-dashboard-framework.min.js","sourcesContent":["/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('adf', ['adf.provider', 'adf.locale', 'ui.bootstrap', 'opengate-angular-js'])\r\n    .value('adfTemplatePath', '../src/templates/')\r\n    .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\r\n    .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\r\n    .value('adfVersion', '<<adfVersion>>');","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('adf.locale', [])\r\n","/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardColumn', function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\r\n    'use strict';\r\n\r\n    /**\r\n     * moves a widget in between a column\r\n     */\r\n    function moveWidgetInColumn($scope, column, evt){\r\n      var widgets = column.widgets;\r\n      // move widget and apply to scope\r\n      $scope.$apply(function(){\r\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\r\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * finds a widget by its id in the column\r\n     */\r\n    function findWidget(column, index){\r\n      var widget = null;\r\n      for (var i=0; i<column.widgets.length; i++){\r\n        var w = column.widgets[i];\r\n        if (dashboard.idEquals(w.wid,index)){\r\n          widget = w;\r\n          break;\r\n        }\r\n      }\r\n      return widget;\r\n    }\r\n\r\n    /**\r\n     * finds a column by its id in the model\r\n     */\r\n    function findColumn(model, index){\r\n      var column = null;\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var r = model.rows[i];\r\n        for (var j=0; j<r.columns.length; j++){\r\n          var c = r.columns[j];\r\n          if (dashboard.idEquals(c.cid, index)){\r\n            column = c;\r\n            break;\r\n          } else if (c.rows){\r\n            column = findColumn(c, index);\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    /**\r\n     * get the adf id from an html element\r\n     */\r\n    function getId(el){\r\n      var id = el.getAttribute('adf-id');\r\n      return id ? id : '-1';\r\n    }\r\n\r\n    /**\r\n     * adds a widget to a column\r\n     */\r\n    function addWidgetToColumn($scope, model, targetColumn, evt){\r\n      // find source column\r\n      var cid = getId(evt.from);\r\n      var sourceColumn = findColumn(model, cid);\r\n\r\n      if (sourceColumn){\r\n        // find moved widget\r\n        var wid = getId(evt.item);\r\n        var widget = findWidget(sourceColumn, wid);\r\n\r\n        if (widget){\r\n          // add new item and apply to scope\r\n          $scope.$apply(function(){\r\n            if (!targetColumn.widgets) {\r\n              targetColumn.widgets = [];\r\n            }\r\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\r\n\r\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\r\n          });\r\n        } else {\r\n          $log.warn('could not find widget with id ' + wid);\r\n        }\r\n      } else {\r\n        $log.warn('could not find column with id ' + cid);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * removes a widget from a column\r\n     */\r\n    function removeWidgetFromColumn($scope, column, evt){\r\n      // remove old item and apply to scope\r\n      $scope.$apply(function(){\r\n        column.widgets.splice(evt.oldIndex, 1);\r\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * enable sortable\r\n     */\r\n    function applySortable($scope, $element, model, column){\r\n      // enable drag and drop\r\n      var el = $element[0];\r\n      var sortable = Sortable.create(el, {\r\n        group: 'widgets',\r\n        handle: '.adf-move',\r\n        ghostClass: 'placeholder',\r\n        animation: 150,\r\n        onAdd: function(evt){\r\n          addWidgetToColumn($scope, model, column, evt);\r\n        },\r\n        onRemove: function(evt){\r\n          removeWidgetFromColumn($scope, column, evt);\r\n        },\r\n        onUpdate: function(evt){\r\n          moveWidgetInColumn($scope, column, evt);\r\n        }\r\n      });\r\n\r\n      // destroy sortable on column destroy event\r\n      $element.on('$destroy', function () {\r\n        // check sortable element, before calling destroy\r\n        // see https://github.com/sdorra/angular-dashboard-framework/issues/118\r\n        if (sortable.el){\r\n          sortable.destroy();\r\n        }\r\n      });\r\n    }\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        column: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        adfModel: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\r\n      link: function ($scope, $element) {\r\n        // set id\r\n        var col = $scope.column;\r\n        if (!col.cid){\r\n          col.cid = dashboard.id();\r\n        }\r\n\r\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\r\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\r\n          $compile(rowTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        } else {\r\n          // enable drag and drop for widget only columns\r\n          applySortable($scope, $element, $scope.adfModel, col);\r\n        }\r\n      }\r\n    };\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name adf.directive:adfDashboard\r\n * @element div\r\n * @restrict EA\r\n * @scope\r\n * @description\r\n *\r\n * `adfDashboard` is a directive which renders the dashboard with all its\r\n * components. The directive requires a name attribute. The name of the\r\n * dashboard can be used to store the model.\r\n *\r\n * @param {string} name name of the dashboard. This attribute is required.\r\n * @param {boolean=} editable false to disable the editmode of the dashboard.\r\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\r\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\r\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\r\n * @param {string=} structure the default structure of the dashboard.\r\n * @param {object=} adfModel model object of the dashboard.\r\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\r\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\r\n *                   events during edit mode not reset it if edit mode is exited.\r\n * @param {boolean=} categories enable categories for the add widget dialog.\r\n */\r\n\r\nangular.module('adf')\r\n    .directive('adfDashboard', function($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath, $faIcons) {\r\n        'use strict';\r\n\r\n        function stringToBoolean(string) {\r\n            switch (angular.isDefined(string) ? string.toLowerCase() : null) {\r\n                case 'true':\r\n                case 'yes':\r\n                case '1':\r\n                    return true;\r\n                case 'false':\r\n                case 'no':\r\n                case '0':\r\n                case null:\r\n                    return false;\r\n                default:\r\n                    return Boolean(string);\r\n            }\r\n        }\r\n\r\n        function copyWidgets(source, target) {\r\n            if (source.widgets && source.widgets.length > 0) {\r\n                var w = source.widgets.shift();\r\n                while (w) {\r\n                    target.widgets.push(w);\r\n                    w = source.widgets.shift();\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Copy widget from old columns to the new model\r\n         * @param object root the model\r\n         * @param array of columns\r\n         * @param counter\r\n         */\r\n        function fillStructure(root, columns, counter) {\r\n            counter = counter || 0;\r\n\r\n            if (angular.isDefined(root.rows)) {\r\n                angular.forEach(root.rows, function(row) {\r\n                    angular.forEach(row.columns, function(column) {\r\n                        // if the widgets prop doesn't exist, create a new array for it.\r\n                        // this allows ui.sortable to do it's thing without error\r\n                        if (!column.widgets) {\r\n                            column.widgets = [];\r\n                        }\r\n\r\n                        // if a column exist at the counter index, copy over the column\r\n                        if (angular.isDefined(columns[counter])) {\r\n                            // do not add widgets to a column, which uses nested rows\r\n                            if (angular.isUndefined(column.rows)) {\r\n                                copyWidgets(columns[counter], column);\r\n                                counter++;\r\n                            }\r\n                        }\r\n\r\n                        // run fillStructure again for any sub rows/columns\r\n                        counter = fillStructure(column, columns, counter);\r\n                    });\r\n                });\r\n            }\r\n            return counter;\r\n        }\r\n\r\n        /**\r\n         * Read Columns: recursively searches an object for the 'columns' property\r\n         * @param object model\r\n         * @param array  an array of existing columns; used when recursion happens\r\n         */\r\n        function readColumns(root, columns) {\r\n            columns = columns || [];\r\n\r\n            if (angular.isDefined(root.rows)) {\r\n                angular.forEach(root.rows, function(row) {\r\n                    angular.forEach(row.columns, function(col) {\r\n                        columns.push(col);\r\n                        // keep reading columns until we can't any more\r\n                        readColumns(col, columns);\r\n                    });\r\n                });\r\n            }\r\n\r\n            return columns;\r\n        }\r\n\r\n        function changeStructure(model, structure) {\r\n            var columns = readColumns(model);\r\n            var counter = 0;\r\n\r\n            model.rows = angular.copy(structure.rows);\r\n\r\n            while (counter < columns.length) {\r\n                counter = fillStructure(model, columns, counter);\r\n            }\r\n        }\r\n\r\n        function createConfiguration(type) {\r\n            var cfg = {};\r\n            var config = dashboard.widgets[type].config;\r\n            if (config) {\r\n                cfg = angular.copy(config);\r\n            }\r\n            return cfg;\r\n        }\r\n\r\n        function createWidget(type) {\r\n            var wdgt = {};\r\n            var widget = dashboard.widgets[type];\r\n            if (widget) {\r\n                wdgt = angular.copy(widget);\r\n            }\r\n            return wdgt;\r\n        }\r\n\r\n        /**\r\n         * Find first widget column in model.\r\n         *\r\n         * @param dashboard model\r\n         */\r\n        function findFirstWidgetColumn(model) {\r\n            var column = null;\r\n            if (!angular.isArray(model.rows)) {\r\n                $log.error('model does not have any rows');\r\n                return null;\r\n            }\r\n            for (var i = 0; i < model.rows.length; i++) {\r\n                var row = model.rows[i];\r\n                if (angular.isArray(row.columns)) {\r\n                    for (var j = 0; j < row.columns.length; j++) {\r\n                        var col = row.columns[j];\r\n                        if (!col.rows) {\r\n                            column = col;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if (column) {\r\n                    break;\r\n                }\r\n            }\r\n            return column;\r\n        }\r\n\r\n        /**\r\n         * Adds the widget to first column of the model.\r\n         *\r\n         * @param dashboard model\r\n         * @param widget to add to model\r\n         * @param name name of the dashboard\r\n         */\r\n        function addNewWidgetToModel(model, widget, name, forceToSave) {\r\n            if (model) {\r\n                var column = findFirstWidgetColumn(model);\r\n                if (column) {\r\n                    if (!column.widgets) {\r\n                        column.widgets = [];\r\n                    }\r\n                    column.widgets.unshift(widget);\r\n\r\n                    // broadcast added event\r\n                    $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\r\n\r\n                    if (forceToSave) {\r\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n                    }\r\n                } else {\r\n                    $log.error('could not find first widget column');\r\n                }\r\n            } else {\r\n                $log.error('model is undefined');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Checks if the edit mode of the widget should be opened immediately.\r\n         *\r\n         * @param widget type\r\n         */\r\n        function isEditModeImmediate(type) {\r\n            var widget = dashboard.widgets[type];\r\n            return widget && widget.edit && widget.edit.immediate;\r\n        }\r\n\r\n        /**\r\n         * Opens the edit mode of the specified widget.\r\n         *\r\n         * @param dashboard scope\r\n         * @param widget\r\n         */\r\n        function openEditMode($scope, widget) {\r\n            // wait some time before fire enter edit mode event\r\n            $timeout(function() {\r\n                $scope.$broadcast('adfWidgetEnterEditMode', widget);\r\n            }, 200);\r\n        }\r\n\r\n        /**\r\n         * Splits an object into an array multiple objects inside.\r\n         *\r\n         * @param object source object\r\n         * @param size size of array\r\n         *\r\n         * @return array of splitted objects\r\n         */\r\n        function split(object, size) {\r\n            var arr = [];\r\n            var i = 0;\r\n            angular.forEach(object, function(value, key) {\r\n                var index = i++ % size;\r\n                if (!arr[index]) {\r\n                    arr[index] = {};\r\n                }\r\n                arr[index][key] = value;\r\n            });\r\n            return arr;\r\n        }\r\n\r\n        /**\r\n         * Creates object with the category name as key and an array of widgets as value.\r\n         *\r\n         * @param widgets array of widgets\r\n         *\r\n         * @return array of categories\r\n         */\r\n        function createCategories(widgets) {\r\n            var categories = {};\r\n            angular.forEach(widgets, function(widget, key) {\r\n                var category = widget.category;\r\n                // if the widget has no category use a default one\r\n                if (!category) {\r\n                    category = 'Miscellaneous';\r\n                }\r\n                // push widget to category array\r\n                if (angular.isUndefined(categories[category])) {\r\n                    categories[category] = { widgets: {} };\r\n                }\r\n                categories[category].widgets[key] = widget;\r\n            });\r\n            return categories;\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            scope: {\r\n                structure: '@',\r\n                name: '@',\r\n                collapsible: '@',\r\n                editable: '@',\r\n                editMode: '@',\r\n                continuousEditMode: '=',\r\n                maximizable: '@',\r\n                adfModel: '=',\r\n                adfWidgetFilter: '=',\r\n                categories: '@',\r\n                hideButtons: '=',\r\n                extraData: '='\r\n            },\r\n            controller: function($scope) {\r\n                var model = {};\r\n                var structure = {};\r\n                var widgetFilter = null;\r\n                var structureName = {};\r\n                var name = $scope.name;\r\n\r\n                // Watching for changes on adfModel\r\n                $scope.$watch('adfModel', function(oldVal, newVal) {\r\n                    // has model changed or is the model attribute not set\r\n                    if (newVal !== null || (oldVal === null && newVal === null)) {\r\n                        model = $scope.adfModel;\r\n                        widgetFilter = $scope.adfWidgetFilter;\r\n                        if (!model || !model.rows) {\r\n                            structureName = $scope.structure;\r\n                            structure = dashboard.structures[structureName];\r\n                            if (structure) {\r\n                                if (model) {\r\n                                    model.rows = angular.copy(structure).rows;\r\n                                } else {\r\n                                    model = angular.copy(structure);\r\n                                }\r\n                                model.structure = structureName;\r\n                            } else {\r\n                                $log.error('could not find structure ' + structureName);\r\n                            }\r\n                        }\r\n\r\n                        if (model) {\r\n                            if (!model.title) {\r\n                                model.title = 'Empty Dashboard';\r\n                            }\r\n                            if (!model.titleTemplateUrl) {\r\n                                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\r\n                            }\r\n                            $scope.model = model;\r\n                        } else {\r\n                            $log.error('could not find or create model');\r\n                        }\r\n                    }\r\n                }, true);\r\n\r\n                // edit mode\r\n                $scope.editMode = false;\r\n                $scope.editClass = '';\r\n\r\n                //passs translate function from dashboard so we can translate labels inside html templates\r\n                $scope.translate = dashboard.translate;\r\n\r\n                function getNewModalScope() {\r\n                    var scope = $scope.$new();\r\n                    //pass translate function to the new scope so we can translate the labels inside the modal dialog\r\n                    scope.translate = dashboard.translate;\r\n                    return scope;\r\n                }\r\n\r\n                $scope.deleteDashboard = function() {\r\n                    var dashData = {\r\n                        id: model.id,\r\n                        name: model.title\r\n                    };\r\n\r\n                    $rootScope.$broadcast('dashboardDelete', dashData);\r\n                };\r\n\r\n                $scope.toggleEditMode = function(openConfigWindow) {\r\n                    $scope.editMode = !$scope.editMode;\r\n                    if ($scope.editMode) {\r\n                        if (!$scope.continuousEditMode) {\r\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n                            $rootScope.$broadcast('adfIsEditMode');\r\n                        }\r\n\r\n                        if (openConfigWindow) {\r\n                            $scope.editDashboardDialog();\r\n                        }\r\n                    }\r\n\r\n                    if (!$scope.editMode) {\r\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n                    }\r\n                };\r\n\r\n                $scope.saveTemporalDashboard = function() {\r\n                    delete model.temporal;\r\n                    $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n                };\r\n\r\n                var adfToggleEditMode = $scope.$on('adfToggleEditMode', function(event, isNewDashboard) {\r\n                    if (isNewDashboard) {\r\n                        $scope.toggleEditMode(true);\r\n                    } else {\r\n                        $scope.toggleEditMode();\r\n                    }\r\n                });\r\n\r\n                var adfCancelEditMode = $scope.$on('adfCancelEditMode', function(event, isNewDashboard) {\r\n                    if ($scope.editMode) {\r\n                        $scope.cancelEditMode();\r\n                    }\r\n                });\r\n\r\n                $scope.collapseAll = function(collapseExpandStatus) {\r\n                    $rootScope.$broadcast('adfDashboardCollapseExpand', { collapseExpandStatus: collapseExpandStatus });\r\n                };\r\n\r\n                $scope.cancelEditMode = function() {\r\n                    $scope.editMode = false;\r\n                    if (!$scope.continuousEditMode && ($scope.modelCopy !== $scope.adfModel)) {\r\n                        $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\r\n                    }\r\n                    $rootScope.$broadcast('adfDashboardEditsCancelled');\r\n                };\r\n\r\n                var adfEditDashboardDialog = $scope.$on('adfEditDashboardDialog', function(event, isNewDashboard) {\r\n                    if ($scope.editMode) {\r\n                        $scope.editDashboardDialog();\r\n                    }\r\n                });\r\n\r\n                var adfLaunchSearchingFromWidget = $scope.$on('adfLaunchSearchingFromWidget', function(event, widget, configFilter) {\r\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\r\n                });\r\n                var adfWindowTimeChangedFromWidget = $scope.$on('adfWindowTimeChangedFromWidget', function(event, widget, windowFilter) {\r\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\r\n                });\r\n\r\n                // edit dashboard settings\r\n                $scope.editDashboardDialog = function() {\r\n                    var editDashboardScope = getNewModalScope();\r\n                    // create a copy of the title, to avoid changing the title to\r\n                    // \"dashboard\" if the field is empty\r\n                    editDashboardScope.copy = {\r\n                        title: (model.title !== 'Empty Dashboard' ? model.title : ''),\r\n                        description: model.description,\r\n                        icon: model.icon ? model.icon : 'fa-tachometer'\r\n                    };\r\n\r\n                    // pass icon list\r\n                    editDashboardScope.availableIcons = $faIcons.list();\r\n\r\n                    // pass dashboard structure to scope\r\n                    editDashboardScope.structures = dashboard.structures;\r\n\r\n                    // pass split function to scope, to be able to display structures in multiple columns\r\n                    editDashboardScope.split = split;\r\n\r\n                    var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\r\n                    if (model.editTemplateUrl) {\r\n                        adfEditTemplatePath = model.editTemplateUrl;\r\n                    }\r\n                    var instance = $uibModal.open({\r\n                        scope: editDashboardScope,\r\n                        templateUrl: adfEditTemplatePath,\r\n                        backdrop: 'static',\r\n                        keyboard: false,\r\n                        size: 'lg'\r\n                    });\r\n\r\n                    editDashboardScope.changeStructure = function(name, structure) {\r\n                        $log.info('change structure to ' + name);\r\n                        changeStructure(model, structure);\r\n                        if (model.structure !== name) {\r\n                            model.structure = name;\r\n                        }\r\n                    };\r\n                    editDashboardScope.closeDialog = function() {\r\n                        // copy the new title back to the model\r\n                        model.title = editDashboardScope.copy.title;\r\n                        model.description = editDashboardScope.copy.description;\r\n                        model.icon = editDashboardScope.copy.icon;\r\n\r\n                        // close modal and destroy the scope\r\n                        instance.close();\r\n                        editDashboardScope.$destroy();\r\n                    };\r\n                };\r\n\r\n                var adfOpenWidgetFromOther = $scope.$on('adfOpenWidgetFromOther', function(event, widget, config) {\r\n                    var internal_config = createConfiguration(widget);\r\n                    var _config = angular.merge({}, internal_config, config);\r\n                    var w = {\r\n                        type: widget,\r\n                        config: _config,\r\n                        title: _config.title\r\n                    };\r\n                    addNewWidgetToModel(model, w, name, !$scope.editMode);\r\n                });\r\n\r\n                var adfOpenModalWidgetFromOther = $scope.$on('adfOpenModalWidgetFromOther', function(event, widgetType, config) {\r\n                    var widget = createWidget(widgetType);\r\n                    widget.config = angular.merge({}, widget.config, config);\r\n                    widget.type = widgetType;\r\n                    if (widget.config.title) {\r\n                        widget.title = widget.config.title;\r\n                    }\r\n                    var fullScreenScope = $scope.$new();\r\n                    fullScreenScope.definition = fullScreenScope.widget = widget;\r\n                    var opts = {\r\n                        scope: fullScreenScope,\r\n                        templateUrl: adfTemplatePath + 'widget-fullscreen.html',\r\n                        size: fullScreenScope.definition.modalSize || 'lg', // 'sm', 'lg'\r\n                        backdrop: 'static',\r\n                        windowClass: (fullScreenScope.definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\r\n                    };\r\n\r\n                    fullScreenScope.persistDashboard = function() {\r\n                        $rootScope.$broadcast('adfOpenWidgetFromOther', this.$parent.widget.type, this.$parent.widget.config);\r\n                        this.closeDialog();\r\n                    }\r\n\r\n                    var instance = $uibModal.open(opts);\r\n                    fullScreenScope.closeDialog = function() {\r\n                        instance.close();\r\n                        fullScreenScope.$destroy();\r\n                    };\r\n\r\n                });\r\n\r\n                var adfAddWidgetDialog = $scope.$on('adfAddWidgetDialog', function(event, isNewDashboard) {\r\n                    if (!model.temporal && model.editable) {\r\n                        if (!$scope.editMode) {\r\n                            $scope.editMode = true;\r\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n                            $rootScope.$broadcast('adfIsEditMode');\r\n                        }\r\n\r\n                        $scope.addWidgetDialog();\r\n                    }\r\n                });\r\n\r\n                // add widget dialog\r\n                $scope.addWidgetDialog = function() {\r\n                    var addScope = getNewModalScope();\r\n                    var widgets;\r\n                    if (angular.isFunction(widgetFilter)) {\r\n                        widgets = {};\r\n                        angular.forEach(dashboard.widgets, function(widget, type) {\r\n                            if (widgetFilter(widget, type, model)) {\r\n                                widgets[type] = widget;\r\n                            }\r\n                        });\r\n                    } else {\r\n                        widgets = dashboard.widgets;\r\n                    }\r\n                    addScope.widgets = widgets;\r\n\r\n                    //pass translate function to the new scope so we can translate the labels inside the modal dialog\r\n                    addScope.translate = $scope.translate;\r\n\r\n                    // pass createCategories function to scope, if categories option is enabled\r\n                    if ($scope.options.categories) {\r\n                        $scope.createCategories = createCategories;\r\n                    }\r\n\r\n                    var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\r\n                    if (model.addTemplateUrl) {\r\n                        adfAddTemplatePath = model.addTemplateUrl;\r\n                    }\r\n\r\n                    var opts = {\r\n                        scope: addScope,\r\n                        templateUrl: adfAddTemplatePath,\r\n                        backdrop: 'static'\r\n                    };\r\n\r\n                    var instance = $uibModal.open(opts);\r\n                    addScope.addWidget = function(widget) {\r\n                        var w = {\r\n                            type: widget,\r\n                            config: createConfiguration(widget)\r\n                        };\r\n                        addNewWidgetToModel(model, w, name);\r\n                        // close and destroy\r\n                        instance.close();\r\n                        addScope.$destroy();\r\n\r\n                        // check for open edit mode immediately\r\n                        if (isEditModeImmediate(widget)) {\r\n                            openEditMode($scope, w);\r\n                        }\r\n                    };\r\n                    addScope.closeDialog = function() {\r\n                        // close and destroy\r\n                        instance.close();\r\n                        addScope.$destroy();\r\n                    };\r\n                };\r\n\r\n                $scope.addNewWidgetToModel = addNewWidgetToModel;\r\n\r\n                $scope.$on('destroy', function() {\r\n                    adfLaunchSearchingFromWidget();\r\n                    adfWindowTimeChangedFromWidget();\r\n                    adfToggleEditMode();\r\n                    adfOpenWidgetFromOther();\r\n                    adfOpenModalWidgetFromOther();\r\n                    adfCancelEditMode();\r\n                    adfAddWidgetDialog();\r\n                    adfEditDashboardDialog();\r\n                });\r\n            },\r\n            link: function($scope, $element, $attr) {\r\n                // pass options to scope\r\n                var options = {\r\n                    name: $attr.name,\r\n                    editable: true,\r\n                    enableConfirmDelete: stringToBoolean($attr.enableConfirmDelete),\r\n                    maximizable: stringToBoolean($attr.maximizable),\r\n                    collapsible: stringToBoolean($attr.collapsible),\r\n                    categories: stringToBoolean($attr.categories),\r\n                    extraData: {}\r\n                };\r\n\r\n                if (angular.isDefined($attr.editable)) {\r\n                    options.editable = stringToBoolean($attr.editable);\r\n                }\r\n\r\n                if (angular.isDefined($scope.extraData)) {\r\n                    options.extraData = $scope.extraData;\r\n                }\r\n\r\n                options.extraData.editing = $scope.editMode;\r\n\r\n                $scope.options = options;\r\n            },\r\n            templateUrl: adfTemplatePath + 'dashboard.html'\r\n        };\r\n    });","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * @ngdoc object\r\n * @name adf.locale#adfLocale\r\n * @description\r\n *\r\n * Holds settings and values for framework supported locales\r\n */\r\nangular.module('adf.locale')\r\n    .constant('adfLocale', {\r\n        defaultLocale: 'en-GB',\r\n        frameworkLocales: {\r\n            'en-GB': {\r\n                ADF_COMMON_CLOSE: 'Close',\r\n                ADF_COMMON_DELETE: 'Delete',\r\n                ADF_COMMON_TITLE: 'Title',\r\n                ADF_COMMON_DESCRIPTION: 'Description',\r\n                ADF_COMMON_CANCEL: 'Cancel',\r\n                ADF_COMMON_APPLY: 'Apply',\r\n                ADF_COMMON_EDIT_DASHBOARD: 'Edit dashboard',\r\n                ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Structure',\r\n                ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Add new widget',\r\n                ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Save changes',\r\n                ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Enable edit mode',\r\n                ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Undo changes',\r\n                ADF_WIDGET_ADD_HEADER: 'Add new widget',\r\n                ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Are you sure you want to delete this widget ?',\r\n                ADF_WIDGET_TOOLTIP_REFRESH: 'Reload widget Content',\r\n                ADF_WIDGET_TOOLTIP_PRINT: 'Print widget Content',\r\n                ADF_WIDGET_TOOLTIP_FILTER: 'Show widget Filter',\r\n                ADF_WIDGET_TOOLTIP_SORT: 'Show widget Sort',\r\n                ADF_WIDGET_TOOLTIP_MOVE: 'Change widget location',\r\n                ADF_WIDGET_TOOLTIP_COLLAPSE: 'Collapse widget',\r\n                ADF_WIDGET_TOOLTIP_EXPAND: 'Expand widget',\r\n                ADF_WIDGET_TOOLTIP_EDIT: 'Edit widget configuration',\r\n                ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Fullscreen widget',\r\n                ADF_WIDGET_TOOLTIP_REMOVE: 'Remove widget',\r\n                ADF_WIDGET_TOOLTIP_OPERATION: 'Execute operation',\r\n                ADF_WIDGET_TOOLTIP_SELECTION: 'Items selected',\r\n                ADF_WIDGET_CLEAR: 'Clear',\r\n                ADF_WIDGET_RESTORE: 'Restore',\r\n                ADF_WIDGET_FILTER: 'Filter'\r\n            },\r\n            'sv-SE': {\r\n                ADF_COMMON_CLOSE: 'Stäng',\r\n                ADF_COMMON_DELETE: 'Ta bort',\r\n                ADF_COMMON_TITLE: 'Titel',\r\n                ADF_COMMON_DESCRIPTION: 'Description',\r\n                ADF_COMMON_CANCEL: 'Avbryt',\r\n                ADF_COMMON_APPLY: 'Använd',\r\n                ADF_COMMON_EDIT_DASHBOARD: 'Redigera dashboard',\r\n                ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Struktur',\r\n                ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Lägg till ny widget',\r\n                ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Spara förändringar',\r\n                ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Slå på redigeringsläge',\r\n                ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Ångra förändringar',\r\n                ADF_WIDGET_ADD_HEADER: 'Lägg till ny widget',\r\n                ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Är du säker på att du vill ta bort denna widget ?',\r\n                ADF_WIDGET_TOOLTIP_REFRESH: 'Ladda om widget',\r\n                ADF_WIDGET_TOOLTIP_FILTER: 'Show widget Filter',\r\n                ADF_WIDGET_TOOLTIP_SORT: 'Show widget Sort',\r\n                ADF_WIDGET_TOOLTIP_MOVE: 'Ändra widgets position',\r\n                ADF_WIDGET_TOOLTIP_COLLAPSE: 'Stäng widget',\r\n                ADF_WIDGET_TOOLTIP_EXPAND: 'Öppna widget',\r\n                ADF_WIDGET_TOOLTIP_EDIT: 'Ändra widget konfigurering',\r\n                ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Visa widget i fullskärm',\r\n                ADF_WIDGET_TOOLTIP_REMOVE: 'Ta bort widget',\r\n                ADF_WIDGET_TOOLTIP_OPERATION: 'Execute operation',\r\n                ADF_WIDGET_TOOLTIP_SELECTION: 'Items selected',\r\n                ADF_WIDGET_CLEAR: 'Clear',\r\n                ADF_WIDGET_RESTORE: 'Restore',\r\n                ADF_WIDGET_FILTER: 'Filter'\r\n            }\r\n        }\r\n    });","/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .filter('adfOrderByObjectKey', function($filter) {\r\n    'use strict';\r\n\r\n    return function(item, key){\r\n      var array = [];\r\n      angular.forEach(item, function(value, objectKey){\r\n        value[key] = objectKey;\r\n        array.push(value);\r\n      });\r\n      return $filter('orderBy')(array, key);\r\n    };\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * @ngdoc object\r\n * @name adf.dashboardProvider\r\n * @description\r\n *\r\n * The dashboardProvider can be used to register structures and widgets.\r\n */\r\nangular.module('adf.provider', ['adf.locale'])\r\n    .provider('dashboard', function(adfLocale) {\r\n\r\n        var widgets = {};\r\n        var widgetsPath = '';\r\n        var structures = {};\r\n        var messageTemplate = '<div class=\"alert alert-primary\">{}</div>';\r\n        var loadingTemplate = '\\\r\n      <div class=\"progress progress-striped active\">\\n\\\r\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\r\n          <span class=\"sr-only\">loading ...</span>\\n\\\r\n        </div>\\n\\\r\n      </div>';\r\n        var customWidgetTemplatePath = null;\r\n\r\n        // default apply function of widget.edit.apply\r\n        var defaultApplyFunction = function() {\r\n            return true;\r\n        };\r\n\r\n        var activeLocale = adfLocale.defaultLocale;\r\n        var locales = adfLocale.frameworkLocales;\r\n\r\n        function getLocales() {\r\n            return locales;\r\n        }\r\n\r\n        function getActiveLocale() {\r\n            return activeLocale;\r\n        }\r\n\r\n        function translate(label) {\r\n            var translation = locales[activeLocale][label];\r\n            return translation ? translation : label;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#widget\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Registers a new widget.\r\n         *\r\n         * @param {string} name of the widget\r\n         * @param {object} widget to be registered.\r\n         *\r\n         *   Object properties:\r\n         *\r\n         *   - `title` - `{string=}` - The title of the widget.\r\n         *   - `description` - `{string=}` - Description of the widget.\r\n         *   - `category` - `{string=}` - Category of the widget.\r\n         *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\r\n         *   - `config` - `{object}` - Predefined widget configuration.\r\n         *   - `controller` - `{string=|function()=}` - Controller fn that should be\r\n         *      associated with newly created scope of the widget or the name of a\r\n         *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\r\n         *      if passed as a string.\r\n         *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\r\n         *      published to scope under the `controllerAs` name.\r\n         *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\r\n         *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\r\n         *   - `template` - `{string=|function()=}` - html template as a string.\r\n         *   - `templateUrl` - `{string=}` - path to an html template.\r\n         *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\r\n         *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n         *      be injected into the controller. If any of these dependencies are promises, the widget\r\n         *      will wait for them all to be resolved or one to be rejected before the controller is\r\n         *      instantiated.\r\n         *      If all the promises are resolved successfully, the values of the resolved promises are\r\n         *      injected.\r\n         *\r\n         *      The map object is:\r\n         *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\r\n         *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n         *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\r\n         *        and the return value is treated as the dependency. If the result is a promise, it is\r\n         *        resolved before its value is injected into the controller.\r\n         *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n         *      on the scope of the widget.\r\n         *   - `edit` - `{object}` - Edit modus of the widget.\r\n         *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n         *        on the scope of the widget.\r\n         *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\r\n         *        Default is true.\r\n         *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\r\n         *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\r\n         *        The function have to return a boolean or an promise which can be resolved to a boolean.\r\n         *        The function can use injection.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.widget = function(name, widget) {\r\n            var w = angular.extend({ reload: false, frameless: false }, widget);\r\n            if (w.edit) {\r\n                var edit = {\r\n                    reload: true,\r\n                    immediate: false,\r\n                    apply: defaultApplyFunction\r\n                };\r\n                angular.extend(edit, w.edit);\r\n                w.edit = edit;\r\n            }\r\n            widgets[name] = w;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#widgetsPath\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Sets the path to the directory which contains the widgets. The widgets\r\n         * path is used for widgets with a templateUrl which contains the\r\n         * placeholder {widgetsPath}. The placeholder is replaced with the\r\n         * configured value, before the template is loaded, but the template is\r\n         * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\r\n         * The default value of widgetPaths is ''.\r\n         *\r\n         *\r\n         * @param {string} path to the directory which contains the widgets\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.widgetsPath = function(path) {\r\n            widgetsPath = path;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#structure\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Registers a new structure.\r\n         *\r\n         * @param {string} name of the structure\r\n         * @param {object} structure to be registered.\r\n         *\r\n         *   Object properties:\r\n         *\r\n         *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\r\n         *     - `styleClass` - `{string}` - CSS Class of the row.\r\n         *     - `columns` - `{Array.<Object>}` - Columns of the row.\r\n         *       - `styleClass` - `{string}` - CSS Class of the column.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.structure = function(name, structure) {\r\n            structures[name] = structure;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#messageTemplate\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the template for messages.\r\n         *\r\n         * @param {string} template for messages.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.messageTemplate = function(template) {\r\n            messageTemplate = template;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#loadingTemplate\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the template which is displayed as\r\n         * long as the widget resources are not resolved.\r\n         *\r\n         * @param {string} template loading template\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.loadingTemplate = function(template) {\r\n            loadingTemplate = template;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#customWidgetTemplatePath\r\n         * @propertyOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the container template for the widgets\r\n         *\r\n         * @param {string} path to the custom widget template\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.customWidgetTemplatePath = function(templatePath) {\r\n            customWidgetTemplatePath = templatePath;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#setLocale\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the locale setting of adf\r\n         *\r\n         * @param {string} ISO Language Code\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.setLocale = function(locale) {\r\n            if (locales[locale]) {\r\n                activeLocale = locale;\r\n            } else {\r\n                throw new Error('Cannot set locale: ' + locale + '. Locale is not defined.');\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#addLocale\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Adds a new locale to adf\r\n         *\r\n         * @param {string} ISO Language Code for the new locale\r\n         * @param {object} translations for the locale.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.addLocale = function(locale, translations) {\r\n            if (!angular.isString(locale)) {\r\n                throw new Error('locale must be an string');\r\n            }\r\n\r\n            if (!angular.isObject(translations)) {\r\n                throw new Error('translations must be an object');\r\n            }\r\n\r\n            locales[locale] = translations;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc service\r\n         * @name adf.dashboard\r\n         * @description\r\n         *\r\n         * The dashboard holds all options, structures and widgets.\r\n         *\r\n         * @property {Array.<Object>} widgets Array of registered widgets.\r\n         * @property {string} widgetsPath Default path for widgets.\r\n         * @property {Array.<Object>} structures Array of registered structures.\r\n         * @property {string} messageTemplate Template for messages.\r\n         * @property {string} loadingTemplate Template for widget loading.\r\n         * @property {method} sets locale of adf.\r\n         * @property {Array.<Object>} hold all of the locale translations.\r\n         * @property {string} the active locale setting.\r\n         * @property {method} translation function passed to templates.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.$get = function() {\r\n            var cid = 0;\r\n\r\n            return {\r\n                widgets: widgets,\r\n                widgetsPath: widgetsPath,\r\n                structures: structures,\r\n                messageTemplate: messageTemplate,\r\n                loadingTemplate: loadingTemplate,\r\n                setLocale: this.setLocale,\r\n                locales: getLocales,\r\n                activeLocale: getActiveLocale,\r\n                translate: translate,\r\n                customWidgetTemplatePath: customWidgetTemplatePath,\r\n\r\n                /**\r\n                 * @ngdoc method\r\n                 * @name adf.dashboard#id\r\n                 * @methodOf adf.dashboard\r\n                 * @description\r\n                 *\r\n                 * Creates an ongoing numeric id. The method is used to create ids for\r\n                 * columns and widgets in the dashboard.\r\n                 */\r\n                id: function() {\r\n                    return new Date().getTime() + '-' + (++cid);\r\n                },\r\n\r\n                /**\r\n                 * @ngdoc method\r\n                 * @name adf.dashboard#idEqual\r\n                 * @methodOf adf.dashboard\r\n                 * @description\r\n                 *\r\n                 * Checks if the given ids are equal.\r\n                 *\r\n                 * @param {string} id widget or column id\r\n                 * @param {string} other widget or column id\r\n                 */\r\n                idEquals: function(id, other) {\r\n                    // use toString, because old ids are numbers\r\n                    return ((id) && (other)) && (id.toString() === other.toString());\r\n                }\r\n            };\r\n        };\r\n\r\n    });","(function(window, undefined) {'use strict';\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf', ['adf.provider', 'adf.locale', 'ui.bootstrap', 'opengate-angular-js'])\r\n    .value('adfTemplatePath', '../src/templates/')\r\n    .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\r\n    .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\r\n    .value('adfVersion', '3.1.0');\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf.locale', [])\r\n\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardColumn', [\"$log\", \"$compile\", \"$rootScope\", \"adfTemplatePath\", \"rowTemplate\", \"dashboard\", function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\r\n    \r\n\r\n    /**\r\n     * moves a widget in between a column\r\n     */\r\n    function moveWidgetInColumn($scope, column, evt){\r\n      var widgets = column.widgets;\r\n      // move widget and apply to scope\r\n      $scope.$apply(function(){\r\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\r\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * finds a widget by its id in the column\r\n     */\r\n    function findWidget(column, index){\r\n      var widget = null;\r\n      for (var i=0; i<column.widgets.length; i++){\r\n        var w = column.widgets[i];\r\n        if (dashboard.idEquals(w.wid,index)){\r\n          widget = w;\r\n          break;\r\n        }\r\n      }\r\n      return widget;\r\n    }\r\n\r\n    /**\r\n     * finds a column by its id in the model\r\n     */\r\n    function findColumn(model, index){\r\n      var column = null;\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var r = model.rows[i];\r\n        for (var j=0; j<r.columns.length; j++){\r\n          var c = r.columns[j];\r\n          if (dashboard.idEquals(c.cid, index)){\r\n            column = c;\r\n            break;\r\n          } else if (c.rows){\r\n            column = findColumn(c, index);\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    /**\r\n     * get the adf id from an html element\r\n     */\r\n    function getId(el){\r\n      var id = el.getAttribute('adf-id');\r\n      return id ? id : '-1';\r\n    }\r\n\r\n    /**\r\n     * adds a widget to a column\r\n     */\r\n    function addWidgetToColumn($scope, model, targetColumn, evt){\r\n      // find source column\r\n      var cid = getId(evt.from);\r\n      var sourceColumn = findColumn(model, cid);\r\n\r\n      if (sourceColumn){\r\n        // find moved widget\r\n        var wid = getId(evt.item);\r\n        var widget = findWidget(sourceColumn, wid);\r\n\r\n        if (widget){\r\n          // add new item and apply to scope\r\n          $scope.$apply(function(){\r\n            if (!targetColumn.widgets) {\r\n              targetColumn.widgets = [];\r\n            }\r\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\r\n\r\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\r\n          });\r\n        } else {\r\n          $log.warn('could not find widget with id ' + wid);\r\n        }\r\n      } else {\r\n        $log.warn('could not find column with id ' + cid);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * removes a widget from a column\r\n     */\r\n    function removeWidgetFromColumn($scope, column, evt){\r\n      // remove old item and apply to scope\r\n      $scope.$apply(function(){\r\n        column.widgets.splice(evt.oldIndex, 1);\r\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * enable sortable\r\n     */\r\n    function applySortable($scope, $element, model, column){\r\n      // enable drag and drop\r\n      var el = $element[0];\r\n      var sortable = Sortable.create(el, {\r\n        group: 'widgets',\r\n        handle: '.adf-move',\r\n        ghostClass: 'placeholder',\r\n        animation: 150,\r\n        onAdd: function(evt){\r\n          addWidgetToColumn($scope, model, column, evt);\r\n        },\r\n        onRemove: function(evt){\r\n          removeWidgetFromColumn($scope, column, evt);\r\n        },\r\n        onUpdate: function(evt){\r\n          moveWidgetInColumn($scope, column, evt);\r\n        }\r\n      });\r\n\r\n      // destroy sortable on column destroy event\r\n      $element.on('$destroy', function () {\r\n        // check sortable element, before calling destroy\r\n        // see https://github.com/sdorra/angular-dashboard-framework/issues/118\r\n        if (sortable.el){\r\n          sortable.destroy();\r\n        }\r\n      });\r\n    }\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        column: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        adfModel: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\r\n      link: function ($scope, $element) {\r\n        // set id\r\n        var col = $scope.column;\r\n        if (!col.cid){\r\n          col.cid = dashboard.id();\r\n        }\r\n\r\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\r\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\r\n          $compile(rowTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        } else {\r\n          // enable drag and drop for widget only columns\r\n          applySortable($scope, $element, $scope.adfModel, col);\r\n        }\r\n      }\r\n    };\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name adf.directive:adfDashboard\r\n * @element div\r\n * @restrict EA\r\n * @scope\r\n * @description\r\n *\r\n * `adfDashboard` is a directive which renders the dashboard with all its\r\n * components. The directive requires a name attribute. The name of the\r\n * dashboard can be used to store the model.\r\n *\r\n * @param {string} name name of the dashboard. This attribute is required.\r\n * @param {boolean=} editable false to disable the editmode of the dashboard.\r\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\r\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\r\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\r\n * @param {string=} structure the default structure of the dashboard.\r\n * @param {object=} adfModel model object of the dashboard.\r\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\r\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\r\n *                   events during edit mode not reset it if edit mode is exited.\r\n * @param {boolean=} categories enable categories for the add widget dialog.\r\n */\r\n\r\nangular.module('adf')\r\n    .directive('adfDashboard', [\"$rootScope\", \"$log\", \"$timeout\", \"$uibModal\", \"dashboard\", \"adfTemplatePath\", \"$faIcons\", function($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath, $faIcons) {\r\n        \r\n\r\n        function stringToBoolean(string) {\r\n            switch (angular.isDefined(string) ? string.toLowerCase() : null) {\r\n                case 'true':\r\n                case 'yes':\r\n                case '1':\r\n                    return true;\r\n                case 'false':\r\n                case 'no':\r\n                case '0':\r\n                case null:\r\n                    return false;\r\n                default:\r\n                    return Boolean(string);\r\n            }\r\n        }\r\n\r\n        function copyWidgets(source, target) {\r\n            if (source.widgets && source.widgets.length > 0) {\r\n                var w = source.widgets.shift();\r\n                while (w) {\r\n                    target.widgets.push(w);\r\n                    w = source.widgets.shift();\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Copy widget from old columns to the new model\r\n         * @param object root the model\r\n         * @param array of columns\r\n         * @param counter\r\n         */\r\n        function fillStructure(root, columns, counter) {\r\n            counter = counter || 0;\r\n\r\n            if (angular.isDefined(root.rows)) {\r\n                angular.forEach(root.rows, function(row) {\r\n                    angular.forEach(row.columns, function(column) {\r\n                        // if the widgets prop doesn't exist, create a new array for it.\r\n                        // this allows ui.sortable to do it's thing without error\r\n                        if (!column.widgets) {\r\n                            column.widgets = [];\r\n                        }\r\n\r\n                        // if a column exist at the counter index, copy over the column\r\n                        if (angular.isDefined(columns[counter])) {\r\n                            // do not add widgets to a column, which uses nested rows\r\n                            if (angular.isUndefined(column.rows)) {\r\n                                copyWidgets(columns[counter], column);\r\n                                counter++;\r\n                            }\r\n                        }\r\n\r\n                        // run fillStructure again for any sub rows/columns\r\n                        counter = fillStructure(column, columns, counter);\r\n                    });\r\n                });\r\n            }\r\n            return counter;\r\n        }\r\n\r\n        /**\r\n         * Read Columns: recursively searches an object for the 'columns' property\r\n         * @param object model\r\n         * @param array  an array of existing columns; used when recursion happens\r\n         */\r\n        function readColumns(root, columns) {\r\n            columns = columns || [];\r\n\r\n            if (angular.isDefined(root.rows)) {\r\n                angular.forEach(root.rows, function(row) {\r\n                    angular.forEach(row.columns, function(col) {\r\n                        columns.push(col);\r\n                        // keep reading columns until we can't any more\r\n                        readColumns(col, columns);\r\n                    });\r\n                });\r\n            }\r\n\r\n            return columns;\r\n        }\r\n\r\n        function changeStructure(model, structure) {\r\n            var columns = readColumns(model);\r\n            var counter = 0;\r\n\r\n            model.rows = angular.copy(structure.rows);\r\n\r\n            while (counter < columns.length) {\r\n                counter = fillStructure(model, columns, counter);\r\n            }\r\n        }\r\n\r\n        function createConfiguration(type) {\r\n            var cfg = {};\r\n            var config = dashboard.widgets[type].config;\r\n            if (config) {\r\n                cfg = angular.copy(config);\r\n            }\r\n            return cfg;\r\n        }\r\n\r\n        function createWidget(type) {\r\n            var wdgt = {};\r\n            var widget = dashboard.widgets[type];\r\n            if (widget) {\r\n                wdgt = angular.copy(widget);\r\n            }\r\n            return wdgt;\r\n        }\r\n\r\n        /**\r\n         * Find first widget column in model.\r\n         *\r\n         * @param dashboard model\r\n         */\r\n        function findFirstWidgetColumn(model) {\r\n            var column = null;\r\n            if (!angular.isArray(model.rows)) {\r\n                $log.error('model does not have any rows');\r\n                return null;\r\n            }\r\n            for (var i = 0; i < model.rows.length; i++) {\r\n                var row = model.rows[i];\r\n                if (angular.isArray(row.columns)) {\r\n                    for (var j = 0; j < row.columns.length; j++) {\r\n                        var col = row.columns[j];\r\n                        if (!col.rows) {\r\n                            column = col;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if (column) {\r\n                    break;\r\n                }\r\n            }\r\n            return column;\r\n        }\r\n\r\n        /**\r\n         * Adds the widget to first column of the model.\r\n         *\r\n         * @param dashboard model\r\n         * @param widget to add to model\r\n         * @param name name of the dashboard\r\n         */\r\n        function addNewWidgetToModel(model, widget, name, forceToSave) {\r\n            if (model) {\r\n                var column = findFirstWidgetColumn(model);\r\n                if (column) {\r\n                    if (!column.widgets) {\r\n                        column.widgets = [];\r\n                    }\r\n                    column.widgets.unshift(widget);\r\n\r\n                    // broadcast added event\r\n                    $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\r\n\r\n                    if (forceToSave) {\r\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n                    }\r\n                } else {\r\n                    $log.error('could not find first widget column');\r\n                }\r\n            } else {\r\n                $log.error('model is undefined');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Checks if the edit mode of the widget should be opened immediately.\r\n         *\r\n         * @param widget type\r\n         */\r\n        function isEditModeImmediate(type) {\r\n            var widget = dashboard.widgets[type];\r\n            return widget && widget.edit && widget.edit.immediate;\r\n        }\r\n\r\n        /**\r\n         * Opens the edit mode of the specified widget.\r\n         *\r\n         * @param dashboard scope\r\n         * @param widget\r\n         */\r\n        function openEditMode($scope, widget) {\r\n            // wait some time before fire enter edit mode event\r\n            $timeout(function() {\r\n                $scope.$broadcast('adfWidgetEnterEditMode', widget);\r\n            }, 200);\r\n        }\r\n\r\n        /**\r\n         * Splits an object into an array multiple objects inside.\r\n         *\r\n         * @param object source object\r\n         * @param size size of array\r\n         *\r\n         * @return array of splitted objects\r\n         */\r\n        function split(object, size) {\r\n            var arr = [];\r\n            var i = 0;\r\n            angular.forEach(object, function(value, key) {\r\n                var index = i++ % size;\r\n                if (!arr[index]) {\r\n                    arr[index] = {};\r\n                }\r\n                arr[index][key] = value;\r\n            });\r\n            return arr;\r\n        }\r\n\r\n        /**\r\n         * Creates object with the category name as key and an array of widgets as value.\r\n         *\r\n         * @param widgets array of widgets\r\n         *\r\n         * @return array of categories\r\n         */\r\n        function createCategories(widgets) {\r\n            var categories = {};\r\n            angular.forEach(widgets, function(widget, key) {\r\n                var category = widget.category;\r\n                // if the widget has no category use a default one\r\n                if (!category) {\r\n                    category = 'Miscellaneous';\r\n                }\r\n                // push widget to category array\r\n                if (angular.isUndefined(categories[category])) {\r\n                    categories[category] = { widgets: {} };\r\n                }\r\n                categories[category].widgets[key] = widget;\r\n            });\r\n            return categories;\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            scope: {\r\n                structure: '@',\r\n                name: '@',\r\n                collapsible: '@',\r\n                editable: '@',\r\n                editMode: '@',\r\n                continuousEditMode: '=',\r\n                maximizable: '@',\r\n                adfModel: '=',\r\n                adfWidgetFilter: '=',\r\n                categories: '@',\r\n                hideButtons: '=',\r\n                extraData: '='\r\n            },\r\n            controller: [\"$scope\", function($scope) {\r\n                var model = {};\r\n                var structure = {};\r\n                var widgetFilter = null;\r\n                var structureName = {};\r\n                var name = $scope.name;\r\n\r\n                // Watching for changes on adfModel\r\n                $scope.$watch('adfModel', function(oldVal, newVal) {\r\n                    // has model changed or is the model attribute not set\r\n                    if (newVal !== null || (oldVal === null && newVal === null)) {\r\n                        model = $scope.adfModel;\r\n                        widgetFilter = $scope.adfWidgetFilter;\r\n                        if (!model || !model.rows) {\r\n                            structureName = $scope.structure;\r\n                            structure = dashboard.structures[structureName];\r\n                            if (structure) {\r\n                                if (model) {\r\n                                    model.rows = angular.copy(structure).rows;\r\n                                } else {\r\n                                    model = angular.copy(structure);\r\n                                }\r\n                                model.structure = structureName;\r\n                            } else {\r\n                                $log.error('could not find structure ' + structureName);\r\n                            }\r\n                        }\r\n\r\n                        if (model) {\r\n                            if (!model.title) {\r\n                                model.title = 'Empty Dashboard';\r\n                            }\r\n                            if (!model.titleTemplateUrl) {\r\n                                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\r\n                            }\r\n                            $scope.model = model;\r\n                        } else {\r\n                            $log.error('could not find or create model');\r\n                        }\r\n                    }\r\n                }, true);\r\n\r\n                // edit mode\r\n                $scope.editMode = false;\r\n                $scope.editClass = '';\r\n\r\n                //passs translate function from dashboard so we can translate labels inside html templates\r\n                $scope.translate = dashboard.translate;\r\n\r\n                function getNewModalScope() {\r\n                    var scope = $scope.$new();\r\n                    //pass translate function to the new scope so we can translate the labels inside the modal dialog\r\n                    scope.translate = dashboard.translate;\r\n                    return scope;\r\n                }\r\n\r\n                $scope.deleteDashboard = function() {\r\n                    var dashData = {\r\n                        id: model.id,\r\n                        name: model.title\r\n                    };\r\n\r\n                    $rootScope.$broadcast('dashboardDelete', dashData);\r\n                };\r\n\r\n                $scope.toggleEditMode = function(openConfigWindow) {\r\n                    $scope.editMode = !$scope.editMode;\r\n                    if ($scope.editMode) {\r\n                        if (!$scope.continuousEditMode) {\r\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n                            $rootScope.$broadcast('adfIsEditMode');\r\n                        }\r\n\r\n                        if (openConfigWindow) {\r\n                            $scope.editDashboardDialog();\r\n                        }\r\n                    }\r\n\r\n                    if (!$scope.editMode) {\r\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n                    }\r\n                };\r\n\r\n                $scope.saveTemporalDashboard = function() {\r\n                    delete model.temporal;\r\n                    $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n                };\r\n\r\n                var adfToggleEditMode = $scope.$on('adfToggleEditMode', function(event, isNewDashboard) {\r\n                    if (isNewDashboard) {\r\n                        $scope.toggleEditMode(true);\r\n                    } else {\r\n                        $scope.toggleEditMode();\r\n                    }\r\n                });\r\n\r\n                var adfCancelEditMode = $scope.$on('adfCancelEditMode', function(event, isNewDashboard) {\r\n                    if ($scope.editMode) {\r\n                        $scope.cancelEditMode();\r\n                    }\r\n                });\r\n\r\n                $scope.collapseAll = function(collapseExpandStatus) {\r\n                    $rootScope.$broadcast('adfDashboardCollapseExpand', { collapseExpandStatus: collapseExpandStatus });\r\n                };\r\n\r\n                $scope.cancelEditMode = function() {\r\n                    $scope.editMode = false;\r\n                    if (!$scope.continuousEditMode && ($scope.modelCopy !== $scope.adfModel)) {\r\n                        $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\r\n                    }\r\n                    $rootScope.$broadcast('adfDashboardEditsCancelled');\r\n                };\r\n\r\n                var adfEditDashboardDialog = $scope.$on('adfEditDashboardDialog', function(event, isNewDashboard) {\r\n                    if ($scope.editMode) {\r\n                        $scope.editDashboardDialog();\r\n                    }\r\n                });\r\n\r\n                var adfLaunchSearchingFromWidget = $scope.$on('adfLaunchSearchingFromWidget', function(event, widget, configFilter) {\r\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\r\n                });\r\n                var adfWindowTimeChangedFromWidget = $scope.$on('adfWindowTimeChangedFromWidget', function(event, widget, windowFilter) {\r\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\r\n                });\r\n\r\n                // edit dashboard settings\r\n                $scope.editDashboardDialog = function() {\r\n                    var editDashboardScope = getNewModalScope();\r\n                    // create a copy of the title, to avoid changing the title to\r\n                    // \"dashboard\" if the field is empty\r\n                    editDashboardScope.copy = {\r\n                        title: (model.title !== 'Empty Dashboard' ? model.title : ''),\r\n                        description: model.description,\r\n                        icon: model.icon ? model.icon : 'fa-tachometer'\r\n                    };\r\n\r\n                    // pass icon list\r\n                    editDashboardScope.availableIcons = $faIcons.list();\r\n\r\n                    // pass dashboard structure to scope\r\n                    editDashboardScope.structures = dashboard.structures;\r\n\r\n                    // pass split function to scope, to be able to display structures in multiple columns\r\n                    editDashboardScope.split = split;\r\n\r\n                    var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\r\n                    if (model.editTemplateUrl) {\r\n                        adfEditTemplatePath = model.editTemplateUrl;\r\n                    }\r\n                    var instance = $uibModal.open({\r\n                        scope: editDashboardScope,\r\n                        templateUrl: adfEditTemplatePath,\r\n                        backdrop: 'static',\r\n                        keyboard: false,\r\n                        size: 'lg'\r\n                    });\r\n\r\n                    editDashboardScope.changeStructure = function(name, structure) {\r\n                        $log.info('change structure to ' + name);\r\n                        changeStructure(model, structure);\r\n                        if (model.structure !== name) {\r\n                            model.structure = name;\r\n                        }\r\n                    };\r\n                    editDashboardScope.closeDialog = function() {\r\n                        // copy the new title back to the model\r\n                        model.title = editDashboardScope.copy.title;\r\n                        model.description = editDashboardScope.copy.description;\r\n                        model.icon = editDashboardScope.copy.icon;\r\n\r\n                        // close modal and destroy the scope\r\n                        instance.close();\r\n                        editDashboardScope.$destroy();\r\n                    };\r\n                };\r\n\r\n                var adfOpenWidgetFromOther = $scope.$on('adfOpenWidgetFromOther', function(event, widget, config) {\r\n                    var internal_config = createConfiguration(widget);\r\n                    var _config = angular.merge({}, internal_config, config);\r\n                    var w = {\r\n                        type: widget,\r\n                        config: _config,\r\n                        title: _config.title\r\n                    };\r\n                    addNewWidgetToModel(model, w, name, !$scope.editMode);\r\n                });\r\n\r\n                var adfOpenModalWidgetFromOther = $scope.$on('adfOpenModalWidgetFromOther', function(event, widgetType, config) {\r\n                    var widget = createWidget(widgetType);\r\n                    widget.config = angular.merge({}, widget.config, config);\r\n                    widget.type = widgetType;\r\n                    if (widget.config.title) {\r\n                        widget.title = widget.config.title;\r\n                    }\r\n                    var fullScreenScope = $scope.$new();\r\n                    fullScreenScope.definition = fullScreenScope.widget = widget;\r\n                    var opts = {\r\n                        scope: fullScreenScope,\r\n                        templateUrl: adfTemplatePath + 'widget-fullscreen.html',\r\n                        size: fullScreenScope.definition.modalSize || 'lg', // 'sm', 'lg'\r\n                        backdrop: 'static',\r\n                        windowClass: (fullScreenScope.definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\r\n                    };\r\n\r\n                    fullScreenScope.persistDashboard = function() {\r\n                        $rootScope.$broadcast('adfOpenWidgetFromOther', this.$parent.widget.type, this.$parent.widget.config);\r\n                        this.closeDialog();\r\n                    }\r\n\r\n                    var instance = $uibModal.open(opts);\r\n                    fullScreenScope.closeDialog = function() {\r\n                        instance.close();\r\n                        fullScreenScope.$destroy();\r\n                    };\r\n\r\n                });\r\n\r\n                var adfAddWidgetDialog = $scope.$on('adfAddWidgetDialog', function(event, isNewDashboard) {\r\n                    if (!model.temporal && model.editable) {\r\n                        if (!$scope.editMode) {\r\n                            $scope.editMode = true;\r\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n                            $rootScope.$broadcast('adfIsEditMode');\r\n                        }\r\n\r\n                        $scope.addWidgetDialog();\r\n                    }\r\n                });\r\n\r\n                // add widget dialog\r\n                $scope.addWidgetDialog = function() {\r\n                    var addScope = getNewModalScope();\r\n                    var widgets;\r\n                    if (angular.isFunction(widgetFilter)) {\r\n                        widgets = {};\r\n                        angular.forEach(dashboard.widgets, function(widget, type) {\r\n                            if (widgetFilter(widget, type, model)) {\r\n                                widgets[type] = widget;\r\n                            }\r\n                        });\r\n                    } else {\r\n                        widgets = dashboard.widgets;\r\n                    }\r\n                    addScope.widgets = widgets;\r\n\r\n                    //pass translate function to the new scope so we can translate the labels inside the modal dialog\r\n                    addScope.translate = $scope.translate;\r\n\r\n                    // pass createCategories function to scope, if categories option is enabled\r\n                    if ($scope.options.categories) {\r\n                        $scope.createCategories = createCategories;\r\n                    }\r\n\r\n                    var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\r\n                    if (model.addTemplateUrl) {\r\n                        adfAddTemplatePath = model.addTemplateUrl;\r\n                    }\r\n\r\n                    var opts = {\r\n                        scope: addScope,\r\n                        templateUrl: adfAddTemplatePath,\r\n                        backdrop: 'static'\r\n                    };\r\n\r\n                    var instance = $uibModal.open(opts);\r\n                    addScope.addWidget = function(widget) {\r\n                        var w = {\r\n                            type: widget,\r\n                            config: createConfiguration(widget)\r\n                        };\r\n                        addNewWidgetToModel(model, w, name);\r\n                        // close and destroy\r\n                        instance.close();\r\n                        addScope.$destroy();\r\n\r\n                        // check for open edit mode immediately\r\n                        if (isEditModeImmediate(widget)) {\r\n                            openEditMode($scope, w);\r\n                        }\r\n                    };\r\n                    addScope.closeDialog = function() {\r\n                        // close and destroy\r\n                        instance.close();\r\n                        addScope.$destroy();\r\n                    };\r\n                };\r\n\r\n                $scope.addNewWidgetToModel = addNewWidgetToModel;\r\n\r\n                $scope.$on('destroy', function() {\r\n                    adfLaunchSearchingFromWidget();\r\n                    adfWindowTimeChangedFromWidget();\r\n                    adfToggleEditMode();\r\n                    adfOpenWidgetFromOther();\r\n                    adfOpenModalWidgetFromOther();\r\n                    adfCancelEditMode();\r\n                    adfAddWidgetDialog();\r\n                    adfEditDashboardDialog();\r\n                });\r\n            }],\r\n            link: function($scope, $element, $attr) {\r\n                // pass options to scope\r\n                var options = {\r\n                    name: $attr.name,\r\n                    editable: true,\r\n                    enableConfirmDelete: stringToBoolean($attr.enableConfirmDelete),\r\n                    maximizable: stringToBoolean($attr.maximizable),\r\n                    collapsible: stringToBoolean($attr.collapsible),\r\n                    categories: stringToBoolean($attr.categories),\r\n                    extraData: {}\r\n                };\r\n\r\n                if (angular.isDefined($attr.editable)) {\r\n                    options.editable = stringToBoolean($attr.editable);\r\n                }\r\n\r\n                if (angular.isDefined($scope.extraData)) {\r\n                    options.extraData = $scope.extraData;\r\n                }\r\n\r\n                options.extraData.editing = $scope.editMode;\r\n\r\n                $scope.options = options;\r\n            },\r\n            templateUrl: adfTemplatePath + 'dashboard.html'\r\n        };\r\n    }]);\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\n/**\r\n * @ngdoc object\r\n * @name adf.locale#adfLocale\r\n * @description\r\n *\r\n * Holds settings and values for framework supported locales\r\n */\r\nangular.module('adf.locale')\r\n    .constant('adfLocale', {\r\n        defaultLocale: 'en-GB',\r\n        frameworkLocales: {\r\n            'en-GB': {\r\n                ADF_COMMON_CLOSE: 'Close',\r\n                ADF_COMMON_DELETE: 'Delete',\r\n                ADF_COMMON_TITLE: 'Title',\r\n                ADF_COMMON_DESCRIPTION: 'Description',\r\n                ADF_COMMON_CANCEL: 'Cancel',\r\n                ADF_COMMON_APPLY: 'Apply',\r\n                ADF_COMMON_EDIT_DASHBOARD: 'Edit dashboard',\r\n                ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Structure',\r\n                ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Add new widget',\r\n                ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Save changes',\r\n                ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Enable edit mode',\r\n                ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Undo changes',\r\n                ADF_WIDGET_ADD_HEADER: 'Add new widget',\r\n                ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Are you sure you want to delete this widget ?',\r\n                ADF_WIDGET_TOOLTIP_REFRESH: 'Reload widget Content',\r\n                ADF_WIDGET_TOOLTIP_PRINT: 'Print widget Content',\r\n                ADF_WIDGET_TOOLTIP_FILTER: 'Show widget Filter',\r\n                ADF_WIDGET_TOOLTIP_SORT: 'Show widget Sort',\r\n                ADF_WIDGET_TOOLTIP_MOVE: 'Change widget location',\r\n                ADF_WIDGET_TOOLTIP_COLLAPSE: 'Collapse widget',\r\n                ADF_WIDGET_TOOLTIP_EXPAND: 'Expand widget',\r\n                ADF_WIDGET_TOOLTIP_EDIT: 'Edit widget configuration',\r\n                ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Fullscreen widget',\r\n                ADF_WIDGET_TOOLTIP_REMOVE: 'Remove widget',\r\n                ADF_WIDGET_TOOLTIP_OPERATION: 'Execute operation',\r\n                ADF_WIDGET_TOOLTIP_SELECTION: 'Items selected',\r\n                ADF_WIDGET_CLEAR: 'Clear',\r\n                ADF_WIDGET_RESTORE: 'Restore',\r\n                ADF_WIDGET_FILTER: 'Filter'\r\n            },\r\n            'sv-SE': {\r\n                ADF_COMMON_CLOSE: 'Stäng',\r\n                ADF_COMMON_DELETE: 'Ta bort',\r\n                ADF_COMMON_TITLE: 'Titel',\r\n                ADF_COMMON_DESCRIPTION: 'Description',\r\n                ADF_COMMON_CANCEL: 'Avbryt',\r\n                ADF_COMMON_APPLY: 'Använd',\r\n                ADF_COMMON_EDIT_DASHBOARD: 'Redigera dashboard',\r\n                ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Struktur',\r\n                ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Lägg till ny widget',\r\n                ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Spara förändringar',\r\n                ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Slå på redigeringsläge',\r\n                ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Ångra förändringar',\r\n                ADF_WIDGET_ADD_HEADER: 'Lägg till ny widget',\r\n                ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Är du säker på att du vill ta bort denna widget ?',\r\n                ADF_WIDGET_TOOLTIP_REFRESH: 'Ladda om widget',\r\n                ADF_WIDGET_TOOLTIP_FILTER: 'Show widget Filter',\r\n                ADF_WIDGET_TOOLTIP_SORT: 'Show widget Sort',\r\n                ADF_WIDGET_TOOLTIP_MOVE: 'Ändra widgets position',\r\n                ADF_WIDGET_TOOLTIP_COLLAPSE: 'Stäng widget',\r\n                ADF_WIDGET_TOOLTIP_EXPAND: 'Öppna widget',\r\n                ADF_WIDGET_TOOLTIP_EDIT: 'Ändra widget konfigurering',\r\n                ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Visa widget i fullskärm',\r\n                ADF_WIDGET_TOOLTIP_REMOVE: 'Ta bort widget',\r\n                ADF_WIDGET_TOOLTIP_OPERATION: 'Execute operation',\r\n                ADF_WIDGET_TOOLTIP_SELECTION: 'Items selected',\r\n                ADF_WIDGET_CLEAR: 'Clear',\r\n                ADF_WIDGET_RESTORE: 'Restore',\r\n                ADF_WIDGET_FILTER: 'Filter'\r\n            }\r\n        }\r\n    });\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .filter('adfOrderByObjectKey', [\"$filter\", function($filter) {\r\n    \r\n\r\n    return function(item, key){\r\n      var array = [];\r\n      angular.forEach(item, function(value, objectKey){\r\n        value[key] = objectKey;\r\n        array.push(value);\r\n      });\r\n      return $filter('orderBy')(array, key);\r\n    };\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\n/**\r\n * @ngdoc object\r\n * @name adf.dashboardProvider\r\n * @description\r\n *\r\n * The dashboardProvider can be used to register structures and widgets.\r\n */\r\nangular.module('adf.provider', ['adf.locale'])\r\n    .provider('dashboard', [\"adfLocale\", function(adfLocale) {\r\n\r\n        var widgets = {};\r\n        var widgetsPath = '';\r\n        var structures = {};\r\n        var messageTemplate = '<div class=\"alert alert-primary\">{}</div>';\r\n        var loadingTemplate = '\\\r\n      <div class=\"progress progress-striped active\">\\n\\\r\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\r\n          <span class=\"sr-only\">loading ...</span>\\n\\\r\n        </div>\\n\\\r\n      </div>';\r\n        var customWidgetTemplatePath = null;\r\n\r\n        // default apply function of widget.edit.apply\r\n        var defaultApplyFunction = function() {\r\n            return true;\r\n        };\r\n\r\n        var activeLocale = adfLocale.defaultLocale;\r\n        var locales = adfLocale.frameworkLocales;\r\n\r\n        function getLocales() {\r\n            return locales;\r\n        }\r\n\r\n        function getActiveLocale() {\r\n            return activeLocale;\r\n        }\r\n\r\n        function translate(label) {\r\n            var translation = locales[activeLocale][label];\r\n            return translation ? translation : label;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#widget\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Registers a new widget.\r\n         *\r\n         * @param {string} name of the widget\r\n         * @param {object} widget to be registered.\r\n         *\r\n         *   Object properties:\r\n         *\r\n         *   - `title` - `{string=}` - The title of the widget.\r\n         *   - `description` - `{string=}` - Description of the widget.\r\n         *   - `category` - `{string=}` - Category of the widget.\r\n         *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\r\n         *   - `config` - `{object}` - Predefined widget configuration.\r\n         *   - `controller` - `{string=|function()=}` - Controller fn that should be\r\n         *      associated with newly created scope of the widget or the name of a\r\n         *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\r\n         *      if passed as a string.\r\n         *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\r\n         *      published to scope under the `controllerAs` name.\r\n         *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\r\n         *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\r\n         *   - `template` - `{string=|function()=}` - html template as a string.\r\n         *   - `templateUrl` - `{string=}` - path to an html template.\r\n         *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\r\n         *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n         *      be injected into the controller. If any of these dependencies are promises, the widget\r\n         *      will wait for them all to be resolved or one to be rejected before the controller is\r\n         *      instantiated.\r\n         *      If all the promises are resolved successfully, the values of the resolved promises are\r\n         *      injected.\r\n         *\r\n         *      The map object is:\r\n         *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\r\n         *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n         *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\r\n         *        and the return value is treated as the dependency. If the result is a promise, it is\r\n         *        resolved before its value is injected into the controller.\r\n         *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n         *      on the scope of the widget.\r\n         *   - `edit` - `{object}` - Edit modus of the widget.\r\n         *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\r\n         *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n         *        on the scope of the widget.\r\n         *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\r\n         *        Default is true.\r\n         *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\r\n         *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\r\n         *        The function have to return a boolean or an promise which can be resolved to a boolean.\r\n         *        The function can use injection.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.widget = function(name, widget) {\r\n            var w = angular.extend({ reload: false, frameless: false }, widget);\r\n            if (w.edit) {\r\n                var edit = {\r\n                    reload: true,\r\n                    immediate: false,\r\n                    apply: defaultApplyFunction\r\n                };\r\n                angular.extend(edit, w.edit);\r\n                w.edit = edit;\r\n            }\r\n            widgets[name] = w;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#widgetsPath\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Sets the path to the directory which contains the widgets. The widgets\r\n         * path is used for widgets with a templateUrl which contains the\r\n         * placeholder {widgetsPath}. The placeholder is replaced with the\r\n         * configured value, before the template is loaded, but the template is\r\n         * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\r\n         * The default value of widgetPaths is ''.\r\n         *\r\n         *\r\n         * @param {string} path to the directory which contains the widgets\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.widgetsPath = function(path) {\r\n            widgetsPath = path;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#structure\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Registers a new structure.\r\n         *\r\n         * @param {string} name of the structure\r\n         * @param {object} structure to be registered.\r\n         *\r\n         *   Object properties:\r\n         *\r\n         *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\r\n         *     - `styleClass` - `{string}` - CSS Class of the row.\r\n         *     - `columns` - `{Array.<Object>}` - Columns of the row.\r\n         *       - `styleClass` - `{string}` - CSS Class of the column.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.structure = function(name, structure) {\r\n            structures[name] = structure;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#messageTemplate\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the template for messages.\r\n         *\r\n         * @param {string} template for messages.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.messageTemplate = function(template) {\r\n            messageTemplate = template;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#loadingTemplate\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the template which is displayed as\r\n         * long as the widget resources are not resolved.\r\n         *\r\n         * @param {string} template loading template\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.loadingTemplate = function(template) {\r\n            loadingTemplate = template;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#customWidgetTemplatePath\r\n         * @propertyOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the container template for the widgets\r\n         *\r\n         * @param {string} path to the custom widget template\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.customWidgetTemplatePath = function(templatePath) {\r\n            customWidgetTemplatePath = templatePath;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#setLocale\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Changes the locale setting of adf\r\n         *\r\n         * @param {string} ISO Language Code\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.setLocale = function(locale) {\r\n            if (locales[locale]) {\r\n                activeLocale = locale;\r\n            } else {\r\n                throw new Error('Cannot set locale: ' + locale + '. Locale is not defined.');\r\n            }\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboardProvider#addLocale\r\n         * @methodOf adf.dashboardProvider\r\n         * @description\r\n         *\r\n         * Adds a new locale to adf\r\n         *\r\n         * @param {string} ISO Language Code for the new locale\r\n         * @param {object} translations for the locale.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.addLocale = function(locale, translations) {\r\n            if (!angular.isString(locale)) {\r\n                throw new Error('locale must be an string');\r\n            }\r\n\r\n            if (!angular.isObject(translations)) {\r\n                throw new Error('translations must be an object');\r\n            }\r\n\r\n            locales[locale] = translations;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc service\r\n         * @name adf.dashboard\r\n         * @description\r\n         *\r\n         * The dashboard holds all options, structures and widgets.\r\n         *\r\n         * @property {Array.<Object>} widgets Array of registered widgets.\r\n         * @property {string} widgetsPath Default path for widgets.\r\n         * @property {Array.<Object>} structures Array of registered structures.\r\n         * @property {string} messageTemplate Template for messages.\r\n         * @property {string} loadingTemplate Template for widget loading.\r\n         * @property {method} sets locale of adf.\r\n         * @property {Array.<Object>} hold all of the locale translations.\r\n         * @property {string} the active locale setting.\r\n         * @property {method} translation function passed to templates.\r\n         *\r\n         * @returns {Object} self\r\n         */\r\n        this.$get = function() {\r\n            var cid = 0;\r\n\r\n            return {\r\n                widgets: widgets,\r\n                widgetsPath: widgetsPath,\r\n                structures: structures,\r\n                messageTemplate: messageTemplate,\r\n                loadingTemplate: loadingTemplate,\r\n                setLocale: this.setLocale,\r\n                locales: getLocales,\r\n                activeLocale: getActiveLocale,\r\n                translate: translate,\r\n                customWidgetTemplatePath: customWidgetTemplatePath,\r\n\r\n                /**\r\n                 * @ngdoc method\r\n                 * @name adf.dashboard#id\r\n                 * @methodOf adf.dashboard\r\n                 * @description\r\n                 *\r\n                 * Creates an ongoing numeric id. The method is used to create ids for\r\n                 * columns and widgets in the dashboard.\r\n                 */\r\n                id: function() {\r\n                    return new Date().getTime() + '-' + (++cid);\r\n                },\r\n\r\n                /**\r\n                 * @ngdoc method\r\n                 * @name adf.dashboard#idEqual\r\n                 * @methodOf adf.dashboard\r\n                 * @description\r\n                 *\r\n                 * Checks if the given ids are equal.\r\n                 *\r\n                 * @param {string} id widget or column id\r\n                 * @param {string} other widget or column id\r\n                 */\r\n                idEquals: function(id, other) {\r\n                    // use toString, because old ids are numbers\r\n                    return ((id) && (other)) && (id.toString() === other.toString());\r\n                }\r\n            };\r\n        };\r\n\r\n    }]);\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardRow', [\"$compile\", \"adfTemplatePath\", \"columnTemplate\", function ($compile, adfTemplatePath, columnTemplate) {\r\n    \r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        row: '=',\r\n        adfModel: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\r\n      link: function($scope, $element) {\r\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\r\n          $compile(columnTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        }\r\n      }\r\n    };\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfStructurePreview', [\"adfTemplatePath\", function(adfTemplatePath) {\r\n\r\n    function adjustRowHeight(container){\r\n      if (container.rows && container.rows.length > 0){\r\n        var height = 100 / container.rows.length;\r\n        angular.forEach(container.rows, function(row){\r\n          row.style = {\r\n            height: height + '%'\r\n          }\r\n\r\n          if (row.columns){\r\n            angular.forEach(row.columns, function(column){\r\n              adjustRowHeight(column);\r\n            });\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    function prepareStructure($scope){\r\n      var structure = angular.copy($scope.structure);\r\n      adjustRowHeight(structure);\r\n      $scope.preview = structure;\r\n    }\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        name: '=',\r\n        structure: '=',\r\n        selected: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'structure-preview.html',\r\n      link: prepareStructure\r\n    };\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf')\r\n    .directive('adfWidgetContent', [\"$log\", \"$q\", \"widgetService\", \"$compile\", \"$controller\", \"$injector\", \"dashboard\", function($log, $q, widgetService,\r\n        $compile, $controller, $injector, dashboard) {\r\n\r\n        function renderError($element, msg) {\r\n            $log.warn(msg);\r\n            $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\r\n        }\r\n\r\n        function compileWidget($scope, $element, currentScope, configChanged) {\r\n            var model = $scope.model;\r\n            var content = $scope.content;\r\n\r\n            var extra = $scope.extra;\r\n\r\n            var newScope = currentScope;\r\n            if (!model) {\r\n                renderError($element, 'model is undefined');\r\n            } else if (!content) {\r\n                //var msg = 'widget content is undefined, please have a look at your browser log';\r\n                var msg = 'Widget ' + (model.title ? 'for \"' + model.title + '\"' : '') + ' has been deprecated. In order to continue you have to delete this one and look for the equivalent one.';\r\n                renderError($element, msg);\r\n            } else {\r\n                if (newScope) {\r\n                    var is_menu = newScope.menu !== undefined && newScope.menu !== null;\r\n                    var is_itemsPerPage = newScope.itemsPerPage !== undefined && newScope.itemsPerPage !== null;\r\n                    if (is_menu || is_itemsPerPage || configChanged || !angular.isFunction(newScope.reloadData)) {\r\n                        newScope = renderWidget($scope, $element, currentScope, model, content, extra);\r\n                    } else {\r\n                        newScope.reloadData();\r\n                    }\r\n                } else {\r\n                    newScope = renderWidget($scope, $element, currentScope, model, content, extra);\r\n                }\r\n            }\r\n\r\n            function _getWindowTime(type) {\r\n                if (type === \"custom\") {\r\n                    return {\r\n                        from: newScope.config.windowFilter.from,\r\n                        to: newScope.config.windowFilter.to\r\n                    }\r\n                }\r\n                var from = window.moment().subtract(1, type);\r\n                return {\r\n                    from: from._d\r\n                };\r\n            }\r\n\r\n            if (newScope) {\r\n                if (newScope.config) {\r\n                    newScope.config.getWindowTime = function() {\r\n                        var windowFilter = newScope.config.windowFilter;\r\n                        if (windowFilter && windowFilter.type) {\r\n                            var winTime = _getWindowTime(windowFilter.type);\r\n                            /* jshint ignore:start */\r\n                            if (!window.eval(newScope.config.windowFilter.rawdate)) {\r\n                                for (var key in winTime) {\r\n                                    winTime[key] = window.moment(winTime[key]).format();\r\n                                }\r\n                                winTime['rawdate'] = true;\r\n                            }\r\n                            /* jshint ignore:end */\r\n                            return winTime;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (extra) {\r\n                    newScope.editing = extra.editing ? true : false;\r\n                    newScope.extraData = extra;\r\n                }\r\n            }\r\n            return newScope;\r\n        }\r\n\r\n        function renderWidget($scope, $element, currentScope, model, content, extra) {\r\n            // display loading template\r\n            $element.html(dashboard.loadingTemplate);\r\n\r\n            // create new scope\r\n            var templateScope = $scope.$new();\r\n\r\n            // pass config object to scope\r\n            if (!model.config) {\r\n                model.config = {};\r\n            }\r\n\r\n            templateScope.config = model.config;\r\n            templateScope.editing = extra && extra.editing;\r\n\r\n            if (extra) {\r\n                templateScope.extra = extra;\r\n            }\r\n\r\n            templateScope.selectionManager = (currentScope && currentScope.selectionManager) ? currentScope.selectionManager : undefined;\r\n\r\n            // local injections\r\n            var base = {\r\n                $scope: templateScope,\r\n                widget: model,\r\n                config: model.config\r\n            };\r\n\r\n            // get resolve promises from content object\r\n            var resolvers = {};\r\n            resolvers.$tpl = widgetService.getTemplate(content);\r\n            if (content.resolve) {\r\n                angular.forEach(content.resolve, function(promise, key) {\r\n                    if (angular.isString(promise)) {\r\n                        resolvers[key] = $injector.get(promise);\r\n                    } else {\r\n                        resolvers[key] = $injector.invoke(promise, promise, base);\r\n                    }\r\n                });\r\n            }\r\n\r\n            // resolve all resolvers\r\n            $q.all(resolvers).then(function(locals) {\r\n                angular.extend(locals, base);\r\n\r\n                // pass resolve map to template scope as defined in resolveAs\r\n                if (content.resolveAs) {\r\n                    templateScope[content.resolveAs] = locals;\r\n                }\r\n\r\n                // compile & render template\r\n                var template = locals.$tpl;\r\n                $element.html(template);\r\n                if (content.controller) {\r\n                    var templateCtrl = $controller(content.controller, locals);\r\n                    if (content.controllerAs) {\r\n                        templateScope[content.controllerAs] = templateCtrl;\r\n                    }\r\n                    $element.children().data('$ngControllerController', templateCtrl);\r\n                }\r\n                $compile($element.contents())(templateScope);\r\n            }, function(reason) {\r\n                // handle promise rejection\r\n                var msg = 'Could not resolve all promises';\r\n                if (reason) {\r\n                    msg += ': ' + reason;\r\n                }\r\n                renderError($element, msg);\r\n            });\r\n\r\n            // destroy old scope\r\n            if (currentScope) {\r\n                currentScope.$destroy();\r\n            }\r\n\r\n            return templateScope;\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            scope: {\r\n                model: '=',\r\n                content: '=',\r\n                extra: '='\r\n            },\r\n            link: function($scope, $element) {\r\n                var currentScope = compileWidget($scope, $element, null);\r\n                var widgetConfigChangedEvt = $scope.$on('widgetConfigChanged', function() {\r\n                    currentScope = compileWidget($scope, $element, currentScope, true);\r\n                });\r\n\r\n                var widgetReloadEvt = $scope.$on('widgetReload', function() {\r\n                    currentScope = compileWidget($scope, $element, currentScope, false);\r\n                });\r\n\r\n                $scope.$on('destroy', function() {\r\n                    widgetConfigChangedEvt();\r\n                    widgetReloadEvt();\r\n                });\r\n            }\r\n        };\r\n    }]);\n\r\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n/**\r\n * The widget service provide helper functions to render widgets and their content.\r\n */\r\nangular.module('adf')\r\n  .factory('widgetService', [\"$http\", \"$q\", \"$sce\", \"$templateCache\", \"dashboard\", function($http, $q, $sce, $templateCache, dashboard) {\r\n    \r\n\r\n    function parseUrl(url) {\r\n      var parsedUrl = url;\r\n      if (url.indexOf('{widgetsPath}') >= 0) {\r\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\r\n                .replace('//', '/');\r\n        if (parsedUrl.indexOf('/') === 0) {\r\n          parsedUrl = parsedUrl.substring(1);\r\n        }\r\n      }\r\n      return parsedUrl;\r\n    }\r\n\r\n    var exposed = {};\r\n\r\n    exposed.getTemplate = function(widget){\r\n      var deferred = $q.defer();\r\n\r\n      if (widget.template) {\r\n        deferred.resolve(widget.template);\r\n      } else if (widget.templateUrl) {\r\n        // try to fetch template from cache\r\n        var tpl = $templateCache.get(widget.templateUrl);\r\n        if (tpl) {\r\n          deferred.resolve(tpl);\r\n        } else {\r\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\r\n          $http.get(url)\r\n               .success(function(response) {\r\n                 // put response to cache, with unmodified url as key\r\n                 $templateCache.put(widget.templateUrl, response);\r\n                 deferred.resolve(response);\r\n               })\r\n               .error(function() {\r\n                 deferred.reject('could not load template');\r\n               });\r\n        }\r\n      }\r\n\r\n      return deferred.promise;\r\n    };\r\n\r\n    return exposed;\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf')\r\n    .directive('adfWidget', [\"$injector\", \"$q\", \"$log\", \"$uibModal\", \"$rootScope\", \"$interval\", \"dashboard\", \"adfTemplatePath\", \"Filter\", function($injector, $q, $log, $uibModal, $rootScope, $interval, dashboard, adfTemplatePath, Filter) {\r\n        function preLink($scope) {\r\n            var definition = $scope.definition;\r\n\r\n            //passs translate function from dashboard so we can translate labels inside html templates\r\n            $scope.translate = dashboard.translate;\r\n\r\n            if (definition) {\r\n                var w = dashboard.widgets[definition.type];\r\n                if (w) {\r\n                    // pass title\r\n                    if (!definition.title) {\r\n                        definition.title = w.title;\r\n                    }\r\n\r\n                    if (!definition.titleTemplateUrl) {\r\n                        definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\r\n                        if (w.titleTemplateUrl) {\r\n                            definition.titleTemplateUrl = w.titleTemplateUrl;\r\n                        }\r\n                    }\r\n\r\n                    if (!definition.editTemplateUrl) {\r\n                        definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\r\n                        if (w.editTemplateUrl) {\r\n                            definition.editTemplateUrl = w.editTemplateUrl;\r\n                        }\r\n                    }\r\n\r\n                    if (!definition.titleTemplateUrl) {\r\n                        definition.frameless = w.frameless;\r\n                    }\r\n\r\n                    if (!definition.styleClass) {\r\n                        definition.styleClass = w.styleClass;\r\n                    }\r\n\r\n                    // set id for sortable\r\n                    if (!definition.wid) {\r\n                        definition.wid = dashboard.id();\r\n                    }\r\n\r\n                    // pass copy of widget to scope\r\n                    $scope.widget = angular.copy(w);\r\n\r\n                    // create config object\r\n                    var config = definition.config;\r\n                    if (config) {\r\n                        if (angular.isString(config)) {\r\n                            config = angular.fromJson(config);\r\n                        }\r\n                    } else {\r\n                        config = {};\r\n                    }\r\n\r\n                    if (!config.reloadPeriod) {\r\n                        config.reloadPeriod = \"0\";\r\n                    }\r\n\r\n                    if (typeof $scope.widget.show_modal_footer === \"undefined\") {\r\n                        $scope.widget.show_modal_footer = true;\r\n                    }\r\n\r\n                    if (typeof $scope.widget.show_reload_config === \"undefined\") {\r\n                        $scope.widget.show_reload_config = true;\r\n                    }\r\n\r\n                    // pass config to scope\r\n                    $scope.config = config;\r\n\r\n                    // collapse exposed $scope.widgetState property\r\n                    if (!$scope.widgetState) {\r\n                        $scope.widgetState = {};\r\n                        $scope.widgetState.isCollapsed = (w.collapsed === true) ? w.collapsed : false;\r\n                    }\r\n\r\n                } else {\r\n                    $log.warn('could not find widget ' + definition.type);\r\n                }\r\n            } else {\r\n                $log.debug('definition not specified, widget was probably removed');\r\n            }\r\n        }\r\n\r\n        function postLink($scope, $element) {\r\n            var definition = $scope.definition;\r\n            if (!definition) {\r\n                $log.debug('widget not found');\r\n                return;\r\n            }\r\n            if (!$scope.config) {\r\n                $scope.config = {};\r\n            }\r\n\r\n            var config = $scope.config;\r\n\r\n            // bind close function\r\n            var deleteWidget = function() {\r\n                var column = $scope.col;\r\n                if (column) {\r\n                    var index = column.widgets.indexOf(definition);\r\n                    if (index >= 0) {\r\n                        column.widgets.splice(index, 1);\r\n                    }\r\n                }\r\n                $element.remove();\r\n                $rootScope.$broadcast('adfWidgetRemovedFromColumn');\r\n            };\r\n\r\n            $scope.remove = function() {\r\n                if ($scope.options.enableConfirmDelete) {\r\n                    var deleteScope = $scope.$new();\r\n                    deleteScope.translate = dashboard.translate;\r\n\r\n                    var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\r\n                    if (definition.deleteTemplateUrl) {\r\n                        deleteTemplateUrl = definition.deleteTemplateUrl;\r\n                    }\r\n                    var opts = {\r\n                        scope: deleteScope,\r\n                        templateUrl: deleteTemplateUrl,\r\n                        backdrop: 'static'\r\n                    };\r\n                    var instance = $uibModal.open(opts);\r\n\r\n                    deleteScope.closeDialog = function() {\r\n                        instance.close();\r\n                        deleteScope.$destroy();\r\n                    };\r\n                    deleteScope.deleteDialog = function() {\r\n                        deleteWidget();\r\n                        deleteScope.closeDialog();\r\n                    };\r\n                } else {\r\n                    deleteWidget();\r\n                }\r\n            };\r\n\r\n\r\n            $scope.print = function() {\r\n                if (!$scope.editMode) {\r\n                    $scope.$broadcast('widgetPrint');\r\n                }\r\n            }\r\n\r\n            $scope.isExecuteOperationEnabled = function() {\r\n                // if ($scope.selectionManager.totalSelected() > 0)\r\n                //     return true;\r\n                if (config.entityKey)\r\n                    return true;\r\n                var filter = config.filter;\r\n                if (typeof filter === \"string\") {\r\n                    return filter.length > 0;\r\n                }\r\n                if (typeof filter === \"object\") {\r\n                    return filter.value.length > 2 && filter.oql;\r\n                }\r\n                return false;\r\n            }\r\n\r\n            $scope.executeOperation = function() {\r\n                if (!$scope.editMode) {\r\n                    // if ($scope.selectionManager.totalSelected() > 0) {\r\n                    //     var selectedItems = [];\r\n                    //     angular.forEach($scope.selectionManager.currentSelection, function(data, key) {\r\n                    //         selectedItems.push({ key: key, value: data });\r\n                    //     });\r\n                    //     $scope.$parent.$broadcast('widgetExecuteOperation', { 'selectedItems': selectedItems });\r\n                    // } else {\r\n                    $scope.$parent.$broadcast('widgetExecuteOperation');\r\n                    // }\r\n                }\r\n            };\r\n\r\n            // bind reload function\r\n            var stopReloadTimeout;\r\n\r\n            function _setReloadTimeout() {\r\n                if (config && config.reloadPeriod && config.reloadPeriod !== \"0\") {\r\n                    if (angular.isDefined(stopReloadTimeout)) {\r\n                        $interval.cancel(stopReloadTimeout)\r\n                        stopReloadTimeout = undefined;\r\n                    };\r\n                    stopReloadTimeout = $interval($scope.reload, (config.reloadPeriod * 1000));\r\n                }\r\n            }\r\n\r\n            $scope.reload = function(completeReload) {\r\n                if (completeReload) {\r\n                    $scope.$broadcast('widgetReload', completeReload);\r\n                } else {\r\n                    $scope.$broadcast('widgetReload');\r\n                }\r\n\r\n                _setReloadTimeout();\r\n            };\r\n\r\n            // verificacion de periodo de refresco\r\n            _setReloadTimeout();\r\n\r\n            $element.on('$destroy', function() {\r\n                $interval.cancel(stopReloadTimeout);\r\n            });\r\n\r\n            $scope.filter = {\r\n                value: \"\"\r\n            };\r\n            $scope.sort = {\r\n                value: \"\",\r\n                direction: \"\"\r\n            };\r\n\r\n            $scope.toggleAdvanced = 1;\r\n            var filter = config.filter;\r\n            if (typeof filter === \"object\" && filter.oql && filter.oql.length > 2) {\r\n                $scope.search = {\r\n                    oql: filter.oql,\r\n                    json: filter.value\r\n                };\r\n                $scope.toggleAdvanced = 0;\r\n            } else if (typeof filter === \"string\") {\r\n                $scope.search = {\r\n                    quick: filter\r\n                };\r\n                $scope.toggleAdvanced = 1;\r\n            } else if (typeof filter === \"object\" && filter.fields) {\r\n                $scope.search = {\r\n                    customFilter: filter.fields\r\n                };\r\n                $scope.search.fields = [];\r\n                angular.forEach(filter.fields, function(v, key) {\r\n                    $scope.search.fields.push(v.name);\r\n                });\r\n                $scope.toggleAdvanced = 2;\r\n            } else {\r\n                $scope.search = {\r\n                    quick: filter = \"\"\r\n                };\r\n            }\r\n\r\n            $scope.toggleFilter = function(advanced) {\r\n                $scope.toggleAdvanced = advanced;\r\n            };\r\n            $scope.filterAvailable = false;\r\n            $scope.showFilter = function() {\r\n                $scope.filterAvailable = $scope.filterAvailable === true ? false : true;\r\n            };\r\n\r\n            $scope.showFinalFilter = false;\r\n\r\n            $scope.launchSearching = function() {\r\n                var widget = {\r\n                    definition: definition,\r\n                    element: $element\r\n                };\r\n\r\n                $rootScope.$broadcast('adfLaunchSearchingFromWidget', widget, $scope.config.filter);\r\n                $scope.reload(true);\r\n            }\r\n            $scope.addCustomFilter = function(key) {\r\n                $scope.search.customFilter = $scope.search.customFilter ? $scope.search.customFilter : [];\r\n                $scope.search.customFilter.push({ name: key, value: '' });\r\n            }\r\n\r\n            $scope.launchCustomFilter = function() {\r\n                if ($scope.search.customFilter && $scope.search.customFilter.length > 0) {\r\n                    $scope.search.oql = $scope.search.json = '';\r\n\r\n                    $scope.config.filter = {\r\n                        value: {\r\n                            and: []\r\n                        },\r\n                        fields: $scope.search.customFilter\r\n                    }\r\n                    angular.forEach($scope.search.customFilter, function(v, key) {\r\n                        if (v.value) {\r\n                            var like = {};\r\n                            like[v.name] = v.value;\r\n                            $scope.config.filter.value.and.push({ 'like': like });\r\n                        }\r\n\r\n                    });\r\n                    $scope.config.filter.value = JSON.stringify($scope.config.filter.value);\r\n                }\r\n\r\n                $scope.launchSearching();\r\n            }\r\n\r\n\r\n\r\n            $scope.deleteFilter = function(value, model) {\r\n                angular.forEach($scope.search.customFilter, function(v, key) {\r\n                    if (v.name === value) {\r\n                        $scope.search.customFilter.splice(key, 1);\r\n                    }\r\n                });\r\n                if ($scope.search.customFilter.length === 0) {\r\n                    $scope.config.filter = {};\r\n                }\r\n            };\r\n\r\n\r\n            $scope.launchSearchingAdv = function() {\r\n                $scope.search.quick = '';\r\n                if ($scope.search.json === '' || $scope.search.json === '{}' || (!angular.isString($scope.search.json) && Object.keys($scope.search.json).length === 0)) {\r\n                    $scope.config.filter = {\r\n                        oql: '',\r\n                        value: ''\r\n                    };\r\n                } else {\r\n                    $scope.config.filter = {\r\n                        oql: $scope.search.oql,\r\n                        value: $scope.search.json\r\n                    };\r\n                }\r\n                $scope.launchSearching();\r\n\r\n            }\r\n\r\n            $scope.applyFilter = function(event) {\r\n                $scope.launchSearching();\r\n            }\r\n\r\n            $scope.launchSearchingQuick = function() {\r\n                $scope.search.oql = $scope.search.json = '';\r\n                $scope.config.filter = $scope.search.quick;\r\n                $scope.launchSearching();\r\n            }\r\n\r\n            var windowTimeChanged = $scope.$on('onWindowTimeChanged', function(event, timeObj) {\r\n                $scope.config.windowFilter = timeObj ? timeObj : (config.windowFilter ? {} : timeObj);\r\n                var widget = {\r\n                    definition: definition,\r\n                    element: $element\r\n                }\r\n                $rootScope.$broadcast('adfWindowTimeChangedFromWidget', widget, $scope.config.windowFilter);\r\n                $scope.reload();\r\n            });\r\n\r\n            $scope.enter = function(event) {\r\n                var keycode = (event.keyCode ? event.keyCode : event.which);\r\n                if (keycode === 13) {\r\n                    if ($scope.toggleAdvanced === 0)\r\n                        $scope.launchSearchingAdv();\r\n                    if ($scope.toggleAdvanced === 1)\r\n                        $scope.launchSearchingQuick();\r\n                    if ($scope.toggleAdvanced === 2)\r\n                        $scope.launchCustomFilter();\r\n\r\n                }\r\n                if (keycode === 19) {\r\n                    $scope.showFinalFilter = $scope.showFinalFilter === false ? true : false;\r\n                }\r\n            }\r\n\r\n\r\n            $scope.customSelectors = [];\r\n            $scope.getCustomSelectors = function() {\r\n                config.widgetSelectors().findFields(\"\").then(function(fields) {\r\n                    $scope.customSelectors = fields;\r\n                    $scope.$apply();\r\n                }).catch(function(err) {\r\n                    $log.error(err);\r\n                });\r\n\r\n            }\r\n\r\n            $scope.customFilter = [];\r\n            $scope.getcustomFilter = function() {\r\n                config.widgetSelectors().findFields(\"\").then(function(fields) {\r\n                    $scope.customFilter = fields;\r\n                    $scope.$apply();\r\n                }).catch(function(err) {\r\n                    $log.error(err);\r\n                });\r\n\r\n            }\r\n\r\n            $scope.ifCustomFilter = function() {\r\n                return $scope.customSelectors && config.sort && $scope.definition.type === 'FullDevicesList' && $scope.toggleAdvanced === 2;\r\n            }\r\n\r\n            $scope.showCustomFields = function() {\r\n                return $scope.definition.type === 'FullDevicesList' && $scope.toggleAdvanced === 2 && $scope.search.customFilter && $scope.filterAvailable && !$scope.editMode;\r\n            }\r\n\r\n            $scope.changeDirection = function() {\r\n                var direction = config.sort.direction;\r\n                if (direction === 'DESCENDING') {\r\n                    $scope.config.sort.direction = 'ASCENDING'\r\n                } else if (direction === 'ASCENDING') {\r\n                    $scope.config.sort.direction = 'DESCENDING'\r\n                }\r\n                $scope.reload();\r\n            }\r\n\r\n            $scope.debugQuery = function() {\r\n                Filter.parseQuery($scope.search.oql || '')\r\n                    .then(function(data) {\r\n                        //$scope.elementos = data;\r\n                        $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\r\n                        $scope.unknownWords = '';\r\n                        $scope.filter.error = null;\r\n                    })\r\n                    .catch(function(err) {\r\n                        $scope.filter.error = err;\r\n                        // Tratar el error\r\n                    });\r\n\r\n            }\r\n\r\n            $scope.autocomplete_options = function() {\r\n                var autocomplete_options = {\r\n                    suggest: Filter.suggest_field_delimited,\r\n                    customSelectors: config.widgetSelectors()\r\n                };\r\n\r\n                return autocomplete_options;\r\n\r\n            };\r\n\r\n            // Multiple selection\r\n            $scope.selectedItems = {};\r\n\r\n            // Gestor de seleccion\r\n            $scope.selectionManager = {\r\n                currentSelection: $scope.selectedItems,\r\n                isSelected: function(key, obj) {\r\n                    if ($scope.selectedItems[key] && !angular.isUndefined(obj)) {\r\n                        $scope.selectedItems[key].data = obj;\r\n                    }\r\n\r\n                    return $scope.selectedItems[key] ? true : false;\r\n                },\r\n                totalSelected: function() {\r\n                    return Object.keys($scope.selectedItems).length;\r\n                }\r\n            };\r\n\r\n            $scope.manageSelectedItems = function() {\r\n                var selectionScope = $scope.$new();\r\n\r\n                selectionScope.selectionConfig = config.selectionConfig;\r\n\r\n                selectionScope.selectedItems = [];\r\n                angular.forEach($scope.selectedItems, function(value, key) {\r\n                    selectionScope.selectedItems.push({ key: key, value: value });\r\n                });\r\n\r\n                selectionScope.currentSelection = {\r\n                    selected: selectionScope.selectedItems\r\n                };\r\n\r\n                var manageItemsSelectedTemplate = adfTemplatePath + 'widget-selection.html';\r\n                var opts = {\r\n                    scope: selectionScope,\r\n                    templateUrl: manageItemsSelectedTemplate,\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    animation: true\r\n                };\r\n\r\n                var instance = $uibModal.open(opts);\r\n\r\n                selectionScope.restoreSelection = function() {\r\n                    selectionScope.currentSelection = {\r\n                        selected: selectionScope.selectedItems\r\n                    };\r\n                };\r\n\r\n                selectionScope.clearSelection = function() {\r\n                    selectionScope.currentSelection.selected = [];\r\n                };\r\n\r\n                // Cierra sy guarda los datos de nueva selección\r\n                selectionScope.applyFilter = function(type) {\r\n                    var customOql = selectionScope.selectionConfig.filterAction(selectionScope.currentSelection.selected, type);\r\n\r\n                    if (!angular.isUndefined(customOql) && customOql !== null) {\r\n                        $scope.toggleAdvanced = 0;\r\n                        Filter.parseQuery(customOql).then(function(data) {\r\n                            $scope.search.oql = customOql;\r\n                            $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\r\n                            $scope.unknownWords = '';\r\n                            $scope.filter.error = null;\r\n\r\n                            $scope.launchSearchingAdv();\r\n                        }).catch(function(err) {\r\n                            $scope.filter.error = err;\r\n                        });\r\n                    }\r\n                };\r\n\r\n                selectionScope.executeOperation = function(operationType) {\r\n                    if (!$scope.editMode) {\r\n                        $scope.$parent.$broadcast('widgetExecuteOperation', { 'selectedItems': selectionScope.currentSelection.selected, 'type': operationType });\r\n                    }\r\n                };\r\n\r\n                // Cierra sy guarda los datos de nueva selección\r\n                selectionScope.saveChangesDialog = function() {\r\n                    var finalSelection = {};\r\n                    angular.forEach(selectionScope.currentSelection.selected, function(data, idx) {\r\n                        finalSelection[data.key] = { data: data.value.data, visible: data.value.visible };\r\n                    });\r\n\r\n                    $scope.selectedItems = angular.copy(finalSelection);\r\n                    $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n\r\n                    $scope.selectionManager.lastItem = {};\r\n                    $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n\r\n                    instance.close();\r\n                    selectionScope.$destroy();\r\n                };\r\n\r\n                // Cierra sin realizar ninguna acción\r\n                selectionScope.closeDialog = function() {\r\n                    instance.close();\r\n                    selectionScope.$destroy();\r\n                };\r\n            };\r\n\r\n\r\n            // bind edit function\r\n            $scope.edit = function() {\r\n                var editScope = $scope.$new();\r\n                editScope.translate = dashboard.translate;\r\n                editScope.definition = angular.copy(definition);\r\n\r\n                var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\r\n                if (definition.editTemplateUrl) {\r\n                    adfEditTemplatePath = definition.editTemplateUrl;\r\n                }\r\n\r\n                var opts = {\r\n                    scope: editScope,\r\n                    templateUrl: adfEditTemplatePath,\r\n                    backdrop: 'static',\r\n                    size: 'lg'\r\n                };\r\n\r\n                var instance = $uibModal.open(opts);\r\n\r\n                editScope.closeDialog = function() {\r\n                    instance.close();\r\n                    editScope.$destroy();\r\n                };\r\n\r\n                // TODO create util method\r\n                function createApplyPromise(result) {\r\n                    var promise;\r\n                    if (typeof result === 'boolean') {\r\n                        var deferred = $q.defer();\r\n                        if (result) {\r\n                            deferred.resolve();\r\n                        } else {\r\n                            deferred.reject();\r\n                        }\r\n                        promise = deferred.promise;\r\n                    } else {\r\n                        promise = $q.when(result);\r\n                    }\r\n                    return promise;\r\n                }\r\n\r\n                editScope.saveDialog = function() {\r\n                    // clear validation error\r\n                    editScope.validationError = null;\r\n\r\n                    // build injection locals\r\n                    var widget = $scope.widget;\r\n\r\n                    // create a default apply method for widgets\r\n                    // without edit mode\r\n                    // see issue https://goo.gl/KHPQLZ\r\n                    var applyFn;\r\n                    if (widget.edit) {\r\n                        applyFn = widget.edit.apply;\r\n                    } else {\r\n                        applyFn = function() {\r\n                            return true;\r\n                        };\r\n                    }\r\n\r\n                    // injection locals\r\n                    var locals = {\r\n                        widget: widget,\r\n                        definition: editScope.definition,\r\n                        config: editScope.definition.config\r\n                    };\r\n\r\n                    // invoke apply function and apply if success\r\n                    var result = $injector.invoke(applyFn, applyFn, locals);\r\n                    createApplyPromise(result).then(function() {\r\n                        definition.title = editScope.definition.title;\r\n                        angular.extend(definition.config, editScope.definition.config);\r\n\r\n                        editScope.closeDialog();\r\n\r\n                        if (widget.edit && widget.edit.reload) {\r\n                            // reload content after edit dialog is closed\r\n                            $scope.$broadcast('widgetConfigChanged');\r\n                        }\r\n                    }, function(err) {\r\n                        if (err) {\r\n                            editScope.validationError = err;\r\n                        } else {\r\n                            editScope.validationError = 'Validation durring apply failed';\r\n                        }\r\n                    });\r\n                };\r\n\r\n            };\r\n\r\n\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            templateUrl: dashboard.customWidgetTemplatePath ? dashboard.customWidgetTemplatePath : adfTemplatePath + 'widget.html',\r\n            scope: {\r\n                definition: '=',\r\n                col: '=column',\r\n                editMode: '=',\r\n                options: '=',\r\n                widgetState: '='\r\n            },\r\n            controller: [\"$scope\", function($scope) {\r\n                var adfDashboardCollapseExpand = $scope.$on('adfDashboardCollapseExpand', function(event, args) {\r\n                    $scope.widgetState.isCollapsed = args.collapseExpandStatus;\r\n                });\r\n\r\n                var adfWidgetEnterEditMode = $scope.$on('adfWidgetEnterEditMode', function(event, widget) {\r\n                    if (dashboard.idEquals($scope.definition.wid, widget.wid)) {\r\n                        $scope.edit();\r\n                    }\r\n                });\r\n\r\n                var adfIsEditMode = $scope.$on('adfIsEditMode', function(event, widget) {\r\n                    $scope.editing = true;\r\n                });\r\n\r\n                var adfDashboardChanged = $scope.$on('adfDashboardChanged', function(event, widget) {\r\n                    $scope.editing = false;\r\n                });\r\n\r\n                var adfDashboardEditsCancelled = $scope.$on('adfDashboardEditsCancelled', function(event, widget) {\r\n                    $scope.editing = false;\r\n                });\r\n\r\n                $scope.widgetClasses = function(w, definition) {\r\n                    var classes = definition.styleClass || '';\r\n                    // w is undefined, if the type of the widget is unknown\r\n                    // see issue #216\r\n                    if (!w || !w.frameless || $scope.editMode) {\r\n                        classes += ' panel panel-default';\r\n                    }\r\n                    return classes;\r\n                };\r\n\r\n                $scope.openFullScreen = function() {\r\n                    var definition = $scope.definition;\r\n                    var fullScreenScope = $scope.$new();\r\n                    var opts = {\r\n                        scope: fullScreenScope,\r\n                        templateUrl: adfTemplatePath + 'widget-fullscreen.html',\r\n                        size: definition.modalSize || 'lg', // 'sm', 'lg'\r\n                        backdrop: 'static',\r\n                        windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\r\n                    };\r\n\r\n                    var instance = $uibModal.open(opts);\r\n                    fullScreenScope.closeDialog = function() {\r\n                        instance.close();\r\n                        fullScreenScope.$destroy();\r\n                    };\r\n                };\r\n\r\n                $scope.openFilter = function() {\r\n\r\n                }\r\n\r\n                $scope.openAboutScreen = function(size) {\r\n                    size = 'md';\r\n                    var modalInstance = $uibModal.open({\r\n                        animation: true,\r\n                        templateUrl: 'widgetAboutModal.html',\r\n                        controller: [\"$scope\", \"$uibModalInstance\", \"information\", function($scope, $uibModalInstance, information) {\r\n                            $scope.about = {};\r\n                            $scope.about.info = information;\r\n                            $scope.ok = function() {\r\n                                $uibModalInstance.close();\r\n                            };\r\n                        }],\r\n                        'size': size,\r\n                        resolve: {\r\n                            information: function() {\r\n                                return $scope.config.about;\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    modalInstance.result.then(function(selectedItem) {\r\n                        $scope.selected = selectedItem;\r\n                    }, function() {\r\n                        $log.info('Modal dismissed at: ' + new Date());\r\n                    });\r\n                };\r\n\r\n                $scope.saveWidgetScreen = function(wId) {\r\n                    $scope.$emit('generateSnapshot', {\r\n                        'objectSelector': '.widget_' + wId,\r\n                        'fileName': 'capture_' + new Date().getTime()\r\n                    });\r\n                };\r\n\r\n                var onWindowTimeChanged = function(timeObj) {\r\n                    var filter = { and: [] };\r\n                    if (timeObj && timeObj.from) {\r\n                        filter.and.push({\r\n                            gt: {\r\n                                operationDate: timeObj.from\r\n                            }\r\n                        });\r\n\r\n                        if (timeObj.to) {\r\n                            filter.and.push({\r\n                                lt: {\r\n                                    operationDate: timeObj.to\r\n                                }\r\n                            });\r\n                        }\r\n                    } else {\r\n                        filter = null;\r\n                    }\r\n                    return filter;\r\n                }\r\n\r\n                var createQuickFilter = function(fieldsQuickSearch, filter) {\r\n                    var _filter = {\r\n                        or: []\r\n                    };\r\n                    var criteria;\r\n                    fieldsQuickSearch.forEach(function(field) {\r\n                        criteria = {};\r\n                        criteria[field.operator] = {};\r\n                        criteria[field.operator][field.name] = $scope.config.filter;\r\n                        _filter.or.push(criteria);\r\n                    });\r\n                    return _filter;\r\n                }\r\n\r\n                $scope.downloadCsv = function() {\r\n                    var columns = $scope.config.columns;\r\n                    var scope_filter = $scope.config.filter;\r\n                    var extra_filter;\r\n                    var final_filter = {};\r\n                    var order = $scope.config.sort ? $scope.config.sort : undefined;\r\n                    if ($scope.config.windowFilter) {\r\n                        var window_filter = onWindowTimeChanged($scope.config.windowFilter);\r\n                        if (window_filter && window_filter.and) {\r\n                            extra_filter = { and: window_filter.and };\r\n                        }\r\n                    }\r\n                    var filter;\r\n                    if (scope_filter.value && scope_filter.value.length > 4) {\r\n                        filter = JSON.parse(scope_filter.value);\r\n                    } else if (typeof scope_filter === 'string' && scope_filter.trim() !== '') {\r\n                        filter = createQuickFilter($scope.config.fieldsQuickSearch, scope_filter);\r\n                    }\r\n                    if (extra_filter) {\r\n                        if (filter) {\r\n                            final_filter = { and: [extra_filter, filter] };\r\n                        } else {\r\n                            final_filter = extra_filter;\r\n                        }\r\n                    } else {\r\n                        final_filter = filter;\r\n                    }\r\n                    $scope.$broadcast('downloadCsv', {\r\n                        'columns': columns,\r\n                        'filter': final_filter,\r\n                        'order': order\r\n                    });\r\n                };\r\n\r\n                var addItemToSelection = $scope.$on('addItemToSelection', function(event, item) {\r\n                    if (!$scope.selectedItems[item.key]) {\r\n                        $scope.selectedItems[item.key] = {\r\n                            data: item.data,\r\n                            visible: item.visible\r\n                        };\r\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n                        item.isSelected = true;\r\n                        $scope.selectionManager.lastItem = item;\r\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n                    }\r\n\r\n                });\r\n\r\n                var removeItemFromSelection = $scope.$on('removeItemFromSelection', function(event, item) {\r\n                    if ($scope.selectedItems[item.key]) {\r\n                        delete $scope.selectedItems[item.key];\r\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n                        item.isSelected = false;\r\n                        $scope.selectionManager.lastItem = item;\r\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n                    }\r\n                });\r\n\r\n                $scope.$on('$destroy', function() {\r\n                    adfDashboardCollapseExpand();\r\n                    adfWidgetEnterEditMode();\r\n                    adfIsEditMode();\r\n                    adfDashboardChanged();\r\n                    adfDashboardEditsCancelled();\r\n                    addItemToSelection();\r\n                    removeItemFromSelection();\r\n                });\r\n            }],\r\n            compile: function() {\r\n\r\n                /**\r\n                 * use pre link, because link of widget-content\r\n                 * is executed before post link widget\r\n                 */\r\n                return {\r\n                    pre: preLink,\r\n                    post: postLink\r\n                };\r\n            }\r\n        };\r\n\r\n    }]);\n})(window);","/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardRow', function ($compile, adfTemplatePath, columnTemplate) {\r\n    'use strict';\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        row: '=',\r\n        adfModel: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\r\n      link: function($scope, $element) {\r\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\r\n          $compile(columnTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        }\r\n      }\r\n    };\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfStructurePreview', function(adfTemplatePath) {\r\n\r\n    function adjustRowHeight(container){\r\n      if (container.rows && container.rows.length > 0){\r\n        var height = 100 / container.rows.length;\r\n        angular.forEach(container.rows, function(row){\r\n          row.style = {\r\n            height: height + '%'\r\n          }\r\n\r\n          if (row.columns){\r\n            angular.forEach(row.columns, function(column){\r\n              adjustRowHeight(column);\r\n            });\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    function prepareStructure($scope){\r\n      var structure = angular.copy($scope.structure);\r\n      adjustRowHeight(structure);\r\n      $scope.preview = structure;\r\n    }\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        name: '=',\r\n        structure: '=',\r\n        selected: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'structure-preview.html',\r\n      link: prepareStructure\r\n    };\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('adf')\r\n    .directive('adfWidgetContent', function($log, $q, widgetService,\r\n        $compile, $controller, $injector, dashboard) {\r\n\r\n        function renderError($element, msg) {\r\n            $log.warn(msg);\r\n            $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\r\n        }\r\n\r\n        function compileWidget($scope, $element, currentScope, configChanged) {\r\n            var model = $scope.model;\r\n            var content = $scope.content;\r\n\r\n            var extra = $scope.extra;\r\n\r\n            var newScope = currentScope;\r\n            if (!model) {\r\n                renderError($element, 'model is undefined');\r\n            } else if (!content) {\r\n                //var msg = 'widget content is undefined, please have a look at your browser log';\r\n                var msg = 'Widget ' + (model.title ? 'for \"' + model.title + '\"' : '') + ' has been deprecated. In order to continue you have to delete this one and look for the equivalent one.';\r\n                renderError($element, msg);\r\n            } else {\r\n                if (newScope) {\r\n                    var is_menu = newScope.menu !== undefined && newScope.menu !== null;\r\n                    var is_itemsPerPage = newScope.itemsPerPage !== undefined && newScope.itemsPerPage !== null;\r\n                    if (is_menu || is_itemsPerPage || configChanged || !angular.isFunction(newScope.reloadData)) {\r\n                        newScope = renderWidget($scope, $element, currentScope, model, content, extra);\r\n                    } else {\r\n                        newScope.reloadData();\r\n                    }\r\n                } else {\r\n                    newScope = renderWidget($scope, $element, currentScope, model, content, extra);\r\n                }\r\n            }\r\n\r\n            function _getWindowTime(type) {\r\n                if (type === \"custom\") {\r\n                    return {\r\n                        from: newScope.config.windowFilter.from,\r\n                        to: newScope.config.windowFilter.to\r\n                    }\r\n                }\r\n                var from = window.moment().subtract(1, type);\r\n                return {\r\n                    from: from._d\r\n                };\r\n            }\r\n\r\n            if (newScope) {\r\n                if (newScope.config) {\r\n                    newScope.config.getWindowTime = function() {\r\n                        var windowFilter = newScope.config.windowFilter;\r\n                        if (windowFilter && windowFilter.type) {\r\n                            var winTime = _getWindowTime(windowFilter.type);\r\n                            /* jshint ignore:start */\r\n                            if (!window.eval(newScope.config.windowFilter.rawdate)) {\r\n                                for (var key in winTime) {\r\n                                    winTime[key] = window.moment(winTime[key]).format();\r\n                                }\r\n                                winTime['rawdate'] = true;\r\n                            }\r\n                            /* jshint ignore:end */\r\n                            return winTime;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (extra) {\r\n                    newScope.editing = extra.editing ? true : false;\r\n                    newScope.extraData = extra;\r\n                }\r\n            }\r\n            return newScope;\r\n        }\r\n\r\n        function renderWidget($scope, $element, currentScope, model, content, extra) {\r\n            // display loading template\r\n            $element.html(dashboard.loadingTemplate);\r\n\r\n            // create new scope\r\n            var templateScope = $scope.$new();\r\n\r\n            // pass config object to scope\r\n            if (!model.config) {\r\n                model.config = {};\r\n            }\r\n\r\n            templateScope.config = model.config;\r\n            templateScope.editing = extra && extra.editing;\r\n\r\n            if (extra) {\r\n                templateScope.extra = extra;\r\n            }\r\n\r\n            templateScope.selectionManager = (currentScope && currentScope.selectionManager) ? currentScope.selectionManager : undefined;\r\n\r\n            // local injections\r\n            var base = {\r\n                $scope: templateScope,\r\n                widget: model,\r\n                config: model.config\r\n            };\r\n\r\n            // get resolve promises from content object\r\n            var resolvers = {};\r\n            resolvers.$tpl = widgetService.getTemplate(content);\r\n            if (content.resolve) {\r\n                angular.forEach(content.resolve, function(promise, key) {\r\n                    if (angular.isString(promise)) {\r\n                        resolvers[key] = $injector.get(promise);\r\n                    } else {\r\n                        resolvers[key] = $injector.invoke(promise, promise, base);\r\n                    }\r\n                });\r\n            }\r\n\r\n            // resolve all resolvers\r\n            $q.all(resolvers).then(function(locals) {\r\n                angular.extend(locals, base);\r\n\r\n                // pass resolve map to template scope as defined in resolveAs\r\n                if (content.resolveAs) {\r\n                    templateScope[content.resolveAs] = locals;\r\n                }\r\n\r\n                // compile & render template\r\n                var template = locals.$tpl;\r\n                $element.html(template);\r\n                if (content.controller) {\r\n                    var templateCtrl = $controller(content.controller, locals);\r\n                    if (content.controllerAs) {\r\n                        templateScope[content.controllerAs] = templateCtrl;\r\n                    }\r\n                    $element.children().data('$ngControllerController', templateCtrl);\r\n                }\r\n                $compile($element.contents())(templateScope);\r\n            }, function(reason) {\r\n                // handle promise rejection\r\n                var msg = 'Could not resolve all promises';\r\n                if (reason) {\r\n                    msg += ': ' + reason;\r\n                }\r\n                renderError($element, msg);\r\n            });\r\n\r\n            // destroy old scope\r\n            if (currentScope) {\r\n                currentScope.$destroy();\r\n            }\r\n\r\n            return templateScope;\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            scope: {\r\n                model: '=',\r\n                content: '=',\r\n                extra: '='\r\n            },\r\n            link: function($scope, $element) {\r\n                var currentScope = compileWidget($scope, $element, null);\r\n                var widgetConfigChangedEvt = $scope.$on('widgetConfigChanged', function() {\r\n                    currentScope = compileWidget($scope, $element, currentScope, true);\r\n                });\r\n\r\n                var widgetReloadEvt = $scope.$on('widgetReload', function() {\r\n                    currentScope = compileWidget($scope, $element, currentScope, false);\r\n                });\r\n\r\n                $scope.$on('destroy', function() {\r\n                    widgetConfigChangedEvt();\r\n                    widgetReloadEvt();\r\n                });\r\n            }\r\n        };\r\n    });","\r\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n/**\r\n * The widget service provide helper functions to render widgets and their content.\r\n */\r\nangular.module('adf')\r\n  .factory('widgetService', function($http, $q, $sce, $templateCache, dashboard) {\r\n    'use strict';\r\n\r\n    function parseUrl(url) {\r\n      var parsedUrl = url;\r\n      if (url.indexOf('{widgetsPath}') >= 0) {\r\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\r\n                .replace('//', '/');\r\n        if (parsedUrl.indexOf('/') === 0) {\r\n          parsedUrl = parsedUrl.substring(1);\r\n        }\r\n      }\r\n      return parsedUrl;\r\n    }\r\n\r\n    var exposed = {};\r\n\r\n    exposed.getTemplate = function(widget){\r\n      var deferred = $q.defer();\r\n\r\n      if (widget.template) {\r\n        deferred.resolve(widget.template);\r\n      } else if (widget.templateUrl) {\r\n        // try to fetch template from cache\r\n        var tpl = $templateCache.get(widget.templateUrl);\r\n        if (tpl) {\r\n          deferred.resolve(tpl);\r\n        } else {\r\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\r\n          $http.get(url)\r\n               .success(function(response) {\r\n                 // put response to cache, with unmodified url as key\r\n                 $templateCache.put(widget.templateUrl, response);\r\n                 deferred.resolve(response);\r\n               })\r\n               .error(function() {\r\n                 deferred.reject('could not load template');\r\n               });\r\n        }\r\n      }\r\n\r\n      return deferred.promise;\r\n    };\r\n\r\n    return exposed;\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('adf')\r\n    .directive('adfWidget', function($injector, $q, $log, $uibModal, $rootScope, $interval, dashboard, adfTemplatePath, Filter) {\r\n        function preLink($scope) {\r\n            var definition = $scope.definition;\r\n\r\n            //passs translate function from dashboard so we can translate labels inside html templates\r\n            $scope.translate = dashboard.translate;\r\n\r\n            if (definition) {\r\n                var w = dashboard.widgets[definition.type];\r\n                if (w) {\r\n                    // pass title\r\n                    if (!definition.title) {\r\n                        definition.title = w.title;\r\n                    }\r\n\r\n                    if (!definition.titleTemplateUrl) {\r\n                        definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\r\n                        if (w.titleTemplateUrl) {\r\n                            definition.titleTemplateUrl = w.titleTemplateUrl;\r\n                        }\r\n                    }\r\n\r\n                    if (!definition.editTemplateUrl) {\r\n                        definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\r\n                        if (w.editTemplateUrl) {\r\n                            definition.editTemplateUrl = w.editTemplateUrl;\r\n                        }\r\n                    }\r\n\r\n                    if (!definition.titleTemplateUrl) {\r\n                        definition.frameless = w.frameless;\r\n                    }\r\n\r\n                    if (!definition.styleClass) {\r\n                        definition.styleClass = w.styleClass;\r\n                    }\r\n\r\n                    // set id for sortable\r\n                    if (!definition.wid) {\r\n                        definition.wid = dashboard.id();\r\n                    }\r\n\r\n                    // pass copy of widget to scope\r\n                    $scope.widget = angular.copy(w);\r\n\r\n                    // create config object\r\n                    var config = definition.config;\r\n                    if (config) {\r\n                        if (angular.isString(config)) {\r\n                            config = angular.fromJson(config);\r\n                        }\r\n                    } else {\r\n                        config = {};\r\n                    }\r\n\r\n                    if (!config.reloadPeriod) {\r\n                        config.reloadPeriod = \"0\";\r\n                    }\r\n\r\n                    if (typeof $scope.widget.show_modal_footer === \"undefined\") {\r\n                        $scope.widget.show_modal_footer = true;\r\n                    }\r\n\r\n                    if (typeof $scope.widget.show_reload_config === \"undefined\") {\r\n                        $scope.widget.show_reload_config = true;\r\n                    }\r\n\r\n                    // pass config to scope\r\n                    $scope.config = config;\r\n\r\n                    // collapse exposed $scope.widgetState property\r\n                    if (!$scope.widgetState) {\r\n                        $scope.widgetState = {};\r\n                        $scope.widgetState.isCollapsed = (w.collapsed === true) ? w.collapsed : false;\r\n                    }\r\n\r\n                } else {\r\n                    $log.warn('could not find widget ' + definition.type);\r\n                }\r\n            } else {\r\n                $log.debug('definition not specified, widget was probably removed');\r\n            }\r\n        }\r\n\r\n        function postLink($scope, $element) {\r\n            var definition = $scope.definition;\r\n            if (!definition) {\r\n                $log.debug('widget not found');\r\n                return;\r\n            }\r\n            if (!$scope.config) {\r\n                $scope.config = {};\r\n            }\r\n\r\n            var config = $scope.config;\r\n\r\n            // bind close function\r\n            var deleteWidget = function() {\r\n                var column = $scope.col;\r\n                if (column) {\r\n                    var index = column.widgets.indexOf(definition);\r\n                    if (index >= 0) {\r\n                        column.widgets.splice(index, 1);\r\n                    }\r\n                }\r\n                $element.remove();\r\n                $rootScope.$broadcast('adfWidgetRemovedFromColumn');\r\n            };\r\n\r\n            $scope.remove = function() {\r\n                if ($scope.options.enableConfirmDelete) {\r\n                    var deleteScope = $scope.$new();\r\n                    deleteScope.translate = dashboard.translate;\r\n\r\n                    var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\r\n                    if (definition.deleteTemplateUrl) {\r\n                        deleteTemplateUrl = definition.deleteTemplateUrl;\r\n                    }\r\n                    var opts = {\r\n                        scope: deleteScope,\r\n                        templateUrl: deleteTemplateUrl,\r\n                        backdrop: 'static'\r\n                    };\r\n                    var instance = $uibModal.open(opts);\r\n\r\n                    deleteScope.closeDialog = function() {\r\n                        instance.close();\r\n                        deleteScope.$destroy();\r\n                    };\r\n                    deleteScope.deleteDialog = function() {\r\n                        deleteWidget();\r\n                        deleteScope.closeDialog();\r\n                    };\r\n                } else {\r\n                    deleteWidget();\r\n                }\r\n            };\r\n\r\n\r\n            $scope.print = function() {\r\n                if (!$scope.editMode) {\r\n                    $scope.$broadcast('widgetPrint');\r\n                }\r\n            }\r\n\r\n            $scope.isExecuteOperationEnabled = function() {\r\n                // if ($scope.selectionManager.totalSelected() > 0)\r\n                //     return true;\r\n                if (config.entityKey)\r\n                    return true;\r\n                var filter = config.filter;\r\n                if (typeof filter === \"string\") {\r\n                    return filter.length > 0;\r\n                }\r\n                if (typeof filter === \"object\") {\r\n                    return filter.value.length > 2 && filter.oql;\r\n                }\r\n                return false;\r\n            }\r\n\r\n            $scope.executeOperation = function() {\r\n                if (!$scope.editMode) {\r\n                    // if ($scope.selectionManager.totalSelected() > 0) {\r\n                    //     var selectedItems = [];\r\n                    //     angular.forEach($scope.selectionManager.currentSelection, function(data, key) {\r\n                    //         selectedItems.push({ key: key, value: data });\r\n                    //     });\r\n                    //     $scope.$parent.$broadcast('widgetExecuteOperation', { 'selectedItems': selectedItems });\r\n                    // } else {\r\n                    $scope.$parent.$broadcast('widgetExecuteOperation');\r\n                    // }\r\n                }\r\n            };\r\n\r\n            // bind reload function\r\n            var stopReloadTimeout;\r\n\r\n            function _setReloadTimeout() {\r\n                if (config && config.reloadPeriod && config.reloadPeriod !== \"0\") {\r\n                    if (angular.isDefined(stopReloadTimeout)) {\r\n                        $interval.cancel(stopReloadTimeout)\r\n                        stopReloadTimeout = undefined;\r\n                    };\r\n                    stopReloadTimeout = $interval($scope.reload, (config.reloadPeriod * 1000));\r\n                }\r\n            }\r\n\r\n            $scope.reload = function(completeReload) {\r\n                if (completeReload) {\r\n                    $scope.$broadcast('widgetReload', completeReload);\r\n                } else {\r\n                    $scope.$broadcast('widgetReload');\r\n                }\r\n\r\n                _setReloadTimeout();\r\n            };\r\n\r\n            // verificacion de periodo de refresco\r\n            _setReloadTimeout();\r\n\r\n            $element.on('$destroy', function() {\r\n                $interval.cancel(stopReloadTimeout);\r\n            });\r\n\r\n            $scope.filter = {\r\n                value: \"\"\r\n            };\r\n            $scope.sort = {\r\n                value: \"\",\r\n                direction: \"\"\r\n            };\r\n\r\n            $scope.toggleAdvanced = 1;\r\n            var filter = config.filter;\r\n            if (typeof filter === \"object\" && filter.oql && filter.oql.length > 2) {\r\n                $scope.search = {\r\n                    oql: filter.oql,\r\n                    json: filter.value\r\n                };\r\n                $scope.toggleAdvanced = 0;\r\n            } else if (typeof filter === \"string\") {\r\n                $scope.search = {\r\n                    quick: filter\r\n                };\r\n                $scope.toggleAdvanced = 1;\r\n            } else if (typeof filter === \"object\" && filter.fields) {\r\n                $scope.search = {\r\n                    customFilter: filter.fields\r\n                };\r\n                $scope.search.fields = [];\r\n                angular.forEach(filter.fields, function(v, key) {\r\n                    $scope.search.fields.push(v.name);\r\n                });\r\n                $scope.toggleAdvanced = 2;\r\n            } else {\r\n                $scope.search = {\r\n                    quick: filter = \"\"\r\n                };\r\n            }\r\n\r\n            $scope.toggleFilter = function(advanced) {\r\n                $scope.toggleAdvanced = advanced;\r\n            };\r\n            $scope.filterAvailable = false;\r\n            $scope.showFilter = function() {\r\n                $scope.filterAvailable = $scope.filterAvailable === true ? false : true;\r\n            };\r\n\r\n            $scope.showFinalFilter = false;\r\n\r\n            $scope.launchSearching = function() {\r\n                var widget = {\r\n                    definition: definition,\r\n                    element: $element\r\n                };\r\n\r\n                $rootScope.$broadcast('adfLaunchSearchingFromWidget', widget, $scope.config.filter);\r\n                $scope.reload(true);\r\n            }\r\n            $scope.addCustomFilter = function(key) {\r\n                $scope.search.customFilter = $scope.search.customFilter ? $scope.search.customFilter : [];\r\n                $scope.search.customFilter.push({ name: key, value: '' });\r\n            }\r\n\r\n            $scope.launchCustomFilter = function() {\r\n                if ($scope.search.customFilter && $scope.search.customFilter.length > 0) {\r\n                    $scope.search.oql = $scope.search.json = '';\r\n\r\n                    $scope.config.filter = {\r\n                        value: {\r\n                            and: []\r\n                        },\r\n                        fields: $scope.search.customFilter\r\n                    }\r\n                    angular.forEach($scope.search.customFilter, function(v, key) {\r\n                        if (v.value) {\r\n                            var like = {};\r\n                            like[v.name] = v.value;\r\n                            $scope.config.filter.value.and.push({ 'like': like });\r\n                        }\r\n\r\n                    });\r\n                    $scope.config.filter.value = JSON.stringify($scope.config.filter.value);\r\n                }\r\n\r\n                $scope.launchSearching();\r\n            }\r\n\r\n\r\n\r\n            $scope.deleteFilter = function(value, model) {\r\n                angular.forEach($scope.search.customFilter, function(v, key) {\r\n                    if (v.name === value) {\r\n                        $scope.search.customFilter.splice(key, 1);\r\n                    }\r\n                });\r\n                if ($scope.search.customFilter.length === 0) {\r\n                    $scope.config.filter = {};\r\n                }\r\n            };\r\n\r\n\r\n            $scope.launchSearchingAdv = function() {\r\n                $scope.search.quick = '';\r\n                if ($scope.search.json === '' || $scope.search.json === '{}' || (!angular.isString($scope.search.json) && Object.keys($scope.search.json).length === 0)) {\r\n                    $scope.config.filter = {\r\n                        oql: '',\r\n                        value: ''\r\n                    };\r\n                } else {\r\n                    $scope.config.filter = {\r\n                        oql: $scope.search.oql,\r\n                        value: $scope.search.json\r\n                    };\r\n                }\r\n                $scope.launchSearching();\r\n\r\n            }\r\n\r\n            $scope.applyFilter = function(event) {\r\n                $scope.launchSearching();\r\n            }\r\n\r\n            $scope.launchSearchingQuick = function() {\r\n                $scope.search.oql = $scope.search.json = '';\r\n                $scope.config.filter = $scope.search.quick;\r\n                $scope.launchSearching();\r\n            }\r\n\r\n            var windowTimeChanged = $scope.$on('onWindowTimeChanged', function(event, timeObj) {\r\n                $scope.config.windowFilter = timeObj ? timeObj : (config.windowFilter ? {} : timeObj);\r\n                var widget = {\r\n                    definition: definition,\r\n                    element: $element\r\n                }\r\n                $rootScope.$broadcast('adfWindowTimeChangedFromWidget', widget, $scope.config.windowFilter);\r\n                $scope.reload();\r\n            });\r\n\r\n            $scope.enter = function(event) {\r\n                var keycode = (event.keyCode ? event.keyCode : event.which);\r\n                if (keycode === 13) {\r\n                    if ($scope.toggleAdvanced === 0)\r\n                        $scope.launchSearchingAdv();\r\n                    if ($scope.toggleAdvanced === 1)\r\n                        $scope.launchSearchingQuick();\r\n                    if ($scope.toggleAdvanced === 2)\r\n                        $scope.launchCustomFilter();\r\n\r\n                }\r\n                if (keycode === 19) {\r\n                    $scope.showFinalFilter = $scope.showFinalFilter === false ? true : false;\r\n                }\r\n            }\r\n\r\n\r\n            $scope.customSelectors = [];\r\n            $scope.getCustomSelectors = function() {\r\n                config.widgetSelectors().findFields(\"\").then(function(fields) {\r\n                    $scope.customSelectors = fields;\r\n                    $scope.$apply();\r\n                }).catch(function(err) {\r\n                    $log.error(err);\r\n                });\r\n\r\n            }\r\n\r\n            $scope.customFilter = [];\r\n            $scope.getcustomFilter = function() {\r\n                config.widgetSelectors().findFields(\"\").then(function(fields) {\r\n                    $scope.customFilter = fields;\r\n                    $scope.$apply();\r\n                }).catch(function(err) {\r\n                    $log.error(err);\r\n                });\r\n\r\n            }\r\n\r\n            $scope.ifCustomFilter = function() {\r\n                return $scope.customSelectors && config.sort && $scope.definition.type === 'FullDevicesList' && $scope.toggleAdvanced === 2;\r\n            }\r\n\r\n            $scope.showCustomFields = function() {\r\n                return $scope.definition.type === 'FullDevicesList' && $scope.toggleAdvanced === 2 && $scope.search.customFilter && $scope.filterAvailable && !$scope.editMode;\r\n            }\r\n\r\n            $scope.changeDirection = function() {\r\n                var direction = config.sort.direction;\r\n                if (direction === 'DESCENDING') {\r\n                    $scope.config.sort.direction = 'ASCENDING'\r\n                } else if (direction === 'ASCENDING') {\r\n                    $scope.config.sort.direction = 'DESCENDING'\r\n                }\r\n                $scope.reload();\r\n            }\r\n\r\n            $scope.debugQuery = function() {\r\n                Filter.parseQuery($scope.search.oql || '')\r\n                    .then(function(data) {\r\n                        //$scope.elementos = data;\r\n                        $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\r\n                        $scope.unknownWords = '';\r\n                        $scope.filter.error = null;\r\n                    })\r\n                    .catch(function(err) {\r\n                        $scope.filter.error = err;\r\n                        // Tratar el error\r\n                    });\r\n\r\n            }\r\n\r\n            $scope.autocomplete_options = function() {\r\n                var autocomplete_options = {\r\n                    suggest: Filter.suggest_field_delimited,\r\n                    customSelectors: config.widgetSelectors()\r\n                };\r\n\r\n                return autocomplete_options;\r\n\r\n            };\r\n\r\n            // Multiple selection\r\n            $scope.selectedItems = {};\r\n\r\n            // Gestor de seleccion\r\n            $scope.selectionManager = {\r\n                currentSelection: $scope.selectedItems,\r\n                isSelected: function(key, obj) {\r\n                    if ($scope.selectedItems[key] && !angular.isUndefined(obj)) {\r\n                        $scope.selectedItems[key].data = obj;\r\n                    }\r\n\r\n                    return $scope.selectedItems[key] ? true : false;\r\n                },\r\n                totalSelected: function() {\r\n                    return Object.keys($scope.selectedItems).length;\r\n                }\r\n            };\r\n\r\n            $scope.manageSelectedItems = function() {\r\n                var selectionScope = $scope.$new();\r\n\r\n                selectionScope.selectionConfig = config.selectionConfig;\r\n\r\n                selectionScope.selectedItems = [];\r\n                angular.forEach($scope.selectedItems, function(value, key) {\r\n                    selectionScope.selectedItems.push({ key: key, value: value });\r\n                });\r\n\r\n                selectionScope.currentSelection = {\r\n                    selected: selectionScope.selectedItems\r\n                };\r\n\r\n                var manageItemsSelectedTemplate = adfTemplatePath + 'widget-selection.html';\r\n                var opts = {\r\n                    scope: selectionScope,\r\n                    templateUrl: manageItemsSelectedTemplate,\r\n                    backdrop: 'static',\r\n                    size: 'lg',\r\n                    animation: true\r\n                };\r\n\r\n                var instance = $uibModal.open(opts);\r\n\r\n                selectionScope.restoreSelection = function() {\r\n                    selectionScope.currentSelection = {\r\n                        selected: selectionScope.selectedItems\r\n                    };\r\n                };\r\n\r\n                selectionScope.clearSelection = function() {\r\n                    selectionScope.currentSelection.selected = [];\r\n                };\r\n\r\n                // Cierra sy guarda los datos de nueva selección\r\n                selectionScope.applyFilter = function(type) {\r\n                    var customOql = selectionScope.selectionConfig.filterAction(selectionScope.currentSelection.selected, type);\r\n\r\n                    if (!angular.isUndefined(customOql) && customOql !== null) {\r\n                        $scope.toggleAdvanced = 0;\r\n                        Filter.parseQuery(customOql).then(function(data) {\r\n                            $scope.search.oql = customOql;\r\n                            $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\r\n                            $scope.unknownWords = '';\r\n                            $scope.filter.error = null;\r\n\r\n                            $scope.launchSearchingAdv();\r\n                        }).catch(function(err) {\r\n                            $scope.filter.error = err;\r\n                        });\r\n                    }\r\n                };\r\n\r\n                selectionScope.executeOperation = function(operationType) {\r\n                    if (!$scope.editMode) {\r\n                        $scope.$parent.$broadcast('widgetExecuteOperation', { 'selectedItems': selectionScope.currentSelection.selected, 'type': operationType });\r\n                    }\r\n                };\r\n\r\n                // Cierra sy guarda los datos de nueva selección\r\n                selectionScope.saveChangesDialog = function() {\r\n                    var finalSelection = {};\r\n                    angular.forEach(selectionScope.currentSelection.selected, function(data, idx) {\r\n                        finalSelection[data.key] = { data: data.value.data, visible: data.value.visible };\r\n                    });\r\n\r\n                    $scope.selectedItems = angular.copy(finalSelection);\r\n                    $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n\r\n                    $scope.selectionManager.lastItem = {};\r\n                    $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n\r\n                    instance.close();\r\n                    selectionScope.$destroy();\r\n                };\r\n\r\n                // Cierra sin realizar ninguna acción\r\n                selectionScope.closeDialog = function() {\r\n                    instance.close();\r\n                    selectionScope.$destroy();\r\n                };\r\n            };\r\n\r\n\r\n            // bind edit function\r\n            $scope.edit = function() {\r\n                var editScope = $scope.$new();\r\n                editScope.translate = dashboard.translate;\r\n                editScope.definition = angular.copy(definition);\r\n\r\n                var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\r\n                if (definition.editTemplateUrl) {\r\n                    adfEditTemplatePath = definition.editTemplateUrl;\r\n                }\r\n\r\n                var opts = {\r\n                    scope: editScope,\r\n                    templateUrl: adfEditTemplatePath,\r\n                    backdrop: 'static',\r\n                    size: 'lg'\r\n                };\r\n\r\n                var instance = $uibModal.open(opts);\r\n\r\n                editScope.closeDialog = function() {\r\n                    instance.close();\r\n                    editScope.$destroy();\r\n                };\r\n\r\n                // TODO create util method\r\n                function createApplyPromise(result) {\r\n                    var promise;\r\n                    if (typeof result === 'boolean') {\r\n                        var deferred = $q.defer();\r\n                        if (result) {\r\n                            deferred.resolve();\r\n                        } else {\r\n                            deferred.reject();\r\n                        }\r\n                        promise = deferred.promise;\r\n                    } else {\r\n                        promise = $q.when(result);\r\n                    }\r\n                    return promise;\r\n                }\r\n\r\n                editScope.saveDialog = function() {\r\n                    // clear validation error\r\n                    editScope.validationError = null;\r\n\r\n                    // build injection locals\r\n                    var widget = $scope.widget;\r\n\r\n                    // create a default apply method for widgets\r\n                    // without edit mode\r\n                    // see issue https://goo.gl/KHPQLZ\r\n                    var applyFn;\r\n                    if (widget.edit) {\r\n                        applyFn = widget.edit.apply;\r\n                    } else {\r\n                        applyFn = function() {\r\n                            return true;\r\n                        };\r\n                    }\r\n\r\n                    // injection locals\r\n                    var locals = {\r\n                        widget: widget,\r\n                        definition: editScope.definition,\r\n                        config: editScope.definition.config\r\n                    };\r\n\r\n                    // invoke apply function and apply if success\r\n                    var result = $injector.invoke(applyFn, applyFn, locals);\r\n                    createApplyPromise(result).then(function() {\r\n                        definition.title = editScope.definition.title;\r\n                        angular.extend(definition.config, editScope.definition.config);\r\n\r\n                        editScope.closeDialog();\r\n\r\n                        if (widget.edit && widget.edit.reload) {\r\n                            // reload content after edit dialog is closed\r\n                            $scope.$broadcast('widgetConfigChanged');\r\n                        }\r\n                    }, function(err) {\r\n                        if (err) {\r\n                            editScope.validationError = err;\r\n                        } else {\r\n                            editScope.validationError = 'Validation durring apply failed';\r\n                        }\r\n                    });\r\n                };\r\n\r\n            };\r\n\r\n\r\n        }\r\n\r\n        return {\r\n            replace: true,\r\n            restrict: 'EA',\r\n            transclude: false,\r\n            templateUrl: dashboard.customWidgetTemplatePath ? dashboard.customWidgetTemplatePath : adfTemplatePath + 'widget.html',\r\n            scope: {\r\n                definition: '=',\r\n                col: '=column',\r\n                editMode: '=',\r\n                options: '=',\r\n                widgetState: '='\r\n            },\r\n            controller: function($scope) {\r\n                var adfDashboardCollapseExpand = $scope.$on('adfDashboardCollapseExpand', function(event, args) {\r\n                    $scope.widgetState.isCollapsed = args.collapseExpandStatus;\r\n                });\r\n\r\n                var adfWidgetEnterEditMode = $scope.$on('adfWidgetEnterEditMode', function(event, widget) {\r\n                    if (dashboard.idEquals($scope.definition.wid, widget.wid)) {\r\n                        $scope.edit();\r\n                    }\r\n                });\r\n\r\n                var adfIsEditMode = $scope.$on('adfIsEditMode', function(event, widget) {\r\n                    $scope.editing = true;\r\n                });\r\n\r\n                var adfDashboardChanged = $scope.$on('adfDashboardChanged', function(event, widget) {\r\n                    $scope.editing = false;\r\n                });\r\n\r\n                var adfDashboardEditsCancelled = $scope.$on('adfDashboardEditsCancelled', function(event, widget) {\r\n                    $scope.editing = false;\r\n                });\r\n\r\n                $scope.widgetClasses = function(w, definition) {\r\n                    var classes = definition.styleClass || '';\r\n                    // w is undefined, if the type of the widget is unknown\r\n                    // see issue #216\r\n                    if (!w || !w.frameless || $scope.editMode) {\r\n                        classes += ' panel panel-default';\r\n                    }\r\n                    return classes;\r\n                };\r\n\r\n                $scope.openFullScreen = function() {\r\n                    var definition = $scope.definition;\r\n                    var fullScreenScope = $scope.$new();\r\n                    var opts = {\r\n                        scope: fullScreenScope,\r\n                        templateUrl: adfTemplatePath + 'widget-fullscreen.html',\r\n                        size: definition.modalSize || 'lg', // 'sm', 'lg'\r\n                        backdrop: 'static',\r\n                        windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\r\n                    };\r\n\r\n                    var instance = $uibModal.open(opts);\r\n                    fullScreenScope.closeDialog = function() {\r\n                        instance.close();\r\n                        fullScreenScope.$destroy();\r\n                    };\r\n                };\r\n\r\n                $scope.openFilter = function() {\r\n\r\n                }\r\n\r\n                $scope.openAboutScreen = function(size) {\r\n                    size = 'md';\r\n                    var modalInstance = $uibModal.open({\r\n                        animation: true,\r\n                        templateUrl: 'widgetAboutModal.html',\r\n                        controller: function($scope, $uibModalInstance, information) {\r\n                            $scope.about = {};\r\n                            $scope.about.info = information;\r\n                            $scope.ok = function() {\r\n                                $uibModalInstance.close();\r\n                            };\r\n                        },\r\n                        'size': size,\r\n                        resolve: {\r\n                            information: function() {\r\n                                return $scope.config.about;\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    modalInstance.result.then(function(selectedItem) {\r\n                        $scope.selected = selectedItem;\r\n                    }, function() {\r\n                        $log.info('Modal dismissed at: ' + new Date());\r\n                    });\r\n                };\r\n\r\n                $scope.saveWidgetScreen = function(wId) {\r\n                    $scope.$emit('generateSnapshot', {\r\n                        'objectSelector': '.widget_' + wId,\r\n                        'fileName': 'capture_' + new Date().getTime()\r\n                    });\r\n                };\r\n\r\n                var onWindowTimeChanged = function(timeObj) {\r\n                    var filter = { and: [] };\r\n                    if (timeObj && timeObj.from) {\r\n                        filter.and.push({\r\n                            gt: {\r\n                                operationDate: timeObj.from\r\n                            }\r\n                        });\r\n\r\n                        if (timeObj.to) {\r\n                            filter.and.push({\r\n                                lt: {\r\n                                    operationDate: timeObj.to\r\n                                }\r\n                            });\r\n                        }\r\n                    } else {\r\n                        filter = null;\r\n                    }\r\n                    return filter;\r\n                }\r\n\r\n                var createQuickFilter = function(fieldsQuickSearch, filter) {\r\n                    var _filter = {\r\n                        or: []\r\n                    };\r\n                    var criteria;\r\n                    fieldsQuickSearch.forEach(function(field) {\r\n                        criteria = {};\r\n                        criteria[field.operator] = {};\r\n                        criteria[field.operator][field.name] = $scope.config.filter;\r\n                        _filter.or.push(criteria);\r\n                    });\r\n                    return _filter;\r\n                }\r\n\r\n                $scope.downloadCsv = function() {\r\n                    var columns = $scope.config.columns;\r\n                    var scope_filter = $scope.config.filter;\r\n                    var extra_filter;\r\n                    var final_filter = {};\r\n                    var order = $scope.config.sort ? $scope.config.sort : undefined;\r\n                    if ($scope.config.windowFilter) {\r\n                        var window_filter = onWindowTimeChanged($scope.config.windowFilter);\r\n                        if (window_filter && window_filter.and) {\r\n                            extra_filter = { and: window_filter.and };\r\n                        }\r\n                    }\r\n                    var filter;\r\n                    if (scope_filter.value && scope_filter.value.length > 4) {\r\n                        filter = JSON.parse(scope_filter.value);\r\n                    } else if (typeof scope_filter === 'string' && scope_filter.trim() !== '') {\r\n                        filter = createQuickFilter($scope.config.fieldsQuickSearch, scope_filter);\r\n                    }\r\n                    if (extra_filter) {\r\n                        if (filter) {\r\n                            final_filter = { and: [extra_filter, filter] };\r\n                        } else {\r\n                            final_filter = extra_filter;\r\n                        }\r\n                    } else {\r\n                        final_filter = filter;\r\n                    }\r\n                    $scope.$broadcast('downloadCsv', {\r\n                        'columns': columns,\r\n                        'filter': final_filter,\r\n                        'order': order\r\n                    });\r\n                };\r\n\r\n                var addItemToSelection = $scope.$on('addItemToSelection', function(event, item) {\r\n                    if (!$scope.selectedItems[item.key]) {\r\n                        $scope.selectedItems[item.key] = {\r\n                            data: item.data,\r\n                            visible: item.visible\r\n                        };\r\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n                        item.isSelected = true;\r\n                        $scope.selectionManager.lastItem = item;\r\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n                    }\r\n\r\n                });\r\n\r\n                var removeItemFromSelection = $scope.$on('removeItemFromSelection', function(event, item) {\r\n                    if ($scope.selectedItems[item.key]) {\r\n                        delete $scope.selectedItems[item.key];\r\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\r\n                        item.isSelected = false;\r\n                        $scope.selectionManager.lastItem = item;\r\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\r\n                    }\r\n                });\r\n\r\n                $scope.$on('$destroy', function() {\r\n                    adfDashboardCollapseExpand();\r\n                    adfWidgetEnterEditMode();\r\n                    adfIsEditMode();\r\n                    adfDashboardChanged();\r\n                    adfDashboardEditsCancelled();\r\n                    addItemToSelection();\r\n                    removeItemFromSelection();\r\n                });\r\n            },\r\n            compile: function() {\r\n\r\n                /**\r\n                 * use pre link, because link of widget-content\r\n                 * is executed before post link widget\r\n                 */\r\n                return {\r\n                    pre: preLink,\r\n                    post: postLink\r\n                };\r\n            }\r\n        };\r\n\r\n    });"]}