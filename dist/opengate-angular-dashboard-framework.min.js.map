{"version":3,"sources":["adf.js","dashboard.js","grid.js","order-by-object-key.js","provider.js","widget-content.js","widget-grid.js","widget-service.js","opengate-angular-dashboard-framework.js"],"names":["window","undefined","angular","module","value","directive","$rootScope","$log","$timeout","$uibModal","dashboard","adfTemplatePath","$faIcons","$translate","stringToBoolean","string","isDefined","toLowerCase","Boolean","createConfiguration","type","cfg","config","widgets","copy","createWidget","wdgt","widget","addNewWidgetToModel","model","name","forceToSave","grid","newWidget","width","height","x","y","definition","push","$broadcast","error","isEditModeImmediate","edit","immediate","openEditMode","$scope","createCategories","categories","forEach","key","category","title","instant","description","isUndefined","createCategoriesList","categoryTags","categoriesTmp","split","idx","translatedCat","indexOf","replace","restrict","transclude","scope","collapsible","editable","editMode","continuousEditMode","maximizable","adfModel","adfWidgetFilter","hideButtons","extraData","controller","getNewModalScope","$new","widgetFilter","$watch","oldVal","newVal","titleTemplateUrl","editClass","deleteDashboard","dashData","id","toggleEditMode","openConfigWindow","modelCopy","editDashboardDialog","saveTemporalDashboard","temporal","adfToggleEditMode","$on","event","isNewDashboard","adfCancelEditMode","cancelEditMode","adfWidgetRemoved","index","widgetTmp","wid","splice","collapseAll","collapseExpandStatus","adfEditDashboardDialog","adfLaunchSearchingFromWidget","configFilter","adfWindowTimeChangedFromWidget","windowFilter","editDashboardScope","icon","availableIcons","list","adfEditTemplatePath","editTemplateUrl","instance","open","templateUrl","backdrop","keyboard","size","closeDialog","close","$destroy","adfOpenWidgetFromOther","internal_config","_config","merge","w","adfOpenModalWidgetFromOther","widgetType","sendSelection","fullScreenScope","opts","modalSize","windowClass","persistDashboard","this","$parent","adfAddWidgetDialog","addWidgetDialog","addScopeCfg","widgetSortingDirection","widgetSorting","addScope","isFunction","options","availableCategories","adfAddTemplatePath","addTemplateUrl","widgetFilterCfg","addWidget","Ftype","changeThumbnail","images","_currThumb","length","_currImg","link","$element","$attr","enableConfirmDelete","editing","preLink","gridOptions","cellHeight","verticalMargin","animate","float","alwaysShowResizeHandle","minWidth","auto","resizable","handles","disableDrag","disableResize","gsHandler","compile","pre","dashEvents","enable","disable","GridStackUI","Utils","sort","onChange","items","console","log","onDragStart","ui","onDragStop","onResizeStart","onResizeStop","onItemAdded","item","onItemRemoved","dashEvt","filter","$filter","array","objectKey","provider","widgetsPath","messageTemplate","loadingTemplate","customWidgetTemplatePath","defaultApplyFunction","extend","reload","frameless","apply","path","template","templatePath","$get","cid","Date","getTime","idEquals","other","toString","$q","widgetService","$compile","$controller","$injector","renderError","msg","warn","html","compileWidget","currentScope","configChanged","_getWindowTime","from","newScope","to","moment","subtract","_d","content","extra","is_menu","menu","isPaginationEnable","is_itemsPerPage","itemsPerPage","reloadData","navOptionsHandler","firstLoad","renderWidget","page","then","translateMessage","getWindowTime","winTime","eval","rawdate","format","templateScope","_from","selectionManager","base","resolvers","$tpl","getTemplate","resolve","promise","isString","get","invoke","all","locals","resolveAs","templateCtrl","controllerAs","children","data","contents","reason","filterHandler","widgetActionsHandler","widgetConfigChangedEvt","widgetReloadEvt","$interval","Filter","styleClass","fromJson","show_modal_footer","show_reload_config","widgetState","isCollapsed","collapsed","debug","postLink","deleteWidget","remove","deleteScope","deleteTemplateUrl","deleteDialog","print","isExecuteOperationEnabled","entityKey","oql","executeOperation","direction","toggleAdvanced","search","json","quick","fields","customFilter","v","toggleFilter","advanced","filterAvailable","showFilter","showFinalFilter","launchSearching","element","addCustomFilter","launchCustomFilter","and","like","JSON","stringify","deleteFilter","launchSearchingAdv","filterApplied","Object","keys","applyFilter","launchSearchingQuick","timeObj","enter","keycode","keyCode","which","customSelectors","getCustomSelectors","widgetSelectors","findFields","$apply","err","getcustomFilter","ifCustomFilter","showCustomFields","changeDirection","changeDefaultTab","debugQuery","parseQuery","toJson","unknownWords","autocomplete_options","suggest","suggest_field_delimited","selectedItems","currentSelection","isSelected","obj","totalSelected","sendEntities","manageSelectedItems","selectionScope","selectionConfig","operationTypes","filterTypes","selected","manageItemsSelectedTemplate","animation","restoreSelection","clearSelection","customOql","filterAction","operationType","saveChangesDialog","finalSelection","visible","selectedItemsLength","lastItem","createApplyPromise","result","deferred","defer","reject","when","editScope","saveDialog","validationError","applyFn","setReloadTimeout","loadingData","startLoading","stopLoading","lastMessageTime","setStatusMessage","message","statusMessage","changeFilter","actions","setActions","showActionsMenu","toggleActionsMenu","adfDashboardCollapseExpand","args","adfWidgetEnterEditMode","adfIsEditMode","adfDashboardChanged","adfDashboardEditsCancelled","widgetClasses","classes","openFullScreen","$emit","openFilter","openAboutScreen","modalInstance","$uibModalInstance","information","about","info","ok","selectedItem","saveWidgetScreen","wId","objectSelector","fileName","createQuickFilter","fieldsQuickSearch","criteria","_filter","or","field","operator","downloadCsv","extra_filter","columns","scope_filter","final_filter","order","window_filter","onWindowTimeChanged","parse","trim","generateQR","stopReloadTimeout","addItemToSelection","removeItemFromSelection","reloadPeriod","isNaN","cancel","completeReload","post","factory","$http","$sce","$templateCache","parseUrl","url","parsedUrl","substring","exposed","tpl","getTrustedResourceUrl","success","response","put"],"mappings":"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","file":"opengate-angular-dashboard-framework.min.js","sourcesContent":["/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf', ['adf.provider', 'ui.bootstrap', 'opengate-angular-js'])\n    .value('adfTemplatePath', '../src/templates/')\n    .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\n    .value('adfVersion', '<<adfVersion>>');","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @ngdoc directive\n * @name adf.directive:adfDashboard\n * @element div\n * @restrict EA\n * @scope\n * @description\n *\n * `adfDashboard` is a directive which renders the dashboard with all its\n * components. The directive requires a name attribute. The name of the\n * dashboard can be used to store the model.\n *\n * @param {string} name name of the dashboard. This attribute is required.\n * @param {boolean=} editable false to disable the editmode of the dashboard.\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\n * @param {object=} adfModel model object of the dashboard.\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\n *                   events during edit mode not reset it if edit mode is exited.\n * @param {boolean=} categories enable categories for the add widget dialog.\n */\n\nangular.module('adf')\n    .directive('adfDashboard', function($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath, $faIcons, $translate) {\n        'use strict';\n\n        function stringToBoolean(string) {\n            switch (angular.isDefined(string) ? string.toLowerCase() : null) {\n                case 'true':\n                case 'yes':\n                case '1':\n                    return true;\n                case 'false':\n                case 'no':\n                case '0':\n                case null:\n                    return false;\n                default:\n                    return Boolean(string);\n            }\n        }\n\n\n        function createConfiguration(type) {\n            var cfg = {};\n            var config = dashboard.widgets[type].config;\n            if (config) {\n                cfg = angular.copy(config);\n            }\n            return cfg;\n        }\n\n        function createWidget(type) {\n            var wdgt = {};\n            var widget = dashboard.widgets[type];\n            if (widget) {\n                wdgt = angular.copy(widget);\n            }\n            return wdgt;\n        }\n\n        /**\n         * Adds the widget to first column of the model.\n         *\n         * @param dashboard model\n         * @param widget to add to model\n         * @param name name of the dashboard\n         */\n        function addNewWidgetToModel(model, widget, name, forceToSave) {\n            if (model) {\n                if (!model.grid) {\n                    model.grid = [];\n                }\n\n                var newWidget = {\n                    width: 3,\n                    height: 2,\n                    x: 0,\n                    y: 0,\n                    definition: widget\n                };\n                model.grid.push(newWidget);\n\n                $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\n\n                if (forceToSave) {\n                    $rootScope.$broadcast('adfDashboardChanged', name, model);\n                }\n            } else {\n                $log.error('model is undefined');\n            }\n        }\n\n        /**\n         * Checks if the edit mode of the widget should be opened immediately.\n         *\n         * @param widget type\n         */\n        function isEditModeImmediate(type) {\n            var widget = dashboard.widgets[type];\n            return widget && widget.edit && widget.edit.immediate;\n        }\n\n        /**\n         * Opens the edit mode of the specified widget.\n         *\n         * @param dashboard scope\n         * @param widget\n         */\n        function openEditMode($scope, widget) {\n            // wait some time before fire enter edit mode event\n            $timeout(function() {\n                $scope.$broadcast('adfWidgetEnterEditMode', widget);\n            }, 200);\n        }\n\n        /**\n         * Splits an object into an array multiple objects inside.\n         *\n         * @param object source object\n         * @param size size of array\n         *\n         * @return array of splitted objects\n         */\n        function split(object, size) {\n            var arr = [];\n            var i = 0;\n            angular.forEach(object, function(value, key) {\n                var index = i++ % size;\n                if (!arr[index]) {\n                    arr[index] = {};\n                }\n                arr[index][key] = value;\n            });\n            return arr;\n        }\n\n        /**\n         * Creates object with the category name as key and an array of widgets as value.\n         *\n         * @param widgets array of widgets\n         *\n         * @return array of categories\n         */\n        function createCategories(widgets) {\n            var categories = {};\n            angular.forEach(widgets, function(widget, key) {\n                var category = widget.category;\n                // if the widget has no category use a default one\n                if (!category) {\n                    category = 'ADF.CATEGORY.MISCELANOUS';\n                }\n\n                widget.title = $translate.instant(widget.title);\n                widget.description = $translate.instant(widget.description);\n                widget.category = $translate.instant(widget.category);\n\n                // push widget to category array\n                if (angular.isUndefined(categories[widget.category])) {\n                    categories[widget.category] = {\n                        widgets: {}\n                    };\n                }\n\n                categories[widget.category].widgets[key] = widget;\n            });\n            return categories;\n        }\n\n        function createCategoriesList(widgets) {\n            var categories = [];\n            angular.forEach(widgets, function(widget, key) {\n                if (!widget.category) {\n                    widget.category = 'ADF.CATEGORY.MISCELLANEOUS';\n                }\n\n                widget.title = $translate.instant(widget.title);\n                widget.description = $translate.instant(widget.description);\n                widget.category = $translate.instant(widget.category);\n\n                if (!widget.categoryTags) {\n                    widget.categoryTags = 'ADF.CATEGORY.TAG.MISCELLANEOUS';\n                }\n\n                var categoriesTmp = widget.categoryTags.split(',');\n\n                angular.forEach(categoriesTmp, function(category, idx) {\n                    // push widget to category array\n                    var translatedCat = $translate.instant(category);\n                    if (categories.indexOf(translatedCat) === -1)\n                        categories.push(translatedCat);\n                });\n\n            });\n            return categories;\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            scope: {\n                name: '@',\n                collapsible: '@',\n                editable: '@',\n                editMode: '@',\n                continuousEditMode: '=',\n                maximizable: '@',\n                adfModel: '=',\n                adfWidgetFilter: '=',\n                categories: '@',\n                hideButtons: '=',\n                extraData: '='\n            },\n            controller: function($scope) {\n                var model = {};\n                var widgetFilter = null;\n                var name = $scope.name;\n\n                // Watching for changes on adfModel\n                $scope.$watch('adfModel', function(oldVal, newVal) {\n                    // has model changed or is the model attribute not set\n                    if (newVal !== null || (oldVal === null && newVal === null)) {\n                        model = $scope.adfModel;\n                        widgetFilter = $scope.adfWidgetFilter;\n\n                        if (model) {\n                            if (!model.title) {\n                                model.title = $translate.instant('ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD');\n                            }\n                            if (!model.titleTemplateUrl) {\n                                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\n                            }\n                            $scope.model = model;\n                        } else {\n                            $log.error('could not find or create model');\n                        }\n                    }\n                }, true);\n\n                // edit mode\n                $scope.editMode = false;\n                $scope.editClass = '';\n\n                function getNewModalScope() {\n                    var scope = $scope.$new();\n                    return scope;\n                }\n\n                $scope.deleteDashboard = function() {\n                    var dashData = {\n                        id: model.id,\n                        name: model.title\n                    };\n\n                    $rootScope.$broadcast('dashboardDelete', dashData);\n                };\n\n                $scope.toggleEditMode = function(openConfigWindow) {\n                    $scope.editMode = !$scope.editMode;\n                    if ($scope.editMode) {\n                        if (!$scope.continuousEditMode) {\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\n                            $rootScope.$broadcast('adfIsEditMode');\n                        }\n\n                        if (openConfigWindow) {\n                            $scope.editDashboardDialog();\n                        }\n                    }\n\n                    if (!$scope.editMode) {\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\n                    }\n                };\n\n                $scope.saveTemporalDashboard = function() {\n                    delete model.temporal;\n                    $rootScope.$broadcast('adfDashboardChanged', name, model);\n                };\n\n                var adfToggleEditMode = $scope.$on('adfToggleEditMode', function(event, isNewDashboard) {\n                    if (isNewDashboard) {\n                        $scope.toggleEditMode(true);\n                    } else {\n                        $scope.toggleEditMode();\n                    }\n                });\n\n                var adfCancelEditMode = $scope.$on('adfCancelEditMode', function(event, isNewDashboard) {\n                    if ($scope.editMode) {\n                        $scope.cancelEditMode();\n                    }\n                });\n\n                var adfWidgetRemoved = $scope.$on('adfWidgetRemovedFromGrid', function(event, widget) {\n                    var index = null;\n                    angular.forEach($scope.adfModel.grid, function(widgetTmp, idx) {\n                        if (widgetTmp.definition.wid === widget.wid) {\n                            index = idx;\n                        }\n                    });\n\n                    if (index >= 0) {\n                        $scope.adfModel.grid.splice(index, 1);\n                        //$scope.gsHandler.commit();\n                    }\n                })\n\n                $scope.collapseAll = function(collapseExpandStatus) {\n                    $rootScope.$broadcast('adfDashboardCollapseExpand', {\n                        collapseExpandStatus: collapseExpandStatus\n                    });\n                };\n\n                $scope.cancelEditMode = function() {\n                    $scope.editMode = false;\n                    if (!$scope.continuousEditMode && ($scope.modelCopy !== $scope.adfModel)) {\n                        $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\n                    }\n                    $rootScope.$broadcast('adfDashboardEditsCancelled');\n                };\n\n                var adfEditDashboardDialog = $scope.$on('adfEditDashboardDialog', function(event, isNewDashboard) {\n                    if ($scope.editMode) {\n                        $scope.editDashboardDialog();\n                    }\n                });\n\n                var adfLaunchSearchingFromWidget = $scope.$on('adfLaunchSearchingFromWidget', function(event, widget, configFilter) {\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\n                });\n                var adfWindowTimeChangedFromWidget = $scope.$on('adfWindowTimeChangedFromWidget', function(event, widget, windowFilter) {\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\n                });\n\n                // edit dashboard settings\n                $scope.editDashboardDialog = function() {\n                    var editDashboardScope = getNewModalScope();\n                    // create a copy of the title, to avoid changing the title to\n                    // \"dashboard\" if the field is empty\n                    editDashboardScope.copy = {\n                        title: (model.title !== 'ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD' ? model.title : ''),\n                        description: model.description,\n                        icon: model.icon ? model.icon : 'fa-tachometer'\n                    };\n\n                    // pass icon list\n                    editDashboardScope.availableIcons = $faIcons.list();\n\n                    var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\n                    if (model.editTemplateUrl) {\n                        adfEditTemplatePath = model.editTemplateUrl;\n                    }\n                    var instance = $uibModal.open({\n                        scope: editDashboardScope,\n                        templateUrl: adfEditTemplatePath,\n                        backdrop: 'static',\n                        keyboard: false,\n                        size: 'lg'\n                    });\n\n\n                    editDashboardScope.closeDialog = function() {\n                        // copy the new title back to the model\n                        model.title = editDashboardScope.copy.title;\n                        model.description = editDashboardScope.copy.description;\n                        model.icon = editDashboardScope.copy.icon;\n\n                        // close modal and destroy the scope\n                        instance.close();\n                        editDashboardScope.$destroy();\n                    };\n                };\n\n                var adfOpenWidgetFromOther = $scope.$on('adfOpenWidgetFromOther', function(event, widget, config) {\n\n                    var internal_config = createConfiguration(widget);\n                    var _config = angular.merge({}, internal_config, config);\n                    var w = {\n                        type: widget,\n                        config: _config,\n                        title: _config.title\n                    };\n                    addNewWidgetToModel(model, w, name, !$scope.editMode);\n                });\n\n                var adfOpenModalWidgetFromOther = $scope.$on('adfOpenModalWidgetFromOther', function(event, widgetType, config) {\n                    var templateUrl = adfTemplatePath + 'widget-fullscreen.html';\n                    if (config.sendSelection) {\n                        templateUrl = adfTemplatePath + 'widget-fullscreen-selection.html';\n                    }\n                    var widget = createWidget(widgetType);\n                    widget.config = angular.merge({}, widget.config, config);\n                    widget.type = widgetType;\n                    if (widget.config.title) {\n                        widget.title = widget.config.title;\n                    }\n                    var fullScreenScope = $scope.$new();\n                    fullScreenScope.definition = fullScreenScope.widget = widget;\n                    var opts = {\n                        scope: fullScreenScope,\n                        templateUrl: templateUrl,\n                        size: fullScreenScope.definition.modalSize || 'el', // 'sm', 'lg'\n                        backdrop: 'static',\n                        windowClass: (fullScreenScope.definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n                    };\n\n                    if ($scope.model && !$scope.model.temporal) {\n                        fullScreenScope.persistDashboard = function() {\n                            $rootScope.$broadcast('adfOpenWidgetFromOther', this.$parent.widget.type, this.$parent.widget.config);\n                            this.closeDialog();\n                        }\n                    }\n\n                    var instance = $uibModal.open(opts);\n                    fullScreenScope.closeDialog = function() {\n                        instance.close();\n                        fullScreenScope.$destroy();\n                    };\n\n\n                });\n\n                var adfAddWidgetDialog = $scope.$on('adfAddWidgetDialog', function(event, isNewDashboard) {\n                    if (!model.temporal && model.editable) {\n                        if (!$scope.editMode) {\n                            $scope.editMode = true;\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\n                            $rootScope.$broadcast('adfIsEditMode');\n                        }\n\n                        $scope.addWidgetDialog();\n                    }\n                });\n\n                // add widget dialog\n                $scope.addScopeCfg = {\n                    widgetFilter: {},\n                    widgetSortingDirection: '',\n                    widgetSorting: 'priority'\n                };\n\n                $scope.addWidgetDialog = function() {\n                    var addScope = getNewModalScope();\n                    var widgets;\n                    if (angular.isFunction(widgetFilter)) {\n                        widgets = {};\n                        angular.forEach(dashboard.widgets, function(widget, type) {\n                            if (widgetFilter(widget, type, model)) {\n                                widgets[type] = widget;\n                            }\n                        });\n                    } else {\n                        widgets = dashboard.widgets;\n                    }\n                    addScope.widgets = widgets;\n\n                    angular.forEach(addScope.widgets, function(widget, type) {\n                        widget.key = type;\n                        if (!widget.category) {\n                            widget.category = 'Miscellaneous';\n                        }\n                    });\n\n                    // pass createCategories function to scope, if categories option is enabled\n                    if ($scope.options.categories) {\n                        addScope.createCategories = createCategories;\n                    } else {\n                        addScope.availableCategories = createCategoriesList(widgets);\n                    }\n\n                    var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\n                    if (model.addTemplateUrl) {\n                        adfAddTemplatePath = model.addTemplateUrl;\n                    }\n\n                    var opts = {\n                        scope: addScope,\n                        templateUrl: adfAddTemplatePath,\n                        backdrop: 'static',\n                        size: 'lg'\n                    };\n\n                    var instance = $uibModal.open(opts);\n\n                    addScope.widgetFilterCfg = $scope.addScopeCfg;\n\n                    addScope.addWidget = function(widget) {\n                        var w = {\n                            type: widget,\n                            Ftype: dashboard.widgets[widget].Ftype || null,\n                            config: createConfiguration(widget)\n                        };\n                        addNewWidgetToModel(model, w, name);\n                        // close and destroy\n                        instance.close();\n                        addScope.$destroy();\n\n                        // check for open edit mode immediately\n                        if (isEditModeImmediate(widget)) {\n                            openEditMode($scope, w);\n                        }\n                    };\n\n                    addScope.changeThumbnail = function(widget) {\n                        if (widget.images) {\n                            if (angular.isUndefined(widget._currThumb)) {\n                                widget._currThumb = 1;\n                            } else {\n                                widget._currThumb += 1;\n                            }\n\n\n                            if (widget._currThumb >= widget.images.length) {\n                                widget._currThumb = 0;\n                            }\n\n                            widget._currImg = widget.images[widget._currThumb];\n                        }\n                    };\n\n                    addScope.closeDialog = function() {\n                        // close and destroy\n                        instance.close();\n                        addScope.$destroy();\n                    };\n                };\n\n                $scope.addNewWidgetToModel = addNewWidgetToModel;\n\n                $scope.$on('destroy', function() {\n                    adfLaunchSearchingFromWidget();\n                    adfWindowTimeChangedFromWidget();\n                    adfToggleEditMode();\n                    adfOpenWidgetFromOther();\n                    adfOpenModalWidgetFromOther();\n                    adfCancelEditMode();\n                    adfAddWidgetDialog();\n                    adfEditDashboardDialog();\n                    adfWidgetRemoved();\n                });\n            },\n            link: function($scope, $element, $attr) {\n                // pass options to scope\n                var options = {\n                    name: $attr.name,\n                    editable: true,\n                    enableConfirmDelete: stringToBoolean($attr.enableConfirmDelete),\n                    maximizable: stringToBoolean($attr.maximizable),\n                    collapsible: stringToBoolean($attr.collapsible),\n                    categories: stringToBoolean($attr.categories),\n                    extraData: {}\n                };\n\n                if (angular.isDefined($attr.editable)) {\n                    options.editable = stringToBoolean($attr.editable);\n                }\n\n                if (angular.isDefined($scope.extraData)) {\n                    options.extraData = $scope.extraData;\n                }\n\n                options.extraData.editing = $scope.editMode;\n\n                $scope.options = options;\n            },\n            templateUrl: adfTemplatePath + 'dashboard.html'\n        };\n    });","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/* global angular */\nangular.module('adf')\n    .directive('adfDashboardGrid', function(adfTemplatePath) {\n        'use strict';\n\n        function preLink($scope) {\n            $scope.gridOptions = {\n                cellHeight: 146,\n                verticalMargin: 10,\n                animate: true,\n                float: false,\n                //alwaysShowResizeHandle: /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),\n                alwaysShowResizeHandle: true,\n                minWidth: 768,\n                auto: true,\n                resizable: {\n                    handles: 'e, se, s, sw, w'\n                },\n                disableDrag: !$scope.editMode,\n                disableResize: !$scope.editMode\n            };\n\n            $scope.gsHandler = null;\n        }\n\n        return {\n            restrict: 'E',\n            scope: {\n                adfModel: '=',\n                editMode: '=',\n                continuousEditMode: '=',\n                options: '='\n            },\n            templateUrl: adfTemplatePath + 'dashboard-grid.html',\n            compile: function() {\n                return {\n                    pre: preLink,\n                };\n            },\n            controller: function($scope, $timeout) {\n                var dashEvents = [];\n                dashEvents.push($scope.$on('adfIsEditMode', function() {\n                    $timeout(function() {\n                        $scope.gsHandler.enable();\n                    }, 100);\n                }));\n\n                dashEvents.push($scope.$on('adfDashboardChanged', function() {\n                    $timeout(function() {\n                        $scope.gsHandler.disable();\n                    }, 100);\n                }));\n\n                dashEvents.push($scope.$on('adfDashboardEditsCancelled', function() {\n                    $timeout(function() {\n                        $scope.gsHandler.disable();\n                    }, 100);\n                }));\n\n                dashEvents.push($scope.$on('adfCancelEditMode', function() {\n                    $timeout(function() {\n                        $scope.gsHandler.disable();\n                    }, 100);\n                }));\n\n                dashEvents.push($scope.$on('adfWidgetAdded', function(event, name, model, widget) {\n                    $timeout(function() {\n                        $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\n                        $scope.gsHandler.enable();\n                    }, 100);\n                }));\n\n                $scope.onChange = function(event, items) {\n                    console.log(\"onChange event: \" + event + \" items:\" + items);\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\n                };\n\n                $scope.onDragStart = function(event, ui) {\n                    console.log(\"onDragStart event: \" + event + \" ui:\" + ui);\n                };\n\n                $scope.onDragStop = function(event, ui) {\n                    console.log(\"onDragStop event: \" + event + \" ui:\" + ui);\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\n                };\n\n                $scope.onResizeStart = function(event, ui) {\n                    console.log(\"onResizeStart event: \" + event + \" ui:\" + ui);\n                };\n\n                $scope.onResizeStop = function(event, ui) {\n                    console.log(\"onResizeStop event: \" + event + \" ui:\" + ui);\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\n                    $scope.$broadcast('OnResizeWidget')\n                };\n\n                $scope.onItemAdded = function(item) {\n                    console.log(\"onItemAdded item: \" + item);\n                };\n\n                $scope.onItemRemoved = function(item) {\n                    console.log(\"onItemRemoved item: \" + item);\n                };\n\n                $scope.$on('destroy', function() {\n                    dashEvents.forEach(function(dashEvt) {\n                        dashEvt();\n                    });\n                });\n            }\n        };\n    });","/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .filter('adfOrderByObjectKey', function($filter) {\n    'use strict';\n\n    return function(item, key){\n      var array = [];\n      angular.forEach(item, function(value, objectKey){\n        value[key] = objectKey;\n        array.push(value);\n      });\n      return $filter('orderBy')(array, key);\n    };\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\n/**\n * @ngdoc object\n * @name adf.dashboardProvider\n * @description\n *\n * The dashboardProvider can be used to register widgets.\n */\nangular.module('adf.provider', [])\n    .provider('dashboard', function() {\n\n        var widgets = {};\n        var widgetsPath = '';\n        var messageTemplate = '<div class=\"alert alert-primary\">{}</div>';\n        var loadingTemplate = '\\\n      <div class=\"progress progress-striped active\">\\n\\\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\n          <span class=\"sr-only\" translate>FORM.MSG.LOADING ...</span>\\n\\\n        </div>\\n\\\n      </div>';\n        var customWidgetTemplatePath = null;\n\n        // default apply function of widget.edit.apply\n        var defaultApplyFunction = function() {\n            return true;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#widget\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Registers a new widget.\n         *\n         * @param {string} name of the widget\n         * @param {object} widget to be registered.\n         *\n         *   Object properties:\n         *\n         *   - `title` - `{string=}` - The title of the widget.\n         *   - `description` - `{string=}` - Description of the widget.\n         *   - `category` - `{string=}` - Category of the widget.\n         *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\n         *   - `config` - `{object}` - Predefined widget configuration.\n         *   - `controller` - `{string=|function()=}` - Controller fn that should be\n         *      associated with newly created scope of the widget or the name of a\n         *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\n         *      if passed as a string.\n         *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\n         *      published to scope under the `controllerAs` name.\n         *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\n         *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\n         *   - `template` - `{string=|function()=}` - html template as a string.\n         *   - `templateUrl` - `{string=}` - path to an html template.\n         *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\n         *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n         *      be injected into the controller. If any of these dependencies are promises, the widget\n         *      will wait for them all to be resolved or one to be rejected before the controller is\n         *      instantiated.\n         *      If all the promises are resolved successfully, the values of the resolved promises are\n         *      injected.\n         *\n         *      The map object is:\n         *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n         *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n         *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\n         *        and the return value is treated as the dependency. If the result is a promise, it is\n         *        resolved before its value is injected into the controller.\n         *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n         *      on the scope of the widget.\n         *   - `edit` - `{object}` - Edit modus of the widget.\n         *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n         *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\n         *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n         *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\n         *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\n         *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n         *        on the scope of the widget.\n         *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\n         *        Default is true.\n         *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\n         *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\n         *        The function have to return a boolean or an promise which can be resolved to a boolean.\n         *        The function can use injection.\n         *\n         * @returns {Object} self\n         */\n        this.widget = function(name, widget) {\n            var w = angular.extend({\n                reload: false,\n                frameless: false\n            }, widget);\n            if (w.edit) {\n                var edit = {\n                    reload: true,\n                    immediate: false,\n                    apply: defaultApplyFunction\n                };\n                angular.extend(edit, w.edit);\n                w.edit = edit;\n            }\n            widgets[name] = w;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#widgetsPath\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Sets the path to the directory which contains the widgets. The widgets\n         * path is used for widgets with a templateUrl which contains the\n         * placeholder {widgetsPath}. The placeholder is replaced with the\n         * configured value, before the template is loaded, but the template is\n         * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\n         * The default value of widgetPaths is ''.\n         *\n         *\n         * @param {string} path to the directory which contains the widgets\n         *\n         * @returns {Object} self\n         */\n        this.widgetsPath = function(path) {\n            widgetsPath = path;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#messageTemplate\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the template for messages.\n         *\n         * @param {string} template for messages.\n         *\n         * @returns {Object} self\n         */\n        this.messageTemplate = function(template) {\n            messageTemplate = template;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#loadingTemplate\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the template which is displayed as\n         * long as the widget resources are not resolved.\n         *\n         * @param {string} template loading template\n         *\n         * @returns {Object} self\n         */\n        this.loadingTemplate = function(template) {\n            loadingTemplate = template;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#customWidgetTemplatePath\n         * @propertyOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the container template for the widgets\n         *\n         * @param {string} path to the custom widget template\n         *\n         * @returns {Object} self\n         */\n        this.customWidgetTemplatePath = function(templatePath) {\n            customWidgetTemplatePath = templatePath;\n            return this;\n        };\n\n        /**\n         * @ngdoc service\n         * @name adf.dashboard\n         * @description\n         *\n         * The dashboard holds all options and  widgets.\n         *\n         * @property {Array.<Object>} widgets Array of registered widgets.\n         * @property {string} widgetsPath Default path for widgets.\n         * @property {string} messageTemplate Template for messages.\n         * @property {string} loadingTemplate Template for widget loading.\n         * * @property {string} customWidgetTemplatePath Changes the container template for the widgets\n         *\n         * @returns {Object} self\n         */\n        this.$get = function() {\n            var cid = 0;\n\n            return {\n                widgets: widgets,\n                widgetsPath: widgetsPath,\n                messageTemplate: messageTemplate,\n                loadingTemplate: loadingTemplate,\n                customWidgetTemplatePath: customWidgetTemplatePath,\n\n                /**\n                 * @ngdoc method\n                 * @name adf.dashboard#id\n                 * @methodOf adf.dashboard\n                 * @description\n                 *\n                 * Creates an ongoing numeric id. The method is used to create ids for\n                 * columns and widgets in the dashboard.\n                 */\n                id: function() {\n                    return new Date().getTime() + '-' + (++cid);\n                },\n\n                /**\n                 * @ngdoc method\n                 * @name adf.dashboard#idEqual\n                 * @methodOf adf.dashboard\n                 * @description\n                 *\n                 * Checks if the given ids are equal.\n                 *\n                 * @param {string} id widget or column id\n                 * @param {string} other widget or column id\n                 */\n                idEquals: function(id, other) {\n                    // use toString, because old ids are numbers\n                    return ((id) && (other)) && (id.toString() === other.toString());\n                }\n            };\n        };\n\n    });","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf')\n    .directive('adfWidgetContent', function ($log, $q, widgetService,\n        $compile, $controller, $injector, dashboard, $translate) {\n\n        function renderError($element, msg) {\n            $log.warn(msg);\n            $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\n        }\n\n        function compileWidget($scope, $element, currentScope, configChanged) {\n            var model = $scope.model;\n            var content = $scope.content;\n\n            var extra = $scope.extra;\n\n            var newScope = currentScope;\n            if (!model) {\n                $translate('ADF.ERROR.MODEL_IS_UNDEFINED').then(function (translateMessage) {\n                    renderError($element, translateMessage);\n                });\n            } else if (!content) {\n                if (model.title) {\n                    $translate('ADF.ERROR.WIDGET_FOR_DEPRECTATED', {\n                        title: model.title\n                    }).then(function (translateMessage) {\n                        renderError($element, translateMessage);\n                    });\n                } else {\n                    $translate('ADF.ERROR.WIDGET_DEPRECTATED').then(function (translateMessage) {\n                        renderError($element, translateMessage);\n                    });\n                }\n            } else {\n                if (newScope) {\n                    var is_menu = newScope.menu !== undefined && newScope.menu !== null && (!newScope.isPaginationEnable || !newScope.isPaginationEnable());\n                    var is_itemsPerPage = newScope.itemsPerPage !== undefined && newScope.itemsPerPage !== null;\n                    if (is_menu || configChanged || !angular.isFunction(newScope.reloadData)) {\n                        if ($scope.navOptionsHandler) {\n                            $scope.navOptionsHandler.firstLoad = true;\n                        }\n\n                        newScope = renderWidget($scope, $element, currentScope, model, content, extra);\n                    } else {\n                        if (is_itemsPerPage || newScope.page) {\n                            newScope.page = 1;\n                        }\n\n                        newScope.reloadData();\n                    }\n                } else {\n                    if ($scope.navOptionsHandler) {\n                        $scope.navOptionsHandler.firstLoad = true;\n                    }\n\n                    newScope = renderWidget($scope, $element, currentScope, model, content, extra);\n                }\n            }\n\n            function _getWindowTime(type) {\n                if (type === \"custom\") {\n                    return {\n                        from: newScope.config.windowFilter.from,\n                        to: newScope.config.windowFilter.to\n                    }\n                }\n                var from = window.moment().subtract(1, type);\n                return {\n                    from: from._d\n                };\n            }\n\n            if (newScope) {\n                if (newScope.config) {\n                    newScope.config.getWindowTime = function () {\n                        var windowFilter = newScope.config.windowFilter;\n                        if (windowFilter && windowFilter.type) {\n                            var winTime = _getWindowTime(windowFilter.type);\n                            /* jshint ignore:start */\n                            if (!window.eval(newScope.config.windowFilter.rawdate)) {\n                                for (var key in winTime) {\n                                    winTime[key] = window.moment(winTime[key]).format();\n                                }\n                                winTime['rawdate'] = true;\n                            }\n                            /* jshint ignore:end */\n                            return winTime;\n                        }\n                    }\n                }\n\n                if (extra) {\n                    newScope.editing = extra.editing ? true : false;\n                    newScope.extraData = extra;\n                }\n            }\n            return newScope;\n        }\n\n        function renderWidget($scope, $element, currentScope, model, content, extra) {\n            // display loading template\n            $element.html(dashboard.loadingTemplate);\n\n            // create new scope\n            var templateScope = $scope.$new();\n\n            // pass config object to scope\n            if (!model.config) {\n                model.config = {};\n            }\n\n            templateScope.config = model.config;\n            templateScope.editing = extra && extra.editing;\n\n            if (extra) {\n                templateScope.extra = extra;\n            }\n\n            var _from = currentScope || templateScope.config;\n            templateScope.selectionManager = (_from) ? _from.selectionManager : undefined;\n\n            // local injections\n            var base = {\n                $scope: templateScope,\n                widget: model,\n                config: model.config\n            };\n\n            // get resolve promises from content object\n            var resolvers = {};\n            resolvers.$tpl = widgetService.getTemplate(content);\n            if (content.resolve) {\n                angular.forEach(content.resolve, function (promise, key) {\n                    if (angular.isString(promise)) {\n                        resolvers[key] = $injector.get(promise);\n                    } else {\n                        resolvers[key] = $injector.invoke(promise, promise, base);\n                    }\n                });\n            }\n\n            // resolve all resolvers\n            $q.all(resolvers).then(function (locals) {\n                angular.extend(locals, base);\n\n                // pass resolve map to template scope as defined in resolveAs\n                if (content.resolveAs) {\n                    templateScope[content.resolveAs] = locals;\n                }\n\n                // compile & render template\n                var template = locals.$tpl;\n                $element.html(template);\n                if (content.controller) {\n                    var templateCtrl = $controller(content.controller, locals);\n                    if (content.controllerAs) {\n                        templateScope[content.controllerAs] = templateCtrl;\n                    }\n                    $element.children().data('$ngControllerController', templateCtrl);\n                }\n                $compile($element.contents())(templateScope);\n            }, function (reason) {\n                // handle promise rejection\n                var msg = 'ADF.ERROR.COULD_NOT_RESOLVE_ALL_PROMISSES';\n                $translate(msg, {\n                    reason: (reason ? \": \" + reason : reason)\n                }).then(function (translateMessage) {\n                    renderError($element, translateMessage);\n                });\n            });\n\n            // destroy old scope\n            if (currentScope) {\n                currentScope.$destroy();\n            }\n\n            return templateScope;\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            scope: {\n                model: '=',\n                content: '=',\n                extra: '=',\n                navOptionsHandler: '=?',\n                filterHandler: '=?',\n                widgetActionsHandler: '=?'\n            },\n            link: function ($scope, $element) {\n                var currentScope = compileWidget($scope, $element, null);\n                var widgetConfigChangedEvt = $scope.$on('widgetConfigChanged', function () {\n                    currentScope = compileWidget($scope, $element, currentScope, true);\n                });\n\n                var widgetReloadEvt = $scope.$on('widgetReload', function () {\n                    currentScope = compileWidget($scope, $element, currentScope, false);\n                });\n\n                $scope.$on('destroy', function () {\n                    widgetConfigChangedEvt();\n                    widgetReloadEvt();\n                });\n            }\n        };\n    });","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf')\n    .directive('adfWidgetGrid', function($injector, $q, $log, $uibModal, $rootScope, $interval, dashboard, adfTemplatePath, Filter) {\n        function preLink($scope) {\n            var definition = $scope.definition;\n\n            if (definition) {\n                var w = dashboard.widgets[definition.type];\n                if (w) {\n                    // pass title\n                    if (!definition.title) {\n                        definition.title = w.title;\n                    }\n\n                    definition.titleTemplateUrl = adfTemplatePath + 'widget-grid-title.html';\n\n                    if (!definition.editTemplateUrl) {\n                        definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\n                        if (w.editTemplateUrl) {\n                            definition.editTemplateUrl = w.editTemplateUrl;\n                        }\n                    }\n\n                    if (!definition.titleTemplateUrl) {\n                        definition.frameless = w.frameless;\n                    }\n\n                    if (!definition.styleClass) {\n                        definition.styleClass = w.styleClass;\n                    }\n\n                    // set id for sortable\n                    if (!definition.wid) {\n                        definition.wid = dashboard.id();\n                    }\n\n                    // pass copy of widget to scope\n                    $scope.widget = angular.copy(w);\n\n                    // create config object\n                    var config = definition.config;\n                    if (config) {\n                        if (angular.isString(config)) {\n                            config = angular.fromJson(config);\n                        }\n                    } else {\n                        config = {};\n                    }\n\n                    if (typeof $scope.widget.show_modal_footer === \"undefined\") {\n                        $scope.widget.show_modal_footer = true;\n                    }\n\n                    if (typeof $scope.widget.show_reload_config === \"undefined\") {\n                        $scope.widget.show_reload_config = true;\n                    }\n\n                    // pass config to scope\n                    $scope.config = config;\n\n                    // collapse exposed $scope.widgetState property\n                    if (!$scope.widgetState) {\n                        $scope.widgetState = {};\n                        $scope.widgetState.isCollapsed = (w.collapsed === true) ? w.collapsed : false;\n                    }\n\n                } else {\n                    $log.warn('could not find widget ' + definition.type);\n                }\n            } else {\n                $log.debug('definition not specified, widget was probably removed');\n            }\n        }\n\n        function postLink($scope, $element) {\n            var definition = $scope.definition;\n            if (!definition) {\n                $log.debug('widget not found');\n                return;\n            }\n            if (!$scope.config) {\n                $scope.config = {};\n            }\n\n            var config = $scope.config;\n\n            // bind close function\n            var deleteWidget = function() {\n                $element.remove();\n                $rootScope.$broadcast('adfWidgetRemovedFromGrid', definition);\n            };\n\n            $scope.remove = function() {\n                if ($scope.options.enableConfirmDelete) {\n                    var deleteScope = $scope.$new();\n\n                    var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\n                    if (definition.deleteTemplateUrl) {\n                        deleteTemplateUrl = definition.deleteTemplateUrl;\n                    }\n                    var opts = {\n                        scope: deleteScope,\n                        templateUrl: deleteTemplateUrl,\n                        backdrop: 'static'\n                    };\n                    var instance = $uibModal.open(opts);\n\n                    deleteScope.closeDialog = function() {\n                        instance.close();\n                        deleteScope.$destroy();\n                    };\n                    deleteScope.deleteDialog = function() {\n                        deleteWidget();\n                        deleteScope.closeDialog();\n                    };\n                } else {\n                    deleteWidget();\n                }\n            };\n\n\n            $scope.print = function() {\n                if (!$scope.editMode) {\n                    $scope.$broadcast('widgetPrint');\n                }\n            }\n\n            $scope.isExecuteOperationEnabled = function() {\n\n                if (config.entityKey)\n                    return true;\n                var filter = config.filter;\n                if (typeof filter === \"string\") {\n                    return filter.length > 0;\n                }\n                if (typeof filter === \"object\") {\n                    return filter.value.length > 2 && filter.oql;\n                }\n                return false;\n            }\n\n            $scope.executeOperation = function() {\n                if (!$scope.editMode) {\n\n                    $scope.$parent.$broadcast('widgetExecuteOperation');\n                }\n            };\n\n            $scope.filter = {\n                value: \"\"\n            };\n            $scope.sort = {\n                value: \"\",\n                direction: \"\"\n            };\n\n            $scope.toggleAdvanced = 1;\n            var filter = config.filter;\n            if (typeof filter === \"object\" && filter.oql && filter.oql.length > 2) {\n                $scope.search = {\n                    oql: filter.oql,\n                    json: filter.value\n                };\n                $scope.toggleAdvanced = 0;\n            } else if (typeof filter === \"string\") {\n                $scope.search = {\n                    quick: filter\n                };\n                $scope.toggleAdvanced = 1;\n            } else if (typeof filter === \"object\" && filter.fields) {\n                $scope.search = {\n                    customFilter: filter.fields\n                };\n                $scope.search.fields = [];\n                angular.forEach(filter.fields, function(v, key) {\n                    $scope.search.fields.push(v.name);\n                });\n                $scope.toggleAdvanced = 2;\n            } else {\n                $scope.search = {\n                    quick: filter = \"\"\n                };\n            }\n\n            $scope.toggleFilter = function(advanced) {\n                $scope.toggleAdvanced = advanced;\n            };\n            $scope.filterAvailable = false;\n            $scope.showFilter = function() {\n                $scope.filterAvailable = $scope.filterAvailable === true ? false : true;\n            };\n\n            $scope.showFinalFilter = false;\n\n            $scope.launchSearching = function() {\n                var widget = {\n                    definition: definition,\n                    element: $element\n                };\n\n                $rootScope.$broadcast('adfLaunchSearchingFromWidget', widget, $scope.config.filter);\n                $scope.reload(true);\n            }\n            $scope.addCustomFilter = function(key) {\n                $scope.search.customFilter = $scope.search.customFilter ? $scope.search.customFilter : [];\n                $scope.search.customFilter.push({\n                    name: key,\n                    value: ''\n                });\n            }\n\n            $scope.launchCustomFilter = function() {\n                if ($scope.search.customFilter && $scope.search.customFilter.length > 0) {\n                    $scope.search.oql = $scope.search.json = '';\n\n                    $scope.config.filter = {\n                        value: {\n                            and: []\n                        },\n                        fields: $scope.search.customFilter\n                    }\n                    angular.forEach($scope.search.customFilter, function(v, key) {\n                        if (v.value) {\n                            var like = {};\n                            like[v.name] = v.value;\n                            $scope.config.filter.value.and.push({\n                                'like': like\n                            });\n                        }\n\n                    });\n                    $scope.config.filter.value = JSON.stringify($scope.config.filter.value);\n                }\n\n                $scope.launchSearching();\n            }\n\n\n\n            $scope.deleteFilter = function(value, model) {\n                angular.forEach($scope.search.customFilter, function(v, key) {\n                    if (v.name === value) {\n                        $scope.search.customFilter.splice(key, 1);\n                    }\n                });\n                if ($scope.search.customFilter.length === 0) {\n                    $scope.config.filter = {};\n                }\n            };\n\n            $scope.launchSearchingAdv = function() {\n                if (!$scope.filterApplied) {\n                    $scope.search.quick = '';\n                    if ($scope.search.json === '' || $scope.search.json === '{}' || (!angular.isString($scope.search.json) && Object.keys($scope.search.json).length === 0)) {\n                        $scope.config.filter = {\n                            oql: '',\n                            value: ''\n                        };\n                    } else {\n                        $scope.config.filter = {\n                            oql: $scope.search.oql,\n                            value: $scope.search.json\n                        };\n                    }\n                    $scope.launchSearching();\n                    $scope.filterApplied = true;\n                }\n            }\n\n            $scope.applyFilter = function(event) {\n                $scope.launchSearching();\n            }\n\n            $scope.launchSearchingQuick = function() {\n                if (!$scope.filterApplied) {\n                    $scope.search.oql = $scope.search.json = '';\n                    $scope.config.filter = $scope.search.quick;\n                    $scope.launchSearching();\n                    $scope.filterApplied = true;\n                }\n            }\n\n            var windowTimeChanged = $scope.$on('onWindowTimeChanged', function(event, timeObj) {\n                $scope.config.windowFilter = timeObj ? timeObj : (config.windowFilter ? {} : timeObj);\n                var widget = {\n                    definition: definition,\n                    element: $element\n                }\n                $rootScope.$broadcast('adfWindowTimeChangedFromWidget', widget, $scope.config.windowFilter);\n                $scope.reload();\n            });\n\n            $scope.enter = function(event) {\n                var keycode = (event.keyCode ? event.keyCode : event.which);\n                if (keycode === 13) {\n                    if ($scope.toggleAdvanced === 0)\n                        $scope.launchSearchingAdv();\n                    if ($scope.toggleAdvanced === 1)\n                        $scope.launchSearchingQuick();\n                    if ($scope.toggleAdvanced === 2)\n                        $scope.launchCustomFilter();\n\n                } else if (keycode === 19) {\n                    $scope.showFinalFilter = $scope.showFinalFilter === false ? true : false;\n                } else {\n                    $scope.filterApplied = false;\n                }\n            }\n\n\n            $scope.customSelectors = [];\n            $scope.getCustomSelectors = function() {\n                if ($scope.config.customSelectors) {\n                    $scope.customSelectors = $scope.config.customSelectors;\n                } else {\n                    config.widgetSelectors().findFields(\"\").then(function(fields) {\n                        $scope.customSelectors = fields;\n                        $scope.$apply();\n                    }).catch(function(err) {\n                        $log.error(err);\n                    });\n                }\n            }\n\n            $scope.customFilter = [];\n            $scope.getcustomFilter = function() {\n                config.widgetSelectors().findFields(\"\").then(function(fields) {\n                    $scope.customFilter = fields;\n                    $scope.$apply();\n                }).catch(function(err) {\n                    $log.error(err);\n                });\n\n            }\n\n            $scope.ifCustomFilter = function() {\n                return $scope.customSelectors && config.sort && $scope.definition.type === 'FullDevicesList' && $scope.toggleAdvanced === 2;\n            }\n\n            $scope.showCustomFields = function() {\n                return $scope.definition.type === 'FullDevicesList' && $scope.toggleAdvanced === 2 && $scope.search.customFilter && $scope.filterAvailable && !$scope.editMode;\n            }\n\n            $scope.changeDirection = function() {\n                var direction = config.sort.direction;\n                if (direction === 'DESCENDING') {\n                    $scope.config.sort.direction = 'ASCENDING'\n                } else if (direction === 'ASCENDING') {\n                    $scope.config.sort.direction = 'DESCENDING'\n                }\n                $scope.reload();\n            }\n\n            $scope.changeDefaultTab = function() {\n\n\n                $scope.reload();\n            }\n\n            $scope.debugQuery = function() {\n                Filter.parseQuery($scope.search.oql || '')\n                    .then(function(data) {\n                        //$scope.elementos = data;\n                        $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\n                        $scope.unknownWords = '';\n                        $scope.filter.error = null;\n                    })\n                    .catch(function(err) {\n                        $scope.filter.error = err;\n                        // Tratar el error\n                    });\n\n            }\n\n            $scope.autocomplete_options = function() {\n                var autocomplete_options = {\n                    suggest: Filter.suggest_field_delimited,\n                    customSelectors: config.widgetSelectors()\n                };\n\n                return autocomplete_options;\n\n            };\n\n            // Multiple selection\n            $scope.selectedItems = definition.selectedItems || {};\n\n            // Gestor de seleccion\n            $scope.selectionManager = {\n                currentSelection: $scope.selectedItems,\n                isSelected: function(key, obj) {\n                    if ($scope.selectedItems[key] && !angular.isUndefined(obj)) {\n                        $scope.selectedItems[key].data = obj;\n                    }\n\n                    return $scope.selectedItems[key] ? true : false;\n                },\n                totalSelected: function() {\n                    return Object.keys($scope.selectedItems).length;\n                }\n            };\n\n            if (definition.config.sendSelection) {\n\n                $scope.sendEntities = function() {\n                    definition.config.sendSelection($scope.selectedItems);\n                    $scope.$parent.closeDialog();\n                }\n\n                if (definition.config.selectedItems) {\n                    $scope.selectedItems = angular.copy(definition.config.selectedItems);\n                }\n\n                $scope.config.selectionManager = $scope.selectionManager;\n            }\n\n            $scope.manageSelectedItems = function() {\n                var selectionScope = $scope.$new();\n\n                if (definition.config.sendSelection) {\n                    delete config.selectionConfig.operationTypes;\n                    delete config.selectionConfig.filterTypes;\n                }\n\n                selectionScope.selectionConfig = config.selectionConfig;\n\n                selectionScope.selectedItems = [];\n                angular.forEach($scope.selectedItems, function(value, key) {\n                    selectionScope.selectedItems.push({\n                        key: key,\n                        value: value\n                    });\n                });\n\n                selectionScope.currentSelection = {\n                    selected: selectionScope.selectedItems\n                };\n\n                var manageItemsSelectedTemplate = adfTemplatePath + 'widget-selection.html';\n                var opts = {\n                    scope: selectionScope,\n                    templateUrl: manageItemsSelectedTemplate,\n                    backdrop: 'static',\n                    size: 'lg',\n                    animation: true\n                };\n\n                var instance = $uibModal.open(opts);\n\n                selectionScope.restoreSelection = function() {\n                    selectionScope.currentSelection = {\n                        selected: selectionScope.selectedItems\n                    };\n                };\n\n                selectionScope.clearSelection = function() {\n                    selectionScope.currentSelection.selected = [];\n                };\n\n                // Cierra sy guarda los datos de nueva selección\n                selectionScope.applyFilter = function(type) {\n                    var customOql = selectionScope.selectionConfig.filterAction(selectionScope.currentSelection.selected, type);\n\n                    if (!angular.isUndefined(customOql) && customOql !== null) {\n                        $scope.toggleAdvanced = 0;\n                        Filter.parseQuery(customOql).then(function(data) {\n                            $scope.search.oql = customOql;\n                            $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\n                            $scope.unknownWords = '';\n                            $scope.filter.error = null;\n\n                            $scope.launchSearchingAdv();\n                        }).catch(function(err) {\n                            $scope.filter.error = err;\n                        });\n                    }\n                };\n\n                selectionScope.executeOperation = function(operationType) {\n                    if (!$scope.editMode) {\n                        $scope.$parent.$broadcast('widgetExecuteOperation', {\n                            'selectedItems': selectionScope.currentSelection.selected,\n                            'type': operationType\n                        });\n                    }\n                };\n\n                // Cierra sy guarda los datos de nueva selección\n                selectionScope.saveChangesDialog = function() {\n                    var finalSelection = {};\n                    angular.forEach(selectionScope.currentSelection.selected, function(data, idx) {\n                        finalSelection[data.key] = {\n                            data: data.value.data,\n                            visible: data.value.visible\n                        };\n                    });\n\n                    $scope.selectedItems = angular.copy(finalSelection);\n                    $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n\n                    $scope.selectionManager.lastItem = {};\n                    $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n\n                    instance.close();\n                    selectionScope.$destroy();\n                };\n\n                // Cierra sin realizar ninguna acción\n                selectionScope.closeDialog = function() {\n                    instance.close();\n                    selectionScope.$destroy();\n                };\n            };\n\n\n            // bind edit function\n            $scope.edit = function() {\n                var editScope = $scope.$new();\n                editScope.definition = angular.copy(definition);\n\n                var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\n                if (definition.editTemplateUrl) {\n                    adfEditTemplatePath = definition.editTemplateUrl;\n                }\n\n                var opts = {\n                    scope: editScope,\n                    templateUrl: adfEditTemplatePath,\n                    backdrop: 'static',\n                    size: 'lg'\n                };\n\n                var instance = $uibModal.open(opts);\n\n                editScope.closeDialog = function() {\n                    instance.close();\n                    editScope.$destroy();\n                };\n\n                // TODO create util method\n                function createApplyPromise(result) {\n                    var promise;\n                    if (typeof result === 'boolean') {\n                        var deferred = $q.defer();\n                        if (result) {\n                            deferred.resolve();\n                        } else {\n                            deferred.reject();\n                        }\n                        promise = deferred.promise;\n                    } else {\n                        promise = $q.when(result);\n                    }\n                    return promise;\n                }\n\n                editScope.saveDialog = function() {\n                    // clear validation error\n                    editScope.validationError = null;\n\n                    // build injection locals\n                    var widget = $scope.widget;\n\n                    // create a default apply method for widgets\n                    // without edit mode\n                    // see issue https://goo.gl/KHPQLZ\n                    var applyFn;\n                    if (widget.edit) {\n                        applyFn = widget.edit.apply;\n                    } else {\n                        applyFn = function() {\n                            return true;\n                        };\n                    }\n\n                    // injection locals\n                    var locals = {\n                        widget: widget,\n                        definition: editScope.definition,\n                        config: editScope.definition.config\n                    };\n\n                    // invoke apply function and apply if success\n                    var result = $injector.invoke(applyFn, applyFn, locals);\n                    createApplyPromise(result).then(function() {\n                        definition.title = editScope.definition.title;\n                        if (editScope.definition.type === 'summaryChart') {\n                            editScope.definition.Ftype = editScope.definition.config.type.toLowerCase();\n                            definition.Ftype = editScope.definition.config.type.toLowerCase()\n                        }\n                        angular.extend(definition.config, editScope.definition.config);\n\n                        editScope.closeDialog();\n\n                        if (widget.edit && widget.edit.reload) {\n                            $scope.setReloadTimeout();\n                            // reload content after edit dialog is closed\n                            $scope.$broadcast('widgetConfigChanged');\n                        }\n                    }, function(err) {\n                        if (err) {\n                            editScope.validationError = err;\n                        } else {\n                            editScope.validationError = 'VALIDATION_DURING_APPLY_FAILED';\n                        }\n                    });\n                };\n\n            };\n\n\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            templateUrl: adfTemplatePath + 'widget-grid.html',\n            scope: {\n                definition: '=',\n                editMode: '=',\n                options: '=',\n                widgetState: '='\n            },\n            controller: function($scope) {\n\n                if ($scope.definition.config.selectedItems) {\n                    $scope.selectedItemsLength = Object.keys($scope.definition.config.selectedItems).length;\n                }\n\n\n                // Controlador de la barra inferior de los widgets\n                $scope.navOptionsHandler = {\n                    firstLoad: true,\n                    loadingData: false,\n                    startLoading: function() {\n                        $scope.navOptionsHandler.loadingData = true;\n                    },\n                    stopLoading: function() {\n                        $scope.navOptionsHandler.firstLoad = false;\n                        $scope.navOptionsHandler.loadingData = false;\n                        $scope.navOptionsHandler.lastMessageTime = new Date();\n                    },\n                    setStatusMessage: function(message) {\n                        $scope.navOptionsHandler.statusMessage = message;\n                        $scope.navOptionsHandler.lastMessageTime = new Date();\n                    }\n                };\n\n                // Controlador de los parámetros del filtro\n                $scope.filterHandler = {\n                    changeFilter: function(filter, search, toggleAdvanced) {\n                        $scope.filter = filter;\n                        $scope.search = search;\n                        $scope.toggleAdvanced = toggleAdvanced;\n                    }\n                };\n\n                // Controlador de las custom actions del widget\n                $scope.widgetActionsHandler = {\n                    actions: [],\n                    setActions: function(actions) {\n                        $scope.widgetActionsHandler.actions = actions;\n                    }\n                };\n                $scope.showActionsMenu = false;\n                $scope.toggleActionsMenu = function() {\n                    $scope.showActionsMenu = !$scope.showActionsMenu;\n                };\n\n                var adfDashboardCollapseExpand = $scope.$on('adfDashboardCollapseExpand', function(event, args) {\n                    $scope.widgetState.isCollapsed = args.collapseExpandStatus;\n                });\n\n                var adfWidgetEnterEditMode = $scope.$on('adfWidgetEnterEditMode', function(event, widget) {\n                    if (dashboard.idEquals($scope.definition.wid, widget.wid)) {\n                        $scope.edit();\n                    }\n                });\n\n                var adfIsEditMode = $scope.$on('adfIsEditMode', function(event, widget) {\n                    $scope.editing = true;\n                });\n\n                var adfDashboardChanged = $scope.$on('adfDashboardChanged', function(event, widget) {\n                    $scope.editing = false;\n                });\n\n                var adfDashboardEditsCancelled = $scope.$on('adfDashboardEditsCancelled', function(event, widget) {\n                    $scope.editing = false;\n                });\n\n                $scope.widgetClasses = function(w, definition) {\n                    var classes = definition.styleClass || '';\n                    // w is undefined, if the type of the widget is unknown\n                    // see issue #216\n                    // if (!w || !w.frameless || $scope.editMode) {\n                    //     classes += ' panel panel-default';\n                    // }\n                    return classes;\n                };\n\n                $scope.openFullScreen = function() {\n\n                    $scope.$emit('adfOpenModalWidgetFromOther', $scope.definition.type, $scope.config);\n                };\n\n                $scope.openFilter = function() {\n\n                }\n\n                $scope.openAboutScreen = function(size) {\n                    size = 'md';\n                    var modalInstance = $uibModal.open({\n                        animation: true,\n                        templateUrl: 'widgetAboutModal.html',\n                        controller: function($scope, $uibModalInstance, information) {\n                            $scope.about = {};\n                            $scope.about.info = information;\n                            $scope.ok = function() {\n                                $uibModalInstance.close();\n                            };\n                        },\n                        'size': size,\n                        resolve: {\n                            information: function() {\n                                return $scope.config.about;\n                            }\n                        }\n                    });\n\n                    modalInstance.result.then(function(selectedItem) {\n                        $scope.selected = selectedItem;\n                    }, function() {\n                        $log.info('Modal dismissed at: ' + new Date());\n                    });\n                };\n\n                $scope.saveWidgetScreen = function(wId) {\n                    $scope.$emit('generateSnapshot', {\n                        'objectSelector': '.widget_' + wId,\n                        'fileName': 'capture_' + new Date().getTime()\n                    });\n                };\n\n                var onWindowTimeChanged = function(timeObj) {\n                    var filter = {\n                        and: []\n                    };\n                    if (timeObj && timeObj.from) {\n                        filter.and.push({\n                            gt: {\n                                operationDate: timeObj.from\n                            }\n                        });\n\n                        if (timeObj.to) {\n                            filter.and.push({\n                                lt: {\n                                    operationDate: timeObj.to\n                                }\n                            });\n                        }\n                    } else {\n                        filter = null;\n                    }\n                    return filter;\n                }\n\n                var createQuickFilter = function(fieldsQuickSearch, filter) {\n                    var _filter = {\n                        or: []\n                    };\n                    var criteria;\n                    fieldsQuickSearch.forEach(function(field) {\n                        criteria = {};\n                        criteria[field.operator] = {};\n                        criteria[field.operator][field.name] = $scope.config.filter;\n                        _filter.or.push(criteria);\n                    });\n                    return _filter;\n                }\n\n                $scope.downloadCsv = function() {\n                    var columns = $scope.config.columns;\n                    var scope_filter = $scope.config.filter;\n                    var extra_filter;\n                    var final_filter = {};\n                    var order = $scope.config.sort ? $scope.config.sort : undefined;\n                    if ($scope.config.windowFilter) {\n                        var window_filter = $scope.config.onWindowTimeChanged($scope.config.windowFilter);\n                        if (window_filter && window_filter.and) {\n                            extra_filter = {\n                                and: window_filter.and\n                            };\n                        }\n                    }\n                    var filter;\n                    if (scope_filter.value && scope_filter.value.length > 4) {\n                        filter = JSON.parse(scope_filter.value);\n                    } else if (typeof scope_filter === 'string' && scope_filter.trim() !== '') {\n                        filter = createQuickFilter($scope.config.fieldsQuickSearch, scope_filter);\n                    }\n                    if (extra_filter) {\n                        if (filter) {\n                            final_filter = {\n                                and: [extra_filter, filter]\n                            };\n                        } else {\n                            final_filter = extra_filter;\n                        }\n                    } else {\n                        final_filter = filter;\n                    }\n                    $scope.$broadcast('downloadCsv', {\n                        'columns': columns,\n                        'filter': final_filter,\n                        'order': order\n                    });\n                };\n\n                $scope.generateQR = function() {\n                    $scope.$broadcast('generateQR');\n                };\n\n                var addItemToSelection = $scope.$on('addItemToSelection', function(event, item) {\n                    if (!$scope.selectedItems[item.key]) {\n                        $scope.selectedItems[item.key] = {\n                            data: item.data,\n                            visible: item.visible\n                        };\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n                        item.isSelected = true;\n                        $scope.selectionManager.lastItem = item;\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n                    }\n\n                });\n\n                var removeItemFromSelection = $scope.$on('removeItemFromSelection', function(event, item) {\n                    if ($scope.selectedItems[item.key]) {\n                        delete $scope.selectedItems[item.key];\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n                        item.isSelected = false;\n                        $scope.selectionManager.lastItem = item;\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n                    }\n                });\n\n                // bind reload function\n                var stopReloadTimeout;\n\n                $scope.setReloadTimeout = function() {\n                    var config = $scope.config || $scope.definition.config;\n\n                    if (config) {\n                        var reloadPeriod = config.reloadPeriod;\n                        if (!isNaN(reloadPeriod) && (reloadPeriod * 1) !== 0) {\n                            if (angular.isDefined(stopReloadTimeout)) {\n                                $interval.cancel(stopReloadTimeout)\n                                stopReloadTimeout = undefined;\n                            };\n                            stopReloadTimeout = $interval($scope.reload, (reloadPeriod * 1000));\n                        } else if (stopReloadTimeout) {\n                            $interval.cancel(stopReloadTimeout);\n                        }\n                    }\n                }\n\n                $scope.reload = function(completeReload) {\n                    if (completeReload) {\n                        $scope.$broadcast('widgetReload', completeReload);\n                    } else {\n                        $scope.$broadcast('widgetReload');\n                    }\n\n                    $scope.setReloadTimeout();\n                };\n\n                // verificacion de periodo de refresco\n                $scope.setReloadTimeout();\n\n                $scope.$on('$destroy', function() {\n                    adfDashboardCollapseExpand();\n                    adfWidgetEnterEditMode();\n                    adfIsEditMode();\n                    adfDashboardChanged();\n                    adfDashboardEditsCancelled();\n                    addItemToSelection();\n                    removeItemFromSelection();\n                    $interval.cancel(stopReloadTimeout);\n                });\n            },\n            compile: function() {\n\n                /**\n                 * use pre link, because link of widget-content\n                 * is executed before post link widget\n                 */\n                return {\n                    pre: preLink,\n                    post: postLink\n                };\n            }\n        };\n\n    });","\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/**\n * The widget service provide helper functions to render widgets and their content.\n */\nangular.module('adf')\n  .factory('widgetService', function($http, $q, $sce, $templateCache, dashboard) {\n    'use strict';\n\n    function parseUrl(url) {\n      var parsedUrl = url;\n      if (url.indexOf('{widgetsPath}') >= 0) {\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\n                .replace('//', '/');\n        if (parsedUrl.indexOf('/') === 0) {\n          parsedUrl = parsedUrl.substring(1);\n        }\n      }\n      return parsedUrl;\n    }\n\n    var exposed = {};\n\n    exposed.getTemplate = function(widget){\n      var deferred = $q.defer();\n\n      if (widget.template) {\n        deferred.resolve(widget.template);\n      } else if (widget.templateUrl) {\n        // try to fetch template from cache\n        var tpl = $templateCache.get(widget.templateUrl);\n        if (tpl) {\n          deferred.resolve(tpl);\n        } else {\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\n          $http.get(url)\n               .success(function(response) {\n                 // put response to cache, with unmodified url as key\n                 $templateCache.put(widget.templateUrl, response);\n                 deferred.resolve(response);\n               })\n               .error(function() {\n                 deferred.reject('could not load template');\n               });\n        }\n      }\n\n      return deferred.promise;\n    };\n\n    return exposed;\n  });\n","(function(window, undefined) {'use strict';\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf', ['adf.provider', 'ui.bootstrap', 'opengate-angular-js'])\n    .value('adfTemplatePath', '../src/templates/')\n    .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\n    .value('adfVersion', '5.1.0');\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @ngdoc directive\n * @name adf.directive:adfDashboard\n * @element div\n * @restrict EA\n * @scope\n * @description\n *\n * `adfDashboard` is a directive which renders the dashboard with all its\n * components. The directive requires a name attribute. The name of the\n * dashboard can be used to store the model.\n *\n * @param {string} name name of the dashboard. This attribute is required.\n * @param {boolean=} editable false to disable the editmode of the dashboard.\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\n * @param {object=} adfModel model object of the dashboard.\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\n *                   events during edit mode not reset it if edit mode is exited.\n * @param {boolean=} categories enable categories for the add widget dialog.\n */\n\nangular.module('adf')\n    .directive('adfDashboard', function($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath, $faIcons, $translate) {\n        \n\n        function stringToBoolean(string) {\n            switch (angular.isDefined(string) ? string.toLowerCase() : null) {\n                case 'true':\n                case 'yes':\n                case '1':\n                    return true;\n                case 'false':\n                case 'no':\n                case '0':\n                case null:\n                    return false;\n                default:\n                    return Boolean(string);\n            }\n        }\n\n\n        function createConfiguration(type) {\n            var cfg = {};\n            var config = dashboard.widgets[type].config;\n            if (config) {\n                cfg = angular.copy(config);\n            }\n            return cfg;\n        }\n\n        function createWidget(type) {\n            var wdgt = {};\n            var widget = dashboard.widgets[type];\n            if (widget) {\n                wdgt = angular.copy(widget);\n            }\n            return wdgt;\n        }\n\n        /**\n         * Adds the widget to first column of the model.\n         *\n         * @param dashboard model\n         * @param widget to add to model\n         * @param name name of the dashboard\n         */\n        function addNewWidgetToModel(model, widget, name, forceToSave) {\n            if (model) {\n                if (!model.grid) {\n                    model.grid = [];\n                }\n\n                var newWidget = {\n                    width: 3,\n                    height: 2,\n                    x: 0,\n                    y: 0,\n                    definition: widget\n                };\n                model.grid.push(newWidget);\n\n                $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\n\n                if (forceToSave) {\n                    $rootScope.$broadcast('adfDashboardChanged', name, model);\n                }\n            } else {\n                $log.error('model is undefined');\n            }\n        }\n\n        /**\n         * Checks if the edit mode of the widget should be opened immediately.\n         *\n         * @param widget type\n         */\n        function isEditModeImmediate(type) {\n            var widget = dashboard.widgets[type];\n            return widget && widget.edit && widget.edit.immediate;\n        }\n\n        /**\n         * Opens the edit mode of the specified widget.\n         *\n         * @param dashboard scope\n         * @param widget\n         */\n        function openEditMode($scope, widget) {\n            // wait some time before fire enter edit mode event\n            $timeout(function() {\n                $scope.$broadcast('adfWidgetEnterEditMode', widget);\n            }, 200);\n        }\n\n        /**\n         * Splits an object into an array multiple objects inside.\n         *\n         * @param object source object\n         * @param size size of array\n         *\n         * @return array of splitted objects\n         */\n        function split(object, size) {\n            var arr = [];\n            var i = 0;\n            angular.forEach(object, function(value, key) {\n                var index = i++ % size;\n                if (!arr[index]) {\n                    arr[index] = {};\n                }\n                arr[index][key] = value;\n            });\n            return arr;\n        }\n\n        /**\n         * Creates object with the category name as key and an array of widgets as value.\n         *\n         * @param widgets array of widgets\n         *\n         * @return array of categories\n         */\n        function createCategories(widgets) {\n            var categories = {};\n            angular.forEach(widgets, function(widget, key) {\n                var category = widget.category;\n                // if the widget has no category use a default one\n                if (!category) {\n                    category = 'ADF.CATEGORY.MISCELANOUS';\n                }\n\n                widget.title = $translate.instant(widget.title);\n                widget.description = $translate.instant(widget.description);\n                widget.category = $translate.instant(widget.category);\n\n                // push widget to category array\n                if (angular.isUndefined(categories[widget.category])) {\n                    categories[widget.category] = {\n                        widgets: {}\n                    };\n                }\n\n                categories[widget.category].widgets[key] = widget;\n            });\n            return categories;\n        }\n\n        function createCategoriesList(widgets) {\n            var categories = [];\n            angular.forEach(widgets, function(widget, key) {\n                if (!widget.category) {\n                    widget.category = 'ADF.CATEGORY.MISCELLANEOUS';\n                }\n\n                widget.title = $translate.instant(widget.title);\n                widget.description = $translate.instant(widget.description);\n                widget.category = $translate.instant(widget.category);\n\n                if (!widget.categoryTags) {\n                    widget.categoryTags = 'ADF.CATEGORY.TAG.MISCELLANEOUS';\n                }\n\n                var categoriesTmp = widget.categoryTags.split(',');\n\n                angular.forEach(categoriesTmp, function(category, idx) {\n                    // push widget to category array\n                    var translatedCat = $translate.instant(category);\n                    if (categories.indexOf(translatedCat) === -1)\n                        categories.push(translatedCat);\n                });\n\n            });\n            return categories;\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            scope: {\n                name: '@',\n                collapsible: '@',\n                editable: '@',\n                editMode: '@',\n                continuousEditMode: '=',\n                maximizable: '@',\n                adfModel: '=',\n                adfWidgetFilter: '=',\n                categories: '@',\n                hideButtons: '=',\n                extraData: '='\n            },\n            controller: function($scope) {\n                var model = {};\n                var widgetFilter = null;\n                var name = $scope.name;\n\n                // Watching for changes on adfModel\n                $scope.$watch('adfModel', function(oldVal, newVal) {\n                    // has model changed or is the model attribute not set\n                    if (newVal !== null || (oldVal === null && newVal === null)) {\n                        model = $scope.adfModel;\n                        widgetFilter = $scope.adfWidgetFilter;\n\n                        if (model) {\n                            if (!model.title) {\n                                model.title = $translate.instant('ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD');\n                            }\n                            if (!model.titleTemplateUrl) {\n                                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\n                            }\n                            $scope.model = model;\n                        } else {\n                            $log.error('could not find or create model');\n                        }\n                    }\n                }, true);\n\n                // edit mode\n                $scope.editMode = false;\n                $scope.editClass = '';\n\n                function getNewModalScope() {\n                    var scope = $scope.$new();\n                    return scope;\n                }\n\n                $scope.deleteDashboard = function() {\n                    var dashData = {\n                        id: model.id,\n                        name: model.title\n                    };\n\n                    $rootScope.$broadcast('dashboardDelete', dashData);\n                };\n\n                $scope.toggleEditMode = function(openConfigWindow) {\n                    $scope.editMode = !$scope.editMode;\n                    if ($scope.editMode) {\n                        if (!$scope.continuousEditMode) {\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\n                            $rootScope.$broadcast('adfIsEditMode');\n                        }\n\n                        if (openConfigWindow) {\n                            $scope.editDashboardDialog();\n                        }\n                    }\n\n                    if (!$scope.editMode) {\n                        $rootScope.$broadcast('adfDashboardChanged', name, model);\n                    }\n                };\n\n                $scope.saveTemporalDashboard = function() {\n                    delete model.temporal;\n                    $rootScope.$broadcast('adfDashboardChanged', name, model);\n                };\n\n                var adfToggleEditMode = $scope.$on('adfToggleEditMode', function(event, isNewDashboard) {\n                    if (isNewDashboard) {\n                        $scope.toggleEditMode(true);\n                    } else {\n                        $scope.toggleEditMode();\n                    }\n                });\n\n                var adfCancelEditMode = $scope.$on('adfCancelEditMode', function(event, isNewDashboard) {\n                    if ($scope.editMode) {\n                        $scope.cancelEditMode();\n                    }\n                });\n\n                var adfWidgetRemoved = $scope.$on('adfWidgetRemovedFromGrid', function(event, widget) {\n                    var index = null;\n                    angular.forEach($scope.adfModel.grid, function(widgetTmp, idx) {\n                        if (widgetTmp.definition.wid === widget.wid) {\n                            index = idx;\n                        }\n                    });\n\n                    if (index >= 0) {\n                        $scope.adfModel.grid.splice(index, 1);\n                        //$scope.gsHandler.commit();\n                    }\n                })\n\n                $scope.collapseAll = function(collapseExpandStatus) {\n                    $rootScope.$broadcast('adfDashboardCollapseExpand', {\n                        collapseExpandStatus: collapseExpandStatus\n                    });\n                };\n\n                $scope.cancelEditMode = function() {\n                    $scope.editMode = false;\n                    if (!$scope.continuousEditMode && ($scope.modelCopy !== $scope.adfModel)) {\n                        $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\n                    }\n                    $rootScope.$broadcast('adfDashboardEditsCancelled');\n                };\n\n                var adfEditDashboardDialog = $scope.$on('adfEditDashboardDialog', function(event, isNewDashboard) {\n                    if ($scope.editMode) {\n                        $scope.editDashboardDialog();\n                    }\n                });\n\n                var adfLaunchSearchingFromWidget = $scope.$on('adfLaunchSearchingFromWidget', function(event, widget, configFilter) {\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\n                });\n                var adfWindowTimeChangedFromWidget = $scope.$on('adfWindowTimeChangedFromWidget', function(event, widget, windowFilter) {\n                    $rootScope.$broadcast('adfFilterChanged', name, model);\n                });\n\n                // edit dashboard settings\n                $scope.editDashboardDialog = function() {\n                    var editDashboardScope = getNewModalScope();\n                    // create a copy of the title, to avoid changing the title to\n                    // \"dashboard\" if the field is empty\n                    editDashboardScope.copy = {\n                        title: (model.title !== 'ADF.DASHBOARD.TITLE.EMPTY_DASHBOARD' ? model.title : ''),\n                        description: model.description,\n                        icon: model.icon ? model.icon : 'fa-tachometer'\n                    };\n\n                    // pass icon list\n                    editDashboardScope.availableIcons = $faIcons.list();\n\n                    var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\n                    if (model.editTemplateUrl) {\n                        adfEditTemplatePath = model.editTemplateUrl;\n                    }\n                    var instance = $uibModal.open({\n                        scope: editDashboardScope,\n                        templateUrl: adfEditTemplatePath,\n                        backdrop: 'static',\n                        keyboard: false,\n                        size: 'lg'\n                    });\n\n\n                    editDashboardScope.closeDialog = function() {\n                        // copy the new title back to the model\n                        model.title = editDashboardScope.copy.title;\n                        model.description = editDashboardScope.copy.description;\n                        model.icon = editDashboardScope.copy.icon;\n\n                        // close modal and destroy the scope\n                        instance.close();\n                        editDashboardScope.$destroy();\n                    };\n                };\n\n                var adfOpenWidgetFromOther = $scope.$on('adfOpenWidgetFromOther', function(event, widget, config) {\n\n                    var internal_config = createConfiguration(widget);\n                    var _config = angular.merge({}, internal_config, config);\n                    var w = {\n                        type: widget,\n                        config: _config,\n                        title: _config.title\n                    };\n                    addNewWidgetToModel(model, w, name, !$scope.editMode);\n                });\n\n                var adfOpenModalWidgetFromOther = $scope.$on('adfOpenModalWidgetFromOther', function(event, widgetType, config) {\n                    var templateUrl = adfTemplatePath + 'widget-fullscreen.html';\n                    if (config.sendSelection) {\n                        templateUrl = adfTemplatePath + 'widget-fullscreen-selection.html';\n                    }\n                    var widget = createWidget(widgetType);\n                    widget.config = angular.merge({}, widget.config, config);\n                    widget.type = widgetType;\n                    if (widget.config.title) {\n                        widget.title = widget.config.title;\n                    }\n                    var fullScreenScope = $scope.$new();\n                    fullScreenScope.definition = fullScreenScope.widget = widget;\n                    var opts = {\n                        scope: fullScreenScope,\n                        templateUrl: templateUrl,\n                        size: fullScreenScope.definition.modalSize || 'el', // 'sm', 'lg'\n                        backdrop: 'static',\n                        windowClass: (fullScreenScope.definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\n                    };\n\n                    if ($scope.model && !$scope.model.temporal) {\n                        fullScreenScope.persistDashboard = function() {\n                            $rootScope.$broadcast('adfOpenWidgetFromOther', this.$parent.widget.type, this.$parent.widget.config);\n                            this.closeDialog();\n                        }\n                    }\n\n                    var instance = $uibModal.open(opts);\n                    fullScreenScope.closeDialog = function() {\n                        instance.close();\n                        fullScreenScope.$destroy();\n                    };\n\n\n                });\n\n                var adfAddWidgetDialog = $scope.$on('adfAddWidgetDialog', function(event, isNewDashboard) {\n                    if (!model.temporal && model.editable) {\n                        if (!$scope.editMode) {\n                            $scope.editMode = true;\n                            $scope.modelCopy = angular.copy($scope.adfModel, {});\n                            $rootScope.$broadcast('adfIsEditMode');\n                        }\n\n                        $scope.addWidgetDialog();\n                    }\n                });\n\n                // add widget dialog\n                $scope.addScopeCfg = {\n                    widgetFilter: {},\n                    widgetSortingDirection: '',\n                    widgetSorting: 'priority'\n                };\n\n                $scope.addWidgetDialog = function() {\n                    var addScope = getNewModalScope();\n                    var widgets;\n                    if (angular.isFunction(widgetFilter)) {\n                        widgets = {};\n                        angular.forEach(dashboard.widgets, function(widget, type) {\n                            if (widgetFilter(widget, type, model)) {\n                                widgets[type] = widget;\n                            }\n                        });\n                    } else {\n                        widgets = dashboard.widgets;\n                    }\n                    addScope.widgets = widgets;\n\n                    angular.forEach(addScope.widgets, function(widget, type) {\n                        widget.key = type;\n                        if (!widget.category) {\n                            widget.category = 'Miscellaneous';\n                        }\n                    });\n\n                    // pass createCategories function to scope, if categories option is enabled\n                    if ($scope.options.categories) {\n                        addScope.createCategories = createCategories;\n                    } else {\n                        addScope.availableCategories = createCategoriesList(widgets);\n                    }\n\n                    var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\n                    if (model.addTemplateUrl) {\n                        adfAddTemplatePath = model.addTemplateUrl;\n                    }\n\n                    var opts = {\n                        scope: addScope,\n                        templateUrl: adfAddTemplatePath,\n                        backdrop: 'static',\n                        size: 'lg'\n                    };\n\n                    var instance = $uibModal.open(opts);\n\n                    addScope.widgetFilterCfg = $scope.addScopeCfg;\n\n                    addScope.addWidget = function(widget) {\n                        var w = {\n                            type: widget,\n                            Ftype: dashboard.widgets[widget].Ftype || null,\n                            config: createConfiguration(widget)\n                        };\n                        addNewWidgetToModel(model, w, name);\n                        // close and destroy\n                        instance.close();\n                        addScope.$destroy();\n\n                        // check for open edit mode immediately\n                        if (isEditModeImmediate(widget)) {\n                            openEditMode($scope, w);\n                        }\n                    };\n\n                    addScope.changeThumbnail = function(widget) {\n                        if (widget.images) {\n                            if (angular.isUndefined(widget._currThumb)) {\n                                widget._currThumb = 1;\n                            } else {\n                                widget._currThumb += 1;\n                            }\n\n\n                            if (widget._currThumb >= widget.images.length) {\n                                widget._currThumb = 0;\n                            }\n\n                            widget._currImg = widget.images[widget._currThumb];\n                        }\n                    };\n\n                    addScope.closeDialog = function() {\n                        // close and destroy\n                        instance.close();\n                        addScope.$destroy();\n                    };\n                };\n\n                $scope.addNewWidgetToModel = addNewWidgetToModel;\n\n                $scope.$on('destroy', function() {\n                    adfLaunchSearchingFromWidget();\n                    adfWindowTimeChangedFromWidget();\n                    adfToggleEditMode();\n                    adfOpenWidgetFromOther();\n                    adfOpenModalWidgetFromOther();\n                    adfCancelEditMode();\n                    adfAddWidgetDialog();\n                    adfEditDashboardDialog();\n                    adfWidgetRemoved();\n                });\n            },\n            link: function($scope, $element, $attr) {\n                // pass options to scope\n                var options = {\n                    name: $attr.name,\n                    editable: true,\n                    enableConfirmDelete: stringToBoolean($attr.enableConfirmDelete),\n                    maximizable: stringToBoolean($attr.maximizable),\n                    collapsible: stringToBoolean($attr.collapsible),\n                    categories: stringToBoolean($attr.categories),\n                    extraData: {}\n                };\n\n                if (angular.isDefined($attr.editable)) {\n                    options.editable = stringToBoolean($attr.editable);\n                }\n\n                if (angular.isDefined($scope.extraData)) {\n                    options.extraData = $scope.extraData;\n                }\n\n                options.extraData.editing = $scope.editMode;\n\n                $scope.options = options;\n            },\n            templateUrl: adfTemplatePath + 'dashboard.html'\n        };\n    });\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/* global angular */\nangular.module('adf')\n    .directive('adfDashboardGrid', function(adfTemplatePath) {\n        \n\n        function preLink($scope) {\n            $scope.gridOptions = {\n                cellHeight: 146,\n                verticalMargin: 10,\n                animate: true,\n                float: false,\n                //alwaysShowResizeHandle: /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),\n                alwaysShowResizeHandle: true,\n                minWidth: 768,\n                auto: true,\n                resizable: {\n                    handles: 'e, se, s, sw, w'\n                },\n                disableDrag: !$scope.editMode,\n                disableResize: !$scope.editMode\n            };\n\n            $scope.gsHandler = null;\n        }\n\n        return {\n            restrict: 'E',\n            scope: {\n                adfModel: '=',\n                editMode: '=',\n                continuousEditMode: '=',\n                options: '='\n            },\n            templateUrl: adfTemplatePath + 'dashboard-grid.html',\n            compile: function() {\n                return {\n                    pre: preLink,\n                };\n            },\n            controller: function($scope, $timeout) {\n                var dashEvents = [];\n                dashEvents.push($scope.$on('adfIsEditMode', function() {\n                    $timeout(function() {\n                        $scope.gsHandler.enable();\n                    }, 100);\n                }));\n\n                dashEvents.push($scope.$on('adfDashboardChanged', function() {\n                    $timeout(function() {\n                        $scope.gsHandler.disable();\n                    }, 100);\n                }));\n\n                dashEvents.push($scope.$on('adfDashboardEditsCancelled', function() {\n                    $timeout(function() {\n                        $scope.gsHandler.disable();\n                    }, 100);\n                }));\n\n                dashEvents.push($scope.$on('adfCancelEditMode', function() {\n                    $timeout(function() {\n                        $scope.gsHandler.disable();\n                    }, 100);\n                }));\n\n                dashEvents.push($scope.$on('adfWidgetAdded', function(event, name, model, widget) {\n                    $timeout(function() {\n                        $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\n                        $scope.gsHandler.enable();\n                    }, 100);\n                }));\n\n                $scope.onChange = function(event, items) {\n                    console.log(\"onChange event: \" + event + \" items:\" + items);\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\n                };\n\n                $scope.onDragStart = function(event, ui) {\n                    console.log(\"onDragStart event: \" + event + \" ui:\" + ui);\n                };\n\n                $scope.onDragStop = function(event, ui) {\n                    console.log(\"onDragStop event: \" + event + \" ui:\" + ui);\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\n                };\n\n                $scope.onResizeStart = function(event, ui) {\n                    console.log(\"onResizeStart event: \" + event + \" ui:\" + ui);\n                };\n\n                $scope.onResizeStop = function(event, ui) {\n                    console.log(\"onResizeStop event: \" + event + \" ui:\" + ui);\n                    $scope.adfModel.grid = GridStackUI.Utils.sort($scope.adfModel.grid);\n                    $scope.$broadcast('OnResizeWidget')\n                };\n\n                $scope.onItemAdded = function(item) {\n                    console.log(\"onItemAdded item: \" + item);\n                };\n\n                $scope.onItemRemoved = function(item) {\n                    console.log(\"onItemRemoved item: \" + item);\n                };\n\n                $scope.$on('destroy', function() {\n                    dashEvents.forEach(function(dashEvt) {\n                        dashEvt();\n                    });\n                });\n            }\n        };\n    });\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .filter('adfOrderByObjectKey', function($filter) {\n    \n\n    return function(item, key){\n      var array = [];\n      angular.forEach(item, function(value, objectKey){\n        value[key] = objectKey;\n        array.push(value);\n      });\n      return $filter('orderBy')(array, key);\n    };\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\n/**\n * @ngdoc object\n * @name adf.dashboardProvider\n * @description\n *\n * The dashboardProvider can be used to register widgets.\n */\nangular.module('adf.provider', [])\n    .provider('dashboard', function() {\n\n        var widgets = {};\n        var widgetsPath = '';\n        var messageTemplate = '<div class=\"alert alert-primary\">{}</div>';\n        var loadingTemplate = '\\\n      <div class=\"progress progress-striped active\">\\n\\\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\n          <span class=\"sr-only\" translate>FORM.MSG.LOADING ...</span>\\n\\\n        </div>\\n\\\n      </div>';\n        var customWidgetTemplatePath = null;\n\n        // default apply function of widget.edit.apply\n        var defaultApplyFunction = function() {\n            return true;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#widget\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Registers a new widget.\n         *\n         * @param {string} name of the widget\n         * @param {object} widget to be registered.\n         *\n         *   Object properties:\n         *\n         *   - `title` - `{string=}` - The title of the widget.\n         *   - `description` - `{string=}` - Description of the widget.\n         *   - `category` - `{string=}` - Category of the widget.\n         *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\n         *   - `config` - `{object}` - Predefined widget configuration.\n         *   - `controller` - `{string=|function()=}` - Controller fn that should be\n         *      associated with newly created scope of the widget or the name of a\n         *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\n         *      if passed as a string.\n         *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\n         *      published to scope under the `controllerAs` name.\n         *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\n         *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\n         *   - `template` - `{string=|function()=}` - html template as a string.\n         *   - `templateUrl` - `{string=}` - path to an html template.\n         *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\n         *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n         *      be injected into the controller. If any of these dependencies are promises, the widget\n         *      will wait for them all to be resolved or one to be rejected before the controller is\n         *      instantiated.\n         *      If all the promises are resolved successfully, the values of the resolved promises are\n         *      injected.\n         *\n         *      The map object is:\n         *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n         *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n         *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\n         *        and the return value is treated as the dependency. If the result is a promise, it is\n         *        resolved before its value is injected into the controller.\n         *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n         *      on the scope of the widget.\n         *   - `edit` - `{object}` - Edit modus of the widget.\n         *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n         *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\n         *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n         *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\n         *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\n         *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\n         *        on the scope of the widget.\n         *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\n         *        Default is true.\n         *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\n         *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\n         *        The function have to return a boolean or an promise which can be resolved to a boolean.\n         *        The function can use injection.\n         *\n         * @returns {Object} self\n         */\n        this.widget = function(name, widget) {\n            var w = angular.extend({\n                reload: false,\n                frameless: false\n            }, widget);\n            if (w.edit) {\n                var edit = {\n                    reload: true,\n                    immediate: false,\n                    apply: defaultApplyFunction\n                };\n                angular.extend(edit, w.edit);\n                w.edit = edit;\n            }\n            widgets[name] = w;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#widgetsPath\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Sets the path to the directory which contains the widgets. The widgets\n         * path is used for widgets with a templateUrl which contains the\n         * placeholder {widgetsPath}. The placeholder is replaced with the\n         * configured value, before the template is loaded, but the template is\n         * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\n         * The default value of widgetPaths is ''.\n         *\n         *\n         * @param {string} path to the directory which contains the widgets\n         *\n         * @returns {Object} self\n         */\n        this.widgetsPath = function(path) {\n            widgetsPath = path;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#messageTemplate\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the template for messages.\n         *\n         * @param {string} template for messages.\n         *\n         * @returns {Object} self\n         */\n        this.messageTemplate = function(template) {\n            messageTemplate = template;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#loadingTemplate\n         * @methodOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the template which is displayed as\n         * long as the widget resources are not resolved.\n         *\n         * @param {string} template loading template\n         *\n         * @returns {Object} self\n         */\n        this.loadingTemplate = function(template) {\n            loadingTemplate = template;\n            return this;\n        };\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboardProvider#customWidgetTemplatePath\n         * @propertyOf adf.dashboardProvider\n         * @description\n         *\n         * Changes the container template for the widgets\n         *\n         * @param {string} path to the custom widget template\n         *\n         * @returns {Object} self\n         */\n        this.customWidgetTemplatePath = function(templatePath) {\n            customWidgetTemplatePath = templatePath;\n            return this;\n        };\n\n        /**\n         * @ngdoc service\n         * @name adf.dashboard\n         * @description\n         *\n         * The dashboard holds all options and  widgets.\n         *\n         * @property {Array.<Object>} widgets Array of registered widgets.\n         * @property {string} widgetsPath Default path for widgets.\n         * @property {string} messageTemplate Template for messages.\n         * @property {string} loadingTemplate Template for widget loading.\n         * * @property {string} customWidgetTemplatePath Changes the container template for the widgets\n         *\n         * @returns {Object} self\n         */\n        this.$get = function() {\n            var cid = 0;\n\n            return {\n                widgets: widgets,\n                widgetsPath: widgetsPath,\n                messageTemplate: messageTemplate,\n                loadingTemplate: loadingTemplate,\n                customWidgetTemplatePath: customWidgetTemplatePath,\n\n                /**\n                 * @ngdoc method\n                 * @name adf.dashboard#id\n                 * @methodOf adf.dashboard\n                 * @description\n                 *\n                 * Creates an ongoing numeric id. The method is used to create ids for\n                 * columns and widgets in the dashboard.\n                 */\n                id: function() {\n                    return new Date().getTime() + '-' + (++cid);\n                },\n\n                /**\n                 * @ngdoc method\n                 * @name adf.dashboard#idEqual\n                 * @methodOf adf.dashboard\n                 * @description\n                 *\n                 * Checks if the given ids are equal.\n                 *\n                 * @param {string} id widget or column id\n                 * @param {string} other widget or column id\n                 */\n                idEquals: function(id, other) {\n                    // use toString, because old ids are numbers\n                    return ((id) && (other)) && (id.toString() === other.toString());\n                }\n            };\n        };\n\n    });\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf')\n    .directive('adfWidgetContent', function ($log, $q, widgetService,\n        $compile, $controller, $injector, dashboard, $translate) {\n\n        function renderError($element, msg) {\n            $log.warn(msg);\n            $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\n        }\n\n        function compileWidget($scope, $element, currentScope, configChanged) {\n            var model = $scope.model;\n            var content = $scope.content;\n\n            var extra = $scope.extra;\n\n            var newScope = currentScope;\n            if (!model) {\n                $translate('ADF.ERROR.MODEL_IS_UNDEFINED').then(function (translateMessage) {\n                    renderError($element, translateMessage);\n                });\n            } else if (!content) {\n                if (model.title) {\n                    $translate('ADF.ERROR.WIDGET_FOR_DEPRECTATED', {\n                        title: model.title\n                    }).then(function (translateMessage) {\n                        renderError($element, translateMessage);\n                    });\n                } else {\n                    $translate('ADF.ERROR.WIDGET_DEPRECTATED').then(function (translateMessage) {\n                        renderError($element, translateMessage);\n                    });\n                }\n            } else {\n                if (newScope) {\n                    var is_menu = newScope.menu !== undefined && newScope.menu !== null && (!newScope.isPaginationEnable || !newScope.isPaginationEnable());\n                    var is_itemsPerPage = newScope.itemsPerPage !== undefined && newScope.itemsPerPage !== null;\n                    if (is_menu || configChanged || !angular.isFunction(newScope.reloadData)) {\n                        if ($scope.navOptionsHandler) {\n                            $scope.navOptionsHandler.firstLoad = true;\n                        }\n\n                        newScope = renderWidget($scope, $element, currentScope, model, content, extra);\n                    } else {\n                        if (is_itemsPerPage || newScope.page) {\n                            newScope.page = 1;\n                        }\n\n                        newScope.reloadData();\n                    }\n                } else {\n                    if ($scope.navOptionsHandler) {\n                        $scope.navOptionsHandler.firstLoad = true;\n                    }\n\n                    newScope = renderWidget($scope, $element, currentScope, model, content, extra);\n                }\n            }\n\n            function _getWindowTime(type) {\n                if (type === \"custom\") {\n                    return {\n                        from: newScope.config.windowFilter.from,\n                        to: newScope.config.windowFilter.to\n                    }\n                }\n                var from = window.moment().subtract(1, type);\n                return {\n                    from: from._d\n                };\n            }\n\n            if (newScope) {\n                if (newScope.config) {\n                    newScope.config.getWindowTime = function () {\n                        var windowFilter = newScope.config.windowFilter;\n                        if (windowFilter && windowFilter.type) {\n                            var winTime = _getWindowTime(windowFilter.type);\n                            /* jshint ignore:start */\n                            if (!window.eval(newScope.config.windowFilter.rawdate)) {\n                                for (var key in winTime) {\n                                    winTime[key] = window.moment(winTime[key]).format();\n                                }\n                                winTime['rawdate'] = true;\n                            }\n                            /* jshint ignore:end */\n                            return winTime;\n                        }\n                    }\n                }\n\n                if (extra) {\n                    newScope.editing = extra.editing ? true : false;\n                    newScope.extraData = extra;\n                }\n            }\n            return newScope;\n        }\n\n        function renderWidget($scope, $element, currentScope, model, content, extra) {\n            // display loading template\n            $element.html(dashboard.loadingTemplate);\n\n            // create new scope\n            var templateScope = $scope.$new();\n\n            // pass config object to scope\n            if (!model.config) {\n                model.config = {};\n            }\n\n            templateScope.config = model.config;\n            templateScope.editing = extra && extra.editing;\n\n            if (extra) {\n                templateScope.extra = extra;\n            }\n\n            var _from = currentScope || templateScope.config;\n            templateScope.selectionManager = (_from) ? _from.selectionManager : undefined;\n\n            // local injections\n            var base = {\n                $scope: templateScope,\n                widget: model,\n                config: model.config\n            };\n\n            // get resolve promises from content object\n            var resolvers = {};\n            resolvers.$tpl = widgetService.getTemplate(content);\n            if (content.resolve) {\n                angular.forEach(content.resolve, function (promise, key) {\n                    if (angular.isString(promise)) {\n                        resolvers[key] = $injector.get(promise);\n                    } else {\n                        resolvers[key] = $injector.invoke(promise, promise, base);\n                    }\n                });\n            }\n\n            // resolve all resolvers\n            $q.all(resolvers).then(function (locals) {\n                angular.extend(locals, base);\n\n                // pass resolve map to template scope as defined in resolveAs\n                if (content.resolveAs) {\n                    templateScope[content.resolveAs] = locals;\n                }\n\n                // compile & render template\n                var template = locals.$tpl;\n                $element.html(template);\n                if (content.controller) {\n                    var templateCtrl = $controller(content.controller, locals);\n                    if (content.controllerAs) {\n                        templateScope[content.controllerAs] = templateCtrl;\n                    }\n                    $element.children().data('$ngControllerController', templateCtrl);\n                }\n                $compile($element.contents())(templateScope);\n            }, function (reason) {\n                // handle promise rejection\n                var msg = 'ADF.ERROR.COULD_NOT_RESOLVE_ALL_PROMISSES';\n                $translate(msg, {\n                    reason: (reason ? \": \" + reason : reason)\n                }).then(function (translateMessage) {\n                    renderError($element, translateMessage);\n                });\n            });\n\n            // destroy old scope\n            if (currentScope) {\n                currentScope.$destroy();\n            }\n\n            return templateScope;\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            scope: {\n                model: '=',\n                content: '=',\n                extra: '=',\n                navOptionsHandler: '=?',\n                filterHandler: '=?',\n                widgetActionsHandler: '=?'\n            },\n            link: function ($scope, $element) {\n                var currentScope = compileWidget($scope, $element, null);\n                var widgetConfigChangedEvt = $scope.$on('widgetConfigChanged', function () {\n                    currentScope = compileWidget($scope, $element, currentScope, true);\n                });\n\n                var widgetReloadEvt = $scope.$on('widgetReload', function () {\n                    currentScope = compileWidget($scope, $element, currentScope, false);\n                });\n\n                $scope.$on('destroy', function () {\n                    widgetConfigChangedEvt();\n                    widgetReloadEvt();\n                });\n            }\n        };\n    });\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf')\n    .directive('adfWidgetGrid', function($injector, $q, $log, $uibModal, $rootScope, $interval, dashboard, adfTemplatePath, Filter) {\n        function preLink($scope) {\n            var definition = $scope.definition;\n\n            if (definition) {\n                var w = dashboard.widgets[definition.type];\n                if (w) {\n                    // pass title\n                    if (!definition.title) {\n                        definition.title = w.title;\n                    }\n\n                    definition.titleTemplateUrl = adfTemplatePath + 'widget-grid-title.html';\n\n                    if (!definition.editTemplateUrl) {\n                        definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\n                        if (w.editTemplateUrl) {\n                            definition.editTemplateUrl = w.editTemplateUrl;\n                        }\n                    }\n\n                    if (!definition.titleTemplateUrl) {\n                        definition.frameless = w.frameless;\n                    }\n\n                    if (!definition.styleClass) {\n                        definition.styleClass = w.styleClass;\n                    }\n\n                    // set id for sortable\n                    if (!definition.wid) {\n                        definition.wid = dashboard.id();\n                    }\n\n                    // pass copy of widget to scope\n                    $scope.widget = angular.copy(w);\n\n                    // create config object\n                    var config = definition.config;\n                    if (config) {\n                        if (angular.isString(config)) {\n                            config = angular.fromJson(config);\n                        }\n                    } else {\n                        config = {};\n                    }\n\n                    if (typeof $scope.widget.show_modal_footer === \"undefined\") {\n                        $scope.widget.show_modal_footer = true;\n                    }\n\n                    if (typeof $scope.widget.show_reload_config === \"undefined\") {\n                        $scope.widget.show_reload_config = true;\n                    }\n\n                    // pass config to scope\n                    $scope.config = config;\n\n                    // collapse exposed $scope.widgetState property\n                    if (!$scope.widgetState) {\n                        $scope.widgetState = {};\n                        $scope.widgetState.isCollapsed = (w.collapsed === true) ? w.collapsed : false;\n                    }\n\n                } else {\n                    $log.warn('could not find widget ' + definition.type);\n                }\n            } else {\n                $log.debug('definition not specified, widget was probably removed');\n            }\n        }\n\n        function postLink($scope, $element) {\n            var definition = $scope.definition;\n            if (!definition) {\n                $log.debug('widget not found');\n                return;\n            }\n            if (!$scope.config) {\n                $scope.config = {};\n            }\n\n            var config = $scope.config;\n\n            // bind close function\n            var deleteWidget = function() {\n                $element.remove();\n                $rootScope.$broadcast('adfWidgetRemovedFromGrid', definition);\n            };\n\n            $scope.remove = function() {\n                if ($scope.options.enableConfirmDelete) {\n                    var deleteScope = $scope.$new();\n\n                    var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\n                    if (definition.deleteTemplateUrl) {\n                        deleteTemplateUrl = definition.deleteTemplateUrl;\n                    }\n                    var opts = {\n                        scope: deleteScope,\n                        templateUrl: deleteTemplateUrl,\n                        backdrop: 'static'\n                    };\n                    var instance = $uibModal.open(opts);\n\n                    deleteScope.closeDialog = function() {\n                        instance.close();\n                        deleteScope.$destroy();\n                    };\n                    deleteScope.deleteDialog = function() {\n                        deleteWidget();\n                        deleteScope.closeDialog();\n                    };\n                } else {\n                    deleteWidget();\n                }\n            };\n\n\n            $scope.print = function() {\n                if (!$scope.editMode) {\n                    $scope.$broadcast('widgetPrint');\n                }\n            }\n\n            $scope.isExecuteOperationEnabled = function() {\n\n                if (config.entityKey)\n                    return true;\n                var filter = config.filter;\n                if (typeof filter === \"string\") {\n                    return filter.length > 0;\n                }\n                if (typeof filter === \"object\") {\n                    return filter.value.length > 2 && filter.oql;\n                }\n                return false;\n            }\n\n            $scope.executeOperation = function() {\n                if (!$scope.editMode) {\n\n                    $scope.$parent.$broadcast('widgetExecuteOperation');\n                }\n            };\n\n            $scope.filter = {\n                value: \"\"\n            };\n            $scope.sort = {\n                value: \"\",\n                direction: \"\"\n            };\n\n            $scope.toggleAdvanced = 1;\n            var filter = config.filter;\n            if (typeof filter === \"object\" && filter.oql && filter.oql.length > 2) {\n                $scope.search = {\n                    oql: filter.oql,\n                    json: filter.value\n                };\n                $scope.toggleAdvanced = 0;\n            } else if (typeof filter === \"string\") {\n                $scope.search = {\n                    quick: filter\n                };\n                $scope.toggleAdvanced = 1;\n            } else if (typeof filter === \"object\" && filter.fields) {\n                $scope.search = {\n                    customFilter: filter.fields\n                };\n                $scope.search.fields = [];\n                angular.forEach(filter.fields, function(v, key) {\n                    $scope.search.fields.push(v.name);\n                });\n                $scope.toggleAdvanced = 2;\n            } else {\n                $scope.search = {\n                    quick: filter = \"\"\n                };\n            }\n\n            $scope.toggleFilter = function(advanced) {\n                $scope.toggleAdvanced = advanced;\n            };\n            $scope.filterAvailable = false;\n            $scope.showFilter = function() {\n                $scope.filterAvailable = $scope.filterAvailable === true ? false : true;\n            };\n\n            $scope.showFinalFilter = false;\n\n            $scope.launchSearching = function() {\n                var widget = {\n                    definition: definition,\n                    element: $element\n                };\n\n                $rootScope.$broadcast('adfLaunchSearchingFromWidget', widget, $scope.config.filter);\n                $scope.reload(true);\n            }\n            $scope.addCustomFilter = function(key) {\n                $scope.search.customFilter = $scope.search.customFilter ? $scope.search.customFilter : [];\n                $scope.search.customFilter.push({\n                    name: key,\n                    value: ''\n                });\n            }\n\n            $scope.launchCustomFilter = function() {\n                if ($scope.search.customFilter && $scope.search.customFilter.length > 0) {\n                    $scope.search.oql = $scope.search.json = '';\n\n                    $scope.config.filter = {\n                        value: {\n                            and: []\n                        },\n                        fields: $scope.search.customFilter\n                    }\n                    angular.forEach($scope.search.customFilter, function(v, key) {\n                        if (v.value) {\n                            var like = {};\n                            like[v.name] = v.value;\n                            $scope.config.filter.value.and.push({\n                                'like': like\n                            });\n                        }\n\n                    });\n                    $scope.config.filter.value = JSON.stringify($scope.config.filter.value);\n                }\n\n                $scope.launchSearching();\n            }\n\n\n\n            $scope.deleteFilter = function(value, model) {\n                angular.forEach($scope.search.customFilter, function(v, key) {\n                    if (v.name === value) {\n                        $scope.search.customFilter.splice(key, 1);\n                    }\n                });\n                if ($scope.search.customFilter.length === 0) {\n                    $scope.config.filter = {};\n                }\n            };\n\n            $scope.launchSearchingAdv = function() {\n                if (!$scope.filterApplied) {\n                    $scope.search.quick = '';\n                    if ($scope.search.json === '' || $scope.search.json === '{}' || (!angular.isString($scope.search.json) && Object.keys($scope.search.json).length === 0)) {\n                        $scope.config.filter = {\n                            oql: '',\n                            value: ''\n                        };\n                    } else {\n                        $scope.config.filter = {\n                            oql: $scope.search.oql,\n                            value: $scope.search.json\n                        };\n                    }\n                    $scope.launchSearching();\n                    $scope.filterApplied = true;\n                }\n            }\n\n            $scope.applyFilter = function(event) {\n                $scope.launchSearching();\n            }\n\n            $scope.launchSearchingQuick = function() {\n                if (!$scope.filterApplied) {\n                    $scope.search.oql = $scope.search.json = '';\n                    $scope.config.filter = $scope.search.quick;\n                    $scope.launchSearching();\n                    $scope.filterApplied = true;\n                }\n            }\n\n            var windowTimeChanged = $scope.$on('onWindowTimeChanged', function(event, timeObj) {\n                $scope.config.windowFilter = timeObj ? timeObj : (config.windowFilter ? {} : timeObj);\n                var widget = {\n                    definition: definition,\n                    element: $element\n                }\n                $rootScope.$broadcast('adfWindowTimeChangedFromWidget', widget, $scope.config.windowFilter);\n                $scope.reload();\n            });\n\n            $scope.enter = function(event) {\n                var keycode = (event.keyCode ? event.keyCode : event.which);\n                if (keycode === 13) {\n                    if ($scope.toggleAdvanced === 0)\n                        $scope.launchSearchingAdv();\n                    if ($scope.toggleAdvanced === 1)\n                        $scope.launchSearchingQuick();\n                    if ($scope.toggleAdvanced === 2)\n                        $scope.launchCustomFilter();\n\n                } else if (keycode === 19) {\n                    $scope.showFinalFilter = $scope.showFinalFilter === false ? true : false;\n                } else {\n                    $scope.filterApplied = false;\n                }\n            }\n\n\n            $scope.customSelectors = [];\n            $scope.getCustomSelectors = function() {\n                if ($scope.config.customSelectors) {\n                    $scope.customSelectors = $scope.config.customSelectors;\n                } else {\n                    config.widgetSelectors().findFields(\"\").then(function(fields) {\n                        $scope.customSelectors = fields;\n                        $scope.$apply();\n                    }).catch(function(err) {\n                        $log.error(err);\n                    });\n                }\n            }\n\n            $scope.customFilter = [];\n            $scope.getcustomFilter = function() {\n                config.widgetSelectors().findFields(\"\").then(function(fields) {\n                    $scope.customFilter = fields;\n                    $scope.$apply();\n                }).catch(function(err) {\n                    $log.error(err);\n                });\n\n            }\n\n            $scope.ifCustomFilter = function() {\n                return $scope.customSelectors && config.sort && $scope.definition.type === 'FullDevicesList' && $scope.toggleAdvanced === 2;\n            }\n\n            $scope.showCustomFields = function() {\n                return $scope.definition.type === 'FullDevicesList' && $scope.toggleAdvanced === 2 && $scope.search.customFilter && $scope.filterAvailable && !$scope.editMode;\n            }\n\n            $scope.changeDirection = function() {\n                var direction = config.sort.direction;\n                if (direction === 'DESCENDING') {\n                    $scope.config.sort.direction = 'ASCENDING'\n                } else if (direction === 'ASCENDING') {\n                    $scope.config.sort.direction = 'DESCENDING'\n                }\n                $scope.reload();\n            }\n\n            $scope.changeDefaultTab = function() {\n\n\n                $scope.reload();\n            }\n\n            $scope.debugQuery = function() {\n                Filter.parseQuery($scope.search.oql || '')\n                    .then(function(data) {\n                        //$scope.elementos = data;\n                        $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\n                        $scope.unknownWords = '';\n                        $scope.filter.error = null;\n                    })\n                    .catch(function(err) {\n                        $scope.filter.error = err;\n                        // Tratar el error\n                    });\n\n            }\n\n            $scope.autocomplete_options = function() {\n                var autocomplete_options = {\n                    suggest: Filter.suggest_field_delimited,\n                    customSelectors: config.widgetSelectors()\n                };\n\n                return autocomplete_options;\n\n            };\n\n            // Multiple selection\n            $scope.selectedItems = definition.selectedItems || {};\n\n            // Gestor de seleccion\n            $scope.selectionManager = {\n                currentSelection: $scope.selectedItems,\n                isSelected: function(key, obj) {\n                    if ($scope.selectedItems[key] && !angular.isUndefined(obj)) {\n                        $scope.selectedItems[key].data = obj;\n                    }\n\n                    return $scope.selectedItems[key] ? true : false;\n                },\n                totalSelected: function() {\n                    return Object.keys($scope.selectedItems).length;\n                }\n            };\n\n            if (definition.config.sendSelection) {\n\n                $scope.sendEntities = function() {\n                    definition.config.sendSelection($scope.selectedItems);\n                    $scope.$parent.closeDialog();\n                }\n\n                if (definition.config.selectedItems) {\n                    $scope.selectedItems = angular.copy(definition.config.selectedItems);\n                }\n\n                $scope.config.selectionManager = $scope.selectionManager;\n            }\n\n            $scope.manageSelectedItems = function() {\n                var selectionScope = $scope.$new();\n\n                if (definition.config.sendSelection) {\n                    delete config.selectionConfig.operationTypes;\n                    delete config.selectionConfig.filterTypes;\n                }\n\n                selectionScope.selectionConfig = config.selectionConfig;\n\n                selectionScope.selectedItems = [];\n                angular.forEach($scope.selectedItems, function(value, key) {\n                    selectionScope.selectedItems.push({\n                        key: key,\n                        value: value\n                    });\n                });\n\n                selectionScope.currentSelection = {\n                    selected: selectionScope.selectedItems\n                };\n\n                var manageItemsSelectedTemplate = adfTemplatePath + 'widget-selection.html';\n                var opts = {\n                    scope: selectionScope,\n                    templateUrl: manageItemsSelectedTemplate,\n                    backdrop: 'static',\n                    size: 'lg',\n                    animation: true\n                };\n\n                var instance = $uibModal.open(opts);\n\n                selectionScope.restoreSelection = function() {\n                    selectionScope.currentSelection = {\n                        selected: selectionScope.selectedItems\n                    };\n                };\n\n                selectionScope.clearSelection = function() {\n                    selectionScope.currentSelection.selected = [];\n                };\n\n                // Cierra sy guarda los datos de nueva selección\n                selectionScope.applyFilter = function(type) {\n                    var customOql = selectionScope.selectionConfig.filterAction(selectionScope.currentSelection.selected, type);\n\n                    if (!angular.isUndefined(customOql) && customOql !== null) {\n                        $scope.toggleAdvanced = 0;\n                        Filter.parseQuery(customOql).then(function(data) {\n                            $scope.search.oql = customOql;\n                            $scope.search.json = angular.toJson(data.filter, null, 4); // stringify with 4 spaces at each level;\n                            $scope.unknownWords = '';\n                            $scope.filter.error = null;\n\n                            $scope.launchSearchingAdv();\n                        }).catch(function(err) {\n                            $scope.filter.error = err;\n                        });\n                    }\n                };\n\n                selectionScope.executeOperation = function(operationType) {\n                    if (!$scope.editMode) {\n                        $scope.$parent.$broadcast('widgetExecuteOperation', {\n                            'selectedItems': selectionScope.currentSelection.selected,\n                            'type': operationType\n                        });\n                    }\n                };\n\n                // Cierra sy guarda los datos de nueva selección\n                selectionScope.saveChangesDialog = function() {\n                    var finalSelection = {};\n                    angular.forEach(selectionScope.currentSelection.selected, function(data, idx) {\n                        finalSelection[data.key] = {\n                            data: data.value.data,\n                            visible: data.value.visible\n                        };\n                    });\n\n                    $scope.selectedItems = angular.copy(finalSelection);\n                    $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n\n                    $scope.selectionManager.lastItem = {};\n                    $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n\n                    instance.close();\n                    selectionScope.$destroy();\n                };\n\n                // Cierra sin realizar ninguna acción\n                selectionScope.closeDialog = function() {\n                    instance.close();\n                    selectionScope.$destroy();\n                };\n            };\n\n\n            // bind edit function\n            $scope.edit = function() {\n                var editScope = $scope.$new();\n                editScope.definition = angular.copy(definition);\n\n                var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\n                if (definition.editTemplateUrl) {\n                    adfEditTemplatePath = definition.editTemplateUrl;\n                }\n\n                var opts = {\n                    scope: editScope,\n                    templateUrl: adfEditTemplatePath,\n                    backdrop: 'static',\n                    size: 'lg'\n                };\n\n                var instance = $uibModal.open(opts);\n\n                editScope.closeDialog = function() {\n                    instance.close();\n                    editScope.$destroy();\n                };\n\n                // TODO create util method\n                function createApplyPromise(result) {\n                    var promise;\n                    if (typeof result === 'boolean') {\n                        var deferred = $q.defer();\n                        if (result) {\n                            deferred.resolve();\n                        } else {\n                            deferred.reject();\n                        }\n                        promise = deferred.promise;\n                    } else {\n                        promise = $q.when(result);\n                    }\n                    return promise;\n                }\n\n                editScope.saveDialog = function() {\n                    // clear validation error\n                    editScope.validationError = null;\n\n                    // build injection locals\n                    var widget = $scope.widget;\n\n                    // create a default apply method for widgets\n                    // without edit mode\n                    // see issue https://goo.gl/KHPQLZ\n                    var applyFn;\n                    if (widget.edit) {\n                        applyFn = widget.edit.apply;\n                    } else {\n                        applyFn = function() {\n                            return true;\n                        };\n                    }\n\n                    // injection locals\n                    var locals = {\n                        widget: widget,\n                        definition: editScope.definition,\n                        config: editScope.definition.config\n                    };\n\n                    // invoke apply function and apply if success\n                    var result = $injector.invoke(applyFn, applyFn, locals);\n                    createApplyPromise(result).then(function() {\n                        definition.title = editScope.definition.title;\n                        if (editScope.definition.type === 'summaryChart') {\n                            editScope.definition.Ftype = editScope.definition.config.type.toLowerCase();\n                            definition.Ftype = editScope.definition.config.type.toLowerCase()\n                        }\n                        angular.extend(definition.config, editScope.definition.config);\n\n                        editScope.closeDialog();\n\n                        if (widget.edit && widget.edit.reload) {\n                            $scope.setReloadTimeout();\n                            // reload content after edit dialog is closed\n                            $scope.$broadcast('widgetConfigChanged');\n                        }\n                    }, function(err) {\n                        if (err) {\n                            editScope.validationError = err;\n                        } else {\n                            editScope.validationError = 'VALIDATION_DURING_APPLY_FAILED';\n                        }\n                    });\n                };\n\n            };\n\n\n        }\n\n        return {\n            replace: true,\n            restrict: 'EA',\n            transclude: false,\n            templateUrl: adfTemplatePath + 'widget-grid.html',\n            scope: {\n                definition: '=',\n                editMode: '=',\n                options: '=',\n                widgetState: '='\n            },\n            controller: function($scope) {\n\n                if ($scope.definition.config.selectedItems) {\n                    $scope.selectedItemsLength = Object.keys($scope.definition.config.selectedItems).length;\n                }\n\n\n                // Controlador de la barra inferior de los widgets\n                $scope.navOptionsHandler = {\n                    firstLoad: true,\n                    loadingData: false,\n                    startLoading: function() {\n                        $scope.navOptionsHandler.loadingData = true;\n                    },\n                    stopLoading: function() {\n                        $scope.navOptionsHandler.firstLoad = false;\n                        $scope.navOptionsHandler.loadingData = false;\n                        $scope.navOptionsHandler.lastMessageTime = new Date();\n                    },\n                    setStatusMessage: function(message) {\n                        $scope.navOptionsHandler.statusMessage = message;\n                        $scope.navOptionsHandler.lastMessageTime = new Date();\n                    }\n                };\n\n                // Controlador de los parámetros del filtro\n                $scope.filterHandler = {\n                    changeFilter: function(filter, search, toggleAdvanced) {\n                        $scope.filter = filter;\n                        $scope.search = search;\n                        $scope.toggleAdvanced = toggleAdvanced;\n                    }\n                };\n\n                // Controlador de las custom actions del widget\n                $scope.widgetActionsHandler = {\n                    actions: [],\n                    setActions: function(actions) {\n                        $scope.widgetActionsHandler.actions = actions;\n                    }\n                };\n                $scope.showActionsMenu = false;\n                $scope.toggleActionsMenu = function() {\n                    $scope.showActionsMenu = !$scope.showActionsMenu;\n                };\n\n                var adfDashboardCollapseExpand = $scope.$on('adfDashboardCollapseExpand', function(event, args) {\n                    $scope.widgetState.isCollapsed = args.collapseExpandStatus;\n                });\n\n                var adfWidgetEnterEditMode = $scope.$on('adfWidgetEnterEditMode', function(event, widget) {\n                    if (dashboard.idEquals($scope.definition.wid, widget.wid)) {\n                        $scope.edit();\n                    }\n                });\n\n                var adfIsEditMode = $scope.$on('adfIsEditMode', function(event, widget) {\n                    $scope.editing = true;\n                });\n\n                var adfDashboardChanged = $scope.$on('adfDashboardChanged', function(event, widget) {\n                    $scope.editing = false;\n                });\n\n                var adfDashboardEditsCancelled = $scope.$on('adfDashboardEditsCancelled', function(event, widget) {\n                    $scope.editing = false;\n                });\n\n                $scope.widgetClasses = function(w, definition) {\n                    var classes = definition.styleClass || '';\n                    // w is undefined, if the type of the widget is unknown\n                    // see issue #216\n                    // if (!w || !w.frameless || $scope.editMode) {\n                    //     classes += ' panel panel-default';\n                    // }\n                    return classes;\n                };\n\n                $scope.openFullScreen = function() {\n\n                    $scope.$emit('adfOpenModalWidgetFromOther', $scope.definition.type, $scope.config);\n                };\n\n                $scope.openFilter = function() {\n\n                }\n\n                $scope.openAboutScreen = function(size) {\n                    size = 'md';\n                    var modalInstance = $uibModal.open({\n                        animation: true,\n                        templateUrl: 'widgetAboutModal.html',\n                        controller: function($scope, $uibModalInstance, information) {\n                            $scope.about = {};\n                            $scope.about.info = information;\n                            $scope.ok = function() {\n                                $uibModalInstance.close();\n                            };\n                        },\n                        'size': size,\n                        resolve: {\n                            information: function() {\n                                return $scope.config.about;\n                            }\n                        }\n                    });\n\n                    modalInstance.result.then(function(selectedItem) {\n                        $scope.selected = selectedItem;\n                    }, function() {\n                        $log.info('Modal dismissed at: ' + new Date());\n                    });\n                };\n\n                $scope.saveWidgetScreen = function(wId) {\n                    $scope.$emit('generateSnapshot', {\n                        'objectSelector': '.widget_' + wId,\n                        'fileName': 'capture_' + new Date().getTime()\n                    });\n                };\n\n                var onWindowTimeChanged = function(timeObj) {\n                    var filter = {\n                        and: []\n                    };\n                    if (timeObj && timeObj.from) {\n                        filter.and.push({\n                            gt: {\n                                operationDate: timeObj.from\n                            }\n                        });\n\n                        if (timeObj.to) {\n                            filter.and.push({\n                                lt: {\n                                    operationDate: timeObj.to\n                                }\n                            });\n                        }\n                    } else {\n                        filter = null;\n                    }\n                    return filter;\n                }\n\n                var createQuickFilter = function(fieldsQuickSearch, filter) {\n                    var _filter = {\n                        or: []\n                    };\n                    var criteria;\n                    fieldsQuickSearch.forEach(function(field) {\n                        criteria = {};\n                        criteria[field.operator] = {};\n                        criteria[field.operator][field.name] = $scope.config.filter;\n                        _filter.or.push(criteria);\n                    });\n                    return _filter;\n                }\n\n                $scope.downloadCsv = function() {\n                    var columns = $scope.config.columns;\n                    var scope_filter = $scope.config.filter;\n                    var extra_filter;\n                    var final_filter = {};\n                    var order = $scope.config.sort ? $scope.config.sort : undefined;\n                    if ($scope.config.windowFilter) {\n                        var window_filter = $scope.config.onWindowTimeChanged($scope.config.windowFilter);\n                        if (window_filter && window_filter.and) {\n                            extra_filter = {\n                                and: window_filter.and\n                            };\n                        }\n                    }\n                    var filter;\n                    if (scope_filter.value && scope_filter.value.length > 4) {\n                        filter = JSON.parse(scope_filter.value);\n                    } else if (typeof scope_filter === 'string' && scope_filter.trim() !== '') {\n                        filter = createQuickFilter($scope.config.fieldsQuickSearch, scope_filter);\n                    }\n                    if (extra_filter) {\n                        if (filter) {\n                            final_filter = {\n                                and: [extra_filter, filter]\n                            };\n                        } else {\n                            final_filter = extra_filter;\n                        }\n                    } else {\n                        final_filter = filter;\n                    }\n                    $scope.$broadcast('downloadCsv', {\n                        'columns': columns,\n                        'filter': final_filter,\n                        'order': order\n                    });\n                };\n\n                $scope.generateQR = function() {\n                    $scope.$broadcast('generateQR');\n                };\n\n                var addItemToSelection = $scope.$on('addItemToSelection', function(event, item) {\n                    if (!$scope.selectedItems[item.key]) {\n                        $scope.selectedItems[item.key] = {\n                            data: item.data,\n                            visible: item.visible\n                        };\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n                        item.isSelected = true;\n                        $scope.selectionManager.lastItem = item;\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n                    }\n\n                });\n\n                var removeItemFromSelection = $scope.$on('removeItemFromSelection', function(event, item) {\n                    if ($scope.selectedItems[item.key]) {\n                        delete $scope.selectedItems[item.key];\n                        $scope.selectedItemsLength = Object.keys($scope.selectedItems).length;\n                        item.isSelected = false;\n                        $scope.selectionManager.lastItem = item;\n                        $scope.$broadcast('widgetSelectionChanged', $scope.selectionManager);\n                    }\n                });\n\n                // bind reload function\n                var stopReloadTimeout;\n\n                $scope.setReloadTimeout = function() {\n                    var config = $scope.config || $scope.definition.config;\n\n                    if (config) {\n                        var reloadPeriod = config.reloadPeriod;\n                        if (!isNaN(reloadPeriod) && (reloadPeriod * 1) !== 0) {\n                            if (angular.isDefined(stopReloadTimeout)) {\n                                $interval.cancel(stopReloadTimeout)\n                                stopReloadTimeout = undefined;\n                            };\n                            stopReloadTimeout = $interval($scope.reload, (reloadPeriod * 1000));\n                        } else if (stopReloadTimeout) {\n                            $interval.cancel(stopReloadTimeout);\n                        }\n                    }\n                }\n\n                $scope.reload = function(completeReload) {\n                    if (completeReload) {\n                        $scope.$broadcast('widgetReload', completeReload);\n                    } else {\n                        $scope.$broadcast('widgetReload');\n                    }\n\n                    $scope.setReloadTimeout();\n                };\n\n                // verificacion de periodo de refresco\n                $scope.setReloadTimeout();\n\n                $scope.$on('$destroy', function() {\n                    adfDashboardCollapseExpand();\n                    adfWidgetEnterEditMode();\n                    adfIsEditMode();\n                    adfDashboardChanged();\n                    adfDashboardEditsCancelled();\n                    addItemToSelection();\n                    removeItemFromSelection();\n                    $interval.cancel(stopReloadTimeout);\n                });\n            },\n            compile: function() {\n\n                /**\n                 * use pre link, because link of widget-content\n                 * is executed before post link widget\n                 */\n                return {\n                    pre: preLink,\n                    post: postLink\n                };\n            }\n        };\n\n    });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n/**\n * The widget service provide helper functions to render widgets and their content.\n */\nangular.module('adf')\n  .factory('widgetService', function($http, $q, $sce, $templateCache, dashboard) {\n    \n\n    function parseUrl(url) {\n      var parsedUrl = url;\n      if (url.indexOf('{widgetsPath}') >= 0) {\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\n                .replace('//', '/');\n        if (parsedUrl.indexOf('/') === 0) {\n          parsedUrl = parsedUrl.substring(1);\n        }\n      }\n      return parsedUrl;\n    }\n\n    var exposed = {};\n\n    exposed.getTemplate = function(widget){\n      var deferred = $q.defer();\n\n      if (widget.template) {\n        deferred.resolve(widget.template);\n      } else if (widget.templateUrl) {\n        // try to fetch template from cache\n        var tpl = $templateCache.get(widget.templateUrl);\n        if (tpl) {\n          deferred.resolve(tpl);\n        } else {\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\n          $http.get(url)\n               .success(function(response) {\n                 // put response to cache, with unmodified url as key\n                 $templateCache.put(widget.templateUrl, response);\n                 deferred.resolve(response);\n               })\n               .error(function() {\n                 deferred.reject('could not load template');\n               });\n        }\n      }\n\n      return deferred.promise;\n    };\n\n    return exposed;\n  });\n\n})(window);"]}